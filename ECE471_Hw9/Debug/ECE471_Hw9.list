
ECE471_Hw9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a27c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005964  0801a44c  0801a44c  0002a44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fdb0  0801fdb0  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801fdb0  0801fdb0  0002fdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fdb8  0801fdb8  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fdb8  0801fdb8  0002fdb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fdbc  0801fdbc  0002fdbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801fdc0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a8  0801fe68  000300a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000148  0801ff08  00030148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d01c  200001e8  0801ffa8  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000d204  0801ffa8  0003d204  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 15 .debug_info   00035138  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008419  00000000  00000000  00065393  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002868  00000000  00000000  0006d7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001fe8  00000000  00000000  00070018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00039ad4  00000000  00000000  00072000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003fd2c  00000000  00000000  000abad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0012130c  00000000  00000000  000eb800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000b1f0  00000000  00000000  0020cb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  00217cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801a434 	.word	0x0801a434

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0801a434 	.word	0x0801a434

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000204 	.word	0x20000204
 800060c:	20000258 	.word	0x20000258

08000610 <setPWM>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//function sets PWM to a desired value from 0 - 11
void setPWM(enum led led, int value){
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]

	int dutyCycle = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

		switch(value){	//set the duty cycle
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	3b01      	subs	r3, #1
 8000624:	2b06      	cmp	r3, #6
 8000626:	d866      	bhi.n	80006f6 <setPWM+0xe6>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <setPWM+0x20>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	0800064d 	.word	0x0800064d
 8000634:	08000661 	.word	0x08000661
 8000638:	08000677 	.word	0x08000677
 800063c:	08000691 	.word	0x08000691
 8000640:	080006a7 	.word	0x080006a7
 8000644:	080006c1 	.word	0x080006c1
 8000648:	080006dd 	.word	0x080006dd
			case 1:
				dutyCycle =(max/10);
 800064c:	4b47      	ldr	r3, [pc, #284]	; (800076c <setPWM+0x15c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a47      	ldr	r2, [pc, #284]	; (8000770 <setPWM+0x160>)
 8000652:	fb82 1203 	smull	r1, r2, r2, r3
 8000656:	1092      	asrs	r2, r2, #2
 8000658:	17db      	asrs	r3, r3, #31
 800065a:	1ad3      	subs	r3, r2, r3
 800065c:	60fb      	str	r3, [r7, #12]
				break;
 800065e:	e056      	b.n	800070e <setPWM+0xfe>
			case 2:
				dutyCycle =2*(max/10);
 8000660:	4b42      	ldr	r3, [pc, #264]	; (800076c <setPWM+0x15c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a42      	ldr	r2, [pc, #264]	; (8000770 <setPWM+0x160>)
 8000666:	fb82 1203 	smull	r1, r2, r2, r3
 800066a:	1092      	asrs	r2, r2, #2
 800066c:	17db      	asrs	r3, r3, #31
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	60fb      	str	r3, [r7, #12]
				break;
 8000674:	e04b      	b.n	800070e <setPWM+0xfe>
			case 3:
				dutyCycle =3*(max/10);
 8000676:	4b3d      	ldr	r3, [pc, #244]	; (800076c <setPWM+0x15c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a3d      	ldr	r2, [pc, #244]	; (8000770 <setPWM+0x160>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1092      	asrs	r2, r2, #2
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	4613      	mov	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
				break;
 800068e:	e03e      	b.n	800070e <setPWM+0xfe>
			case 4:
				dutyCycle =4*(max/10);
 8000690:	4b36      	ldr	r3, [pc, #216]	; (800076c <setPWM+0x15c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a36      	ldr	r2, [pc, #216]	; (8000770 <setPWM+0x160>)
 8000696:	fb82 1203 	smull	r1, r2, r2, r3
 800069a:	1092      	asrs	r2, r2, #2
 800069c:	17db      	asrs	r3, r3, #31
 800069e:	1ad3      	subs	r3, r2, r3
 80006a0:	009b      	lsls	r3, r3, #2
 80006a2:	60fb      	str	r3, [r7, #12]
				break;
 80006a4:	e033      	b.n	800070e <setPWM+0xfe>
			case 5:
				dutyCycle =5*(max/10);
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <setPWM+0x15c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a31      	ldr	r2, [pc, #196]	; (8000770 <setPWM+0x160>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1092      	asrs	r2, r2, #2
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad2      	subs	r2, r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
				break;
 80006be:	e026      	b.n	800070e <setPWM+0xfe>
			case 6:
				dutyCycle =6*(max/10);
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <setPWM+0x15c>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a2a      	ldr	r2, [pc, #168]	; (8000770 <setPWM+0x160>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1092      	asrs	r2, r2, #2
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad2      	subs	r2, r2, r3
 80006d0:	4613      	mov	r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	4413      	add	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	60fb      	str	r3, [r7, #12]
				break;
 80006da:	e018      	b.n	800070e <setPWM+0xfe>
			case 7:
				dutyCycle =7*(max/10);
 80006dc:	4b23      	ldr	r3, [pc, #140]	; (800076c <setPWM+0x15c>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a23      	ldr	r2, [pc, #140]	; (8000770 <setPWM+0x160>)
 80006e2:	fb82 1203 	smull	r1, r2, r2, r3
 80006e6:	1092      	asrs	r2, r2, #2
 80006e8:	17db      	asrs	r3, r3, #31
 80006ea:	1ad2      	subs	r2, r2, r3
 80006ec:	4613      	mov	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	1a9b      	subs	r3, r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
				break;
 80006f4:	e00b      	b.n	800070e <setPWM+0xfe>
			default:
				dutyCycle =3*(max/10);
 80006f6:	4b1d      	ldr	r3, [pc, #116]	; (800076c <setPWM+0x15c>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a1d      	ldr	r2, [pc, #116]	; (8000770 <setPWM+0x160>)
 80006fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000700:	1092      	asrs	r2, r2, #2
 8000702:	17db      	asrs	r3, r3, #31
 8000704:	1ad2      	subs	r2, r2, r3
 8000706:	4613      	mov	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	4413      	add	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
		}
		//make sure duty cycle stays within the range
		if(value>7){
 800070e:	683b      	ldr	r3, [r7, #0]
 8000710:	2b07      	cmp	r3, #7
 8000712:	dd0c      	ble.n	800072e <setPWM+0x11e>
			dutyCycle =7*(max/10);
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <setPWM+0x15c>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a15      	ldr	r2, [pc, #84]	; (8000770 <setPWM+0x160>)
 800071a:	fb82 1203 	smull	r1, r2, r2, r3
 800071e:	1092      	asrs	r2, r2, #2
 8000720:	17db      	asrs	r3, r3, #31
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	4613      	mov	r3, r2
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	1a9b      	subs	r3, r3, r2
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	e00b      	b.n	8000746 <setPWM+0x136>
		}
		else if(value<1){
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	dc08      	bgt.n	8000746 <setPWM+0x136>
			dutyCycle =(max/10);
 8000734:	4b0d      	ldr	r3, [pc, #52]	; (800076c <setPWM+0x15c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <setPWM+0x160>)
 800073a:	fb82 1203 	smull	r1, r2, r2, r3
 800073e:	1092      	asrs	r2, r2, #2
 8000740:	17db      	asrs	r3, r3, #31
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	60fb      	str	r3, [r7, #12]
		}

		if(led == green){
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d103      	bne.n	8000754 <setPWM+0x144>
			TIM3->CCR3 = dutyCycle;
 800074c:	4a09      	ldr	r2, [pc, #36]	; (8000774 <setPWM+0x164>)
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		else if (led == red){
			TIM12->CCR1 = dutyCycle;
		}
}
 8000752:	e005      	b.n	8000760 <setPWM+0x150>
		else if (led == red){
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d102      	bne.n	8000760 <setPWM+0x150>
			TIM12->CCR1 = dutyCycle;
 800075a:	4a07      	ldr	r2, [pc, #28]	; (8000778 <setPWM+0x168>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000760:	bf00      	nop
 8000762:	3714      	adds	r7, #20
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	20000004 	.word	0x20000004
 8000770:	66666667 	.word	0x66666667
 8000774:	40000400 	.word	0x40000400
 8000778:	40001800 	.word	0x40001800

0800077c <custom_SSI_handler>:
/* USER CODE BEGIN 0 */
#define custom_SSI_tag_num 4
const char* custom_SSI_tags[custom_SSI_tag_num] = {"lred", "lgreen", "lblue", "buser"};

uint16_t custom_SSI_handler(const char* ssi_tag_name, char *pcInsert, int iInsertLen)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]

  if ( iInsertLen < 10 ) {
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b09      	cmp	r3, #9
 800078c:	dc02      	bgt.n	8000794 <custom_SSI_handler+0x18>
      // if the buffer size is smaller than the longest response then indicate an error
      return(-1);
 800078e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000792:	e093      	b.n	80008bc <custom_SSI_handler+0x140>
  }

  if (strcmp(ssi_tag_name, custom_SSI_tags[0])==0) {
 8000794:	4b4b      	ldr	r3, [pc, #300]	; (80008c4 <custom_SSI_handler+0x148>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4619      	mov	r1, r3
 800079a:	68f8      	ldr	r0, [r7, #12]
 800079c:	f7ff fd38 	bl	8000210 <strcmp>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d11a      	bne.n	80007dc <custom_SSI_handler+0x60>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) {
 80007a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007aa:	4847      	ldr	r0, [pc, #284]	; (80008c8 <custom_SSI_handler+0x14c>)
 80007ac:	f003 f908 	bl	80039c0 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <custom_SSI_handler+0x48>
          strcpy(pcInsert, "1");
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	4944      	ldr	r1, [pc, #272]	; (80008cc <custom_SSI_handler+0x150>)
 80007ba:	461a      	mov	r2, r3
 80007bc:	460b      	mov	r3, r1
 80007be:	881b      	ldrh	r3, [r3, #0]
 80007c0:	8013      	strh	r3, [r2, #0]
 80007c2:	e005      	b.n	80007d0 <custom_SSI_handler+0x54>
      } else {
          strcpy(pcInsert, "0");
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	4942      	ldr	r1, [pc, #264]	; (80008d0 <custom_SSI_handler+0x154>)
 80007c8:	461a      	mov	r2, r3
 80007ca:	460b      	mov	r3, r1
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 80007d0:	68b8      	ldr	r0, [r7, #8]
 80007d2:	f7ff fd27 	bl	8000224 <strlen>
 80007d6:	4603      	mov	r3, r0
 80007d8:	b29b      	uxth	r3, r3
 80007da:	e06f      	b.n	80008bc <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[1])==0) {
 80007dc:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <custom_SSI_handler+0x148>)
 80007de:	685b      	ldr	r3, [r3, #4]
 80007e0:	4619      	mov	r1, r3
 80007e2:	68f8      	ldr	r0, [r7, #12]
 80007e4:	f7ff fd14 	bl	8000210 <strcmp>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d119      	bne.n	8000822 <custom_SSI_handler+0xa6>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 80007ee:	2101      	movs	r1, #1
 80007f0:	4835      	ldr	r0, [pc, #212]	; (80008c8 <custom_SSI_handler+0x14c>)
 80007f2:	f003 f8e5 	bl	80039c0 <HAL_GPIO_ReadPin>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d006      	beq.n	800080a <custom_SSI_handler+0x8e>
          strcpy(pcInsert, "1");
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	4933      	ldr	r1, [pc, #204]	; (80008cc <custom_SSI_handler+0x150>)
 8000800:	461a      	mov	r2, r3
 8000802:	460b      	mov	r3, r1
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	8013      	strh	r3, [r2, #0]
 8000808:	e005      	b.n	8000816 <custom_SSI_handler+0x9a>
      } else {
          strcpy(pcInsert, "0");
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	4930      	ldr	r1, [pc, #192]	; (80008d0 <custom_SSI_handler+0x154>)
 800080e:	461a      	mov	r2, r3
 8000810:	460b      	mov	r3, r1
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 8000816:	68b8      	ldr	r0, [r7, #8]
 8000818:	f7ff fd04 	bl	8000224 <strlen>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	e04c      	b.n	80008bc <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[2])==0) {
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <custom_SSI_handler+0x148>)
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	4619      	mov	r1, r3
 8000828:	68f8      	ldr	r0, [r7, #12]
 800082a:	f7ff fcf1 	bl	8000210 <strcmp>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d119      	bne.n	8000868 <custom_SSI_handler+0xec>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	4824      	ldr	r0, [pc, #144]	; (80008c8 <custom_SSI_handler+0x14c>)
 8000838:	f003 f8c2 	bl	80039c0 <HAL_GPIO_ReadPin>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d006      	beq.n	8000850 <custom_SSI_handler+0xd4>
          strcpy(pcInsert, "1");
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	4921      	ldr	r1, [pc, #132]	; (80008cc <custom_SSI_handler+0x150>)
 8000846:	461a      	mov	r2, r3
 8000848:	460b      	mov	r3, r1
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	8013      	strh	r3, [r2, #0]
 800084e:	e005      	b.n	800085c <custom_SSI_handler+0xe0>
      } else {
          strcpy(pcInsert, "0");
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	491f      	ldr	r1, [pc, #124]	; (80008d0 <custom_SSI_handler+0x154>)
 8000854:	461a      	mov	r2, r3
 8000856:	460b      	mov	r3, r1
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	f7ff fce1 	bl	8000224 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29b      	uxth	r3, r3
 8000866:	e029      	b.n	80008bc <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[3])==0) {
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <custom_SSI_handler+0x148>)
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	4619      	mov	r1, r3
 800086e:	68f8      	ldr	r0, [r7, #12]
 8000870:	f7ff fcce 	bl	8000210 <strcmp>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d11e      	bne.n	80008b8 <custom_SSI_handler+0x13c>
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800087a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800087e:	4815      	ldr	r0, [pc, #84]	; (80008d4 <custom_SSI_handler+0x158>)
 8000880:	f003 f89e 	bl	80039c0 <HAL_GPIO_ReadPin>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d007      	beq.n	800089a <custom_SSI_handler+0x11e>
          strcpy(pcInsert, "pressed");
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	4912      	ldr	r1, [pc, #72]	; (80008d8 <custom_SSI_handler+0x15c>)
 800088e:	461a      	mov	r2, r3
 8000890:	460b      	mov	r3, r1
 8000892:	cb03      	ldmia	r3!, {r0, r1}
 8000894:	6010      	str	r0, [r2, #0]
 8000896:	6051      	str	r1, [r2, #4]
 8000898:	e008      	b.n	80008ac <custom_SSI_handler+0x130>
      } else {
          strcpy(pcInsert, "released");
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	490f      	ldr	r1, [pc, #60]	; (80008dc <custom_SSI_handler+0x160>)
 800089e:	461a      	mov	r2, r3
 80008a0:	460b      	mov	r3, r1
 80008a2:	cb03      	ldmia	r3!, {r0, r1}
 80008a4:	6010      	str	r0, [r2, #0]
 80008a6:	6051      	str	r1, [r2, #4]
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	7213      	strb	r3, [r2, #8]
      }
      return(strlen(pcInsert));
 80008ac:	68b8      	ldr	r0, [r7, #8]
 80008ae:	f7ff fcb9 	bl	8000224 <strlen>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b29b      	uxth	r3, r3
 80008b6:	e001      	b.n	80008bc <custom_SSI_handler+0x140>
  } else {
      // otherwise, return unrecognized tag error
    return(-1);
 80008b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
  }

}
 80008bc:	4618      	mov	r0, r3
 80008be:	3710      	adds	r7, #16
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000008 	.word	0x20000008
 80008c8:	40020400 	.word	0x40020400
 80008cc:	0801a46c 	.word	0x0801a46c
 80008d0:	0801a470 	.word	0x0801a470
 80008d4:	40020800 	.word	0x40020800
 80008d8:	0801a474 	.word	0x0801a474
 80008dc:	0801a47c 	.word	0x0801a47c

080008e0 <setRED>:
 * request being ignored.
 *
 */

const char * setRED(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
 80008ec:	603b      	str	r3, [r7, #0]

	  if (iNumParams==1) {
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	d10b      	bne.n	800090c <setRED+0x2c>
	        setPWM(redLed, atoi(pcValue[0]));
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <setRED+0x38>)
 80008f6:	781c      	ldrb	r4, [r3, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f018 fce7 	bl	80192d0 <atoi>
 8000902:	4603      	mov	r3, r0
 8000904:	4619      	mov	r1, r3
 8000906:	4620      	mov	r0, r4
 8000908:	f7ff fe82 	bl	8000610 <setPWM>
		}
    return("/index.shtml");
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <setRED+0x3c>)
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bd90      	pop	{r4, r7, pc}
 8000916:	bf00      	nop
 8000918:	20000458 	.word	0x20000458
 800091c:	0801a488 	.word	0x0801a488

08000920 <setGRN>:

const char * setGRN(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b085      	sub	sp, #20
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	603b      	str	r3, [r7, #0]

    if (iNumParams==1) {
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d10b      	bne.n	800094c <setGRN+0x2c>
        setPWM(greenLed, atoi(pcValue[0]));
 8000934:	4b08      	ldr	r3, [pc, #32]	; (8000958 <setGRN+0x38>)
 8000936:	781c      	ldrb	r4, [r3, #0]
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f018 fcc7 	bl	80192d0 <atoi>
 8000942:	4603      	mov	r3, r0
 8000944:	4619      	mov	r1, r3
 8000946:	4620      	mov	r0, r4
 8000948:	f7ff fe62 	bl	8000610 <setPWM>
	}

    return("/index.shtml");
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <setGRN+0x3c>)
}
 800094e:	4618      	mov	r0, r3
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bd90      	pop	{r4, r7, pc}
 8000956:	bf00      	nop
 8000958:	20000000 	.word	0x20000000
 800095c:	0801a488 	.word	0x0801a488

08000960 <setBLU>:

const char * setBLU(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
    if (iNumParams==1) {
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d114      	bne.n	800099e <setBLU+0x3e>
        if (atoi(pcValue[0])==1) {
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4618      	mov	r0, r3
 800097a:	f018 fca9 	bl	80192d0 <atoi>
 800097e:	4603      	mov	r3, r0
 8000980:	2b01      	cmp	r3, #1
 8000982:	d106      	bne.n	8000992 <setBLU+0x32>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000984:	2201      	movs	r2, #1
 8000986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800098a:	4807      	ldr	r0, [pc, #28]	; (80009a8 <setBLU+0x48>)
 800098c:	f003 f830 	bl	80039f0 <HAL_GPIO_WritePin>
 8000990:	e005      	b.n	800099e <setBLU+0x3e>

        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <setBLU+0x48>)
 800099a:	f003 f829 	bl	80039f0 <HAL_GPIO_WritePin>
        }
    }
    return("/index.shtml");
 800099e:	4b03      	ldr	r3, [pc, #12]	; (80009ac <setBLU+0x4c>)
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40020400 	.word	0x40020400
 80009ac:	0801a488 	.word	0x0801a488

080009b0 <setALL>:

const char * setALL(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
    // Warning: use atoi_r instead of atoi in case you also use this function inside a RTOS task
    for (int i=0; i<iNumParams; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
 80009c2:	e05c      	b.n	8000a7e <setALL+0xce>
        if (strcmp(pcParam[i],"red")==0) {
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	4413      	add	r3, r2
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4930      	ldr	r1, [pc, #192]	; (8000a90 <setALL+0xe0>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff fc1d 	bl	8000210 <strcmp>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10f      	bne.n	80009fc <setALL+0x4c>

        	setPWM(redLed, atoi(pcValue[i]));
 80009dc:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <setALL+0xe4>)
 80009de:	781c      	ldrb	r4, [r3, #0]
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4618      	mov	r0, r3
 80009ec:	f018 fc70 	bl	80192d0 <atoi>
 80009f0:	4603      	mov	r3, r0
 80009f2:	4619      	mov	r1, r3
 80009f4:	4620      	mov	r0, r4
 80009f6:	f7ff fe0b 	bl	8000610 <setPWM>
 80009fa:	e03d      	b.n	8000a78 <setALL+0xc8>

        } else if (strcmp(pcParam[i],"green")==0) {
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	687a      	ldr	r2, [r7, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4924      	ldr	r1, [pc, #144]	; (8000a98 <setALL+0xe8>)
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f7ff fc01 	bl	8000210 <strcmp>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d10f      	bne.n	8000a34 <setALL+0x84>

			setPWM(greenLed, atoi(pcValue[i]));
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <setALL+0xec>)
 8000a16:	781c      	ldrb	r4, [r3, #0]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	683a      	ldr	r2, [r7, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f018 fc54 	bl	80192d0 <atoi>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4620      	mov	r0, r4
 8000a2e:	f7ff fdef 	bl	8000610 <setPWM>
 8000a32:	e021      	b.n	8000a78 <setALL+0xc8>


        } else if (strcmp(pcParam[i],"blue")==0) {
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	009b      	lsls	r3, r3, #2
 8000a38:	687a      	ldr	r2, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	4918      	ldr	r1, [pc, #96]	; (8000aa0 <setALL+0xf0>)
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff fbe5 	bl	8000210 <strcmp>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d115      	bne.n	8000a78 <setALL+0xc8>
            if (atoi(pcValue[i])==1) {
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	683a      	ldr	r2, [r7, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4618      	mov	r0, r3
 8000a58:	f018 fc3a 	bl	80192d0 <atoi>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d105      	bne.n	8000a6e <setALL+0xbe>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a62:	2201      	movs	r2, #1
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <setALL+0xf4>)
 8000a68:	f002 ffc2 	bl	80039f0 <HAL_GPIO_WritePin>
 8000a6c:	e004      	b.n	8000a78 <setALL+0xc8>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <setALL+0xf4>)
 8000a74:	f002 ffbc 	bl	80039f0 <HAL_GPIO_WritePin>
    for (int i=0; i<iNumParams; i++) {
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	697a      	ldr	r2, [r7, #20]
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	429a      	cmp	r2, r3
 8000a84:	db9e      	blt.n	80009c4 <setALL+0x14>
            }
        } // else invalid parameters are simply ignored in this example
    }
    // we return the status page as confirmation in this example
    return("/index.shtml");
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <setALL+0xf8>)
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	371c      	adds	r7, #28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd90      	pop	{r4, r7, pc}
 8000a90:	0801a498 	.word	0x0801a498
 8000a94:	20000458 	.word	0x20000458
 8000a98:	0801a49c 	.word	0x0801a49c
 8000a9c:	20000000 	.word	0x20000000
 8000aa0:	0801a4a4 	.word	0x0801a4a4
 8000aa4:	40020400 	.word	0x40020400
 8000aa8:	0801a488 	.word	0x0801a488

08000aac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b088      	sub	sp, #32
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab2:	f000 ffc3 	bl	8001a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab6:	f000 f821 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aba:	f000 fa13 	bl	8000ee4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000abe:	f000 f9b3 	bl	8000e28 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ac2:	f000 f9e1 	bl	8000e88 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ac6:	f000 f881 	bl	8000bcc <MX_ADC1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <main+0x48>)
 8000acc:	1d3c      	adds	r4, r7, #4
 8000ace:	461d      	mov	r5, r3
 8000ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f007 f869 	bl	8007bb8 <osThreadCreate>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	4a03      	ldr	r2, [pc, #12]	; (8000af8 <main+0x4c>)
 8000aea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000aec:	f007 f84d 	bl	8007b8a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <main+0x44>
 8000af2:	bf00      	nop
 8000af4:	0801a4f0 	.word	0x0801a4f0
 8000af8:	20000acc 	.word	0x20000acc

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	; 0x50
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	2230      	movs	r2, #48	; 0x30
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f018 fdc3 	bl	8019696 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b20:	f003 f8c8 	bl	8003cb4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <SystemClock_Config+0xc8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a26      	ldr	r2, [pc, #152]	; (8000bc4 <SystemClock_Config+0xc8>)
 8000b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <SystemClock_Config+0xc8>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b3c:	4b22      	ldr	r3, [pc, #136]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b44:	4a20      	ldr	r2, [pc, #128]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b1e      	ldr	r3, [pc, #120]	; (8000bc8 <SystemClock_Config+0xcc>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b5c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b62:	2302      	movs	r3, #2
 8000b64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b66:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b6c:	2304      	movs	r3, #4
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b70:	2348      	movs	r3, #72	; 0x48
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b74:	2302      	movs	r3, #2
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b78:	2303      	movs	r3, #3
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b7c:	f107 0320 	add.w	r3, r7, #32
 8000b80:	4618      	mov	r0, r3
 8000b82:	f003 f8a7 	bl	8003cd4 <HAL_RCC_OscConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b8c:	f000 fa95 	bl	80010ba <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b90:	230f      	movs	r3, #15
 8000b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b94:	2302      	movs	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ba6:	f107 030c 	add.w	r3, r7, #12
 8000baa:	2102      	movs	r1, #2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f003 fb35 	bl	800421c <HAL_RCC_ClockConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb8:	f000 fa7f 	bl	80010ba <Error_Handler>
  }
}
 8000bbc:	bf00      	nop
 8000bbe:	3750      	adds	r7, #80	; 0x50
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800
 8000bc8:	40007000 	.word	0x40007000

08000bcc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bd2:	463b      	mov	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bde:	4b21      	ldr	r3, [pc, #132]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000be0:	4a21      	ldr	r2, [pc, #132]	; (8000c68 <MX_ADC1_Init+0x9c>)
 8000be2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bea:	4b1e      	ldr	r3, [pc, #120]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c0c:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_ADC1_Init+0xa0>)
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c10:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c16:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c2a:	480e      	ldr	r0, [pc, #56]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c2c:	f000 ff58 	bl	8001ae0 <HAL_ADC_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c36:	f000 fa40 	bl	80010ba <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_ADC1_Init+0xa4>)
 8000c3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000c42:	2307      	movs	r3, #7
 8000c44:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	463b      	mov	r3, r7
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <MX_ADC1_Init+0x98>)
 8000c4c:	f000 ff8c 	bl	8001b68 <HAL_ADC_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c56:	f000 fa30 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000045c 	.word	0x2000045c
 8000c68:	40012000 	.word	0x40012000
 8000c6c:	0f000001 	.word	0x0f000001
 8000c70:	10000012 	.word	0x10000012

08000c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c94:	463b      	mov	r3, r7
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
 8000ca2:	615a      	str	r2, [r3, #20]
 8000ca4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ca6:	4b2d      	ldr	r3, [pc, #180]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000ca8:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <MX_TIM3_Init+0xec>)
 8000caa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cac:	4b2b      	ldr	r3, [pc, #172]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cb8:	4b28      	ldr	r3, [pc, #160]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cbe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc6:	4b25      	ldr	r3, [pc, #148]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ccc:	4823      	ldr	r0, [pc, #140]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cce:	f004 f8ed 	bl	8004eac <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000cd8:	f000 f9ef 	bl	80010ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481c      	ldr	r0, [pc, #112]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cea:	f004 fd3f 	bl	800576c <HAL_TIM_ConfigClockSource>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000cf4:	f000 f9e1 	bl	80010ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cf8:	4818      	ldr	r0, [pc, #96]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000cfa:	f004 f9a7 	bl	800504c <HAL_TIM_PWM_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d04:	f000 f9d9 	bl	80010ba <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000d18:	f005 f9d8 	bl	80060cc <HAL_TIMEx_MasterConfigSynchronization>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d22:	f000 f9ca 	bl	80010ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d26:	2360      	movs	r3, #96	; 0x60
 8000d28:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	2208      	movs	r2, #8
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4807      	ldr	r0, [pc, #28]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000d3e:	f004 fc01 	bl	8005544 <HAL_TIM_PWM_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000d48:	f000 f9b7 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d4c:	4803      	ldr	r0, [pc, #12]	; (8000d5c <MX_TIM3_Init+0xe8>)
 8000d4e:	f000 fa35 	bl	80011bc <HAL_TIM_MspPostInit>

}
 8000d52:	bf00      	nop
 8000d54:	3738      	adds	r7, #56	; 0x38
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200004a4 	.word	0x200004a4
 8000d60:	40000400 	.word	0x40000400

08000d64 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0320 	add.w	r3, r7, #32
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]
 8000d86:	615a      	str	r2, [r3, #20]
 8000d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d8a:	4b25      	ldr	r3, [pc, #148]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000d8c:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <MX_TIM12_Init+0xc0>)
 8000d8e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000d90:	4b23      	ldr	r3, [pc, #140]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da4:	4b1e      	ldr	r3, [pc, #120]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000db0:	481b      	ldr	r0, [pc, #108]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000db2:	f004 f87b 	bl	8004eac <HAL_TIM_Base_Init>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000dbc:	f000 f97d 	bl	80010ba <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4814      	ldr	r0, [pc, #80]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000dce:	f004 fccd 	bl	800576c <HAL_TIM_ConfigClockSource>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000dd8:	f000 f96f 	bl	80010ba <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000ddc:	4810      	ldr	r0, [pc, #64]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000dde:	f004 f935 	bl	800504c <HAL_TIM_PWM_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000de8:	f000 f967 	bl	80010ba <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dec:	2360      	movs	r3, #96	; 0x60
 8000dee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	4619      	mov	r1, r3
 8000e02:	4807      	ldr	r0, [pc, #28]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000e04:	f004 fb9e 	bl	8005544 <HAL_TIM_PWM_ConfigChannel>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000e0e:	f000 f954 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000e12:	4803      	ldr	r0, [pc, #12]	; (8000e20 <MX_TIM12_Init+0xbc>)
 8000e14:	f000 f9d2 	bl	80011bc <HAL_TIM_MspPostInit>

}
 8000e18:	bf00      	nop
 8000e1a:	3730      	adds	r7, #48	; 0x30
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200004f0 	.word	0x200004f0
 8000e24:	40001800 	.word	0x40001800

08000e28 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e2c:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <MX_USART3_UART_Init+0x5c>)
 8000e30:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e38:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e46:	4b0e      	ldr	r3, [pc, #56]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e4e:	220c      	movs	r2, #12
 8000e50:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e58:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e64:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_USART3_UART_Init+0x58>)
 8000e6c:	f005 f9da 	bl	8006224 <HAL_UART_Init>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e76:	f000 f920 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000053c 	.word	0x2000053c
 8000e84:	40004800 	.word	0x40004800

08000e88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e8c:	4b14      	ldr	r3, [pc, #80]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e8e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e92:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e96:	2206      	movs	r2, #6
 8000e98:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ea8:	2202      	movs	r2, #2
 8000eaa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000eb8:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ecc:	f002 fda9 	bl	8003a22 <HAL_PCD_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ed6:	f000 f8f0 	bl	80010ba <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200005c4 	.word	0x200005c4

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 031c 	add.w	r3, r7, #28
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
 8000ef8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efa:	4b46      	ldr	r3, [pc, #280]	; (8001014 <MX_GPIO_Init+0x130>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	4a45      	ldr	r2, [pc, #276]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f00:	f043 0304 	orr.w	r3, r3, #4
 8000f04:	6313      	str	r3, [r2, #48]	; 0x30
 8000f06:	4b43      	ldr	r3, [pc, #268]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	f003 0304 	and.w	r3, r3, #4
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b40      	ldr	r3, [pc, #256]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b3d      	ldr	r3, [pc, #244]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b3a      	ldr	r3, [pc, #232]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a39      	ldr	r2, [pc, #228]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b37      	ldr	r3, [pc, #220]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b34      	ldr	r3, [pc, #208]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a33      	ldr	r2, [pc, #204]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b31      	ldr	r3, [pc, #196]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f60:	f043 0308 	orr.w	r3, r3, #8
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0308 	and.w	r3, r3, #8
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <MX_GPIO_Init+0x130>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2140      	movs	r1, #64	; 0x40
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <MX_GPIO_Init+0x134>)
 8000f90:	f002 fd2e 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2180      	movs	r1, #128	; 0x80
 8000f98:	4820      	ldr	r0, [pc, #128]	; (800101c <MX_GPIO_Init+0x138>)
 8000f9a:	f002 fd29 	bl	80039f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fa4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	481a      	ldr	r0, [pc, #104]	; (8001020 <MX_GPIO_Init+0x13c>)
 8000fb6:	f002 fb57 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000fba:	2340      	movs	r3, #64	; 0x40
 8000fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4811      	ldr	r0, [pc, #68]	; (8001018 <MX_GPIO_Init+0x134>)
 8000fd2:	f002 fb49 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000fd6:	2380      	movs	r3, #128	; 0x80
 8000fd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <MX_GPIO_Init+0x134>)
 8000fea:	f002 fb3d 	bl	8003668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_GPIO_Init+0x138>)
 8001006:	f002 fb2f 	bl	8003668 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100a:	bf00      	nop
 800100c:	3730      	adds	r7, #48	; 0x30
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800
 8001018:	40021800 	.word	0x40021800
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800

08001024 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 800102c:	f006 f840 	bl	80070b0 <MX_LWIP_Init>
  MX_TIM3_Init();
 8001030:	f7ff fe20 	bl	8000c74 <MX_TIM3_Init>
  MX_TIM12_Init();
 8001034:	f7ff fe96 	bl	8000d64 <MX_TIM12_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001038:	2108      	movs	r1, #8
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <StartDefaultTask+0x5c>)
 800103c:	f004 f868 	bl	8005110 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001040:	2100      	movs	r1, #0
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <StartDefaultTask+0x60>)
 8001044:	f004 f864 	bl	8005110 <HAL_TIM_PWM_Start>
  setPWM(greenLed, 3);
 8001048:	4b0f      	ldr	r3, [pc, #60]	; (8001088 <StartDefaultTask+0x64>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	2103      	movs	r1, #3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fade 	bl	8000610 <setPWM>
  setPWM(redLed, 3);
 8001054:	4b0d      	ldr	r3, [pc, #52]	; (800108c <StartDefaultTask+0x68>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2103      	movs	r1, #3
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fad8 	bl	8000610 <setPWM>
  /* USER CODE BEGIN 5 */
  //set up the web server
  http_set_ssi_handler(custom_SSI_handler, custom_SSI_tags, custom_SSI_tag_num);
 8001060:	2204      	movs	r2, #4
 8001062:	490b      	ldr	r1, [pc, #44]	; (8001090 <StartDefaultTask+0x6c>)
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <StartDefaultTask+0x70>)
 8001066:	f00b f8e3 	bl	800c230 <http_set_ssi_handler>
  http_set_cgi_handlers(custom_CGI_handlers, custon_CGI_handler_num);
 800106a:	2104      	movs	r1, #4
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <StartDefaultTask+0x74>)
 800106e:	f00b f8ff 	bl	800c270 <http_set_cgi_handlers>
  //start the web server after MX_LWIP_Init() is called
  httpd_init();
 8001072:	f00b f8bd 	bl	800c1f0 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001076:	2001      	movs	r0, #1
 8001078:	f006 fdea 	bl	8007c50 <osDelay>
 800107c:	e7fb      	b.n	8001076 <StartDefaultTask+0x52>
 800107e:	bf00      	nop
 8001080:	200004a4 	.word	0x200004a4
 8001084:	200004f0 	.word	0x200004f0
 8001088:	20000000 	.word	0x20000000
 800108c:	20000458 	.word	0x20000458
 8001090:	20000008 	.word	0x20000008
 8001094:	0800077d 	.word	0x0800077d
 8001098:	0801d6c8 	.word	0x0801d6c8

0800109c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010ac:	d101      	bne.n	80010b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010ae:	f000 fcd3 	bl	8001a58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010be:	b672      	cpsid	i
}
 80010c0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c2:	e7fe      	b.n	80010c2 <Error_Handler+0x8>

080010c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_MspInit+0x4c>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	4a10      	ldr	r2, [pc, #64]	; (8001110 <HAL_MspInit+0x4c>)
 80010d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d4:	6413      	str	r3, [r2, #64]	; 0x40
 80010d6:	4b0e      	ldr	r3, [pc, #56]	; (8001110 <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <HAL_MspInit+0x4c>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_MspInit+0x4c>)
 80010e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ec:	6453      	str	r3, [r2, #68]	; 0x44
 80010ee:	4b08      	ldr	r3, [pc, #32]	; (8001110 <HAL_MspInit+0x4c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	210f      	movs	r1, #15
 80010fe:	f06f 0001 	mvn.w	r0, #1
 8001102:	f001 f839 	bl	8002178 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a0a      	ldr	r2, [pc, #40]	; (800114c <HAL_ADC_MspInit+0x38>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d10b      	bne.n	800113e <HAL_ADC_MspInit+0x2a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <HAL_ADC_MspInit+0x3c>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a09      	ldr	r2, [pc, #36]	; (8001150 <HAL_ADC_MspInit+0x3c>)
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b07      	ldr	r3, [pc, #28]	; (8001150 <HAL_ADC_MspInit+0x3c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40012000 	.word	0x40012000
 8001150:	40023800 	.word	0x40023800

08001154 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b480      	push	{r7}
 8001156:	b085      	sub	sp, #20
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d10c      	bne.n	8001180 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001166:	4b13      	ldr	r3, [pc, #76]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800117e:	e010      	b.n	80011a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM12)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <HAL_TIM_Base_MspInit+0x64>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d10b      	bne.n	80011a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 8001190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <HAL_TIM_Base_MspInit+0x60>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	68bb      	ldr	r3, [r7, #8]
}
 80011a2:	bf00      	nop
 80011a4:	3714      	adds	r7, #20
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40000400 	.word	0x40000400
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40001800 	.word	0x40001800

080011bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a22      	ldr	r2, [pc, #136]	; (8001264 <HAL_TIM_MspPostInit+0xa8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d11c      	bne.n	8001218 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_TIM_MspPostInit+0xac>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <HAL_TIM_MspPostInit+0xac>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_TIM_MspPostInit+0xac>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001206:	2302      	movs	r3, #2
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4816      	ldr	r0, [pc, #88]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 8001212:	f002 fa29 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001216:	e021      	b.n	800125c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a14      	ldr	r2, [pc, #80]	; (8001270 <HAL_TIM_MspPostInit+0xb4>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d11c      	bne.n	800125c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	4b11      	ldr	r3, [pc, #68]	; (8001268 <HAL_TIM_MspPostInit+0xac>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a10      	ldr	r2, [pc, #64]	; (8001268 <HAL_TIM_MspPostInit+0xac>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <HAL_TIM_MspPostInit+0xac>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800123a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800123e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800124c:	2309      	movs	r3, #9
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <HAL_TIM_MspPostInit+0xb0>)
 8001258:	f002 fa06 	bl	8003668 <HAL_GPIO_Init>
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40000400 	.word	0x40000400
 8001268:	40023800 	.word	0x40023800
 800126c:	40020400 	.word	0x40020400
 8001270:	40001800 	.word	0x40001800

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b0aa      	sub	sp, #168	; 0xa8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800128c:	f107 0310 	add.w	r3, r7, #16
 8001290:	2284      	movs	r2, #132	; 0x84
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f018 f9fe 	bl	8019696 <memset>
  if(huart->Instance==USART3)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a22      	ldr	r2, [pc, #136]	; (8001328 <HAL_UART_MspInit+0xb4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d13c      	bne.n	800131e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80012a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80012aa:	2300      	movs	r3, #0
 80012ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fa0a 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80012be:	f7ff fefc 	bl	80010ba <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c6:	4a19      	ldr	r2, [pc, #100]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6413      	str	r3, [r2, #64]	; 0x40
 80012ce:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012da:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a13      	ldr	r2, [pc, #76]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012e0:	f043 0308 	orr.w	r3, r3, #8
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_UART_MspInit+0xb8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0308 	and.w	r3, r3, #8
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80012f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800130c:	2307      	movs	r3, #7
 800130e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001312:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001316:	4619      	mov	r1, r3
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <HAL_UART_MspInit+0xbc>)
 800131a:	f002 f9a5 	bl	8003668 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800131e:	bf00      	nop
 8001320:	37a8      	adds	r7, #168	; 0xa8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40004800 	.word	0x40004800
 800132c:	40023800 	.word	0x40023800
 8001330:	40020c00 	.word	0x40020c00

08001334 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ac      	sub	sp, #176	; 0xb0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800134c:	f107 0318 	add.w	r3, r7, #24
 8001350:	2284      	movs	r2, #132	; 0x84
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f018 f99e 	bl	8019696 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001362:	d159      	bne.n	8001418 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001364:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001368:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800136a:	2300      	movs	r3, #0
 800136c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001370:	f107 0318 	add.w	r3, r7, #24
 8001374:	4618      	mov	r0, r3
 8001376:	f003 f9a9 	bl	80046cc <HAL_RCCEx_PeriphCLKConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001380:	f7ff fe9b 	bl	80010ba <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_PCD_MspInit+0xec>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a25      	ldr	r2, [pc, #148]	; (8001420 <HAL_PCD_MspInit+0xec>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b23      	ldr	r3, [pc, #140]	; (8001420 <HAL_PCD_MspInit+0xec>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	617b      	str	r3, [r7, #20]
 800139a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800139c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80013a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a4:	2302      	movs	r3, #2
 80013a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b0:	2303      	movs	r3, #3
 80013b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80013b6:	230a      	movs	r3, #10
 80013b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013c0:	4619      	mov	r1, r3
 80013c2:	4818      	ldr	r0, [pc, #96]	; (8001424 <HAL_PCD_MspInit+0xf0>)
 80013c4:	f002 f950 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80013c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e0:	4619      	mov	r1, r3
 80013e2:	4810      	ldr	r0, [pc, #64]	; (8001424 <HAL_PCD_MspInit+0xf0>)
 80013e4:	f002 f940 	bl	8003668 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_PCD_MspInit+0xec>)
 80013ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <HAL_PCD_MspInit+0xec>)
 80013ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f2:	6353      	str	r3, [r2, #52]	; 0x34
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_PCD_MspInit+0xec>)
 80013f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_PCD_MspInit+0xec>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	4a06      	ldr	r2, [pc, #24]	; (8001420 <HAL_PCD_MspInit+0xec>)
 8001406:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800140a:	6453      	str	r3, [r2, #68]	; 0x44
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_PCD_MspInit+0xec>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	37b0      	adds	r7, #176	; 0xb0
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40020000 	.word	0x40020000

08001428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08e      	sub	sp, #56	; 0x38
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001438:	4b34      	ldr	r3, [pc, #208]	; (800150c <HAL_InitTick+0xe4>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143c:	4a33      	ldr	r2, [pc, #204]	; (800150c <HAL_InitTick+0xe4>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6413      	str	r3, [r2, #64]	; 0x40
 8001444:	4b31      	ldr	r3, [pc, #196]	; (800150c <HAL_InitTick+0xe4>)
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
 800144e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001450:	f107 0210 	add.w	r2, r7, #16
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	4611      	mov	r1, r2
 800145a:	4618      	mov	r0, r3
 800145c:	f003 f904 	bl	8004668 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800146a:	f003 f8d5 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 800146e:	6378      	str	r0, [r7, #52]	; 0x34
 8001470:	e004      	b.n	800147c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001472:	f003 f8d1 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8001476:	4603      	mov	r3, r0
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800147c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800147e:	4a24      	ldr	r2, [pc, #144]	; (8001510 <HAL_InitTick+0xe8>)
 8001480:	fba2 2303 	umull	r2, r3, r2, r3
 8001484:	0c9b      	lsrs	r3, r3, #18
 8001486:	3b01      	subs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800148a:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_InitTick+0xec>)
 800148c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001492:	4b20      	ldr	r3, [pc, #128]	; (8001514 <HAL_InitTick+0xec>)
 8001494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001498:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 800149a:	4a1e      	ldr	r2, [pc, #120]	; (8001514 <HAL_InitTick+0xec>)
 800149c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800149e:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_InitTick+0xec>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_InitTick+0xec>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_InitTick+0xec>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80014b2:	4818      	ldr	r0, [pc, #96]	; (8001514 <HAL_InitTick+0xec>)
 80014b4:	f003 fcfa 	bl	8004eac <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80014be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d11b      	bne.n	80014fe <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80014c6:	4813      	ldr	r0, [pc, #76]	; (8001514 <HAL_InitTick+0xec>)
 80014c8:	f003 fd48 	bl	8004f5c <HAL_TIM_Base_Start_IT>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80014d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d111      	bne.n	80014fe <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014da:	201c      	movs	r0, #28
 80014dc:	f000 fe68 	bl	80021b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d808      	bhi.n	80014f8 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80014e6:	2200      	movs	r2, #0
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	201c      	movs	r0, #28
 80014ec:	f000 fe44 	bl	8002178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014f0:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_InitTick+0xf0>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e002      	b.n	80014fe <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001502:	4618      	mov	r0, r3
 8001504:	3738      	adds	r7, #56	; 0x38
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	431bde83 	.word	0x431bde83
 8001514:	20000ad0 	.word	0x20000ad0
 8001518:	2000001c 	.word	0x2000001c

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001520:	e7fe      	b.n	8001520 <NMI_Handler+0x4>

08001522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001522:	b480      	push	{r7}
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001526:	e7fe      	b.n	8001526 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	e7fe      	b.n	800152c <MemManage_Handler+0x4>

0800152e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800152e:	b480      	push	{r7}
 8001530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001532:	e7fe      	b.n	8001532 <BusFault_Handler+0x4>

08001534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001538:	e7fe      	b.n	8001538 <UsageFault_Handler+0x4>

0800153a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <TIM2_IRQHandler+0x10>)
 800154e:	f003 fed9 	bl	8005304 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000ad0 	.word	0x20000ad0

0800155c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <ETH_IRQHandler+0x10>)
 8001562:	f001 f9ad 	bl	80028c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200054fc 	.word	0x200054fc

08001570 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return 1;
 8001574:	2301      	movs	r3, #1
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <_kill+0x20>)
 800158c:	2216      	movs	r2, #22
 800158e:	601a      	str	r2, [r3, #0]
  return -1;
 8001590:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	2000d0b4 	.word	0x2000d0b4

080015a4 <_exit>:

void _exit (int status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffe5 	bl	8001580 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b6:	e7fe      	b.n	80015b6 <_exit+0x12>

080015b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c4:	2300      	movs	r3, #0
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	e00a      	b.n	80015e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015ca:	f3af 8000 	nop.w
 80015ce:	4601      	mov	r1, r0
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	60ba      	str	r2, [r7, #8]
 80015d6:	b2ca      	uxtb	r2, r1
 80015d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbf0      	blt.n	80015ca <_read+0x12>
  }

  return len;
 80015e8:	687b      	ldr	r3, [r7, #4]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b086      	sub	sp, #24
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015fe:	2300      	movs	r3, #0
 8001600:	617b      	str	r3, [r7, #20]
 8001602:	e009      	b.n	8001618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	3301      	adds	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbf1      	blt.n	8001604 <_write+0x12>
  }
  return len;
 8001620:	687b      	ldr	r3, [r7, #4]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_close>:

int _close(int file)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001652:	605a      	str	r2, [r3, #4]
  return 0;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <_isatty>:

int _isatty(int file)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	; (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	; (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d205      	bcs.n	80016d0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <_sbrk+0x6c>)
 80016c6:	220c      	movs	r2, #12
 80016c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
 80016ce:	e009      	b.n	80016e4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d0:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	4a06      	ldr	r2, [pc, #24]	; (80016f8 <_sbrk+0x64>)
 80016e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr
 80016f0:	20050000 	.word	0x20050000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	20000b1c 	.word	0x20000b1c
 80016fc:	2000d208 	.word	0x2000d208
 8001700:	2000d0b4 	.word	0x2000d0b4

08001704 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001756:	f018 f811 	bl	801977c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff f9a7 	bl	8000aac <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800176c:	0801fdc0 	.word	0x0801fdc0
  ldr r2, =_sbss
 8001770:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001774:	2000d204 	.word	0x2000d204

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>

0800177a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00b      	beq.n	80017a2 <LAN8742_RegisterBusIO+0x28>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <LAN8742_RegisterBusIO+0x28>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <LAN8742_RegisterBusIO+0x28>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e014      	b.n	80017d2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685a      	ldr	r2, [r3, #4]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	2300      	movs	r3, #0
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	2300      	movs	r3, #0
 80017f0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d17c      	bne.n	80018f8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2220      	movs	r2, #32
 8001810:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e01c      	b.n	8001852 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	695b      	ldr	r3, [r3, #20]
 800181c:	f107 0208 	add.w	r2, r7, #8
 8001820:	2112      	movs	r1, #18
 8001822:	6978      	ldr	r0, [r7, #20]
 8001824:	4798      	blx	r3
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	da03      	bge.n	8001834 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800182c:	f06f 0304 	mvn.w	r3, #4
 8001830:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001832:	e00b      	b.n	800184c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f003 031f 	and.w	r3, r3, #31
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	d105      	bne.n	800184c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	697a      	ldr	r2, [r7, #20]
 8001844:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
         break;
 800184a:	e005      	b.n	8001858 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b1f      	cmp	r3, #31
 8001856:	d9df      	bls.n	8001818 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b1f      	cmp	r3, #31
 800185e:	d902      	bls.n	8001866 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001860:	f06f 0302 	mvn.w	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d145      	bne.n	80018f8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6810      	ldr	r0, [r2, #0]
 8001874:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001878:	2100      	movs	r1, #0
 800187a:	4798      	blx	r3
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	db37      	blt.n	80018f2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	6810      	ldr	r0, [r2, #0]
 800188a:	f107 0208 	add.w	r2, r7, #8
 800188e:	2100      	movs	r1, #0
 8001890:	4798      	blx	r3
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	db28      	blt.n	80018ea <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4798      	blx	r3
 800189e:	4603      	mov	r3, r0
 80018a0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80018a2:	e01c      	b.n	80018de <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	4798      	blx	r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80018b6:	d80e      	bhi.n	80018d6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6810      	ldr	r0, [r2, #0]
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	2100      	movs	r1, #0
 80018c6:	4798      	blx	r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da07      	bge.n	80018de <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80018ce:	f06f 0304 	mvn.w	r3, #4
 80018d2:	613b      	str	r3, [r7, #16]
                 break;
 80018d4:	e010      	b.n	80018f8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80018d6:	f06f 0301 	mvn.w	r3, #1
 80018da:	613b      	str	r3, [r7, #16]
               break;
 80018dc:	e00c      	b.n	80018f8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d1dd      	bne.n	80018a4 <LAN8742_Init+0xc6>
 80018e8:	e006      	b.n	80018f8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80018ea:	f06f 0304 	mvn.w	r3, #4
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	e002      	b.n	80018f8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80018f2:	f06f 0303 	mvn.w	r3, #3
 80018f6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d112      	bne.n	8001924 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	4798      	blx	r3
 8001904:	4603      	mov	r3, r0
 8001906:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001908:	bf00      	nop
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	4798      	blx	r3
 8001910:	4603      	mov	r3, r0
 8001912:	461a      	mov	r2, r3
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800191c:	d9f5      	bls.n	800190a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2201      	movs	r2, #1
 8001922:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001924:	693b      	ldr	r3, [r7, #16]
 }
 8001926:	4618      	mov	r0, r3
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b084      	sub	sp, #16
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6810      	ldr	r0, [r2, #0]
 8001942:	f107 020c 	add.w	r2, r7, #12
 8001946:	2101      	movs	r1, #1
 8001948:	4798      	blx	r3
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	da02      	bge.n	8001956 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001950:	f06f 0304 	mvn.w	r3, #4
 8001954:	e06e      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695b      	ldr	r3, [r3, #20]
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6810      	ldr	r0, [r2, #0]
 800195e:	f107 020c 	add.w	r2, r7, #12
 8001962:	2101      	movs	r1, #1
 8001964:	4798      	blx	r3
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	da02      	bge.n	8001972 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800196c:	f06f 0304 	mvn.w	r3, #4
 8001970:	e060      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800197c:	2301      	movs	r3, #1
 800197e:	e059      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6810      	ldr	r0, [r2, #0]
 8001988:	f107 020c 	add.w	r2, r7, #12
 800198c:	2100      	movs	r1, #0
 800198e:	4798      	blx	r3
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	da02      	bge.n	800199c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001996:	f06f 0304 	mvn.w	r3, #4
 800199a:	e04b      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d11b      	bne.n	80019de <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d006      	beq.n	80019be <LAN8742_GetLinkState+0x90>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80019ba:	2302      	movs	r3, #2
 80019bc:	e03a      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80019c8:	2303      	movs	r3, #3
 80019ca:	e033      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80019d6:	2304      	movs	r3, #4
 80019d8:	e02c      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80019da:	2305      	movs	r3, #5
 80019dc:	e02a      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6810      	ldr	r0, [r2, #0]
 80019e6:	f107 020c 	add.w	r2, r7, #12
 80019ea:	211f      	movs	r1, #31
 80019ec:	4798      	blx	r3
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	da02      	bge.n	80019fa <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80019f4:	f06f 0304 	mvn.w	r3, #4
 80019f8:	e01c      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d101      	bne.n	8001a08 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001a04:	2306      	movs	r3, #6
 8001a06:	e015      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f003 031c 	and.w	r3, r3, #28
 8001a0e:	2b18      	cmp	r3, #24
 8001a10:	d101      	bne.n	8001a16 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001a12:	2302      	movs	r3, #2
 8001a14:	e00e      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 031c 	and.w	r3, r3, #28
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d101      	bne.n	8001a24 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e007      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f003 031c 	and.w	r3, r3, #28
 8001a2a:	2b14      	cmp	r3, #20
 8001a2c:	d101      	bne.n	8001a32 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	e000      	b.n	8001a34 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001a32:	2305      	movs	r3, #5
    }				
  }
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 fb8e 	bl	8002162 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	200f      	movs	r0, #15
 8001a48:	f7ff fcee 	bl	8001428 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fb3a 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000020 	.word	0x20000020
 8001a7c:	20000b20 	.word	0x20000b20

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000b20 	.word	0x20000b20

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000020 	.word	0x20000020

08001ae0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e031      	b.n	8001b5a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f7ff fb08 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b16:	f003 0310 	and.w	r3, r3, #16
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_ADC_Init+0x84>)
 8001b24:	4013      	ands	r3, r2
 8001b26:	f043 0202 	orr.w	r2, r3, #2
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f000 f970 	bl	8001e14 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	f023 0303 	bic.w	r3, r3, #3
 8001b42:	f043 0201 	orr.w	r2, r3, #1
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
 8001b4a:	e001      	b.n	8001b50 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	ffffeefd 	.word	0xffffeefd

08001b68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1c>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e136      	b.n	8001df2 <HAL_ADC_ConfigChannel+0x28a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	d93a      	bls.n	8001c0a <HAL_ADC_ConfigChannel+0xa2>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b9c:	d035      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	2207      	movs	r2, #7
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	400a      	ands	r2, r1
 8001bc2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a8d      	ldr	r2, [pc, #564]	; (8001e00 <HAL_ADC_ConfigChannel+0x298>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10a      	bne.n	8001be4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68d9      	ldr	r1, [r3, #12]
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	061a      	lsls	r2, r3, #24
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	430a      	orrs	r2, r1
 8001be0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001be2:	e035      	b.n	8001c50 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68d9      	ldr	r1, [r3, #12]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4403      	add	r3, r0
 8001bfc:	3b1e      	subs	r3, #30
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c08:	e022      	b.n	8001c50 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6919      	ldr	r1, [r3, #16]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	4613      	mov	r3, r2
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	4413      	add	r3, r2
 8001c1e:	2207      	movs	r2, #7
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43da      	mvns	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	400a      	ands	r2, r1
 8001c2c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6919      	ldr	r1, [r3, #16]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	4618      	mov	r0, r3
 8001c40:	4603      	mov	r3, r0
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4403      	add	r3, r0
 8001c46:	409a      	lsls	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b06      	cmp	r3, #6
 8001c56:	d824      	bhi.n	8001ca2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685a      	ldr	r2, [r3, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	3b05      	subs	r3, #5
 8001c6a:	221f      	movs	r2, #31
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43da      	mvns	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	400a      	ands	r2, r1
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4413      	add	r3, r2
 8001c92:	3b05      	subs	r3, #5
 8001c94:	fa00 f203 	lsl.w	r2, r0, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca0:	e04c      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b0c      	cmp	r3, #12
 8001ca8:	d824      	bhi.n	8001cf4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b23      	subs	r3, #35	; 0x23
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b23      	subs	r3, #35	; 0x23
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf2:	e023      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	3b41      	subs	r3, #65	; 0x41
 8001d06:	221f      	movs	r2, #31
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43da      	mvns	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	400a      	ands	r2, r1
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	3b41      	subs	r3, #65	; 0x41
 8001d30:	fa00 f203 	lsl.w	r2, r0, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a30      	ldr	r2, [pc, #192]	; (8001e04 <HAL_ADC_ConfigChannel+0x29c>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d10a      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1f4>
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d4e:	d105      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d50:	4b2d      	ldr	r3, [pc, #180]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	4a2c      	ldr	r2, [pc, #176]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d56:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d5a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <HAL_ADC_ConfigChannel+0x29c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d10f      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	d10b      	bne.n	8001d86 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d6e:	4b26      	ldr	r3, [pc, #152]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a25      	ldr	r2, [pc, #148]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d74:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d78:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d7a:	4b23      	ldr	r3, [pc, #140]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	4a22      	ldr	r2, [pc, #136]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d84:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <HAL_ADC_ConfigChannel+0x29c>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d12b      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x280>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <HAL_ADC_ConfigChannel+0x298>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d003      	beq.n	8001da2 <HAL_ADC_ConfigChannel+0x23a>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2b11      	cmp	r3, #17
 8001da0:	d122      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001da2:	4b19      	ldr	r3, [pc, #100]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	4a18      	ldr	r2, [pc, #96]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001da8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001dac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4a15      	ldr	r2, [pc, #84]	; (8001e08 <HAL_ADC_ConfigChannel+0x2a0>)
 8001db4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001db8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <HAL_ADC_ConfigChannel+0x298>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d111      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_ADC_ConfigChannel+0x2a4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a11      	ldr	r2, [pc, #68]	; (8001e10 <HAL_ADC_ConfigChannel+0x2a8>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	0c9a      	lsrs	r2, r3, #18
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001dda:	e002      	b.n	8001de2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f9      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	10000012 	.word	0x10000012
 8001e04:	40012000 	.word	0x40012000
 8001e08:	40012300 	.word	0x40012300
 8001e0c:	20000018 	.word	0x20000018
 8001e10:	431bde83 	.word	0x431bde83

08001e14 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001e1c:	4b78      	ldr	r3, [pc, #480]	; (8002000 <ADC_Init+0x1ec>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	4a77      	ldr	r2, [pc, #476]	; (8002000 <ADC_Init+0x1ec>)
 8001e22:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001e26:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001e28:	4b75      	ldr	r3, [pc, #468]	; (8002000 <ADC_Init+0x1ec>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4973      	ldr	r1, [pc, #460]	; (8002000 <ADC_Init+0x1ec>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6859      	ldr	r1, [r3, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	021a      	lsls	r2, r3, #8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	6859      	ldr	r1, [r3, #4]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6899      	ldr	r1, [r3, #8]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	4a58      	ldr	r2, [pc, #352]	; (8002004 <ADC_Init+0x1f0>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d022      	beq.n	8001eee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	689a      	ldr	r2, [r3, #8]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6899      	ldr	r1, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ed8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6899      	ldr	r1, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e00f      	b.n	8001f0e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001efc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 0202 	bic.w	r2, r2, #2
 8001f1c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6899      	ldr	r1, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	005a      	lsls	r2, r3, #1
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01b      	beq.n	8001f74 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f4a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	685a      	ldr	r2, [r3, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6859      	ldr	r1, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	3b01      	subs	r3, #1
 8001f68:	035a      	lsls	r2, r3, #13
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	e007      	b.n	8001f84 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f82:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	051a      	lsls	r2, r3, #20
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	6899      	ldr	r1, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001fc6:	025a      	lsls	r2, r3, #9
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fde:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6899      	ldr	r1, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	029a      	lsls	r2, r3, #10
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	40012300 	.word	0x40012300
 8002004:	0f000001 	.word	0x0f000001

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	4313      	orrs	r3, r2
 8002034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <__NVIC_SetPriorityGrouping+0x40>)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	60d3      	str	r3, [r2, #12]
}
 800203c:	bf00      	nop
 800203e:	3714      	adds	r7, #20
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00
 800204c:	05fa0000 	.word	0x05fa0000

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	2b00      	cmp	r3, #0
 800207c:	db0b      	blt.n	8002096 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	f003 021f 	and.w	r2, r3, #31
 8002084:	4907      	ldr	r1, [pc, #28]	; (80020a4 <__NVIC_EnableIRQ+0x38>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	095b      	lsrs	r3, r3, #5
 800208c:	2001      	movs	r0, #1
 800208e:	fa00 f202 	lsl.w	r2, r0, r2
 8002092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000e100 	.word	0xe000e100

080020a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	6039      	str	r1, [r7, #0]
 80020b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	db0a      	blt.n	80020d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	490c      	ldr	r1, [pc, #48]	; (80020f4 <__NVIC_SetPriority+0x4c>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d0:	e00a      	b.n	80020e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	4908      	ldr	r1, [pc, #32]	; (80020f8 <__NVIC_SetPriority+0x50>)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	3b04      	subs	r3, #4
 80020e0:	0112      	lsls	r2, r2, #4
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	440b      	add	r3, r1
 80020e6:	761a      	strb	r2, [r3, #24]
}
 80020e8:	bf00      	nop
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	e000e100 	.word	0xe000e100
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f1c3 0307 	rsb	r3, r3, #7
 8002116:	2b04      	cmp	r3, #4
 8002118:	bf28      	it	cs
 800211a:	2304      	movcs	r3, #4
 800211c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	3304      	adds	r3, #4
 8002122:	2b06      	cmp	r3, #6
 8002124:	d902      	bls.n	800212c <NVIC_EncodePriority+0x30>
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3b03      	subs	r3, #3
 800212a:	e000      	b.n	800212e <NVIC_EncodePriority+0x32>
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002130:	f04f 32ff 	mov.w	r2, #4294967295
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	401a      	ands	r2, r3
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002144:	f04f 31ff 	mov.w	r1, #4294967295
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	43d9      	mvns	r1, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	4313      	orrs	r3, r2
         );
}
 8002156:	4618      	mov	r0, r3
 8002158:	3724      	adds	r7, #36	; 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b082      	sub	sp, #8
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff4c 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002186:	2300      	movs	r3, #0
 8002188:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800218a:	f7ff ff61 	bl	8002050 <__NVIC_GetPriorityGrouping>
 800218e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	6978      	ldr	r0, [r7, #20]
 8002196:	f7ff ffb1 	bl	80020fc <NVIC_EncodePriority>
 800219a:	4602      	mov	r2, r0
 800219c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff ff80 	bl	80020a8 <__NVIC_SetPriority>
}
 80021a8:	bf00      	nop
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	4618      	mov	r0, r3
 80021c0:	f7ff ff54 	bl	800206c <__NVIC_EnableIRQ>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e06a      	b.n	80022b4 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d106      	bne.n	80021f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2223      	movs	r2, #35	; 0x23
 80021ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f005 fa87 	bl	8007704 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021f6:	4b31      	ldr	r3, [pc, #196]	; (80022bc <HAL_ETH_Init+0xf0>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_ETH_Init+0xf0>)
 80021fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b2e      	ldr	r3, [pc, #184]	; (80022bc <HAL_ETH_Init+0xf0>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800220e:	4b2c      	ldr	r3, [pc, #176]	; (80022c0 <HAL_ETH_Init+0xf4>)
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a2b      	ldr	r2, [pc, #172]	; (80022c0 <HAL_ETH_Init+0xf4>)
 8002214:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002218:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800221a:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <HAL_ETH_Init+0xf4>)
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4927      	ldr	r1, [pc, #156]	; (80022c0 <HAL_ETH_Init+0xf4>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002228:	4b25      	ldr	r3, [pc, #148]	; (80022c0 <HAL_ETH_Init+0xf4>)
 800222a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002242:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002244:	f7ff fc1c 	bl	8001a80 <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800224a:	e011      	b.n	8002270 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800224c:	f7ff fc18 	bl	8001a80 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800225a:	d909      	bls.n	8002270 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2204      	movs	r2, #4
 8002260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	22e0      	movs	r2, #224	; 0xe0
 8002268:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e021      	b.n	80022b4 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1e4      	bne.n	800224c <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 ff4c 	bl	8003120 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fff3 	bl	8003274 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f001 f849 	bl	8003326 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	461a      	mov	r2, r3
 800229a:	2100      	movs	r1, #0
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 ffb1 	bl	8003204 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2210      	movs	r2, #16
 80022ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3710      	adds	r7, #16
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800

080022c4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d17b      	bne.n	80023ce <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2223      	movs	r2, #35	; 0x23
 80022da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80022f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <HAL_ETH_Start_IT+0x114>)
 8002302:	430b      	orrs	r3, r1
 8002304:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002318:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2204      	movs	r2, #4
 8002320:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9fc 	bl	8002720 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f042 0208 	orr.w	r2, r2, #8
 8002336:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff fba9 	bl	8001a98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f042 0204 	orr.w	r2, r2, #4
 800235c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002366:	2001      	movs	r0, #1
 8002368:	f7ff fb96 	bl	8001a98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 fd74 	bl	8002e62 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800238c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002390:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	f043 0302 	orr.w	r3, r3, #2
 80023a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023a8:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_ETH_Start_IT+0x118>)
 80023ba:	430b      	orrs	r3, r1
 80023bc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023c0:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2223      	movs	r2, #35	; 0x23
 80023c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
  }
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	00020060 	.word	0x00020060
 80023dc:	0001a0c1 	.word	0x0001a0c1

080023e0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ee:	2b23      	cmp	r3, #35	; 0x23
 80023f0:	d16e      	bne.n	80024d0 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2223      	movs	r2, #35	; 0x23
 80023f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002402:	69d9      	ldr	r1, [r3, #28]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b34      	ldr	r3, [pc, #208]	; (80024dc <HAL_ETH_Stop_IT+0xfc>)
 800240a:	400b      	ands	r3, r1
 800240c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002410:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	6812      	ldr	r2, [r2, #0]
 8002420:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002428:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002440:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0204 	bic.w	r2, r2, #4
 8002450:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800245a:	2001      	movs	r0, #1
 800245c:	f7ff fb1c 	bl	8001a98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fcfa 	bl	8002e62 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0208 	bic.w	r2, r2, #8
 800247c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002486:	2001      	movs	r0, #1
 8002488:	f7ff fb06 	bl	8001a98 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00e      	b.n	80024b8 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	3212      	adds	r2, #18
 80024a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	3301      	adds	r3, #1
 80024b6:	617b      	str	r3, [r7, #20]
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b03      	cmp	r3, #3
 80024bc:	d9ed      	bls.n	800249a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2200      	movs	r2, #0
 80024c2:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2210      	movs	r2, #16
 80024c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	fffe5f3e 	.word	0xfffe5f3e

080024e0 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d109      	bne.n	8002504 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e045      	b.n	8002590 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250a:	2b23      	cmp	r3, #35	; 0x23
 800250c:	d13f      	bne.n	800258e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002516:	2201      	movs	r2, #1
 8002518:	6839      	ldr	r1, [r7, #0]
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 ff70 	bl	8003400 <ETH_Prepare_Tx_Descriptors>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d009      	beq.n	800253a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f043 0202 	orr.w	r2, r3, #2
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e02a      	b.n	8002590 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800253a:	f3bf 8f4f 	dsb	sy
}
 800253e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002544:	1c5a      	adds	r2, r3, #1
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	629a      	str	r2, [r3, #40]	; 0x28
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254e:	2b03      	cmp	r3, #3
 8002550:	d904      	bls.n	800255c <HAL_ETH_Transmit_IT+0x7c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	1f1a      	subs	r2, r3, #4
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00d      	beq.n	800258a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002576:	461a      	mov	r2, r3
 8002578:	2304      	movs	r3, #4
 800257a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002584:	461a      	mov	r2, r3
 8002586:	2300      	movs	r3, #0
 8002588:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800258a:	2300      	movs	r3, #0
 800258c:	e000      	b.n	8002590 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
  }
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f043 0201 	orr.w	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0a8      	b.n	8002716 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	2b23      	cmp	r3, #35	; 0x23
 80025cc:	d001      	beq.n	80025d2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e0a1      	b.n	8002716 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	3212      	adds	r2, #18
 80025de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025e8:	f1c3 0304 	rsb	r3, r3, #4
 80025ec:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025ee:	e06a      	b.n	80026c6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	69da      	ldr	r2, [r3, #28]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d103      	bne.n	8002620 <HAL_ETH_ReadData+0x88>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d040      	beq.n	80026a2 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002628:	2b00      	cmp	r3, #0
 800262a:	d005      	beq.n	8002638 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00c      	beq.n	8002664 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	0c1b      	lsrs	r3, r3, #16
 8002650:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002654:	3b04      	subs	r3, #4
 8002656:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002660:	2301      	movs	r3, #1
 8002662:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800267c:	461a      	mov	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	b29b      	uxth	r3, r3
 8002682:	f005 fa0b 	bl	8007a9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	441a      	add	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2200      	movs	r2, #0
 80026a0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d902      	bls.n	80026b4 <HAL_ETH_ReadData+0x11c>
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3b04      	subs	r3, #4
 80026b2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	3212      	adds	r2, #18
 80026ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026be:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	3301      	adds	r3, #1
 80026c4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	db06      	blt.n	80026dc <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d202      	bcs.n	80026dc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d089      	beq.n	80025f0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	441a      	add	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f815 	bl	8002720 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	69fa      	ldr	r2, [r7, #28]
 80026fa:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e000      	b.n	8002716 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002734:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	3212      	adds	r2, #18
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002746:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002748:	e040      	b.n	80027cc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d112      	bne.n	8002778 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002752:	f107 030c 	add.w	r3, r7, #12
 8002756:	4618      	mov	r0, r3
 8002758:	f005 f970 	bl	8007a3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d102      	bne.n	8002768 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	74fb      	strb	r3, [r7, #19]
 8002766:	e007      	b.n	8002778 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	461a      	mov	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	461a      	mov	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002778:	7cfb      	ldrb	r3, [r7, #19]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d026      	beq.n	80027cc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	4a1e      	ldr	r2, [pc, #120]	; (8002804 <ETH_UpdateDescriptor+0xe4>)
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	e003      	b.n	8002796 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002794:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002796:	f3bf 8f5f 	dmb	sy
}
 800279a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	3301      	adds	r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d902      	bls.n	80027ba <ETH_UpdateDescriptor+0x9a>
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	3b04      	subs	r3, #4
 80027b8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	3212      	adds	r2, #18
 80027c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c4:	617b      	str	r3, [r7, #20]
      desccount--;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <ETH_UpdateDescriptor+0xb8>
 80027d2:	7cfb      	ldrb	r3, [r7, #19]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1b8      	bne.n	800274a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d00c      	beq.n	80027fc <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ea:	461a      	mov	r2, r3
 80027ec:	2300      	movs	r3, #0
 80027ee:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80027fc:	bf00      	nop
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	80004600 	.word	0x80004600

08002808 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3318      	adds	r3, #24
 8002814:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002826:	e03f      	b.n	80028a8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002828:	2301      	movs	r3, #1
 800282a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3b01      	subs	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	3304      	adds	r3, #4
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	3301      	adds	r3, #1
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d028      	beq.n	80028a8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db1b      	blt.n	80028a4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3304      	adds	r3, #4
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	f005 f951 	bl	8007b20 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	3304      	adds	r3, #4
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	3301      	adds	r3, #1
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a2:	e001      	b.n	80028a8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_ETH_ReleaseTxPacket+0xac>
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1b9      	bne.n	8002828 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d112      	bne.n	8002900 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d109      	bne.n	8002900 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_ETH_IRQHandler+0x178>)
 80028f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f004 fc66 	bl	80071cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d113      	bne.n	800293a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10a      	bne.n	800293a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292c:	461a      	mov	r2, r3
 800292e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002932:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f004 fc59 	bl	80071ec <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	d14c      	bne.n	80029e8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	d142      	bne.n	80029e8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f043 0208 	orr.w	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002984:	d11a      	bne.n	80029bc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_ETH_IRQHandler+0x17c>)
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80029ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029b0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	22e0      	movs	r2, #224	; 0xe0
 80029b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80029ba:	e012      	b.n	80029e2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	f248 6380 	movw	r3, #34432	; 0x8680
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029da:	461a      	mov	r2, r3
 80029dc:	f248 6380 	movw	r3, #34432	; 0x8680
 80029e0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f004 fc12 	bl	800720c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d10e      	bne.n	8002a14 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f81c 	bl	8002a44 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_ETH_IRQHandler+0x180>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_ETH_IRQHandler+0x180>)
 8002a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a26:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f815 	bl	8002a58 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	00010040 	.word	0x00010040
 8002a3c:	007e2000 	.word	0x007e2000
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 031c 	and.w	r3, r3, #28
 8002a88:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	02db      	lsls	r3, r3, #11
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0302 	bic.w	r3, r3, #2
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002abc:	f7fe ffe0 	bl	8001a80 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ac2:	e00d      	b.n	8002ae0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ac4:	f7fe ffdc 	bl	8001a80 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad2:	d301      	bcc.n	8002ad8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e010      	b.n	8002afa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ec      	bne.n	8002ac4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 031c 	and.w	r3, r3, #28
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	02db      	lsls	r3, r3, #11
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	019b      	lsls	r3, r3, #6
 8002b30:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5c:	f7fe ff90 	bl	8001a80 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b62:	e00d      	b.n	8002b80 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b64:	f7fe ff8c 	bl	8001a80 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d301      	bcc.n	8002b78 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e009      	b.n	8002b8c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ec      	bne.n	8002b64 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0d9      	b.n	8002d5c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00b      	b.n	8002d94 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d105      	bne.n	8002d92 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f88f 	bl	8002eac <ETH_SetMACConfig>

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 031c 	bic.w	r3, r3, #28
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002db4:	f001 fc24 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8002db8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d804      	bhi.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e027      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d908      	bls.n	8002dee <HAL_ETH_SetMDIOClockRange+0x52>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d204      	bcs.n	8002dee <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f043 030c 	orr.w	r3, r3, #12
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e01a      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d303      	bcc.n	8002dfe <HAL_ETH_SetMDIOClockRange+0x62>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d911      	bls.n	8002e22 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d908      	bls.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d804      	bhi.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e005      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e000      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e22:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	01312cff 	.word	0x01312cff
 8002e38:	02160ebf 	.word	0x02160ebf
 8002e3c:	03938700 	.word	0x03938700
 8002e40:	05f5e0ff 	.word	0x05f5e0ff
 8002e44:	08f0d17f 	.word	0x08f0d17f

08002e48 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e84:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7fe fe00 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea2:	6193      	str	r3, [r2, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4b51      	ldr	r3, [pc, #324]	; (8003008 <ETH_SetMACConfig+0x15c>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	7c1b      	ldrb	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <ETH_SetMACConfig+0x28>
 8002ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ed2:	e000      	b.n	8002ed6 <ETH_SetMACConfig+0x2a>
 8002ed4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7c5b      	ldrb	r3, [r3, #17]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <ETH_SetMACConfig+0x38>
 8002ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee2:	e000      	b.n	8002ee6 <ETH_SetMACConfig+0x3a>
 8002ee4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ee6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	7fdb      	ldrb	r3, [r3, #31]
 8002ef2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ef4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002efa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	7f92      	ldrb	r2, [r2, #30]
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	d102      	bne.n	8002f0a <ETH_SetMACConfig+0x5e>
 8002f04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f08:	e000      	b.n	8002f0c <ETH_SetMACConfig+0x60>
 8002f0a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	7f1b      	ldrb	r3, [r3, #28]
 8002f12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	791b      	ldrb	r3, [r3, #4]
 8002f20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	d102      	bne.n	8002f34 <ETH_SetMACConfig+0x88>
 8002f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f32:	e000      	b.n	8002f36 <ETH_SetMACConfig+0x8a>
 8002f34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	7bdb      	ldrb	r3, [r3, #15]
 8002f3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7fe fd96 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d101      	bne.n	8002f9a <ETH_SetMACConfig+0xee>
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	e000      	b.n	8002f9c <ETH_SetMACConfig+0xf0>
 8002f9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	d101      	bne.n	8002fb2 <ETH_SetMACConfig+0x106>
 8002fae:	2208      	movs	r2, #8
 8002fb0:	e000      	b.n	8002fb4 <ETH_SetMACConfig+0x108>
 8002fb2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fb4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	d101      	bne.n	8002fc4 <ETH_SetMACConfig+0x118>
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	e000      	b.n	8002fc6 <ETH_SetMACConfig+0x11a>
 8002fc4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002fce:	2a01      	cmp	r2, #1
 8002fd0:	d101      	bne.n	8002fd6 <ETH_SetMACConfig+0x12a>
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	e000      	b.n	8002fd8 <ETH_SetMACConfig+0x12c>
 8002fd6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7fe fd51 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	ff20810f 	.word	0xff20810f

0800300c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4b3d      	ldr	r3, [pc, #244]	; (800311c <ETH_SetDMAConfig+0x110>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	7b1b      	ldrb	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <ETH_SetDMAConfig+0x2c>
 8003032:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003036:	e000      	b.n	800303a <ETH_SetDMAConfig+0x2e>
 8003038:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7b5b      	ldrb	r3, [r3, #13]
 800303e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003040:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	7f52      	ldrb	r2, [r2, #29]
 8003046:	2a00      	cmp	r2, #0
 8003048:	d102      	bne.n	8003050 <ETH_SetDMAConfig+0x44>
 800304a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800304e:	e000      	b.n	8003052 <ETH_SetDMAConfig+0x46>
 8003050:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003052:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	7b9b      	ldrb	r3, [r3, #14]
 8003058:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800305a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003060:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	7f1b      	ldrb	r3, [r3, #28]
 8003066:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003068:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	7f9b      	ldrb	r3, [r3, #30]
 800306e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003070:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003076:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800307e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003080:	4313      	orrs	r3, r2
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fe fcf8 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	791b      	ldrb	r3, [r3, #4]
 80030ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe fcc9 	bl	8001a98 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	f8de3f23 	.word	0xf8de3f23

08003120 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b0a6      	sub	sp, #152	; 0x98
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003134:	2300      	movs	r3, #0
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800315c:	2300      	movs	r3, #0
 800315e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003166:	2300      	movs	r3, #0
 8003168:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800318c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe86 	bl	8002eac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff08 	bl	800300c <ETH_SetDMAConfig>
}
 80031fc:	bf00      	nop
 80031fe:	3798      	adds	r7, #152	; 0x98
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3305      	adds	r3, #5
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	3204      	adds	r2, #4
 800321c:	7812      	ldrb	r2, [r2, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <ETH_MACAddressConfig+0x68>)
 8003226:	4413      	add	r3, r2
 8003228:	461a      	mov	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3303      	adds	r3, #3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	061a      	lsls	r2, r3, #24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3302      	adds	r3, #2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3301      	adds	r3, #1
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4313      	orrs	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <ETH_MACAddressConfig+0x6c>)
 8003256:	4413      	add	r3, r2
 8003258:	461a      	mov	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40028040 	.word	0x40028040
 8003270:	40028044 	.word	0x40028044

08003274 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e03e      	b.n	8003300 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68d9      	ldr	r1, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	3206      	adds	r2, #6
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d80c      	bhi.n	80032e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e004      	b.n	80032ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3301      	adds	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d9bd      	bls.n	8003282 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003318:	611a      	str	r2, [r3, #16]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e046      	b.n	80033c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003370:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003378:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	3212      	adds	r2, #18
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d80c      	bhi.n	80033b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e004      	b.n	80033bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d9b5      	bls.n	8003334 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003400:	b480      	push	{r7}
 8003402:	b08d      	sub	sp, #52	; 0x34
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3318      	adds	r3, #24
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800343e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003442:	d007      	beq.n	8003454 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	3304      	adds	r3, #4
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	e0ff      	b.n	8003658 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	3301      	adds	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4b7d      	ldr	r3, [pc, #500]	; (8003664 <ETH_Prepare_Tx_Descriptors+0x264>)
 800346e:	4013      	ands	r3, r2
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	6852      	ldr	r2, [r2, #4]
 8003474:	431a      	orrs	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003486:	6a3b      	ldr	r3, [r7, #32]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	431a      	orrs	r2, r3
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0320 	and.w	r3, r3, #32
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d008      	beq.n	80034b6 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	431a      	orrs	r2, r3
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80034c2:	6a3b      	ldr	r3, [r7, #32]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034d6:	6a3b      	ldr	r3, [r7, #32]
 80034d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80034da:	f3bf 8f5f 	dmb	sy
}
 80034de:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034ec:	e082      	b.n	80035f4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	e005      	b.n	800351a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	3301      	adds	r3, #1
 800351e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003522:	2b03      	cmp	r3, #3
 8003524:	d902      	bls.n	800352c <ETH_Prepare_Tx_Descriptors+0x12c>
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	3b04      	subs	r3, #4
 800352a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003534:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800354a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800354e:	d007      	beq.n	8003560 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003554:	3304      	adds	r3, #4
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4413      	add	r3, r2
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d029      	beq.n	80035b4 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800356c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800356e:	2300      	movs	r3, #0
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
 8003572:	e019      	b.n	80035a8 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8003574:	f3bf 8f5f 	dmb	sy
}
 8003578:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800357a:	6a3b      	ldr	r3, [r7, #32]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003588:	3301      	adds	r3, #1
 800358a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800358c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358e:	2b03      	cmp	r3, #3
 8003590:	d902      	bls.n	8003598 <ETH_Prepare_Tx_Descriptors+0x198>
 8003592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003594:	3b04      	subs	r3, #4
 8003596:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a0:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80035a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a4:	3301      	adds	r3, #1
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d3e1      	bcc.n	8003574 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	e051      	b.n	8003658 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	6a3b      	ldr	r3, [r7, #32]
 80035c8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	4b25      	ldr	r3, [pc, #148]	; (8003664 <ETH_Prepare_Tx_Descriptors+0x264>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	6852      	ldr	r2, [r2, #4]
 80035d6:	431a      	orrs	r2, r3
 80035d8:	6a3b      	ldr	r3, [r7, #32]
 80035da:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	3301      	adds	r3, #1
 80035e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80035e2:	f3bf 8f5f 	dmb	sy
}
 80035e6:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f af78 	bne.w	80034ee <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d006      	beq.n	8003612 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003604:	6a3b      	ldr	r3, [r7, #32]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	e005      	b.n	800361e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362e:	6979      	ldr	r1, [r7, #20]
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	3304      	adds	r3, #4
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800363e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003640:	b672      	cpsid	i
}
 8003642:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	4413      	add	r3, r2
 800364c:	1c5a      	adds	r2, r3, #1
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003652:	b662      	cpsie	i
}
 8003654:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	3734      	adds	r7, #52	; 0x34
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	ffffe000 	.word	0xffffe000

08003668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003668:	b480      	push	{r7}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003672:	2300      	movs	r3, #0
 8003674:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e175      	b.n	8003974 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f040 8164 	bne.w	800396e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d005      	beq.n	80036be <HAL_GPIO_Init+0x56>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d130      	bne.n	8003720 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d017      	beq.n	800375c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d123      	bne.n	80037b0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80be 	beq.w	800396e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	4b66      	ldr	r3, [pc, #408]	; (800398c <HAL_GPIO_Init+0x324>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f6:	4a65      	ldr	r2, [pc, #404]	; (800398c <HAL_GPIO_Init+0x324>)
 80037f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037fc:	6453      	str	r3, [r2, #68]	; 0x44
 80037fe:	4b63      	ldr	r3, [pc, #396]	; (800398c <HAL_GPIO_Init+0x324>)
 8003800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800380a:	4a61      	ldr	r2, [pc, #388]	; (8003990 <HAL_GPIO_Init+0x328>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	089b      	lsrs	r3, r3, #2
 8003810:	3302      	adds	r3, #2
 8003812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003816:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	f003 0303 	and.w	r3, r3, #3
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	220f      	movs	r2, #15
 8003822:	fa02 f303 	lsl.w	r3, r2, r3
 8003826:	43db      	mvns	r3, r3
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4013      	ands	r3, r2
 800382c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a58      	ldr	r2, [pc, #352]	; (8003994 <HAL_GPIO_Init+0x32c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d037      	beq.n	80038a6 <HAL_GPIO_Init+0x23e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_GPIO_Init+0x330>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d031      	beq.n	80038a2 <HAL_GPIO_Init+0x23a>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a56      	ldr	r2, [pc, #344]	; (800399c <HAL_GPIO_Init+0x334>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02b      	beq.n	800389e <HAL_GPIO_Init+0x236>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a55      	ldr	r2, [pc, #340]	; (80039a0 <HAL_GPIO_Init+0x338>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d025      	beq.n	800389a <HAL_GPIO_Init+0x232>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a54      	ldr	r2, [pc, #336]	; (80039a4 <HAL_GPIO_Init+0x33c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d01f      	beq.n	8003896 <HAL_GPIO_Init+0x22e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a53      	ldr	r2, [pc, #332]	; (80039a8 <HAL_GPIO_Init+0x340>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d019      	beq.n	8003892 <HAL_GPIO_Init+0x22a>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a52      	ldr	r2, [pc, #328]	; (80039ac <HAL_GPIO_Init+0x344>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d013      	beq.n	800388e <HAL_GPIO_Init+0x226>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a51      	ldr	r2, [pc, #324]	; (80039b0 <HAL_GPIO_Init+0x348>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d00d      	beq.n	800388a <HAL_GPIO_Init+0x222>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a50      	ldr	r2, [pc, #320]	; (80039b4 <HAL_GPIO_Init+0x34c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d007      	beq.n	8003886 <HAL_GPIO_Init+0x21e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a4f      	ldr	r2, [pc, #316]	; (80039b8 <HAL_GPIO_Init+0x350>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_GPIO_Init+0x21a>
 800387e:	2309      	movs	r3, #9
 8003880:	e012      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 8003882:	230a      	movs	r3, #10
 8003884:	e010      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 8003886:	2308      	movs	r3, #8
 8003888:	e00e      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 800388a:	2307      	movs	r3, #7
 800388c:	e00c      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 800388e:	2306      	movs	r3, #6
 8003890:	e00a      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 8003892:	2305      	movs	r3, #5
 8003894:	e008      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 8003896:	2304      	movs	r3, #4
 8003898:	e006      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 800389a:	2303      	movs	r3, #3
 800389c:	e004      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 800389e:	2302      	movs	r3, #2
 80038a0:	e002      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 80038a2:	2301      	movs	r3, #1
 80038a4:	e000      	b.n	80038a8 <HAL_GPIO_Init+0x240>
 80038a6:	2300      	movs	r3, #0
 80038a8:	69fa      	ldr	r2, [r7, #28]
 80038aa:	f002 0203 	and.w	r2, r2, #3
 80038ae:	0092      	lsls	r2, r2, #2
 80038b0:	4093      	lsls	r3, r2
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038b8:	4935      	ldr	r1, [pc, #212]	; (8003990 <HAL_GPIO_Init+0x328>)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038c6:	4b3d      	ldr	r3, [pc, #244]	; (80039bc <HAL_GPIO_Init+0x354>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	43db      	mvns	r3, r3
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4013      	ands	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038ea:	4a34      	ldr	r2, [pc, #208]	; (80039bc <HAL_GPIO_Init+0x354>)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <HAL_GPIO_Init+0x354>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	43db      	mvns	r3, r3
 80038fa:	69ba      	ldr	r2, [r7, #24]
 80038fc:	4013      	ands	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003914:	4a29      	ldr	r2, [pc, #164]	; (80039bc <HAL_GPIO_Init+0x354>)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800391a:	4b28      	ldr	r3, [pc, #160]	; (80039bc <HAL_GPIO_Init+0x354>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800393e:	4a1f      	ldr	r2, [pc, #124]	; (80039bc <HAL_GPIO_Init+0x354>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <HAL_GPIO_Init+0x354>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003968:	4a14      	ldr	r2, [pc, #80]	; (80039bc <HAL_GPIO_Init+0x354>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3301      	adds	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2b0f      	cmp	r3, #15
 8003978:	f67f ae86 	bls.w	8003688 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800397c:	bf00      	nop
 800397e:	bf00      	nop
 8003980:	3724      	adds	r7, #36	; 0x24
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40023800 	.word	0x40023800
 8003990:	40013800 	.word	0x40013800
 8003994:	40020000 	.word	0x40020000
 8003998:	40020400 	.word	0x40020400
 800399c:	40020800 	.word	0x40020800
 80039a0:	40020c00 	.word	0x40020c00
 80039a4:	40021000 	.word	0x40021000
 80039a8:	40021400 	.word	0x40021400
 80039ac:	40021800 	.word	0x40021800
 80039b0:	40021c00 	.word	0x40021c00
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40022400 	.word	0x40022400
 80039bc:	40013c00 	.word	0x40013c00

080039c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	460b      	mov	r3, r1
 80039ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	4013      	ands	r3, r2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039d8:	2301      	movs	r3, #1
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e001      	b.n	80039e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3714      	adds	r7, #20
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
 80039fc:	4613      	mov	r3, r2
 80039fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a00:	787b      	ldrb	r3, [r7, #1]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a06:	887a      	ldrh	r2, [r7, #2]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a0c:	e003      	b.n	8003a16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a0e:	887b      	ldrh	r3, [r7, #2]
 8003a10:	041a      	lsls	r2, r3, #16
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	619a      	str	r2, [r3, #24]
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a24:	b08f      	sub	sp, #60	; 0x3c
 8003a26:	af0a      	add	r7, sp, #40	; 0x28
 8003a28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d101      	bne.n	8003a34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e116      	b.n	8003c62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d106      	bne.n	8003a54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f7fd fc70 	bl	8001334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2203      	movs	r2, #3
 8003a58:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d102      	bne.n	8003a6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f003 f880 	bl	8006b78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	603b      	str	r3, [r7, #0]
 8003a7e:	687e      	ldr	r6, [r7, #4]
 8003a80:	466d      	mov	r5, sp
 8003a82:	f106 0410 	add.w	r4, r6, #16
 8003a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a92:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a96:	1d33      	adds	r3, r6, #4
 8003a98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f003 f814 	bl	8006ac8 <USB_CoreInit>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0d7      	b.n	8003c62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f003 f86e 	bl	8006b9a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003abe:	2300      	movs	r3, #0
 8003ac0:	73fb      	strb	r3, [r7, #15]
 8003ac2:	e04a      	b.n	8003b5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ac4:	7bfa      	ldrb	r2, [r7, #15]
 8003ac6:	6879      	ldr	r1, [r7, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	333d      	adds	r3, #61	; 0x3d
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ad8:	7bfa      	ldrb	r2, [r7, #15]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	333c      	adds	r3, #60	; 0x3c
 8003ae8:	7bfa      	ldrb	r2, [r7, #15]
 8003aea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	b298      	uxth	r0, r3
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	3344      	adds	r3, #68	; 0x44
 8003b00:	4602      	mov	r2, r0
 8003b02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b04:	7bfa      	ldrb	r2, [r7, #15]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	3340      	adds	r3, #64	; 0x40
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	6879      	ldr	r1, [r7, #4]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	3348      	adds	r3, #72	; 0x48
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b2c:	7bfa      	ldrb	r2, [r7, #15]
 8003b2e:	6879      	ldr	r1, [r7, #4]
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	440b      	add	r3, r1
 8003b3a:	334c      	adds	r3, #76	; 0x4c
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b40:	7bfa      	ldrb	r2, [r7, #15]
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	3354      	adds	r3, #84	; 0x54
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	3301      	adds	r3, #1
 8003b58:	73fb      	strb	r3, [r7, #15]
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d3af      	bcc.n	8003ac4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b64:	2300      	movs	r3, #0
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e044      	b.n	8003bf4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4413      	add	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b80:	7bfa      	ldrb	r2, [r7, #15]
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	4613      	mov	r3, r2
 8003b86:	00db      	lsls	r3, r3, #3
 8003b88:	4413      	add	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	440b      	add	r3, r1
 8003b8e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b96:	7bfa      	ldrb	r2, [r7, #15]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bac:	7bfa      	ldrb	r2, [r7, #15]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bc2:	7bfa      	ldrb	r2, [r7, #15]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bd8:	7bfa      	ldrb	r2, [r7, #15]
 8003bda:	6879      	ldr	r1, [r7, #4]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	7bfa      	ldrb	r2, [r7, #15]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d3b5      	bcc.n	8003b6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	603b      	str	r3, [r7, #0]
 8003c04:	687e      	ldr	r6, [r7, #4]
 8003c06:	466d      	mov	r5, sp
 8003c08:	f106 0410 	add.w	r4, r6, #16
 8003c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c1c:	1d33      	adds	r3, r6, #4
 8003c1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c20:	6838      	ldr	r0, [r7, #0]
 8003c22:	f003 f807 	bl	8006c34 <USB_DevInit>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2202      	movs	r2, #2
 8003c30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e014      	b.n	8003c62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d102      	bne.n	8003c56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f80b 	bl	8003c6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f003 f9c5 	bl	8006fea <USB_DevDisconnect>

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c9a:	4b05      	ldr	r3, [pc, #20]	; (8003cb0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	10000003 	.word	0x10000003

08003cb4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a04      	ldr	r2, [pc, #16]	; (8003cd0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cc2:	6013      	str	r3, [r2, #0]
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
 8003cce:	bf00      	nop
 8003cd0:	40007000 	.word	0x40007000

08003cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e291      	b.n	800420e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	f000 8087 	beq.w	8003e06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf8:	4b96      	ldr	r3, [pc, #600]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d00c      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d04:	4b93      	ldr	r3, [pc, #588]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 030c 	and.w	r3, r3, #12
 8003d0c:	2b08      	cmp	r3, #8
 8003d0e:	d112      	bne.n	8003d36 <HAL_RCC_OscConfig+0x62>
 8003d10:	4b90      	ldr	r3, [pc, #576]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1c:	d10b      	bne.n	8003d36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d1e:	4b8d      	ldr	r3, [pc, #564]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d06c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x130>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d168      	bne.n	8003e04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e26b      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d3e:	d106      	bne.n	8003d4e <HAL_RCC_OscConfig+0x7a>
 8003d40:	4b84      	ldr	r3, [pc, #528]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a83      	ldr	r2, [pc, #524]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e02e      	b.n	8003dac <HAL_RCC_OscConfig+0xd8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10c      	bne.n	8003d70 <HAL_RCC_OscConfig+0x9c>
 8003d56:	4b7f      	ldr	r3, [pc, #508]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a7e      	ldr	r2, [pc, #504]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b7c      	ldr	r3, [pc, #496]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a7b      	ldr	r2, [pc, #492]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	e01d      	b.n	8003dac <HAL_RCC_OscConfig+0xd8>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0xc0>
 8003d7a:	4b76      	ldr	r3, [pc, #472]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a75      	ldr	r2, [pc, #468]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	4b73      	ldr	r3, [pc, #460]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a72      	ldr	r2, [pc, #456]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d90:	6013      	str	r3, [r2, #0]
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0xd8>
 8003d94:	4b6f      	ldr	r3, [pc, #444]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a6e      	ldr	r2, [pc, #440]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	4b6c      	ldr	r3, [pc, #432]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a6b      	ldr	r2, [pc, #428]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d013      	beq.n	8003ddc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fd fe64 	bl	8001a80 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fd fe60 	bl	8001a80 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	; 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e21f      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	4b61      	ldr	r3, [pc, #388]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d0f0      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe8>
 8003dda:	e014      	b.n	8003e06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fd fe50 	bl	8001a80 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003de4:	f7fd fe4c 	bl	8001a80 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b64      	cmp	r3, #100	; 0x64
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e20b      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	4b57      	ldr	r3, [pc, #348]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x110>
 8003e02:	e000      	b.n	8003e06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d069      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e12:	4b50      	ldr	r3, [pc, #320]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00b      	beq.n	8003e36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e1e:	4b4d      	ldr	r3, [pc, #308]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f003 030c 	and.w	r3, r3, #12
 8003e26:	2b08      	cmp	r3, #8
 8003e28:	d11c      	bne.n	8003e64 <HAL_RCC_OscConfig+0x190>
 8003e2a:	4b4a      	ldr	r3, [pc, #296]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d116      	bne.n	8003e64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e36:	4b47      	ldr	r3, [pc, #284]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_RCC_OscConfig+0x17a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e1df      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	4b41      	ldr	r3, [pc, #260]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	493d      	ldr	r1, [pc, #244]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	e040      	b.n	8003ee6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d023      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e6c:	4b39      	ldr	r3, [pc, #228]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a38      	ldr	r2, [pc, #224]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd fe02 	bl	8001a80 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e80:	f7fd fdfe 	bl	8001a80 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e1bd      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e92:	4b30      	ldr	r3, [pc, #192]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9e:	4b2d      	ldr	r3, [pc, #180]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	00db      	lsls	r3, r3, #3
 8003eac:	4929      	ldr	r1, [pc, #164]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	600b      	str	r3, [r1, #0]
 8003eb2:	e018      	b.n	8003ee6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eb4:	4b27      	ldr	r3, [pc, #156]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a26      	ldr	r2, [pc, #152]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003eba:	f023 0301 	bic.w	r3, r3, #1
 8003ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec0:	f7fd fdde 	bl	8001a80 <HAL_GetTick>
 8003ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec6:	e008      	b.n	8003eda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ec8:	f7fd fdda 	bl	8001a80 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e199      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	4b1e      	ldr	r3, [pc, #120]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1f0      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d038      	beq.n	8003f64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d019      	beq.n	8003f2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003efa:	4b16      	ldr	r3, [pc, #88]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003efe:	4a15      	ldr	r2, [pc, #84]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f06:	f7fd fdbb 	bl	8001a80 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0e:	f7fd fdb7 	bl	8001a80 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e176      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f20:	4b0c      	ldr	r3, [pc, #48]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCC_OscConfig+0x23a>
 8003f2c:	e01a      	b.n	8003f64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2e:	4b09      	ldr	r3, [pc, #36]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_RCC_OscConfig+0x280>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7fd fda1 	bl	8001a80 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f42:	f7fd fd9d 	bl	8001a80 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d903      	bls.n	8003f58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e15c      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
 8003f54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f58:	4b91      	ldr	r3, [pc, #580]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ee      	bne.n	8003f42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80a4 	beq.w	80040ba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f72:	4b8b      	ldr	r3, [pc, #556]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4b88      	ldr	r3, [pc, #544]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	4a87      	ldr	r2, [pc, #540]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8a:	4b85      	ldr	r3, [pc, #532]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	60bb      	str	r3, [r7, #8]
 8003f94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f96:	2301      	movs	r3, #1
 8003f98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f9a:	4b82      	ldr	r3, [pc, #520]	; (80041a4 <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d118      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003fa6:	4b7f      	ldr	r3, [pc, #508]	; (80041a4 <HAL_RCC_OscConfig+0x4d0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7e      	ldr	r2, [pc, #504]	; (80041a4 <HAL_RCC_OscConfig+0x4d0>)
 8003fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fb2:	f7fd fd65 	bl	8001a80 <HAL_GetTick>
 8003fb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fd fd61 	bl	8001a80 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b64      	cmp	r3, #100	; 0x64
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e120      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fcc:	4b75      	ldr	r3, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x4d0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x31a>
 8003fe0:	4b6f      	ldr	r3, [pc, #444]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe4:	4a6e      	ldr	r2, [pc, #440]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003fe6:	f043 0301 	orr.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70
 8003fec:	e02d      	b.n	800404a <HAL_RCC_OscConfig+0x376>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x33c>
 8003ff6:	4b6a      	ldr	r3, [pc, #424]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	4a69      	ldr	r2, [pc, #420]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8003ffc:	f023 0301 	bic.w	r3, r3, #1
 8004000:	6713      	str	r3, [r2, #112]	; 0x70
 8004002:	4b67      	ldr	r3, [pc, #412]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004006:	4a66      	ldr	r2, [pc, #408]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004008:	f023 0304 	bic.w	r3, r3, #4
 800400c:	6713      	str	r3, [r2, #112]	; 0x70
 800400e:	e01c      	b.n	800404a <HAL_RCC_OscConfig+0x376>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	2b05      	cmp	r3, #5
 8004016:	d10c      	bne.n	8004032 <HAL_RCC_OscConfig+0x35e>
 8004018:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	4a60      	ldr	r2, [pc, #384]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800401e:	f043 0304 	orr.w	r3, r3, #4
 8004022:	6713      	str	r3, [r2, #112]	; 0x70
 8004024:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	e00b      	b.n	800404a <HAL_RCC_OscConfig+0x376>
 8004032:	4b5b      	ldr	r3, [pc, #364]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004036:	4a5a      	ldr	r2, [pc, #360]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6713      	str	r3, [r2, #112]	; 0x70
 800403e:	4b58      	ldr	r3, [pc, #352]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004042:	4a57      	ldr	r2, [pc, #348]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d015      	beq.n	800407e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004052:	f7fd fd15 	bl	8001a80 <HAL_GetTick>
 8004056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004058:	e00a      	b.n	8004070 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405a:	f7fd fd11 	bl	8001a80 <HAL_GetTick>
 800405e:	4602      	mov	r2, r0
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	f241 3288 	movw	r2, #5000	; 0x1388
 8004068:	4293      	cmp	r3, r2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0ce      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004070:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0ee      	beq.n	800405a <HAL_RCC_OscConfig+0x386>
 800407c:	e014      	b.n	80040a8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407e:	f7fd fcff 	bl	8001a80 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	e00a      	b.n	800409c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004086:	f7fd fcfb 	bl	8001a80 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	f241 3288 	movw	r2, #5000	; 0x1388
 8004094:	4293      	cmp	r3, r2
 8004096:	d901      	bls.n	800409c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e0b8      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409c:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1ee      	bne.n	8004086 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d105      	bne.n	80040ba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ae:	4b3c      	ldr	r3, [pc, #240]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	4a3b      	ldr	r2, [pc, #236]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 80040b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a4 	beq.w	800420c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040c4:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	2b08      	cmp	r3, #8
 80040ce:	d06b      	beq.n	80041a8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d149      	bne.n	800416c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d8:	4b31      	ldr	r3, [pc, #196]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a30      	ldr	r2, [pc, #192]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 80040de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fccc 	bl	8001a80 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ec:	f7fd fcc8 	bl	8001a80 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e087      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fe:	4b28      	ldr	r3, [pc, #160]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69da      	ldr	r2, [r3, #28]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	431a      	orrs	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	431a      	orrs	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	3b01      	subs	r3, #1
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	431a      	orrs	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	061b      	lsls	r3, r3, #24
 800412e:	4313      	orrs	r3, r2
 8004130:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004136:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a18      	ldr	r2, [pc, #96]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800413e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004144:	f7fd fc9c 	bl	8001a80 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800414c:	f7fd fc98 	bl	8001a80 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e057      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415e:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0f0      	beq.n	800414c <HAL_RCC_OscConfig+0x478>
 800416a:	e04f      	b.n	800420c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416c:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a0b      	ldr	r2, [pc, #44]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004178:	f7fd fc82 	bl	8001a80 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fc7e 	bl	8001a80 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e03d      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b03      	ldr	r3, [pc, #12]	; (80041a0 <HAL_RCC_OscConfig+0x4cc>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x4ac>
 800419e:	e035      	b.n	800420c <HAL_RCC_OscConfig+0x538>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80041a8:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <HAL_RCC_OscConfig+0x544>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d028      	beq.n	8004208 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d121      	bne.n	8004208 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d11a      	bne.n	8004208 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041d8:	4013      	ands	r3, r2
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041de:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d111      	bne.n	8004208 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	085b      	lsrs	r3, r3, #1
 80041f0:	3b01      	subs	r3, #1
 80041f2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004202:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004204:	429a      	cmp	r2, r3
 8004206:	d001      	beq.n	800420c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800

0800421c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004226:	2300      	movs	r3, #0
 8004228:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e0d0      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004234:	4b6a      	ldr	r3, [pc, #424]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d910      	bls.n	8004264 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004242:	4b67      	ldr	r3, [pc, #412]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f023 020f 	bic.w	r2, r3, #15
 800424a:	4965      	ldr	r1, [pc, #404]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	4313      	orrs	r3, r2
 8004250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004252:	4b63      	ldr	r3, [pc, #396]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d001      	beq.n	8004264 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0b8      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0304 	and.w	r3, r3, #4
 8004278:	2b00      	cmp	r3, #0
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800427c:	4b59      	ldr	r3, [pc, #356]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	4a58      	ldr	r2, [pc, #352]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004282:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004286:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004294:	4b53      	ldr	r3, [pc, #332]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	4a52      	ldr	r2, [pc, #328]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800429a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800429e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a0:	4b50      	ldr	r3, [pc, #320]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	494d      	ldr	r1, [pc, #308]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d040      	beq.n	8004340 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d107      	bne.n	80042d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c6:	4b47      	ldr	r3, [pc, #284]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d115      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e07f      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d107      	bne.n	80042ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042de:	4b41      	ldr	r3, [pc, #260]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d109      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e073      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ee:	4b3d      	ldr	r3, [pc, #244]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e06b      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fe:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f023 0203 	bic.w	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	4936      	ldr	r1, [pc, #216]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800430c:	4313      	orrs	r3, r2
 800430e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004310:	f7fd fbb6 	bl	8001a80 <HAL_GetTick>
 8004314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004316:	e00a      	b.n	800432e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004318:	f7fd fbb2 	bl	8001a80 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e053      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	4b2d      	ldr	r3, [pc, #180]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 020c 	and.w	r2, r3, #12
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	429a      	cmp	r2, r3
 800433e:	d1eb      	bne.n	8004318 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004340:	4b27      	ldr	r3, [pc, #156]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d210      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f023 020f 	bic.w	r2, r3, #15
 8004356:	4922      	ldr	r1, [pc, #136]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	4313      	orrs	r3, r2
 800435c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435e:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	683a      	ldr	r2, [r7, #0]
 8004368:	429a      	cmp	r2, r3
 800436a:	d001      	beq.n	8004370 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e032      	b.n	80043d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d008      	beq.n	800438e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800437c:	4b19      	ldr	r3, [pc, #100]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4916      	ldr	r1, [pc, #88]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d009      	beq.n	80043ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800439a:	4b12      	ldr	r3, [pc, #72]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	490e      	ldr	r1, [pc, #56]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ae:	f000 f821 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 80043b2:	4602      	mov	r2, r0
 80043b4:	4b0b      	ldr	r3, [pc, #44]	; (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	490a      	ldr	r1, [pc, #40]	; (80043e8 <HAL_RCC_ClockConfig+0x1cc>)
 80043c0:	5ccb      	ldrb	r3, [r1, r3]
 80043c2:	fa22 f303 	lsr.w	r3, r2, r3
 80043c6:	4a09      	ldr	r2, [pc, #36]	; (80043ec <HAL_RCC_ClockConfig+0x1d0>)
 80043c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043ca:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_ClockConfig+0x1d4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fd f82a 	bl	8001428 <HAL_InitTick>

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	40023c00 	.word	0x40023c00
 80043e4:	40023800 	.word	0x40023800
 80043e8:	0801d6e8 	.word	0x0801d6e8
 80043ec:	20000018 	.word	0x20000018
 80043f0:	2000001c 	.word	0x2000001c

080043f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b094      	sub	sp, #80	; 0x50
 80043fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80043fc:	2300      	movs	r3, #0
 80043fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004400:	2300      	movs	r3, #0
 8004402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004404:	2300      	movs	r3, #0
 8004406:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800440c:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 030c 	and.w	r3, r3, #12
 8004414:	2b08      	cmp	r3, #8
 8004416:	d00d      	beq.n	8004434 <HAL_RCC_GetSysClockFreq+0x40>
 8004418:	2b08      	cmp	r3, #8
 800441a:	f200 80e1 	bhi.w	80045e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800441e:	2b00      	cmp	r3, #0
 8004420:	d002      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0x34>
 8004422:	2b04      	cmp	r3, #4
 8004424:	d003      	beq.n	800442e <HAL_RCC_GetSysClockFreq+0x3a>
 8004426:	e0db      	b.n	80045e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b73      	ldr	r3, [pc, #460]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800442c:	e0db      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800442e:	4b73      	ldr	r3, [pc, #460]	; (80045fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004430:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004432:	e0d8      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004434:	4b6f      	ldr	r3, [pc, #444]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800443e:	4b6d      	ldr	r3, [pc, #436]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4b6a      	ldr	r3, [pc, #424]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	2200      	movs	r2, #0
 8004452:	63bb      	str	r3, [r7, #56]	; 0x38
 8004454:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
 8004462:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	f04f 0000 	mov.w	r0, #0
 800446e:	f04f 0100 	mov.w	r1, #0
 8004472:	0159      	lsls	r1, r3, #5
 8004474:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004478:	0150      	lsls	r0, r2, #5
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	4621      	mov	r1, r4
 8004480:	1a51      	subs	r1, r2, r1
 8004482:	6139      	str	r1, [r7, #16]
 8004484:	4629      	mov	r1, r5
 8004486:	eb63 0301 	sbc.w	r3, r3, r1
 800448a:	617b      	str	r3, [r7, #20]
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004498:	4659      	mov	r1, fp
 800449a:	018b      	lsls	r3, r1, #6
 800449c:	4651      	mov	r1, sl
 800449e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80044a2:	4651      	mov	r1, sl
 80044a4:	018a      	lsls	r2, r1, #6
 80044a6:	4651      	mov	r1, sl
 80044a8:	ebb2 0801 	subs.w	r8, r2, r1
 80044ac:	4659      	mov	r1, fp
 80044ae:	eb63 0901 	sbc.w	r9, r3, r1
 80044b2:	f04f 0200 	mov.w	r2, #0
 80044b6:	f04f 0300 	mov.w	r3, #0
 80044ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	eb18 0303 	adds.w	r3, r8, r3
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	462b      	mov	r3, r5
 80044d4:	eb49 0303 	adc.w	r3, r9, r3
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80044e6:	4629      	mov	r1, r5
 80044e8:	024b      	lsls	r3, r1, #9
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80044f0:	4621      	mov	r1, r4
 80044f2:	024a      	lsls	r2, r1, #9
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	2200      	movs	r2, #0
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80044fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004500:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004504:	f7fb feec 	bl	80002e0 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004510:	e058      	b.n	80045c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004512:	4b38      	ldr	r3, [pc, #224]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	099b      	lsrs	r3, r3, #6
 8004518:	2200      	movs	r2, #0
 800451a:	4618      	mov	r0, r3
 800451c:	4611      	mov	r1, r2
 800451e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004522:	623b      	str	r3, [r7, #32]
 8004524:	2300      	movs	r3, #0
 8004526:	627b      	str	r3, [r7, #36]	; 0x24
 8004528:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800452c:	4642      	mov	r2, r8
 800452e:	464b      	mov	r3, r9
 8004530:	f04f 0000 	mov.w	r0, #0
 8004534:	f04f 0100 	mov.w	r1, #0
 8004538:	0159      	lsls	r1, r3, #5
 800453a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800453e:	0150      	lsls	r0, r2, #5
 8004540:	4602      	mov	r2, r0
 8004542:	460b      	mov	r3, r1
 8004544:	4641      	mov	r1, r8
 8004546:	ebb2 0a01 	subs.w	sl, r2, r1
 800454a:	4649      	mov	r1, r9
 800454c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800455c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004560:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004564:	ebb2 040a 	subs.w	r4, r2, sl
 8004568:	eb63 050b 	sbc.w	r5, r3, fp
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	00eb      	lsls	r3, r5, #3
 8004576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457a:	00e2      	lsls	r2, r4, #3
 800457c:	4614      	mov	r4, r2
 800457e:	461d      	mov	r5, r3
 8004580:	4643      	mov	r3, r8
 8004582:	18e3      	adds	r3, r4, r3
 8004584:	603b      	str	r3, [r7, #0]
 8004586:	464b      	mov	r3, r9
 8004588:	eb45 0303 	adc.w	r3, r5, r3
 800458c:	607b      	str	r3, [r7, #4]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800459a:	4629      	mov	r1, r5
 800459c:	028b      	lsls	r3, r1, #10
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80045a4:	4621      	mov	r1, r4
 80045a6:	028a      	lsls	r2, r1, #10
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	2200      	movs	r2, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	61fa      	str	r2, [r7, #28]
 80045b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045b8:	f7fb fe92 	bl	80002e0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	0c1b      	lsrs	r3, r3, #16
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	3301      	adds	r3, #1
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80045d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045de:	e002      	b.n	80045e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045e0:	4b05      	ldr	r3, [pc, #20]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80045e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80045e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3750      	adds	r7, #80	; 0x50
 80045ec:	46bd      	mov	sp, r7
 80045ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f2:	bf00      	nop
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	20000018 	.word	0x20000018

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a9b      	lsrs	r3, r3, #10
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4903      	ldr	r1, [pc, #12]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004634:	4618      	mov	r0, r3
 8004636:	bd80      	pop	{r7, pc}
 8004638:	40023800 	.word	0x40023800
 800463c:	0801d6f8 	.word	0x0801d6f8

08004640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004644:	f7ff ffdc 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	0b5b      	lsrs	r3, r3, #13
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40023800 	.word	0x40023800
 8004664:	0801d6f8 	.word	0x0801d6f8

08004668 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004668:	b480      	push	{r7}
 800466a:	b083      	sub	sp, #12
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	220f      	movs	r2, #15
 8004676:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004678:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0203 	and.w	r2, r3, #3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004690:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800469c:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_GetClockConfig+0x5c>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <HAL_RCC_GetClockConfig+0x60>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 020f 	and.w	r2, r3, #15
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	601a      	str	r2, [r3, #0]
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800
 80046c8:	40023c00 	.word	0x40023c00

080046cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80046d8:	2300      	movs	r3, #0
 80046da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80046e4:	2300      	movs	r3, #0
 80046e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0301 	and.w	r3, r3, #1
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d012      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046f4:	4b69      	ldr	r3, [pc, #420]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	4a68      	ldr	r2, [pc, #416]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80046fe:	6093      	str	r3, [r2, #8]
 8004700:	4b66      	ldr	r3, [pc, #408]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	4964      	ldr	r1, [pc, #400]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004716:	2301      	movs	r3, #1
 8004718:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d017      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004726:	4b5d      	ldr	r3, [pc, #372]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004734:	4959      	ldr	r1, [pc, #356]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004740:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004744:	d101      	bne.n	800474a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004746:	2301      	movs	r3, #1
 8004748:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004752:	2301      	movs	r3, #1
 8004754:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d017      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004762:	4b4e      	ldr	r3, [pc, #312]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004768:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	494a      	ldr	r1, [pc, #296]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004780:	d101      	bne.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004782:	2301      	movs	r3, #1
 8004784:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800478e:	2301      	movs	r3, #1
 8004790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 808b 	beq.w	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	4a39      	ldr	r2, [pc, #228]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ba:	6413      	str	r3, [r2, #64]	; 0x40
 80047bc:	4b37      	ldr	r3, [pc, #220]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047c8:	4b35      	ldr	r3, [pc, #212]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a34      	ldr	r2, [pc, #208]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d4:	f7fd f954 	bl	8001a80 <HAL_GetTick>
 80047d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047dc:	f7fd f950 	bl	8001a80 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	; 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e357      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80047ee:	4b2c      	ldr	r3, [pc, #176]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047fa:	4b28      	ldr	r3, [pc, #160]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d035      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	429a      	cmp	r2, r3
 8004816:	d02e      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004818:	4b20      	ldr	r3, [pc, #128]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800481a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004820:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004822:	4b1e      	ldr	r3, [pc, #120]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004826:	4a1d      	ldr	r2, [pc, #116]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800482e:	4b1b      	ldr	r3, [pc, #108]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004832:	4a1a      	ldr	r2, [pc, #104]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004838:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800483a:	4a18      	ldr	r2, [pc, #96]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004840:	4b16      	ldr	r3, [pc, #88]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	2b01      	cmp	r3, #1
 800484a:	d114      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484c:	f7fd f918 	bl	8001a80 <HAL_GetTick>
 8004850:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004852:	e00a      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004854:	f7fd f914 	bl	8001a80 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e319      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0ee      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004882:	d111      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004884:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004890:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004892:	400b      	ands	r3, r1
 8004894:	4901      	ldr	r1, [pc, #4]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
 800489a:	e00b      	b.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800489c:	40023800 	.word	0x40023800
 80048a0:	40007000 	.word	0x40007000
 80048a4:	0ffffcff 	.word	0x0ffffcff
 80048a8:	4baa      	ldr	r3, [pc, #680]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	4aa9      	ldr	r2, [pc, #676]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048b2:	6093      	str	r3, [r2, #8]
 80048b4:	4ba7      	ldr	r3, [pc, #668]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c0:	49a4      	ldr	r1, [pc, #656]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0310 	and.w	r3, r3, #16
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d010      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048d2:	4ba0      	ldr	r3, [pc, #640]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d8:	4a9e      	ldr	r2, [pc, #632]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048e2:	4b9c      	ldr	r3, [pc, #624]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	4999      	ldr	r1, [pc, #612]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004900:	4b94      	ldr	r3, [pc, #592]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800490e:	4991      	ldr	r1, [pc, #580]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004910:	4313      	orrs	r3, r2
 8004912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00a      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004922:	4b8c      	ldr	r3, [pc, #560]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004928:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004930:	4988      	ldr	r1, [pc, #544]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004932:	4313      	orrs	r3, r2
 8004934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004944:	4b83      	ldr	r3, [pc, #524]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004952:	4980      	ldr	r1, [pc, #512]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004966:	4b7b      	ldr	r3, [pc, #492]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800496c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004974:	4977      	ldr	r1, [pc, #476]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004988:	4b72      	ldr	r3, [pc, #456]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800498a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498e:	f023 0203 	bic.w	r2, r3, #3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	496f      	ldr	r1, [pc, #444]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049aa:	4b6a      	ldr	r3, [pc, #424]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b0:	f023 020c 	bic.w	r2, r3, #12
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049b8:	4966      	ldr	r1, [pc, #408]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049cc:	4b61      	ldr	r3, [pc, #388]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049da:	495e      	ldr	r1, [pc, #376]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049ee:	4b59      	ldr	r3, [pc, #356]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fc:	4955      	ldr	r1, [pc, #340]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a10:	4b50      	ldr	r3, [pc, #320]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	494d      	ldr	r1, [pc, #308]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a32:	4b48      	ldr	r3, [pc, #288]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a40:	4944      	ldr	r1, [pc, #272]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a54:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	493c      	ldr	r1, [pc, #240]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004a76:	4b37      	ldr	r3, [pc, #220]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a7c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a84:	4933      	ldr	r1, [pc, #204]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004a98:	4b2e      	ldr	r3, [pc, #184]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aa6:	492b      	ldr	r1, [pc, #172]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d011      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004aba:	4b26      	ldr	r3, [pc, #152]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ac8:	4922      	ldr	r1, [pc, #136]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d101      	bne.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004ada:	2301      	movs	r3, #1
 8004adc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0308 	and.w	r3, r3, #8
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d001      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004afa:	4b16      	ldr	r3, [pc, #88]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b00:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b08:	4912      	ldr	r1, [pc, #72]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00b      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b1c:	4b0d      	ldr	r3, [pc, #52]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b2c:	4909      	ldr	r1, [pc, #36]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d006      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 80d9 	beq.w	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b48:	4b02      	ldr	r3, [pc, #8]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a01      	ldr	r2, [pc, #4]	; (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b52:	e001      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004b54:	40023800 	.word	0x40023800
 8004b58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b5a:	f7fc ff91 	bl	8001a80 <HAL_GetTick>
 8004b5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b60:	e008      	b.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b62:	f7fc ff8d 	bl	8001a80 <HAL_GetTick>
 8004b66:	4602      	mov	r2, r0
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad3      	subs	r3, r2, r3
 8004b6c:	2b64      	cmp	r3, #100	; 0x64
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e194      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b74:	4b6c      	ldr	r3, [pc, #432]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d1f0      	bne.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d021      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d11d      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b94:	4b64      	ldr	r3, [pc, #400]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004b96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b9a:	0c1b      	lsrs	r3, r3, #16
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ba2:	4b61      	ldr	r3, [pc, #388]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ba8:	0e1b      	lsrs	r3, r3, #24
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	019a      	lsls	r2, r3, #6
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	041b      	lsls	r3, r3, #16
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	061b      	lsls	r3, r3, #24
 8004bc0:	431a      	orrs	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	071b      	lsls	r3, r3, #28
 8004bc8:	4957      	ldr	r1, [pc, #348]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d004      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d02e      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfa:	d129      	bne.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004bfc:	4b4a      	ldr	r3, [pc, #296]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c02:	0c1b      	lsrs	r3, r3, #16
 8004c04:	f003 0303 	and.w	r3, r3, #3
 8004c08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c0a:	4b47      	ldr	r3, [pc, #284]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c10:	0f1b      	lsrs	r3, r3, #28
 8004c12:	f003 0307 	and.w	r3, r3, #7
 8004c16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	019a      	lsls	r2, r3, #6
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	041b      	lsls	r3, r3, #16
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	071b      	lsls	r3, r3, #28
 8004c30:	493d      	ldr	r1, [pc, #244]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c38:	4b3b      	ldr	r3, [pc, #236]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3e:	f023 021f 	bic.w	r2, r3, #31
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	3b01      	subs	r3, #1
 8004c48:	4937      	ldr	r1, [pc, #220]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01d      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c5c:	4b32      	ldr	r3, [pc, #200]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c62:	0e1b      	lsrs	r3, r3, #24
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	0f1b      	lsrs	r3, r3, #28
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	019a      	lsls	r2, r3, #6
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	041b      	lsls	r3, r3, #16
 8004c84:	431a      	orrs	r2, r3
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	061b      	lsls	r3, r3, #24
 8004c8a:	431a      	orrs	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	071b      	lsls	r3, r3, #28
 8004c90:	4925      	ldr	r1, [pc, #148]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d011      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	019a      	lsls	r2, r3, #6
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	061b      	lsls	r3, r3, #24
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	071b      	lsls	r3, r3, #28
 8004cc0:	4919      	ldr	r1, [pc, #100]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cc8:	4b17      	ldr	r3, [pc, #92]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a16      	ldr	r2, [pc, #88]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd4:	f7fc fed4 	bl	8001a80 <HAL_GetTick>
 8004cd8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cdc:	f7fc fed0 	bl	8001a80 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b64      	cmp	r3, #100	; 0x64
 8004ce8:	d901      	bls.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e0d7      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	f040 80cd 	bne.w	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d0e:	f7fc feb7 	bl	8001a80 <HAL_GetTick>
 8004d12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d14:	e00a      	b.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d16:	f7fc feb3 	bl	8001a80 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b64      	cmp	r3, #100	; 0x64
 8004d22:	d903      	bls.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e0ba      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004d28:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d2c:	4b5e      	ldr	r3, [pc, #376]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d38:	d0ed      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02e      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d12a      	bne.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d62:	4b51      	ldr	r3, [pc, #324]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d70:	4b4d      	ldr	r3, [pc, #308]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	0f1b      	lsrs	r3, r3, #28
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	019a      	lsls	r2, r3, #6
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	4944      	ldr	r1, [pc, #272]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d9e:	4b42      	ldr	r3, [pc, #264]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	3b01      	subs	r3, #1
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	493d      	ldr	r1, [pc, #244]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d022      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dcc:	d11d      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dce:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	f003 030f 	and.w	r3, r3, #15
 8004dda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ddc:	4b32      	ldr	r3, [pc, #200]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de2:	0f1b      	lsrs	r3, r3, #28
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	019a      	lsls	r2, r3, #6
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	041b      	lsls	r3, r3, #16
 8004df6:	431a      	orrs	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	061b      	lsls	r3, r3, #24
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	071b      	lsls	r3, r3, #28
 8004e02:	4929      	ldr	r1, [pc, #164]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d028      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e16:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1c:	0e1b      	lsrs	r3, r3, #24
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004e24:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f003 0303 	and.w	r3, r3, #3
 8004e30:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	019a      	lsls	r2, r3, #6
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	041b      	lsls	r3, r3, #16
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	061b      	lsls	r3, r3, #24
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	071b      	lsls	r3, r3, #28
 8004e4a:	4917      	ldr	r1, [pc, #92]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004e52:	4b15      	ldr	r3, [pc, #84]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e60:	4911      	ldr	r1, [pc, #68]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004e68:	4b0f      	ldr	r3, [pc, #60]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e74:	f7fc fe04 	bl	8001a80 <HAL_GetTick>
 8004e78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e7a:	e008      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e7c:	f7fc fe00 	bl	8001a80 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b64      	cmp	r3, #100	; 0x64
 8004e88:	d901      	bls.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e007      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e8e:	4b06      	ldr	r3, [pc, #24]	; (8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9a:	d1ef      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40023800 	.word	0x40023800

08004eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d101      	bne.n	8004ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e049      	b.n	8004f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d106      	bne.n	8004ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fc f93e 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4610      	mov	r0, r2
 8004eec:	f000 fd30 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3708      	adds	r7, #8
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
	...

08004f5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d001      	beq.n	8004f74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e054      	b.n	800501e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f042 0201 	orr.w	r2, r2, #1
 8004f8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a26      	ldr	r2, [pc, #152]	; (800502c <HAL_TIM_Base_Start_IT+0xd0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d022      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f9e:	d01d      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a22      	ldr	r2, [pc, #136]	; (8005030 <HAL_TIM_Base_Start_IT+0xd4>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d018      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a21      	ldr	r2, [pc, #132]	; (8005034 <HAL_TIM_Base_Start_IT+0xd8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a1f      	ldr	r2, [pc, #124]	; (8005038 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a1e      	ldr	r2, [pc, #120]	; (800503c <HAL_TIM_Base_Start_IT+0xe0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d009      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a1c      	ldr	r2, [pc, #112]	; (8005040 <HAL_TIM_Base_Start_IT+0xe4>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0x80>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1b      	ldr	r2, [pc, #108]	; (8005044 <HAL_TIM_Base_Start_IT+0xe8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d115      	bne.n	8005008 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689a      	ldr	r2, [r3, #8]
 8004fe2:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_TIM_Base_Start_IT+0xec>)
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2b06      	cmp	r3, #6
 8004fec:	d015      	beq.n	800501a <HAL_TIM_Base_Start_IT+0xbe>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff4:	d011      	beq.n	800501a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0201 	orr.w	r2, r2, #1
 8005004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005006:	e008      	b.n	800501a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0201 	orr.w	r2, r2, #1
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	e000      	b.n	800501c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40001800 	.word	0x40001800
 8005048:	00010007 	.word	0x00010007

0800504c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e049      	b.n	80050f2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d106      	bne.n	8005078 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f841 	bl	80050fa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3304      	adds	r3, #4
 8005088:	4619      	mov	r1, r3
 800508a:	4610      	mov	r0, r2
 800508c:	f000 fc60 	bl	8005950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050fa:	b480      	push	{r7}
 80050fc:	b083      	sub	sp, #12
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005102:	bf00      	nop
 8005104:	370c      	adds	r7, #12
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
	...

08005110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_TIM_PWM_Start+0x24>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e03c      	b.n	80051ae <HAL_TIM_PWM_Start+0x9e>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d109      	bne.n	800514e <HAL_TIM_PWM_Start+0x3e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e02f      	b.n	80051ae <HAL_TIM_PWM_Start+0x9e>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d109      	bne.n	8005168 <HAL_TIM_PWM_Start+0x58>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e022      	b.n	80051ae <HAL_TIM_PWM_Start+0x9e>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b0c      	cmp	r3, #12
 800516c:	d109      	bne.n	8005182 <HAL_TIM_PWM_Start+0x72>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005174:	b2db      	uxtb	r3, r3
 8005176:	2b01      	cmp	r3, #1
 8005178:	bf14      	ite	ne
 800517a:	2301      	movne	r3, #1
 800517c:	2300      	moveq	r3, #0
 800517e:	b2db      	uxtb	r3, r3
 8005180:	e015      	b.n	80051ae <HAL_TIM_PWM_Start+0x9e>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b10      	cmp	r3, #16
 8005186:	d109      	bne.n	800519c <HAL_TIM_PWM_Start+0x8c>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	bf14      	ite	ne
 8005194:	2301      	movne	r3, #1
 8005196:	2300      	moveq	r3, #0
 8005198:	b2db      	uxtb	r3, r3
 800519a:	e008      	b.n	80051ae <HAL_TIM_PWM_Start+0x9e>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	bf14      	ite	ne
 80051a8:	2301      	movne	r3, #1
 80051aa:	2300      	moveq	r3, #0
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d001      	beq.n	80051b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e092      	b.n	80052dc <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Start+0xb6>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c4:	e023      	b.n	800520e <HAL_TIM_PWM_Start+0xfe>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Start+0xc6>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2202      	movs	r2, #2
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d4:	e01b      	b.n	800520e <HAL_TIM_PWM_Start+0xfe>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xd6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	e013      	b.n	800520e <HAL_TIM_PWM_Start+0xfe>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b0c      	cmp	r3, #12
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xe6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051f4:	e00b      	b.n	800520e <HAL_TIM_PWM_Start+0xfe>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xf6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005204:	e003      	b.n	800520e <HAL_TIM_PWM_Start+0xfe>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2201      	movs	r2, #1
 8005214:	6839      	ldr	r1, [r7, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f000 ff32 	bl	8006080 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_TIM_PWM_Start+0x1d4>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d004      	beq.n	8005230 <HAL_TIM_PWM_Start+0x120>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <HAL_TIM_PWM_Start+0x1d8>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_TIM_PWM_Start+0x124>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <HAL_TIM_PWM_Start+0x126>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005248:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a25      	ldr	r2, [pc, #148]	; (80052e4 <HAL_TIM_PWM_Start+0x1d4>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d022      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800525c:	d01d      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <HAL_TIM_PWM_Start+0x1dc>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d018      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a20      	ldr	r2, [pc, #128]	; (80052f0 <HAL_TIM_PWM_Start+0x1e0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1f      	ldr	r2, [pc, #124]	; (80052f4 <HAL_TIM_PWM_Start+0x1e4>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <HAL_TIM_PWM_Start+0x1d8>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1b      	ldr	r2, [pc, #108]	; (80052f8 <HAL_TIM_PWM_Start+0x1e8>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_TIM_PWM_Start+0x18a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a19      	ldr	r2, [pc, #100]	; (80052fc <HAL_TIM_PWM_Start+0x1ec>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d115      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	4b17      	ldr	r3, [pc, #92]	; (8005300 <HAL_TIM_PWM_Start+0x1f0>)
 80052a2:	4013      	ands	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d015      	beq.n	80052d8 <HAL_TIM_PWM_Start+0x1c8>
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d011      	beq.n	80052d8 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0201 	orr.w	r2, r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c4:	e008      	b.n	80052d8 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	601a      	str	r2, [r3, #0]
 80052d6:	e000      	b.n	80052da <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800
 8005300:	00010007 	.word	0x00010007

08005304 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b02      	cmp	r3, #2
 8005318:	d122      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68db      	ldr	r3, [r3, #12]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b02      	cmp	r3, #2
 8005326:	d11b      	bne.n	8005360 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f06f 0202 	mvn.w	r2, #2
 8005330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2201      	movs	r2, #1
 8005336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fae4 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 800534c:	e005      	b.n	800535a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fad6 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fae7 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0304 	and.w	r3, r3, #4
 800536a:	2b04      	cmp	r3, #4
 800536c:	d122      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b04      	cmp	r3, #4
 800537a:	d11b      	bne.n	80053b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f06f 0204 	mvn.w	r2, #4
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 faba 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 80053a0:	e005      	b.n	80053ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 faac 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 fabd 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b08      	cmp	r3, #8
 80053c0:	d122      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0308 	and.w	r3, r3, #8
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d11b      	bne.n	8005408 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0208 	mvn.w	r2, #8
 80053d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2204      	movs	r2, #4
 80053de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	69db      	ldr	r3, [r3, #28]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa90 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 80053f4:	e005      	b.n	8005402 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa82 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fa93 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d122      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	f003 0310 	and.w	r3, r3, #16
 8005420:	2b10      	cmp	r3, #16
 8005422:	d11b      	bne.n	800545c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0210 	mvn.w	r2, #16
 800542c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2208      	movs	r2, #8
 8005432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800543e:	2b00      	cmp	r3, #0
 8005440:	d003      	beq.n	800544a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 fa66 	bl	8005914 <HAL_TIM_IC_CaptureCallback>
 8005448:	e005      	b.n	8005456 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fa58 	bl	8005900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f000 fa69 	bl	8005928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10e      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d107      	bne.n	8005488 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f06f 0201 	mvn.w	r2, #1
 8005480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f7fb fe0a 	bl	800109c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b80      	cmp	r3, #128	; 0x80
 8005494:	d10e      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d107      	bne.n	80054b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fea4 	bl	80061fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c2:	d10e      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b80      	cmp	r3, #128	; 0x80
 80054d0:	d107      	bne.n	80054e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80054da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fe97 	bl	8006210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ec:	2b40      	cmp	r3, #64	; 0x40
 80054ee:	d10e      	bne.n	800550e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d107      	bne.n	800550e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fa17 	bl	800593c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b20      	cmp	r3, #32
 800551a:	d10e      	bne.n	800553a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b20      	cmp	r3, #32
 8005528:	d107      	bne.n	800553a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f06f 0220 	mvn.w	r2, #32
 8005532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 fe57 	bl	80061e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800553a:	bf00      	nop
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005550:	2300      	movs	r3, #0
 8005552:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800555e:	2302      	movs	r3, #2
 8005560:	e0ff      	b.n	8005762 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b14      	cmp	r3, #20
 800556e:	f200 80f0 	bhi.w	8005752 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005572:	a201      	add	r2, pc, #4	; (adr r2, 8005578 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005578:	080055cd 	.word	0x080055cd
 800557c:	08005753 	.word	0x08005753
 8005580:	08005753 	.word	0x08005753
 8005584:	08005753 	.word	0x08005753
 8005588:	0800560d 	.word	0x0800560d
 800558c:	08005753 	.word	0x08005753
 8005590:	08005753 	.word	0x08005753
 8005594:	08005753 	.word	0x08005753
 8005598:	0800564f 	.word	0x0800564f
 800559c:	08005753 	.word	0x08005753
 80055a0:	08005753 	.word	0x08005753
 80055a4:	08005753 	.word	0x08005753
 80055a8:	0800568f 	.word	0x0800568f
 80055ac:	08005753 	.word	0x08005753
 80055b0:	08005753 	.word	0x08005753
 80055b4:	08005753 	.word	0x08005753
 80055b8:	080056d1 	.word	0x080056d1
 80055bc:	08005753 	.word	0x08005753
 80055c0:	08005753 	.word	0x08005753
 80055c4:	08005753 	.word	0x08005753
 80055c8:	08005711 	.word	0x08005711
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f000 fa5c 	bl	8005a90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699a      	ldr	r2, [r3, #24]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f042 0208 	orr.w	r2, r2, #8
 80055e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	699a      	ldr	r2, [r3, #24]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f022 0204 	bic.w	r2, r2, #4
 80055f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	6999      	ldr	r1, [r3, #24]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	430a      	orrs	r2, r1
 8005608:	619a      	str	r2, [r3, #24]
      break;
 800560a:	e0a5      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 faae 	bl	8005b74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	699a      	ldr	r2, [r3, #24]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005626:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005636:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6999      	ldr	r1, [r3, #24]
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	021a      	lsls	r2, r3, #8
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	619a      	str	r2, [r3, #24]
      break;
 800564c:	e084      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fb05 	bl	8005c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0208 	orr.w	r2, r2, #8
 8005668:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0204 	bic.w	r2, r2, #4
 8005678:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69d9      	ldr	r1, [r3, #28]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	430a      	orrs	r2, r1
 800568a:	61da      	str	r2, [r3, #28]
      break;
 800568c:	e064      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68b9      	ldr	r1, [r7, #8]
 8005694:	4618      	mov	r0, r3
 8005696:	f000 fb5b 	bl	8005d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	69da      	ldr	r2, [r3, #28]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	69d9      	ldr	r1, [r3, #28]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	021a      	lsls	r2, r3, #8
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	430a      	orrs	r2, r1
 80056cc:	61da      	str	r2, [r3, #28]
      break;
 80056ce:	e043      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb92 	bl	8005e00 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0208 	orr.w	r2, r2, #8
 80056ea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f022 0204 	bic.w	r2, r2, #4
 80056fa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800570e:	e023      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fbc4 	bl	8005ea4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800572a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	021a      	lsls	r2, r3, #8
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005750:	e002      	b.n	8005758 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	75fb      	strb	r3, [r7, #23]
      break;
 8005756:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005760:	7dfb      	ldrb	r3, [r7, #23]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3718      	adds	r7, #24
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop

0800576c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_TIM_ConfigClockSource+0x1c>
 8005784:	2302      	movs	r3, #2
 8005786:	e0b4      	b.n	80058f2 <HAL_TIM_ConfigClockSource+0x186>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057a0:	68ba      	ldr	r2, [r7, #8]
 80057a2:	4b56      	ldr	r3, [pc, #344]	; (80058fc <HAL_TIM_ConfigClockSource+0x190>)
 80057a4:	4013      	ands	r3, r2
 80057a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68ba      	ldr	r2, [r7, #8]
 80057b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c0:	d03e      	beq.n	8005840 <HAL_TIM_ConfigClockSource+0xd4>
 80057c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057c6:	f200 8087 	bhi.w	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ce:	f000 8086 	beq.w	80058de <HAL_TIM_ConfigClockSource+0x172>
 80057d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057d6:	d87f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b70      	cmp	r3, #112	; 0x70
 80057da:	d01a      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0xa6>
 80057dc:	2b70      	cmp	r3, #112	; 0x70
 80057de:	d87b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b60      	cmp	r3, #96	; 0x60
 80057e2:	d050      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0x11a>
 80057e4:	2b60      	cmp	r3, #96	; 0x60
 80057e6:	d877      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b50      	cmp	r3, #80	; 0x50
 80057ea:	d03c      	beq.n	8005866 <HAL_TIM_ConfigClockSource+0xfa>
 80057ec:	2b50      	cmp	r3, #80	; 0x50
 80057ee:	d873      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b40      	cmp	r3, #64	; 0x40
 80057f2:	d058      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x13a>
 80057f4:	2b40      	cmp	r3, #64	; 0x40
 80057f6:	d86f      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b30      	cmp	r3, #48	; 0x30
 80057fa:	d064      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b30      	cmp	r3, #48	; 0x30
 80057fe:	d86b      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b20      	cmp	r3, #32
 8005802:	d060      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b20      	cmp	r3, #32
 8005806:	d867      	bhi.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
 8005808:	2b00      	cmp	r3, #0
 800580a:	d05c      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 800580c:	2b10      	cmp	r3, #16
 800580e:	d05a      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x15a>
 8005810:	e062      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005822:	f000 fc0d 	bl	8006040 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005834:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	609a      	str	r2, [r3, #8]
      break;
 800583e:	e04f      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005850:	f000 fbf6 	bl	8006040 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	689a      	ldr	r2, [r3, #8]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005862:	609a      	str	r2, [r3, #8]
      break;
 8005864:	e03c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005872:	461a      	mov	r2, r3
 8005874:	f000 fb6a 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2150      	movs	r1, #80	; 0x50
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fbc3 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 8005884:	e02c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005892:	461a      	mov	r2, r3
 8005894:	f000 fb89 	bl	8005faa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2160      	movs	r1, #96	; 0x60
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fbb3 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80058a4:	e01c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 fb4a 	bl	8005f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2140      	movs	r1, #64	; 0x40
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fba3 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80058c4:	e00c      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f000 fb9a 	bl	800600a <TIM_ITRx_SetConfig>
      break;
 80058d6:	e003      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	73fb      	strb	r3, [r7, #15]
      break;
 80058dc:	e000      	b.n	80058e0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	fffeff88 	.word	0xfffeff88

08005900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005928:	b480      	push	{r7}
 800592a:	b083      	sub	sp, #12
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
 8005958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a40      	ldr	r2, [pc, #256]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d013      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800596e:	d00f      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a3d      	ldr	r2, [pc, #244]	; (8005a68 <TIM_Base_SetConfig+0x118>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00b      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3c      	ldr	r2, [pc, #240]	; (8005a6c <TIM_Base_SetConfig+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d007      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3b      	ldr	r2, [pc, #236]	; (8005a70 <TIM_Base_SetConfig+0x120>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d003      	beq.n	8005990 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3a      	ldr	r2, [pc, #232]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d108      	bne.n	80059a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2f      	ldr	r2, [pc, #188]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d02b      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b0:	d027      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a2c      	ldr	r2, [pc, #176]	; (8005a68 <TIM_Base_SetConfig+0x118>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d023      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2b      	ldr	r2, [pc, #172]	; (8005a6c <TIM_Base_SetConfig+0x11c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d01f      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2a      	ldr	r2, [pc, #168]	; (8005a70 <TIM_Base_SetConfig+0x120>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01b      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a29      	ldr	r2, [pc, #164]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d017      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a28      	ldr	r2, [pc, #160]	; (8005a78 <TIM_Base_SetConfig+0x128>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d013      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a27      	ldr	r2, [pc, #156]	; (8005a7c <TIM_Base_SetConfig+0x12c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d00f      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a26      	ldr	r2, [pc, #152]	; (8005a80 <TIM_Base_SetConfig+0x130>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00b      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a25      	ldr	r2, [pc, #148]	; (8005a84 <TIM_Base_SetConfig+0x134>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d007      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a24      	ldr	r2, [pc, #144]	; (8005a88 <TIM_Base_SetConfig+0x138>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d003      	beq.n	8005a02 <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <TIM_Base_SetConfig+0x13c>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d108      	bne.n	8005a14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	689a      	ldr	r2, [r3, #8]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a0a      	ldr	r2, [pc, #40]	; (8005a64 <TIM_Base_SetConfig+0x114>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d003      	beq.n	8005a48 <TIM_Base_SetConfig+0xf8>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a0c      	ldr	r2, [pc, #48]	; (8005a74 <TIM_Base_SetConfig+0x124>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d103      	bne.n	8005a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	691a      	ldr	r2, [r3, #16]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	615a      	str	r2, [r3, #20]
}
 8005a56:	bf00      	nop
 8005a58:	3714      	adds	r7, #20
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40010000 	.word	0x40010000
 8005a68:	40000400 	.word	0x40000400
 8005a6c:	40000800 	.word	0x40000800
 8005a70:	40000c00 	.word	0x40000c00
 8005a74:	40010400 	.word	0x40010400
 8005a78:	40014000 	.word	0x40014000
 8005a7c:	40014400 	.word	0x40014400
 8005a80:	40014800 	.word	0x40014800
 8005a84:	40001800 	.word	0x40001800
 8005a88:	40001c00 	.word	0x40001c00
 8005a8c:	40002000 	.word	0x40002000

08005a90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f023 0201 	bic.w	r2, r3, #1
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4b2b      	ldr	r3, [pc, #172]	; (8005b68 <TIM_OC1_SetConfig+0xd8>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f023 0303 	bic.w	r3, r3, #3
 8005ac6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68fa      	ldr	r2, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	f023 0302 	bic.w	r3, r3, #2
 8005ad8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a21      	ldr	r2, [pc, #132]	; (8005b6c <TIM_OC1_SetConfig+0xdc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d003      	beq.n	8005af4 <TIM_OC1_SetConfig+0x64>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4a20      	ldr	r2, [pc, #128]	; (8005b70 <TIM_OC1_SetConfig+0xe0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d10c      	bne.n	8005b0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0308 	bic.w	r3, r3, #8
 8005afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f023 0304 	bic.w	r3, r3, #4
 8005b0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a16      	ldr	r2, [pc, #88]	; (8005b6c <TIM_OC1_SetConfig+0xdc>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d003      	beq.n	8005b1e <TIM_OC1_SetConfig+0x8e>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4a15      	ldr	r2, [pc, #84]	; (8005b70 <TIM_OC1_SetConfig+0xe0>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d111      	bne.n	8005b42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	693a      	ldr	r2, [r7, #16]
 8005b46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	621a      	str	r2, [r3, #32]
}
 8005b5c:	bf00      	nop
 8005b5e:	371c      	adds	r7, #28
 8005b60:	46bd      	mov	sp, r7
 8005b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b66:	4770      	bx	lr
 8005b68:	fffeff8f 	.word	0xfffeff8f
 8005b6c:	40010000 	.word	0x40010000
 8005b70:	40010400 	.word	0x40010400

08005b74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	f023 0210 	bic.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	699b      	ldr	r3, [r3, #24]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	4b2e      	ldr	r3, [pc, #184]	; (8005c58 <TIM_OC2_SetConfig+0xe4>)
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	021b      	lsls	r3, r3, #8
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f023 0320 	bic.w	r3, r3, #32
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	011b      	lsls	r3, r3, #4
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a23      	ldr	r2, [pc, #140]	; (8005c5c <TIM_OC2_SetConfig+0xe8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d003      	beq.n	8005bdc <TIM_OC2_SetConfig+0x68>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	4a22      	ldr	r2, [pc, #136]	; (8005c60 <TIM_OC2_SetConfig+0xec>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d10d      	bne.n	8005bf8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	4313      	orrs	r3, r2
 8005bee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a18      	ldr	r2, [pc, #96]	; (8005c5c <TIM_OC2_SetConfig+0xe8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC2_SetConfig+0x94>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <TIM_OC2_SetConfig+0xec>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d113      	bne.n	8005c30 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c0e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c16:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	693a      	ldr	r2, [r7, #16]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	621a      	str	r2, [r3, #32]
}
 8005c4a:	bf00      	nop
 8005c4c:	371c      	adds	r7, #28
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	feff8fff 	.word	0xfeff8fff
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	4b2d      	ldr	r3, [pc, #180]	; (8005d44 <TIM_OC3_SetConfig+0xe0>)
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68fa      	ldr	r2, [r7, #12]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	021b      	lsls	r3, r3, #8
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	; (8005d48 <TIM_OC3_SetConfig+0xe4>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC3_SetConfig+0x66>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a21      	ldr	r2, [pc, #132]	; (8005d4c <TIM_OC3_SetConfig+0xe8>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d10d      	bne.n	8005ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a17      	ldr	r2, [pc, #92]	; (8005d48 <TIM_OC3_SetConfig+0xe4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d003      	beq.n	8005cf6 <TIM_OC3_SetConfig+0x92>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a16      	ldr	r2, [pc, #88]	; (8005d4c <TIM_OC3_SetConfig+0xe8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d113      	bne.n	8005d1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	011b      	lsls	r3, r3, #4
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	621a      	str	r2, [r3, #32]
}
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	fffeff8f 	.word	0xfffeff8f
 8005d48:	40010000 	.word	0x40010000
 8005d4c:	40010400 	.word	0x40010400

08005d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b087      	sub	sp, #28
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	4b1e      	ldr	r3, [pc, #120]	; (8005df4 <TIM_OC4_SetConfig+0xa4>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	021b      	lsls	r3, r3, #8
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	031b      	lsls	r3, r3, #12
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <TIM_OC4_SetConfig+0xa8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_OC4_SetConfig+0x68>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <TIM_OC4_SetConfig+0xac>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d109      	bne.n	8005dcc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	019b      	lsls	r3, r3, #6
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	68fa      	ldr	r2, [r7, #12]
 8005dd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	693a      	ldr	r2, [r7, #16]
 8005de4:	621a      	str	r2, [r3, #32]
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	feff8fff 	.word	0xfeff8fff
 8005df8:	40010000 	.word	0x40010000
 8005dfc:	40010400 	.word	0x40010400

08005e00 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4b1b      	ldr	r3, [pc, #108]	; (8005e98 <TIM_OC5_SetConfig+0x98>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	041b      	lsls	r3, r3, #16
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <TIM_OC5_SetConfig+0x9c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d003      	beq.n	8005e5e <TIM_OC5_SetConfig+0x5e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a11      	ldr	r2, [pc, #68]	; (8005ea0 <TIM_OC5_SetConfig+0xa0>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d109      	bne.n	8005e72 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68fa      	ldr	r2, [r7, #12]
 8005e7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	685a      	ldr	r2, [r3, #4]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	621a      	str	r2, [r3, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	371c      	adds	r7, #28
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	fffeff8f 	.word	0xfffeff8f
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40010400 	.word	0x40010400

08005ea4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4b1c      	ldr	r3, [pc, #112]	; (8005f40 <TIM_OC6_SetConfig+0x9c>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	021b      	lsls	r3, r3, #8
 8005eda:	68fa      	ldr	r2, [r7, #12]
 8005edc:	4313      	orrs	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ee6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	051b      	lsls	r3, r3, #20
 8005eee:	693a      	ldr	r2, [r7, #16]
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a13      	ldr	r2, [pc, #76]	; (8005f44 <TIM_OC6_SetConfig+0xa0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d003      	beq.n	8005f04 <TIM_OC6_SetConfig+0x60>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a12      	ldr	r2, [pc, #72]	; (8005f48 <TIM_OC6_SetConfig+0xa4>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d109      	bne.n	8005f18 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	029b      	lsls	r3, r3, #10
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	feff8fff 	.word	0xfeff8fff
 8005f44:	40010000 	.word	0x40010000
 8005f48:	40010400 	.word	0x40010400

08005f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f023 030a 	bic.w	r3, r3, #10
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	697a      	ldr	r2, [r7, #20]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	60f8      	str	r0, [r7, #12]
 8005fb2:	60b9      	str	r1, [r7, #8]
 8005fb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	f023 0210 	bic.w	r2, r3, #16
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	031b      	lsls	r3, r3, #12
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	621a      	str	r2, [r3, #32]
}
 8005ffe:	bf00      	nop
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800600a:	b480      	push	{r7}
 800600c:	b085      	sub	sp, #20
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
 8006012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006020:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006022:	683a      	ldr	r2, [r7, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4313      	orrs	r3, r2
 8006028:	f043 0307 	orr.w	r3, r3, #7
 800602c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	609a      	str	r2, [r3, #8]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
 800604c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800605a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	021a      	lsls	r2, r3, #8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	431a      	orrs	r2, r3
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	4313      	orrs	r3, r2
 8006068:	697a      	ldr	r2, [r7, #20]
 800606a:	4313      	orrs	r3, r2
 800606c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006080:	b480      	push	{r7}
 8006082:	b087      	sub	sp, #28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 031f 	and.w	r3, r3, #31
 8006092:	2201      	movs	r2, #1
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6a1a      	ldr	r2, [r3, #32]
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	43db      	mvns	r3, r3
 80060a2:	401a      	ands	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6a1a      	ldr	r2, [r3, #32]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	f003 031f 	and.w	r3, r3, #31
 80060b2:	6879      	ldr	r1, [r7, #4]
 80060b4:	fa01 f303 	lsl.w	r3, r1, r3
 80060b8:	431a      	orrs	r2, r3
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	621a      	str	r2, [r3, #32]
}
 80060be:	bf00      	nop
 80060c0:	371c      	adds	r7, #28
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
	...

080060cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e06d      	b.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2201      	movs	r2, #1
 80060e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2202      	movs	r2, #2
 80060f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a30      	ldr	r2, [pc, #192]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d004      	beq.n	8006118 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2f      	ldr	r2, [pc, #188]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d108      	bne.n	800612a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800611e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006130:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a20      	ldr	r2, [pc, #128]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d022      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006156:	d01d      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d018      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d013      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d00e      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d009      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d004      	beq.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a15      	ldr	r2, [pc, #84]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d10c      	bne.n	80061ae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800619a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	40010000 	.word	0x40010000
 80061d0:	40010400 	.word	0x40010400
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40001800 	.word	0x40001800

080061e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006204:	bf00      	nop
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d101      	bne.n	8006236 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e040      	b.n	80062b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb f814 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2224      	movs	r2, #36	; 0x24
 8006250:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0201 	bic.w	r2, r2, #1
 8006260:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f82c 	bl	80062c0 <UART_SetConfig>
 8006268:	4603      	mov	r3, r0
 800626a:	2b01      	cmp	r3, #1
 800626c:	d101      	bne.n	8006272 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e022      	b.n	80062b8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa84 	bl	8006788 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800628e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	689a      	ldr	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800629e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fb0b 	bl	80068cc <UART_CheckIdleState>
 80062b6:	4603      	mov	r3, r0
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b088      	sub	sp, #32
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689a      	ldr	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	431a      	orrs	r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	431a      	orrs	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681a      	ldr	r2, [r3, #0]
 80062ea:	4ba6      	ldr	r3, [pc, #664]	; (8006584 <UART_SetConfig+0x2c4>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	430b      	orrs	r3, r1
 80062f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68da      	ldr	r2, [r3, #12]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	430a      	orrs	r2, r1
 800630c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	697a      	ldr	r2, [r7, #20]
 800631a:	4313      	orrs	r3, r2
 800631c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	430a      	orrs	r2, r1
 8006330:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a94      	ldr	r2, [pc, #592]	; (8006588 <UART_SetConfig+0x2c8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d120      	bne.n	800637e <UART_SetConfig+0xbe>
 800633c:	4b93      	ldr	r3, [pc, #588]	; (800658c <UART_SetConfig+0x2cc>)
 800633e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b03      	cmp	r3, #3
 8006348:	d816      	bhi.n	8006378 <UART_SetConfig+0xb8>
 800634a:	a201      	add	r2, pc, #4	; (adr r2, 8006350 <UART_SetConfig+0x90>)
 800634c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006350:	08006361 	.word	0x08006361
 8006354:	0800636d 	.word	0x0800636d
 8006358:	08006367 	.word	0x08006367
 800635c:	08006373 	.word	0x08006373
 8006360:	2301      	movs	r3, #1
 8006362:	77fb      	strb	r3, [r7, #31]
 8006364:	e150      	b.n	8006608 <UART_SetConfig+0x348>
 8006366:	2302      	movs	r3, #2
 8006368:	77fb      	strb	r3, [r7, #31]
 800636a:	e14d      	b.n	8006608 <UART_SetConfig+0x348>
 800636c:	2304      	movs	r3, #4
 800636e:	77fb      	strb	r3, [r7, #31]
 8006370:	e14a      	b.n	8006608 <UART_SetConfig+0x348>
 8006372:	2308      	movs	r3, #8
 8006374:	77fb      	strb	r3, [r7, #31]
 8006376:	e147      	b.n	8006608 <UART_SetConfig+0x348>
 8006378:	2310      	movs	r3, #16
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e144      	b.n	8006608 <UART_SetConfig+0x348>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a83      	ldr	r2, [pc, #524]	; (8006590 <UART_SetConfig+0x2d0>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d132      	bne.n	80063ee <UART_SetConfig+0x12e>
 8006388:	4b80      	ldr	r3, [pc, #512]	; (800658c <UART_SetConfig+0x2cc>)
 800638a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638e:	f003 030c 	and.w	r3, r3, #12
 8006392:	2b0c      	cmp	r3, #12
 8006394:	d828      	bhi.n	80063e8 <UART_SetConfig+0x128>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <UART_SetConfig+0xdc>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063d1 	.word	0x080063d1
 80063a0:	080063e9 	.word	0x080063e9
 80063a4:	080063e9 	.word	0x080063e9
 80063a8:	080063e9 	.word	0x080063e9
 80063ac:	080063dd 	.word	0x080063dd
 80063b0:	080063e9 	.word	0x080063e9
 80063b4:	080063e9 	.word	0x080063e9
 80063b8:	080063e9 	.word	0x080063e9
 80063bc:	080063d7 	.word	0x080063d7
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063e9 	.word	0x080063e9
 80063c8:	080063e9 	.word	0x080063e9
 80063cc:	080063e3 	.word	0x080063e3
 80063d0:	2300      	movs	r3, #0
 80063d2:	77fb      	strb	r3, [r7, #31]
 80063d4:	e118      	b.n	8006608 <UART_SetConfig+0x348>
 80063d6:	2302      	movs	r3, #2
 80063d8:	77fb      	strb	r3, [r7, #31]
 80063da:	e115      	b.n	8006608 <UART_SetConfig+0x348>
 80063dc:	2304      	movs	r3, #4
 80063de:	77fb      	strb	r3, [r7, #31]
 80063e0:	e112      	b.n	8006608 <UART_SetConfig+0x348>
 80063e2:	2308      	movs	r3, #8
 80063e4:	77fb      	strb	r3, [r7, #31]
 80063e6:	e10f      	b.n	8006608 <UART_SetConfig+0x348>
 80063e8:	2310      	movs	r3, #16
 80063ea:	77fb      	strb	r3, [r7, #31]
 80063ec:	e10c      	b.n	8006608 <UART_SetConfig+0x348>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a68      	ldr	r2, [pc, #416]	; (8006594 <UART_SetConfig+0x2d4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d120      	bne.n	800643a <UART_SetConfig+0x17a>
 80063f8:	4b64      	ldr	r3, [pc, #400]	; (800658c <UART_SetConfig+0x2cc>)
 80063fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006402:	2b30      	cmp	r3, #48	; 0x30
 8006404:	d013      	beq.n	800642e <UART_SetConfig+0x16e>
 8006406:	2b30      	cmp	r3, #48	; 0x30
 8006408:	d814      	bhi.n	8006434 <UART_SetConfig+0x174>
 800640a:	2b20      	cmp	r3, #32
 800640c:	d009      	beq.n	8006422 <UART_SetConfig+0x162>
 800640e:	2b20      	cmp	r3, #32
 8006410:	d810      	bhi.n	8006434 <UART_SetConfig+0x174>
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <UART_SetConfig+0x15c>
 8006416:	2b10      	cmp	r3, #16
 8006418:	d006      	beq.n	8006428 <UART_SetConfig+0x168>
 800641a:	e00b      	b.n	8006434 <UART_SetConfig+0x174>
 800641c:	2300      	movs	r3, #0
 800641e:	77fb      	strb	r3, [r7, #31]
 8006420:	e0f2      	b.n	8006608 <UART_SetConfig+0x348>
 8006422:	2302      	movs	r3, #2
 8006424:	77fb      	strb	r3, [r7, #31]
 8006426:	e0ef      	b.n	8006608 <UART_SetConfig+0x348>
 8006428:	2304      	movs	r3, #4
 800642a:	77fb      	strb	r3, [r7, #31]
 800642c:	e0ec      	b.n	8006608 <UART_SetConfig+0x348>
 800642e:	2308      	movs	r3, #8
 8006430:	77fb      	strb	r3, [r7, #31]
 8006432:	e0e9      	b.n	8006608 <UART_SetConfig+0x348>
 8006434:	2310      	movs	r3, #16
 8006436:	77fb      	strb	r3, [r7, #31]
 8006438:	e0e6      	b.n	8006608 <UART_SetConfig+0x348>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a56      	ldr	r2, [pc, #344]	; (8006598 <UART_SetConfig+0x2d8>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d120      	bne.n	8006486 <UART_SetConfig+0x1c6>
 8006444:	4b51      	ldr	r3, [pc, #324]	; (800658c <UART_SetConfig+0x2cc>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800644e:	2bc0      	cmp	r3, #192	; 0xc0
 8006450:	d013      	beq.n	800647a <UART_SetConfig+0x1ba>
 8006452:	2bc0      	cmp	r3, #192	; 0xc0
 8006454:	d814      	bhi.n	8006480 <UART_SetConfig+0x1c0>
 8006456:	2b80      	cmp	r3, #128	; 0x80
 8006458:	d009      	beq.n	800646e <UART_SetConfig+0x1ae>
 800645a:	2b80      	cmp	r3, #128	; 0x80
 800645c:	d810      	bhi.n	8006480 <UART_SetConfig+0x1c0>
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <UART_SetConfig+0x1a8>
 8006462:	2b40      	cmp	r3, #64	; 0x40
 8006464:	d006      	beq.n	8006474 <UART_SetConfig+0x1b4>
 8006466:	e00b      	b.n	8006480 <UART_SetConfig+0x1c0>
 8006468:	2300      	movs	r3, #0
 800646a:	77fb      	strb	r3, [r7, #31]
 800646c:	e0cc      	b.n	8006608 <UART_SetConfig+0x348>
 800646e:	2302      	movs	r3, #2
 8006470:	77fb      	strb	r3, [r7, #31]
 8006472:	e0c9      	b.n	8006608 <UART_SetConfig+0x348>
 8006474:	2304      	movs	r3, #4
 8006476:	77fb      	strb	r3, [r7, #31]
 8006478:	e0c6      	b.n	8006608 <UART_SetConfig+0x348>
 800647a:	2308      	movs	r3, #8
 800647c:	77fb      	strb	r3, [r7, #31]
 800647e:	e0c3      	b.n	8006608 <UART_SetConfig+0x348>
 8006480:	2310      	movs	r3, #16
 8006482:	77fb      	strb	r3, [r7, #31]
 8006484:	e0c0      	b.n	8006608 <UART_SetConfig+0x348>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a44      	ldr	r2, [pc, #272]	; (800659c <UART_SetConfig+0x2dc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d125      	bne.n	80064dc <UART_SetConfig+0x21c>
 8006490:	4b3e      	ldr	r3, [pc, #248]	; (800658c <UART_SetConfig+0x2cc>)
 8006492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649e:	d017      	beq.n	80064d0 <UART_SetConfig+0x210>
 80064a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a4:	d817      	bhi.n	80064d6 <UART_SetConfig+0x216>
 80064a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064aa:	d00b      	beq.n	80064c4 <UART_SetConfig+0x204>
 80064ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064b0:	d811      	bhi.n	80064d6 <UART_SetConfig+0x216>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <UART_SetConfig+0x1fe>
 80064b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064ba:	d006      	beq.n	80064ca <UART_SetConfig+0x20a>
 80064bc:	e00b      	b.n	80064d6 <UART_SetConfig+0x216>
 80064be:	2300      	movs	r3, #0
 80064c0:	77fb      	strb	r3, [r7, #31]
 80064c2:	e0a1      	b.n	8006608 <UART_SetConfig+0x348>
 80064c4:	2302      	movs	r3, #2
 80064c6:	77fb      	strb	r3, [r7, #31]
 80064c8:	e09e      	b.n	8006608 <UART_SetConfig+0x348>
 80064ca:	2304      	movs	r3, #4
 80064cc:	77fb      	strb	r3, [r7, #31]
 80064ce:	e09b      	b.n	8006608 <UART_SetConfig+0x348>
 80064d0:	2308      	movs	r3, #8
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e098      	b.n	8006608 <UART_SetConfig+0x348>
 80064d6:	2310      	movs	r3, #16
 80064d8:	77fb      	strb	r3, [r7, #31]
 80064da:	e095      	b.n	8006608 <UART_SetConfig+0x348>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a2f      	ldr	r2, [pc, #188]	; (80065a0 <UART_SetConfig+0x2e0>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d125      	bne.n	8006532 <UART_SetConfig+0x272>
 80064e6:	4b29      	ldr	r3, [pc, #164]	; (800658c <UART_SetConfig+0x2cc>)
 80064e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064f4:	d017      	beq.n	8006526 <UART_SetConfig+0x266>
 80064f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064fa:	d817      	bhi.n	800652c <UART_SetConfig+0x26c>
 80064fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006500:	d00b      	beq.n	800651a <UART_SetConfig+0x25a>
 8006502:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006506:	d811      	bhi.n	800652c <UART_SetConfig+0x26c>
 8006508:	2b00      	cmp	r3, #0
 800650a:	d003      	beq.n	8006514 <UART_SetConfig+0x254>
 800650c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006510:	d006      	beq.n	8006520 <UART_SetConfig+0x260>
 8006512:	e00b      	b.n	800652c <UART_SetConfig+0x26c>
 8006514:	2301      	movs	r3, #1
 8006516:	77fb      	strb	r3, [r7, #31]
 8006518:	e076      	b.n	8006608 <UART_SetConfig+0x348>
 800651a:	2302      	movs	r3, #2
 800651c:	77fb      	strb	r3, [r7, #31]
 800651e:	e073      	b.n	8006608 <UART_SetConfig+0x348>
 8006520:	2304      	movs	r3, #4
 8006522:	77fb      	strb	r3, [r7, #31]
 8006524:	e070      	b.n	8006608 <UART_SetConfig+0x348>
 8006526:	2308      	movs	r3, #8
 8006528:	77fb      	strb	r3, [r7, #31]
 800652a:	e06d      	b.n	8006608 <UART_SetConfig+0x348>
 800652c:	2310      	movs	r3, #16
 800652e:	77fb      	strb	r3, [r7, #31]
 8006530:	e06a      	b.n	8006608 <UART_SetConfig+0x348>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a1b      	ldr	r2, [pc, #108]	; (80065a4 <UART_SetConfig+0x2e4>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d138      	bne.n	80065ae <UART_SetConfig+0x2ee>
 800653c:	4b13      	ldr	r3, [pc, #76]	; (800658c <UART_SetConfig+0x2cc>)
 800653e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006542:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006546:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800654a:	d017      	beq.n	800657c <UART_SetConfig+0x2bc>
 800654c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006550:	d82a      	bhi.n	80065a8 <UART_SetConfig+0x2e8>
 8006552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006556:	d00b      	beq.n	8006570 <UART_SetConfig+0x2b0>
 8006558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800655c:	d824      	bhi.n	80065a8 <UART_SetConfig+0x2e8>
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <UART_SetConfig+0x2aa>
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006566:	d006      	beq.n	8006576 <UART_SetConfig+0x2b6>
 8006568:	e01e      	b.n	80065a8 <UART_SetConfig+0x2e8>
 800656a:	2300      	movs	r3, #0
 800656c:	77fb      	strb	r3, [r7, #31]
 800656e:	e04b      	b.n	8006608 <UART_SetConfig+0x348>
 8006570:	2302      	movs	r3, #2
 8006572:	77fb      	strb	r3, [r7, #31]
 8006574:	e048      	b.n	8006608 <UART_SetConfig+0x348>
 8006576:	2304      	movs	r3, #4
 8006578:	77fb      	strb	r3, [r7, #31]
 800657a:	e045      	b.n	8006608 <UART_SetConfig+0x348>
 800657c:	2308      	movs	r3, #8
 800657e:	77fb      	strb	r3, [r7, #31]
 8006580:	e042      	b.n	8006608 <UART_SetConfig+0x348>
 8006582:	bf00      	nop
 8006584:	efff69f3 	.word	0xefff69f3
 8006588:	40011000 	.word	0x40011000
 800658c:	40023800 	.word	0x40023800
 8006590:	40004400 	.word	0x40004400
 8006594:	40004800 	.word	0x40004800
 8006598:	40004c00 	.word	0x40004c00
 800659c:	40005000 	.word	0x40005000
 80065a0:	40011400 	.word	0x40011400
 80065a4:	40007800 	.word	0x40007800
 80065a8:	2310      	movs	r3, #16
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e02c      	b.n	8006608 <UART_SetConfig+0x348>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a72      	ldr	r2, [pc, #456]	; (800677c <UART_SetConfig+0x4bc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d125      	bne.n	8006604 <UART_SetConfig+0x344>
 80065b8:	4b71      	ldr	r3, [pc, #452]	; (8006780 <UART_SetConfig+0x4c0>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80065c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065c6:	d017      	beq.n	80065f8 <UART_SetConfig+0x338>
 80065c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80065cc:	d817      	bhi.n	80065fe <UART_SetConfig+0x33e>
 80065ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d2:	d00b      	beq.n	80065ec <UART_SetConfig+0x32c>
 80065d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d8:	d811      	bhi.n	80065fe <UART_SetConfig+0x33e>
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <UART_SetConfig+0x326>
 80065de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e2:	d006      	beq.n	80065f2 <UART_SetConfig+0x332>
 80065e4:	e00b      	b.n	80065fe <UART_SetConfig+0x33e>
 80065e6:	2300      	movs	r3, #0
 80065e8:	77fb      	strb	r3, [r7, #31]
 80065ea:	e00d      	b.n	8006608 <UART_SetConfig+0x348>
 80065ec:	2302      	movs	r3, #2
 80065ee:	77fb      	strb	r3, [r7, #31]
 80065f0:	e00a      	b.n	8006608 <UART_SetConfig+0x348>
 80065f2:	2304      	movs	r3, #4
 80065f4:	77fb      	strb	r3, [r7, #31]
 80065f6:	e007      	b.n	8006608 <UART_SetConfig+0x348>
 80065f8:	2308      	movs	r3, #8
 80065fa:	77fb      	strb	r3, [r7, #31]
 80065fc:	e004      	b.n	8006608 <UART_SetConfig+0x348>
 80065fe:	2310      	movs	r3, #16
 8006600:	77fb      	strb	r3, [r7, #31]
 8006602:	e001      	b.n	8006608 <UART_SetConfig+0x348>
 8006604:	2310      	movs	r3, #16
 8006606:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	69db      	ldr	r3, [r3, #28]
 800660c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006610:	d15b      	bne.n	80066ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006612:	7ffb      	ldrb	r3, [r7, #31]
 8006614:	2b08      	cmp	r3, #8
 8006616:	d828      	bhi.n	800666a <UART_SetConfig+0x3aa>
 8006618:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x360>)
 800661a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661e:	bf00      	nop
 8006620:	08006645 	.word	0x08006645
 8006624:	0800664d 	.word	0x0800664d
 8006628:	08006655 	.word	0x08006655
 800662c:	0800666b 	.word	0x0800666b
 8006630:	0800665b 	.word	0x0800665b
 8006634:	0800666b 	.word	0x0800666b
 8006638:	0800666b 	.word	0x0800666b
 800663c:	0800666b 	.word	0x0800666b
 8006640:	08006663 	.word	0x08006663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006644:	f7fd ffe8 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8006648:	61b8      	str	r0, [r7, #24]
        break;
 800664a:	e013      	b.n	8006674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800664c:	f7fd fff8 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006650:	61b8      	str	r0, [r7, #24]
        break;
 8006652:	e00f      	b.n	8006674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006654:	4b4b      	ldr	r3, [pc, #300]	; (8006784 <UART_SetConfig+0x4c4>)
 8006656:	61bb      	str	r3, [r7, #24]
        break;
 8006658:	e00c      	b.n	8006674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800665a:	f7fd fecb 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 800665e:	61b8      	str	r0, [r7, #24]
        break;
 8006660:	e008      	b.n	8006674 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006666:	61bb      	str	r3, [r7, #24]
        break;
 8006668:	e004      	b.n	8006674 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800666a:	2300      	movs	r3, #0
 800666c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	77bb      	strb	r3, [r7, #30]
        break;
 8006672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d074      	beq.n	8006764 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800667a:	69bb      	ldr	r3, [r7, #24]
 800667c:	005a      	lsls	r2, r3, #1
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	085b      	lsrs	r3, r3, #1
 8006684:	441a      	add	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	fbb2 f3f3 	udiv	r3, r2, r3
 800668e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d916      	bls.n	80066c4 <UART_SetConfig+0x404>
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669c:	d212      	bcs.n	80066c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	f023 030f 	bic.w	r3, r3, #15
 80066a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	085b      	lsrs	r3, r3, #1
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f003 0307 	and.w	r3, r3, #7
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	89fb      	ldrh	r3, [r7, #14]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	89fa      	ldrh	r2, [r7, #14]
 80066c0:	60da      	str	r2, [r3, #12]
 80066c2:	e04f      	b.n	8006764 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	77bb      	strb	r3, [r7, #30]
 80066c8:	e04c      	b.n	8006764 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ca:	7ffb      	ldrb	r3, [r7, #31]
 80066cc:	2b08      	cmp	r3, #8
 80066ce:	d828      	bhi.n	8006722 <UART_SetConfig+0x462>
 80066d0:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x418>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006705 	.word	0x08006705
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	08006723 	.word	0x08006723
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006723 	.word	0x08006723
 80066f0:	08006723 	.word	0x08006723
 80066f4:	08006723 	.word	0x08006723
 80066f8:	0800671b 	.word	0x0800671b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fc:	f7fd ff8c 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8006700:	61b8      	str	r0, [r7, #24]
        break;
 8006702:	e013      	b.n	800672c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fd ff9c 	bl	8004640 <HAL_RCC_GetPCLK2Freq>
 8006708:	61b8      	str	r0, [r7, #24]
        break;
 800670a:	e00f      	b.n	800672c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <UART_SetConfig+0x4c4>)
 800670e:	61bb      	str	r3, [r7, #24]
        break;
 8006710:	e00c      	b.n	800672c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006712:	f7fd fe6f 	bl	80043f4 <HAL_RCC_GetSysClockFreq>
 8006716:	61b8      	str	r0, [r7, #24]
        break;
 8006718:	e008      	b.n	800672c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800671e:	61bb      	str	r3, [r7, #24]
        break;
 8006720:	e004      	b.n	800672c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	77bb      	strb	r3, [r7, #30]
        break;
 800672a:	bf00      	nop
    }

    if (pclk != 0U)
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d018      	beq.n	8006764 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	085a      	lsrs	r2, r3, #1
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	441a      	add	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	fbb2 f3f3 	udiv	r3, r2, r3
 8006744:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b0f      	cmp	r3, #15
 800674a:	d909      	bls.n	8006760 <UART_SetConfig+0x4a0>
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006752:	d205      	bcs.n	8006760 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	e001      	b.n	8006764 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006770:	7fbb      	ldrb	r3, [r7, #30]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3720      	adds	r7, #32
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40007c00 	.word	0x40007c00
 8006780:	40023800 	.word	0x40023800
 8006784:	00f42400 	.word	0x00f42400

08006788 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00a      	beq.n	80067b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	430a      	orrs	r2, r1
 80067f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	430a      	orrs	r2, r1
 8006816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681c:	f003 0310 	and.w	r3, r3, #16
 8006820:	2b00      	cmp	r3, #0
 8006822:	d00a      	beq.n	800683a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00a      	beq.n	800685c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	430a      	orrs	r2, r1
 800685a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01a      	beq.n	800689e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006886:	d10a      	bne.n	800689e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	430a      	orrs	r2, r1
 800689c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d00a      	beq.n	80068c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	605a      	str	r2, [r3, #4]
  }
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068dc:	f7fb f8d0 	bl	8001a80 <HAL_GetTick>
 80068e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0308 	and.w	r3, r3, #8
 80068ec:	2b08      	cmp	r3, #8
 80068ee:	d10e      	bne.n	800690e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 f81b 	bl	800693a <UART_WaitOnFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e011      	b.n	8006932 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2220      	movs	r2, #32
 8006912:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b09c      	sub	sp, #112	; 0x70
 800693e:	af00      	add	r7, sp, #0
 8006940:	60f8      	str	r0, [r7, #12]
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	603b      	str	r3, [r7, #0]
 8006946:	4613      	mov	r3, r2
 8006948:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800694a:	e0a7      	b.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006952:	f000 80a3 	beq.w	8006a9c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fb f893 	bl	8001a80 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <UART_WaitOnFlagUntilTimeout+0x32>
 8006966:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006968:	2b00      	cmp	r3, #0
 800696a:	d13f      	bne.n	80069ec <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800697a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006980:	667b      	str	r3, [r7, #100]	; 0x64
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	461a      	mov	r2, r3
 8006988:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800698a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800698c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006990:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e6      	bne.n	800696c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	663b      	str	r3, [r7, #96]	; 0x60
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3308      	adds	r3, #8
 80069bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069be:	64ba      	str	r2, [r7, #72]	; 0x48
 80069c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c6:	e841 2300 	strex	r3, r2, [r1]
 80069ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d1e5      	bne.n	800699e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2220      	movs	r2, #32
 80069d6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e068      	b.n	8006abe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d050      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a08:	d148      	bne.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a12:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1c:	e853 3f00 	ldrex	r3, [r3]
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	461a      	mov	r2, r3
 8006a30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a32:	637b      	str	r3, [r7, #52]	; 0x34
 8006a34:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a3a:	e841 2300 	strex	r3, r2, [r1]
 8006a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1e6      	bne.n	8006a14 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	613b      	str	r3, [r7, #16]
   return(result);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a66:	623a      	str	r2, [r7, #32]
 8006a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	69f9      	ldr	r1, [r7, #28]
 8006a6c:	6a3a      	ldr	r2, [r7, #32]
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e5      	bne.n	8006a46 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2220      	movs	r2, #32
 8006a7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e010      	b.n	8006abe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	f43f af48 	beq.w	800694c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3770      	adds	r7, #112	; 0x70
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac8:	b084      	sub	sp, #16
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	f107 001c 	add.w	r0, r7, #28
 8006ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d120      	bne.n	8006b22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	4b20      	ldr	r3, [pc, #128]	; (8006b74 <USB_CoreInit+0xac>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa96 	bl	8007048 <USB_CoreReset>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	e010      	b.n	8006b44 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa8a 	bl	8007048 <USB_CoreReset>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d10b      	bne.n	8006b62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f043 0206 	orr.w	r2, r3, #6
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f043 0220 	orr.w	r2, r3, #32
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b6e:	b004      	add	sp, #16
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	ffbdffbf 	.word	0xffbdffbf

08006b78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f023 0201 	bic.w	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d115      	bne.n	8006be8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bc8:	2001      	movs	r0, #1
 8006bca:	f7fa ff65 	bl	8001a98 <HAL_Delay>
      ms++;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	3301      	adds	r3, #1
 8006bd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fa29 	bl	800702c <USB_GetMode>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d01e      	beq.n	8006c1e <USB_SetCurrentMode+0x84>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2b31      	cmp	r3, #49	; 0x31
 8006be4:	d9f0      	bls.n	8006bc8 <USB_SetCurrentMode+0x2e>
 8006be6:	e01a      	b.n	8006c1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006be8:	78fb      	ldrb	r3, [r7, #3]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d115      	bne.n	8006c1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bfa:	2001      	movs	r0, #1
 8006bfc:	f7fa ff4c 	bl	8001a98 <HAL_Delay>
      ms++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3301      	adds	r3, #1
 8006c04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 fa10 	bl	800702c <USB_GetMode>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d005      	beq.n	8006c1e <USB_SetCurrentMode+0x84>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	2b31      	cmp	r3, #49	; 0x31
 8006c16:	d9f0      	bls.n	8006bfa <USB_SetCurrentMode+0x60>
 8006c18:	e001      	b.n	8006c1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e005      	b.n	8006c2a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b32      	cmp	r3, #50	; 0x32
 8006c22:	d101      	bne.n	8006c28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e000      	b.n	8006c2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3710      	adds	r7, #16
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
	...

08006c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c34:	b084      	sub	sp, #16
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b086      	sub	sp, #24
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
 8006c52:	e009      	b.n	8006c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3340      	adds	r3, #64	; 0x40
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	3301      	adds	r3, #1
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	2b0e      	cmp	r3, #14
 8006c6c:	d9f2      	bls.n	8006c54 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d11c      	bne.n	8006cae <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c82:	f043 0302 	orr.w	r3, r3, #2
 8006c86:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e005      	b.n	8006cba <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	680b      	ldr	r3, [r1, #0]
 8006cd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d10c      	bne.n	8006cfa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006ce6:	2100      	movs	r1, #0
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f965 	bl	8006fb8 <USB_SetDevSpeed>
 8006cee:	e008      	b.n	8006d02 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f960 	bl	8006fb8 <USB_SetDevSpeed>
 8006cf8:	e003      	b.n	8006d02 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cfa:	2103      	movs	r1, #3
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f95b 	bl	8006fb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d02:	2110      	movs	r1, #16
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f8f3 	bl	8006ef0 <USB_FlushTxFifo>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 f91f 	bl	8006f58 <USB_FlushRxFifo>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	461a      	mov	r2, r3
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d42:	461a      	mov	r2, r3
 8006d44:	2300      	movs	r3, #0
 8006d46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
 8006d4c:	e043      	b.n	8006dd6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d64:	d118      	bne.n	8006d98 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d78:	461a      	mov	r2, r3
 8006d7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d7e:	6013      	str	r3, [r2, #0]
 8006d80:	e013      	b.n	8006daa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	015a      	lsls	r2, r3, #5
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	4413      	add	r3, r2
 8006d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e008      	b.n	8006daa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da4:	461a      	mov	r2, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	015a      	lsls	r2, r3, #5
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	4413      	add	r3, r2
 8006db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db6:	461a      	mov	r2, r3
 8006db8:	2300      	movs	r3, #0
 8006dba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006dce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	613b      	str	r3, [r7, #16]
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d3b7      	bcc.n	8006d4e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	e043      	b.n	8006e6c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dfa:	d118      	bne.n	8006e2e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e14:	6013      	str	r3, [r2, #0]
 8006e16:	e013      	b.n	8006e40 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e24:	461a      	mov	r2, r3
 8006e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	e008      	b.n	8006e40 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	2300      	movs	r3, #0
 8006e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	613b      	str	r3, [r7, #16]
 8006e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d3b7      	bcc.n	8006de4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d105      	bne.n	8006ea8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f043 0210 	orr.w	r2, r3, #16
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699a      	ldr	r2, [r3, #24]
 8006eac:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <USB_DevInit+0x2b4>)
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d005      	beq.n	8006ec6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f043 0208 	orr.w	r2, r3, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d105      	bne.n	8006ed8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699a      	ldr	r2, [r3, #24]
 8006ed0:	4b06      	ldr	r3, [pc, #24]	; (8006eec <USB_DevInit+0x2b8>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ee4:	b004      	add	sp, #16
 8006ee6:	4770      	bx	lr
 8006ee8:	803c3800 	.word	0x803c3800
 8006eec:	40000004 	.word	0x40000004

08006ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3301      	adds	r3, #1
 8006f02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <USB_FlushTxFifo+0x64>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d901      	bls.n	8006f10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e01b      	b.n	8006f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	daf2      	bge.n	8006efe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	019b      	lsls	r3, r3, #6
 8006f20:	f043 0220 	orr.w	r2, r3, #32
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a08      	ldr	r2, [pc, #32]	; (8006f54 <USB_FlushTxFifo+0x64>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d901      	bls.n	8006f3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e006      	b.n	8006f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0320 	and.w	r3, r3, #32
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d0f0      	beq.n	8006f28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	00030d40 	.word	0x00030d40

08006f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a11      	ldr	r2, [pc, #68]	; (8006fb4 <USB_FlushRxFifo+0x5c>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e018      	b.n	8006fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	daf2      	bge.n	8006f64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2210      	movs	r2, #16
 8006f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4a08      	ldr	r2, [pc, #32]	; (8006fb4 <USB_FlushRxFifo+0x5c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d901      	bls.n	8006f9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e006      	b.n	8006fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d0f0      	beq.n	8006f88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	00030d40 	.word	0x00030d40

08006fb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007018:	f043 0302 	orr.w	r3, r3, #2
 800701c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	f003 0301 	and.w	r3, r3, #1
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	3301      	adds	r3, #1
 8007058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	4a13      	ldr	r2, [pc, #76]	; (80070ac <USB_CoreReset+0x64>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d901      	bls.n	8007066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007062:	2303      	movs	r3, #3
 8007064:	e01b      	b.n	800709e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	daf2      	bge.n	8007054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	f043 0201 	orr.w	r2, r3, #1
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a09      	ldr	r2, [pc, #36]	; (80070ac <USB_CoreReset+0x64>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d901      	bls.n	8007090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e006      	b.n	800709e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f003 0301 	and.w	r3, r3, #1
 8007098:	2b01      	cmp	r3, #1
 800709a:	d0f0      	beq.n	800707e <USB_CoreReset+0x36>

  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
 80070aa:	bf00      	nop
 80070ac:	00030d40 	.word	0x00030d40

080070b0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80070b0:	b5b0      	push	{r4, r5, r7, lr}
 80070b2:	b08c      	sub	sp, #48	; 0x30
 80070b4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80070b6:	2100      	movs	r1, #0
 80070b8:	2000      	movs	r0, #0
 80070ba:	f003 fdc7 	bl	800ac4c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80070be:	4b20      	ldr	r3, [pc, #128]	; (8007140 <MX_LWIP_Init+0x90>)
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80070c4:	4b1f      	ldr	r3, [pc, #124]	; (8007144 <MX_LWIP_Init+0x94>)
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80070ca:	4b1f      	ldr	r3, [pc, #124]	; (8007148 <MX_LWIP_Init+0x98>)
 80070cc:	2200      	movs	r2, #0
 80070ce:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <MX_LWIP_Init+0x9c>)
 80070d2:	9302      	str	r3, [sp, #8]
 80070d4:	4b1e      	ldr	r3, [pc, #120]	; (8007150 <MX_LWIP_Init+0xa0>)
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	4b1a      	ldr	r3, [pc, #104]	; (8007148 <MX_LWIP_Init+0x98>)
 80070de:	4a19      	ldr	r2, [pc, #100]	; (8007144 <MX_LWIP_Init+0x94>)
 80070e0:	4917      	ldr	r1, [pc, #92]	; (8007140 <MX_LWIP_Init+0x90>)
 80070e2:	481c      	ldr	r0, [pc, #112]	; (8007154 <MX_LWIP_Init+0xa4>)
 80070e4:	f005 feaa 	bl	800ce3c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80070e8:	481a      	ldr	r0, [pc, #104]	; (8007154 <MX_LWIP_Init+0xa4>)
 80070ea:	f006 f861 	bl	800d1b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80070ee:	4b19      	ldr	r3, [pc, #100]	; (8007154 <MX_LWIP_Init+0xa4>)
 80070f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80070f4:	089b      	lsrs	r3, r3, #2
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d003      	beq.n	8007108 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007100:	4814      	ldr	r0, [pc, #80]	; (8007154 <MX_LWIP_Init+0xa4>)
 8007102:	f006 f865 	bl	800d1d0 <netif_set_up>
 8007106:	e002      	b.n	800710e <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007108:	4812      	ldr	r0, [pc, #72]	; (8007154 <MX_LWIP_Init+0xa4>)
 800710a:	f006 f8cd 	bl	800d2a8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800710e:	4912      	ldr	r1, [pc, #72]	; (8007158 <MX_LWIP_Init+0xa8>)
 8007110:	4810      	ldr	r0, [pc, #64]	; (8007154 <MX_LWIP_Init+0xa4>)
 8007112:	f006 f963 	bl	800d3dc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8007116:	4b11      	ldr	r3, [pc, #68]	; (800715c <MX_LWIP_Init+0xac>)
 8007118:	1d3c      	adds	r4, r7, #4
 800711a:	461d      	mov	r5, r3
 800711c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800711e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007120:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8007128:	1d3b      	adds	r3, r7, #4
 800712a:	490a      	ldr	r1, [pc, #40]	; (8007154 <MX_LWIP_Init+0xa4>)
 800712c:	4618      	mov	r0, r3
 800712e:	f000 fd43 	bl	8007bb8 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007132:	4808      	ldr	r0, [pc, #32]	; (8007154 <MX_LWIP_Init+0xa4>)
 8007134:	f00e f9b8 	bl	80154a8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007138:	bf00      	nop
 800713a:	3720      	adds	r7, #32
 800713c:	46bd      	mov	sp, r7
 800713e:	bdb0      	pop	{r4, r5, r7, pc}
 8007140:	20000b5c 	.word	0x20000b5c
 8007144:	20000b60 	.word	0x20000b60
 8007148:	20000b64 	.word	0x20000b64
 800714c:	0800ab89 	.word	0x0800ab89
 8007150:	08007659 	.word	0x08007659
 8007154:	20000b24 	.word	0x20000b24
 8007158:	08007161 	.word	0x08007161
 800715c:	0801a514 	.word	0x0801a514

08007160 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8007186:	2320      	movs	r3, #32
 8007188:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800718a:	f3bf 8f4f 	dsb	sy
}
 800718e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8007190:	e00b      	b.n	80071aa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8007192:	4a0d      	ldr	r2, [pc, #52]	; (80071c8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4413      	add	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	dcf0      	bgt.n	8007192 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80071b0:	f3bf 8f4f 	dsb	sy
}
 80071b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80071b6:	f3bf 8f6f 	isb	sy
}
 80071ba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80071bc:	bf00      	nop
 80071be:	371c      	adds	r7, #28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	e000ed00 	.word	0xe000ed00

080071cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80071d4:	4b04      	ldr	r3, [pc, #16]	; (80071e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 fe37 	bl	8007e4c <osSemaphoreRelease>
}
 80071de:	bf00      	nop
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}
 80071e6:	bf00      	nop
 80071e8:	200054f4 	.word	0x200054f4

080071ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80071f4:	4b04      	ldr	r3, [pc, #16]	; (8007208 <HAL_ETH_TxCpltCallback+0x1c>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 fe27 	bl	8007e4c <osSemaphoreRelease>
}
 80071fe:	bf00      	nop
 8007200:	3708      	adds	r7, #8
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}
 8007206:	bf00      	nop
 8007208:	200054f8 	.word	0x200054f8

0800720c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7fb fe17 	bl	8002e48 <HAL_ETH_GetDMAError>
 800721a:	4603      	mov	r3, r0
 800721c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007220:	2b80      	cmp	r3, #128	; 0x80
 8007222:	d104      	bne.n	800722e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8007224:	4b04      	ldr	r3, [pc, #16]	; (8007238 <HAL_ETH_ErrorCallback+0x2c>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fe0f 	bl	8007e4c <osSemaphoreRelease>
  }
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	200054f4 	.word	0x200054f4

0800723c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800723c:	b5b0      	push	{r4, r5, r7, lr}
 800723e:	b0a8      	sub	sp, #160	; 0xa0
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8007244:	2300      	movs	r3, #0
 8007246:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8007256:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800725a:	2264      	movs	r2, #100	; 0x64
 800725c:	2100      	movs	r1, #0
 800725e:	4618      	mov	r0, r3
 8007260:	f012 fa19 	bl	8019696 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007264:	4b85      	ldr	r3, [pc, #532]	; (800747c <low_level_init+0x240>)
 8007266:	4a86      	ldr	r2, [pc, #536]	; (8007480 <low_level_init+0x244>)
 8007268:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800726a:	2300      	movs	r3, #0
 800726c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8007270:	2380      	movs	r3, #128	; 0x80
 8007272:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8007276:	23e1      	movs	r3, #225	; 0xe1
 8007278:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 800727c:	2300      	movs	r3, #0
 800727e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8007282:	2300      	movs	r3, #0
 8007284:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8007288:	2300      	movs	r3, #0
 800728a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 800728e:	4a7b      	ldr	r2, [pc, #492]	; (800747c <low_level_init+0x240>)
 8007290:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007294:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007296:	4b79      	ldr	r3, [pc, #484]	; (800747c <low_level_init+0x240>)
 8007298:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800729c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800729e:	4b77      	ldr	r3, [pc, #476]	; (800747c <low_level_init+0x240>)
 80072a0:	4a78      	ldr	r2, [pc, #480]	; (8007484 <low_level_init+0x248>)
 80072a2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80072a4:	4b75      	ldr	r3, [pc, #468]	; (800747c <low_level_init+0x240>)
 80072a6:	4a78      	ldr	r2, [pc, #480]	; (8007488 <low_level_init+0x24c>)
 80072a8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80072aa:	4b74      	ldr	r3, [pc, #464]	; (800747c <low_level_init+0x240>)
 80072ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80072b0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80072b2:	4872      	ldr	r0, [pc, #456]	; (800747c <low_level_init+0x240>)
 80072b4:	f7fa ff8a 	bl	80021cc <HAL_ETH_Init>
 80072b8:	4603      	mov	r3, r0
 80072ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80072be:	2238      	movs	r2, #56	; 0x38
 80072c0:	2100      	movs	r1, #0
 80072c2:	4872      	ldr	r0, [pc, #456]	; (800748c <low_level_init+0x250>)
 80072c4:	f012 f9e7 	bl	8019696 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80072c8:	4b70      	ldr	r3, [pc, #448]	; (800748c <low_level_init+0x250>)
 80072ca:	2221      	movs	r2, #33	; 0x21
 80072cc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80072ce:	4b6f      	ldr	r3, [pc, #444]	; (800748c <low_level_init+0x250>)
 80072d0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80072d4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80072d6:	4b6d      	ldr	r3, [pc, #436]	; (800748c <low_level_init+0x250>)
 80072d8:	2200      	movs	r2, #0
 80072da:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80072dc:	486c      	ldr	r0, [pc, #432]	; (8007490 <low_level_init+0x254>)
 80072de:	f005 fc67 	bl	800cbb0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2206      	movs	r2, #6
 80072e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80072ea:	4b64      	ldr	r3, [pc, #400]	; (800747c <low_level_init+0x240>)
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80072f6:	4b61      	ldr	r3, [pc, #388]	; (800747c <low_level_init+0x240>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	785a      	ldrb	r2, [r3, #1]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007302:	4b5e      	ldr	r3, [pc, #376]	; (800747c <low_level_init+0x240>)
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	789a      	ldrb	r2, [r3, #2]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800730e:	4b5b      	ldr	r3, [pc, #364]	; (800747c <low_level_init+0x240>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	78da      	ldrb	r2, [r3, #3]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800731a:	4b58      	ldr	r3, [pc, #352]	; (800747c <low_level_init+0x240>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	791a      	ldrb	r2, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007326:	4b55      	ldr	r3, [pc, #340]	; (800747c <low_level_init+0x240>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	795a      	ldrb	r2, [r3, #5]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007338:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007340:	f043 030a 	orr.w	r3, r3, #10
 8007344:	b2da      	uxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 800734c:	2203      	movs	r2, #3
 800734e:	2100      	movs	r1, #0
 8007350:	2001      	movs	r0, #1
 8007352:	f001 f82d 	bl	80083b0 <xQueueGenericCreate>
 8007356:	4603      	mov	r3, r0
 8007358:	4a4e      	ldr	r2, [pc, #312]	; (8007494 <low_level_init+0x258>)
 800735a:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 800735c:	2203      	movs	r2, #3
 800735e:	2100      	movs	r1, #0
 8007360:	2001      	movs	r0, #1
 8007362:	f001 f825 	bl	80083b0 <xQueueGenericCreate>
 8007366:	4603      	mov	r3, r0
 8007368:	4a4b      	ldr	r2, [pc, #300]	; (8007498 <low_level_init+0x25c>)
 800736a:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800736c:	4b4b      	ldr	r3, [pc, #300]	; (800749c <low_level_init+0x260>)
 800736e:	f107 0408 	add.w	r4, r7, #8
 8007372:	461d      	mov	r5, r3
 8007374:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007376:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007378:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800737c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8007380:	f107 0308 	add.w	r3, r7, #8
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	4618      	mov	r0, r3
 8007388:	f000 fc16 	bl	8007bb8 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800738c:	4944      	ldr	r1, [pc, #272]	; (80074a0 <low_level_init+0x264>)
 800738e:	4845      	ldr	r0, [pc, #276]	; (80074a4 <low_level_init+0x268>)
 8007390:	f7fa f9f3 	bl	800177a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8007394:	4843      	ldr	r0, [pc, #268]	; (80074a4 <low_level_init+0x268>)
 8007396:	f7fa fa22 	bl	80017de <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800739a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d165      	bne.n	800746e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80073a2:	4840      	ldr	r0, [pc, #256]	; (80074a4 <low_level_init+0x268>)
 80073a4:	f7fa fac3 	bl	800192e <LAN8742_GetLinkState>
 80073a8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80073ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	dc06      	bgt.n	80073c2 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f005 ffe1 	bl	800d37c <netif_set_link_down>
      netif_set_down(netif);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f005 ff74 	bl	800d2a8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80073c0:	e057      	b.n	8007472 <low_level_init+0x236>
      switch (PHYLinkState)
 80073c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80073c6:	3b02      	subs	r3, #2
 80073c8:	2b03      	cmp	r3, #3
 80073ca:	d82b      	bhi.n	8007424 <low_level_init+0x1e8>
 80073cc:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <low_level_init+0x198>)
 80073ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d2:	bf00      	nop
 80073d4:	080073e5 	.word	0x080073e5
 80073d8:	080073f7 	.word	0x080073f7
 80073dc:	08007407 	.word	0x08007407
 80073e0:	08007417 	.word	0x08007417
        duplex = ETH_FULLDUPLEX_MODE;
 80073e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80073ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80073f4:	e01f      	b.n	8007436 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80073f6:	2300      	movs	r3, #0
 80073f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80073fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007404:	e017      	b.n	8007436 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007406:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800740a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800740e:	2300      	movs	r3, #0
 8007410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007414:	e00f      	b.n	8007436 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8007416:	2300      	movs	r3, #0
 8007418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 800741c:	2300      	movs	r3, #0
 800741e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007422:	e008      	b.n	8007436 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8007424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007428:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 800742c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007430:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8007434:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8007436:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800743a:	4619      	mov	r1, r3
 800743c:	480f      	ldr	r0, [pc, #60]	; (800747c <low_level_init+0x240>)
 800743e:	f7fb fba9 	bl	8002b94 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8007442:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007446:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8007448:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800744c:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800744e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007452:	4619      	mov	r1, r3
 8007454:	4809      	ldr	r0, [pc, #36]	; (800747c <low_level_init+0x240>)
 8007456:	f7fb fc87 	bl	8002d68 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800745a:	4808      	ldr	r0, [pc, #32]	; (800747c <low_level_init+0x240>)
 800745c:	f7fa ff32 	bl	80022c4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f005 feb5 	bl	800d1d0 <netif_set_up>
    netif_set_link_up(netif);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f005 ff50 	bl	800d30c <netif_set_link_up>
}
 800746c:	e001      	b.n	8007472 <low_level_init+0x236>
    Error_Handler();
 800746e:	f7f9 fe24 	bl	80010ba <Error_Handler>
}
 8007472:	bf00      	nop
 8007474:	37a0      	adds	r7, #160	; 0xa0
 8007476:	46bd      	mov	sp, r7
 8007478:	bdb0      	pop	{r4, r5, r7, pc}
 800747a:	bf00      	nop
 800747c:	200054fc 	.word	0x200054fc
 8007480:	40028000 	.word	0x40028000
 8007484:	20000148 	.word	0x20000148
 8007488:	200000a8 	.word	0x200000a8
 800748c:	200055ac 	.word	0x200055ac
 8007490:	0801d700 	.word	0x0801d700
 8007494:	200054f4 	.word	0x200054f4
 8007498:	200054f8 	.word	0x200054f8
 800749c:	0801a538 	.word	0x0801a538
 80074a0:	20000024 	.word	0x20000024
 80074a4:	200055e4 	.word	0x200055e4

080074a8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b092      	sub	sp, #72	; 0x48
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80074b2:	2300      	movs	r3, #0
 80074b4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80074b6:	2300      	movs	r3, #0
 80074b8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80074c0:	f107 030c 	add.w	r3, r7, #12
 80074c4:	2230      	movs	r2, #48	; 0x30
 80074c6:	2100      	movs	r1, #0
 80074c8:	4618      	mov	r0, r3
 80074ca:	f012 f8e4 	bl	8019696 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80074ce:	f107 030c 	add.w	r3, r7, #12
 80074d2:	2230      	movs	r2, #48	; 0x30
 80074d4:	2100      	movs	r1, #0
 80074d6:	4618      	mov	r0, r3
 80074d8:	f012 f8dd 	bl	8019696 <memset>

  for(q = p; q != NULL; q = q->next)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	643b      	str	r3, [r7, #64]	; 0x40
 80074e0:	e045      	b.n	800756e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80074e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d902      	bls.n	80074ee <low_level_output+0x46>
      return ERR_IF;
 80074e8:	f06f 030b 	mvn.w	r3, #11
 80074ec:	e065      	b.n	80075ba <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80074ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074f0:	6859      	ldr	r1, [r3, #4]
 80074f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80074f4:	4613      	mov	r3, r2
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4413      	add	r3, r2
 80074fa:	009b      	lsls	r3, r3, #2
 80074fc:	3348      	adds	r3, #72	; 0x48
 80074fe:	443b      	add	r3, r7
 8007500:	3b3c      	subs	r3, #60	; 0x3c
 8007502:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007506:	895b      	ldrh	r3, [r3, #10]
 8007508:	4619      	mov	r1, r3
 800750a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800750c:	4613      	mov	r3, r2
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	3348      	adds	r3, #72	; 0x48
 8007516:	443b      	add	r3, r7
 8007518:	3b38      	subs	r3, #56	; 0x38
 800751a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800751c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800751e:	2b00      	cmp	r3, #0
 8007520:	d011      	beq.n	8007546 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8007522:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007524:	1e5a      	subs	r2, r3, #1
 8007526:	f107 000c 	add.w	r0, r7, #12
 800752a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800752c:	460b      	mov	r3, r1
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	440b      	add	r3, r1
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	18c1      	adds	r1, r0, r3
 8007536:	4613      	mov	r3, r2
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	3348      	adds	r3, #72	; 0x48
 8007540:	443b      	add	r3, r7
 8007542:	3b34      	subs	r3, #52	; 0x34
 8007544:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8007546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800754e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007550:	4613      	mov	r3, r2
 8007552:	005b      	lsls	r3, r3, #1
 8007554:	4413      	add	r3, r2
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	3348      	adds	r3, #72	; 0x48
 800755a:	443b      	add	r3, r7
 800755c:	3b34      	subs	r3, #52	; 0x34
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
    }

    i++;
 8007562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007564:	3301      	adds	r3, #1
 8007566:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8007568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	643b      	str	r3, [r7, #64]	; 0x40
 800756e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1b6      	bne.n	80074e2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	891b      	ldrh	r3, [r3, #8]
 8007578:	461a      	mov	r2, r3
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <low_level_output+0x11c>)
 800757c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800757e:	4a11      	ldr	r2, [pc, #68]	; (80075c4 <low_level_output+0x11c>)
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007586:	4a0f      	ldr	r2, [pc, #60]	; (80075c4 <low_level_output+0x11c>)
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800758c:	6838      	ldr	r0, [r7, #0]
 800758e:	f006 fb79 	bl	800dc84 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8007592:	490c      	ldr	r1, [pc, #48]	; (80075c4 <low_level_output+0x11c>)
 8007594:	480c      	ldr	r0, [pc, #48]	; (80075c8 <low_level_output+0x120>)
 8007596:	f7fa ffa3 	bl	80024e0 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800759a:	bf00      	nop
 800759c:	4b0b      	ldr	r3, [pc, #44]	; (80075cc <low_level_output+0x124>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f04f 31ff 	mov.w	r1, #4294967295
 80075a4:	4618      	mov	r0, r3
 80075a6:	f000 fc03 	bl	8007db0 <osSemaphoreWait>
 80075aa:	4603      	mov	r3, r0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1f5      	bne.n	800759c <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 80075b0:	4805      	ldr	r0, [pc, #20]	; (80075c8 <low_level_output+0x120>)
 80075b2:	f7fb f929 	bl	8002808 <HAL_ETH_ReleaseTxPacket>

  return errval;
 80075b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3748      	adds	r7, #72	; 0x48
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	200055ac 	.word	0x200055ac
 80075c8:	200054fc 	.word	0x200054fc
 80075cc:	200054f8 	.word	0x200054f8

080075d0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80075dc:	4b07      	ldr	r3, [pc, #28]	; (80075fc <low_level_input+0x2c>)
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80075e4:	f107 030c 	add.w	r3, r7, #12
 80075e8:	4619      	mov	r1, r3
 80075ea:	4805      	ldr	r0, [pc, #20]	; (8007600 <low_level_input+0x30>)
 80075ec:	f7fa ffd4 	bl	8002598 <HAL_ETH_ReadData>
  }

  return p;
 80075f0:	68fb      	ldr	r3, [r7, #12]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200054f0 	.word	0x200054f0
 8007600:	200054fc 	.word	0x200054fc

08007604 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800760c:	2300      	movs	r3, #0
 800760e:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007614:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <ethernetif_input+0x50>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f04f 31ff 	mov.w	r1, #4294967295
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fbc7 	bl	8007db0 <osSemaphoreWait>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1f5      	bne.n	8007614 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007628:	68b8      	ldr	r0, [r7, #8]
 800762a:	f7ff ffd1 	bl	80075d0 <low_level_input>
 800762e:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	4798      	blx	r3
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d002      	beq.n	800764c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f006 fa76 	bl	800db38 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1ea      	bne.n	8007628 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007652:	e7df      	b.n	8007614 <ethernetif_input+0x10>
 8007654:	200054f4 	.word	0x200054f4

08007658 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d106      	bne.n	8007674 <ethernetif_init+0x1c>
 8007666:	4b0e      	ldr	r3, [pc, #56]	; (80076a0 <ethernetif_init+0x48>)
 8007668:	f240 12ef 	movw	r2, #495	; 0x1ef
 800766c:	490d      	ldr	r1, [pc, #52]	; (80076a4 <ethernetif_init+0x4c>)
 800766e:	480e      	ldr	r0, [pc, #56]	; (80076a8 <ethernetif_init+0x50>)
 8007670:	f011 ffac 	bl	80195cc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2273      	movs	r2, #115	; 0x73
 8007678:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2274      	movs	r2, #116	; 0x74
 8007680:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	4a09      	ldr	r2, [pc, #36]	; (80076ac <ethernetif_init+0x54>)
 8007688:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <ethernetif_init+0x58>)
 800768e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f7ff fdd3 	bl	800723c <low_level_init>

  return ERR_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}
 80076a0:	0801a554 	.word	0x0801a554
 80076a4:	0801a570 	.word	0x0801a570
 80076a8:	0801a580 	.word	0x0801a580
 80076ac:	08017375 	.word	0x08017375
 80076b0:	080074a9 	.word	0x080074a9

080076b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80076c0:	68f9      	ldr	r1, [r7, #12]
 80076c2:	4809      	ldr	r0, [pc, #36]	; (80076e8 <pbuf_free_custom+0x34>)
 80076c4:	f005 fb64 	bl	800cd90 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80076c8:	4b08      	ldr	r3, [pc, #32]	; (80076ec <pbuf_free_custom+0x38>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d107      	bne.n	80076e0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80076d0:	4b06      	ldr	r3, [pc, #24]	; (80076ec <pbuf_free_custom+0x38>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80076d6:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <pbuf_free_custom+0x3c>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 fbb6 	bl	8007e4c <osSemaphoreRelease>
  }
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	0801d700 	.word	0x0801d700
 80076ec:	200054f0 	.word	0x200054f0
 80076f0:	200054f4 	.word	0x200054f4

080076f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80076f8:	f7fa f9c2 	bl	8001a80 <HAL_GetTick>
 80076fc:	4603      	mov	r3, r0
}
 80076fe:	4618      	mov	r0, r3
 8007700:	bd80      	pop	{r7, pc}
	...

08007704 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b08e      	sub	sp, #56	; 0x38
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800770c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007710:	2200      	movs	r2, #0
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	609a      	str	r2, [r3, #8]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a52      	ldr	r2, [pc, #328]	; (800786c <HAL_ETH_MspInit+0x168>)
 8007722:	4293      	cmp	r3, r2
 8007724:	f040 809e 	bne.w	8007864 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007728:	4b51      	ldr	r3, [pc, #324]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800772a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772c:	4a50      	ldr	r2, [pc, #320]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800772e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007732:	6313      	str	r3, [r2, #48]	; 0x30
 8007734:	4b4e      	ldr	r3, [pc, #312]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007738:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800773c:	623b      	str	r3, [r7, #32]
 800773e:	6a3b      	ldr	r3, [r7, #32]
 8007740:	4b4b      	ldr	r3, [pc, #300]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007744:	4a4a      	ldr	r2, [pc, #296]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800774a:	6313      	str	r3, [r2, #48]	; 0x30
 800774c:	4b48      	ldr	r3, [pc, #288]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007754:	61fb      	str	r3, [r7, #28]
 8007756:	69fb      	ldr	r3, [r7, #28]
 8007758:	4b45      	ldr	r3, [pc, #276]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800775a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800775c:	4a44      	ldr	r2, [pc, #272]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800775e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007762:	6313      	str	r3, [r2, #48]	; 0x30
 8007764:	4b42      	ldr	r3, [pc, #264]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007770:	4b3f      	ldr	r3, [pc, #252]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007774:	4a3e      	ldr	r2, [pc, #248]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007776:	f043 0304 	orr.w	r3, r3, #4
 800777a:	6313      	str	r3, [r2, #48]	; 0x30
 800777c:	4b3c      	ldr	r3, [pc, #240]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800777e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007780:	f003 0304 	and.w	r3, r3, #4
 8007784:	617b      	str	r3, [r7, #20]
 8007786:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007788:	4b39      	ldr	r3, [pc, #228]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	4a38      	ldr	r2, [pc, #224]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	6313      	str	r3, [r2, #48]	; 0x30
 8007794:	4b36      	ldr	r3, [pc, #216]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 8007796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80077a0:	4b33      	ldr	r3, [pc, #204]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 80077a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a4:	4a32      	ldr	r2, [pc, #200]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 80077a6:	f043 0302 	orr.w	r3, r3, #2
 80077aa:	6313      	str	r3, [r2, #48]	; 0x30
 80077ac:	4b30      	ldr	r3, [pc, #192]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	60fb      	str	r3, [r7, #12]
 80077b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80077b8:	4b2d      	ldr	r3, [pc, #180]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 80077ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077bc:	4a2c      	ldr	r2, [pc, #176]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 80077be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077c2:	6313      	str	r3, [r2, #48]	; 0x30
 80077c4:	4b2a      	ldr	r3, [pc, #168]	; (8007870 <HAL_ETH_MspInit+0x16c>)
 80077c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077cc:	60bb      	str	r3, [r7, #8]
 80077ce:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80077d0:	2332      	movs	r3, #50	; 0x32
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077d4:	2302      	movs	r3, #2
 80077d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077d8:	2300      	movs	r3, #0
 80077da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077dc:	2303      	movs	r3, #3
 80077de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80077e0:	230b      	movs	r3, #11
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80077e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077e8:	4619      	mov	r1, r3
 80077ea:	4822      	ldr	r0, [pc, #136]	; (8007874 <HAL_ETH_MspInit+0x170>)
 80077ec:	f7fb ff3c 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80077f0:	2386      	movs	r3, #134	; 0x86
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f4:	2302      	movs	r3, #2
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077fc:	2303      	movs	r3, #3
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007800:	230b      	movs	r3, #11
 8007802:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007808:	4619      	mov	r1, r3
 800780a:	481b      	ldr	r0, [pc, #108]	; (8007878 <HAL_ETH_MspInit+0x174>)
 800780c:	f7fb ff2c 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007814:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007816:	2302      	movs	r3, #2
 8007818:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800781a:	2300      	movs	r3, #0
 800781c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800781e:	2303      	movs	r3, #3
 8007820:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007822:	230b      	movs	r3, #11
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800782a:	4619      	mov	r1, r3
 800782c:	4813      	ldr	r0, [pc, #76]	; (800787c <HAL_ETH_MspInit+0x178>)
 800782e:	f7fb ff1b 	bl	8003668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8007832:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007838:	2302      	movs	r3, #2
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800783c:	2300      	movs	r3, #0
 800783e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007840:	2303      	movs	r3, #3
 8007842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007844:	230b      	movs	r3, #11
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800784c:	4619      	mov	r1, r3
 800784e:	480c      	ldr	r0, [pc, #48]	; (8007880 <HAL_ETH_MspInit+0x17c>)
 8007850:	f7fb ff0a 	bl	8003668 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007854:	2200      	movs	r2, #0
 8007856:	2105      	movs	r1, #5
 8007858:	203d      	movs	r0, #61	; 0x3d
 800785a:	f7fa fc8d 	bl	8002178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800785e:	203d      	movs	r0, #61	; 0x3d
 8007860:	f7fa fca6 	bl	80021b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007864:	bf00      	nop
 8007866:	3738      	adds	r7, #56	; 0x38
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40028000 	.word	0x40028000
 8007870:	40023800 	.word	0x40023800
 8007874:	40020800 	.word	0x40020800
 8007878:	40020000 	.word	0x40020000
 800787c:	40020400 	.word	0x40020400
 8007880:	40021800 	.word	0x40021800

08007884 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007888:	4802      	ldr	r0, [pc, #8]	; (8007894 <ETH_PHY_IO_Init+0x10>)
 800788a:	f7fb fa87 	bl	8002d9c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	bd80      	pop	{r7, pc}
 8007894:	200054fc 	.word	0x200054fc

08007898 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0
  return 0;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	68f9      	ldr	r1, [r7, #12]
 80078ba:	4807      	ldr	r0, [pc, #28]	; (80078d8 <ETH_PHY_IO_ReadReg+0x30>)
 80078bc:	f7fb f8d6 	bl	8002a6c <HAL_ETH_ReadPHYRegister>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d002      	beq.n	80078cc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80078c6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ca:	e000      	b.n	80078ce <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	200054fc 	.word	0x200054fc

080078dc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	68f9      	ldr	r1, [r7, #12]
 80078ee:	4807      	ldr	r0, [pc, #28]	; (800790c <ETH_PHY_IO_WriteReg+0x30>)
 80078f0:	f7fb f907 	bl	8002b02 <HAL_ETH_WritePHYRegister>
 80078f4:	4603      	mov	r3, r0
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d002      	beq.n	8007900 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80078fa:	f04f 33ff 	mov.w	r3, #4294967295
 80078fe:	e000      	b.n	8007902 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	200054fc 	.word	0x200054fc

08007910 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007914:	f7fa f8b4 	bl	8001a80 <HAL_GetTick>
 8007918:	4603      	mov	r3, r0
}
 800791a:	4618      	mov	r0, r3
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0a0      	sub	sp, #128	; 0x80
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007928:	f107 0308 	add.w	r3, r7, #8
 800792c:	2264      	movs	r2, #100	; 0x64
 800792e:	2100      	movs	r1, #0
 8007930:	4618      	mov	r0, r3
 8007932:	f011 feb0 	bl	8019696 <memset>
  int32_t PHYLinkState = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800793e:	2300      	movs	r3, #0
 8007940:	67bb      	str	r3, [r7, #120]	; 0x78
 8007942:	2300      	movs	r3, #0
 8007944:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800794a:	483a      	ldr	r0, [pc, #232]	; (8007a34 <ethernet_link_thread+0x114>)
 800794c:	f7f9 ffef 	bl	800192e <LAN8742_GetLinkState>
 8007950:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8007952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007954:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007958:	089b      	lsrs	r3, r3, #2
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00c      	beq.n	800797e <ethernet_link_thread+0x5e>
 8007964:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007966:	2b01      	cmp	r3, #1
 8007968:	dc09      	bgt.n	800797e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800796a:	4833      	ldr	r0, [pc, #204]	; (8007a38 <ethernet_link_thread+0x118>)
 800796c:	f7fa fd38 	bl	80023e0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007970:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007972:	f005 fc99 	bl	800d2a8 <netif_set_down>
    netif_set_link_down(netif);
 8007976:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007978:	f005 fd00 	bl	800d37c <netif_set_link_down>
 800797c:	e055      	b.n	8007a2a <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800797e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007980:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d14e      	bne.n	8007a2a <ethernet_link_thread+0x10a>
 800798c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800798e:	2b01      	cmp	r3, #1
 8007990:	dd4b      	ble.n	8007a2a <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007992:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007994:	3b02      	subs	r3, #2
 8007996:	2b03      	cmp	r3, #3
 8007998:	d82a      	bhi.n	80079f0 <ethernet_link_thread+0xd0>
 800799a:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <ethernet_link_thread+0x80>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079b1 	.word	0x080079b1
 80079a4:	080079c3 	.word	0x080079c3
 80079a8:	080079d3 	.word	0x080079d3
 80079ac:	080079e3 	.word	0x080079e3
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80079b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80079b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80079bc:	2301      	movs	r3, #1
 80079be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80079c0:	e017      	b.n	80079f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80079c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80079cc:	2301      	movs	r3, #1
 80079ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80079d0:	e00f      	b.n	80079f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80079d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079d6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80079d8:	2300      	movs	r3, #0
 80079da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80079dc:	2301      	movs	r3, #1
 80079de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80079e0:	e007      	b.n	80079f2 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80079e2:	2300      	movs	r3, #0
 80079e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80079e6:	2300      	movs	r3, #0
 80079e8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80079ea:	2301      	movs	r3, #1
 80079ec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80079ee:	e000      	b.n	80079f2 <ethernet_link_thread+0xd2>
    default:
      break;
 80079f0:	bf00      	nop
    }

    if(linkchanged)
 80079f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d018      	beq.n	8007a2a <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80079f8:	f107 0308 	add.w	r3, r7, #8
 80079fc:	4619      	mov	r1, r3
 80079fe:	480e      	ldr	r0, [pc, #56]	; (8007a38 <ethernet_link_thread+0x118>)
 8007a00:	f7fb f8c8 	bl	8002b94 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8007a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a06:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a0a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007a0c:	f107 0308 	add.w	r3, r7, #8
 8007a10:	4619      	mov	r1, r3
 8007a12:	4809      	ldr	r0, [pc, #36]	; (8007a38 <ethernet_link_thread+0x118>)
 8007a14:	f7fb f9a8 	bl	8002d68 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007a18:	4807      	ldr	r0, [pc, #28]	; (8007a38 <ethernet_link_thread+0x118>)
 8007a1a:	f7fa fc53 	bl	80022c4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007a1e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a20:	f005 fbd6 	bl	800d1d0 <netif_set_up>
      netif_set_link_up(netif);
 8007a24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007a26:	f005 fc71 	bl	800d30c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007a2a:	2064      	movs	r0, #100	; 0x64
 8007a2c:	f000 f910 	bl	8007c50 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007a30:	e78b      	b.n	800794a <ethernet_link_thread+0x2a>
 8007a32:	bf00      	nop
 8007a34:	200055e4 	.word	0x200055e4
 8007a38:	200054fc 	.word	0x200054fc

08007a3c <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8007a44:	4812      	ldr	r0, [pc, #72]	; (8007a90 <HAL_ETH_RxAllocateCallback+0x54>)
 8007a46:	f005 f92f 	bl	800cca8 <memp_malloc_pool>
 8007a4a:	60f8      	str	r0, [r7, #12]
  if (p)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d014      	beq.n	8007a7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f103 0220 	add.w	r2, r3, #32
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a0d      	ldr	r2, [pc, #52]	; (8007a94 <HAL_ETH_RxAllocateCallback+0x58>)
 8007a60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007a6a:	9201      	str	r2, [sp, #4]
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2241      	movs	r2, #65	; 0x41
 8007a72:	2100      	movs	r1, #0
 8007a74:	2000      	movs	r0, #0
 8007a76:	f005 fea5 	bl	800d7c4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007a7a:	e005      	b.n	8007a88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007a7c:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
}
 8007a88:	bf00      	nop
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	0801d700 	.word	0x0801d700
 8007a94:	080076b5 	.word	0x080076b5
 8007a98:	200054f0 	.word	0x200054f0

08007a9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b088      	sub	sp, #32
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	60f8      	str	r0, [r7, #12]
 8007aa4:	60b9      	str	r1, [r7, #8]
 8007aa6:	607a      	str	r2, [r7, #4]
 8007aa8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3b20      	subs	r3, #32
 8007aba:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8007abc:	69fb      	ldr	r3, [r7, #28]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	887a      	ldrh	r2, [r7, #2]
 8007acc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8007ace:	69bb      	ldr	r3, [r7, #24]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d103      	bne.n	8007ade <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007ad6:	69bb      	ldr	r3, [r7, #24]
 8007ad8:	69fa      	ldr	r2, [r7, #28]
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e003      	b.n	8007ae6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	69fa      	ldr	r2, [r7, #28]
 8007aea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	e009      	b.n	8007b08 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	891a      	ldrh	r2, [r3, #8]
 8007af8:	887b      	ldrh	r3, [r7, #2]
 8007afa:	4413      	add	r3, r2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	61fb      	str	r3, [r7, #28]
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f2      	bne.n	8007af4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007b0e:	887b      	ldrh	r3, [r7, #2]
 8007b10:	4619      	mov	r1, r3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff fb2e 	bl	8007174 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007b18:	bf00      	nop
 8007b1a:	3720      	adds	r7, #32
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f006 f805 	bl	800db38 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007b2e:	bf00      	nop
 8007b30:	3708      	adds	r7, #8
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b085      	sub	sp, #20
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b40:	2300      	movs	r3, #0
 8007b42:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b44:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b48:	2b84      	cmp	r3, #132	; 0x84
 8007b4a:	d005      	beq.n	8007b58 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b4c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	4413      	add	r3, r2
 8007b54:	3303      	adds	r3, #3
 8007b56:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b58:	68fb      	ldr	r3, [r7, #12]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b66:	b480      	push	{r7}
 8007b68:	b083      	sub	sp, #12
 8007b6a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b6c:	f3ef 8305 	mrs	r3, IPSR
 8007b70:	607b      	str	r3, [r7, #4]
  return(result);
 8007b72:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	bf14      	ite	ne
 8007b78:	2301      	movne	r3, #1
 8007b7a:	2300      	moveq	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	370c      	adds	r7, #12
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr

08007b8a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b8a:	b580      	push	{r7, lr}
 8007b8c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b8e:	f001 fc73 	bl	8009478 <vTaskStartScheduler>
  
  return osOK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007b9c:	f7ff ffe3 	bl	8007b66 <inHandlerMode>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d003      	beq.n	8007bae <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007ba6:	f001 fd87 	bl	80096b8 <xTaskGetTickCountFromISR>
 8007baa:	4603      	mov	r3, r0
 8007bac:	e002      	b.n	8007bb4 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007bae:	f001 fd73 	bl	8009698 <xTaskGetTickCount>
 8007bb2:	4603      	mov	r3, r0
  }
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bba:	b089      	sub	sp, #36	; 0x24
 8007bbc:	af04      	add	r7, sp, #16
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d020      	beq.n	8007c0c <osThreadCreate+0x54>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d01c      	beq.n	8007c0c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685c      	ldr	r4, [r3, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	691e      	ldr	r6, [r3, #16]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007be4:	4618      	mov	r0, r3
 8007be6:	f7ff ffa6 	bl	8007b36 <makeFreeRtosPriority>
 8007bea:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	695b      	ldr	r3, [r3, #20]
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bf4:	9202      	str	r2, [sp, #8]
 8007bf6:	9301      	str	r3, [sp, #4]
 8007bf8:	9100      	str	r1, [sp, #0]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4620      	mov	r0, r4
 8007c02:	f001 fa67 	bl	80090d4 <xTaskCreateStatic>
 8007c06:	4603      	mov	r3, r0
 8007c08:	60fb      	str	r3, [r7, #12]
 8007c0a:	e01c      	b.n	8007c46 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	685c      	ldr	r4, [r3, #4]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c18:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c20:	4618      	mov	r0, r3
 8007c22:	f7ff ff88 	bl	8007b36 <makeFreeRtosPriority>
 8007c26:	4602      	mov	r2, r0
 8007c28:	f107 030c 	add.w	r3, r7, #12
 8007c2c:	9301      	str	r3, [sp, #4]
 8007c2e:	9200      	str	r2, [sp, #0]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	4632      	mov	r2, r6
 8007c34:	4629      	mov	r1, r5
 8007c36:	4620      	mov	r0, r4
 8007c38:	f001 faaf 	bl	800919a <xTaskCreate>
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d001      	beq.n	8007c46 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e000      	b.n	8007c48 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c46:	68fb      	ldr	r3, [r7, #12]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3714      	adds	r7, #20
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c50 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <osDelay+0x16>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	e000      	b.n	8007c68 <osDelay+0x18>
 8007c66:	2301      	movs	r3, #1
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f001 fbcf 	bl	800940c <vTaskDelay>
  
  return osOK;
 8007c6e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3710      	adds	r7, #16
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d007      	beq.n	8007c98 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	2001      	movs	r0, #1
 8007c90:	f000 fc21 	bl	80084d6 <xQueueCreateMutexStatic>
 8007c94:	4603      	mov	r3, r0
 8007c96:	e003      	b.n	8007ca0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007c98:	2001      	movs	r0, #1
 8007c9a:	f000 fc04 	bl	80084a6 <xQueueCreateMutex>
 8007c9e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <osMutexWait+0x18>
    return osErrorParameter;
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	e03a      	b.n	8007d36 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cca:	d103      	bne.n	8007cd4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	60fb      	str	r3, [r7, #12]
 8007cd2:	e009      	b.n	8007ce8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d006      	beq.n	8007ce8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <osMutexWait+0x40>
      ticks = 1;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007ce8:	f7ff ff3d 	bl	8007b66 <inHandlerMode>
 8007cec:	4603      	mov	r3, r0
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007cf2:	f107 0308 	add.w	r3, r7, #8
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f001 f83c 	bl	8008d78 <xQueueReceiveFromISR>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d001      	beq.n	8007d0a <osMutexWait+0x62>
      return osErrorOS;
 8007d06:	23ff      	movs	r3, #255	; 0xff
 8007d08:	e015      	b.n	8007d36 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d011      	beq.n	8007d34 <osMutexWait+0x8c>
 8007d10:	4b0b      	ldr	r3, [pc, #44]	; (8007d40 <osMutexWait+0x98>)
 8007d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d16:	601a      	str	r2, [r3, #0]
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	e008      	b.n	8007d34 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007d22:	68f9      	ldr	r1, [r7, #12]
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 ff13 	bl	8008b50 <xQueueSemaphoreTake>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d001      	beq.n	8007d34 <osMutexWait+0x8c>
    return osErrorOS;
 8007d30:	23ff      	movs	r3, #255	; 0xff
 8007d32:	e000      	b.n	8007d36 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007d54:	f7ff ff07 	bl	8007b66 <inHandlerMode>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d016      	beq.n	8007d8c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007d5e:	f107 0308 	add.w	r3, r7, #8
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fd77 	bl	8008858 <xQueueGiveFromISR>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d001      	beq.n	8007d74 <osMutexRelease+0x30>
      return osErrorOS;
 8007d70:	23ff      	movs	r3, #255	; 0xff
 8007d72:	e017      	b.n	8007da4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d013      	beq.n	8007da2 <osMutexRelease+0x5e>
 8007d7a:	4b0c      	ldr	r3, [pc, #48]	; (8007dac <osMutexRelease+0x68>)
 8007d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	e00a      	b.n	8007da2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fbba 	bl	800850c <xQueueGenericSend>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d001      	beq.n	8007da2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007d9e:	23ff      	movs	r3, #255	; 0xff
 8007da0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	e000ed04 	.word	0xe000ed04

08007db0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d101      	bne.n	8007dc8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007dc4:	2380      	movs	r3, #128	; 0x80
 8007dc6:	e03a      	b.n	8007e3e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd2:	d103      	bne.n	8007ddc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd8:	60fb      	str	r3, [r7, #12]
 8007dda:	e009      	b.n	8007df0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d006      	beq.n	8007df0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d101      	bne.n	8007df0 <osSemaphoreWait+0x40>
      ticks = 1;
 8007dec:	2301      	movs	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007df0:	f7ff feb9 	bl	8007b66 <inHandlerMode>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d017      	beq.n	8007e2a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007dfa:	f107 0308 	add.w	r3, r7, #8
 8007dfe:	461a      	mov	r2, r3
 8007e00:	2100      	movs	r1, #0
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 ffb8 	bl	8008d78 <xQueueReceiveFromISR>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d001      	beq.n	8007e12 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007e0e:	23ff      	movs	r3, #255	; 0xff
 8007e10:	e015      	b.n	8007e3e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d011      	beq.n	8007e3c <osSemaphoreWait+0x8c>
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <osSemaphoreWait+0x98>)
 8007e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f3bf 8f4f 	dsb	sy
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	e008      	b.n	8007e3c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007e2a:	68f9      	ldr	r1, [r7, #12]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fe8f 	bl	8008b50 <xQueueSemaphoreTake>
 8007e32:	4603      	mov	r3, r0
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d001      	beq.n	8007e3c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007e38:	23ff      	movs	r3, #255	; 0xff
 8007e3a:	e000      	b.n	8007e3e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	e000ed04 	.word	0xe000ed04

08007e4c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007e5c:	f7ff fe83 	bl	8007b66 <inHandlerMode>
 8007e60:	4603      	mov	r3, r0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d016      	beq.n	8007e94 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e66:	f107 0308 	add.w	r3, r7, #8
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fcf3 	bl	8008858 <xQueueGiveFromISR>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d001      	beq.n	8007e7c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007e78:	23ff      	movs	r3, #255	; 0xff
 8007e7a:	e017      	b.n	8007eac <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d013      	beq.n	8007eaa <osSemaphoreRelease+0x5e>
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <osSemaphoreRelease+0x68>)
 8007e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	e00a      	b.n	8007eaa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007e94:	2300      	movs	r3, #0
 8007e96:	2200      	movs	r2, #0
 8007e98:	2100      	movs	r1, #0
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f000 fb36 	bl	800850c <xQueueGenericSend>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d001      	beq.n	8007eaa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007ea6:	23ff      	movs	r3, #255	; 0xff
 8007ea8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	e000ed04 	.word	0xe000ed04

08007eb8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d011      	beq.n	8007eee <osMessageCreate+0x36>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00d      	beq.n	8007eee <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6859      	ldr	r1, [r3, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	2400      	movs	r4, #0
 8007ee4:	9400      	str	r4, [sp, #0]
 8007ee6:	f000 f9e1 	bl	80082ac <xQueueGenericCreateStatic>
 8007eea:	4603      	mov	r3, r0
 8007eec:	e008      	b.n	8007f00 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6818      	ldr	r0, [r3, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	4619      	mov	r1, r3
 8007efa:	f000 fa59 	bl	80083b0 <xQueueGenericCreate>
 8007efe:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd90      	pop	{r4, r7, pc}

08007f08 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <osMessagePut+0x1e>
    ticks = 1;
 8007f22:	2301      	movs	r3, #1
 8007f24:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007f26:	f7ff fe1e 	bl	8007b66 <inHandlerMode>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d018      	beq.n	8007f62 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007f30:	f107 0210 	add.w	r2, r7, #16
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	2300      	movs	r3, #0
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f000 fbec 	bl	8008718 <xQueueGenericSendFromISR>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d001      	beq.n	8007f4a <osMessagePut+0x42>
      return osErrorOS;
 8007f46:	23ff      	movs	r3, #255	; 0xff
 8007f48:	e018      	b.n	8007f7c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d014      	beq.n	8007f7a <osMessagePut+0x72>
 8007f50:	4b0c      	ldr	r3, [pc, #48]	; (8007f84 <osMessagePut+0x7c>)
 8007f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	e00b      	b.n	8007f7a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007f62:	f107 0108 	add.w	r1, r7, #8
 8007f66:	2300      	movs	r3, #0
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	68f8      	ldr	r0, [r7, #12]
 8007f6c:	f000 face 	bl	800850c <xQueueGenericSend>
 8007f70:	4603      	mov	r3, r0
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d001      	beq.n	8007f7a <osMessagePut+0x72>
      return osErrorOS;
 8007f76:	23ff      	movs	r3, #255	; 0xff
 8007f78:	e000      	b.n	8007f7c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	e000ed04 	.word	0xe000ed04

08007f88 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007f88:	b590      	push	{r4, r7, lr}
 8007f8a:	b08b      	sub	sp, #44	; 0x2c
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	60f8      	str	r0, [r7, #12]
 8007f90:	60b9      	str	r1, [r7, #8]
 8007f92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d10a      	bne.n	8007fb8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007fa2:	2380      	movs	r3, #128	; 0x80
 8007fa4:	617b      	str	r3, [r7, #20]
    return event;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	461c      	mov	r4, r3
 8007faa:	f107 0314 	add.w	r3, r7, #20
 8007fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fb6:	e054      	b.n	8008062 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d103      	bne.n	8007fd0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8007fce:	e009      	b.n	8007fe4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d006      	beq.n	8007fe4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d101      	bne.n	8007fe4 <osMessageGet+0x5c>
      ticks = 1;
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007fe4:	f7ff fdbf 	bl	8007b66 <inHandlerMode>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01c      	beq.n	8008028 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007fee:	f107 0220 	add.w	r2, r7, #32
 8007ff2:	f107 0314 	add.w	r3, r7, #20
 8007ff6:	3304      	adds	r3, #4
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	68b8      	ldr	r0, [r7, #8]
 8007ffc:	f000 febc 	bl	8008d78 <xQueueReceiveFromISR>
 8008000:	4603      	mov	r3, r0
 8008002:	2b01      	cmp	r3, #1
 8008004:	d102      	bne.n	800800c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008006:	2310      	movs	r3, #16
 8008008:	617b      	str	r3, [r7, #20]
 800800a:	e001      	b.n	8008010 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008010:	6a3b      	ldr	r3, [r7, #32]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01d      	beq.n	8008052 <osMessageGet+0xca>
 8008016:	4b15      	ldr	r3, [pc, #84]	; (800806c <osMessageGet+0xe4>)
 8008018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	e014      	b.n	8008052 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008028:	f107 0314 	add.w	r3, r7, #20
 800802c:	3304      	adds	r3, #4
 800802e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008030:	4619      	mov	r1, r3
 8008032:	68b8      	ldr	r0, [r7, #8]
 8008034:	f000 fca6 	bl	8008984 <xQueueReceive>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d102      	bne.n	8008044 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800803e:	2310      	movs	r3, #16
 8008040:	617b      	str	r3, [r7, #20]
 8008042:	e006      	b.n	8008052 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <osMessageGet+0xc6>
 800804a:	2300      	movs	r3, #0
 800804c:	e000      	b.n	8008050 <osMessageGet+0xc8>
 800804e:	2340      	movs	r3, #64	; 0x40
 8008050:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	461c      	mov	r4, r3
 8008056:	f107 0314 	add.w	r3, r7, #20
 800805a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800805e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008062:	68f8      	ldr	r0, [r7, #12]
 8008064:	372c      	adds	r7, #44	; 0x2c
 8008066:	46bd      	mov	sp, r7
 8008068:	bd90      	pop	{r4, r7, pc}
 800806a:	bf00      	nop
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008070:	b480      	push	{r7}
 8008072:	b083      	sub	sp, #12
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f103 0208 	add.w	r2, r3, #8
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f04f 32ff 	mov.w	r2, #4294967295
 8008088:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f103 0208 	add.w	r2, r3, #8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f103 0208 	add.w	r2, r3, #8
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080be:	bf00      	nop
 80080c0:	370c      	adds	r7, #12
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr

080080ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689a      	ldr	r2, [r3, #8]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	683a      	ldr	r2, [r7, #0]
 80080ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	601a      	str	r2, [r3, #0]
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
 800811a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008128:	d103      	bne.n	8008132 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e00c      	b.n	800814c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3308      	adds	r3, #8
 8008136:	60fb      	str	r3, [r7, #12]
 8008138:	e002      	b.n	8008140 <vListInsert+0x2e>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	60fb      	str	r3, [r7, #12]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	429a      	cmp	r2, r3
 800814a:	d2f6      	bcs.n	800813a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	685a      	ldr	r2, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	685b      	ldr	r3, [r3, #4]
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	683a      	ldr	r2, [r7, #0]
 8008166:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	601a      	str	r2, [r3, #0]
}
 8008178:	bf00      	nop
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6892      	ldr	r2, [r2, #8]
 800819a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	6852      	ldr	r2, [r2, #4]
 80081a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d103      	bne.n	80081b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689a      	ldr	r2, [r3, #8]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2200      	movs	r2, #0
 80081bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	1e5a      	subs	r2, r3, #1
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
}
 80081cc:	4618      	mov	r0, r3
 80081ce:	3714      	adds	r7, #20
 80081d0:	46bd      	mov	sp, r7
 80081d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d6:	4770      	bx	lr

080081d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b084      	sub	sp, #16
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10c      	bne.n	8008206 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	b672      	cpsid	i
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	b662      	cpsie	i
 8008200:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008206:	f002 f8b9 	bl	800a37c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008212:	68f9      	ldr	r1, [r7, #12]
 8008214:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008216:	fb01 f303 	mul.w	r3, r1, r3
 800821a:	441a      	add	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008236:	3b01      	subs	r3, #1
 8008238:	68f9      	ldr	r1, [r7, #12]
 800823a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800823c:	fb01 f303 	mul.w	r3, r1, r3
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	22ff      	movs	r2, #255	; 0xff
 800824a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	22ff      	movs	r2, #255	; 0xff
 8008252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d114      	bne.n	8008286 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01a      	beq.n	800829a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	3310      	adds	r3, #16
 8008268:	4618      	mov	r0, r3
 800826a:	f001 fb75 	bl	8009958 <xTaskRemoveFromEventList>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d012      	beq.n	800829a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <xQueueGenericReset+0xd0>)
 8008276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827a:	601a      	str	r2, [r3, #0]
 800827c:	f3bf 8f4f 	dsb	sy
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	e009      	b.n	800829a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	3310      	adds	r3, #16
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fef0 	bl	8008070 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3324      	adds	r3, #36	; 0x24
 8008294:	4618      	mov	r0, r3
 8008296:	f7ff feeb 	bl	8008070 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800829a:	f002 f8a3 	bl	800a3e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800829e:	2301      	movs	r3, #1
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3710      	adds	r7, #16
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	e000ed04 	.word	0xe000ed04

080082ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b08e      	sub	sp, #56	; 0x38
 80082b0:	af02      	add	r7, sp, #8
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10c      	bne.n	80082da <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	b672      	cpsid	i
 80082c6:	f383 8811 	msr	BASEPRI, r3
 80082ca:	f3bf 8f6f 	isb	sy
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	b662      	cpsie	i
 80082d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082d6:	bf00      	nop
 80082d8:	e7fe      	b.n	80082d8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80082e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e4:	b672      	cpsid	i
 80082e6:	f383 8811 	msr	BASEPRI, r3
 80082ea:	f3bf 8f6f 	isb	sy
 80082ee:	f3bf 8f4f 	dsb	sy
 80082f2:	b662      	cpsie	i
 80082f4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082f6:	bf00      	nop
 80082f8:	e7fe      	b.n	80082f8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d002      	beq.n	8008306 <xQueueGenericCreateStatic+0x5a>
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <xQueueGenericCreateStatic+0x5e>
 8008306:	2301      	movs	r3, #1
 8008308:	e000      	b.n	800830c <xQueueGenericCreateStatic+0x60>
 800830a:	2300      	movs	r3, #0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d10c      	bne.n	800832a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008314:	b672      	cpsid	i
 8008316:	f383 8811 	msr	BASEPRI, r3
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	b662      	cpsie	i
 8008324:	623b      	str	r3, [r7, #32]
}
 8008326:	bf00      	nop
 8008328:	e7fe      	b.n	8008328 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <xQueueGenericCreateStatic+0x8a>
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <xQueueGenericCreateStatic+0x8e>
 8008336:	2301      	movs	r3, #1
 8008338:	e000      	b.n	800833c <xQueueGenericCreateStatic+0x90>
 800833a:	2300      	movs	r3, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10c      	bne.n	800835a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008344:	b672      	cpsid	i
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	b662      	cpsie	i
 8008354:	61fb      	str	r3, [r7, #28]
}
 8008356:	bf00      	nop
 8008358:	e7fe      	b.n	8008358 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800835a:	2348      	movs	r3, #72	; 0x48
 800835c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	2b48      	cmp	r3, #72	; 0x48
 8008362:	d00c      	beq.n	800837e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008368:	b672      	cpsid	i
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	b662      	cpsie	i
 8008378:	61bb      	str	r3, [r7, #24]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800837e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00d      	beq.n	80083a6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800838a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800838c:	2201      	movs	r2, #1
 800838e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008392:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008398:	9300      	str	r3, [sp, #0]
 800839a:	4613      	mov	r3, r2
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f847 	bl	8008434 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3730      	adds	r7, #48	; 0x30
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b08a      	sub	sp, #40	; 0x28
 80083b4:	af02      	add	r7, sp, #8
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10c      	bne.n	80083de <xQueueGenericCreate+0x2e>
	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	b672      	cpsid	i
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	b662      	cpsie	i
 80083d8:	613b      	str	r3, [r7, #16]
}
 80083da:	bf00      	nop
 80083dc:	e7fe      	b.n	80083dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	61fb      	str	r3, [r7, #28]
 80083e8:	e004      	b.n	80083f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	fb02 f303 	mul.w	r3, r2, r3
 80083f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083f4:	69fb      	ldr	r3, [r7, #28]
 80083f6:	3348      	adds	r3, #72	; 0x48
 80083f8:	4618      	mov	r0, r3
 80083fa:	f002 f8eb 	bl	800a5d4 <pvPortMalloc>
 80083fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d011      	beq.n	800842a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	3348      	adds	r3, #72	; 0x48
 800840e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008418:	79fa      	ldrb	r2, [r7, #7]
 800841a:	69bb      	ldr	r3, [r7, #24]
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	4613      	mov	r3, r2
 8008420:	697a      	ldr	r2, [r7, #20]
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f000 f805 	bl	8008434 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800842a:	69bb      	ldr	r3, [r7, #24]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	3720      	adds	r7, #32
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	607a      	str	r2, [r7, #4]
 8008440:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d103      	bne.n	8008450 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008448:	69bb      	ldr	r3, [r7, #24]
 800844a:	69ba      	ldr	r2, [r7, #24]
 800844c:	601a      	str	r2, [r3, #0]
 800844e:	e002      	b.n	8008456 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008450:	69bb      	ldr	r3, [r7, #24]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	68ba      	ldr	r2, [r7, #8]
 8008460:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008462:	2101      	movs	r1, #1
 8008464:	69b8      	ldr	r0, [r7, #24]
 8008466:	f7ff feb7 	bl	80081d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008472:	b580      	push	{r7, lr}
 8008474:	b082      	sub	sp, #8
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00e      	beq.n	800849e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2200      	movs	r2, #0
 8008484:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2200      	movs	r2, #0
 800848a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008492:	2300      	movs	r3, #0
 8008494:	2200      	movs	r2, #0
 8008496:	2100      	movs	r1, #0
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f000 f837 	bl	800850c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800849e:	bf00      	nop
 80084a0:	3708      	adds	r7, #8
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}

080084a6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80084a6:	b580      	push	{r7, lr}
 80084a8:	b086      	sub	sp, #24
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	4603      	mov	r3, r0
 80084ae:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80084b0:	2301      	movs	r3, #1
 80084b2:	617b      	str	r3, [r7, #20]
 80084b4:	2300      	movs	r3, #0
 80084b6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6939      	ldr	r1, [r7, #16]
 80084be:	6978      	ldr	r0, [r7, #20]
 80084c0:	f7ff ff76 	bl	80083b0 <xQueueGenericCreate>
 80084c4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80084c6:	68f8      	ldr	r0, [r7, #12]
 80084c8:	f7ff ffd3 	bl	8008472 <prvInitialiseMutex>

		return xNewQueue;
 80084cc:	68fb      	ldr	r3, [r7, #12]
	}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3718      	adds	r7, #24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b088      	sub	sp, #32
 80084da:	af02      	add	r7, sp, #8
 80084dc:	4603      	mov	r3, r0
 80084de:	6039      	str	r1, [r7, #0]
 80084e0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80084e2:	2301      	movs	r3, #1
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	2300      	movs	r3, #0
 80084e8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2200      	movs	r2, #0
 80084f2:	6939      	ldr	r1, [r7, #16]
 80084f4:	6978      	ldr	r0, [r7, #20]
 80084f6:	f7ff fed9 	bl	80082ac <xQueueGenericCreateStatic>
 80084fa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f7ff ffb8 	bl	8008472 <prvInitialiseMutex>

		return xNewQueue;
 8008502:	68fb      	ldr	r3, [r7, #12]
	}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b08e      	sub	sp, #56	; 0x38
 8008510:	af00      	add	r7, sp, #0
 8008512:	60f8      	str	r0, [r7, #12]
 8008514:	60b9      	str	r1, [r7, #8]
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800851a:	2300      	movs	r3, #0
 800851c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008524:	2b00      	cmp	r3, #0
 8008526:	d10c      	bne.n	8008542 <xQueueGenericSend+0x36>
	__asm volatile
 8008528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852c:	b672      	cpsid	i
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	b662      	cpsie	i
 800853c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800853e:	bf00      	nop
 8008540:	e7fe      	b.n	8008540 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d103      	bne.n	8008550 <xQueueGenericSend+0x44>
 8008548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <xQueueGenericSend+0x48>
 8008550:	2301      	movs	r3, #1
 8008552:	e000      	b.n	8008556 <xQueueGenericSend+0x4a>
 8008554:	2300      	movs	r3, #0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10c      	bne.n	8008574 <xQueueGenericSend+0x68>
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	b672      	cpsid	i
 8008560:	f383 8811 	msr	BASEPRI, r3
 8008564:	f3bf 8f6f 	isb	sy
 8008568:	f3bf 8f4f 	dsb	sy
 800856c:	b662      	cpsie	i
 800856e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008570:	bf00      	nop
 8008572:	e7fe      	b.n	8008572 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	2b02      	cmp	r3, #2
 8008578:	d103      	bne.n	8008582 <xQueueGenericSend+0x76>
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800857e:	2b01      	cmp	r3, #1
 8008580:	d101      	bne.n	8008586 <xQueueGenericSend+0x7a>
 8008582:	2301      	movs	r3, #1
 8008584:	e000      	b.n	8008588 <xQueueGenericSend+0x7c>
 8008586:	2300      	movs	r3, #0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10c      	bne.n	80085a6 <xQueueGenericSend+0x9a>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008590:	b672      	cpsid	i
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	b662      	cpsie	i
 80085a0:	623b      	str	r3, [r7, #32]
}
 80085a2:	bf00      	nop
 80085a4:	e7fe      	b.n	80085a4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085a6:	f001 fb9b 	bl	8009ce0 <xTaskGetSchedulerState>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d102      	bne.n	80085b6 <xQueueGenericSend+0xaa>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d101      	bne.n	80085ba <xQueueGenericSend+0xae>
 80085b6:	2301      	movs	r3, #1
 80085b8:	e000      	b.n	80085bc <xQueueGenericSend+0xb0>
 80085ba:	2300      	movs	r3, #0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d10c      	bne.n	80085da <xQueueGenericSend+0xce>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	b672      	cpsid	i
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	b662      	cpsie	i
 80085d4:	61fb      	str	r3, [r7, #28]
}
 80085d6:	bf00      	nop
 80085d8:	e7fe      	b.n	80085d8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085da:	f001 fecf 	bl	800a37c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d302      	bcc.n	80085f0 <xQueueGenericSend+0xe4>
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d129      	bne.n	8008644 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	68b9      	ldr	r1, [r7, #8]
 80085f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f6:	f000 fc5d 	bl	8008eb4 <prvCopyDataToQueue>
 80085fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008600:	2b00      	cmp	r3, #0
 8008602:	d010      	beq.n	8008626 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008606:	3324      	adds	r3, #36	; 0x24
 8008608:	4618      	mov	r0, r3
 800860a:	f001 f9a5 	bl	8009958 <xTaskRemoveFromEventList>
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d013      	beq.n	800863c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008614:	4b3f      	ldr	r3, [pc, #252]	; (8008714 <xQueueGenericSend+0x208>)
 8008616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	f3bf 8f6f 	isb	sy
 8008624:	e00a      	b.n	800863c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800862c:	4b39      	ldr	r3, [pc, #228]	; (8008714 <xQueueGenericSend+0x208>)
 800862e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800863c:	f001 fed2 	bl	800a3e4 <vPortExitCritical>
				return pdPASS;
 8008640:	2301      	movs	r3, #1
 8008642:	e063      	b.n	800870c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800864a:	f001 fecb 	bl	800a3e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800864e:	2300      	movs	r3, #0
 8008650:	e05c      	b.n	800870c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008658:	f107 0314 	add.w	r3, r7, #20
 800865c:	4618      	mov	r0, r3
 800865e:	f001 f9df 	bl	8009a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008662:	2301      	movs	r3, #1
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008666:	f001 febd 	bl	800a3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800866a:	f000 ff69 	bl	8009540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800866e:	f001 fe85 	bl	800a37c <vPortEnterCritical>
 8008672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008678:	b25b      	sxtb	r3, r3
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	d103      	bne.n	8008688 <xQueueGenericSend+0x17c>
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800868e:	b25b      	sxtb	r3, r3
 8008690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008694:	d103      	bne.n	800869e <xQueueGenericSend+0x192>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	2200      	movs	r2, #0
 800869a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800869e:	f001 fea1 	bl	800a3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086a2:	1d3a      	adds	r2, r7, #4
 80086a4:	f107 0314 	add.w	r3, r7, #20
 80086a8:	4611      	mov	r1, r2
 80086aa:	4618      	mov	r0, r3
 80086ac:	f001 f9ce 	bl	8009a4c <xTaskCheckForTimeOut>
 80086b0:	4603      	mov	r3, r0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d124      	bne.n	8008700 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80086b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086b8:	f000 fcf4 	bl	80090a4 <prvIsQueueFull>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d018      	beq.n	80086f4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	3310      	adds	r3, #16
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	4611      	mov	r1, r2
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 f91e 	bl	800990c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80086d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086d2:	f000 fc7f 	bl	8008fd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80086d6:	f000 ff41 	bl	800955c <xTaskResumeAll>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	f47f af7c 	bne.w	80085da <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80086e2:	4b0c      	ldr	r3, [pc, #48]	; (8008714 <xQueueGenericSend+0x208>)
 80086e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	e772      	b.n	80085da <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80086f6:	f000 fc6d 	bl	8008fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086fa:	f000 ff2f 	bl	800955c <xTaskResumeAll>
 80086fe:	e76c      	b.n	80085da <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008702:	f000 fc67 	bl	8008fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008706:	f000 ff29 	bl	800955c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800870a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800870c:	4618      	mov	r0, r3
 800870e:	3738      	adds	r7, #56	; 0x38
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	e000ed04 	.word	0xe000ed04

08008718 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08e      	sub	sp, #56	; 0x38
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800872a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10c      	bne.n	800874a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008734:	b672      	cpsid	i
 8008736:	f383 8811 	msr	BASEPRI, r3
 800873a:	f3bf 8f6f 	isb	sy
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	b662      	cpsie	i
 8008744:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008746:	bf00      	nop
 8008748:	e7fe      	b.n	8008748 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d103      	bne.n	8008758 <xQueueGenericSendFromISR+0x40>
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	2b00      	cmp	r3, #0
 8008756:	d101      	bne.n	800875c <xQueueGenericSendFromISR+0x44>
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <xQueueGenericSendFromISR+0x46>
 800875c:	2300      	movs	r3, #0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10c      	bne.n	800877c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	b672      	cpsid	i
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	b662      	cpsie	i
 8008776:	623b      	str	r3, [r7, #32]
}
 8008778:	bf00      	nop
 800877a:	e7fe      	b.n	800877a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	2b02      	cmp	r3, #2
 8008780:	d103      	bne.n	800878a <xQueueGenericSendFromISR+0x72>
 8008782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <xQueueGenericSendFromISR+0x76>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <xQueueGenericSendFromISR+0x78>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d10c      	bne.n	80087ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	b672      	cpsid	i
 800879a:	f383 8811 	msr	BASEPRI, r3
 800879e:	f3bf 8f6f 	isb	sy
 80087a2:	f3bf 8f4f 	dsb	sy
 80087a6:	b662      	cpsie	i
 80087a8:	61fb      	str	r3, [r7, #28]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087ae:	f001 fecd 	bl	800a54c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80087b2:	f3ef 8211 	mrs	r2, BASEPRI
 80087b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ba:	b672      	cpsid	i
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	b662      	cpsie	i
 80087ca:	61ba      	str	r2, [r7, #24]
 80087cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80087ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80087d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087da:	429a      	cmp	r2, r3
 80087dc:	d302      	bcc.n	80087e4 <xQueueGenericSendFromISR+0xcc>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	2b02      	cmp	r3, #2
 80087e2:	d12c      	bne.n	800883e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	68b9      	ldr	r1, [r7, #8]
 80087f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087f4:	f000 fb5e 	bl	8008eb4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80087fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008800:	d112      	bne.n	8008828 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008806:	2b00      	cmp	r3, #0
 8008808:	d016      	beq.n	8008838 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800880a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880c:	3324      	adds	r3, #36	; 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	f001 f8a2 	bl	8009958 <xTaskRemoveFromEventList>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00e      	beq.n	8008838 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00b      	beq.n	8008838 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	601a      	str	r2, [r3, #0]
 8008826:	e007      	b.n	8008838 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008828:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800882c:	3301      	adds	r3, #1
 800882e:	b2db      	uxtb	r3, r3
 8008830:	b25a      	sxtb	r2, r3
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008838:	2301      	movs	r3, #1
 800883a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800883c:	e001      	b.n	8008842 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800883e:	2300      	movs	r3, #0
 8008840:	637b      	str	r3, [r7, #52]	; 0x34
 8008842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008844:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800884c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800884e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008850:	4618      	mov	r0, r3
 8008852:	3738      	adds	r7, #56	; 0x38
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}

08008858 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b08e      	sub	sp, #56	; 0x38
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
 8008860:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	2b00      	cmp	r3, #0
 800886a:	d10c      	bne.n	8008886 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800886c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008870:	b672      	cpsid	i
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	b662      	cpsie	i
 8008880:	623b      	str	r3, [r7, #32]
}
 8008882:	bf00      	nop
 8008884:	e7fe      	b.n	8008884 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00c      	beq.n	80088a8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008892:	b672      	cpsid	i
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	b662      	cpsie	i
 80088a2:	61fb      	str	r3, [r7, #28]
}
 80088a4:	bf00      	nop
 80088a6:	e7fe      	b.n	80088a6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d103      	bne.n	80088b8 <xQueueGiveFromISR+0x60>
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <xQueueGiveFromISR+0x64>
 80088b8:	2301      	movs	r3, #1
 80088ba:	e000      	b.n	80088be <xQueueGiveFromISR+0x66>
 80088bc:	2300      	movs	r3, #0
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10c      	bne.n	80088dc <xQueueGiveFromISR+0x84>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	b672      	cpsid	i
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	b662      	cpsie	i
 80088d6:	61bb      	str	r3, [r7, #24]
}
 80088d8:	bf00      	nop
 80088da:	e7fe      	b.n	80088da <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088dc:	f001 fe36 	bl	800a54c <vPortValidateInterruptPriority>
	__asm volatile
 80088e0:	f3ef 8211 	mrs	r2, BASEPRI
 80088e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e8:	b672      	cpsid	i
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	b662      	cpsie	i
 80088f8:	617a      	str	r2, [r7, #20]
 80088fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80088fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008904:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800890a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800890c:	429a      	cmp	r2, r3
 800890e:	d22b      	bcs.n	8008968 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008922:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d112      	bne.n	8008952 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800892c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	2b00      	cmp	r3, #0
 8008932:	d016      	beq.n	8008962 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008936:	3324      	adds	r3, #36	; 0x24
 8008938:	4618      	mov	r0, r3
 800893a:	f001 f80d 	bl	8009958 <xTaskRemoveFromEventList>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d00e      	beq.n	8008962 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2201      	movs	r2, #1
 800894e:	601a      	str	r2, [r3, #0]
 8008950:	e007      	b.n	8008962 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008956:	3301      	adds	r3, #1
 8008958:	b2db      	uxtb	r3, r3
 800895a:	b25a      	sxtb	r2, r3
 800895c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008962:	2301      	movs	r3, #1
 8008964:	637b      	str	r3, [r7, #52]	; 0x34
 8008966:	e001      	b.n	800896c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008968:	2300      	movs	r3, #0
 800896a:	637b      	str	r3, [r7, #52]	; 0x34
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f383 8811 	msr	BASEPRI, r3
}
 8008976:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800897a:	4618      	mov	r0, r3
 800897c:	3738      	adds	r7, #56	; 0x38
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	; 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008990:	2300      	movs	r3, #0
 8008992:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10c      	bne.n	80089b8 <xQueueReceive+0x34>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	b672      	cpsid	i
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	b662      	cpsie	i
 80089b2:	623b      	str	r3, [r7, #32]
}
 80089b4:	bf00      	nop
 80089b6:	e7fe      	b.n	80089b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d103      	bne.n	80089c6 <xQueueReceive+0x42>
 80089be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <xQueueReceive+0x46>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e000      	b.n	80089cc <xQueueReceive+0x48>
 80089ca:	2300      	movs	r3, #0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10c      	bne.n	80089ea <xQueueReceive+0x66>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	b672      	cpsid	i
 80089d6:	f383 8811 	msr	BASEPRI, r3
 80089da:	f3bf 8f6f 	isb	sy
 80089de:	f3bf 8f4f 	dsb	sy
 80089e2:	b662      	cpsie	i
 80089e4:	61fb      	str	r3, [r7, #28]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ea:	f001 f979 	bl	8009ce0 <xTaskGetSchedulerState>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d102      	bne.n	80089fa <xQueueReceive+0x76>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d101      	bne.n	80089fe <xQueueReceive+0x7a>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <xQueueReceive+0x7c>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d10c      	bne.n	8008a1e <xQueueReceive+0x9a>
	__asm volatile
 8008a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a08:	b672      	cpsid	i
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	b662      	cpsie	i
 8008a18:	61bb      	str	r3, [r7, #24]
}
 8008a1a:	bf00      	nop
 8008a1c:	e7fe      	b.n	8008a1c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008a1e:	f001 fcad 	bl	800a37c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d01f      	beq.n	8008a6e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a2e:	68b9      	ldr	r1, [r7, #8]
 8008a30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a32:	f000 faa9 	bl	8008f88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	1e5a      	subs	r2, r3, #1
 8008a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00f      	beq.n	8008a66 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a48:	3310      	adds	r3, #16
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 ff84 	bl	8009958 <xTaskRemoveFromEventList>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d007      	beq.n	8008a66 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a56:	4b3d      	ldr	r3, [pc, #244]	; (8008b4c <xQueueReceive+0x1c8>)
 8008a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a5c:	601a      	str	r2, [r3, #0]
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a66:	f001 fcbd 	bl	800a3e4 <vPortExitCritical>
				return pdPASS;
 8008a6a:	2301      	movs	r3, #1
 8008a6c:	e069      	b.n	8008b42 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d103      	bne.n	8008a7c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a74:	f001 fcb6 	bl	800a3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e062      	b.n	8008b42 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d106      	bne.n	8008a90 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a82:	f107 0310 	add.w	r3, r7, #16
 8008a86:	4618      	mov	r0, r3
 8008a88:	f000 ffca 	bl	8009a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a90:	f001 fca8 	bl	800a3e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a94:	f000 fd54 	bl	8009540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a98:	f001 fc70 	bl	800a37c <vPortEnterCritical>
 8008a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008aa2:	b25b      	sxtb	r3, r3
 8008aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aa8:	d103      	bne.n	8008ab2 <xQueueReceive+0x12e>
 8008aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ab8:	b25b      	sxtb	r3, r3
 8008aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008abe:	d103      	bne.n	8008ac8 <xQueueReceive+0x144>
 8008ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ac8:	f001 fc8c 	bl	800a3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008acc:	1d3a      	adds	r2, r7, #4
 8008ace:	f107 0310 	add.w	r3, r7, #16
 8008ad2:	4611      	mov	r1, r2
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f000 ffb9 	bl	8009a4c <xTaskCheckForTimeOut>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d123      	bne.n	8008b28 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ae2:	f000 fac9 	bl	8009078 <prvIsQueueEmpty>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d017      	beq.n	8008b1c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aee:	3324      	adds	r3, #36	; 0x24
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	4611      	mov	r1, r2
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 ff09 	bl	800990c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008afa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008afc:	f000 fa6a 	bl	8008fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b00:	f000 fd2c 	bl	800955c <xTaskResumeAll>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d189      	bne.n	8008a1e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008b0a:	4b10      	ldr	r3, [pc, #64]	; (8008b4c <xQueueReceive+0x1c8>)
 8008b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	e780      	b.n	8008a1e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1e:	f000 fa59 	bl	8008fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b22:	f000 fd1b 	bl	800955c <xTaskResumeAll>
 8008b26:	e77a      	b.n	8008a1e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b2a:	f000 fa53 	bl	8008fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008b2e:	f000 fd15 	bl	800955c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b34:	f000 faa0 	bl	8009078 <prvIsQueueEmpty>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	f43f af6f 	beq.w	8008a1e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3730      	adds	r7, #48	; 0x30
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	e000ed04 	.word	0xe000ed04

08008b50 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08e      	sub	sp, #56	; 0x38
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10c      	bne.n	8008b86 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b70:	b672      	cpsid	i
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	b662      	cpsie	i
 8008b80:	623b      	str	r3, [r7, #32]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d00c      	beq.n	8008ba8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b92:	b672      	cpsid	i
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	b662      	cpsie	i
 8008ba2:	61fb      	str	r3, [r7, #28]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ba8:	f001 f89a 	bl	8009ce0 <xTaskGetSchedulerState>
 8008bac:	4603      	mov	r3, r0
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d102      	bne.n	8008bb8 <xQueueSemaphoreTake+0x68>
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <xQueueSemaphoreTake+0x6c>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	e000      	b.n	8008bbe <xQueueSemaphoreTake+0x6e>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10c      	bne.n	8008bdc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8008bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc6:	b672      	cpsid	i
 8008bc8:	f383 8811 	msr	BASEPRI, r3
 8008bcc:	f3bf 8f6f 	isb	sy
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	b662      	cpsie	i
 8008bd6:	61bb      	str	r3, [r7, #24]
}
 8008bd8:	bf00      	nop
 8008bda:	e7fe      	b.n	8008bda <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008bdc:	f001 fbce 	bl	800a37c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d024      	beq.n	8008c36 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bee:	1e5a      	subs	r2, r3, #1
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d104      	bne.n	8008c06 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008bfc:	f001 fa36 	bl	800a06c <pvTaskIncrementMutexHeldCount>
 8008c00:	4602      	mov	r2, r0
 8008c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00f      	beq.n	8008c2e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c10:	3310      	adds	r3, #16
 8008c12:	4618      	mov	r0, r3
 8008c14:	f000 fea0 	bl	8009958 <xTaskRemoveFromEventList>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d007      	beq.n	8008c2e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008c1e:	4b55      	ldr	r3, [pc, #340]	; (8008d74 <xQueueSemaphoreTake+0x224>)
 8008c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c24:	601a      	str	r2, [r3, #0]
 8008c26:	f3bf 8f4f 	dsb	sy
 8008c2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008c2e:	f001 fbd9 	bl	800a3e4 <vPortExitCritical>
				return pdPASS;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e099      	b.n	8008d6a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d113      	bne.n	8008c64 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00c      	beq.n	8008c5c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8008c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c46:	b672      	cpsid	i
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	b662      	cpsie	i
 8008c56:	617b      	str	r3, [r7, #20]
}
 8008c58:	bf00      	nop
 8008c5a:	e7fe      	b.n	8008c5a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008c5c:	f001 fbc2 	bl	800a3e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008c60:	2300      	movs	r3, #0
 8008c62:	e082      	b.n	8008d6a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008c6a:	f107 030c 	add.w	r3, r7, #12
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f000 fed6 	bl	8009a20 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008c74:	2301      	movs	r3, #1
 8008c76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008c78:	f001 fbb4 	bl	800a3e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008c7c:	f000 fc60 	bl	8009540 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008c80:	f001 fb7c 	bl	800a37c <vPortEnterCritical>
 8008c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c8a:	b25b      	sxtb	r3, r3
 8008c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c90:	d103      	bne.n	8008c9a <xQueueSemaphoreTake+0x14a>
 8008c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ca0:	b25b      	sxtb	r3, r3
 8008ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ca6:	d103      	bne.n	8008cb0 <xQueueSemaphoreTake+0x160>
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cb0:	f001 fb98 	bl	800a3e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008cb4:	463a      	mov	r2, r7
 8008cb6:	f107 030c 	add.w	r3, r7, #12
 8008cba:	4611      	mov	r1, r2
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f000 fec5 	bl	8009a4c <xTaskCheckForTimeOut>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d132      	bne.n	8008d2e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008cca:	f000 f9d5 	bl	8009078 <prvIsQueueEmpty>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d026      	beq.n	8008d22 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d109      	bne.n	8008cf0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8008cdc:	f001 fb4e 	bl	800a37c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f001 f819 	bl	8009d1c <xTaskPriorityInherit>
 8008cea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008cec:	f001 fb7a 	bl	800a3e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	3324      	adds	r3, #36	; 0x24
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	4611      	mov	r1, r2
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fe07 	bl	800990c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008cfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d00:	f000 f968 	bl	8008fd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008d04:	f000 fc2a 	bl	800955c <xTaskResumeAll>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f47f af66 	bne.w	8008bdc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008d10:	4b18      	ldr	r3, [pc, #96]	; (8008d74 <xQueueSemaphoreTake+0x224>)
 8008d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d16:	601a      	str	r2, [r3, #0]
 8008d18:	f3bf 8f4f 	dsb	sy
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	e75c      	b.n	8008bdc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008d22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d24:	f000 f956 	bl	8008fd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d28:	f000 fc18 	bl	800955c <xTaskResumeAll>
 8008d2c:	e756      	b.n	8008bdc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d30:	f000 f950 	bl	8008fd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008d34:	f000 fc12 	bl	800955c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d3a:	f000 f99d 	bl	8009078 <prvIsQueueEmpty>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f43f af4b 	beq.w	8008bdc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d00d      	beq.n	8008d68 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008d4c:	f001 fb16 	bl	800a37c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008d50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008d52:	f000 f897 	bl	8008e84 <prvGetDisinheritPriorityAfterTimeout>
 8008d56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f001 f8e6 	bl	8009f30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008d64:	f001 fb3e 	bl	800a3e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008d68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3738      	adds	r7, #56	; 0x38
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	e000ed04 	.word	0xe000ed04

08008d78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08e      	sub	sp, #56	; 0x38
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d10c      	bne.n	8008da8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d92:	b672      	cpsid	i
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	b662      	cpsie	i
 8008da2:	623b      	str	r3, [r7, #32]
}
 8008da4:	bf00      	nop
 8008da6:	e7fe      	b.n	8008da6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d103      	bne.n	8008db6 <xQueueReceiveFromISR+0x3e>
 8008dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d101      	bne.n	8008dba <xQueueReceiveFromISR+0x42>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueReceiveFromISR+0x44>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10c      	bne.n	8008dda <xQueueReceiveFromISR+0x62>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	b672      	cpsid	i
 8008dc6:	f383 8811 	msr	BASEPRI, r3
 8008dca:	f3bf 8f6f 	isb	sy
 8008dce:	f3bf 8f4f 	dsb	sy
 8008dd2:	b662      	cpsie	i
 8008dd4:	61fb      	str	r3, [r7, #28]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dda:	f001 fbb7 	bl	800a54c <vPortValidateInterruptPriority>
	__asm volatile
 8008dde:	f3ef 8211 	mrs	r2, BASEPRI
 8008de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de6:	b672      	cpsid	i
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	b662      	cpsie	i
 8008df6:	61ba      	str	r2, [r7, #24]
 8008df8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008dfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d02f      	beq.n	8008e6a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e18:	f000 f8b6 	bl	8008f88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e1e:	1e5a      	subs	r2, r3, #1
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008e24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e2c:	d112      	bne.n	8008e54 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d016      	beq.n	8008e64 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	3310      	adds	r3, #16
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fd8c 	bl	8009958 <xTaskRemoveFromEventList>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d00e      	beq.n	8008e64 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d00b      	beq.n	8008e64 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	601a      	str	r2, [r3, #0]
 8008e52:	e007      	b.n	8008e64 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008e58:	3301      	adds	r3, #1
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	b25a      	sxtb	r2, r3
 8008e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008e64:	2301      	movs	r3, #1
 8008e66:	637b      	str	r3, [r7, #52]	; 0x34
 8008e68:	e001      	b.n	8008e6e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	637b      	str	r3, [r7, #52]	; 0x34
 8008e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f383 8811 	msr	BASEPRI, r3
}
 8008e78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3738      	adds	r7, #56	; 0x38
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d006      	beq.n	8008ea2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f1c3 0307 	rsb	r3, r3, #7
 8008e9e:	60fb      	str	r3, [r7, #12]
 8008ea0:	e001      	b.n	8008ea6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
	}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3714      	adds	r7, #20
 8008eac:	46bd      	mov	sp, r7
 8008eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb2:	4770      	bx	lr

08008eb4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	60f8      	str	r0, [r7, #12]
 8008ebc:	60b9      	str	r1, [r7, #8]
 8008ebe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10d      	bne.n	8008eee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d14d      	bne.n	8008f76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f000 ff9c 	bl	8009e1c <xTaskPriorityDisinherit>
 8008ee4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	e043      	b.n	8008f76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d119      	bne.n	8008f28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	6858      	ldr	r0, [r3, #4]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efc:	461a      	mov	r2, r3
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	f010 fc62 	bl	80197c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	685a      	ldr	r2, [r3, #4]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0c:	441a      	add	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d32b      	bcc.n	8008f76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]
 8008f26:	e026      	b.n	8008f76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	68d8      	ldr	r0, [r3, #12]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f30:	461a      	mov	r2, r3
 8008f32:	68b9      	ldr	r1, [r7, #8]
 8008f34:	f010 fc48 	bl	80197c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f40:	425b      	negs	r3, r3
 8008f42:	441a      	add	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	68da      	ldr	r2, [r3, #12]
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d207      	bcs.n	8008f64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	689a      	ldr	r2, [r3, #8]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5c:	425b      	negs	r3, r3
 8008f5e:	441a      	add	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b02      	cmp	r3, #2
 8008f68:	d105      	bne.n	8008f76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	3b01      	subs	r3, #1
 8008f74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	1c5a      	adds	r2, r3, #1
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008f7e:	697b      	ldr	r3, [r7, #20]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d018      	beq.n	8008fcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68da      	ldr	r2, [r3, #12]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa2:	441a      	add	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d303      	bcc.n	8008fbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68d9      	ldr	r1, [r3, #12]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6838      	ldr	r0, [r7, #0]
 8008fc8:	f010 fbfe 	bl	80197c8 <memcpy>
	}
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b084      	sub	sp, #16
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008fdc:	f001 f9ce 	bl	800a37c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008fe6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008fe8:	e011      	b.n	800900e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d012      	beq.n	8009018 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3324      	adds	r3, #36	; 0x24
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f000 fcae 	bl	8009958 <xTaskRemoveFromEventList>
 8008ffc:	4603      	mov	r3, r0
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d001      	beq.n	8009006 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009002:	f000 fd89 	bl	8009b18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
 8009008:	3b01      	subs	r3, #1
 800900a:	b2db      	uxtb	r3, r3
 800900c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800900e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009012:	2b00      	cmp	r3, #0
 8009014:	dce9      	bgt.n	8008fea <prvUnlockQueue+0x16>
 8009016:	e000      	b.n	800901a <prvUnlockQueue+0x46>
					break;
 8009018:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	22ff      	movs	r2, #255	; 0xff
 800901e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009022:	f001 f9df 	bl	800a3e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009026:	f001 f9a9 	bl	800a37c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009030:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009032:	e011      	b.n	8009058 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d012      	beq.n	8009062 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	3310      	adds	r3, #16
 8009040:	4618      	mov	r0, r3
 8009042:	f000 fc89 	bl	8009958 <xTaskRemoveFromEventList>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800904c:	f000 fd64 	bl	8009b18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	3b01      	subs	r3, #1
 8009054:	b2db      	uxtb	r3, r3
 8009056:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800905c:	2b00      	cmp	r3, #0
 800905e:	dce9      	bgt.n	8009034 <prvUnlockQueue+0x60>
 8009060:	e000      	b.n	8009064 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009062:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	22ff      	movs	r2, #255	; 0xff
 8009068:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800906c:	f001 f9ba 	bl	800a3e4 <vPortExitCritical>
}
 8009070:	bf00      	nop
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009080:	f001 f97c 	bl	800a37c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	2b00      	cmp	r3, #0
 800908a:	d102      	bne.n	8009092 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800908c:	2301      	movs	r3, #1
 800908e:	60fb      	str	r3, [r7, #12]
 8009090:	e001      	b.n	8009096 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009096:	f001 f9a5 	bl	800a3e4 <vPortExitCritical>

	return xReturn;
 800909a:	68fb      	ldr	r3, [r7, #12]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3710      	adds	r7, #16
 80090a0:	46bd      	mov	sp, r7
 80090a2:	bd80      	pop	{r7, pc}

080090a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80090ac:	f001 f966 	bl	800a37c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d102      	bne.n	80090c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	60fb      	str	r3, [r7, #12]
 80090c0:	e001      	b.n	80090c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80090c6:	f001 f98d 	bl	800a3e4 <vPortExitCritical>

	return xReturn;
 80090ca:	68fb      	ldr	r3, [r7, #12]
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3710      	adds	r7, #16
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b08e      	sub	sp, #56	; 0x38
 80090d8:	af04      	add	r7, sp, #16
 80090da:	60f8      	str	r0, [r7, #12]
 80090dc:	60b9      	str	r1, [r7, #8]
 80090de:	607a      	str	r2, [r7, #4]
 80090e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80090e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d10c      	bne.n	8009102 <xTaskCreateStatic+0x2e>
	__asm volatile
 80090e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ec:	b672      	cpsid	i
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	b662      	cpsie	i
 80090fc:	623b      	str	r3, [r7, #32]
}
 80090fe:	bf00      	nop
 8009100:	e7fe      	b.n	8009100 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10c      	bne.n	8009122 <xTaskCreateStatic+0x4e>
	__asm volatile
 8009108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910c:	b672      	cpsid	i
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	b662      	cpsie	i
 800911c:	61fb      	str	r3, [r7, #28]
}
 800911e:	bf00      	nop
 8009120:	e7fe      	b.n	8009120 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009122:	2354      	movs	r3, #84	; 0x54
 8009124:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	2b54      	cmp	r3, #84	; 0x54
 800912a:	d00c      	beq.n	8009146 <xTaskCreateStatic+0x72>
	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	b672      	cpsid	i
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	b662      	cpsie	i
 8009140:	61bb      	str	r3, [r7, #24]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009146:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01e      	beq.n	800918c <xTaskCreateStatic+0xb8>
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	2b00      	cmp	r3, #0
 8009152:	d01b      	beq.n	800918c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009156:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800915c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	2202      	movs	r2, #2
 8009162:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009166:	2300      	movs	r3, #0
 8009168:	9303      	str	r3, [sp, #12]
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	f107 0314 	add.w	r3, r7, #20
 8009172:	9301      	str	r3, [sp, #4]
 8009174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	68b9      	ldr	r1, [r7, #8]
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 f850 	bl	8009224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009184:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009186:	f000 f8d7 	bl	8009338 <prvAddNewTaskToReadyList>
 800918a:	e001      	b.n	8009190 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009190:	697b      	ldr	r3, [r7, #20]
	}
 8009192:	4618      	mov	r0, r3
 8009194:	3728      	adds	r7, #40	; 0x28
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800919a:	b580      	push	{r7, lr}
 800919c:	b08c      	sub	sp, #48	; 0x30
 800919e:	af04      	add	r7, sp, #16
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	60b9      	str	r1, [r7, #8]
 80091a4:	603b      	str	r3, [r7, #0]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80091aa:	88fb      	ldrh	r3, [r7, #6]
 80091ac:	009b      	lsls	r3, r3, #2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f001 fa10 	bl	800a5d4 <pvPortMalloc>
 80091b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d00e      	beq.n	80091da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80091bc:	2054      	movs	r0, #84	; 0x54
 80091be:	f001 fa09 	bl	800a5d4 <pvPortMalloc>
 80091c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d003      	beq.n	80091d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80091ca:	69fb      	ldr	r3, [r7, #28]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	631a      	str	r2, [r3, #48]	; 0x30
 80091d0:	e005      	b.n	80091de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80091d2:	6978      	ldr	r0, [r7, #20]
 80091d4:	f001 fac8 	bl	800a768 <vPortFree>
 80091d8:	e001      	b.n	80091de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80091da:	2300      	movs	r3, #0
 80091dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d017      	beq.n	8009214 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80091ec:	88fa      	ldrh	r2, [r7, #6]
 80091ee:	2300      	movs	r3, #0
 80091f0:	9303      	str	r3, [sp, #12]
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	9302      	str	r3, [sp, #8]
 80091f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	68b9      	ldr	r1, [r7, #8]
 8009202:	68f8      	ldr	r0, [r7, #12]
 8009204:	f000 f80e 	bl	8009224 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009208:	69f8      	ldr	r0, [r7, #28]
 800920a:	f000 f895 	bl	8009338 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800920e:	2301      	movs	r3, #1
 8009210:	61bb      	str	r3, [r7, #24]
 8009212:	e002      	b.n	800921a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009214:	f04f 33ff 	mov.w	r3, #4294967295
 8009218:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800921a:	69bb      	ldr	r3, [r7, #24]
	}
 800921c:	4618      	mov	r0, r3
 800921e:	3720      	adds	r7, #32
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af00      	add	r7, sp, #0
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	607a      	str	r2, [r7, #4]
 8009230:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800923c:	440b      	add	r3, r1
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	4413      	add	r3, r2
 8009242:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009244:	69bb      	ldr	r3, [r7, #24]
 8009246:	f023 0307 	bic.w	r3, r3, #7
 800924a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	2b00      	cmp	r3, #0
 8009254:	d00c      	beq.n	8009270 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8009256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925a:	b672      	cpsid	i
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	b662      	cpsie	i
 800926a:	617b      	str	r3, [r7, #20]
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d01f      	beq.n	80092b6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
 800927a:	e012      	b.n	80092a2 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800927c:	68ba      	ldr	r2, [r7, #8]
 800927e:	69fb      	ldr	r3, [r7, #28]
 8009280:	4413      	add	r3, r2
 8009282:	7819      	ldrb	r1, [r3, #0]
 8009284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009286:	69fb      	ldr	r3, [r7, #28]
 8009288:	4413      	add	r3, r2
 800928a:	3334      	adds	r3, #52	; 0x34
 800928c:	460a      	mov	r2, r1
 800928e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	4413      	add	r3, r2
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d006      	beq.n	80092aa <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800929c:	69fb      	ldr	r3, [r7, #28]
 800929e:	3301      	adds	r3, #1
 80092a0:	61fb      	str	r3, [r7, #28]
 80092a2:	69fb      	ldr	r3, [r7, #28]
 80092a4:	2b0f      	cmp	r3, #15
 80092a6:	d9e9      	bls.n	800927c <prvInitialiseNewTask+0x58>
 80092a8:	e000      	b.n	80092ac <prvInitialiseNewTask+0x88>
			{
				break;
 80092aa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092b4:	e003      	b.n	80092be <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80092b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b8:	2200      	movs	r2, #0
 80092ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80092be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c0:	2b06      	cmp	r3, #6
 80092c2:	d901      	bls.n	80092c8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80092c4:	2306      	movs	r3, #6
 80092c6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80092c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092cc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80092ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092d2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80092d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092d6:	2200      	movs	r2, #0
 80092d8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe fee6 	bl	80080b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80092e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e6:	3318      	adds	r3, #24
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7fe fee1 	bl	80080b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80092ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092f2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f6:	f1c3 0207 	rsb	r2, r3, #7
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80092fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009302:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009306:	2200      	movs	r2, #0
 8009308:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800930a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800930c:	2200      	movs	r2, #0
 800930e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	68f9      	ldr	r1, [r7, #12]
 8009316:	69b8      	ldr	r0, [r7, #24]
 8009318:	f000 ff22 	bl	800a160 <pxPortInitialiseStack>
 800931c:	4602      	mov	r2, r0
 800931e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009320:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d002      	beq.n	800932e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800932c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800932e:	bf00      	nop
 8009330:	3720      	adds	r7, #32
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
	...

08009338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b082      	sub	sp, #8
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009340:	f001 f81c 	bl	800a37c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009344:	4b2a      	ldr	r3, [pc, #168]	; (80093f0 <prvAddNewTaskToReadyList+0xb8>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	3301      	adds	r3, #1
 800934a:	4a29      	ldr	r2, [pc, #164]	; (80093f0 <prvAddNewTaskToReadyList+0xb8>)
 800934c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800934e:	4b29      	ldr	r3, [pc, #164]	; (80093f4 <prvAddNewTaskToReadyList+0xbc>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d109      	bne.n	800936a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009356:	4a27      	ldr	r2, [pc, #156]	; (80093f4 <prvAddNewTaskToReadyList+0xbc>)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800935c:	4b24      	ldr	r3, [pc, #144]	; (80093f0 <prvAddNewTaskToReadyList+0xb8>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d110      	bne.n	8009386 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009364:	f000 fbfc 	bl	8009b60 <prvInitialiseTaskLists>
 8009368:	e00d      	b.n	8009386 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800936a:	4b23      	ldr	r3, [pc, #140]	; (80093f8 <prvAddNewTaskToReadyList+0xc0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d109      	bne.n	8009386 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009372:	4b20      	ldr	r3, [pc, #128]	; (80093f4 <prvAddNewTaskToReadyList+0xbc>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937c:	429a      	cmp	r2, r3
 800937e:	d802      	bhi.n	8009386 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009380:	4a1c      	ldr	r2, [pc, #112]	; (80093f4 <prvAddNewTaskToReadyList+0xbc>)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009386:	4b1d      	ldr	r3, [pc, #116]	; (80093fc <prvAddNewTaskToReadyList+0xc4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3301      	adds	r3, #1
 800938c:	4a1b      	ldr	r2, [pc, #108]	; (80093fc <prvAddNewTaskToReadyList+0xc4>)
 800938e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009394:	2201      	movs	r2, #1
 8009396:	409a      	lsls	r2, r3
 8009398:	4b19      	ldr	r3, [pc, #100]	; (8009400 <prvAddNewTaskToReadyList+0xc8>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	4313      	orrs	r3, r2
 800939e:	4a18      	ldr	r2, [pc, #96]	; (8009400 <prvAddNewTaskToReadyList+0xc8>)
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4a15      	ldr	r2, [pc, #84]	; (8009404 <prvAddNewTaskToReadyList+0xcc>)
 80093b0:	441a      	add	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	3304      	adds	r3, #4
 80093b6:	4619      	mov	r1, r3
 80093b8:	4610      	mov	r0, r2
 80093ba:	f7fe fe86 	bl	80080ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80093be:	f001 f811 	bl	800a3e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80093c2:	4b0d      	ldr	r3, [pc, #52]	; (80093f8 <prvAddNewTaskToReadyList+0xc0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00e      	beq.n	80093e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80093ca:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <prvAddNewTaskToReadyList+0xbc>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d207      	bcs.n	80093e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80093d8:	4b0b      	ldr	r3, [pc, #44]	; (8009408 <prvAddNewTaskToReadyList+0xd0>)
 80093da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	20005704 	.word	0x20005704
 80093f4:	20005604 	.word	0x20005604
 80093f8:	20005710 	.word	0x20005710
 80093fc:	20005720 	.word	0x20005720
 8009400:	2000570c 	.word	0x2000570c
 8009404:	20005608 	.word	0x20005608
 8009408:	e000ed04 	.word	0xe000ed04

0800940c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009414:	2300      	movs	r3, #0
 8009416:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d019      	beq.n	8009452 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800941e:	4b14      	ldr	r3, [pc, #80]	; (8009470 <vTaskDelay+0x64>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00c      	beq.n	8009440 <vTaskDelay+0x34>
	__asm volatile
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	b672      	cpsid	i
 800942c:	f383 8811 	msr	BASEPRI, r3
 8009430:	f3bf 8f6f 	isb	sy
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	b662      	cpsie	i
 800943a:	60bb      	str	r3, [r7, #8]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8009440:	f000 f87e 	bl	8009540 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009444:	2100      	movs	r1, #0
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fe24 	bl	800a094 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800944c:	f000 f886 	bl	800955c <xTaskResumeAll>
 8009450:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d107      	bne.n	8009468 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8009458:	4b06      	ldr	r3, [pc, #24]	; (8009474 <vTaskDelay+0x68>)
 800945a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800945e:	601a      	str	r2, [r3, #0]
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009468:	bf00      	nop
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}
 8009470:	2000572c 	.word	0x2000572c
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b08a      	sub	sp, #40	; 0x28
 800947c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009482:	2300      	movs	r3, #0
 8009484:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009486:	463a      	mov	r2, r7
 8009488:	1d39      	adds	r1, r7, #4
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4618      	mov	r0, r3
 8009490:	f7f7 f8a4 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	9202      	str	r2, [sp, #8]
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	2300      	movs	r3, #0
 80094a0:	9300      	str	r3, [sp, #0]
 80094a2:	2300      	movs	r3, #0
 80094a4:	460a      	mov	r2, r1
 80094a6:	4920      	ldr	r1, [pc, #128]	; (8009528 <vTaskStartScheduler+0xb0>)
 80094a8:	4820      	ldr	r0, [pc, #128]	; (800952c <vTaskStartScheduler+0xb4>)
 80094aa:	f7ff fe13 	bl	80090d4 <xTaskCreateStatic>
 80094ae:	4603      	mov	r3, r0
 80094b0:	4a1f      	ldr	r2, [pc, #124]	; (8009530 <vTaskStartScheduler+0xb8>)
 80094b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80094b4:	4b1e      	ldr	r3, [pc, #120]	; (8009530 <vTaskStartScheduler+0xb8>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80094bc:	2301      	movs	r3, #1
 80094be:	617b      	str	r3, [r7, #20]
 80094c0:	e001      	b.n	80094c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d118      	bne.n	80094fe <vTaskStartScheduler+0x86>
	__asm volatile
 80094cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d0:	b672      	cpsid	i
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	b662      	cpsie	i
 80094e0:	613b      	str	r3, [r7, #16]
}
 80094e2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80094e4:	4b13      	ldr	r3, [pc, #76]	; (8009534 <vTaskStartScheduler+0xbc>)
 80094e6:	f04f 32ff 	mov.w	r2, #4294967295
 80094ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80094ec:	4b12      	ldr	r3, [pc, #72]	; (8009538 <vTaskStartScheduler+0xc0>)
 80094ee:	2201      	movs	r2, #1
 80094f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80094f2:	4b12      	ldr	r3, [pc, #72]	; (800953c <vTaskStartScheduler+0xc4>)
 80094f4:	2200      	movs	r2, #0
 80094f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80094f8:	f000 fec2 	bl	800a280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80094fc:	e010      	b.n	8009520 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d10c      	bne.n	8009520 <vTaskStartScheduler+0xa8>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950a:	b672      	cpsid	i
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	b662      	cpsie	i
 800951a:	60fb      	str	r3, [r7, #12]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <vTaskStartScheduler+0xa6>
}
 8009520:	bf00      	nop
 8009522:	3718      	adds	r7, #24
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}
 8009528:	0801a5a8 	.word	0x0801a5a8
 800952c:	08009b31 	.word	0x08009b31
 8009530:	20005728 	.word	0x20005728
 8009534:	20005724 	.word	0x20005724
 8009538:	20005710 	.word	0x20005710
 800953c:	20005708 	.word	0x20005708

08009540 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009540:	b480      	push	{r7}
 8009542:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009544:	4b04      	ldr	r3, [pc, #16]	; (8009558 <vTaskSuspendAll+0x18>)
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3301      	adds	r3, #1
 800954a:	4a03      	ldr	r2, [pc, #12]	; (8009558 <vTaskSuspendAll+0x18>)
 800954c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800954e:	bf00      	nop
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	2000572c 	.word	0x2000572c

0800955c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009566:	2300      	movs	r3, #0
 8009568:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800956a:	4b42      	ldr	r3, [pc, #264]	; (8009674 <xTaskResumeAll+0x118>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d10c      	bne.n	800958c <xTaskResumeAll+0x30>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009576:	b672      	cpsid	i
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	b662      	cpsie	i
 8009586:	603b      	str	r3, [r7, #0]
}
 8009588:	bf00      	nop
 800958a:	e7fe      	b.n	800958a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800958c:	f000 fef6 	bl	800a37c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009590:	4b38      	ldr	r3, [pc, #224]	; (8009674 <xTaskResumeAll+0x118>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3b01      	subs	r3, #1
 8009596:	4a37      	ldr	r2, [pc, #220]	; (8009674 <xTaskResumeAll+0x118>)
 8009598:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959a:	4b36      	ldr	r3, [pc, #216]	; (8009674 <xTaskResumeAll+0x118>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d161      	bne.n	8009666 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80095a2:	4b35      	ldr	r3, [pc, #212]	; (8009678 <xTaskResumeAll+0x11c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d05d      	beq.n	8009666 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095aa:	e02e      	b.n	800960a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095ac:	4b33      	ldr	r3, [pc, #204]	; (800967c <xTaskResumeAll+0x120>)
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3318      	adds	r3, #24
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7fe fde3 	bl	8008184 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	3304      	adds	r3, #4
 80095c2:	4618      	mov	r0, r3
 80095c4:	f7fe fdde 	bl	8008184 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095cc:	2201      	movs	r2, #1
 80095ce:	409a      	lsls	r2, r3
 80095d0:	4b2b      	ldr	r3, [pc, #172]	; (8009680 <xTaskResumeAll+0x124>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	4a2a      	ldr	r2, [pc, #168]	; (8009680 <xTaskResumeAll+0x124>)
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4a27      	ldr	r2, [pc, #156]	; (8009684 <xTaskResumeAll+0x128>)
 80095e8:	441a      	add	r2, r3
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	3304      	adds	r3, #4
 80095ee:	4619      	mov	r1, r3
 80095f0:	4610      	mov	r0, r2
 80095f2:	f7fe fd6a 	bl	80080ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fa:	4b23      	ldr	r3, [pc, #140]	; (8009688 <xTaskResumeAll+0x12c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009600:	429a      	cmp	r2, r3
 8009602:	d302      	bcc.n	800960a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009604:	4b21      	ldr	r3, [pc, #132]	; (800968c <xTaskResumeAll+0x130>)
 8009606:	2201      	movs	r2, #1
 8009608:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800960a:	4b1c      	ldr	r3, [pc, #112]	; (800967c <xTaskResumeAll+0x120>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1cc      	bne.n	80095ac <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d001      	beq.n	800961c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009618:	f000 fb42 	bl	8009ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800961c:	4b1c      	ldr	r3, [pc, #112]	; (8009690 <xTaskResumeAll+0x134>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d010      	beq.n	800964a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009628:	f000 f858 	bl	80096dc <xTaskIncrementTick>
 800962c:	4603      	mov	r3, r0
 800962e:	2b00      	cmp	r3, #0
 8009630:	d002      	beq.n	8009638 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009632:	4b16      	ldr	r3, [pc, #88]	; (800968c <xTaskResumeAll+0x130>)
 8009634:	2201      	movs	r2, #1
 8009636:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3b01      	subs	r3, #1
 800963c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1f1      	bne.n	8009628 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8009644:	4b12      	ldr	r3, [pc, #72]	; (8009690 <xTaskResumeAll+0x134>)
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800964a:	4b10      	ldr	r3, [pc, #64]	; (800968c <xTaskResumeAll+0x130>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d009      	beq.n	8009666 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009652:	2301      	movs	r3, #1
 8009654:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009656:	4b0f      	ldr	r3, [pc, #60]	; (8009694 <xTaskResumeAll+0x138>)
 8009658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965c:	601a      	str	r2, [r3, #0]
 800965e:	f3bf 8f4f 	dsb	sy
 8009662:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009666:	f000 febd 	bl	800a3e4 <vPortExitCritical>

	return xAlreadyYielded;
 800966a:	68bb      	ldr	r3, [r7, #8]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	2000572c 	.word	0x2000572c
 8009678:	20005704 	.word	0x20005704
 800967c:	200056c4 	.word	0x200056c4
 8009680:	2000570c 	.word	0x2000570c
 8009684:	20005608 	.word	0x20005608
 8009688:	20005604 	.word	0x20005604
 800968c:	20005718 	.word	0x20005718
 8009690:	20005714 	.word	0x20005714
 8009694:	e000ed04 	.word	0xe000ed04

08009698 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <xTaskGetTickCount+0x1c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80096a4:	687b      	ldr	r3, [r7, #4]
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	20005708 	.word	0x20005708

080096b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80096be:	f000 ff45 	bl	800a54c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80096c2:	2300      	movs	r3, #0
 80096c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80096c6:	4b04      	ldr	r3, [pc, #16]	; (80096d8 <xTaskGetTickCountFromISR+0x20>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096cc:	683b      	ldr	r3, [r7, #0]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20005708 	.word	0x20005708

080096dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b086      	sub	sp, #24
 80096e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096e6:	4b4f      	ldr	r3, [pc, #316]	; (8009824 <xTaskIncrementTick+0x148>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f040 808a 	bne.w	8009804 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80096f0:	4b4d      	ldr	r3, [pc, #308]	; (8009828 <xTaskIncrementTick+0x14c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	3301      	adds	r3, #1
 80096f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80096f8:	4a4b      	ldr	r2, [pc, #300]	; (8009828 <xTaskIncrementTick+0x14c>)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d122      	bne.n	800974a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8009704:	4b49      	ldr	r3, [pc, #292]	; (800982c <xTaskIncrementTick+0x150>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00c      	beq.n	8009728 <xTaskIncrementTick+0x4c>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009712:	b672      	cpsid	i
 8009714:	f383 8811 	msr	BASEPRI, r3
 8009718:	f3bf 8f6f 	isb	sy
 800971c:	f3bf 8f4f 	dsb	sy
 8009720:	b662      	cpsie	i
 8009722:	603b      	str	r3, [r7, #0]
}
 8009724:	bf00      	nop
 8009726:	e7fe      	b.n	8009726 <xTaskIncrementTick+0x4a>
 8009728:	4b40      	ldr	r3, [pc, #256]	; (800982c <xTaskIncrementTick+0x150>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	60fb      	str	r3, [r7, #12]
 800972e:	4b40      	ldr	r3, [pc, #256]	; (8009830 <xTaskIncrementTick+0x154>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a3e      	ldr	r2, [pc, #248]	; (800982c <xTaskIncrementTick+0x150>)
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	4a3e      	ldr	r2, [pc, #248]	; (8009830 <xTaskIncrementTick+0x154>)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6013      	str	r3, [r2, #0]
 800973c:	4b3d      	ldr	r3, [pc, #244]	; (8009834 <xTaskIncrementTick+0x158>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	3301      	adds	r3, #1
 8009742:	4a3c      	ldr	r2, [pc, #240]	; (8009834 <xTaskIncrementTick+0x158>)
 8009744:	6013      	str	r3, [r2, #0]
 8009746:	f000 faab 	bl	8009ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800974a:	4b3b      	ldr	r3, [pc, #236]	; (8009838 <xTaskIncrementTick+0x15c>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	429a      	cmp	r2, r3
 8009752:	d348      	bcc.n	80097e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009754:	4b35      	ldr	r3, [pc, #212]	; (800982c <xTaskIncrementTick+0x150>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d104      	bne.n	8009768 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800975e:	4b36      	ldr	r3, [pc, #216]	; (8009838 <xTaskIncrementTick+0x15c>)
 8009760:	f04f 32ff 	mov.w	r2, #4294967295
 8009764:	601a      	str	r2, [r3, #0]
					break;
 8009766:	e03e      	b.n	80097e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009768:	4b30      	ldr	r3, [pc, #192]	; (800982c <xTaskIncrementTick+0x150>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	68db      	ldr	r3, [r3, #12]
 8009770:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	429a      	cmp	r2, r3
 800977e:	d203      	bcs.n	8009788 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009780:	4a2d      	ldr	r2, [pc, #180]	; (8009838 <xTaskIncrementTick+0x15c>)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009786:	e02e      	b.n	80097e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	3304      	adds	r3, #4
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe fcf9 	bl	8008184 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009796:	2b00      	cmp	r3, #0
 8009798:	d004      	beq.n	80097a4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	3318      	adds	r3, #24
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fcf0 	bl	8008184 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a8:	2201      	movs	r2, #1
 80097aa:	409a      	lsls	r2, r3
 80097ac:	4b23      	ldr	r3, [pc, #140]	; (800983c <xTaskIncrementTick+0x160>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	4a22      	ldr	r2, [pc, #136]	; (800983c <xTaskIncrementTick+0x160>)
 80097b4:	6013      	str	r3, [r2, #0]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ba:	4613      	mov	r3, r2
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	4413      	add	r3, r2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4a1f      	ldr	r2, [pc, #124]	; (8009840 <xTaskIncrementTick+0x164>)
 80097c4:	441a      	add	r2, r3
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	3304      	adds	r3, #4
 80097ca:	4619      	mov	r1, r3
 80097cc:	4610      	mov	r0, r2
 80097ce:	f7fe fc7c 	bl	80080ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097d6:	4b1b      	ldr	r3, [pc, #108]	; (8009844 <xTaskIncrementTick+0x168>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097dc:	429a      	cmp	r2, r3
 80097de:	d3b9      	bcc.n	8009754 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80097e0:	2301      	movs	r3, #1
 80097e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097e4:	e7b6      	b.n	8009754 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80097e6:	4b17      	ldr	r3, [pc, #92]	; (8009844 <xTaskIncrementTick+0x168>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ec:	4914      	ldr	r1, [pc, #80]	; (8009840 <xTaskIncrementTick+0x164>)
 80097ee:	4613      	mov	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	4413      	add	r3, r2
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	440b      	add	r3, r1
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d907      	bls.n	800980e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80097fe:	2301      	movs	r3, #1
 8009800:	617b      	str	r3, [r7, #20]
 8009802:	e004      	b.n	800980e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009804:	4b10      	ldr	r3, [pc, #64]	; (8009848 <xTaskIncrementTick+0x16c>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3301      	adds	r3, #1
 800980a:	4a0f      	ldr	r2, [pc, #60]	; (8009848 <xTaskIncrementTick+0x16c>)
 800980c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800980e:	4b0f      	ldr	r3, [pc, #60]	; (800984c <xTaskIncrementTick+0x170>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8009816:	2301      	movs	r3, #1
 8009818:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800981a:	697b      	ldr	r3, [r7, #20]
}
 800981c:	4618      	mov	r0, r3
 800981e:	3718      	adds	r7, #24
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	2000572c 	.word	0x2000572c
 8009828:	20005708 	.word	0x20005708
 800982c:	200056bc 	.word	0x200056bc
 8009830:	200056c0 	.word	0x200056c0
 8009834:	2000571c 	.word	0x2000571c
 8009838:	20005724 	.word	0x20005724
 800983c:	2000570c 	.word	0x2000570c
 8009840:	20005608 	.word	0x20005608
 8009844:	20005604 	.word	0x20005604
 8009848:	20005714 	.word	0x20005714
 800984c:	20005718 	.word	0x20005718

08009850 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009856:	4b28      	ldr	r3, [pc, #160]	; (80098f8 <vTaskSwitchContext+0xa8>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800985e:	4b27      	ldr	r3, [pc, #156]	; (80098fc <vTaskSwitchContext+0xac>)
 8009860:	2201      	movs	r2, #1
 8009862:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009864:	e041      	b.n	80098ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009866:	4b25      	ldr	r3, [pc, #148]	; (80098fc <vTaskSwitchContext+0xac>)
 8009868:	2200      	movs	r2, #0
 800986a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800986c:	4b24      	ldr	r3, [pc, #144]	; (8009900 <vTaskSwitchContext+0xb0>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	fab3 f383 	clz	r3, r3
 8009878:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800987a:	7afb      	ldrb	r3, [r7, #11]
 800987c:	f1c3 031f 	rsb	r3, r3, #31
 8009880:	617b      	str	r3, [r7, #20]
 8009882:	4920      	ldr	r1, [pc, #128]	; (8009904 <vTaskSwitchContext+0xb4>)
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d10c      	bne.n	80098b0 <vTaskSwitchContext+0x60>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989a:	b672      	cpsid	i
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	b662      	cpsie	i
 80098aa:	607b      	str	r3, [r7, #4]
}
 80098ac:	bf00      	nop
 80098ae:	e7fe      	b.n	80098ae <vTaskSwitchContext+0x5e>
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	4a12      	ldr	r2, [pc, #72]	; (8009904 <vTaskSwitchContext+0xb4>)
 80098bc:	4413      	add	r3, r2
 80098be:	613b      	str	r3, [r7, #16]
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	3308      	adds	r3, #8
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d104      	bne.n	80098e0 <vTaskSwitchContext+0x90>
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	685a      	ldr	r2, [r3, #4]
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	605a      	str	r2, [r3, #4]
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	685b      	ldr	r3, [r3, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	4a08      	ldr	r2, [pc, #32]	; (8009908 <vTaskSwitchContext+0xb8>)
 80098e8:	6013      	str	r3, [r2, #0]
}
 80098ea:	bf00      	nop
 80098ec:	371c      	adds	r7, #28
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr
 80098f6:	bf00      	nop
 80098f8:	2000572c 	.word	0x2000572c
 80098fc:	20005718 	.word	0x20005718
 8009900:	2000570c 	.word	0x2000570c
 8009904:	20005608 	.word	0x20005608
 8009908:	20005604 	.word	0x20005604

0800990c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10c      	bne.n	8009936 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	b672      	cpsid	i
 8009922:	f383 8811 	msr	BASEPRI, r3
 8009926:	f3bf 8f6f 	isb	sy
 800992a:	f3bf 8f4f 	dsb	sy
 800992e:	b662      	cpsie	i
 8009930:	60fb      	str	r3, [r7, #12]
}
 8009932:	bf00      	nop
 8009934:	e7fe      	b.n	8009934 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <vTaskPlaceOnEventList+0x48>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3318      	adds	r3, #24
 800993c:	4619      	mov	r1, r3
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f7fe fbe7 	bl	8008112 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009944:	2101      	movs	r1, #1
 8009946:	6838      	ldr	r0, [r7, #0]
 8009948:	f000 fba4 	bl	800a094 <prvAddCurrentTaskToDelayedList>
}
 800994c:	bf00      	nop
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	bd80      	pop	{r7, pc}
 8009954:	20005604 	.word	0x20005604

08009958 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d10c      	bne.n	8009988 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800996e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009972:	b672      	cpsid	i
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	b662      	cpsie	i
 8009982:	60fb      	str	r3, [r7, #12]
}
 8009984:	bf00      	nop
 8009986:	e7fe      	b.n	8009986 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	3318      	adds	r3, #24
 800998c:	4618      	mov	r0, r3
 800998e:	f7fe fbf9 	bl	8008184 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009992:	4b1d      	ldr	r3, [pc, #116]	; (8009a08 <xTaskRemoveFromEventList+0xb0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d11c      	bne.n	80099d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	3304      	adds	r3, #4
 800999e:	4618      	mov	r0, r3
 80099a0:	f7fe fbf0 	bl	8008184 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a8:	2201      	movs	r2, #1
 80099aa:	409a      	lsls	r2, r3
 80099ac:	4b17      	ldr	r3, [pc, #92]	; (8009a0c <xTaskRemoveFromEventList+0xb4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	4a16      	ldr	r2, [pc, #88]	; (8009a0c <xTaskRemoveFromEventList+0xb4>)
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099ba:	4613      	mov	r3, r2
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4413      	add	r3, r2
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	4a13      	ldr	r2, [pc, #76]	; (8009a10 <xTaskRemoveFromEventList+0xb8>)
 80099c4:	441a      	add	r2, r3
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	3304      	adds	r3, #4
 80099ca:	4619      	mov	r1, r3
 80099cc:	4610      	mov	r0, r2
 80099ce:	f7fe fb7c 	bl	80080ca <vListInsertEnd>
 80099d2:	e005      	b.n	80099e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	3318      	adds	r3, #24
 80099d8:	4619      	mov	r1, r3
 80099da:	480e      	ldr	r0, [pc, #56]	; (8009a14 <xTaskRemoveFromEventList+0xbc>)
 80099dc:	f7fe fb75 	bl	80080ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4b0c      	ldr	r3, [pc, #48]	; (8009a18 <xTaskRemoveFromEventList+0xc0>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d905      	bls.n	80099fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80099ee:	2301      	movs	r3, #1
 80099f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80099f2:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <xTaskRemoveFromEventList+0xc4>)
 80099f4:	2201      	movs	r2, #1
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e001      	b.n	80099fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80099fa:	2300      	movs	r3, #0
 80099fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099fe:	697b      	ldr	r3, [r7, #20]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	3718      	adds	r7, #24
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	2000572c 	.word	0x2000572c
 8009a0c:	2000570c 	.word	0x2000570c
 8009a10:	20005608 	.word	0x20005608
 8009a14:	200056c4 	.word	0x200056c4
 8009a18:	20005604 	.word	0x20005604
 8009a1c:	20005718 	.word	0x20005718

08009a20 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009a20:	b480      	push	{r7}
 8009a22:	b083      	sub	sp, #12
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009a28:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <vTaskInternalSetTimeOutState+0x24>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009a30:	4b05      	ldr	r3, [pc, #20]	; (8009a48 <vTaskInternalSetTimeOutState+0x28>)
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	605a      	str	r2, [r3, #4]
}
 8009a38:	bf00      	nop
 8009a3a:	370c      	adds	r7, #12
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr
 8009a44:	2000571c 	.word	0x2000571c
 8009a48:	20005708 	.word	0x20005708

08009a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b088      	sub	sp, #32
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
 8009a54:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10c      	bne.n	8009a76 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	b672      	cpsid	i
 8009a62:	f383 8811 	msr	BASEPRI, r3
 8009a66:	f3bf 8f6f 	isb	sy
 8009a6a:	f3bf 8f4f 	dsb	sy
 8009a6e:	b662      	cpsie	i
 8009a70:	613b      	str	r3, [r7, #16]
}
 8009a72:	bf00      	nop
 8009a74:	e7fe      	b.n	8009a74 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d10c      	bne.n	8009a96 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	b672      	cpsid	i
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	b662      	cpsie	i
 8009a90:	60fb      	str	r3, [r7, #12]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8009a96:	f000 fc71 	bl	800a37c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a9a:	4b1d      	ldr	r3, [pc, #116]	; (8009b10 <xTaskCheckForTimeOut+0xc4>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	69ba      	ldr	r2, [r7, #24]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab2:	d102      	bne.n	8009aba <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61fb      	str	r3, [r7, #28]
 8009ab8:	e023      	b.n	8009b02 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	4b15      	ldr	r3, [pc, #84]	; (8009b14 <xTaskCheckForTimeOut+0xc8>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d007      	beq.n	8009ad6 <xTaskCheckForTimeOut+0x8a>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d302      	bcc.n	8009ad6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	e015      	b.n	8009b02 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	697a      	ldr	r2, [r7, #20]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d20b      	bcs.n	8009af8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	1ad2      	subs	r2, r2, r3
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f7ff ff97 	bl	8009a20 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61fb      	str	r3, [r7, #28]
 8009af6:	e004      	b.n	8009b02 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009afe:	2301      	movs	r3, #1
 8009b00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009b02:	f000 fc6f 	bl	800a3e4 <vPortExitCritical>

	return xReturn;
 8009b06:	69fb      	ldr	r3, [r7, #28]
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	3720      	adds	r7, #32
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	20005708 	.word	0x20005708
 8009b14:	2000571c 	.word	0x2000571c

08009b18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009b18:	b480      	push	{r7}
 8009b1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009b1c:	4b03      	ldr	r3, [pc, #12]	; (8009b2c <vTaskMissedYield+0x14>)
 8009b1e:	2201      	movs	r2, #1
 8009b20:	601a      	str	r2, [r3, #0]
}
 8009b22:	bf00      	nop
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	20005718 	.word	0x20005718

08009b30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b38:	f000 f852 	bl	8009be0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b3c:	4b06      	ldr	r3, [pc, #24]	; (8009b58 <prvIdleTask+0x28>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d9f9      	bls.n	8009b38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009b44:	4b05      	ldr	r3, [pc, #20]	; (8009b5c <prvIdleTask+0x2c>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009b54:	e7f0      	b.n	8009b38 <prvIdleTask+0x8>
 8009b56:	bf00      	nop
 8009b58:	20005608 	.word	0x20005608
 8009b5c:	e000ed04 	.word	0xe000ed04

08009b60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b66:	2300      	movs	r3, #0
 8009b68:	607b      	str	r3, [r7, #4]
 8009b6a:	e00c      	b.n	8009b86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4a12      	ldr	r2, [pc, #72]	; (8009bc0 <prvInitialiseTaskLists+0x60>)
 8009b78:	4413      	add	r3, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fa78 	bl	8008070 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	3301      	adds	r3, #1
 8009b84:	607b      	str	r3, [r7, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b06      	cmp	r3, #6
 8009b8a:	d9ef      	bls.n	8009b6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009b8c:	480d      	ldr	r0, [pc, #52]	; (8009bc4 <prvInitialiseTaskLists+0x64>)
 8009b8e:	f7fe fa6f 	bl	8008070 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009b92:	480d      	ldr	r0, [pc, #52]	; (8009bc8 <prvInitialiseTaskLists+0x68>)
 8009b94:	f7fe fa6c 	bl	8008070 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009b98:	480c      	ldr	r0, [pc, #48]	; (8009bcc <prvInitialiseTaskLists+0x6c>)
 8009b9a:	f7fe fa69 	bl	8008070 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009b9e:	480c      	ldr	r0, [pc, #48]	; (8009bd0 <prvInitialiseTaskLists+0x70>)
 8009ba0:	f7fe fa66 	bl	8008070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009ba4:	480b      	ldr	r0, [pc, #44]	; (8009bd4 <prvInitialiseTaskLists+0x74>)
 8009ba6:	f7fe fa63 	bl	8008070 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009baa:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <prvInitialiseTaskLists+0x78>)
 8009bac:	4a05      	ldr	r2, [pc, #20]	; (8009bc4 <prvInitialiseTaskLists+0x64>)
 8009bae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <prvInitialiseTaskLists+0x7c>)
 8009bb2:	4a05      	ldr	r2, [pc, #20]	; (8009bc8 <prvInitialiseTaskLists+0x68>)
 8009bb4:	601a      	str	r2, [r3, #0]
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20005608 	.word	0x20005608
 8009bc4:	20005694 	.word	0x20005694
 8009bc8:	200056a8 	.word	0x200056a8
 8009bcc:	200056c4 	.word	0x200056c4
 8009bd0:	200056d8 	.word	0x200056d8
 8009bd4:	200056f0 	.word	0x200056f0
 8009bd8:	200056bc 	.word	0x200056bc
 8009bdc:	200056c0 	.word	0x200056c0

08009be0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009be6:	e019      	b.n	8009c1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009be8:	f000 fbc8 	bl	800a37c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bec:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <prvCheckTasksWaitingTermination+0x50>)
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	68db      	ldr	r3, [r3, #12]
 8009bf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f7fe fac3 	bl	8008184 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009bfe:	4b0d      	ldr	r3, [pc, #52]	; (8009c34 <prvCheckTasksWaitingTermination+0x54>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	4a0b      	ldr	r2, [pc, #44]	; (8009c34 <prvCheckTasksWaitingTermination+0x54>)
 8009c06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c08:	4b0b      	ldr	r3, [pc, #44]	; (8009c38 <prvCheckTasksWaitingTermination+0x58>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	3b01      	subs	r3, #1
 8009c0e:	4a0a      	ldr	r2, [pc, #40]	; (8009c38 <prvCheckTasksWaitingTermination+0x58>)
 8009c10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c12:	f000 fbe7 	bl	800a3e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f810 	bl	8009c3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c1c:	4b06      	ldr	r3, [pc, #24]	; (8009c38 <prvCheckTasksWaitingTermination+0x58>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1e1      	bne.n	8009be8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop
 8009c28:	3708      	adds	r7, #8
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	200056d8 	.word	0x200056d8
 8009c34:	20005704 	.word	0x20005704
 8009c38:	200056ec 	.word	0x200056ec

08009c3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b084      	sub	sp, #16
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d108      	bne.n	8009c60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fd88 	bl	800a768 <vPortFree>
				vPortFree( pxTCB );
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 fd85 	bl	800a768 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009c5e:	e01a      	b.n	8009c96 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d103      	bne.n	8009c72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f000 fd7c 	bl	800a768 <vPortFree>
	}
 8009c70:	e011      	b.n	8009c96 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d00c      	beq.n	8009c96 <prvDeleteTCB+0x5a>
	__asm volatile
 8009c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c80:	b672      	cpsid	i
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	b662      	cpsie	i
 8009c90:	60fb      	str	r3, [r7, #12]
}
 8009c92:	bf00      	nop
 8009c94:	e7fe      	b.n	8009c94 <prvDeleteTCB+0x58>
	}
 8009c96:	bf00      	nop
 8009c98:	3710      	adds	r7, #16
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
	...

08009ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ca6:	4b0c      	ldr	r3, [pc, #48]	; (8009cd8 <prvResetNextTaskUnblockTime+0x38>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d104      	bne.n	8009cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009cb0:	4b0a      	ldr	r3, [pc, #40]	; (8009cdc <prvResetNextTaskUnblockTime+0x3c>)
 8009cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009cb8:	e008      	b.n	8009ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cba:	4b07      	ldr	r3, [pc, #28]	; (8009cd8 <prvResetNextTaskUnblockTime+0x38>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	68db      	ldr	r3, [r3, #12]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	4a04      	ldr	r2, [pc, #16]	; (8009cdc <prvResetNextTaskUnblockTime+0x3c>)
 8009cca:	6013      	str	r3, [r2, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr
 8009cd8:	200056bc 	.word	0x200056bc
 8009cdc:	20005724 	.word	0x20005724

08009ce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ce6:	4b0b      	ldr	r3, [pc, #44]	; (8009d14 <xTaskGetSchedulerState+0x34>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d102      	bne.n	8009cf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	607b      	str	r3, [r7, #4]
 8009cf2:	e008      	b.n	8009d06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cf4:	4b08      	ldr	r3, [pc, #32]	; (8009d18 <xTaskGetSchedulerState+0x38>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d102      	bne.n	8009d02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	607b      	str	r3, [r7, #4]
 8009d00:	e001      	b.n	8009d06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d02:	2300      	movs	r3, #0
 8009d04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d06:	687b      	ldr	r3, [r7, #4]
	}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr
 8009d14:	20005710 	.word	0x20005710
 8009d18:	2000572c 	.word	0x2000572c

08009d1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b084      	sub	sp, #16
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d069      	beq.n	8009e06 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d36:	4b36      	ldr	r3, [pc, #216]	; (8009e10 <xTaskPriorityInherit+0xf4>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d259      	bcs.n	8009df4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	db06      	blt.n	8009d56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d48:	4b31      	ldr	r3, [pc, #196]	; (8009e10 <xTaskPriorityInherit+0xf4>)
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4e:	f1c3 0207 	rsb	r2, r3, #7
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	6959      	ldr	r1, [r3, #20]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d5e:	4613      	mov	r3, r2
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	4a2b      	ldr	r2, [pc, #172]	; (8009e14 <xTaskPriorityInherit+0xf8>)
 8009d68:	4413      	add	r3, r2
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	d13a      	bne.n	8009de4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	3304      	adds	r3, #4
 8009d72:	4618      	mov	r0, r3
 8009d74:	f7fe fa06 	bl	8008184 <uxListRemove>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d115      	bne.n	8009daa <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d82:	4924      	ldr	r1, [pc, #144]	; (8009e14 <xTaskPriorityInherit+0xf8>)
 8009d84:	4613      	mov	r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	4413      	add	r3, r2
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	440b      	add	r3, r1
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d10a      	bne.n	8009daa <xTaskPriorityInherit+0x8e>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	2201      	movs	r2, #1
 8009d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8009d9e:	43da      	mvns	r2, r3
 8009da0:	4b1d      	ldr	r3, [pc, #116]	; (8009e18 <xTaskPriorityInherit+0xfc>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4013      	ands	r3, r2
 8009da6:	4a1c      	ldr	r2, [pc, #112]	; (8009e18 <xTaskPriorityInherit+0xfc>)
 8009da8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009daa:	4b19      	ldr	r3, [pc, #100]	; (8009e10 <xTaskPriorityInherit+0xf4>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	2201      	movs	r2, #1
 8009dba:	409a      	lsls	r2, r3
 8009dbc:	4b16      	ldr	r3, [pc, #88]	; (8009e18 <xTaskPriorityInherit+0xfc>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	4a15      	ldr	r2, [pc, #84]	; (8009e18 <xTaskPriorityInherit+0xfc>)
 8009dc4:	6013      	str	r3, [r2, #0]
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dca:	4613      	mov	r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	4413      	add	r3, r2
 8009dd0:	009b      	lsls	r3, r3, #2
 8009dd2:	4a10      	ldr	r2, [pc, #64]	; (8009e14 <xTaskPriorityInherit+0xf8>)
 8009dd4:	441a      	add	r2, r3
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	3304      	adds	r3, #4
 8009dda:	4619      	mov	r1, r3
 8009ddc:	4610      	mov	r0, r2
 8009dde:	f7fe f974 	bl	80080ca <vListInsertEnd>
 8009de2:	e004      	b.n	8009dee <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009de4:	4b0a      	ldr	r3, [pc, #40]	; (8009e10 <xTaskPriorityInherit+0xf4>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009dee:	2301      	movs	r3, #1
 8009df0:	60fb      	str	r3, [r7, #12]
 8009df2:	e008      	b.n	8009e06 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009df8:	4b05      	ldr	r3, [pc, #20]	; (8009e10 <xTaskPriorityInherit+0xf4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d201      	bcs.n	8009e06 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009e02:	2301      	movs	r3, #1
 8009e04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e06:	68fb      	ldr	r3, [r7, #12]
	}
 8009e08:	4618      	mov	r0, r3
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}
 8009e10:	20005604 	.word	0x20005604
 8009e14:	20005608 	.word	0x20005608
 8009e18:	2000570c 	.word	0x2000570c

08009e1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d072      	beq.n	8009f18 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009e32:	4b3c      	ldr	r3, [pc, #240]	; (8009f24 <xTaskPriorityDisinherit+0x108>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	693a      	ldr	r2, [r7, #16]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d00c      	beq.n	8009e56 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e40:	b672      	cpsid	i
 8009e42:	f383 8811 	msr	BASEPRI, r3
 8009e46:	f3bf 8f6f 	isb	sy
 8009e4a:	f3bf 8f4f 	dsb	sy
 8009e4e:	b662      	cpsie	i
 8009e50:	60fb      	str	r3, [r7, #12]
}
 8009e52:	bf00      	nop
 8009e54:	e7fe      	b.n	8009e54 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d10c      	bne.n	8009e78 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	b672      	cpsid	i
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	b662      	cpsie	i
 8009e72:	60bb      	str	r3, [r7, #8]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7c:	1e5a      	subs	r2, r3, #1
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d044      	beq.n	8009f18 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d140      	bne.n	8009f18 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	3304      	adds	r3, #4
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe f972 	bl	8008184 <uxListRemove>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d115      	bne.n	8009ed2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	491f      	ldr	r1, [pc, #124]	; (8009f28 <xTaskPriorityDisinherit+0x10c>)
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d10a      	bne.n	8009ed2 <xTaskPriorityDisinherit+0xb6>
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ec6:	43da      	mvns	r2, r3
 8009ec8:	4b18      	ldr	r3, [pc, #96]	; (8009f2c <xTaskPriorityDisinherit+0x110>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	4a17      	ldr	r2, [pc, #92]	; (8009f2c <xTaskPriorityDisinherit+0x110>)
 8009ed0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	f1c3 0207 	rsb	r2, r3, #7
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	2201      	movs	r2, #1
 8009eec:	409a      	lsls	r2, r3
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <xTaskPriorityDisinherit+0x110>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <xTaskPriorityDisinherit+0x110>)
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	4a08      	ldr	r2, [pc, #32]	; (8009f28 <xTaskPriorityDisinherit+0x10c>)
 8009f06:	441a      	add	r2, r3
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	3304      	adds	r3, #4
 8009f0c:	4619      	mov	r1, r3
 8009f0e:	4610      	mov	r0, r2
 8009f10:	f7fe f8db 	bl	80080ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009f14:	2301      	movs	r3, #1
 8009f16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009f18:	697b      	ldr	r3, [r7, #20]
	}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	20005604 	.word	0x20005604
 8009f28:	20005608 	.word	0x20005608
 8009f2c:	2000570c 	.word	0x2000570c

08009f30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b088      	sub	sp, #32
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	f000 8087 	beq.w	800a058 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d10c      	bne.n	8009f6c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8009f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f56:	b672      	cpsid	i
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	b662      	cpsie	i
 8009f66:	60fb      	str	r3, [r7, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	e7fe      	b.n	8009f6a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f70:	683a      	ldr	r2, [r7, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d902      	bls.n	8009f7c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	61fb      	str	r3, [r7, #28]
 8009f7a:	e002      	b.n	8009f82 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009f7c:	69bb      	ldr	r3, [r7, #24]
 8009f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f80:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f86:	69fa      	ldr	r2, [r7, #28]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d065      	beq.n	800a058 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	429a      	cmp	r2, r3
 8009f94:	d160      	bne.n	800a058 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009f96:	4b32      	ldr	r3, [pc, #200]	; (800a060 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	429a      	cmp	r2, r3
 8009f9e:	d10c      	bne.n	8009fba <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8009fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa4:	b672      	cpsid	i
 8009fa6:	f383 8811 	msr	BASEPRI, r3
 8009faa:	f3bf 8f6f 	isb	sy
 8009fae:	f3bf 8f4f 	dsb	sy
 8009fb2:	b662      	cpsie	i
 8009fb4:	60bb      	str	r3, [r7, #8]
}
 8009fb6:	bf00      	nop
 8009fb8:	e7fe      	b.n	8009fb8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbe:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	69fa      	ldr	r2, [r7, #28]
 8009fc4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	db04      	blt.n	8009fd8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f1c3 0207 	rsb	r2, r3, #7
 8009fd4:	69bb      	ldr	r3, [r7, #24]
 8009fd6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009fd8:	69bb      	ldr	r3, [r7, #24]
 8009fda:	6959      	ldr	r1, [r3, #20]
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	4613      	mov	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	4413      	add	r3, r2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4a1f      	ldr	r2, [pc, #124]	; (800a064 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009fe8:	4413      	add	r3, r2
 8009fea:	4299      	cmp	r1, r3
 8009fec:	d134      	bne.n	800a058 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	3304      	adds	r3, #4
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fe f8c6 	bl	8008184 <uxListRemove>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d115      	bne.n	800a02a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a002:	4918      	ldr	r1, [pc, #96]	; (800a064 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a004:	4613      	mov	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4413      	add	r3, r2
 800a00a:	009b      	lsls	r3, r3, #2
 800a00c:	440b      	add	r3, r1
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10a      	bne.n	800a02a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a018:	2201      	movs	r2, #1
 800a01a:	fa02 f303 	lsl.w	r3, r2, r3
 800a01e:	43da      	mvns	r2, r3
 800a020:	4b11      	ldr	r3, [pc, #68]	; (800a068 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	4013      	ands	r3, r2
 800a026:	4a10      	ldr	r2, [pc, #64]	; (800a068 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a028:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a02a:	69bb      	ldr	r3, [r7, #24]
 800a02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02e:	2201      	movs	r2, #1
 800a030:	409a      	lsls	r2, r3
 800a032:	4b0d      	ldr	r3, [pc, #52]	; (800a068 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	4313      	orrs	r3, r2
 800a038:	4a0b      	ldr	r2, [pc, #44]	; (800a068 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a040:	4613      	mov	r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	4413      	add	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4a06      	ldr	r2, [pc, #24]	; (800a064 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800a04a:	441a      	add	r2, r3
 800a04c:	69bb      	ldr	r3, [r7, #24]
 800a04e:	3304      	adds	r3, #4
 800a050:	4619      	mov	r1, r3
 800a052:	4610      	mov	r0, r2
 800a054:	f7fe f839 	bl	80080ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a058:	bf00      	nop
 800a05a:	3720      	adds	r7, #32
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	20005604 	.word	0x20005604
 800a064:	20005608 	.word	0x20005608
 800a068:	2000570c 	.word	0x2000570c

0800a06c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a06c:	b480      	push	{r7}
 800a06e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a070:	4b07      	ldr	r3, [pc, #28]	; (800a090 <pvTaskIncrementMutexHeldCount+0x24>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d004      	beq.n	800a082 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <pvTaskIncrementMutexHeldCount+0x24>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a07e:	3201      	adds	r2, #1
 800a080:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800a082:	4b03      	ldr	r3, [pc, #12]	; (800a090 <pvTaskIncrementMutexHeldCount+0x24>)
 800a084:	681b      	ldr	r3, [r3, #0]
	}
 800a086:	4618      	mov	r0, r3
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20005604 	.word	0x20005604

0800a094 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b084      	sub	sp, #16
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a09e:	4b29      	ldr	r3, [pc, #164]	; (800a144 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a0a4:	4b28      	ldr	r3, [pc, #160]	; (800a148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fe f86a 	bl	8008184 <uxListRemove>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10b      	bne.n	800a0ce <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a0b6:	4b24      	ldr	r3, [pc, #144]	; (800a148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0bc:	2201      	movs	r2, #1
 800a0be:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c2:	43da      	mvns	r2, r3
 800a0c4:	4b21      	ldr	r3, [pc, #132]	; (800a14c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	4a20      	ldr	r2, [pc, #128]	; (800a14c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a0cc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0d4:	d10a      	bne.n	800a0ec <prvAddCurrentTaskToDelayedList+0x58>
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d007      	beq.n	800a0ec <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a0dc:	4b1a      	ldr	r3, [pc, #104]	; (800a148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3304      	adds	r3, #4
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	481a      	ldr	r0, [pc, #104]	; (800a150 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a0e6:	f7fd fff0 	bl	80080ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a0ea:	e026      	b.n	800a13a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a0f4:	4b14      	ldr	r3, [pc, #80]	; (800a148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	68ba      	ldr	r2, [r7, #8]
 800a0fa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	429a      	cmp	r2, r3
 800a102:	d209      	bcs.n	800a118 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a104:	4b13      	ldr	r3, [pc, #76]	; (800a154 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	4b0f      	ldr	r3, [pc, #60]	; (800a148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	3304      	adds	r3, #4
 800a10e:	4619      	mov	r1, r3
 800a110:	4610      	mov	r0, r2
 800a112:	f7fd fffe 	bl	8008112 <vListInsert>
}
 800a116:	e010      	b.n	800a13a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a118:	4b0f      	ldr	r3, [pc, #60]	; (800a158 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	4b0a      	ldr	r3, [pc, #40]	; (800a148 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	3304      	adds	r3, #4
 800a122:	4619      	mov	r1, r3
 800a124:	4610      	mov	r0, r2
 800a126:	f7fd fff4 	bl	8008112 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a12a:	4b0c      	ldr	r3, [pc, #48]	; (800a15c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	68ba      	ldr	r2, [r7, #8]
 800a130:	429a      	cmp	r2, r3
 800a132:	d202      	bcs.n	800a13a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a134:	4a09      	ldr	r2, [pc, #36]	; (800a15c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	6013      	str	r3, [r2, #0]
}
 800a13a:	bf00      	nop
 800a13c:	3710      	adds	r7, #16
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20005708 	.word	0x20005708
 800a148:	20005604 	.word	0x20005604
 800a14c:	2000570c 	.word	0x2000570c
 800a150:	200056f0 	.word	0x200056f0
 800a154:	200056c0 	.word	0x200056c0
 800a158:	200056bc 	.word	0x200056bc
 800a15c:	20005724 	.word	0x20005724

0800a160 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	3b04      	subs	r3, #4
 800a170:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	3b04      	subs	r3, #4
 800a17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f023 0201 	bic.w	r2, r3, #1
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	3b04      	subs	r3, #4
 800a18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a190:	4a0c      	ldr	r2, [pc, #48]	; (800a1c4 <pxPortInitialiseStack+0x64>)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	3b14      	subs	r3, #20
 800a19a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	3b04      	subs	r3, #4
 800a1a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f06f 0202 	mvn.w	r2, #2
 800a1ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	3b20      	subs	r3, #32
 800a1b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	0800a1c9 	.word	0x0800a1c9

0800a1c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a1d2:	4b14      	ldr	r3, [pc, #80]	; (800a224 <prvTaskExitError+0x5c>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1da:	d00c      	beq.n	800a1f6 <prvTaskExitError+0x2e>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	b672      	cpsid	i
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	b662      	cpsie	i
 800a1f0:	60fb      	str	r3, [r7, #12]
}
 800a1f2:	bf00      	nop
 800a1f4:	e7fe      	b.n	800a1f4 <prvTaskExitError+0x2c>
	__asm volatile
 800a1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fa:	b672      	cpsid	i
 800a1fc:	f383 8811 	msr	BASEPRI, r3
 800a200:	f3bf 8f6f 	isb	sy
 800a204:	f3bf 8f4f 	dsb	sy
 800a208:	b662      	cpsie	i
 800a20a:	60bb      	str	r3, [r7, #8]
}
 800a20c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a20e:	bf00      	nop
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d0fc      	beq.n	800a210 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr
 800a224:	20000038 	.word	0x20000038
	...

0800a230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <pxCurrentTCBConst2>)
 800a232:	6819      	ldr	r1, [r3, #0]
 800a234:	6808      	ldr	r0, [r1, #0]
 800a236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23a:	f380 8809 	msr	PSP, r0
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f04f 0000 	mov.w	r0, #0
 800a246:	f380 8811 	msr	BASEPRI, r0
 800a24a:	4770      	bx	lr
 800a24c:	f3af 8000 	nop.w

0800a250 <pxCurrentTCBConst2>:
 800a250:	20005604 	.word	0x20005604
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop

0800a258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a258:	4808      	ldr	r0, [pc, #32]	; (800a27c <prvPortStartFirstTask+0x24>)
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	6800      	ldr	r0, [r0, #0]
 800a25e:	f380 8808 	msr	MSP, r0
 800a262:	f04f 0000 	mov.w	r0, #0
 800a266:	f380 8814 	msr	CONTROL, r0
 800a26a:	b662      	cpsie	i
 800a26c:	b661      	cpsie	f
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	f3bf 8f6f 	isb	sy
 800a276:	df00      	svc	0
 800a278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a27a:	bf00      	nop
 800a27c:	e000ed08 	.word	0xe000ed08

0800a280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b084      	sub	sp, #16
 800a284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a286:	4b37      	ldr	r3, [pc, #220]	; (800a364 <xPortStartScheduler+0xe4>)
 800a288:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	22ff      	movs	r2, #255	; 0xff
 800a296:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	b2db      	uxtb	r3, r3
 800a29e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a2a0:	78fb      	ldrb	r3, [r7, #3]
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	4b2f      	ldr	r3, [pc, #188]	; (800a368 <xPortStartScheduler+0xe8>)
 800a2ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a2ae:	4b2f      	ldr	r3, [pc, #188]	; (800a36c <xPortStartScheduler+0xec>)
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2b4:	e009      	b.n	800a2ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a2b6:	4b2d      	ldr	r3, [pc, #180]	; (800a36c <xPortStartScheduler+0xec>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	3b01      	subs	r3, #1
 800a2bc:	4a2b      	ldr	r2, [pc, #172]	; (800a36c <xPortStartScheduler+0xec>)
 800a2be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a2c0:	78fb      	ldrb	r3, [r7, #3]
 800a2c2:	b2db      	uxtb	r3, r3
 800a2c4:	005b      	lsls	r3, r3, #1
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d2:	2b80      	cmp	r3, #128	; 0x80
 800a2d4:	d0ef      	beq.n	800a2b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a2d6:	4b25      	ldr	r3, [pc, #148]	; (800a36c <xPortStartScheduler+0xec>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f1c3 0307 	rsb	r3, r3, #7
 800a2de:	2b04      	cmp	r3, #4
 800a2e0:	d00c      	beq.n	800a2fc <xPortStartScheduler+0x7c>
	__asm volatile
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	b672      	cpsid	i
 800a2e8:	f383 8811 	msr	BASEPRI, r3
 800a2ec:	f3bf 8f6f 	isb	sy
 800a2f0:	f3bf 8f4f 	dsb	sy
 800a2f4:	b662      	cpsie	i
 800a2f6:	60bb      	str	r3, [r7, #8]
}
 800a2f8:	bf00      	nop
 800a2fa:	e7fe      	b.n	800a2fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a2fc:	4b1b      	ldr	r3, [pc, #108]	; (800a36c <xPortStartScheduler+0xec>)
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	021b      	lsls	r3, r3, #8
 800a302:	4a1a      	ldr	r2, [pc, #104]	; (800a36c <xPortStartScheduler+0xec>)
 800a304:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a306:	4b19      	ldr	r3, [pc, #100]	; (800a36c <xPortStartScheduler+0xec>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a30e:	4a17      	ldr	r2, [pc, #92]	; (800a36c <xPortStartScheduler+0xec>)
 800a310:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	b2da      	uxtb	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a31a:	4b15      	ldr	r3, [pc, #84]	; (800a370 <xPortStartScheduler+0xf0>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a14      	ldr	r2, [pc, #80]	; (800a370 <xPortStartScheduler+0xf0>)
 800a320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a324:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a326:	4b12      	ldr	r3, [pc, #72]	; (800a370 <xPortStartScheduler+0xf0>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a11      	ldr	r2, [pc, #68]	; (800a370 <xPortStartScheduler+0xf0>)
 800a32c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a330:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a332:	f000 f8dd 	bl	800a4f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a336:	4b0f      	ldr	r3, [pc, #60]	; (800a374 <xPortStartScheduler+0xf4>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a33c:	f000 f8fc 	bl	800a538 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a340:	4b0d      	ldr	r3, [pc, #52]	; (800a378 <xPortStartScheduler+0xf8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a0c      	ldr	r2, [pc, #48]	; (800a378 <xPortStartScheduler+0xf8>)
 800a346:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a34a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a34c:	f7ff ff84 	bl	800a258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a350:	f7ff fa7e 	bl	8009850 <vTaskSwitchContext>
	prvTaskExitError();
 800a354:	f7ff ff38 	bl	800a1c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	3710      	adds	r7, #16
 800a35e:	46bd      	mov	sp, r7
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop
 800a364:	e000e400 	.word	0xe000e400
 800a368:	20005730 	.word	0x20005730
 800a36c:	20005734 	.word	0x20005734
 800a370:	e000ed20 	.word	0xe000ed20
 800a374:	20000038 	.word	0x20000038
 800a378:	e000ef34 	.word	0xe000ef34

0800a37c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a386:	b672      	cpsid	i
 800a388:	f383 8811 	msr	BASEPRI, r3
 800a38c:	f3bf 8f6f 	isb	sy
 800a390:	f3bf 8f4f 	dsb	sy
 800a394:	b662      	cpsie	i
 800a396:	607b      	str	r3, [r7, #4]
}
 800a398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a39a:	4b10      	ldr	r3, [pc, #64]	; (800a3dc <vPortEnterCritical+0x60>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3301      	adds	r3, #1
 800a3a0:	4a0e      	ldr	r2, [pc, #56]	; (800a3dc <vPortEnterCritical+0x60>)
 800a3a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a3a4:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <vPortEnterCritical+0x60>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d111      	bne.n	800a3d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a3ac:	4b0c      	ldr	r3, [pc, #48]	; (800a3e0 <vPortEnterCritical+0x64>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d00c      	beq.n	800a3d0 <vPortEnterCritical+0x54>
	__asm volatile
 800a3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3ba:	b672      	cpsid	i
 800a3bc:	f383 8811 	msr	BASEPRI, r3
 800a3c0:	f3bf 8f6f 	isb	sy
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	b662      	cpsie	i
 800a3ca:	603b      	str	r3, [r7, #0]
}
 800a3cc:	bf00      	nop
 800a3ce:	e7fe      	b.n	800a3ce <vPortEnterCritical+0x52>
	}
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	20000038 	.word	0x20000038
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a3ea:	4b13      	ldr	r3, [pc, #76]	; (800a438 <vPortExitCritical+0x54>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d10c      	bne.n	800a40c <vPortExitCritical+0x28>
	__asm volatile
 800a3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f6:	b672      	cpsid	i
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	b662      	cpsie	i
 800a406:	607b      	str	r3, [r7, #4]
}
 800a408:	bf00      	nop
 800a40a:	e7fe      	b.n	800a40a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <vPortExitCritical+0x54>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	3b01      	subs	r3, #1
 800a412:	4a09      	ldr	r2, [pc, #36]	; (800a438 <vPortExitCritical+0x54>)
 800a414:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a416:	4b08      	ldr	r3, [pc, #32]	; (800a438 <vPortExitCritical+0x54>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d105      	bne.n	800a42a <vPortExitCritical+0x46>
 800a41e:	2300      	movs	r3, #0
 800a420:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f383 8811 	msr	BASEPRI, r3
}
 800a428:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a42a:	bf00      	nop
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000038 	.word	0x20000038
 800a43c:	00000000 	.word	0x00000000

0800a440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a440:	f3ef 8009 	mrs	r0, PSP
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <pxCurrentTCBConst>)
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	f01e 0f10 	tst.w	lr, #16
 800a450:	bf08      	it	eq
 800a452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45a:	6010      	str	r0, [r2, #0]
 800a45c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a460:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a464:	b672      	cpsid	i
 800a466:	f380 8811 	msr	BASEPRI, r0
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	f3bf 8f6f 	isb	sy
 800a472:	b662      	cpsie	i
 800a474:	f7ff f9ec 	bl	8009850 <vTaskSwitchContext>
 800a478:	f04f 0000 	mov.w	r0, #0
 800a47c:	f380 8811 	msr	BASEPRI, r0
 800a480:	bc09      	pop	{r0, r3}
 800a482:	6819      	ldr	r1, [r3, #0]
 800a484:	6808      	ldr	r0, [r1, #0]
 800a486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48a:	f01e 0f10 	tst.w	lr, #16
 800a48e:	bf08      	it	eq
 800a490:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a494:	f380 8809 	msr	PSP, r0
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	4770      	bx	lr
 800a49e:	bf00      	nop

0800a4a0 <pxCurrentTCBConst>:
 800a4a0:	20005604 	.word	0x20005604
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop

0800a4a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a4ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b2:	b672      	cpsid	i
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	b662      	cpsie	i
 800a4c2:	607b      	str	r3, [r7, #4]
}
 800a4c4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a4c6:	f7ff f909 	bl	80096dc <xTaskIncrementTick>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d003      	beq.n	800a4d8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a4d0:	4b06      	ldr	r3, [pc, #24]	; (800a4ec <SysTick_Handler+0x44>)
 800a4d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4d6:	601a      	str	r2, [r3, #0]
 800a4d8:	2300      	movs	r3, #0
 800a4da:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	f383 8811 	msr	BASEPRI, r3
}
 800a4e2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}
 800a4ec:	e000ed04 	.word	0xe000ed04

0800a4f0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a4f4:	4b0b      	ldr	r3, [pc, #44]	; (800a524 <vPortSetupTimerInterrupt+0x34>)
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a4fa:	4b0b      	ldr	r3, [pc, #44]	; (800a528 <vPortSetupTimerInterrupt+0x38>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <vPortSetupTimerInterrupt+0x3c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a0a      	ldr	r2, [pc, #40]	; (800a530 <vPortSetupTimerInterrupt+0x40>)
 800a506:	fba2 2303 	umull	r2, r3, r2, r3
 800a50a:	099b      	lsrs	r3, r3, #6
 800a50c:	4a09      	ldr	r2, [pc, #36]	; (800a534 <vPortSetupTimerInterrupt+0x44>)
 800a50e:	3b01      	subs	r3, #1
 800a510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a512:	4b04      	ldr	r3, [pc, #16]	; (800a524 <vPortSetupTimerInterrupt+0x34>)
 800a514:	2207      	movs	r2, #7
 800a516:	601a      	str	r2, [r3, #0]
}
 800a518:	bf00      	nop
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr
 800a522:	bf00      	nop
 800a524:	e000e010 	.word	0xe000e010
 800a528:	e000e018 	.word	0xe000e018
 800a52c:	20000018 	.word	0x20000018
 800a530:	10624dd3 	.word	0x10624dd3
 800a534:	e000e014 	.word	0xe000e014

0800a538 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a538:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a548 <vPortEnableVFP+0x10>
 800a53c:	6801      	ldr	r1, [r0, #0]
 800a53e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a542:	6001      	str	r1, [r0, #0]
 800a544:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a546:	bf00      	nop
 800a548:	e000ed88 	.word	0xe000ed88

0800a54c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a552:	f3ef 8305 	mrs	r3, IPSR
 800a556:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2b0f      	cmp	r3, #15
 800a55c:	d916      	bls.n	800a58c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a55e:	4a19      	ldr	r2, [pc, #100]	; (800a5c4 <vPortValidateInterruptPriority+0x78>)
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	4413      	add	r3, r2
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a568:	4b17      	ldr	r3, [pc, #92]	; (800a5c8 <vPortValidateInterruptPriority+0x7c>)
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	7afa      	ldrb	r2, [r7, #11]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d20c      	bcs.n	800a58c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a572:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a576:	b672      	cpsid	i
 800a578:	f383 8811 	msr	BASEPRI, r3
 800a57c:	f3bf 8f6f 	isb	sy
 800a580:	f3bf 8f4f 	dsb	sy
 800a584:	b662      	cpsie	i
 800a586:	607b      	str	r3, [r7, #4]
}
 800a588:	bf00      	nop
 800a58a:	e7fe      	b.n	800a58a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a58c:	4b0f      	ldr	r3, [pc, #60]	; (800a5cc <vPortValidateInterruptPriority+0x80>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a594:	4b0e      	ldr	r3, [pc, #56]	; (800a5d0 <vPortValidateInterruptPriority+0x84>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d90c      	bls.n	800a5b6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a0:	b672      	cpsid	i
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	b662      	cpsie	i
 800a5b0:	603b      	str	r3, [r7, #0]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <vPortValidateInterruptPriority+0x68>
	}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	e000e3f0 	.word	0xe000e3f0
 800a5c8:	20005730 	.word	0x20005730
 800a5cc:	e000ed0c 	.word	0xe000ed0c
 800a5d0:	20005734 	.word	0x20005734

0800a5d4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08a      	sub	sp, #40	; 0x28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a5e0:	f7fe ffae 	bl	8009540 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a5e4:	4b5b      	ldr	r3, [pc, #364]	; (800a754 <pvPortMalloc+0x180>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d101      	bne.n	800a5f0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a5ec:	f000 f91a 	bl	800a824 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a5f0:	4b59      	ldr	r3, [pc, #356]	; (800a758 <pvPortMalloc+0x184>)
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f040 8092 	bne.w	800a722 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d01f      	beq.n	800a644 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a604:	2208      	movs	r2, #8
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4413      	add	r3, r2
 800a60a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	f003 0307 	and.w	r3, r3, #7
 800a612:	2b00      	cmp	r3, #0
 800a614:	d016      	beq.n	800a644 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f023 0307 	bic.w	r3, r3, #7
 800a61c:	3308      	adds	r3, #8
 800a61e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f003 0307 	and.w	r3, r3, #7
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00c      	beq.n	800a644 <pvPortMalloc+0x70>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	b672      	cpsid	i
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	b662      	cpsie	i
 800a63e:	617b      	str	r3, [r7, #20]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d06b      	beq.n	800a722 <pvPortMalloc+0x14e>
 800a64a:	4b44      	ldr	r3, [pc, #272]	; (800a75c <pvPortMalloc+0x188>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	429a      	cmp	r2, r3
 800a652:	d866      	bhi.n	800a722 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a654:	4b42      	ldr	r3, [pc, #264]	; (800a760 <pvPortMalloc+0x18c>)
 800a656:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a658:	4b41      	ldr	r3, [pc, #260]	; (800a760 <pvPortMalloc+0x18c>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a65e:	e004      	b.n	800a66a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	429a      	cmp	r2, r3
 800a672:	d903      	bls.n	800a67c <pvPortMalloc+0xa8>
 800a674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d1f1      	bne.n	800a660 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a67c:	4b35      	ldr	r3, [pc, #212]	; (800a754 <pvPortMalloc+0x180>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a682:	429a      	cmp	r2, r3
 800a684:	d04d      	beq.n	800a722 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a686:	6a3b      	ldr	r3, [r7, #32]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	2208      	movs	r2, #8
 800a68c:	4413      	add	r3, r2
 800a68e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a692:	681a      	ldr	r2, [r3, #0]
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	1ad2      	subs	r2, r2, r3
 800a6a0:	2308      	movs	r3, #8
 800a6a2:	005b      	lsls	r3, r3, #1
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d921      	bls.n	800a6ec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f003 0307 	and.w	r3, r3, #7
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d00c      	beq.n	800a6d4 <pvPortMalloc+0x100>
	__asm volatile
 800a6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6be:	b672      	cpsid	i
 800a6c0:	f383 8811 	msr	BASEPRI, r3
 800a6c4:	f3bf 8f6f 	isb	sy
 800a6c8:	f3bf 8f4f 	dsb	sy
 800a6cc:	b662      	cpsie	i
 800a6ce:	613b      	str	r3, [r7, #16]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	1ad2      	subs	r2, r2, r3
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e2:	687a      	ldr	r2, [r7, #4]
 800a6e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a6e6:	69b8      	ldr	r0, [r7, #24]
 800a6e8:	f000 f8fe 	bl	800a8e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a6ec:	4b1b      	ldr	r3, [pc, #108]	; (800a75c <pvPortMalloc+0x188>)
 800a6ee:	681a      	ldr	r2, [r3, #0]
 800a6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f2:	685b      	ldr	r3, [r3, #4]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	4a19      	ldr	r2, [pc, #100]	; (800a75c <pvPortMalloc+0x188>)
 800a6f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a6fa:	4b18      	ldr	r3, [pc, #96]	; (800a75c <pvPortMalloc+0x188>)
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	4b19      	ldr	r3, [pc, #100]	; (800a764 <pvPortMalloc+0x190>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	429a      	cmp	r2, r3
 800a704:	d203      	bcs.n	800a70e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a706:	4b15      	ldr	r3, [pc, #84]	; (800a75c <pvPortMalloc+0x188>)
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a16      	ldr	r2, [pc, #88]	; (800a764 <pvPortMalloc+0x190>)
 800a70c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	685a      	ldr	r2, [r3, #4]
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <pvPortMalloc+0x184>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	431a      	orrs	r2, r3
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a71e:	2200      	movs	r2, #0
 800a720:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a722:	f7fe ff1b 	bl	800955c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a726:	69fb      	ldr	r3, [r7, #28]
 800a728:	f003 0307 	and.w	r3, r3, #7
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00c      	beq.n	800a74a <pvPortMalloc+0x176>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <pvPortMalloc+0x174>
	return pvReturn;
 800a74a:	69fb      	ldr	r3, [r7, #28]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3728      	adds	r7, #40	; 0x28
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	20009340 	.word	0x20009340
 800a758:	2000934c 	.word	0x2000934c
 800a75c:	20009344 	.word	0x20009344
 800a760:	20009338 	.word	0x20009338
 800a764:	20009348 	.word	0x20009348

0800a768 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b086      	sub	sp, #24
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d04c      	beq.n	800a814 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a77a:	2308      	movs	r3, #8
 800a77c:	425b      	negs	r3, r3
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	4413      	add	r3, r2
 800a782:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	685a      	ldr	r2, [r3, #4]
 800a78c:	4b23      	ldr	r3, [pc, #140]	; (800a81c <vPortFree+0xb4>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4013      	ands	r3, r2
 800a792:	2b00      	cmp	r3, #0
 800a794:	d10c      	bne.n	800a7b0 <vPortFree+0x48>
	__asm volatile
 800a796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79a:	b672      	cpsid	i
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	b662      	cpsie	i
 800a7aa:	60fb      	str	r3, [r7, #12]
}
 800a7ac:	bf00      	nop
 800a7ae:	e7fe      	b.n	800a7ae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00c      	beq.n	800a7d2 <vPortFree+0x6a>
	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	b672      	cpsid	i
 800a7be:	f383 8811 	msr	BASEPRI, r3
 800a7c2:	f3bf 8f6f 	isb	sy
 800a7c6:	f3bf 8f4f 	dsb	sy
 800a7ca:	b662      	cpsie	i
 800a7cc:	60bb      	str	r3, [r7, #8]
}
 800a7ce:	bf00      	nop
 800a7d0:	e7fe      	b.n	800a7d0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4b11      	ldr	r3, [pc, #68]	; (800a81c <vPortFree+0xb4>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4013      	ands	r3, r2
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d019      	beq.n	800a814 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d115      	bne.n	800a814 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	685a      	ldr	r2, [r3, #4]
 800a7ec:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <vPortFree+0xb4>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	43db      	mvns	r3, r3
 800a7f2:	401a      	ands	r2, r3
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a7f8:	f7fe fea2 	bl	8009540 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	4b07      	ldr	r3, [pc, #28]	; (800a820 <vPortFree+0xb8>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	4413      	add	r3, r2
 800a806:	4a06      	ldr	r2, [pc, #24]	; (800a820 <vPortFree+0xb8>)
 800a808:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a80a:	6938      	ldr	r0, [r7, #16]
 800a80c:	f000 f86c 	bl	800a8e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a810:	f7fe fea4 	bl	800955c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a814:	bf00      	nop
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	2000934c 	.word	0x2000934c
 800a820:	20009344 	.word	0x20009344

0800a824 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a824:	b480      	push	{r7}
 800a826:	b085      	sub	sp, #20
 800a828:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a82a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a82e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a830:	4b27      	ldr	r3, [pc, #156]	; (800a8d0 <prvHeapInit+0xac>)
 800a832:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f003 0307 	and.w	r3, r3, #7
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d00c      	beq.n	800a858 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	3307      	adds	r3, #7
 800a842:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0307 	bic.w	r3, r3, #7
 800a84a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a84c:	68ba      	ldr	r2, [r7, #8]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	1ad3      	subs	r3, r2, r3
 800a852:	4a1f      	ldr	r2, [pc, #124]	; (800a8d0 <prvHeapInit+0xac>)
 800a854:	4413      	add	r3, r2
 800a856:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a85c:	4a1d      	ldr	r2, [pc, #116]	; (800a8d4 <prvHeapInit+0xb0>)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a862:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <prvHeapInit+0xb0>)
 800a864:	2200      	movs	r2, #0
 800a866:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	4413      	add	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a870:	2208      	movs	r2, #8
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	1a9b      	subs	r3, r3, r2
 800a876:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f023 0307 	bic.w	r3, r3, #7
 800a87e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	4a15      	ldr	r2, [pc, #84]	; (800a8d8 <prvHeapInit+0xb4>)
 800a884:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a886:	4b14      	ldr	r3, [pc, #80]	; (800a8d8 <prvHeapInit+0xb4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	2200      	movs	r2, #0
 800a88c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a88e:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <prvHeapInit+0xb4>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2200      	movs	r2, #0
 800a894:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8a4:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <prvHeapInit+0xb4>)
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	4a0a      	ldr	r2, [pc, #40]	; (800a8dc <prvHeapInit+0xb8>)
 800a8b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a8b4:	683b      	ldr	r3, [r7, #0]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	4a09      	ldr	r2, [pc, #36]	; (800a8e0 <prvHeapInit+0xbc>)
 800a8ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <prvHeapInit+0xc0>)
 800a8be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a8c2:	601a      	str	r2, [r3, #0]
}
 800a8c4:	bf00      	nop
 800a8c6:	3714      	adds	r7, #20
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr
 800a8d0:	20005738 	.word	0x20005738
 800a8d4:	20009338 	.word	0x20009338
 800a8d8:	20009340 	.word	0x20009340
 800a8dc:	20009348 	.word	0x20009348
 800a8e0:	20009344 	.word	0x20009344
 800a8e4:	2000934c 	.word	0x2000934c

0800a8e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a8f0:	4b28      	ldr	r3, [pc, #160]	; (800a994 <prvInsertBlockIntoFreeList+0xac>)
 800a8f2:	60fb      	str	r3, [r7, #12]
 800a8f4:	e002      	b.n	800a8fc <prvInsertBlockIntoFreeList+0x14>
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	60fb      	str	r3, [r7, #12]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	429a      	cmp	r2, r3
 800a904:	d8f7      	bhi.n	800a8f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	4413      	add	r3, r2
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	429a      	cmp	r2, r3
 800a916:	d108      	bne.n	800a92a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	685a      	ldr	r2, [r3, #4]
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	441a      	add	r2, r3
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	68ba      	ldr	r2, [r7, #8]
 800a934:	441a      	add	r2, r3
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d118      	bne.n	800a970 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b15      	ldr	r3, [pc, #84]	; (800a998 <prvInsertBlockIntoFreeList+0xb0>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	429a      	cmp	r2, r3
 800a948:	d00d      	beq.n	800a966 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	441a      	add	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681a      	ldr	r2, [r3, #0]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	e008      	b.n	800a978 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a966:	4b0c      	ldr	r3, [pc, #48]	; (800a998 <prvInsertBlockIntoFreeList+0xb0>)
 800a968:	681a      	ldr	r2, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	601a      	str	r2, [r3, #0]
 800a96e:	e003      	b.n	800a978 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d002      	beq.n	800a986 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	687a      	ldr	r2, [r7, #4]
 800a984:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a986:	bf00      	nop
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	20009338 	.word	0x20009338
 800a998:	20009340 	.word	0x20009340

0800a99c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
 800a9a4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a9a6:	f009 fd0d 	bl	80143c4 <sys_timeouts_sleeptime>
 800a9aa:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	d10b      	bne.n	800a9cc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a9b4:	4813      	ldr	r0, [pc, #76]	; (800aa04 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9b6:	f00e fc3a 	bl	801922e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f00e fbac 	bl	801911c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a9c4:	480f      	ldr	r0, [pc, #60]	; (800aa04 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9c6:	f00e fc23 	bl	8019210 <sys_mutex_lock>
    return;
 800a9ca:	e018      	b.n	800a9fe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a9d2:	f009 fcbd 	bl	8014350 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a9d6:	e7e6      	b.n	800a9a6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a9d8:	480a      	ldr	r0, [pc, #40]	; (800aa04 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9da:	f00e fc28 	bl	801922e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a9de:	68fa      	ldr	r2, [r7, #12]
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f00e fb9a 	bl	801911c <sys_arch_mbox_fetch>
 800a9e8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a9ea:	4806      	ldr	r0, [pc, #24]	; (800aa04 <tcpip_timeouts_mbox_fetch+0x68>)
 800a9ec:	f00e fc10 	bl	8019210 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d102      	bne.n	800a9fe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a9f8:	f009 fcaa 	bl	8014350 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a9fc:	e7d3      	b.n	800a9a6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	2000935c 	.word	0x2000935c

0800aa08 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800aa10:	4810      	ldr	r0, [pc, #64]	; (800aa54 <tcpip_thread+0x4c>)
 800aa12:	f00e fbfd 	bl	8019210 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800aa16:	4b10      	ldr	r3, [pc, #64]	; (800aa58 <tcpip_thread+0x50>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d005      	beq.n	800aa2a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800aa1e:	4b0e      	ldr	r3, [pc, #56]	; (800aa58 <tcpip_thread+0x50>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a0e      	ldr	r2, [pc, #56]	; (800aa5c <tcpip_thread+0x54>)
 800aa24:	6812      	ldr	r2, [r2, #0]
 800aa26:	4610      	mov	r0, r2
 800aa28:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aa2a:	f107 030c 	add.w	r3, r7, #12
 800aa2e:	4619      	mov	r1, r3
 800aa30:	480b      	ldr	r0, [pc, #44]	; (800aa60 <tcpip_thread+0x58>)
 800aa32:	f7ff ffb3 	bl	800a99c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d106      	bne.n	800aa4a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aa3c:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <tcpip_thread+0x5c>)
 800aa3e:	2291      	movs	r2, #145	; 0x91
 800aa40:	4909      	ldr	r1, [pc, #36]	; (800aa68 <tcpip_thread+0x60>)
 800aa42:	480a      	ldr	r0, [pc, #40]	; (800aa6c <tcpip_thread+0x64>)
 800aa44:	f00e fdc2 	bl	80195cc <iprintf>
      continue;
 800aa48:	e003      	b.n	800aa52 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 f80f 	bl	800aa70 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800aa52:	e7ea      	b.n	800aa2a <tcpip_thread+0x22>
 800aa54:	2000935c 	.word	0x2000935c
 800aa58:	20009350 	.word	0x20009350
 800aa5c:	20009354 	.word	0x20009354
 800aa60:	20009358 	.word	0x20009358
 800aa64:	0801a5b0 	.word	0x0801a5b0
 800aa68:	0801a5e0 	.word	0x0801a5e0
 800aa6c:	0801a600 	.word	0x0801a600

0800aa70 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b082      	sub	sp, #8
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	781b      	ldrb	r3, [r3, #0]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d026      	beq.n	800aace <tcpip_thread_handle_msg+0x5e>
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	dc2b      	bgt.n	800aadc <tcpip_thread_handle_msg+0x6c>
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d002      	beq.n	800aa8e <tcpip_thread_handle_msg+0x1e>
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d015      	beq.n	800aab8 <tcpip_thread_handle_msg+0x48>
 800aa8c:	e026      	b.n	800aadc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	687a      	ldr	r2, [r7, #4]
 800aa94:	6850      	ldr	r0, [r2, #4]
 800aa96:	687a      	ldr	r2, [r7, #4]
 800aa98:	6892      	ldr	r2, [r2, #8]
 800aa9a:	4611      	mov	r1, r2
 800aa9c:	4798      	blx	r3
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d004      	beq.n	800aaae <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f003 f845 	bl	800db38 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aaae:	6879      	ldr	r1, [r7, #4]
 800aab0:	2009      	movs	r0, #9
 800aab2:	f002 f991 	bl	800cdd8 <memp_free>
      break;
 800aab6:	e018      	b.n	800aaea <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	685b      	ldr	r3, [r3, #4]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	6892      	ldr	r2, [r2, #8]
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800aac4:	6879      	ldr	r1, [r7, #4]
 800aac6:	2008      	movs	r0, #8
 800aac8:	f002 f986 	bl	800cdd8 <memp_free>
      break;
 800aacc:	e00d      	b.n	800aaea <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	6892      	ldr	r2, [r2, #8]
 800aad6:	4610      	mov	r0, r2
 800aad8:	4798      	blx	r3
      break;
 800aada:	e006      	b.n	800aaea <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800aadc:	4b05      	ldr	r3, [pc, #20]	; (800aaf4 <tcpip_thread_handle_msg+0x84>)
 800aade:	22cf      	movs	r2, #207	; 0xcf
 800aae0:	4905      	ldr	r1, [pc, #20]	; (800aaf8 <tcpip_thread_handle_msg+0x88>)
 800aae2:	4806      	ldr	r0, [pc, #24]	; (800aafc <tcpip_thread_handle_msg+0x8c>)
 800aae4:	f00e fd72 	bl	80195cc <iprintf>
      break;
 800aae8:	bf00      	nop
  }
}
 800aaea:	bf00      	nop
 800aaec:	3708      	adds	r7, #8
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
 800aaf2:	bf00      	nop
 800aaf4:	0801a5b0 	.word	0x0801a5b0
 800aaf8:	0801a5e0 	.word	0x0801a5e0
 800aafc:	0801a600 	.word	0x0801a600

0800ab00 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b086      	sub	sp, #24
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	60b9      	str	r1, [r7, #8]
 800ab0a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ab0c:	481a      	ldr	r0, [pc, #104]	; (800ab78 <tcpip_inpkt+0x78>)
 800ab0e:	f00e fb44 	bl	801919a <sys_mbox_valid>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <tcpip_inpkt+0x24>
 800ab18:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <tcpip_inpkt+0x7c>)
 800ab1a:	22fc      	movs	r2, #252	; 0xfc
 800ab1c:	4918      	ldr	r1, [pc, #96]	; (800ab80 <tcpip_inpkt+0x80>)
 800ab1e:	4819      	ldr	r0, [pc, #100]	; (800ab84 <tcpip_inpkt+0x84>)
 800ab20:	f00e fd54 	bl	80195cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ab24:	2009      	movs	r0, #9
 800ab26:	f002 f8e1 	bl	800ccec <memp_malloc>
 800ab2a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d102      	bne.n	800ab38 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ab32:	f04f 33ff 	mov.w	r3, #4294967295
 800ab36:	e01a      	b.n	800ab6e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ab50:	6979      	ldr	r1, [r7, #20]
 800ab52:	4809      	ldr	r0, [pc, #36]	; (800ab78 <tcpip_inpkt+0x78>)
 800ab54:	f00e fac8 	bl	80190e8 <sys_mbox_trypost>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d006      	beq.n	800ab6c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ab5e:	6979      	ldr	r1, [r7, #20]
 800ab60:	2009      	movs	r0, #9
 800ab62:	f002 f939 	bl	800cdd8 <memp_free>
    return ERR_MEM;
 800ab66:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6a:	e000      	b.n	800ab6e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ab6c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3718      	adds	r7, #24
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
 800ab76:	bf00      	nop
 800ab78:	20009358 	.word	0x20009358
 800ab7c:	0801a5b0 	.word	0x0801a5b0
 800ab80:	0801a628 	.word	0x0801a628
 800ab84:	0801a600 	.word	0x0801a600

0800ab88 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
 800ab90:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab98:	f003 0318 	and.w	r3, r3, #24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d006      	beq.n	800abae <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800aba0:	4a08      	ldr	r2, [pc, #32]	; (800abc4 <tcpip_input+0x3c>)
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f7ff ffab 	bl	800ab00 <tcpip_inpkt>
 800abaa:	4603      	mov	r3, r0
 800abac:	e005      	b.n	800abba <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800abae:	4a06      	ldr	r2, [pc, #24]	; (800abc8 <tcpip_input+0x40>)
 800abb0:	6839      	ldr	r1, [r7, #0]
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff ffa4 	bl	800ab00 <tcpip_inpkt>
 800abb8:	4603      	mov	r3, r0
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3708      	adds	r7, #8
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	08018ef9 	.word	0x08018ef9
 800abc8:	08017dc5 	.word	0x08017dc5

0800abcc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800abd6:	4819      	ldr	r0, [pc, #100]	; (800ac3c <tcpip_try_callback+0x70>)
 800abd8:	f00e fadf 	bl	801919a <sys_mbox_valid>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d106      	bne.n	800abf0 <tcpip_try_callback+0x24>
 800abe2:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <tcpip_try_callback+0x74>)
 800abe4:	f240 125d 	movw	r2, #349	; 0x15d
 800abe8:	4916      	ldr	r1, [pc, #88]	; (800ac44 <tcpip_try_callback+0x78>)
 800abea:	4817      	ldr	r0, [pc, #92]	; (800ac48 <tcpip_try_callback+0x7c>)
 800abec:	f00e fcee 	bl	80195cc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800abf0:	2008      	movs	r0, #8
 800abf2:	f002 f87b 	bl	800ccec <memp_malloc>
 800abf6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800abfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ac02:	e017      	b.n	800ac34 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2201      	movs	r2, #1
 800ac08:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	683a      	ldr	r2, [r7, #0]
 800ac14:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ac16:	68f9      	ldr	r1, [r7, #12]
 800ac18:	4808      	ldr	r0, [pc, #32]	; (800ac3c <tcpip_try_callback+0x70>)
 800ac1a:	f00e fa65 	bl	80190e8 <sys_mbox_trypost>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d006      	beq.n	800ac32 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800ac24:	68f9      	ldr	r1, [r7, #12]
 800ac26:	2008      	movs	r0, #8
 800ac28:	f002 f8d6 	bl	800cdd8 <memp_free>
    return ERR_MEM;
 800ac2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ac30:	e000      	b.n	800ac34 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	20009358 	.word	0x20009358
 800ac40:	0801a5b0 	.word	0x0801a5b0
 800ac44:	0801a628 	.word	0x0801a628
 800ac48:	0801a600 	.word	0x0801a600

0800ac4c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ac56:	f001 fb9f 	bl	800c398 <lwip_init>

  tcpip_init_done = initfunc;
 800ac5a:	4a17      	ldr	r2, [pc, #92]	; (800acb8 <tcpip_init+0x6c>)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ac60:	4a16      	ldr	r2, [pc, #88]	; (800acbc <tcpip_init+0x70>)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ac66:	2106      	movs	r1, #6
 800ac68:	4815      	ldr	r0, [pc, #84]	; (800acc0 <tcpip_init+0x74>)
 800ac6a:	f00e fa1b 	bl	80190a4 <sys_mbox_new>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d006      	beq.n	800ac82 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ac74:	4b13      	ldr	r3, [pc, #76]	; (800acc4 <tcpip_init+0x78>)
 800ac76:	f240 2261 	movw	r2, #609	; 0x261
 800ac7a:	4913      	ldr	r1, [pc, #76]	; (800acc8 <tcpip_init+0x7c>)
 800ac7c:	4813      	ldr	r0, [pc, #76]	; (800accc <tcpip_init+0x80>)
 800ac7e:	f00e fca5 	bl	80195cc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ac82:	4813      	ldr	r0, [pc, #76]	; (800acd0 <tcpip_init+0x84>)
 800ac84:	f00e faa8 	bl	80191d8 <sys_mutex_new>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d006      	beq.n	800ac9c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ac8e:	4b0d      	ldr	r3, [pc, #52]	; (800acc4 <tcpip_init+0x78>)
 800ac90:	f240 2265 	movw	r2, #613	; 0x265
 800ac94:	490f      	ldr	r1, [pc, #60]	; (800acd4 <tcpip_init+0x88>)
 800ac96:	480d      	ldr	r0, [pc, #52]	; (800accc <tcpip_init+0x80>)
 800ac98:	f00e fc98 	bl	80195cc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aca4:	2200      	movs	r2, #0
 800aca6:	490c      	ldr	r1, [pc, #48]	; (800acd8 <tcpip_init+0x8c>)
 800aca8:	480c      	ldr	r0, [pc, #48]	; (800acdc <tcpip_init+0x90>)
 800acaa:	f00e facd 	bl	8019248 <sys_thread_new>
}
 800acae:	bf00      	nop
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20009350 	.word	0x20009350
 800acbc:	20009354 	.word	0x20009354
 800acc0:	20009358 	.word	0x20009358
 800acc4:	0801a5b0 	.word	0x0801a5b0
 800acc8:	0801a638 	.word	0x0801a638
 800accc:	0801a600 	.word	0x0801a600
 800acd0:	2000935c 	.word	0x2000935c
 800acd4:	0801a65c 	.word	0x0801a65c
 800acd8:	0800aa09 	.word	0x0800aa09
 800acdc:	0801a680 	.word	0x0801a680

0800ace0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <fs_open+0x16>
 800acf0:	683b      	ldr	r3, [r7, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <fs_open+0x1c>
    return ERR_ARG;
 800acf6:	f06f 030f 	mvn.w	r3, #15
 800acfa:	e028      	b.n	800ad4e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800acfc:	4b16      	ldr	r3, [pc, #88]	; (800ad58 <fs_open+0x78>)
 800acfe:	60fb      	str	r3, [r7, #12]
 800ad00:	e020      	b.n	800ad44 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	685b      	ldr	r3, [r3, #4]
 800ad06:	4619      	mov	r1, r3
 800ad08:	6838      	ldr	r0, [r7, #0]
 800ad0a:	f7f5 fa81 	bl	8000210 <strcmp>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d114      	bne.n	800ad3e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	689a      	ldr	r2, [r3, #8]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	68da      	ldr	r2, [r3, #12]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2200      	movs	r2, #0
 800ad30:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	7c1a      	ldrb	r2, [r3, #16]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	e007      	b.n	800ad4e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	60fb      	str	r3, [r7, #12]
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1db      	bne.n	800ad02 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ad4a:	f06f 0305 	mvn.w	r3, #5
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	0801fa44 	.word	0x0801fa44

0800ad5c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b083      	sub	sp, #12
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ad64:	bf00      	nop
 800ad66:	370c      	adds	r7, #12
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b083      	sub	sp, #12
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	689b      	ldr	r3, [r3, #8]
 800ad80:	1ad3      	subs	r3, r2, r3
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	370c      	adds	r7, #12
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr

0800ad8e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800ad94:	20e0      	movs	r0, #224	; 0xe0
 800ad96:	f001 fe05 	bl	800c9a4 <mem_malloc>
 800ad9a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d004      	beq.n	800adac <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800ada2:	22e0      	movs	r2, #224	; 0xe0
 800ada4:	2100      	movs	r1, #0
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f00e fc75 	bl	8019696 <memset>
  }
  return ret;
 800adac:	687b      	ldr	r3, [r7, #4]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b082      	sub	sp, #8
 800adba:	af00      	add	r7, sp, #0
 800adbc:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 fc53 	bl	800c670 <mem_free>
  }
}
 800adca:	bf00      	nop
 800adcc:	3708      	adds	r7, #8
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b082      	sub	sp, #8
 800add6:	af00      	add	r7, sp, #0
 800add8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800adda:	22b0      	movs	r2, #176	; 0xb0
 800addc:	2100      	movs	r1, #0
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f00e fc59 	bl	8019696 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800ade4:	bf00      	nop
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800adf2:	20b0      	movs	r0, #176	; 0xb0
 800adf4:	f001 fdd6 	bl	800c9a4 <mem_malloc>
 800adf8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <http_state_alloc+0x1a>
    http_state_init(ret);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f7ff ffe6 	bl	800add2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800ae06:	687b      	ldr	r3, [r7, #4]
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	695b      	ldr	r3, [r3, #20]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d007      	beq.n	800ae30 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7ff ff99 	bl	800ad5c <fs_close>
    hs->handle = NULL;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff ffba 	bl	800adb6 <http_ssi_state_free>
    hs->ssi = NULL;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d007      	beq.n	800ae60 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a1b      	ldr	r3, [r3, #32]
 800ae54:	4618      	mov	r0, r3
 800ae56:	f002 fe6f 	bl	800db38 <pbuf_free>
    hs->req = NULL;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800ae60:	bf00      	nop
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d005      	beq.n	800ae82 <http_state_free+0x1a>
    http_state_eof(hs);
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f7ff ffca 	bl	800ae10 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f001 fbf7 	bl	800c670 <mem_free>
  }
}
 800ae82:	bf00      	nop
 800ae84:	3708      	adds	r7, #8
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b086      	sub	sp, #24
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	60f8      	str	r0, [r7, #12]
 800ae94:	60b9      	str	r1, [r7, #8]
 800ae96:	607a      	str	r2, [r7, #4]
 800ae98:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d106      	bne.n	800aeae <http_write+0x22>
 800aea0:	4b2c      	ldr	r3, [pc, #176]	; (800af54 <http_write+0xc8>)
 800aea2:	f240 2219 	movw	r2, #537	; 0x219
 800aea6:	492c      	ldr	r1, [pc, #176]	; (800af58 <http_write+0xcc>)
 800aea8:	482c      	ldr	r0, [pc, #176]	; (800af5c <http_write+0xd0>)
 800aeaa:	f00e fb8f 	bl	80195cc <iprintf>
  len = *length;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800aeb4:	8afb      	ldrh	r3, [r7, #22]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <http_write+0x32>
    return ERR_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	e045      	b.n	800af4a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aec4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800aec6:	8aba      	ldrh	r2, [r7, #20]
 800aec8:	8afb      	ldrh	r3, [r7, #22]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d201      	bcs.n	800aed2 <http_write+0x46>
    len = max_len;
 800aece:	8abb      	ldrh	r3, [r7, #20]
 800aed0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aed6:	005b      	lsls	r3, r3, #1
 800aed8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800aeda:	8afa      	ldrh	r2, [r7, #22]
 800aedc:	8abb      	ldrh	r3, [r7, #20]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d901      	bls.n	800aee6 <http_write+0x5a>
    len = max_len;
 800aee2:	8abb      	ldrh	r3, [r7, #20]
 800aee4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800aee6:	78fb      	ldrb	r3, [r7, #3]
 800aee8:	8afa      	ldrh	r2, [r7, #22]
 800aeea:	68b9      	ldr	r1, [r7, #8]
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f007 fbc7 	bl	8012680 <tcp_write>
 800aef2:	4603      	mov	r3, r0
 800aef4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800aef6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800aefa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aefe:	d10f      	bne.n	800af20 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800af10:	2b08      	cmp	r3, #8
 800af12:	d902      	bls.n	800af1a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800af14:	2301      	movs	r3, #1
 800af16:	82fb      	strh	r3, [r7, #22]
 800af18:	e002      	b.n	800af20 <http_write+0x94>
      } else {
        len /= 2;
 800af1a:	8afb      	ldrh	r3, [r7, #22]
 800af1c:	085b      	lsrs	r3, r3, #1
 800af1e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800af20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af28:	d102      	bne.n	800af30 <http_write+0xa4>
 800af2a:	8afb      	ldrh	r3, [r7, #22]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d8da      	bhi.n	800aee6 <http_write+0x5a>

  if (err == ERR_OK) {
 800af30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	8afa      	ldrh	r2, [r7, #22]
 800af3c:	801a      	strh	r2, [r3, #0]
 800af3e:	e002      	b.n	800af46 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2200      	movs	r2, #0
 800af44:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800af46:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3718      	adds	r7, #24
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	0801a70c 	.word	0x0801a70c
 800af58:	0801a744 	.word	0x0801a744
 800af5c:	0801a754 	.word	0x0801a754

0800af60 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af00      	add	r7, sp, #0
 800af66:	60f8      	str	r0, [r7, #12]
 800af68:	60b9      	str	r1, [r7, #8]
 800af6a:	4613      	mov	r3, r2
 800af6c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800af6e:	2100      	movs	r1, #0
 800af70:	68f8      	ldr	r0, [r7, #12]
 800af72:	f004 fc43 	bl	800f7fc <tcp_arg>
  altcp_recv(pcb, NULL);
 800af76:	2100      	movs	r1, #0
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f004 fc51 	bl	800f820 <tcp_recv>
  altcp_err(pcb, NULL);
 800af7e:	2100      	movs	r1, #0
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f004 fc91 	bl	800f8a8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800af86:	2200      	movs	r2, #0
 800af88:	2100      	movs	r1, #0
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f004 fcc6 	bl	800f91c <tcp_poll>
  altcp_sent(pcb, NULL);
 800af90:	2100      	movs	r1, #0
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f004 fc66 	bl	800f864 <tcp_sent>
  if (hs != NULL) {
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800af9e:	68b8      	ldr	r0, [r7, #8]
 800afa0:	f7ff ff62 	bl	800ae68 <http_state_free>
  }

  if (abort_conn) {
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d004      	beq.n	800afb4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f003 fb68 	bl	800e680 <tcp_abort>
    return ERR_OK;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e00f      	b.n	800afd4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800afb4:	68f8      	ldr	r0, [r7, #12]
 800afb6:	f003 fa79 	bl	800e4ac <tcp_close>
 800afba:	4603      	mov	r3, r0
 800afbc:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800afbe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d004      	beq.n	800afd0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800afc6:	2204      	movs	r2, #4
 800afc8:	4904      	ldr	r1, [pc, #16]	; (800afdc <http_close_or_abort_conn+0x7c>)
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f004 fca6 	bl	800f91c <tcp_poll>
  }
  return err;
 800afd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}
 800afdc:	0800bf63 	.word	0x0800bf63

0800afe0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
 800afe8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800afea:	2200      	movs	r2, #0
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f7ff ffb6 	bl	800af60 <http_close_or_abort_conn>
 800aff4:	4603      	mov	r3, r0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800affe:	b580      	push	{r7, lr}
 800b000:	b082      	sub	sp, #8
 800b002:	af00      	add	r7, sp, #0
 800b004:	6078      	str	r0, [r7, #4]
 800b006:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f7ff ffe8 	bl	800afe0 <http_close_conn>
  }
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b086      	sub	sp, #24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
 800b020:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d003      	beq.n	800b030 <extract_uri_parameters+0x18>
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <extract_uri_parameters+0x1c>
    return (0);
 800b030:	2300      	movs	r3, #0
 800b032:	e04b      	b.n	800b0cc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b038:	2300      	movs	r3, #0
 800b03a:	613b      	str	r3, [r7, #16]
 800b03c:	e03f      	b.n	800b0be <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	693a      	ldr	r2, [r7, #16]
 800b042:	320c      	adds	r2, #12
 800b044:	6979      	ldr	r1, [r7, #20]
 800b046:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800b04e:	2126      	movs	r1, #38	; 0x26
 800b050:	6978      	ldr	r0, [r7, #20]
 800b052:	f00e fb28 	bl	80196a6 <strchr>
 800b056:	6178      	str	r0, [r7, #20]
    if (pair) {
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <extract_uri_parameters+0x54>
      *pair = '\0';
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	2200      	movs	r2, #0
 800b062:	701a      	strb	r2, [r3, #0]
      pair++;
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	3301      	adds	r3, #1
 800b068:	617b      	str	r3, [r7, #20]
 800b06a:	e00c      	b.n	800b086 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800b06c:	2120      	movs	r1, #32
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f00e fb19 	bl	80196a6 <strchr>
 800b074:	6178      	str	r0, [r7, #20]
      if (pair) {
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	2200      	movs	r2, #0
 800b080:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800b086:	213d      	movs	r1, #61	; 0x3d
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f00e fb0c 	bl	80196a6 <strchr>
 800b08e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00a      	beq.n	800b0ac <extract_uri_parameters+0x94>
      *equals = '\0';
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	2200      	movs	r2, #0
 800b09a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	1c59      	adds	r1, r3, #1
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	693a      	ldr	r2, [r7, #16]
 800b0a4:	321c      	adds	r2, #28
 800b0a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b0aa:	e005      	b.n	800b0b8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	321c      	adds	r2, #28
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800b0b8:	693b      	ldr	r3, [r7, #16]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	613b      	str	r3, [r7, #16]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	2b0f      	cmp	r3, #15
 800b0c2:	dc02      	bgt.n	800b0ca <extract_uri_parameters+0xb2>
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1b9      	bne.n	800b03e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800b0ca:	693b      	ldr	r3, [r7, #16]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d106      	bne.n	800b0f0 <get_tag_insert+0x1c>
 800b0e2:	4b45      	ldr	r3, [pc, #276]	; (800b1f8 <get_tag_insert+0x124>)
 800b0e4:	f44f 7241 	mov.w	r2, #772	; 0x304
 800b0e8:	4944      	ldr	r1, [pc, #272]	; (800b1fc <get_tag_insert+0x128>)
 800b0ea:	4845      	ldr	r0, [pc, #276]	; (800b200 <get_tag_insert+0x12c>)
 800b0ec:	f00e fa6e 	bl	80195cc <iprintf>
  ssi = hs->ssi;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b0f6:	697b      	ldr	r3, [r7, #20]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d106      	bne.n	800b10a <get_tag_insert+0x36>
 800b0fc:	4b3e      	ldr	r3, [pc, #248]	; (800b1f8 <get_tag_insert+0x124>)
 800b0fe:	f240 3206 	movw	r2, #774	; 0x306
 800b102:	4940      	ldr	r1, [pc, #256]	; (800b204 <get_tag_insert+0x130>)
 800b104:	483e      	ldr	r0, [pc, #248]	; (800b200 <get_tag_insert+0x12c>)
 800b106:	f00e fa61 	bl	80195cc <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	3312      	adds	r3, #18
 800b10e:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 800b110:	4b3d      	ldr	r3, [pc, #244]	; (800b208 <get_tag_insert+0x134>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d011      	beq.n	800b13c <get_tag_insert+0x68>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800b118:	4b3b      	ldr	r3, [pc, #236]	; (800b208 <get_tag_insert+0x134>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	f102 011b 	add.w	r1, r2, #27
 800b122:	22c0      	movs	r2, #192	; 0xc0
 800b124:	6938      	ldr	r0, [r7, #16]
 800b126:	4798      	blx	r3
 800b128:	4603      	mov	r3, r0
 800b12a:	461a      	mov	r2, r3
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	89db      	ldrh	r3, [r3, #14]
 800b134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b138:	4293      	cmp	r3, r2
 800b13a:	d159      	bne.n	800b1f0 <get_tag_insert+0x11c>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	3312      	adds	r3, #18
 800b140:	4618      	mov	r0, r3
 800b142:	f7f5 f86f 	bl	8000224 <strlen>
 800b146:	4603      	mov	r3, r0
 800b148:	2ba6      	cmp	r3, #166	; 0xa6
 800b14a:	d818      	bhi.n	800b17e <get_tag_insert+0xaa>
 800b14c:	697b      	ldr	r3, [r7, #20]
 800b14e:	3312      	adds	r3, #18
 800b150:	4618      	mov	r0, r3
 800b152:	f7f5 f867 	bl	8000224 <strlen>
 800b156:	4603      	mov	r3, r0
 800b158:	2b09      	cmp	r3, #9
 800b15a:	d810      	bhi.n	800b17e <get_tag_insert+0xaa>
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	3312      	adds	r3, #18
 800b160:	4618      	mov	r0, r3
 800b162:	f7f5 f85f 	bl	8000224 <strlen>
 800b166:	4603      	mov	r3, r0
 800b168:	2ba6      	cmp	r3, #166	; 0xa6
 800b16a:	d806      	bhi.n	800b17a <get_tag_insert+0xa6>
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	3312      	adds	r3, #18
 800b170:	4618      	mov	r0, r3
 800b172:	f7f5 f857 	bl	8000224 <strlen>
 800b176:	4603      	mov	r3, r0
 800b178:	e002      	b.n	800b180 <get_tag_insert+0xac>
 800b17a:	23a7      	movs	r3, #167	; 0xa7
 800b17c:	e000      	b.n	800b180 <get_tag_insert+0xac>
 800b17e:	2309      	movs	r3, #9
 800b180:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	331b      	adds	r3, #27
 800b186:	2212      	movs	r2, #18
 800b188:	4920      	ldr	r1, [pc, #128]	; (800b20c <get_tag_insert+0x138>)
 800b18a:	4618      	mov	r0, r3
 800b18c:	f00e fb1c 	bl	80197c8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	3312      	adds	r3, #18
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	4619      	mov	r1, r3
 800b19e:	f00e fb13 	bl	80197c8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3312      	adds	r3, #18
 800b1a6:	3318      	adds	r3, #24
 800b1a8:	697a      	ldr	r2, [r7, #20]
 800b1aa:	4413      	add	r3, r2
 800b1ac:	3303      	adds	r3, #3
 800b1ae:	2207      	movs	r2, #7
 800b1b0:	4917      	ldr	r1, [pc, #92]	; (800b210 <get_tag_insert+0x13c>)
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f00e fb08 	bl	80197c8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	3319      	adds	r3, #25
 800b1bc:	697a      	ldr	r2, [r7, #20]
 800b1be:	4413      	add	r3, r2
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	331b      	adds	r3, #27
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7f5 f82b 	bl	8000224 <strlen>
 800b1ce:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1d6:	d306      	bcc.n	800b1e6 <get_tag_insert+0x112>
 800b1d8:	4b07      	ldr	r3, [pc, #28]	; (800b1f8 <get_tag_insert+0x124>)
 800b1da:	f240 323f 	movw	r2, #831	; 0x33f
 800b1de:	490d      	ldr	r1, [pc, #52]	; (800b214 <get_tag_insert+0x140>)
 800b1e0:	4807      	ldr	r0, [pc, #28]	; (800b200 <get_tag_insert+0x12c>)
 800b1e2:	f00e f9f3 	bl	80195cc <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	b29a      	uxth	r2, r3
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	81da      	strh	r2, [r3, #14]
 800b1ee:	e000      	b.n	800b1f2 <get_tag_insert+0x11e>
          return;
 800b1f0:	bf00      	nop
}
 800b1f2:	3718      	adds	r7, #24
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	0801a70c 	.word	0x0801a70c
 800b1fc:	0801a77c 	.word	0x0801a77c
 800b200:	0801a754 	.word	0x0801a754
 800b204:	0801a788 	.word	0x0801a788
 800b208:	200097a0 	.word	0x200097a0
 800b20c:	0801a794 	.word	0x0801a794
 800b210:	0801a7a8 	.word	0x0801a7a8
 800b214:	0801a7b0 	.word	0x0801a7b0

0800b218 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b084      	sub	sp, #16
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d105      	bne.n	800b236 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800b22a:	6839      	ldr	r1, [r7, #0]
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff fee6 	bl	800affe <http_eof>
    return 0;
 800b232:	2300      	movs	r3, #0
 800b234:	e016      	b.n	800b264 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	695b      	ldr	r3, [r3, #20]
 800b23a:	4618      	mov	r0, r3
 800b23c:	f7ff fd98 	bl	800ad70 <fs_bytes_left>
 800b240:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2b00      	cmp	r3, #0
 800b246:	dc05      	bgt.n	800b254 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b248:	6839      	ldr	r1, [r7, #0]
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f7ff fed7 	bl	800affe <http_eof>
    return 0;
 800b250:	2300      	movs	r3, #0
 800b252:	e007      	b.n	800b264 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <http_check_eof+0x54>)
 800b256:	f240 429d 	movw	r2, #1181	; 0x49d
 800b25a:	4905      	ldr	r1, [pc, #20]	; (800b270 <http_check_eof+0x58>)
 800b25c:	4805      	ldr	r0, [pc, #20]	; (800b274 <http_check_eof+0x5c>)
 800b25e:	f00e f9b5 	bl	80195cc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800b262:	2301      	movs	r3, #1
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	0801a70c 	.word	0x0801a70c
 800b270:	0801a7c0 	.word	0x0801a7c0
 800b274:	0801a754 	.word	0x0801a754

0800b278 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800b282:	2300      	movs	r3, #0
 800b284:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b28e:	4293      	cmp	r3, r2
 800b290:	d803      	bhi.n	800b29a <http_send_data_nonssi+0x22>
 800b292:	683b      	ldr	r3, [r7, #0]
 800b294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b296:	b29b      	uxth	r3, r3
 800b298:	e001      	b.n	800b29e <http_send_data_nonssi+0x26>
 800b29a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b29e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	6999      	ldr	r1, [r3, #24]
 800b2a4:	f107 020c 	add.w	r2, r7, #12
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	6878      	ldr	r0, [r7, #4]
 800b2ac:	f7ff fdee 	bl	800ae8c <http_write>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800b2b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d10d      	bne.n	800b2d8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	699b      	ldr	r3, [r3, #24]
 800b2c4:	89ba      	ldrh	r2, [r7, #12]
 800b2c6:	441a      	add	r2, r3
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2d0:	89ba      	ldrh	r2, [r7, #12]
 800b2d2:	1a9a      	subs	r2, r3, r2
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800b2d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3710      	adds	r7, #16
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b086      	sub	sp, #24
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2fa:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d106      	bne.n	800b310 <http_send_data_ssi+0x2c>
 800b302:	4b87      	ldr	r3, [pc, #540]	; (800b520 <http_send_data_ssi+0x23c>)
 800b304:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b308:	4986      	ldr	r1, [pc, #536]	; (800b524 <http_send_data_ssi+0x240>)
 800b30a:	4887      	ldr	r0, [pc, #540]	; (800b528 <http_send_data_ssi+0x244>)
 800b30c:	f00e f95e 	bl	80195cc <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b316:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	699b      	ldr	r3, [r3, #24]
 800b320:	429a      	cmp	r2, r3
 800b322:	f240 826f 	bls.w	800b804 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	699b      	ldr	r3, [r3, #24]
 800b32e:	1ad3      	subs	r3, r2, r3
 800b330:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b334:	4293      	cmp	r3, r2
 800b336:	dc06      	bgt.n	800b346 <http_send_data_ssi+0x62>
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	681a      	ldr	r2, [r3, #0]
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	699b      	ldr	r3, [r3, #24]
 800b340:	1ad3      	subs	r3, r2, r3
 800b342:	b29b      	uxth	r3, r3
 800b344:	e001      	b.n	800b34a <http_send_data_ssi+0x66>
 800b346:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b34a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	6999      	ldr	r1, [r3, #24]
 800b350:	f107 020e 	add.w	r2, r7, #14
 800b354:	2300      	movs	r3, #0
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff fd98 	bl	800ae8c <http_write>
 800b35c:	4603      	mov	r3, r0
 800b35e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d10d      	bne.n	800b384 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800b368:	2301      	movs	r3, #1
 800b36a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	89fa      	ldrh	r2, [r7, #14]
 800b372:	441a      	add	r2, r3
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	89fa      	ldrh	r2, [r7, #14]
 800b37e:	1a9a      	subs	r2, r3, r2
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f040 823a 	bne.w	800b804 <http_send_data_ssi+0x520>
      return data_to_send;
 800b390:	7dbb      	ldrb	r3, [r7, #22]
 800b392:	e280      	b.n	800b896 <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800b394:	89fb      	ldrh	r3, [r7, #14]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d101      	bne.n	800b39e <http_send_data_ssi+0xba>
      return data_to_send;
 800b39a:	7dbb      	ldrb	r3, [r7, #22]
 800b39c:	e27b      	b.n	800b896 <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	f200 822c 	bhi.w	800b802 <http_send_data_ssi+0x51e>
 800b3aa:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <http_send_data_ssi+0xcc>)
 800b3ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b0:	0800b3c5 	.word	0x0800b3c5
 800b3b4:	0800b417 	.word	0x0800b417
 800b3b8:	0800b489 	.word	0x0800b489
 800b3bc:	0800b5d1 	.word	0x0800b5d1
 800b3c0:	0800b719 	.word	0x0800b719
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	757b      	strb	r3, [r7, #21]
 800b3c8:	e017      	b.n	800b3fa <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	781a      	ldrb	r2, [r3, #0]
 800b3d0:	7d7b      	ldrb	r3, [r7, #21]
 800b3d2:	4956      	ldr	r1, [pc, #344]	; (800b52c <http_send_data_ssi+0x248>)
 800b3d4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	d10a      	bne.n	800b3f4 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800b3de:	693b      	ldr	r3, [r7, #16]
 800b3e0:	7d7a      	ldrb	r2, [r7, #21]
 800b3e2:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800b3e4:	693b      	ldr	r3, [r7, #16]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800b3f2:	e005      	b.n	800b400 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800b3f4:	7d7b      	ldrb	r3, [r7, #21]
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	757b      	strb	r3, [r7, #21]
 800b3fa:	7d7b      	ldrb	r3, [r7, #21]
 800b3fc:	2b01      	cmp	r3, #1
 800b3fe:	d9e4      	bls.n	800b3ca <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	1e5a      	subs	r2, r3, #1
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	601a      	str	r2, [r3, #0]
        break;
 800b414:	e1f6      	b.n	800b804 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	7c1b      	ldrb	r3, [r3, #16]
 800b41a:	461a      	mov	r2, r3
 800b41c:	4b43      	ldr	r3, [pc, #268]	; (800b52c <http_send_data_ssi+0x248>)
 800b41e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800b422:	693a      	ldr	r2, [r7, #16]
 800b424:	8992      	ldrh	r2, [r2, #12]
 800b426:	4413      	add	r3, r2
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d107      	bne.n	800b43e <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800b42e:	693b      	ldr	r3, [r7, #16]
 800b430:	2200      	movs	r2, #0
 800b432:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	2202      	movs	r2, #2
 800b438:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800b43c:	e1e2      	b.n	800b804 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	781a      	ldrb	r2, [r3, #0]
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	7c1b      	ldrb	r3, [r3, #16]
 800b448:	4619      	mov	r1, r3
 800b44a:	4b38      	ldr	r3, [pc, #224]	; (800b52c <http_send_data_ssi+0x248>)
 800b44c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800b450:	6939      	ldr	r1, [r7, #16]
 800b452:	8989      	ldrh	r1, [r1, #12]
 800b454:	440b      	add	r3, r1
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d106      	bne.n	800b46a <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	899b      	ldrh	r3, [r3, #12]
 800b460:	3301      	adds	r3, #1
 800b462:	b29a      	uxth	r2, r3
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	819a      	strh	r2, [r3, #12]
 800b468:	e003      	b.n	800b472 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2200      	movs	r2, #0
 800b46e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	689b      	ldr	r3, [r3, #8]
 800b476:	1e5a      	subs	r2, r3, #1
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b47c:	693b      	ldr	r3, [r7, #16]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	1c5a      	adds	r2, r3, #1
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	601a      	str	r2, [r3, #0]
        }
        break;
 800b486:	e1bd      	b.n	800b804 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	899b      	ldrh	r3, [r3, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d11e      	bne.n	800b4ce <http_send_data_ssi+0x1ea>
 800b490:	693b      	ldr	r3, [r7, #16]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	2b20      	cmp	r3, #32
 800b498:	d00e      	beq.n	800b4b8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b4a0:	2b09      	cmp	r3, #9
 800b4a2:	d009      	beq.n	800b4b8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	781b      	ldrb	r3, [r3, #0]
 800b4aa:	2b0a      	cmp	r3, #10
 800b4ac:	d004      	beq.n	800b4b8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b4b4:	2b0d      	cmp	r3, #13
 800b4b6:	d10a      	bne.n	800b4ce <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b4b8:	693b      	ldr	r3, [r7, #16]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	1e5a      	subs	r2, r3, #1
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	1c5a      	adds	r2, r3, #1
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	601a      	str	r2, [r3, #0]
          break;
 800b4cc:	e19a      	b.n	800b804 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	781a      	ldrb	r2, [r3, #0]
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	7c1b      	ldrb	r3, [r3, #16]
 800b4d8:	4914      	ldr	r1, [pc, #80]	; (800b52c <http_send_data_ssi+0x248>)
 800b4da:	00db      	lsls	r3, r3, #3
 800b4dc:	440b      	add	r3, r1
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	781b      	ldrb	r3, [r3, #0]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d013      	beq.n	800b50e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800b4ec:	2b20      	cmp	r3, #32
 800b4ee:	d00e      	beq.n	800b50e <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b4f0:	693b      	ldr	r3, [r7, #16]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	2b09      	cmp	r3, #9
 800b4f8:	d009      	beq.n	800b50e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800b500:	2b0a      	cmp	r3, #10
 800b502:	d004      	beq.n	800b50e <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b0d      	cmp	r3, #13
 800b50c:	d13f      	bne.n	800b58e <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	899b      	ldrh	r3, [r3, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10c      	bne.n	800b530 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b516:	693b      	ldr	r3, [r7, #16]
 800b518:	2200      	movs	r2, #0
 800b51a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800b51e:	e04c      	b.n	800b5ba <http_send_data_ssi+0x2d6>
 800b520:	0801a70c 	.word	0x0801a70c
 800b524:	0801a788 	.word	0x0801a788
 800b528:	0801a754 	.word	0x0801a754
 800b52c:	0801fa80 	.word	0x0801fa80
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	2203      	movs	r2, #3
 800b534:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	899b      	ldrh	r3, [r3, #12]
 800b53c:	2bff      	cmp	r3, #255	; 0xff
 800b53e:	d906      	bls.n	800b54e <http_send_data_ssi+0x26a>
 800b540:	4b93      	ldr	r3, [pc, #588]	; (800b790 <http_send_data_ssi+0x4ac>)
 800b542:	f240 523a 	movw	r2, #1338	; 0x53a
 800b546:	4993      	ldr	r1, [pc, #588]	; (800b794 <http_send_data_ssi+0x4b0>)
 800b548:	4893      	ldr	r0, [pc, #588]	; (800b798 <http_send_data_ssi+0x4b4>)
 800b54a:	f00e f83f 	bl	80195cc <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	899b      	ldrh	r3, [r3, #12]
 800b552:	b2da      	uxtb	r2, r3
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	899b      	ldrh	r3, [r3, #12]
 800b55c:	461a      	mov	r2, r3
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	4413      	add	r3, r2
 800b562:	2200      	movs	r2, #0
 800b564:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800b566:	693b      	ldr	r3, [r7, #16]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	781a      	ldrb	r2, [r3, #0]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	7c1b      	ldrb	r3, [r3, #16]
 800b570:	498a      	ldr	r1, [pc, #552]	; (800b79c <http_send_data_ssi+0x4b8>)
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	440b      	add	r3, r1
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	d103      	bne.n	800b586 <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	2201      	movs	r2, #1
 800b582:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800b584:	e019      	b.n	800b5ba <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2200      	movs	r2, #0
 800b58a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800b58c:	e015      	b.n	800b5ba <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	899b      	ldrh	r3, [r3, #12]
 800b592:	2b07      	cmp	r3, #7
 800b594:	d80d      	bhi.n	800b5b2 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	693b      	ldr	r3, [r7, #16]
 800b59c:	899b      	ldrh	r3, [r3, #12]
 800b59e:	1c59      	adds	r1, r3, #1
 800b5a0:	b288      	uxth	r0, r1
 800b5a2:	6939      	ldr	r1, [r7, #16]
 800b5a4:	8188      	strh	r0, [r1, #12]
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	7812      	ldrb	r2, [r2, #0]
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	440b      	add	r3, r1
 800b5ae:	749a      	strb	r2, [r3, #18]
 800b5b0:	e003      	b.n	800b5ba <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800b5ba:	693b      	ldr	r3, [r7, #16]
 800b5bc:	689b      	ldr	r3, [r3, #8]
 800b5be:	1e5a      	subs	r2, r3, #1
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800b5c4:	693b      	ldr	r3, [r7, #16]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	1c5a      	adds	r2, r3, #1
 800b5ca:	693b      	ldr	r3, [r7, #16]
 800b5cc:	601a      	str	r2, [r3, #0]

        break;
 800b5ce:	e119      	b.n	800b804 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b5d0:	693b      	ldr	r3, [r7, #16]
 800b5d2:	899b      	ldrh	r3, [r3, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d11e      	bne.n	800b616 <http_send_data_ssi+0x332>
 800b5d8:	693b      	ldr	r3, [r7, #16]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	d00e      	beq.n	800b600 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b5e2:	693b      	ldr	r3, [r7, #16]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800b5e8:	2b09      	cmp	r3, #9
 800b5ea:	d009      	beq.n	800b600 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	2b0a      	cmp	r3, #10
 800b5f4:	d004      	beq.n	800b600 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800b5fc:	2b0d      	cmp	r3, #13
 800b5fe:	d10a      	bne.n	800b616 <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b600:	693b      	ldr	r3, [r7, #16]
 800b602:	689b      	ldr	r3, [r3, #8]
 800b604:	1e5a      	subs	r2, r3, #1
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	601a      	str	r2, [r3, #0]
          break;
 800b614:	e0f6      	b.n	800b804 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	781a      	ldrb	r2, [r3, #0]
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	7c1b      	ldrb	r3, [r3, #16]
 800b620:	495e      	ldr	r1, [pc, #376]	; (800b79c <http_send_data_ssi+0x4b8>)
 800b622:	00db      	lsls	r3, r3, #3
 800b624:	440b      	add	r3, r1
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	6939      	ldr	r1, [r7, #16]
 800b62a:	8989      	ldrh	r1, [r1, #12]
 800b62c:	440b      	add	r3, r1
 800b62e:	781b      	ldrb	r3, [r3, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d162      	bne.n	800b6fa <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	1e5a      	subs	r2, r3, #1
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	1c5a      	adds	r2, r3, #1
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	899b      	ldrh	r3, [r3, #12]
 800b64c:	3301      	adds	r3, #1
 800b64e:	b29a      	uxth	r2, r3
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	7c1b      	ldrb	r3, [r3, #16]
 800b658:	4a50      	ldr	r2, [pc, #320]	; (800b79c <http_send_data_ssi+0x4b8>)
 800b65a:	00db      	lsls	r3, r3, #3
 800b65c:	4413      	add	r3, r2
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	8992      	ldrh	r2, [r2, #12]
 800b664:	4413      	add	r3, r2
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	f040 80cb 	bne.w	800b804 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b66e:	6838      	ldr	r0, [r7, #0]
 800b670:	f7ff fd30 	bl	800b0d4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	2200      	movs	r2, #0
 800b678:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	2204      	movs	r2, #4
 800b67e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	681a      	ldr	r2, [r3, #0]
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	685a      	ldr	r2, [r3, #4]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	699b      	ldr	r3, [r3, #24]
 800b692:	429a      	cmp	r2, r3
 800b694:	f240 80b6 	bls.w	800b804 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	685a      	ldr	r2, [r3, #4]
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	1ad3      	subs	r3, r2, r3
 800b6a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	dc06      	bgt.n	800b6b8 <http_send_data_ssi+0x3d4>
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	685a      	ldr	r2, [r3, #4]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	e001      	b.n	800b6bc <http_send_data_ssi+0x3d8>
 800b6b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b6bc:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	6999      	ldr	r1, [r3, #24]
 800b6c2:	f107 020e 	add.w	r2, r7, #14
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f7ff fbdf 	bl	800ae8c <http_write>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b6d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f040 8094 	bne.w	800b804 <http_send_data_ssi+0x520>
                data_to_send = 1;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	699b      	ldr	r3, [r3, #24]
 800b6e4:	89fa      	ldrh	r2, [r7, #14]
 800b6e6:	441a      	add	r2, r3
 800b6e8:	683b      	ldr	r3, [r7, #0]
 800b6ea:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f0:	89fa      	ldrh	r2, [r7, #14]
 800b6f2:	1a9a      	subs	r2, r3, r2
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	625a      	str	r2, [r3, #36]	; 0x24
 800b6f8:	e084      	b.n	800b804 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800b6fa:	693b      	ldr	r3, [r7, #16]
 800b6fc:	689b      	ldr	r3, [r3, #8]
 800b6fe:	1e5a      	subs	r2, r3, #1
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	2200      	movs	r2, #0
 800b712:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 800b716:	e075      	b.n	800b804 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	685a      	ldr	r2, [r3, #4]
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	429a      	cmp	r2, r3
 800b722:	d93d      	bls.n	800b7a0 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	685a      	ldr	r2, [r3, #4]
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b732:	4293      	cmp	r3, r2
 800b734:	dc06      	bgt.n	800b744 <http_send_data_ssi+0x460>
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	685a      	ldr	r2, [r3, #4]
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	699b      	ldr	r3, [r3, #24]
 800b73e:	1ad3      	subs	r3, r2, r3
 800b740:	b29b      	uxth	r3, r3
 800b742:	e001      	b.n	800b748 <http_send_data_ssi+0x464>
 800b744:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b748:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800b74a:	89fb      	ldrh	r3, [r7, #14]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00a      	beq.n	800b766 <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	6999      	ldr	r1, [r3, #24]
 800b754:	f107 020e 	add.w	r2, r7, #14
 800b758:	2300      	movs	r3, #0
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f7ff fb96 	bl	800ae8c <http_write>
 800b760:	4603      	mov	r3, r0
 800b762:	75fb      	strb	r3, [r7, #23]
 800b764:	e001      	b.n	800b76a <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800b76a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d148      	bne.n	800b804 <http_send_data_ssi+0x520>
            data_to_send = 1;
 800b772:	2301      	movs	r3, #1
 800b774:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	699b      	ldr	r3, [r3, #24]
 800b77a:	89fa      	ldrh	r2, [r7, #14]
 800b77c:	441a      	add	r2, r3
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b786:	89fa      	ldrh	r2, [r7, #14]
 800b788:	1a9a      	subs	r2, r3, r2
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	625a      	str	r2, [r3, #36]	; 0x24
 800b78e:	e039      	b.n	800b804 <http_send_data_ssi+0x520>
 800b790:	0801a70c 	.word	0x0801a70c
 800b794:	0801a7f8 	.word	0x0801a7f8
 800b798:	0801a754 	.word	0x0801a754
 800b79c:	0801fa80 	.word	0x0801fa80
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800b7a0:	693b      	ldr	r3, [r7, #16]
 800b7a2:	899a      	ldrh	r2, [r3, #12]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	89db      	ldrh	r3, [r3, #14]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d222      	bcs.n	800b7f2 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	89da      	ldrh	r2, [r3, #14]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	899b      	ldrh	r3, [r3, #12]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	b29b      	uxth	r3, r3
 800b7b8:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	899b      	ldrh	r3, [r3, #12]
 800b7be:	3318      	adds	r3, #24
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	1cd9      	adds	r1, r3, #3
 800b7c6:	f107 020e 	add.w	r2, r7, #14
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f7ff fb5d 	bl	800ae8c <http_write>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800b7d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d112      	bne.n	800b804 <http_send_data_ssi+0x520>
              data_to_send = 1;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	899a      	ldrh	r2, [r3, #12]
 800b7e6:	89fb      	ldrh	r3, [r7, #14]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	819a      	strh	r2, [r3, #12]
 800b7f0:	e008      	b.n	800b804 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800b800:	e000      	b.n	800b804 <http_send_data_ssi+0x520>
        default:
          break;
 800b802:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b80a:	2b04      	cmp	r3, #4
 800b80c:	d003      	beq.n	800b816 <http_send_data_ssi+0x532>
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	689b      	ldr	r3, [r3, #8]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <http_send_data_ssi+0x53c>
 800b816:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	f43f adba 	beq.w	800b394 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800b820:	693b      	ldr	r3, [r7, #16]
 800b822:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b826:	2b04      	cmp	r3, #4
 800b828:	d034      	beq.n	800b894 <http_send_data_ssi+0x5b0>
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	429a      	cmp	r2, r3
 800b834:	d92e      	bls.n	800b894 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	1ad3      	subs	r3, r2, r3
 800b840:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b844:	4293      	cmp	r3, r2
 800b846:	dc06      	bgt.n	800b856 <http_send_data_ssi+0x572>
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	699b      	ldr	r3, [r3, #24]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	b29b      	uxth	r3, r3
 800b854:	e001      	b.n	800b85a <http_send_data_ssi+0x576>
 800b856:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b85a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	6999      	ldr	r1, [r3, #24]
 800b860:	f107 020e 	add.w	r2, r7, #14
 800b864:	2300      	movs	r3, #0
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f7ff fb10 	bl	800ae8c <http_write>
 800b86c:	4603      	mov	r3, r0
 800b86e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b870:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10d      	bne.n	800b894 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 800b878:	2301      	movs	r3, #1
 800b87a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	699b      	ldr	r3, [r3, #24]
 800b880:	89fa      	ldrh	r2, [r7, #14]
 800b882:	441a      	add	r2, r3
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b88c:	89fa      	ldrh	r2, [r7, #14]
 800b88e:	1a9a      	subs	r2, r3, r2
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800b894:	7dbb      	ldrb	r3, [r7, #22]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop

0800b8a0 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <http_send+0x18>
    return 0;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	e030      	b.n	800b91a <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d108      	bne.n	800b8d2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800b8c0:	6839      	ldr	r1, [r7, #0]
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f7ff fca8 	bl	800b218 <http_check_eof>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d101      	bne.n	800b8d2 <http_send+0x32>
      return 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e023      	b.n	800b91a <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d006      	beq.n	800b8e8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f7ff fd01 	bl	800b2e4 <http_send_data_ssi>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	73fb      	strb	r3, [r7, #15]
 800b8e6:	e005      	b.n	800b8f4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	f7ff fcc4 	bl	800b278 <http_send_data_nonssi>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d10d      	bne.n	800b918 <http_send+0x78>
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	695b      	ldr	r3, [r3, #20]
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff fa35 	bl	800ad70 <fs_bytes_left>
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	dc05      	bgt.n	800b918 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fb75 	bl	800affe <http_eof>
    return 0;
 800b914:	2300      	movs	r3, #0
 800b916:	e000      	b.n	800b91a <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b918:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
	...

0800b924 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	4a1c      	ldr	r2, [pc, #112]	; (800b9a4 <http_get_404_file+0x80>)
 800b932:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7ff f9cf 	bl	800ace0 <fs_open>
 800b942:	4603      	mov	r3, r0
 800b944:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d024      	beq.n	800b998 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b94e:	683b      	ldr	r3, [r7, #0]
 800b950:	4a15      	ldr	r2, [pc, #84]	; (800b9a8 <http_get_404_file+0x84>)
 800b952:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	683b      	ldr	r3, [r7, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4619      	mov	r1, r3
 800b95c:	4610      	mov	r0, r2
 800b95e:	f7ff f9bf 	bl	800ace0 <fs_open>
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d014      	beq.n	800b998 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	4a0e      	ldr	r2, [pc, #56]	; (800b9ac <http_get_404_file+0x88>)
 800b972:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4619      	mov	r1, r3
 800b97c:	4610      	mov	r0, r2
 800b97e:	f7ff f9af 	bl	800ace0 <fs_open>
 800b982:	4603      	mov	r3, r0
 800b984:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	601a      	str	r2, [r3, #0]
        return NULL;
 800b994:	2300      	movs	r3, #0
 800b996:	e000      	b.n	800b99a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b998:	687b      	ldr	r3, [r7, #4]
}
 800b99a:	4618      	mov	r0, r3
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	0801a810 	.word	0x0801a810
 800b9a8:	0801a81c 	.word	0x0801a81c
 800b9ac:	0801a828 	.word	0x0801a828

0800b9b0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b08e      	sub	sp, #56	; 0x38
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d106      	bne.n	800b9d4 <http_parse_request+0x24>
 800b9c6:	4b65      	ldr	r3, [pc, #404]	; (800bb5c <http_parse_request+0x1ac>)
 800b9c8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800b9cc:	4964      	ldr	r1, [pc, #400]	; (800bb60 <http_parse_request+0x1b0>)
 800b9ce:	4865      	ldr	r0, [pc, #404]	; (800bb64 <http_parse_request+0x1b4>)
 800b9d0:	f00d fdfc 	bl	80195cc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d106      	bne.n	800b9e8 <http_parse_request+0x38>
 800b9da:	4b60      	ldr	r3, [pc, #384]	; (800bb5c <http_parse_request+0x1ac>)
 800b9dc:	f240 72af 	movw	r2, #1967	; 0x7af
 800b9e0:	4961      	ldr	r1, [pc, #388]	; (800bb68 <http_parse_request+0x1b8>)
 800b9e2:	4860      	ldr	r0, [pc, #384]	; (800bb64 <http_parse_request+0x1b4>)
 800b9e4:	f00d fdf2 	bl	80195cc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d103      	bne.n	800b9f8 <http_parse_request+0x48>
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	699b      	ldr	r3, [r3, #24]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d002      	beq.n	800b9fe <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b9f8:	f06f 0307 	mvn.w	r3, #7
 800b9fc:	e0a9      	b.n	800bb52 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	6a1b      	ldr	r3, [r3, #32]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d103      	bne.n	800ba0e <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba0a:	621a      	str	r2, [r3, #32]
 800ba0c:	e005      	b.n	800ba1a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba14:	4618      	mov	r0, r3
 800ba16:	f002 f95d 	bl	800dcd4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800ba1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba1c:	f002 f932 	bl	800dc84 <pbuf_ref>

  if (hs->req->next != NULL) {
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	6a1b      	ldr	r3, [r3, #32]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d012      	beq.n	800ba50 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	6a1b      	ldr	r3, [r3, #32]
 800ba2e:	891b      	ldrh	r3, [r3, #8]
 800ba30:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800ba34:	4293      	cmp	r3, r2
 800ba36:	bf28      	it	cs
 800ba38:	4613      	movcs	r3, r2
 800ba3a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	6a18      	ldr	r0, [r3, #32]
 800ba40:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ba42:	2300      	movs	r3, #0
 800ba44:	4949      	ldr	r1, [pc, #292]	; (800bb6c <http_parse_request+0x1bc>)
 800ba46:	f002 fa7d 	bl	800df44 <pbuf_copy_partial>
    data = httpd_req_buf;
 800ba4a:	4b48      	ldr	r3, [pc, #288]	; (800bb6c <http_parse_request+0x1bc>)
 800ba4c:	637b      	str	r3, [r7, #52]	; 0x34
 800ba4e:	e005      	b.n	800ba5c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800ba50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	895b      	ldrh	r3, [r3, #10]
 800ba5a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800ba5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ba5e:	2b06      	cmp	r3, #6
 800ba60:	d962      	bls.n	800bb28 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800ba62:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800ba64:	461a      	mov	r2, r3
 800ba66:	4942      	ldr	r1, [pc, #264]	; (800bb70 <http_parse_request+0x1c0>)
 800ba68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba6a:	f000 fc5f 	bl	800c32c <lwip_strnstr>
 800ba6e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800ba70:	6a3b      	ldr	r3, [r7, #32]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d058      	beq.n	800bb28 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800ba76:	2300      	movs	r3, #0
 800ba78:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800ba7a:	2204      	movs	r2, #4
 800ba7c:	493d      	ldr	r1, [pc, #244]	; (800bb74 <http_parse_request+0x1c4>)
 800ba7e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ba80:	f00d fe1e 	bl	80196c0 <strncmp>
 800ba84:	4603      	mov	r3, r0
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d116      	bne.n	800bab8 <http_parse_request+0x108>
        sp1 = data + 3;
 800ba8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba8c:	3303      	adds	r3, #3
 800ba8e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	1c5a      	adds	r2, r3, #1
 800ba94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	b29b      	uxth	r3, r3
 800ba9a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800ba9c:	1ad3      	subs	r3, r2, r3
 800ba9e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	3301      	adds	r3, #1
 800baa4:	8b7a      	ldrh	r2, [r7, #26]
 800baa6:	4934      	ldr	r1, [pc, #208]	; (800bb78 <http_parse_request+0x1c8>)
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 fc3f 	bl	800c32c <lwip_strnstr>
 800baae:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800bab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d111      	bne.n	800bada <http_parse_request+0x12a>
 800bab6:	e006      	b.n	800bac6 <http_parse_request+0x116>
        data[4] = 0;
 800bab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800baba:	3304      	adds	r3, #4
 800babc:	2200      	movs	r2, #0
 800babe:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800bac0:	f06f 030f 	mvn.w	r3, #15
 800bac4:	e045      	b.n	800bb52 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800bac6:	69fb      	ldr	r3, [r7, #28]
 800bac8:	3301      	adds	r3, #1
 800baca:	8b7a      	ldrh	r2, [r7, #26]
 800bacc:	4928      	ldr	r1, [pc, #160]	; (800bb70 <http_parse_request+0x1c0>)
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fc2c 	bl	800c32c <lwip_strnstr>
 800bad4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800bad6:	2301      	movs	r3, #1
 800bad8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	3301      	adds	r3, #1
 800bade:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800bae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d01e      	beq.n	800bb28 <http_parse_request+0x178>
 800baea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	429a      	cmp	r2, r3
 800baf0:	d91a      	bls.n	800bb28 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800baf2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800baf4:	461a      	mov	r2, r3
 800baf6:	4921      	ldr	r1, [pc, #132]	; (800bb7c <http_parse_request+0x1cc>)
 800baf8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bafa:	f000 fc17 	bl	800c32c <lwip_strnstr>
 800bafe:	4603      	mov	r3, r0
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d011      	beq.n	800bb28 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800bb04:	69fb      	ldr	r3, [r7, #28]
 800bb06:	3301      	adds	r3, #1
 800bb08:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800bb10:	8b3b      	ldrh	r3, [r7, #24]
 800bb12:	697a      	ldr	r2, [r7, #20]
 800bb14:	4413      	add	r3, r2
 800bb16:	2200      	movs	r2, #0
 800bb18:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800bb1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb1c:	6979      	ldr	r1, [r7, #20]
 800bb1e:	68b8      	ldr	r0, [r7, #8]
 800bb20:	f000 f82e 	bl	800bb80 <http_find_file>
 800bb24:	4603      	mov	r3, r0
 800bb26:	e014      	b.n	800bb52 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	6a1b      	ldr	r3, [r3, #32]
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f002 f891 	bl	800dc54 <pbuf_clen>
 800bb32:	4603      	mov	r3, r0
 800bb34:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	6a1b      	ldr	r3, [r3, #32]
 800bb3a:	891b      	ldrh	r3, [r3, #8]
 800bb3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb40:	d205      	bcs.n	800bb4e <http_parse_request+0x19e>
 800bb42:	8a7b      	ldrh	r3, [r7, #18]
 800bb44:	2b05      	cmp	r3, #5
 800bb46:	d802      	bhi.n	800bb4e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800bb48:	f06f 0304 	mvn.w	r3, #4
 800bb4c:	e001      	b.n	800bb52 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800bb4e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3738      	adds	r7, #56	; 0x38
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	0801a70c 	.word	0x0801a70c
 800bb60:	0801a834 	.word	0x0801a834
 800bb64:	0801a754 	.word	0x0801a754
 800bb68:	0801a77c 	.word	0x0801a77c
 800bb6c:	20009360 	.word	0x20009360
 800bb70:	0801a840 	.word	0x0801a840
 800bb74:	0801a844 	.word	0x0801a844
 800bb78:	0801a84c 	.word	0x0801a84c
 800bb7c:	0801a850 	.word	0x0801a850

0800bb80 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800bb80:	b590      	push	{r4, r7, lr}
 800bb82:	b093      	sub	sp, #76	; 0x4c
 800bb84:	af02      	add	r7, sp, #8
 800bb86:	60f8      	str	r0, [r7, #12]
 800bb88:	60b9      	str	r1, [r7, #8]
 800bb8a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800bb90:	2300      	movs	r3, #0
 800bb92:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800bb94:	2300      	movs	r3, #0
 800bb96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f7f4 fb41 	bl	8000224 <strlen>
 800bba2:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d072      	beq.n	800bc90 <http_find_file+0x110>
 800bbaa:	68ba      	ldr	r2, [r7, #8]
 800bbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	4413      	add	r3, r2
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	2b2f      	cmp	r3, #47	; 0x2f
 800bbb6:	d16b      	bne.n	800bc90 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bbb8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800bbba:	4a7b      	ldr	r2, [pc, #492]	; (800bda8 <http_find_file+0x228>)
 800bbbc:	4293      	cmp	r3, r2
 800bbbe:	d102      	bne.n	800bbc6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800bbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d164      	bne.n	800bc90 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	2b3f      	cmp	r3, #63	; 0x3f
 800bbcc:	bf28      	it	cs
 800bbce:	233f      	movcs	r3, #63	; 0x3f
 800bbd0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d00a      	beq.n	800bbee <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	6a3a      	ldr	r2, [r7, #32]
 800bbdc:	4619      	mov	r1, r3
 800bbde:	4872      	ldr	r0, [pc, #456]	; (800bda8 <http_find_file+0x228>)
 800bbe0:	f00d fdf2 	bl	80197c8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800bbe4:	4a70      	ldr	r2, [pc, #448]	; (800bda8 <http_find_file+0x228>)
 800bbe6:	6a3b      	ldr	r3, [r7, #32]
 800bbe8:	4413      	add	r3, r2
 800bbea:	2200      	movs	r2, #0
 800bbec:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bbee:	2300      	movs	r3, #0
 800bbf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbf2:	e04a      	b.n	800bc8a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800bbf4:	6a3b      	ldr	r3, [r7, #32]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d028      	beq.n	800bc4c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800bc00:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d01e      	beq.n	800bc46 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800bc08:	4a68      	ldr	r2, [pc, #416]	; (800bdac <http_find_file+0x22c>)
 800bc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f7f4 fb07 	bl	8000224 <strlen>
 800bc16:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800bc18:	69ba      	ldr	r2, [r7, #24]
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	4293      	cmp	r3, r2
 800bc1e:	bf28      	it	cs
 800bc20:	4613      	movcs	r3, r2
 800bc22:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800bc24:	6a3b      	ldr	r3, [r7, #32]
 800bc26:	4a60      	ldr	r2, [pc, #384]	; (800bda8 <http_find_file+0x228>)
 800bc28:	1898      	adds	r0, r3, r2
 800bc2a:	4a60      	ldr	r2, [pc, #384]	; (800bdac <http_find_file+0x22c>)
 800bc2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc2e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	4619      	mov	r1, r3
 800bc36:	f00d fdc7 	bl	80197c8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800bc3a:	6a3a      	ldr	r2, [r7, #32]
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	4413      	add	r3, r2
 800bc40:	4a59      	ldr	r2, [pc, #356]	; (800bda8 <http_find_file+0x228>)
 800bc42:	2100      	movs	r1, #0
 800bc44:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800bc46:	4b58      	ldr	r3, [pc, #352]	; (800bda8 <http_find_file+0x228>)
 800bc48:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc4a:	e004      	b.n	800bc56 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800bc4c:	4a57      	ldr	r2, [pc, #348]	; (800bdac <http_find_file+0x22c>)
 800bc4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bc54:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff f840 	bl	800ace0 <fs_open>
 800bc60:	4603      	mov	r3, r0
 800bc62:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800bc64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d10b      	bne.n	800bc84 <http_find_file+0x104>
        uri = file_name;
 800bc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800bc74:	4a4d      	ldr	r2, [pc, #308]	; (800bdac <http_find_file+0x22c>)
 800bc76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc78:	00db      	lsls	r3, r3, #3
 800bc7a:	4413      	add	r3, r2
 800bc7c:	791b      	ldrb	r3, [r3, #4]
 800bc7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800bc82:	e005      	b.n	800bc90 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800bc84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc86:	3301      	adds	r3, #1
 800bc88:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc8c:	2b04      	cmp	r3, #4
 800bc8e:	d9b1      	bls.n	800bbf4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800bc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d16d      	bne.n	800bd72 <http_find_file+0x1f2>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	213f      	movs	r1, #63	; 0x3f
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f00d fd03 	bl	80196a6 <strchr>
 800bca0:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800bca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d005      	beq.n	800bcb4 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800bca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcaa:	2200      	movs	r2, #0
 800bcac:	701a      	strb	r2, [r3, #0]
      params++;
 800bcae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb0:	3301      	adds	r3, #1
 800bcb2:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800bcb4:	4b3e      	ldr	r3, [pc, #248]	; (800bdb0 <http_find_file+0x230>)
 800bcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcba:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800bcbc:	4b3d      	ldr	r3, [pc, #244]	; (800bdb4 <http_find_file+0x234>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d034      	beq.n	800bd2e <http_find_file+0x1ae>
 800bcc4:	4b3c      	ldr	r3, [pc, #240]	; (800bdb8 <http_find_file+0x238>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d030      	beq.n	800bd2e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800bccc:	2300      	movs	r3, #0
 800bcce:	633b      	str	r3, [r7, #48]	; 0x30
 800bcd0:	e028      	b.n	800bd24 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800bcd2:	68b8      	ldr	r0, [r7, #8]
 800bcd4:	4b38      	ldr	r3, [pc, #224]	; (800bdb8 <http_find_file+0x238>)
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcda:	00db      	lsls	r3, r3, #3
 800bcdc:	4413      	add	r3, r2
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	4619      	mov	r1, r3
 800bce2:	f7f4 fa95 	bl	8000210 <strcmp>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d118      	bne.n	800bd1e <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800bcec:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f7ff f992 	bl	800b018 <extract_uri_parameters>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	4a2e      	ldr	r2, [pc, #184]	; (800bdb0 <http_find_file+0x230>)
 800bcf8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	; (800bdb8 <http_find_file+0x238>)
 800bcfc:	681a      	ldr	r2, [r3, #0]
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	00db      	lsls	r3, r3, #3
 800bd02:	4413      	add	r3, r2
 800bd04:	685c      	ldr	r4, [r3, #4]
 800bd06:	4b2a      	ldr	r3, [pc, #168]	; (800bdb0 <http_find_file+0x230>)
 800bd08:	6819      	ldr	r1, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800bd14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd16:	47a0      	blx	r4
 800bd18:	4603      	mov	r3, r0
 800bd1a:	60bb      	str	r3, [r7, #8]
          break;
 800bd1c:	e007      	b.n	800bd2e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	3301      	adds	r3, #1
 800bd22:	633b      	str	r3, [r7, #48]	; 0x30
 800bd24:	4b23      	ldr	r3, [pc, #140]	; (800bdb4 <http_find_file+0x234>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	dbd1      	blt.n	800bcd2 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	4611      	mov	r1, r2
 800bd34:	4618      	mov	r0, r3
 800bd36:	f7fe ffd3 	bl	800ace0 <fs_open>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800bd3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d102      	bne.n	800bd4c <http_find_file+0x1cc>
      file = &hs->file_handle;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd4a:	e006      	b.n	800bd5a <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800bd4c:	f107 0308 	add.w	r3, r7, #8
 800bd50:	4619      	mov	r1, r3
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	f7ff fde6 	bl	800b924 <http_get_404_file>
 800bd58:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800bd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d008      	beq.n	800bd72 <http_find_file+0x1f2>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800bd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd62:	7c1b      	ldrb	r3, [r3, #16]
 800bd64:	f003 0308 	and.w	r3, r3, #8
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d002      	beq.n	800bd72 <http_find_file+0x1f2>
        tag_check = 1;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800bd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d106      	bne.n	800bd86 <http_find_file+0x206>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800bd78:	f107 0308 	add.w	r3, r7, #8
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff fdd0 	bl	800b924 <http_get_404_file>
 800bd84:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd8a:	9301      	str	r3, [sp, #4]
 800bd8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd90:	9300      	str	r3, [sp, #0]
 800bd92:	4613      	mov	r3, r2
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f000 f80f 	bl	800bdbc <http_init_file>
 800bd9e:	4603      	mov	r3, r0
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	3744      	adds	r7, #68	; 0x44
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd90      	pop	{r4, r7, pc}
 800bda8:	20009760 	.word	0x20009760
 800bdac:	0801fa58 	.word	0x0801fa58
 800bdb0:	200097ac 	.word	0x200097ac
 800bdb4:	200097a8 	.word	0x200097a8
 800bdb8:	200097a4 	.word	0x200097a4

0800bdbc <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b088      	sub	sp, #32
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	60f8      	str	r0, [r7, #12]
 800bdc4:	60b9      	str	r1, [r7, #8]
 800bdc6:	607a      	str	r2, [r7, #4]
 800bdc8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d07d      	beq.n	800becc <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d106      	bne.n	800bde6 <http_init_file+0x2a>
 800bdd8:	4b45      	ldr	r3, [pc, #276]	; (800bef0 <http_init_file+0x134>)
 800bdda:	f640 120b 	movw	r2, #2315	; 0x90b
 800bdde:	4945      	ldr	r1, [pc, #276]	; (800bef4 <http_init_file+0x138>)
 800bde0:	4845      	ldr	r0, [pc, #276]	; (800bef8 <http_init_file+0x13c>)
 800bde2:	f00d fbf3 	bl	80195cc <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800bde6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d01c      	beq.n	800be28 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800bdee:	f7fe ffce 	bl	800ad8e <http_ssi_state_alloc>
 800bdf2:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d016      	beq.n	800be28 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	2200      	movs	r2, #0
 800be04:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	681a      	ldr	r2, [r3, #0]
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	685b      	ldr	r3, [r3, #4]
 800be14:	461a      	mov	r2, r3
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	681a      	ldr	r2, [r3, #0]
 800be1e:	69fb      	ldr	r3, [r7, #28]
 800be20:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	69fa      	ldr	r2, [r7, #28]
 800be26:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	681a      	ldr	r2, [r3, #0]
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	da06      	bge.n	800be4c <http_init_file+0x90>
 800be3e:	4b2c      	ldr	r3, [pc, #176]	; (800bef0 <http_init_file+0x134>)
 800be40:	f640 1234 	movw	r2, #2356	; 0x934
 800be44:	492d      	ldr	r1, [pc, #180]	; (800befc <http_init_file+0x140>)
 800be46:	482c      	ldr	r0, [pc, #176]	; (800bef8 <http_init_file+0x13c>)
 800be48:	f00d fbc0 	bl	80195cc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	461a      	mov	r2, r3
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	2200      	movs	r2, #0
 800be5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	695b      	ldr	r3, [r3, #20]
 800be62:	7c1b      	ldrb	r3, [r3, #16]
 800be64:	f003 0301 	and.w	r3, r3, #1
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d106      	bne.n	800be7a <http_init_file+0xbe>
 800be6c:	4b20      	ldr	r3, [pc, #128]	; (800bef0 <http_init_file+0x134>)
 800be6e:	f640 1243 	movw	r2, #2371	; 0x943
 800be72:	4923      	ldr	r1, [pc, #140]	; (800bf00 <http_init_file+0x144>)
 800be74:	4820      	ldr	r0, [pc, #128]	; (800bef8 <http_init_file+0x13c>)
 800be76:	f00d fba9 	bl	80195cc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d032      	beq.n	800bee6 <http_init_file+0x12a>
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	7c1b      	ldrb	r3, [r3, #16]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d02b      	beq.n	800bee6 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	6998      	ldr	r0, [r3, #24]
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be96:	461a      	mov	r2, r3
 800be98:	491a      	ldr	r1, [pc, #104]	; (800bf04 <http_init_file+0x148>)
 800be9a:	f000 fa47 	bl	800c32c <lwip_strnstr>
 800be9e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d01f      	beq.n	800bee6 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	1d1a      	adds	r2, r3, #4
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	1ad3      	subs	r3, r2, r3
 800beb0:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	699a      	ldr	r2, [r3, #24]
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	441a      	add	r2, r3
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	1ad2      	subs	r2, r2, r3
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	625a      	str	r2, [r3, #36]	; 0x24
 800beca:	e00c      	b.n	800bee6 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	2200      	movs	r2, #0
 800bed0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2200      	movs	r2, #0
 800bed6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2200      	movs	r2, #0
 800bee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800bee6:	2300      	movs	r3, #0
}
 800bee8:	4618      	mov	r0, r3
 800beea:	3720      	adds	r7, #32
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	0801a70c 	.word	0x0801a70c
 800bef4:	0801a858 	.word	0x0801a858
 800bef8:	0801a754 	.word	0x0801a754
 800befc:	0801a86c 	.word	0x0801a86c
 800bf00:	0801a88c 	.word	0x0801a88c
 800bf04:	0801a850 	.word	0x0801a850

0800bf08 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	460b      	mov	r3, r1
 800bf12:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d002      	beq.n	800bf24 <http_err+0x1c>
    http_state_free(hs);
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f7fe ffa2 	bl	800ae68 <http_state_free>
  }
}
 800bf24:	bf00      	nop
 800bf26:	3710      	adds	r7, #16
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b086      	sub	sp, #24
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	60f8      	str	r0, [r7, #12]
 800bf34:	60b9      	str	r1, [r7, #8]
 800bf36:	4613      	mov	r3, r2
 800bf38:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800bf3e:	697b      	ldr	r3, [r7, #20]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <http_sent+0x1c>
    return ERR_OK;
 800bf44:	2300      	movs	r3, #0
 800bf46:	e008      	b.n	800bf5a <http_sent+0x2e>
  }

  hs->retries = 0;
 800bf48:	697b      	ldr	r3, [r7, #20]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800bf50:	6979      	ldr	r1, [r7, #20]
 800bf52:	68b8      	ldr	r0, [r7, #8]
 800bf54:	f7ff fca4 	bl	800b8a0 <http_send>

  return ERR_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b084      	sub	sp, #16
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
 800bf6a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d107      	bne.n	800bf86 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800bf76:	2100      	movs	r1, #0
 800bf78:	6838      	ldr	r0, [r7, #0]
 800bf7a:	f7ff f831 	bl	800afe0 <http_close_conn>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	e021      	b.n	800bfca <http_poll+0x68>
  } else {
    hs->retries++;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf8c:	3301      	adds	r3, #1
 800bf8e:	b2da      	uxtb	r2, r3
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf9c:	2b04      	cmp	r3, #4
 800bf9e:	d105      	bne.n	800bfac <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800bfa0:	68f9      	ldr	r1, [r7, #12]
 800bfa2:	6838      	ldr	r0, [r7, #0]
 800bfa4:	f7ff f81c 	bl	800afe0 <http_close_conn>
      return ERR_OK;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	e00e      	b.n	800bfca <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	695b      	ldr	r3, [r3, #20]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d009      	beq.n	800bfc8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800bfb4:	68f9      	ldr	r1, [r7, #12]
 800bfb6:	6838      	ldr	r0, [r7, #0]
 800bfb8:	f7ff fc72 	bl	800b8a0 <http_send>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d002      	beq.n	800bfc8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800bfc2:	6838      	ldr	r0, [r7, #0]
 800bfc4:	f007 f946 	bl	8013254 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800bfc8:	2300      	movs	r3, #0
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3710      	adds	r7, #16
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
	...

0800bfd4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b086      	sub	sp, #24
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	60f8      	str	r0, [r7, #12]
 800bfdc:	60b9      	str	r1, [r7, #8]
 800bfde:	607a      	str	r2, [r7, #4]
 800bfe0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800bfe6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d105      	bne.n	800bffa <http_recv+0x26>
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d002      	beq.n	800bffa <http_recv+0x26>
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d111      	bne.n	800c01e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d008      	beq.n	800c012 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	891b      	ldrh	r3, [r3, #8]
 800c004:	4619      	mov	r1, r3
 800c006:	68b8      	ldr	r0, [r7, #8]
 800c008:	f002 fd14 	bl	800ea34 <tcp_recved>
      pbuf_free(p);
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f001 fd93 	bl	800db38 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800c012:	6979      	ldr	r1, [r7, #20]
 800c014:	68b8      	ldr	r0, [r7, #8]
 800c016:	f7fe ffe3 	bl	800afe0 <http_close_conn>
    return ERR_OK;
 800c01a:	2300      	movs	r3, #0
 800c01c:	e055      	b.n	800c0ca <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	891b      	ldrh	r3, [r3, #8]
 800c022:	4619      	mov	r1, r3
 800c024:	68b8      	ldr	r0, [r7, #8]
 800c026:	f002 fd05 	bl	800ea34 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	695b      	ldr	r3, [r3, #20]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d147      	bne.n	800c0c2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800c032:	68ba      	ldr	r2, [r7, #8]
 800c034:	6979      	ldr	r1, [r7, #20]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f7ff fcba 	bl	800b9b0 <http_parse_request>
 800c03c:	4603      	mov	r3, r0
 800c03e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800c040:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d015      	beq.n	800c074 <http_recv+0xa0>
 800c048:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c04c:	f113 0f05 	cmn.w	r3, #5
 800c050:	d010      	beq.n	800c074 <http_recv+0xa0>
 800c052:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c056:	f113 0f10 	cmn.w	r3, #16
 800c05a:	d00b      	beq.n	800c074 <http_recv+0xa0>
 800c05c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c060:	f113 0f08 	cmn.w	r3, #8
 800c064:	d006      	beq.n	800c074 <http_recv+0xa0>
 800c066:	4b1b      	ldr	r3, [pc, #108]	; (800c0d4 <http_recv+0x100>)
 800c068:	f640 2204 	movw	r2, #2564	; 0xa04
 800c06c:	491a      	ldr	r1, [pc, #104]	; (800c0d8 <http_recv+0x104>)
 800c06e:	481b      	ldr	r0, [pc, #108]	; (800c0dc <http_recv+0x108>)
 800c070:	f00d faac 	bl	80195cc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800c074:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c078:	f113 0f05 	cmn.w	r3, #5
 800c07c:	d00b      	beq.n	800c096 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d007      	beq.n	800c096 <http_recv+0xc2>
          pbuf_free(hs->req);
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	6a1b      	ldr	r3, [r3, #32]
 800c08a:	4618      	mov	r0, r3
 800c08c:	f001 fd54 	bl	800db38 <pbuf_free>
          hs->req = NULL;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	2200      	movs	r2, #0
 800c094:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f001 fd4e 	bl	800db38 <pbuf_free>
      if (parsed == ERR_OK) {
 800c09c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d104      	bne.n	800c0ae <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800c0a4:	6979      	ldr	r1, [r7, #20]
 800c0a6:	68b8      	ldr	r0, [r7, #8]
 800c0a8:	f7ff fbfa 	bl	800b8a0 <http_send>
 800c0ac:	e00c      	b.n	800c0c8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800c0ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c0b2:	f113 0f10 	cmn.w	r3, #16
 800c0b6:	d107      	bne.n	800c0c8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800c0b8:	6979      	ldr	r1, [r7, #20]
 800c0ba:	68b8      	ldr	r0, [r7, #8]
 800c0bc:	f7fe ff90 	bl	800afe0 <http_close_conn>
 800c0c0:	e002      	b.n	800c0c8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f001 fd38 	bl	800db38 <pbuf_free>
    }
  }
  return ERR_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	0801a70c 	.word	0x0801a70c
 800c0d8:	0801a8b8 	.word	0x0801a8b8
 800c0dc:	0801a754 	.word	0x0801a754

0800c0e0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	60f8      	str	r0, [r7, #12]
 800c0e8:	60b9      	str	r1, [r7, #8]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800c0ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d102      	bne.n	800c0fc <http_accept+0x1c>
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d102      	bne.n	800c102 <http_accept+0x22>
    return ERR_VAL;
 800c0fc:	f06f 0305 	mvn.w	r3, #5
 800c100:	e025      	b.n	800c14e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c102:	2101      	movs	r1, #1
 800c104:	68b8      	ldr	r0, [r7, #8]
 800c106:	f003 f979 	bl	800f3fc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800c10a:	f7fe fe6f 	bl	800adec <http_state_alloc>
 800c10e:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d102      	bne.n	800c11c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800c116:	f04f 33ff 	mov.w	r3, #4294967295
 800c11a:	e018      	b.n	800c14e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800c122:	6979      	ldr	r1, [r7, #20]
 800c124:	68b8      	ldr	r0, [r7, #8]
 800c126:	f003 fb69 	bl	800f7fc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800c12a:	490b      	ldr	r1, [pc, #44]	; (800c158 <http_accept+0x78>)
 800c12c:	68b8      	ldr	r0, [r7, #8]
 800c12e:	f003 fb77 	bl	800f820 <tcp_recv>
  altcp_err(pcb, http_err);
 800c132:	490a      	ldr	r1, [pc, #40]	; (800c15c <http_accept+0x7c>)
 800c134:	68b8      	ldr	r0, [r7, #8]
 800c136:	f003 fbb7 	bl	800f8a8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800c13a:	2204      	movs	r2, #4
 800c13c:	4908      	ldr	r1, [pc, #32]	; (800c160 <http_accept+0x80>)
 800c13e:	68b8      	ldr	r0, [r7, #8]
 800c140:	f003 fbec 	bl	800f91c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800c144:	4907      	ldr	r1, [pc, #28]	; (800c164 <http_accept+0x84>)
 800c146:	68b8      	ldr	r0, [r7, #8]
 800c148:	f003 fb8c 	bl	800f864 <tcp_sent>

  return ERR_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3718      	adds	r7, #24
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	0800bfd5 	.word	0x0800bfd5
 800c15c:	0800bf09 	.word	0x0800bf09
 800c160:	0800bf63 	.word	0x0800bf63
 800c164:	0800bf2d 	.word	0x0800bf2d

0800c168 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	460b      	mov	r3, r1
 800c172:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d029      	beq.n	800c1ce <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800c17a:	2101      	movs	r1, #1
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f003 f93d 	bl	800f3fc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800c182:	887b      	ldrh	r3, [r7, #2]
 800c184:	461a      	mov	r2, r3
 800c186:	4914      	ldr	r1, [pc, #80]	; (800c1d8 <httpd_init_pcb+0x70>)
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f002 fa85 	bl	800e698 <tcp_bind>
 800c18e:	4603      	mov	r3, r0
 800c190:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800c192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d006      	beq.n	800c1a8 <httpd_init_pcb+0x40>
 800c19a:	4b10      	ldr	r3, [pc, #64]	; (800c1dc <httpd_init_pcb+0x74>)
 800c19c:	f640 2257 	movw	r2, #2647	; 0xa57
 800c1a0:	490f      	ldr	r1, [pc, #60]	; (800c1e0 <httpd_init_pcb+0x78>)
 800c1a2:	4810      	ldr	r0, [pc, #64]	; (800c1e4 <httpd_init_pcb+0x7c>)
 800c1a4:	f00d fa12 	bl	80195cc <iprintf>
    pcb = altcp_listen(pcb);
 800c1a8:	21ff      	movs	r1, #255	; 0xff
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f002 fb2c 	bl	800e808 <tcp_listen_with_backlog>
 800c1b0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d106      	bne.n	800c1c6 <httpd_init_pcb+0x5e>
 800c1b8:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <httpd_init_pcb+0x74>)
 800c1ba:	f640 2259 	movw	r2, #2649	; 0xa59
 800c1be:	490a      	ldr	r1, [pc, #40]	; (800c1e8 <httpd_init_pcb+0x80>)
 800c1c0:	4808      	ldr	r0, [pc, #32]	; (800c1e4 <httpd_init_pcb+0x7c>)
 800c1c2:	f00d fa03 	bl	80195cc <iprintf>
    altcp_accept(pcb, http_accept);
 800c1c6:	4909      	ldr	r1, [pc, #36]	; (800c1ec <httpd_init_pcb+0x84>)
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f003 fb8f 	bl	800f8ec <tcp_accept>
  }
}
 800c1ce:	bf00      	nop
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop
 800c1d8:	0801fbb0 	.word	0x0801fbb0
 800c1dc:	0801a70c 	.word	0x0801a70c
 800c1e0:	0801a8e4 	.word	0x0801a8e4
 800c1e4:	0801a754 	.word	0x0801a754
 800c1e8:	0801a900 	.word	0x0801a900
 800c1ec:	0800c0e1 	.word	0x0800c0e1

0800c1f0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b082      	sub	sp, #8
 800c1f4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800c1f6:	202e      	movs	r0, #46	; 0x2e
 800c1f8:	f003 faf2 	bl	800f7e0 <tcp_new_ip_type>
 800c1fc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <httpd_init+0x22>
 800c204:	4b07      	ldr	r3, [pc, #28]	; (800c224 <httpd_init+0x34>)
 800c206:	f640 2272 	movw	r2, #2674	; 0xa72
 800c20a:	4907      	ldr	r1, [pc, #28]	; (800c228 <httpd_init+0x38>)
 800c20c:	4807      	ldr	r0, [pc, #28]	; (800c22c <httpd_init+0x3c>)
 800c20e:	f00d f9dd 	bl	80195cc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800c212:	2150      	movs	r1, #80	; 0x50
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f7ff ffa7 	bl	800c168 <httpd_init_pcb>
}
 800c21a:	bf00      	nop
 800c21c:	3708      	adds	r7, #8
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	0801a70c 	.word	0x0801a70c
 800c228:	0801a920 	.word	0x0801a920
 800c22c:	0801a754 	.word	0x0801a754

0800c230 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b084      	sub	sp, #16
 800c234:	af00      	add	r7, sp, #0
 800c236:	60f8      	str	r0, [r7, #12]
 800c238:	60b9      	str	r1, [r7, #8]
 800c23a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <http_set_ssi_handler+0x20>
 800c242:	4b07      	ldr	r3, [pc, #28]	; (800c260 <http_set_ssi_handler+0x30>)
 800c244:	f640 2297 	movw	r2, #2711	; 0xa97
 800c248:	4906      	ldr	r1, [pc, #24]	; (800c264 <http_set_ssi_handler+0x34>)
 800c24a:	4807      	ldr	r0, [pc, #28]	; (800c268 <http_set_ssi_handler+0x38>)
 800c24c:	f00d f9be 	bl	80195cc <iprintf>
  httpd_ssi_handler = ssi_handler;
 800c250:	4a06      	ldr	r2, [pc, #24]	; (800c26c <http_set_ssi_handler+0x3c>)
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  httpd_tags = tags;
  httpd_num_tags = num_tags;
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800c256:	bf00      	nop
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	0801a70c 	.word	0x0801a70c
 800c264:	0801a93c 	.word	0x0801a93c
 800c268:	0801a754 	.word	0x0801a754
 800c26c:	200097a0 	.word	0x200097a0

0800c270 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d106      	bne.n	800c28e <http_set_cgi_handlers+0x1e>
 800c280:	4b0d      	ldr	r3, [pc, #52]	; (800c2b8 <http_set_cgi_handlers+0x48>)
 800c282:	f640 22b2 	movw	r2, #2738	; 0xab2
 800c286:	490d      	ldr	r1, [pc, #52]	; (800c2bc <http_set_cgi_handlers+0x4c>)
 800c288:	480d      	ldr	r0, [pc, #52]	; (800c2c0 <http_set_cgi_handlers+0x50>)
 800c28a:	f00d f99f 	bl	80195cc <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	dc06      	bgt.n	800c2a2 <http_set_cgi_handlers+0x32>
 800c294:	4b08      	ldr	r3, [pc, #32]	; (800c2b8 <http_set_cgi_handlers+0x48>)
 800c296:	f640 22b3 	movw	r2, #2739	; 0xab3
 800c29a:	490a      	ldr	r1, [pc, #40]	; (800c2c4 <http_set_cgi_handlers+0x54>)
 800c29c:	4808      	ldr	r0, [pc, #32]	; (800c2c0 <http_set_cgi_handlers+0x50>)
 800c29e:	f00d f995 	bl	80195cc <iprintf>

  httpd_cgis = cgis;
 800c2a2:	4a09      	ldr	r2, [pc, #36]	; (800c2c8 <http_set_cgi_handlers+0x58>)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800c2a8:	4a08      	ldr	r2, [pc, #32]	; (800c2cc <http_set_cgi_handlers+0x5c>)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	6013      	str	r3, [r2, #0]
}
 800c2ae:	bf00      	nop
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}
 800c2b6:	bf00      	nop
 800c2b8:	0801a70c 	.word	0x0801a70c
 800c2bc:	0801a954 	.word	0x0801a954
 800c2c0:	0801a754 	.word	0x0801a754
 800c2c4:	0801a964 	.word	0x0801a964
 800c2c8:	200097a4 	.word	0x200097a4
 800c2cc:	200097a8 	.word	0x200097a8

0800c2d0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c2d0:	b480      	push	{r7}
 800c2d2:	b083      	sub	sp, #12
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c2da:	88fb      	ldrh	r3, [r7, #6]
 800c2dc:	021b      	lsls	r3, r3, #8
 800c2de:	b21a      	sxth	r2, r3
 800c2e0:	88fb      	ldrh	r3, [r7, #6]
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	b21b      	sxth	r3, r3
 800c2e8:	4313      	orrs	r3, r2
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	b29b      	uxth	r3, r3
}
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	370c      	adds	r7, #12
 800c2f2:	46bd      	mov	sp, r7
 800c2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f8:	4770      	bx	lr

0800c2fa <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c2fa:	b480      	push	{r7}
 800c2fc:	b083      	sub	sp, #12
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	061a      	lsls	r2, r3, #24
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	021b      	lsls	r3, r3, #8
 800c30a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c30e:	431a      	orrs	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	0a1b      	lsrs	r3, r3, #8
 800c314:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c318:	431a      	orrs	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	0e1b      	lsrs	r3, r3, #24
 800c31e:	4313      	orrs	r3, r2
}
 800c320:	4618      	mov	r0, r3
 800c322:	370c      	adds	r7, #12
 800c324:	46bd      	mov	sp, r7
 800c326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32a:	4770      	bx	lr

0800c32c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800c338:	68b8      	ldr	r0, [r7, #8]
 800c33a:	f7f3 ff73 	bl	8000224 <strlen>
 800c33e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d101      	bne.n	800c34a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	e022      	b.n	800c390 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	e012      	b.n	800c376 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800c350:	697b      	ldr	r3, [r7, #20]
 800c352:	781a      	ldrb	r2, [r3, #0]
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	429a      	cmp	r2, r3
 800c35a:	d109      	bne.n	800c370 <lwip_strnstr+0x44>
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	68b9      	ldr	r1, [r7, #8]
 800c360:	6978      	ldr	r0, [r7, #20]
 800c362:	f00d f9ad 	bl	80196c0 <strncmp>
 800c366:	4603      	mov	r3, r0
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d101      	bne.n	800c370 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800c36c:	697b      	ldr	r3, [r7, #20]
 800c36e:	e00f      	b.n	800c390 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	3301      	adds	r3, #1
 800c374:	617b      	str	r3, [r7, #20]
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	781b      	ldrb	r3, [r3, #0]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d007      	beq.n	800c38e <lwip_strnstr+0x62>
 800c37e:	697a      	ldr	r2, [r7, #20]
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	441a      	add	r2, r3
 800c384:	68f9      	ldr	r1, [r7, #12]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	440b      	add	r3, r1
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d9e0      	bls.n	800c350 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800c38e:	2300      	movs	r3, #0
}
 800c390:	4618      	mov	r0, r3
 800c392:	3718      	adds	r7, #24
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b082      	sub	sp, #8
 800c39c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c3a2:	f00c ff0b 	bl	80191bc <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c3a6:	f000 f8d5 	bl	800c554 <mem_init>
  memp_init();
 800c3aa:	f000 fc31 	bl	800cc10 <memp_init>
  pbuf_init();
  netif_init();
 800c3ae:	f000 fd3d 	bl	800ce2c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c3b2:	f008 f83f 	bl	8014434 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c3b6:	f001 fe69 	bl	800e08c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c3ba:	f007 ff81 	bl	80142c0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c3be:	bf00      	nop
 800c3c0:	3708      	adds	r7, #8
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}
	...

0800c3c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b083      	sub	sp, #12
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c3d2:	4b05      	ldr	r3, [pc, #20]	; (800c3e8 <ptr_to_mem+0x20>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	88fb      	ldrh	r3, [r7, #6]
 800c3d8:	4413      	add	r3, r2
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	370c      	adds	r7, #12
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e4:	4770      	bx	lr
 800c3e6:	bf00      	nop
 800c3e8:	20009e1c 	.word	0x20009e1c

0800c3ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c3f4:	4b05      	ldr	r3, [pc, #20]	; (800c40c <mem_to_ptr+0x20>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	b29b      	uxth	r3, r3
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	370c      	adds	r7, #12
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	20009e1c 	.word	0x20009e1c

0800c410 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c410:	b590      	push	{r4, r7, lr}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c418:	4b45      	ldr	r3, [pc, #276]	; (800c530 <plug_holes+0x120>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	429a      	cmp	r2, r3
 800c420:	d206      	bcs.n	800c430 <plug_holes+0x20>
 800c422:	4b44      	ldr	r3, [pc, #272]	; (800c534 <plug_holes+0x124>)
 800c424:	f240 12df 	movw	r2, #479	; 0x1df
 800c428:	4943      	ldr	r1, [pc, #268]	; (800c538 <plug_holes+0x128>)
 800c42a:	4844      	ldr	r0, [pc, #272]	; (800c53c <plug_holes+0x12c>)
 800c42c:	f00d f8ce 	bl	80195cc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c430:	4b43      	ldr	r3, [pc, #268]	; (800c540 <plug_holes+0x130>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	429a      	cmp	r2, r3
 800c438:	d306      	bcc.n	800c448 <plug_holes+0x38>
 800c43a:	4b3e      	ldr	r3, [pc, #248]	; (800c534 <plug_holes+0x124>)
 800c43c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c440:	4940      	ldr	r1, [pc, #256]	; (800c544 <plug_holes+0x134>)
 800c442:	483e      	ldr	r0, [pc, #248]	; (800c53c <plug_holes+0x12c>)
 800c444:	f00d f8c2 	bl	80195cc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	791b      	ldrb	r3, [r3, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d006      	beq.n	800c45e <plug_holes+0x4e>
 800c450:	4b38      	ldr	r3, [pc, #224]	; (800c534 <plug_holes+0x124>)
 800c452:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c456:	493c      	ldr	r1, [pc, #240]	; (800c548 <plug_holes+0x138>)
 800c458:	4838      	ldr	r0, [pc, #224]	; (800c53c <plug_holes+0x12c>)
 800c45a:	f00d f8b7 	bl	80195cc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c466:	d906      	bls.n	800c476 <plug_holes+0x66>
 800c468:	4b32      	ldr	r3, [pc, #200]	; (800c534 <plug_holes+0x124>)
 800c46a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c46e:	4937      	ldr	r1, [pc, #220]	; (800c54c <plug_holes+0x13c>)
 800c470:	4832      	ldr	r0, [pc, #200]	; (800c53c <plug_holes+0x12c>)
 800c472:	f00d f8ab 	bl	80195cc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	881b      	ldrh	r3, [r3, #0]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f7ff ffa4 	bl	800c3c8 <ptr_to_mem>
 800c480:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	429a      	cmp	r2, r3
 800c488:	d024      	beq.n	800c4d4 <plug_holes+0xc4>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	791b      	ldrb	r3, [r3, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d120      	bne.n	800c4d4 <plug_holes+0xc4>
 800c492:	4b2b      	ldr	r3, [pc, #172]	; (800c540 <plug_holes+0x130>)
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d01b      	beq.n	800c4d4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c49c:	4b2c      	ldr	r3, [pc, #176]	; (800c550 <plug_holes+0x140>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d102      	bne.n	800c4ac <plug_holes+0x9c>
      lfree = mem;
 800c4a6:	4a2a      	ldr	r2, [pc, #168]	; (800c550 <plug_holes+0x140>)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	881a      	ldrh	r2, [r3, #0]
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	881b      	ldrh	r3, [r3, #0]
 800c4b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4bc:	d00a      	beq.n	800c4d4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f7ff ff80 	bl	800c3c8 <ptr_to_mem>
 800c4c8:	4604      	mov	r4, r0
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f7ff ff8e 	bl	800c3ec <mem_to_ptr>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	885b      	ldrh	r3, [r3, #2]
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f7ff ff75 	bl	800c3c8 <ptr_to_mem>
 800c4de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c4e0:	68ba      	ldr	r2, [r7, #8]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d01f      	beq.n	800c528 <plug_holes+0x118>
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	791b      	ldrb	r3, [r3, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11b      	bne.n	800c528 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c4f0:	4b17      	ldr	r3, [pc, #92]	; (800c550 <plug_holes+0x140>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d102      	bne.n	800c500 <plug_holes+0xf0>
      lfree = pmem;
 800c4fa:	4a15      	ldr	r2, [pc, #84]	; (800c550 <plug_holes+0x140>)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	881a      	ldrh	r2, [r3, #0]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	881b      	ldrh	r3, [r3, #0]
 800c50c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c510:	d00a      	beq.n	800c528 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	4618      	mov	r0, r3
 800c518:	f7ff ff56 	bl	800c3c8 <ptr_to_mem>
 800c51c:	4604      	mov	r4, r0
 800c51e:	68b8      	ldr	r0, [r7, #8]
 800c520:	f7ff ff64 	bl	800c3ec <mem_to_ptr>
 800c524:	4603      	mov	r3, r0
 800c526:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c528:	bf00      	nop
 800c52a:	3714      	adds	r7, #20
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd90      	pop	{r4, r7, pc}
 800c530:	20009e1c 	.word	0x20009e1c
 800c534:	0801a980 	.word	0x0801a980
 800c538:	0801a9b0 	.word	0x0801a9b0
 800c53c:	0801a9c8 	.word	0x0801a9c8
 800c540:	20009e20 	.word	0x20009e20
 800c544:	0801a9f0 	.word	0x0801a9f0
 800c548:	0801aa0c 	.word	0x0801aa0c
 800c54c:	0801aa28 	.word	0x0801aa28
 800c550:	20009e28 	.word	0x20009e28

0800c554 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c55a:	4b1f      	ldr	r3, [pc, #124]	; (800c5d8 <mem_init+0x84>)
 800c55c:	3303      	adds	r3, #3
 800c55e:	f023 0303 	bic.w	r3, r3, #3
 800c562:	461a      	mov	r2, r3
 800c564:	4b1d      	ldr	r3, [pc, #116]	; (800c5dc <mem_init+0x88>)
 800c566:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c568:	4b1c      	ldr	r3, [pc, #112]	; (800c5dc <mem_init+0x88>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c574:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2200      	movs	r2, #0
 800c57a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2200      	movs	r2, #0
 800c580:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c582:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c586:	f7ff ff1f 	bl	800c3c8 <ptr_to_mem>
 800c58a:	4603      	mov	r3, r0
 800c58c:	4a14      	ldr	r2, [pc, #80]	; (800c5e0 <mem_init+0x8c>)
 800c58e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c590:	4b13      	ldr	r3, [pc, #76]	; (800c5e0 <mem_init+0x8c>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	2201      	movs	r2, #1
 800c596:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c598:	4b11      	ldr	r3, [pc, #68]	; (800c5e0 <mem_init+0x8c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5a0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c5a2:	4b0f      	ldr	r3, [pc, #60]	; (800c5e0 <mem_init+0x8c>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5aa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c5ac:	4b0b      	ldr	r3, [pc, #44]	; (800c5dc <mem_init+0x88>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a0c      	ldr	r2, [pc, #48]	; (800c5e4 <mem_init+0x90>)
 800c5b2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c5b4:	480c      	ldr	r0, [pc, #48]	; (800c5e8 <mem_init+0x94>)
 800c5b6:	f00c fe0f 	bl	80191d8 <sys_mutex_new>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d006      	beq.n	800c5ce <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c5c0:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <mem_init+0x98>)
 800c5c2:	f240 221f 	movw	r2, #543	; 0x21f
 800c5c6:	490a      	ldr	r1, [pc, #40]	; (800c5f0 <mem_init+0x9c>)
 800c5c8:	480a      	ldr	r0, [pc, #40]	; (800c5f4 <mem_init+0xa0>)
 800c5ca:	f00c ffff 	bl	80195cc <iprintf>
  }
}
 800c5ce:	bf00      	nop
 800c5d0:	3708      	adds	r7, #8
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bd80      	pop	{r7, pc}
 800c5d6:	bf00      	nop
 800c5d8:	200097c8 	.word	0x200097c8
 800c5dc:	20009e1c 	.word	0x20009e1c
 800c5e0:	20009e20 	.word	0x20009e20
 800c5e4:	20009e28 	.word	0x20009e28
 800c5e8:	20009e24 	.word	0x20009e24
 800c5ec:	0801a980 	.word	0x0801a980
 800c5f0:	0801aa54 	.word	0x0801aa54
 800c5f4:	0801a9c8 	.word	0x0801a9c8

0800c5f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b086      	sub	sp, #24
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f7ff fef3 	bl	800c3ec <mem_to_ptr>
 800c606:	4603      	mov	r3, r0
 800c608:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	881b      	ldrh	r3, [r3, #0]
 800c60e:	4618      	mov	r0, r3
 800c610:	f7ff feda 	bl	800c3c8 <ptr_to_mem>
 800c614:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	885b      	ldrh	r3, [r3, #2]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fed4 	bl	800c3c8 <ptr_to_mem>
 800c620:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	881b      	ldrh	r3, [r3, #0]
 800c626:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c62a:	d818      	bhi.n	800c65e <mem_link_valid+0x66>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	885b      	ldrh	r3, [r3, #2]
 800c630:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c634:	d813      	bhi.n	800c65e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c63a:	8afa      	ldrh	r2, [r7, #22]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d004      	beq.n	800c64a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	8afa      	ldrh	r2, [r7, #22]
 800c646:	429a      	cmp	r2, r3
 800c648:	d109      	bne.n	800c65e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c64a:	4b08      	ldr	r3, [pc, #32]	; (800c66c <mem_link_valid+0x74>)
 800c64c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c64e:	693a      	ldr	r2, [r7, #16]
 800c650:	429a      	cmp	r2, r3
 800c652:	d006      	beq.n	800c662 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	885b      	ldrh	r3, [r3, #2]
 800c658:	8afa      	ldrh	r2, [r7, #22]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d001      	beq.n	800c662 <mem_link_valid+0x6a>
    return 0;
 800c65e:	2300      	movs	r3, #0
 800c660:	e000      	b.n	800c664 <mem_link_valid+0x6c>
  }
  return 1;
 800c662:	2301      	movs	r3, #1
}
 800c664:	4618      	mov	r0, r3
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}
 800c66c:	20009e20 	.word	0x20009e20

0800c670 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b088      	sub	sp, #32
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d070      	beq.n	800c760 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f003 0303 	and.w	r3, r3, #3
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00d      	beq.n	800c6a4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c688:	4b37      	ldr	r3, [pc, #220]	; (800c768 <mem_free+0xf8>)
 800c68a:	f240 2273 	movw	r2, #627	; 0x273
 800c68e:	4937      	ldr	r1, [pc, #220]	; (800c76c <mem_free+0xfc>)
 800c690:	4837      	ldr	r0, [pc, #220]	; (800c770 <mem_free+0x100>)
 800c692:	f00c ff9b 	bl	80195cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c696:	f00c fdfd 	bl	8019294 <sys_arch_protect>
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	68f8      	ldr	r0, [r7, #12]
 800c69e:	f00c fe07 	bl	80192b0 <sys_arch_unprotect>
    return;
 800c6a2:	e05e      	b.n	800c762 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	3b08      	subs	r3, #8
 800c6a8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c6aa:	4b32      	ldr	r3, [pc, #200]	; (800c774 <mem_free+0x104>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	69fa      	ldr	r2, [r7, #28]
 800c6b0:	429a      	cmp	r2, r3
 800c6b2:	d306      	bcc.n	800c6c2 <mem_free+0x52>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f103 020c 	add.w	r2, r3, #12
 800c6ba:	4b2f      	ldr	r3, [pc, #188]	; (800c778 <mem_free+0x108>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d90d      	bls.n	800c6de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c6c2:	4b29      	ldr	r3, [pc, #164]	; (800c768 <mem_free+0xf8>)
 800c6c4:	f240 227f 	movw	r2, #639	; 0x27f
 800c6c8:	492c      	ldr	r1, [pc, #176]	; (800c77c <mem_free+0x10c>)
 800c6ca:	4829      	ldr	r0, [pc, #164]	; (800c770 <mem_free+0x100>)
 800c6cc:	f00c ff7e 	bl	80195cc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c6d0:	f00c fde0 	bl	8019294 <sys_arch_protect>
 800c6d4:	6138      	str	r0, [r7, #16]
 800c6d6:	6938      	ldr	r0, [r7, #16]
 800c6d8:	f00c fdea 	bl	80192b0 <sys_arch_unprotect>
    return;
 800c6dc:	e041      	b.n	800c762 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c6de:	4828      	ldr	r0, [pc, #160]	; (800c780 <mem_free+0x110>)
 800c6e0:	f00c fd96 	bl	8019210 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c6e4:	69fb      	ldr	r3, [r7, #28]
 800c6e6:	791b      	ldrb	r3, [r3, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d110      	bne.n	800c70e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c6ec:	4b1e      	ldr	r3, [pc, #120]	; (800c768 <mem_free+0xf8>)
 800c6ee:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c6f2:	4924      	ldr	r1, [pc, #144]	; (800c784 <mem_free+0x114>)
 800c6f4:	481e      	ldr	r0, [pc, #120]	; (800c770 <mem_free+0x100>)
 800c6f6:	f00c ff69 	bl	80195cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c6fa:	4821      	ldr	r0, [pc, #132]	; (800c780 <mem_free+0x110>)
 800c6fc:	f00c fd97 	bl	801922e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c700:	f00c fdc8 	bl	8019294 <sys_arch_protect>
 800c704:	6178      	str	r0, [r7, #20]
 800c706:	6978      	ldr	r0, [r7, #20]
 800c708:	f00c fdd2 	bl	80192b0 <sys_arch_unprotect>
    return;
 800c70c:	e029      	b.n	800c762 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c70e:	69f8      	ldr	r0, [r7, #28]
 800c710:	f7ff ff72 	bl	800c5f8 <mem_link_valid>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d110      	bne.n	800c73c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c71a:	4b13      	ldr	r3, [pc, #76]	; (800c768 <mem_free+0xf8>)
 800c71c:	f240 2295 	movw	r2, #661	; 0x295
 800c720:	4919      	ldr	r1, [pc, #100]	; (800c788 <mem_free+0x118>)
 800c722:	4813      	ldr	r0, [pc, #76]	; (800c770 <mem_free+0x100>)
 800c724:	f00c ff52 	bl	80195cc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c728:	4815      	ldr	r0, [pc, #84]	; (800c780 <mem_free+0x110>)
 800c72a:	f00c fd80 	bl	801922e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c72e:	f00c fdb1 	bl	8019294 <sys_arch_protect>
 800c732:	61b8      	str	r0, [r7, #24]
 800c734:	69b8      	ldr	r0, [r7, #24]
 800c736:	f00c fdbb 	bl	80192b0 <sys_arch_unprotect>
    return;
 800c73a:	e012      	b.n	800c762 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2200      	movs	r2, #0
 800c740:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c742:	4b12      	ldr	r3, [pc, #72]	; (800c78c <mem_free+0x11c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69fa      	ldr	r2, [r7, #28]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d202      	bcs.n	800c752 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c74c:	4a0f      	ldr	r2, [pc, #60]	; (800c78c <mem_free+0x11c>)
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c752:	69f8      	ldr	r0, [r7, #28]
 800c754:	f7ff fe5c 	bl	800c410 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c758:	4809      	ldr	r0, [pc, #36]	; (800c780 <mem_free+0x110>)
 800c75a:	f00c fd68 	bl	801922e <sys_mutex_unlock>
 800c75e:	e000      	b.n	800c762 <mem_free+0xf2>
    return;
 800c760:	bf00      	nop
}
 800c762:	3720      	adds	r7, #32
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}
 800c768:	0801a980 	.word	0x0801a980
 800c76c:	0801aa70 	.word	0x0801aa70
 800c770:	0801a9c8 	.word	0x0801a9c8
 800c774:	20009e1c 	.word	0x20009e1c
 800c778:	20009e20 	.word	0x20009e20
 800c77c:	0801aa94 	.word	0x0801aa94
 800c780:	20009e24 	.word	0x20009e24
 800c784:	0801aab0 	.word	0x0801aab0
 800c788:	0801aad8 	.word	0x0801aad8
 800c78c:	20009e28 	.word	0x20009e28

0800c790 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c790:	b580      	push	{r7, lr}
 800c792:	b088      	sub	sp, #32
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	460b      	mov	r3, r1
 800c79a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c79c:	887b      	ldrh	r3, [r7, #2]
 800c79e:	3303      	adds	r3, #3
 800c7a0:	b29b      	uxth	r3, r3
 800c7a2:	f023 0303 	bic.w	r3, r3, #3
 800c7a6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c7a8:	8bfb      	ldrh	r3, [r7, #30]
 800c7aa:	2b0b      	cmp	r3, #11
 800c7ac:	d801      	bhi.n	800c7b2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c7ae:	230c      	movs	r3, #12
 800c7b0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c7b2:	8bfb      	ldrh	r3, [r7, #30]
 800c7b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c7b8:	d803      	bhi.n	800c7c2 <mem_trim+0x32>
 800c7ba:	8bfa      	ldrh	r2, [r7, #30]
 800c7bc:	887b      	ldrh	r3, [r7, #2]
 800c7be:	429a      	cmp	r2, r3
 800c7c0:	d201      	bcs.n	800c7c6 <mem_trim+0x36>
    return NULL;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	e0d8      	b.n	800c978 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c7c6:	4b6e      	ldr	r3, [pc, #440]	; (800c980 <mem_trim+0x1f0>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d304      	bcc.n	800c7da <mem_trim+0x4a>
 800c7d0:	4b6c      	ldr	r3, [pc, #432]	; (800c984 <mem_trim+0x1f4>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d306      	bcc.n	800c7e8 <mem_trim+0x58>
 800c7da:	4b6b      	ldr	r3, [pc, #428]	; (800c988 <mem_trim+0x1f8>)
 800c7dc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c7e0:	496a      	ldr	r1, [pc, #424]	; (800c98c <mem_trim+0x1fc>)
 800c7e2:	486b      	ldr	r0, [pc, #428]	; (800c990 <mem_trim+0x200>)
 800c7e4:	f00c fef2 	bl	80195cc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c7e8:	4b65      	ldr	r3, [pc, #404]	; (800c980 <mem_trim+0x1f0>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d304      	bcc.n	800c7fc <mem_trim+0x6c>
 800c7f2:	4b64      	ldr	r3, [pc, #400]	; (800c984 <mem_trim+0x1f4>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	429a      	cmp	r2, r3
 800c7fa:	d307      	bcc.n	800c80c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c7fc:	f00c fd4a 	bl	8019294 <sys_arch_protect>
 800c800:	60b8      	str	r0, [r7, #8]
 800c802:	68b8      	ldr	r0, [r7, #8]
 800c804:	f00c fd54 	bl	80192b0 <sys_arch_unprotect>
    return rmem;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	e0b5      	b.n	800c978 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	3b08      	subs	r3, #8
 800c810:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c812:	69b8      	ldr	r0, [r7, #24]
 800c814:	f7ff fdea 	bl	800c3ec <mem_to_ptr>
 800c818:	4603      	mov	r3, r0
 800c81a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	881a      	ldrh	r2, [r3, #0]
 800c820:	8afb      	ldrh	r3, [r7, #22]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	b29b      	uxth	r3, r3
 800c826:	3b08      	subs	r3, #8
 800c828:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c82a:	8bfa      	ldrh	r2, [r7, #30]
 800c82c:	8abb      	ldrh	r3, [r7, #20]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d906      	bls.n	800c840 <mem_trim+0xb0>
 800c832:	4b55      	ldr	r3, [pc, #340]	; (800c988 <mem_trim+0x1f8>)
 800c834:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c838:	4956      	ldr	r1, [pc, #344]	; (800c994 <mem_trim+0x204>)
 800c83a:	4855      	ldr	r0, [pc, #340]	; (800c990 <mem_trim+0x200>)
 800c83c:	f00c fec6 	bl	80195cc <iprintf>
  if (newsize > size) {
 800c840:	8bfa      	ldrh	r2, [r7, #30]
 800c842:	8abb      	ldrh	r3, [r7, #20]
 800c844:	429a      	cmp	r2, r3
 800c846:	d901      	bls.n	800c84c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c848:	2300      	movs	r3, #0
 800c84a:	e095      	b.n	800c978 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c84c:	8bfa      	ldrh	r2, [r7, #30]
 800c84e:	8abb      	ldrh	r3, [r7, #20]
 800c850:	429a      	cmp	r2, r3
 800c852:	d101      	bne.n	800c858 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	e08f      	b.n	800c978 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c858:	484f      	ldr	r0, [pc, #316]	; (800c998 <mem_trim+0x208>)
 800c85a:	f00c fcd9 	bl	8019210 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	881b      	ldrh	r3, [r3, #0]
 800c862:	4618      	mov	r0, r3
 800c864:	f7ff fdb0 	bl	800c3c8 <ptr_to_mem>
 800c868:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	791b      	ldrb	r3, [r3, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d13f      	bne.n	800c8f2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c872:	69bb      	ldr	r3, [r7, #24]
 800c874:	881b      	ldrh	r3, [r3, #0]
 800c876:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c87a:	d106      	bne.n	800c88a <mem_trim+0xfa>
 800c87c:	4b42      	ldr	r3, [pc, #264]	; (800c988 <mem_trim+0x1f8>)
 800c87e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c882:	4946      	ldr	r1, [pc, #280]	; (800c99c <mem_trim+0x20c>)
 800c884:	4842      	ldr	r0, [pc, #264]	; (800c990 <mem_trim+0x200>)
 800c886:	f00c fea1 	bl	80195cc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	881b      	ldrh	r3, [r3, #0]
 800c88e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c890:	8afa      	ldrh	r2, [r7, #22]
 800c892:	8bfb      	ldrh	r3, [r7, #30]
 800c894:	4413      	add	r3, r2
 800c896:	b29b      	uxth	r3, r3
 800c898:	3308      	adds	r3, #8
 800c89a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c89c:	4b40      	ldr	r3, [pc, #256]	; (800c9a0 <mem_trim+0x210>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	693a      	ldr	r2, [r7, #16]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d106      	bne.n	800c8b4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c8a6:	89fb      	ldrh	r3, [r7, #14]
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	f7ff fd8d 	bl	800c3c8 <ptr_to_mem>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	4a3b      	ldr	r2, [pc, #236]	; (800c9a0 <mem_trim+0x210>)
 800c8b2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c8b4:	89fb      	ldrh	r3, [r7, #14]
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f7ff fd86 	bl	800c3c8 <ptr_to_mem>
 800c8bc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c8be:	693b      	ldr	r3, [r7, #16]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	89ba      	ldrh	r2, [r7, #12]
 800c8c8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	8afa      	ldrh	r2, [r7, #22]
 800c8ce:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	89fa      	ldrh	r2, [r7, #14]
 800c8d4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8de:	d047      	beq.n	800c970 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	881b      	ldrh	r3, [r3, #0]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7ff fd6f 	bl	800c3c8 <ptr_to_mem>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	89fb      	ldrh	r3, [r7, #14]
 800c8ee:	8053      	strh	r3, [r2, #2]
 800c8f0:	e03e      	b.n	800c970 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c8f2:	8bfb      	ldrh	r3, [r7, #30]
 800c8f4:	f103 0214 	add.w	r2, r3, #20
 800c8f8:	8abb      	ldrh	r3, [r7, #20]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d838      	bhi.n	800c970 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c8fe:	8afa      	ldrh	r2, [r7, #22]
 800c900:	8bfb      	ldrh	r3, [r7, #30]
 800c902:	4413      	add	r3, r2
 800c904:	b29b      	uxth	r3, r3
 800c906:	3308      	adds	r3, #8
 800c908:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c90a:	69bb      	ldr	r3, [r7, #24]
 800c90c:	881b      	ldrh	r3, [r3, #0]
 800c90e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c912:	d106      	bne.n	800c922 <mem_trim+0x192>
 800c914:	4b1c      	ldr	r3, [pc, #112]	; (800c988 <mem_trim+0x1f8>)
 800c916:	f240 3216 	movw	r2, #790	; 0x316
 800c91a:	4920      	ldr	r1, [pc, #128]	; (800c99c <mem_trim+0x20c>)
 800c91c:	481c      	ldr	r0, [pc, #112]	; (800c990 <mem_trim+0x200>)
 800c91e:	f00c fe55 	bl	80195cc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c922:	89fb      	ldrh	r3, [r7, #14]
 800c924:	4618      	mov	r0, r3
 800c926:	f7ff fd4f 	bl	800c3c8 <ptr_to_mem>
 800c92a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c92c:	4b1c      	ldr	r3, [pc, #112]	; (800c9a0 <mem_trim+0x210>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	693a      	ldr	r2, [r7, #16]
 800c932:	429a      	cmp	r2, r3
 800c934:	d202      	bcs.n	800c93c <mem_trim+0x1ac>
      lfree = mem2;
 800c936:	4a1a      	ldr	r2, [pc, #104]	; (800c9a0 <mem_trim+0x210>)
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	2200      	movs	r2, #0
 800c940:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	881a      	ldrh	r2, [r3, #0]
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	8afa      	ldrh	r2, [r7, #22]
 800c94e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c950:	69bb      	ldr	r3, [r7, #24]
 800c952:	89fa      	ldrh	r2, [r7, #14]
 800c954:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c956:	693b      	ldr	r3, [r7, #16]
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c95e:	d007      	beq.n	800c970 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	881b      	ldrh	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f7ff fd2f 	bl	800c3c8 <ptr_to_mem>
 800c96a:	4602      	mov	r2, r0
 800c96c:	89fb      	ldrh	r3, [r7, #14]
 800c96e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c970:	4809      	ldr	r0, [pc, #36]	; (800c998 <mem_trim+0x208>)
 800c972:	f00c fc5c 	bl	801922e <sys_mutex_unlock>
  return rmem;
 800c976:	687b      	ldr	r3, [r7, #4]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3720      	adds	r7, #32
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20009e1c 	.word	0x20009e1c
 800c984:	20009e20 	.word	0x20009e20
 800c988:	0801a980 	.word	0x0801a980
 800c98c:	0801ab0c 	.word	0x0801ab0c
 800c990:	0801a9c8 	.word	0x0801a9c8
 800c994:	0801ab24 	.word	0x0801ab24
 800c998:	20009e24 	.word	0x20009e24
 800c99c:	0801ab44 	.word	0x0801ab44
 800c9a0:	20009e28 	.word	0x20009e28

0800c9a4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c9ae:	88fb      	ldrh	r3, [r7, #6]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d101      	bne.n	800c9b8 <mem_malloc+0x14>
    return NULL;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	e0e2      	b.n	800cb7e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c9b8:	88fb      	ldrh	r3, [r7, #6]
 800c9ba:	3303      	adds	r3, #3
 800c9bc:	b29b      	uxth	r3, r3
 800c9be:	f023 0303 	bic.w	r3, r3, #3
 800c9c2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c9c4:	8bbb      	ldrh	r3, [r7, #28]
 800c9c6:	2b0b      	cmp	r3, #11
 800c9c8:	d801      	bhi.n	800c9ce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c9ca:	230c      	movs	r3, #12
 800c9cc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c9ce:	8bbb      	ldrh	r3, [r7, #28]
 800c9d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9d4:	d803      	bhi.n	800c9de <mem_malloc+0x3a>
 800c9d6:	8bba      	ldrh	r2, [r7, #28]
 800c9d8:	88fb      	ldrh	r3, [r7, #6]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d201      	bcs.n	800c9e2 <mem_malloc+0x3e>
    return NULL;
 800c9de:	2300      	movs	r3, #0
 800c9e0:	e0cd      	b.n	800cb7e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c9e2:	4869      	ldr	r0, [pc, #420]	; (800cb88 <mem_malloc+0x1e4>)
 800c9e4:	f00c fc14 	bl	8019210 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c9e8:	4b68      	ldr	r3, [pc, #416]	; (800cb8c <mem_malloc+0x1e8>)
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7ff fcfd 	bl	800c3ec <mem_to_ptr>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	83fb      	strh	r3, [r7, #30]
 800c9f6:	e0b7      	b.n	800cb68 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c9f8:	8bfb      	ldrh	r3, [r7, #30]
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f7ff fce4 	bl	800c3c8 <ptr_to_mem>
 800ca00:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	791b      	ldrb	r3, [r3, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f040 80a7 	bne.w	800cb5a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	881b      	ldrh	r3, [r3, #0]
 800ca10:	461a      	mov	r2, r3
 800ca12:	8bfb      	ldrh	r3, [r7, #30]
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	f1a3 0208 	sub.w	r2, r3, #8
 800ca1a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	f0c0 809c 	bcc.w	800cb5a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	881b      	ldrh	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	8bfb      	ldrh	r3, [r7, #30]
 800ca2a:	1ad3      	subs	r3, r2, r3
 800ca2c:	f1a3 0208 	sub.w	r2, r3, #8
 800ca30:	8bbb      	ldrh	r3, [r7, #28]
 800ca32:	3314      	adds	r3, #20
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d333      	bcc.n	800caa0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ca38:	8bfa      	ldrh	r2, [r7, #30]
 800ca3a:	8bbb      	ldrh	r3, [r7, #28]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	3308      	adds	r3, #8
 800ca42:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ca44:	8a7b      	ldrh	r3, [r7, #18]
 800ca46:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca4a:	d106      	bne.n	800ca5a <mem_malloc+0xb6>
 800ca4c:	4b50      	ldr	r3, [pc, #320]	; (800cb90 <mem_malloc+0x1ec>)
 800ca4e:	f240 3287 	movw	r2, #903	; 0x387
 800ca52:	4950      	ldr	r1, [pc, #320]	; (800cb94 <mem_malloc+0x1f0>)
 800ca54:	4850      	ldr	r0, [pc, #320]	; (800cb98 <mem_malloc+0x1f4>)
 800ca56:	f00c fdb9 	bl	80195cc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ca5a:	8a7b      	ldrh	r3, [r7, #18]
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f7ff fcb3 	bl	800c3c8 <ptr_to_mem>
 800ca62:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	881a      	ldrh	r2, [r3, #0]
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	8bfa      	ldrh	r2, [r7, #30]
 800ca76:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	8a7a      	ldrh	r2, [r7, #18]
 800ca7c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	2201      	movs	r2, #1
 800ca82:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	881b      	ldrh	r3, [r3, #0]
 800ca88:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ca8c:	d00b      	beq.n	800caa6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	881b      	ldrh	r3, [r3, #0]
 800ca92:	4618      	mov	r0, r3
 800ca94:	f7ff fc98 	bl	800c3c8 <ptr_to_mem>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	8a7b      	ldrh	r3, [r7, #18]
 800ca9c:	8053      	strh	r3, [r2, #2]
 800ca9e:	e002      	b.n	800caa6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	2201      	movs	r2, #1
 800caa4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800caa6:	4b39      	ldr	r3, [pc, #228]	; (800cb8c <mem_malloc+0x1e8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	697a      	ldr	r2, [r7, #20]
 800caac:	429a      	cmp	r2, r3
 800caae:	d127      	bne.n	800cb00 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800cab0:	4b36      	ldr	r3, [pc, #216]	; (800cb8c <mem_malloc+0x1e8>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800cab6:	e005      	b.n	800cac4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800cab8:	69bb      	ldr	r3, [r7, #24]
 800caba:	881b      	ldrh	r3, [r3, #0]
 800cabc:	4618      	mov	r0, r3
 800cabe:	f7ff fc83 	bl	800c3c8 <ptr_to_mem>
 800cac2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	791b      	ldrb	r3, [r3, #4]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d004      	beq.n	800cad6 <mem_malloc+0x132>
 800cacc:	4b33      	ldr	r3, [pc, #204]	; (800cb9c <mem_malloc+0x1f8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	69ba      	ldr	r2, [r7, #24]
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d1f0      	bne.n	800cab8 <mem_malloc+0x114>
          }
          lfree = cur;
 800cad6:	4a2d      	ldr	r2, [pc, #180]	; (800cb8c <mem_malloc+0x1e8>)
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800cadc:	4b2b      	ldr	r3, [pc, #172]	; (800cb8c <mem_malloc+0x1e8>)
 800cade:	681a      	ldr	r2, [r3, #0]
 800cae0:	4b2e      	ldr	r3, [pc, #184]	; (800cb9c <mem_malloc+0x1f8>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d00b      	beq.n	800cb00 <mem_malloc+0x15c>
 800cae8:	4b28      	ldr	r3, [pc, #160]	; (800cb8c <mem_malloc+0x1e8>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	791b      	ldrb	r3, [r3, #4]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d006      	beq.n	800cb00 <mem_malloc+0x15c>
 800caf2:	4b27      	ldr	r3, [pc, #156]	; (800cb90 <mem_malloc+0x1ec>)
 800caf4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800caf8:	4929      	ldr	r1, [pc, #164]	; (800cba0 <mem_malloc+0x1fc>)
 800cafa:	4827      	ldr	r0, [pc, #156]	; (800cb98 <mem_malloc+0x1f4>)
 800cafc:	f00c fd66 	bl	80195cc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800cb00:	4821      	ldr	r0, [pc, #132]	; (800cb88 <mem_malloc+0x1e4>)
 800cb02:	f00c fb94 	bl	801922e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800cb06:	8bba      	ldrh	r2, [r7, #28]
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	3308      	adds	r3, #8
 800cb0e:	4a23      	ldr	r2, [pc, #140]	; (800cb9c <mem_malloc+0x1f8>)
 800cb10:	6812      	ldr	r2, [r2, #0]
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d906      	bls.n	800cb24 <mem_malloc+0x180>
 800cb16:	4b1e      	ldr	r3, [pc, #120]	; (800cb90 <mem_malloc+0x1ec>)
 800cb18:	f240 32b9 	movw	r2, #953	; 0x3b9
 800cb1c:	4921      	ldr	r1, [pc, #132]	; (800cba4 <mem_malloc+0x200>)
 800cb1e:	481e      	ldr	r0, [pc, #120]	; (800cb98 <mem_malloc+0x1f4>)
 800cb20:	f00c fd54 	bl	80195cc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f003 0303 	and.w	r3, r3, #3
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d006      	beq.n	800cb3c <mem_malloc+0x198>
 800cb2e:	4b18      	ldr	r3, [pc, #96]	; (800cb90 <mem_malloc+0x1ec>)
 800cb30:	f240 32bb 	movw	r2, #955	; 0x3bb
 800cb34:	491c      	ldr	r1, [pc, #112]	; (800cba8 <mem_malloc+0x204>)
 800cb36:	4818      	ldr	r0, [pc, #96]	; (800cb98 <mem_malloc+0x1f4>)
 800cb38:	f00c fd48 	bl	80195cc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f003 0303 	and.w	r3, r3, #3
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d006      	beq.n	800cb54 <mem_malloc+0x1b0>
 800cb46:	4b12      	ldr	r3, [pc, #72]	; (800cb90 <mem_malloc+0x1ec>)
 800cb48:	f240 32bd 	movw	r2, #957	; 0x3bd
 800cb4c:	4917      	ldr	r1, [pc, #92]	; (800cbac <mem_malloc+0x208>)
 800cb4e:	4812      	ldr	r0, [pc, #72]	; (800cb98 <mem_malloc+0x1f4>)
 800cb50:	f00c fd3c 	bl	80195cc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	3308      	adds	r3, #8
 800cb58:	e011      	b.n	800cb7e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800cb5a:	8bfb      	ldrh	r3, [r7, #30]
 800cb5c:	4618      	mov	r0, r3
 800cb5e:	f7ff fc33 	bl	800c3c8 <ptr_to_mem>
 800cb62:	4603      	mov	r3, r0
 800cb64:	881b      	ldrh	r3, [r3, #0]
 800cb66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800cb68:	8bfa      	ldrh	r2, [r7, #30]
 800cb6a:	8bbb      	ldrh	r3, [r7, #28]
 800cb6c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cb70:	429a      	cmp	r2, r3
 800cb72:	f4ff af41 	bcc.w	800c9f8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cb76:	4804      	ldr	r0, [pc, #16]	; (800cb88 <mem_malloc+0x1e4>)
 800cb78:	f00c fb59 	bl	801922e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800cb7c:	2300      	movs	r3, #0
}
 800cb7e:	4618      	mov	r0, r3
 800cb80:	3720      	adds	r7, #32
 800cb82:	46bd      	mov	sp, r7
 800cb84:	bd80      	pop	{r7, pc}
 800cb86:	bf00      	nop
 800cb88:	20009e24 	.word	0x20009e24
 800cb8c:	20009e28 	.word	0x20009e28
 800cb90:	0801a980 	.word	0x0801a980
 800cb94:	0801ab44 	.word	0x0801ab44
 800cb98:	0801a9c8 	.word	0x0801a9c8
 800cb9c:	20009e20 	.word	0x20009e20
 800cba0:	0801ab58 	.word	0x0801ab58
 800cba4:	0801ab74 	.word	0x0801ab74
 800cba8:	0801aba4 	.word	0x0801aba4
 800cbac:	0801abd4 	.word	0x0801abd4

0800cbb0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689b      	ldr	r3, [r3, #8]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	3303      	adds	r3, #3
 800cbc6:	f023 0303 	bic.w	r3, r3, #3
 800cbca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cbcc:	2300      	movs	r3, #0
 800cbce:	60fb      	str	r3, [r7, #12]
 800cbd0:	e011      	b.n	800cbf6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	68bb      	ldr	r3, [r7, #8]
 800cbda:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	881b      	ldrh	r3, [r3, #0]
 800cbe8:	461a      	mov	r2, r3
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	4413      	add	r3, r2
 800cbee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	3301      	adds	r3, #1
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	885b      	ldrh	r3, [r3, #2]
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	4293      	cmp	r3, r2
 800cc00:	dbe7      	blt.n	800cbd2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cc02:	bf00      	nop
 800cc04:	bf00      	nop
 800cc06:	3714      	adds	r7, #20
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0e:	4770      	bx	lr

0800cc10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc16:	2300      	movs	r3, #0
 800cc18:	80fb      	strh	r3, [r7, #6]
 800cc1a:	e009      	b.n	800cc30 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cc1c:	88fb      	ldrh	r3, [r7, #6]
 800cc1e:	4a08      	ldr	r2, [pc, #32]	; (800cc40 <memp_init+0x30>)
 800cc20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7ff ffc3 	bl	800cbb0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cc2a:	88fb      	ldrh	r3, [r7, #6]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	80fb      	strh	r3, [r7, #6]
 800cc30:	88fb      	ldrh	r3, [r7, #6]
 800cc32:	2b0c      	cmp	r3, #12
 800cc34:	d9f2      	bls.n	800cc1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cc36:	bf00      	nop
 800cc38:	bf00      	nop
 800cc3a:	3708      	adds	r7, #8
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	0801fb2c 	.word	0x0801fb2c

0800cc44 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b084      	sub	sp, #16
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cc4c:	f00c fb22 	bl	8019294 <sys_arch_protect>
 800cc50:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	689b      	ldr	r3, [r3, #8]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d015      	beq.n	800cc8c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	6812      	ldr	r2, [r2, #0]
 800cc68:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	f003 0303 	and.w	r3, r3, #3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d006      	beq.n	800cc82 <do_memp_malloc_pool+0x3e>
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <do_memp_malloc_pool+0x58>)
 800cc76:	f44f 728c 	mov.w	r2, #280	; 0x118
 800cc7a:	4909      	ldr	r1, [pc, #36]	; (800cca0 <do_memp_malloc_pool+0x5c>)
 800cc7c:	4809      	ldr	r0, [pc, #36]	; (800cca4 <do_memp_malloc_pool+0x60>)
 800cc7e:	f00c fca5 	bl	80195cc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cc82:	68f8      	ldr	r0, [r7, #12]
 800cc84:	f00c fb14 	bl	80192b0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	e003      	b.n	800cc94 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cc8c:	68f8      	ldr	r0, [r7, #12]
 800cc8e:	f00c fb0f 	bl	80192b0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	0801abf8 	.word	0x0801abf8
 800cca0:	0801ac28 	.word	0x0801ac28
 800cca4:	0801ac4c 	.word	0x0801ac4c

0800cca8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d106      	bne.n	800ccc4 <memp_malloc_pool+0x1c>
 800ccb6:	4b0a      	ldr	r3, [pc, #40]	; (800cce0 <memp_malloc_pool+0x38>)
 800ccb8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800ccbc:	4909      	ldr	r1, [pc, #36]	; (800cce4 <memp_malloc_pool+0x3c>)
 800ccbe:	480a      	ldr	r0, [pc, #40]	; (800cce8 <memp_malloc_pool+0x40>)
 800ccc0:	f00c fc84 	bl	80195cc <iprintf>
  if (desc == NULL) {
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d101      	bne.n	800ccce <memp_malloc_pool+0x26>
    return NULL;
 800ccca:	2300      	movs	r3, #0
 800cccc:	e003      	b.n	800ccd6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7ff ffb8 	bl	800cc44 <do_memp_malloc_pool>
 800ccd4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	0801abf8 	.word	0x0801abf8
 800cce4:	0801ac74 	.word	0x0801ac74
 800cce8:	0801ac4c 	.word	0x0801ac4c

0800ccec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b084      	sub	sp, #16
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ccf6:	79fb      	ldrb	r3, [r7, #7]
 800ccf8:	2b0c      	cmp	r3, #12
 800ccfa:	d908      	bls.n	800cd0e <memp_malloc+0x22>
 800ccfc:	4b0a      	ldr	r3, [pc, #40]	; (800cd28 <memp_malloc+0x3c>)
 800ccfe:	f240 1257 	movw	r2, #343	; 0x157
 800cd02:	490a      	ldr	r1, [pc, #40]	; (800cd2c <memp_malloc+0x40>)
 800cd04:	480a      	ldr	r0, [pc, #40]	; (800cd30 <memp_malloc+0x44>)
 800cd06:	f00c fc61 	bl	80195cc <iprintf>
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	e008      	b.n	800cd20 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cd0e:	79fb      	ldrb	r3, [r7, #7]
 800cd10:	4a08      	ldr	r2, [pc, #32]	; (800cd34 <memp_malloc+0x48>)
 800cd12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd16:	4618      	mov	r0, r3
 800cd18:	f7ff ff94 	bl	800cc44 <do_memp_malloc_pool>
 800cd1c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	0801abf8 	.word	0x0801abf8
 800cd2c:	0801ac88 	.word	0x0801ac88
 800cd30:	0801ac4c 	.word	0x0801ac4c
 800cd34:	0801fb2c 	.word	0x0801fb2c

0800cd38 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	f003 0303 	and.w	r3, r3, #3
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d006      	beq.n	800cd5a <do_memp_free_pool+0x22>
 800cd4c:	4b0d      	ldr	r3, [pc, #52]	; (800cd84 <do_memp_free_pool+0x4c>)
 800cd4e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800cd52:	490d      	ldr	r1, [pc, #52]	; (800cd88 <do_memp_free_pool+0x50>)
 800cd54:	480d      	ldr	r0, [pc, #52]	; (800cd8c <do_memp_free_pool+0x54>)
 800cd56:	f00c fc39 	bl	80195cc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cd5e:	f00c fa99 	bl	8019294 <sys_arch_protect>
 800cd62:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	689b      	ldr	r3, [r3, #8]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	689b      	ldr	r3, [r3, #8]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cd76:	68b8      	ldr	r0, [r7, #8]
 800cd78:	f00c fa9a 	bl	80192b0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cd7c:	bf00      	nop
 800cd7e:	3710      	adds	r7, #16
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0801abf8 	.word	0x0801abf8
 800cd88:	0801aca8 	.word	0x0801aca8
 800cd8c:	0801ac4c 	.word	0x0801ac4c

0800cd90 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d106      	bne.n	800cdae <memp_free_pool+0x1e>
 800cda0:	4b0a      	ldr	r3, [pc, #40]	; (800cdcc <memp_free_pool+0x3c>)
 800cda2:	f240 1295 	movw	r2, #405	; 0x195
 800cda6:	490a      	ldr	r1, [pc, #40]	; (800cdd0 <memp_free_pool+0x40>)
 800cda8:	480a      	ldr	r0, [pc, #40]	; (800cdd4 <memp_free_pool+0x44>)
 800cdaa:	f00c fc0f 	bl	80195cc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d007      	beq.n	800cdc4 <memp_free_pool+0x34>
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d004      	beq.n	800cdc4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800cdba:	6839      	ldr	r1, [r7, #0]
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	f7ff ffbb 	bl	800cd38 <do_memp_free_pool>
 800cdc2:	e000      	b.n	800cdc6 <memp_free_pool+0x36>
    return;
 800cdc4:	bf00      	nop
}
 800cdc6:	3708      	adds	r7, #8
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	0801abf8 	.word	0x0801abf8
 800cdd0:	0801ac74 	.word	0x0801ac74
 800cdd4:	0801ac4c 	.word	0x0801ac4c

0800cdd8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4603      	mov	r3, r0
 800cde0:	6039      	str	r1, [r7, #0]
 800cde2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	2b0c      	cmp	r3, #12
 800cde8:	d907      	bls.n	800cdfa <memp_free+0x22>
 800cdea:	4b0c      	ldr	r3, [pc, #48]	; (800ce1c <memp_free+0x44>)
 800cdec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800cdf0:	490b      	ldr	r1, [pc, #44]	; (800ce20 <memp_free+0x48>)
 800cdf2:	480c      	ldr	r0, [pc, #48]	; (800ce24 <memp_free+0x4c>)
 800cdf4:	f00c fbea 	bl	80195cc <iprintf>
 800cdf8:	e00c      	b.n	800ce14 <memp_free+0x3c>

  if (mem == NULL) {
 800cdfa:	683b      	ldr	r3, [r7, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d008      	beq.n	800ce12 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ce00:	79fb      	ldrb	r3, [r7, #7]
 800ce02:	4a09      	ldr	r2, [pc, #36]	; (800ce28 <memp_free+0x50>)
 800ce04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff ff94 	bl	800cd38 <do_memp_free_pool>
 800ce10:	e000      	b.n	800ce14 <memp_free+0x3c>
    return;
 800ce12:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ce14:	3708      	adds	r7, #8
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}
 800ce1a:	bf00      	nop
 800ce1c:	0801abf8 	.word	0x0801abf8
 800ce20:	0801acc8 	.word	0x0801acc8
 800ce24:	0801ac4c 	.word	0x0801ac4c
 800ce28:	0801fb2c 	.word	0x0801fb2c

0800ce2c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ce30:	bf00      	nop
 800ce32:	46bd      	mov	sp, r7
 800ce34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce38:	4770      	bx	lr
	...

0800ce3c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	60f8      	str	r0, [r7, #12]
 800ce44:	60b9      	str	r1, [r7, #8]
 800ce46:	607a      	str	r2, [r7, #4]
 800ce48:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d108      	bne.n	800ce62 <netif_add+0x26>
 800ce50:	4b5b      	ldr	r3, [pc, #364]	; (800cfc0 <netif_add+0x184>)
 800ce52:	f240 1227 	movw	r2, #295	; 0x127
 800ce56:	495b      	ldr	r1, [pc, #364]	; (800cfc4 <netif_add+0x188>)
 800ce58:	485b      	ldr	r0, [pc, #364]	; (800cfc8 <netif_add+0x18c>)
 800ce5a:	f00c fbb7 	bl	80195cc <iprintf>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	e0a9      	b.n	800cfb6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d108      	bne.n	800ce7a <netif_add+0x3e>
 800ce68:	4b55      	ldr	r3, [pc, #340]	; (800cfc0 <netif_add+0x184>)
 800ce6a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ce6e:	4957      	ldr	r1, [pc, #348]	; (800cfcc <netif_add+0x190>)
 800ce70:	4855      	ldr	r0, [pc, #340]	; (800cfc8 <netif_add+0x18c>)
 800ce72:	f00c fbab 	bl	80195cc <iprintf>
 800ce76:	2300      	movs	r3, #0
 800ce78:	e09d      	b.n	800cfb6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d101      	bne.n	800ce84 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ce80:	4b53      	ldr	r3, [pc, #332]	; (800cfd0 <netif_add+0x194>)
 800ce82:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d101      	bne.n	800ce8e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ce8a:	4b51      	ldr	r3, [pc, #324]	; (800cfd0 <netif_add+0x194>)
 800ce8c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d101      	bne.n	800ce98 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ce94:	4b4e      	ldr	r3, [pc, #312]	; (800cfd0 <netif_add+0x194>)
 800ce96:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2200      	movs	r2, #0
 800cea2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	4a49      	ldr	r2, [pc, #292]	; (800cfd4 <netif_add+0x198>)
 800ceae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3324      	adds	r3, #36	; 0x24
 800cec2:	2204      	movs	r2, #4
 800cec4:	2100      	movs	r1, #0
 800cec6:	4618      	mov	r0, r3
 800cec8:	f00c fbe5 	bl	8019696 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2200      	movs	r2, #0
 800ced0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6a3a      	ldr	r2, [r7, #32]
 800ced6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800ced8:	4b3f      	ldr	r3, [pc, #252]	; (800cfd8 <netif_add+0x19c>)
 800ceda:	781a      	ldrb	r2, [r3, #0]
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cee6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	68b9      	ldr	r1, [r7, #8]
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f000 f914 	bl	800d11c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef6:	68f8      	ldr	r0, [r7, #12]
 800cef8:	4798      	blx	r3
 800cefa:	4603      	mov	r3, r0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d001      	beq.n	800cf04 <netif_add+0xc8>
    return NULL;
 800cf00:	2300      	movs	r3, #0
 800cf02:	e058      	b.n	800cfb6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf0a:	2bff      	cmp	r3, #255	; 0xff
 800cf0c:	d103      	bne.n	800cf16 <netif_add+0xda>
        netif->num = 0;
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	2200      	movs	r2, #0
 800cf12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800cf16:	2300      	movs	r3, #0
 800cf18:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf1a:	4b30      	ldr	r3, [pc, #192]	; (800cfdc <netif_add+0x1a0>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	617b      	str	r3, [r7, #20]
 800cf20:	e02b      	b.n	800cf7a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cf22:	697a      	ldr	r2, [r7, #20]
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d106      	bne.n	800cf38 <netif_add+0xfc>
 800cf2a:	4b25      	ldr	r3, [pc, #148]	; (800cfc0 <netif_add+0x184>)
 800cf2c:	f240 128b 	movw	r2, #395	; 0x18b
 800cf30:	492b      	ldr	r1, [pc, #172]	; (800cfe0 <netif_add+0x1a4>)
 800cf32:	4825      	ldr	r0, [pc, #148]	; (800cfc8 <netif_add+0x18c>)
 800cf34:	f00c fb4a 	bl	80195cc <iprintf>
        num_netifs++;
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	3301      	adds	r3, #1
 800cf3c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cf3e:	693b      	ldr	r3, [r7, #16]
 800cf40:	2bff      	cmp	r3, #255	; 0xff
 800cf42:	dd06      	ble.n	800cf52 <netif_add+0x116>
 800cf44:	4b1e      	ldr	r3, [pc, #120]	; (800cfc0 <netif_add+0x184>)
 800cf46:	f240 128d 	movw	r2, #397	; 0x18d
 800cf4a:	4926      	ldr	r1, [pc, #152]	; (800cfe4 <netif_add+0x1a8>)
 800cf4c:	481e      	ldr	r0, [pc, #120]	; (800cfc8 <netif_add+0x18c>)
 800cf4e:	f00c fb3d 	bl	80195cc <iprintf>
        if (netif2->num == netif->num) {
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d108      	bne.n	800cf74 <netif_add+0x138>
          netif->num++;
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf68:	3301      	adds	r3, #1
 800cf6a:	b2da      	uxtb	r2, r3
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800cf72:	e005      	b.n	800cf80 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	617b      	str	r3, [r7, #20]
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d1d0      	bne.n	800cf22 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d1be      	bne.n	800cf04 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf8c:	2bfe      	cmp	r3, #254	; 0xfe
 800cf8e:	d103      	bne.n	800cf98 <netif_add+0x15c>
    netif_num = 0;
 800cf90:	4b11      	ldr	r3, [pc, #68]	; (800cfd8 <netif_add+0x19c>)
 800cf92:	2200      	movs	r2, #0
 800cf94:	701a      	strb	r2, [r3, #0]
 800cf96:	e006      	b.n	800cfa6 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	4b0d      	ldr	r3, [pc, #52]	; (800cfd8 <netif_add+0x19c>)
 800cfa4:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cfa6:	4b0d      	ldr	r3, [pc, #52]	; (800cfdc <netif_add+0x1a0>)
 800cfa8:	681a      	ldr	r2, [r3, #0]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cfae:	4a0b      	ldr	r2, [pc, #44]	; (800cfdc <netif_add+0x1a0>)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3718      	adds	r7, #24
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}
 800cfbe:	bf00      	nop
 800cfc0:	0801ace4 	.word	0x0801ace4
 800cfc4:	0801ad78 	.word	0x0801ad78
 800cfc8:	0801ad34 	.word	0x0801ad34
 800cfcc:	0801ad94 	.word	0x0801ad94
 800cfd0:	0801fbb0 	.word	0x0801fbb0
 800cfd4:	0800d3ff 	.word	0x0800d3ff
 800cfd8:	2000cf20 	.word	0x2000cf20
 800cfdc:	2000cf18 	.word	0x2000cf18
 800cfe0:	0801adb8 	.word	0x0801adb8
 800cfe4:	0801adcc 	.word	0x0801adcc

0800cfe8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cff2:	6839      	ldr	r1, [r7, #0]
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f002 fe37 	bl	800fc68 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f007 fea5 	bl	8014d4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800d002:	bf00      	nop
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b086      	sub	sp, #24
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	60b9      	str	r1, [r7, #8]
 800d016:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d106      	bne.n	800d02c <netif_do_set_ipaddr+0x20>
 800d01e:	4b1d      	ldr	r3, [pc, #116]	; (800d094 <netif_do_set_ipaddr+0x88>)
 800d020:	f240 12cb 	movw	r2, #459	; 0x1cb
 800d024:	491c      	ldr	r1, [pc, #112]	; (800d098 <netif_do_set_ipaddr+0x8c>)
 800d026:	481d      	ldr	r0, [pc, #116]	; (800d09c <netif_do_set_ipaddr+0x90>)
 800d028:	f00c fad0 	bl	80195cc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d106      	bne.n	800d040 <netif_do_set_ipaddr+0x34>
 800d032:	4b18      	ldr	r3, [pc, #96]	; (800d094 <netif_do_set_ipaddr+0x88>)
 800d034:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800d038:	4917      	ldr	r1, [pc, #92]	; (800d098 <netif_do_set_ipaddr+0x8c>)
 800d03a:	4818      	ldr	r0, [pc, #96]	; (800d09c <netif_do_set_ipaddr+0x90>)
 800d03c:	f00c fac6 	bl	80195cc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	3304      	adds	r3, #4
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	429a      	cmp	r2, r3
 800d04c:	d01c      	beq.n	800d088 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	3304      	adds	r3, #4
 800d058:	681a      	ldr	r2, [r3, #0]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800d05e:	f107 0314 	add.w	r3, r7, #20
 800d062:	4619      	mov	r1, r3
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f7ff ffbf 	bl	800cfe8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <netif_do_set_ipaddr+0x6a>
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	e000      	b.n	800d078 <netif_do_set_ipaddr+0x6c>
 800d076:	2300      	movs	r3, #0
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800d07c:	2101      	movs	r1, #1
 800d07e:	68f8      	ldr	r0, [r7, #12]
 800d080:	f000 f8d2 	bl	800d228 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800d084:	2301      	movs	r3, #1
 800d086:	e000      	b.n	800d08a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800d088:	2300      	movs	r3, #0
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}
 800d092:	bf00      	nop
 800d094:	0801ace4 	.word	0x0801ace4
 800d098:	0801adfc 	.word	0x0801adfc
 800d09c:	0801ad34 	.word	0x0801ad34

0800d0a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800d0a0:	b480      	push	{r7}
 800d0a2:	b085      	sub	sp, #20
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	681a      	ldr	r2, [r3, #0]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	3308      	adds	r3, #8
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d00a      	beq.n	800d0d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <netif_do_set_netmask+0x26>
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	e000      	b.n	800d0c8 <netif_do_set_netmask+0x28>
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e000      	b.n	800d0d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800d0d0:	2300      	movs	r3, #0
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b085      	sub	sp, #20
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	60f8      	str	r0, [r7, #12]
 800d0e6:	60b9      	str	r1, [r7, #8]
 800d0e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	330c      	adds	r3, #12
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d00a      	beq.n	800d10e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <netif_do_set_gw+0x26>
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	e000      	b.n	800d106 <netif_do_set_gw+0x28>
 800d104:	2300      	movs	r3, #0
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800d10a:	2301      	movs	r3, #1
 800d10c:	e000      	b.n	800d110 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800d10e:	2300      	movs	r3, #0
}
 800d110:	4618      	mov	r0, r3
 800d112:	3714      	adds	r7, #20
 800d114:	46bd      	mov	sp, r7
 800d116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11a:	4770      	bx	lr

0800d11c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b088      	sub	sp, #32
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
 800d128:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800d12e:	2300      	movs	r3, #0
 800d130:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d101      	bne.n	800d13c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800d138:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <netif_set_addr+0x90>)
 800d13a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800d142:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <netif_set_addr+0x90>)
 800d144:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d101      	bne.n	800d150 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800d14c:	4b17      	ldr	r3, [pc, #92]	; (800d1ac <netif_set_addr+0x90>)
 800d14e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d003      	beq.n	800d15e <netif_set_addr+0x42>
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d101      	bne.n	800d162 <netif_set_addr+0x46>
 800d15e:	2301      	movs	r3, #1
 800d160:	e000      	b.n	800d164 <netif_set_addr+0x48>
 800d162:	2300      	movs	r3, #0
 800d164:	617b      	str	r3, [r7, #20]
  if (remove) {
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d006      	beq.n	800d17a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d16c:	f107 0310 	add.w	r3, r7, #16
 800d170:	461a      	mov	r2, r3
 800d172:	68b9      	ldr	r1, [r7, #8]
 800d174:	68f8      	ldr	r0, [r7, #12]
 800d176:	f7ff ff49 	bl	800d00c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800d17a:	69fa      	ldr	r2, [r7, #28]
 800d17c:	6879      	ldr	r1, [r7, #4]
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f7ff ff8e 	bl	800d0a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800d184:	69ba      	ldr	r2, [r7, #24]
 800d186:	6839      	ldr	r1, [r7, #0]
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f7ff ffa8 	bl	800d0de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d106      	bne.n	800d1a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800d194:	f107 0310 	add.w	r3, r7, #16
 800d198:	461a      	mov	r2, r3
 800d19a:	68b9      	ldr	r1, [r7, #8]
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f7ff ff35 	bl	800d00c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800d1a2:	bf00      	nop
 800d1a4:	3720      	adds	r7, #32
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	0801fbb0 	.word	0x0801fbb0

0800d1b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b083      	sub	sp, #12
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800d1b8:	4a04      	ldr	r2, [pc, #16]	; (800d1cc <netif_set_default+0x1c>)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800d1be:	bf00      	nop
 800d1c0:	370c      	adds	r7, #12
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c8:	4770      	bx	lr
 800d1ca:	bf00      	nop
 800d1cc:	2000cf1c 	.word	0x2000cf1c

0800d1d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b082      	sub	sp, #8
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d107      	bne.n	800d1ee <netif_set_up+0x1e>
 800d1de:	4b0f      	ldr	r3, [pc, #60]	; (800d21c <netif_set_up+0x4c>)
 800d1e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800d1e4:	490e      	ldr	r1, [pc, #56]	; (800d220 <netif_set_up+0x50>)
 800d1e6:	480f      	ldr	r0, [pc, #60]	; (800d224 <netif_set_up+0x54>)
 800d1e8:	f00c f9f0 	bl	80195cc <iprintf>
 800d1ec:	e013      	b.n	800d216 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d1f4:	f003 0301 	and.w	r3, r3, #1
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d10c      	bne.n	800d216 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d202:	f043 0301 	orr.w	r3, r3, #1
 800d206:	b2da      	uxtb	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d20e:	2103      	movs	r1, #3
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f809 	bl	800d228 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}
 800d21c:	0801ace4 	.word	0x0801ace4
 800d220:	0801ae6c 	.word	0x0801ae6c
 800d224:	0801ad34 	.word	0x0801ad34

0800d228 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <netif_issue_reports+0x20>
 800d23a:	4b18      	ldr	r3, [pc, #96]	; (800d29c <netif_issue_reports+0x74>)
 800d23c:	f240 326d 	movw	r2, #877	; 0x36d
 800d240:	4917      	ldr	r1, [pc, #92]	; (800d2a0 <netif_issue_reports+0x78>)
 800d242:	4818      	ldr	r0, [pc, #96]	; (800d2a4 <netif_issue_reports+0x7c>)
 800d244:	f00c f9c2 	bl	80195cc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d24e:	f003 0304 	and.w	r3, r3, #4
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01e      	beq.n	800d294 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d25c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800d260:	2b00      	cmp	r3, #0
 800d262:	d017      	beq.n	800d294 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d264:	78fb      	ldrb	r3, [r7, #3]
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d013      	beq.n	800d296 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	3304      	adds	r3, #4
 800d272:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800d274:	2b00      	cmp	r3, #0
 800d276:	d00e      	beq.n	800d296 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d27e:	f003 0308 	and.w	r3, r3, #8
 800d282:	2b00      	cmp	r3, #0
 800d284:	d007      	beq.n	800d296 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3304      	adds	r3, #4
 800d28a:	4619      	mov	r1, r3
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f00a fb5f 	bl	8017950 <etharp_request>
 800d292:	e000      	b.n	800d296 <netif_issue_reports+0x6e>
    return;
 800d294:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800d296:	3708      	adds	r7, #8
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}
 800d29c:	0801ace4 	.word	0x0801ace4
 800d2a0:	0801ae88 	.word	0x0801ae88
 800d2a4:	0801ad34 	.word	0x0801ad34

0800d2a8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d107      	bne.n	800d2c6 <netif_set_down+0x1e>
 800d2b6:	4b12      	ldr	r3, [pc, #72]	; (800d300 <netif_set_down+0x58>)
 800d2b8:	f240 329b 	movw	r2, #923	; 0x39b
 800d2bc:	4911      	ldr	r1, [pc, #68]	; (800d304 <netif_set_down+0x5c>)
 800d2be:	4812      	ldr	r0, [pc, #72]	; (800d308 <netif_set_down+0x60>)
 800d2c0:	f00c f984 	bl	80195cc <iprintf>
 800d2c4:	e019      	b.n	800d2fa <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2cc:	f003 0301 	and.w	r3, r3, #1
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d012      	beq.n	800d2fa <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2da:	f023 0301 	bic.w	r3, r3, #1
 800d2de:	b2da      	uxtb	r2, r3
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d2ec:	f003 0308 	and.w	r3, r3, #8
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d002      	beq.n	800d2fa <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f009 fee5 	bl	80170c4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800d2fa:	3708      	adds	r7, #8
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	0801ace4 	.word	0x0801ace4
 800d304:	0801aeac 	.word	0x0801aeac
 800d308:	0801ad34 	.word	0x0801ad34

0800d30c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d107      	bne.n	800d32a <netif_set_link_up+0x1e>
 800d31a:	4b15      	ldr	r3, [pc, #84]	; (800d370 <netif_set_link_up+0x64>)
 800d31c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800d320:	4914      	ldr	r1, [pc, #80]	; (800d374 <netif_set_link_up+0x68>)
 800d322:	4815      	ldr	r0, [pc, #84]	; (800d378 <netif_set_link_up+0x6c>)
 800d324:	f00c f952 	bl	80195cc <iprintf>
 800d328:	e01e      	b.n	800d368 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d330:	f003 0304 	and.w	r3, r3, #4
 800d334:	2b00      	cmp	r3, #0
 800d336:	d117      	bne.n	800d368 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d33e:	f043 0304 	orr.w	r3, r3, #4
 800d342:	b2da      	uxtb	r2, r3
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800d34a:	6878      	ldr	r0, [r7, #4]
 800d34c:	f008 f92a 	bl	80155a4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800d350:	2103      	movs	r1, #3
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f7ff ff68 	bl	800d228 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d003      	beq.n	800d368 <netif_set_link_up+0x5c>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	69db      	ldr	r3, [r3, #28]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	0801ace4 	.word	0x0801ace4
 800d374:	0801aecc 	.word	0x0801aecc
 800d378:	0801ad34 	.word	0x0801ad34

0800d37c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d107      	bne.n	800d39a <netif_set_link_down+0x1e>
 800d38a:	4b11      	ldr	r3, [pc, #68]	; (800d3d0 <netif_set_link_down+0x54>)
 800d38c:	f240 4206 	movw	r2, #1030	; 0x406
 800d390:	4910      	ldr	r1, [pc, #64]	; (800d3d4 <netif_set_link_down+0x58>)
 800d392:	4811      	ldr	r0, [pc, #68]	; (800d3d8 <netif_set_link_down+0x5c>)
 800d394:	f00c f91a 	bl	80195cc <iprintf>
 800d398:	e017      	b.n	800d3ca <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d010      	beq.n	800d3ca <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d3ae:	f023 0304 	bic.w	r3, r3, #4
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	69db      	ldr	r3, [r3, #28]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d003      	beq.n	800d3ca <netif_set_link_down+0x4e>
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	69db      	ldr	r3, [r3, #28]
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800d3ca:	3708      	adds	r7, #8
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	0801ace4 	.word	0x0801ace4
 800d3d4:	0801aef0 	.word	0x0801aef0
 800d3d8:	0801ad34 	.word	0x0801ad34

0800d3dc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b083      	sub	sp, #12
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d002      	beq.n	800d3f2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	61da      	str	r2, [r3, #28]
  }
}
 800d3f2:	bf00      	nop
 800d3f4:	370c      	adds	r7, #12
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fc:	4770      	bx	lr

0800d3fe <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d3fe:	b480      	push	{r7}
 800d400:	b085      	sub	sp, #20
 800d402:	af00      	add	r7, sp, #0
 800d404:	60f8      	str	r0, [r7, #12]
 800d406:	60b9      	str	r1, [r7, #8]
 800d408:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d40a:	f06f 030b 	mvn.w	r3, #11
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3714      	adds	r7, #20
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
	...

0800d41c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	4603      	mov	r3, r0
 800d424:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d426:	79fb      	ldrb	r3, [r7, #7]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d013      	beq.n	800d454 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d42c:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <netif_get_by_index+0x48>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	60fb      	str	r3, [r7, #12]
 800d432:	e00c      	b.n	800d44e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d43a:	3301      	adds	r3, #1
 800d43c:	b2db      	uxtb	r3, r3
 800d43e:	79fa      	ldrb	r2, [r7, #7]
 800d440:	429a      	cmp	r2, r3
 800d442:	d101      	bne.n	800d448 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	e006      	b.n	800d456 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	60fb      	str	r3, [r7, #12]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1ef      	bne.n	800d434 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d454:	2300      	movs	r3, #0
}
 800d456:	4618      	mov	r0, r3
 800d458:	3714      	adds	r7, #20
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr
 800d462:	bf00      	nop
 800d464:	2000cf18 	.word	0x2000cf18

0800d468 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d46e:	f00b ff11 	bl	8019294 <sys_arch_protect>
 800d472:	6038      	str	r0, [r7, #0]
 800d474:	4b0d      	ldr	r3, [pc, #52]	; (800d4ac <pbuf_free_ooseq+0x44>)
 800d476:	2200      	movs	r2, #0
 800d478:	701a      	strb	r2, [r3, #0]
 800d47a:	6838      	ldr	r0, [r7, #0]
 800d47c:	f00b ff18 	bl	80192b0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d480:	4b0b      	ldr	r3, [pc, #44]	; (800d4b0 <pbuf_free_ooseq+0x48>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	607b      	str	r3, [r7, #4]
 800d486:	e00a      	b.n	800d49e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d003      	beq.n	800d498 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f002 fc27 	bl	800fce4 <tcp_free_ooseq>
      return;
 800d496:	e005      	b.n	800d4a4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	607b      	str	r3, [r7, #4]
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1f1      	bne.n	800d488 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d4a4:	3708      	adds	r7, #8
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}
 800d4aa:	bf00      	nop
 800d4ac:	2000cf21 	.word	0x2000cf21
 800d4b0:	2000cf30 	.word	0x2000cf30

0800d4b4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b082      	sub	sp, #8
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d4bc:	f7ff ffd4 	bl	800d468 <pbuf_free_ooseq>
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d4ce:	f00b fee1 	bl	8019294 <sys_arch_protect>
 800d4d2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d4d4:	4b0f      	ldr	r3, [pc, #60]	; (800d514 <pbuf_pool_is_empty+0x4c>)
 800d4d6:	781b      	ldrb	r3, [r3, #0]
 800d4d8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d4da:	4b0e      	ldr	r3, [pc, #56]	; (800d514 <pbuf_pool_is_empty+0x4c>)
 800d4dc:	2201      	movs	r2, #1
 800d4de:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f00b fee5 	bl	80192b0 <sys_arch_unprotect>

  if (!queued) {
 800d4e6:	78fb      	ldrb	r3, [r7, #3]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10f      	bne.n	800d50c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	480a      	ldr	r0, [pc, #40]	; (800d518 <pbuf_pool_is_empty+0x50>)
 800d4f0:	f7fd fb6c 	bl	800abcc <tcpip_try_callback>
 800d4f4:	4603      	mov	r3, r0
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d008      	beq.n	800d50c <pbuf_pool_is_empty+0x44>
 800d4fa:	f00b fecb 	bl	8019294 <sys_arch_protect>
 800d4fe:	6078      	str	r0, [r7, #4]
 800d500:	4b04      	ldr	r3, [pc, #16]	; (800d514 <pbuf_pool_is_empty+0x4c>)
 800d502:	2200      	movs	r2, #0
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f00b fed2 	bl	80192b0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	2000cf21 	.word	0x2000cf21
 800d518:	0800d4b5 	.word	0x0800d4b5

0800d51c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b085      	sub	sp, #20
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	4611      	mov	r1, r2
 800d528:	461a      	mov	r2, r3
 800d52a:	460b      	mov	r3, r1
 800d52c:	80fb      	strh	r3, [r7, #6]
 800d52e:	4613      	mov	r3, r2
 800d530:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	2200      	movs	r2, #0
 800d536:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	68ba      	ldr	r2, [r7, #8]
 800d53c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	88fa      	ldrh	r2, [r7, #6]
 800d542:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	88ba      	ldrh	r2, [r7, #4]
 800d548:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d54a:	8b3b      	ldrh	r3, [r7, #24]
 800d54c:	b2da      	uxtb	r2, r3
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7f3a      	ldrb	r2, [r7, #28]
 800d556:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2201      	movs	r2, #1
 800d55c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	73da      	strb	r2, [r3, #15]
}
 800d564:	bf00      	nop
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b08c      	sub	sp, #48	; 0x30
 800d574:	af02      	add	r7, sp, #8
 800d576:	4603      	mov	r3, r0
 800d578:	71fb      	strb	r3, [r7, #7]
 800d57a:	460b      	mov	r3, r1
 800d57c:	80bb      	strh	r3, [r7, #4]
 800d57e:	4613      	mov	r3, r2
 800d580:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d582:	79fb      	ldrb	r3, [r7, #7]
 800d584:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d586:	887b      	ldrh	r3, [r7, #2]
 800d588:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d58c:	d07f      	beq.n	800d68e <pbuf_alloc+0x11e>
 800d58e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d592:	f300 80c8 	bgt.w	800d726 <pbuf_alloc+0x1b6>
 800d596:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d59a:	d010      	beq.n	800d5be <pbuf_alloc+0x4e>
 800d59c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d5a0:	f300 80c1 	bgt.w	800d726 <pbuf_alloc+0x1b6>
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d002      	beq.n	800d5ae <pbuf_alloc+0x3e>
 800d5a8:	2b41      	cmp	r3, #65	; 0x41
 800d5aa:	f040 80bc 	bne.w	800d726 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d5ae:	887a      	ldrh	r2, [r7, #2]
 800d5b0:	88bb      	ldrh	r3, [r7, #4]
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	f000 f8d1 	bl	800d75c <pbuf_alloc_reference>
 800d5ba:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d5bc:	e0bd      	b.n	800d73a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d5c6:	88bb      	ldrh	r3, [r7, #4]
 800d5c8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d5ca:	200c      	movs	r0, #12
 800d5cc:	f7ff fb8e 	bl	800ccec <memp_malloc>
 800d5d0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d5d2:	693b      	ldr	r3, [r7, #16]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d109      	bne.n	800d5ec <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d5d8:	f7ff ff76 	bl	800d4c8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d002      	beq.n	800d5e8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d5e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5e4:	f000 faa8 	bl	800db38 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	e0a7      	b.n	800d73c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d5ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d5ee:	3303      	adds	r3, #3
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	f023 0303 	bic.w	r3, r3, #3
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	8b7a      	ldrh	r2, [r7, #26]
 800d600:	4293      	cmp	r3, r2
 800d602:	bf28      	it	cs
 800d604:	4613      	movcs	r3, r2
 800d606:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d60a:	3310      	adds	r3, #16
 800d60c:	693a      	ldr	r2, [r7, #16]
 800d60e:	4413      	add	r3, r2
 800d610:	3303      	adds	r3, #3
 800d612:	f023 0303 	bic.w	r3, r3, #3
 800d616:	4618      	mov	r0, r3
 800d618:	89f9      	ldrh	r1, [r7, #14]
 800d61a:	8b7a      	ldrh	r2, [r7, #26]
 800d61c:	2300      	movs	r3, #0
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	887b      	ldrh	r3, [r7, #2]
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	460b      	mov	r3, r1
 800d626:	4601      	mov	r1, r0
 800d628:	6938      	ldr	r0, [r7, #16]
 800d62a:	f7ff ff77 	bl	800d51c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	f003 0303 	and.w	r3, r3, #3
 800d636:	2b00      	cmp	r3, #0
 800d638:	d006      	beq.n	800d648 <pbuf_alloc+0xd8>
 800d63a:	4b42      	ldr	r3, [pc, #264]	; (800d744 <pbuf_alloc+0x1d4>)
 800d63c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d640:	4941      	ldr	r1, [pc, #260]	; (800d748 <pbuf_alloc+0x1d8>)
 800d642:	4842      	ldr	r0, [pc, #264]	; (800d74c <pbuf_alloc+0x1dc>)
 800d644:	f00b ffc2 	bl	80195cc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d648:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d64a:	3303      	adds	r3, #3
 800d64c:	f023 0303 	bic.w	r3, r3, #3
 800d650:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d654:	d106      	bne.n	800d664 <pbuf_alloc+0xf4>
 800d656:	4b3b      	ldr	r3, [pc, #236]	; (800d744 <pbuf_alloc+0x1d4>)
 800d658:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d65c:	493c      	ldr	r1, [pc, #240]	; (800d750 <pbuf_alloc+0x1e0>)
 800d65e:	483b      	ldr	r0, [pc, #236]	; (800d74c <pbuf_alloc+0x1dc>)
 800d660:	f00b ffb4 	bl	80195cc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	2b00      	cmp	r3, #0
 800d668:	d102      	bne.n	800d670 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
 800d66e:	e002      	b.n	800d676 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d670:	69fb      	ldr	r3, [r7, #28]
 800d672:	693a      	ldr	r2, [r7, #16]
 800d674:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d676:	693b      	ldr	r3, [r7, #16]
 800d678:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d67a:	8b7a      	ldrh	r2, [r7, #26]
 800d67c:	89fb      	ldrh	r3, [r7, #14]
 800d67e:	1ad3      	subs	r3, r2, r3
 800d680:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d686:	8b7b      	ldrh	r3, [r7, #26]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d19e      	bne.n	800d5ca <pbuf_alloc+0x5a>
      break;
 800d68c:	e055      	b.n	800d73a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d690:	3303      	adds	r3, #3
 800d692:	b29b      	uxth	r3, r3
 800d694:	f023 0303 	bic.w	r3, r3, #3
 800d698:	b29a      	uxth	r2, r3
 800d69a:	88bb      	ldrh	r3, [r7, #4]
 800d69c:	3303      	adds	r3, #3
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	f023 0303 	bic.w	r3, r3, #3
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	4413      	add	r3, r2
 800d6a8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d6aa:	8b3b      	ldrh	r3, [r7, #24]
 800d6ac:	3310      	adds	r3, #16
 800d6ae:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d6b0:	8b3a      	ldrh	r2, [r7, #24]
 800d6b2:	88bb      	ldrh	r3, [r7, #4]
 800d6b4:	3303      	adds	r3, #3
 800d6b6:	f023 0303 	bic.w	r3, r3, #3
 800d6ba:	429a      	cmp	r2, r3
 800d6bc:	d306      	bcc.n	800d6cc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d6be:	8afa      	ldrh	r2, [r7, #22]
 800d6c0:	88bb      	ldrh	r3, [r7, #4]
 800d6c2:	3303      	adds	r3, #3
 800d6c4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d201      	bcs.n	800d6d0 <pbuf_alloc+0x160>
        return NULL;
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	e035      	b.n	800d73c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d6d0:	8afb      	ldrh	r3, [r7, #22]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f7ff f966 	bl	800c9a4 <mem_malloc>
 800d6d8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <pbuf_alloc+0x174>
        return NULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	e02b      	b.n	800d73c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d6e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6e6:	3310      	adds	r3, #16
 800d6e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d6ea:	4413      	add	r3, r2
 800d6ec:	3303      	adds	r3, #3
 800d6ee:	f023 0303 	bic.w	r3, r3, #3
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	88b9      	ldrh	r1, [r7, #4]
 800d6f6:	88ba      	ldrh	r2, [r7, #4]
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	9301      	str	r3, [sp, #4]
 800d6fc:	887b      	ldrh	r3, [r7, #2]
 800d6fe:	9300      	str	r3, [sp, #0]
 800d700:	460b      	mov	r3, r1
 800d702:	4601      	mov	r1, r0
 800d704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d706:	f7ff ff09 	bl	800d51c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	685b      	ldr	r3, [r3, #4]
 800d70e:	f003 0303 	and.w	r3, r3, #3
 800d712:	2b00      	cmp	r3, #0
 800d714:	d010      	beq.n	800d738 <pbuf_alloc+0x1c8>
 800d716:	4b0b      	ldr	r3, [pc, #44]	; (800d744 <pbuf_alloc+0x1d4>)
 800d718:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d71c:	490d      	ldr	r1, [pc, #52]	; (800d754 <pbuf_alloc+0x1e4>)
 800d71e:	480b      	ldr	r0, [pc, #44]	; (800d74c <pbuf_alloc+0x1dc>)
 800d720:	f00b ff54 	bl	80195cc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d724:	e008      	b.n	800d738 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d726:	4b07      	ldr	r3, [pc, #28]	; (800d744 <pbuf_alloc+0x1d4>)
 800d728:	f240 1227 	movw	r2, #295	; 0x127
 800d72c:	490a      	ldr	r1, [pc, #40]	; (800d758 <pbuf_alloc+0x1e8>)
 800d72e:	4807      	ldr	r0, [pc, #28]	; (800d74c <pbuf_alloc+0x1dc>)
 800d730:	f00b ff4c 	bl	80195cc <iprintf>
      return NULL;
 800d734:	2300      	movs	r3, #0
 800d736:	e001      	b.n	800d73c <pbuf_alloc+0x1cc>
      break;
 800d738:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d73c:	4618      	mov	r0, r3
 800d73e:	3728      	adds	r7, #40	; 0x28
 800d740:	46bd      	mov	sp, r7
 800d742:	bd80      	pop	{r7, pc}
 800d744:	0801af14 	.word	0x0801af14
 800d748:	0801af44 	.word	0x0801af44
 800d74c:	0801af74 	.word	0x0801af74
 800d750:	0801af9c 	.word	0x0801af9c
 800d754:	0801afd0 	.word	0x0801afd0
 800d758:	0801affc 	.word	0x0801affc

0800d75c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af02      	add	r7, sp, #8
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	460b      	mov	r3, r1
 800d766:	807b      	strh	r3, [r7, #2]
 800d768:	4613      	mov	r3, r2
 800d76a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d76c:	883b      	ldrh	r3, [r7, #0]
 800d76e:	2b41      	cmp	r3, #65	; 0x41
 800d770:	d009      	beq.n	800d786 <pbuf_alloc_reference+0x2a>
 800d772:	883b      	ldrh	r3, [r7, #0]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d006      	beq.n	800d786 <pbuf_alloc_reference+0x2a>
 800d778:	4b0f      	ldr	r3, [pc, #60]	; (800d7b8 <pbuf_alloc_reference+0x5c>)
 800d77a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d77e:	490f      	ldr	r1, [pc, #60]	; (800d7bc <pbuf_alloc_reference+0x60>)
 800d780:	480f      	ldr	r0, [pc, #60]	; (800d7c0 <pbuf_alloc_reference+0x64>)
 800d782:	f00b ff23 	bl	80195cc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d786:	200b      	movs	r0, #11
 800d788:	f7ff fab0 	bl	800ccec <memp_malloc>
 800d78c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d101      	bne.n	800d798 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d794:	2300      	movs	r3, #0
 800d796:	e00b      	b.n	800d7b0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d798:	8879      	ldrh	r1, [r7, #2]
 800d79a:	887a      	ldrh	r2, [r7, #2]
 800d79c:	2300      	movs	r3, #0
 800d79e:	9301      	str	r3, [sp, #4]
 800d7a0:	883b      	ldrh	r3, [r7, #0]
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	460b      	mov	r3, r1
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	68f8      	ldr	r0, [r7, #12]
 800d7aa:	f7ff feb7 	bl	800d51c <pbuf_init_alloced_pbuf>
  return p;
 800d7ae:	68fb      	ldr	r3, [r7, #12]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	0801af14 	.word	0x0801af14
 800d7bc:	0801b018 	.word	0x0801b018
 800d7c0:	0801af74 	.word	0x0801af74

0800d7c4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b088      	sub	sp, #32
 800d7c8:	af02      	add	r7, sp, #8
 800d7ca:	607b      	str	r3, [r7, #4]
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	73fb      	strb	r3, [r7, #15]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	81bb      	strh	r3, [r7, #12]
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d7dc:	8a7b      	ldrh	r3, [r7, #18]
 800d7de:	3303      	adds	r3, #3
 800d7e0:	f023 0203 	bic.w	r2, r3, #3
 800d7e4:	89bb      	ldrh	r3, [r7, #12]
 800d7e6:	441a      	add	r2, r3
 800d7e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d7ea:	429a      	cmp	r2, r3
 800d7ec:	d901      	bls.n	800d7f2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d7ee:	2300      	movs	r3, #0
 800d7f0:	e018      	b.n	800d824 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d7f2:	6a3b      	ldr	r3, [r7, #32]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d007      	beq.n	800d808 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d7f8:	8a7b      	ldrh	r3, [r7, #18]
 800d7fa:	3303      	adds	r3, #3
 800d7fc:	f023 0303 	bic.w	r3, r3, #3
 800d800:	6a3a      	ldr	r2, [r7, #32]
 800d802:	4413      	add	r3, r2
 800d804:	617b      	str	r3, [r7, #20]
 800d806:	e001      	b.n	800d80c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d808:	2300      	movs	r3, #0
 800d80a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	89b9      	ldrh	r1, [r7, #12]
 800d810:	89ba      	ldrh	r2, [r7, #12]
 800d812:	2302      	movs	r3, #2
 800d814:	9301      	str	r3, [sp, #4]
 800d816:	897b      	ldrh	r3, [r7, #10]
 800d818:	9300      	str	r3, [sp, #0]
 800d81a:	460b      	mov	r3, r1
 800d81c:	6979      	ldr	r1, [r7, #20]
 800d81e:	f7ff fe7d 	bl	800d51c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d822:	687b      	ldr	r3, [r7, #4]
}
 800d824:	4618      	mov	r0, r3
 800d826:	3718      	adds	r7, #24
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	460b      	mov	r3, r1
 800d836:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <pbuf_realloc+0x20>
 800d83e:	4b3a      	ldr	r3, [pc, #232]	; (800d928 <pbuf_realloc+0xfc>)
 800d840:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d844:	4939      	ldr	r1, [pc, #228]	; (800d92c <pbuf_realloc+0x100>)
 800d846:	483a      	ldr	r0, [pc, #232]	; (800d930 <pbuf_realloc+0x104>)
 800d848:	f00b fec0 	bl	80195cc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	891b      	ldrh	r3, [r3, #8]
 800d850:	887a      	ldrh	r2, [r7, #2]
 800d852:	429a      	cmp	r2, r3
 800d854:	d263      	bcs.n	800d91e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	891a      	ldrh	r2, [r3, #8]
 800d85a:	887b      	ldrh	r3, [r7, #2]
 800d85c:	1ad3      	subs	r3, r2, r3
 800d85e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d860:	887b      	ldrh	r3, [r7, #2]
 800d862:	817b      	strh	r3, [r7, #10]
  q = p;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d868:	e018      	b.n	800d89c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	895b      	ldrh	r3, [r3, #10]
 800d86e:	897a      	ldrh	r2, [r7, #10]
 800d870:	1ad3      	subs	r3, r2, r3
 800d872:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	891a      	ldrh	r2, [r3, #8]
 800d878:	893b      	ldrh	r3, [r7, #8]
 800d87a:	1ad3      	subs	r3, r2, r3
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d106      	bne.n	800d89c <pbuf_realloc+0x70>
 800d88e:	4b26      	ldr	r3, [pc, #152]	; (800d928 <pbuf_realloc+0xfc>)
 800d890:	f240 12af 	movw	r2, #431	; 0x1af
 800d894:	4927      	ldr	r1, [pc, #156]	; (800d934 <pbuf_realloc+0x108>)
 800d896:	4826      	ldr	r0, [pc, #152]	; (800d930 <pbuf_realloc+0x104>)
 800d898:	f00b fe98 	bl	80195cc <iprintf>
  while (rem_len > q->len) {
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	895b      	ldrh	r3, [r3, #10]
 800d8a0:	897a      	ldrh	r2, [r7, #10]
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d8e1      	bhi.n	800d86a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	7b1b      	ldrb	r3, [r3, #12]
 800d8aa:	f003 030f 	and.w	r3, r3, #15
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d121      	bne.n	800d8f6 <pbuf_realloc+0xca>
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	895b      	ldrh	r3, [r3, #10]
 800d8b6:	897a      	ldrh	r2, [r7, #10]
 800d8b8:	429a      	cmp	r2, r3
 800d8ba:	d01c      	beq.n	800d8f6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	7b5b      	ldrb	r3, [r3, #13]
 800d8c0:	f003 0302 	and.w	r3, r3, #2
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d116      	bne.n	800d8f6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	685a      	ldr	r2, [r3, #4]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	897b      	ldrh	r3, [r7, #10]
 800d8d4:	4413      	add	r3, r2
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	4619      	mov	r1, r3
 800d8da:	68f8      	ldr	r0, [r7, #12]
 800d8dc:	f7fe ff58 	bl	800c790 <mem_trim>
 800d8e0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d106      	bne.n	800d8f6 <pbuf_realloc+0xca>
 800d8e8:	4b0f      	ldr	r3, [pc, #60]	; (800d928 <pbuf_realloc+0xfc>)
 800d8ea:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d8ee:	4912      	ldr	r1, [pc, #72]	; (800d938 <pbuf_realloc+0x10c>)
 800d8f0:	480f      	ldr	r0, [pc, #60]	; (800d930 <pbuf_realloc+0x104>)
 800d8f2:	f00b fe6b 	bl	80195cc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	897a      	ldrh	r2, [r7, #10]
 800d8fa:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	895a      	ldrh	r2, [r3, #10]
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d004      	beq.n	800d916 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4618      	mov	r0, r3
 800d912:	f000 f911 	bl	800db38 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	2200      	movs	r2, #0
 800d91a:	601a      	str	r2, [r3, #0]
 800d91c:	e000      	b.n	800d920 <pbuf_realloc+0xf4>
    return;
 800d91e:	bf00      	nop

}
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
 800d926:	bf00      	nop
 800d928:	0801af14 	.word	0x0801af14
 800d92c:	0801b02c 	.word	0x0801b02c
 800d930:	0801af74 	.word	0x0801af74
 800d934:	0801b044 	.word	0x0801b044
 800d938:	0801b05c 	.word	0x0801b05c

0800d93c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b086      	sub	sp, #24
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	4613      	mov	r3, r2
 800d948:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d106      	bne.n	800d95e <pbuf_add_header_impl+0x22>
 800d950:	4b2b      	ldr	r3, [pc, #172]	; (800da00 <pbuf_add_header_impl+0xc4>)
 800d952:	f240 12df 	movw	r2, #479	; 0x1df
 800d956:	492b      	ldr	r1, [pc, #172]	; (800da04 <pbuf_add_header_impl+0xc8>)
 800d958:	482b      	ldr	r0, [pc, #172]	; (800da08 <pbuf_add_header_impl+0xcc>)
 800d95a:	f00b fe37 	bl	80195cc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d003      	beq.n	800d96c <pbuf_add_header_impl+0x30>
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d96a:	d301      	bcc.n	800d970 <pbuf_add_header_impl+0x34>
    return 1;
 800d96c:	2301      	movs	r3, #1
 800d96e:	e043      	b.n	800d9f8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <pbuf_add_header_impl+0x3e>
    return 0;
 800d976:	2300      	movs	r3, #0
 800d978:	e03e      	b.n	800d9f8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	891a      	ldrh	r2, [r3, #8]
 800d982:	8a7b      	ldrh	r3, [r7, #18]
 800d984:	4413      	add	r3, r2
 800d986:	b29b      	uxth	r3, r3
 800d988:	8a7a      	ldrh	r2, [r7, #18]
 800d98a:	429a      	cmp	r2, r3
 800d98c:	d901      	bls.n	800d992 <pbuf_add_header_impl+0x56>
    return 1;
 800d98e:	2301      	movs	r3, #1
 800d990:	e032      	b.n	800d9f8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	7b1b      	ldrb	r3, [r3, #12]
 800d996:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d998:	8a3b      	ldrh	r3, [r7, #16]
 800d99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00c      	beq.n	800d9bc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	425b      	negs	r3, r3
 800d9aa:	4413      	add	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3310      	adds	r3, #16
 800d9b2:	697a      	ldr	r2, [r7, #20]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d20d      	bcs.n	800d9d4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e01d      	b.n	800d9f8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d9bc:	79fb      	ldrb	r3, [r7, #7]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d006      	beq.n	800d9d0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	685a      	ldr	r2, [r3, #4]
 800d9c6:	68bb      	ldr	r3, [r7, #8]
 800d9c8:	425b      	negs	r3, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	617b      	str	r3, [r7, #20]
 800d9ce:	e001      	b.n	800d9d4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	e011      	b.n	800d9f8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	697a      	ldr	r2, [r7, #20]
 800d9d8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	895a      	ldrh	r2, [r3, #10]
 800d9de:	8a7b      	ldrh	r3, [r7, #18]
 800d9e0:	4413      	add	r3, r2
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	891a      	ldrh	r2, [r3, #8]
 800d9ec:	8a7b      	ldrh	r3, [r7, #18]
 800d9ee:	4413      	add	r3, r2
 800d9f0:	b29a      	uxth	r2, r3
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	811a      	strh	r2, [r3, #8]


  return 0;
 800d9f6:	2300      	movs	r3, #0
}
 800d9f8:	4618      	mov	r0, r3
 800d9fa:	3718      	adds	r7, #24
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	bd80      	pop	{r7, pc}
 800da00:	0801af14 	.word	0x0801af14
 800da04:	0801b078 	.word	0x0801b078
 800da08:	0801af74 	.word	0x0801af74

0800da0c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b082      	sub	sp, #8
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800da16:	2200      	movs	r2, #0
 800da18:	6839      	ldr	r1, [r7, #0]
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7ff ff8e 	bl	800d93c <pbuf_add_header_impl>
 800da20:	4603      	mov	r3, r0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3708      	adds	r7, #8
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
	...

0800da2c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d106      	bne.n	800da4a <pbuf_remove_header+0x1e>
 800da3c:	4b20      	ldr	r3, [pc, #128]	; (800dac0 <pbuf_remove_header+0x94>)
 800da3e:	f240 224b 	movw	r2, #587	; 0x24b
 800da42:	4920      	ldr	r1, [pc, #128]	; (800dac4 <pbuf_remove_header+0x98>)
 800da44:	4820      	ldr	r0, [pc, #128]	; (800dac8 <pbuf_remove_header+0x9c>)
 800da46:	f00b fdc1 	bl	80195cc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d003      	beq.n	800da58 <pbuf_remove_header+0x2c>
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800da56:	d301      	bcc.n	800da5c <pbuf_remove_header+0x30>
    return 1;
 800da58:	2301      	movs	r3, #1
 800da5a:	e02c      	b.n	800dab6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d101      	bne.n	800da66 <pbuf_remove_header+0x3a>
    return 0;
 800da62:	2300      	movs	r3, #0
 800da64:	e027      	b.n	800dab6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	895b      	ldrh	r3, [r3, #10]
 800da6e:	89fa      	ldrh	r2, [r7, #14]
 800da70:	429a      	cmp	r2, r3
 800da72:	d908      	bls.n	800da86 <pbuf_remove_header+0x5a>
 800da74:	4b12      	ldr	r3, [pc, #72]	; (800dac0 <pbuf_remove_header+0x94>)
 800da76:	f240 2255 	movw	r2, #597	; 0x255
 800da7a:	4914      	ldr	r1, [pc, #80]	; (800dacc <pbuf_remove_header+0xa0>)
 800da7c:	4812      	ldr	r0, [pc, #72]	; (800dac8 <pbuf_remove_header+0x9c>)
 800da7e:	f00b fda5 	bl	80195cc <iprintf>
 800da82:	2301      	movs	r3, #1
 800da84:	e017      	b.n	800dab6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	685a      	ldr	r2, [r3, #4]
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	441a      	add	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	895a      	ldrh	r2, [r3, #10]
 800da9c:	89fb      	ldrh	r3, [r7, #14]
 800da9e:	1ad3      	subs	r3, r2, r3
 800daa0:	b29a      	uxth	r2, r3
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	891a      	ldrh	r2, [r3, #8]
 800daaa:	89fb      	ldrh	r3, [r7, #14]
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	b29a      	uxth	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800dab4:	2300      	movs	r3, #0
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop
 800dac0:	0801af14 	.word	0x0801af14
 800dac4:	0801b078 	.word	0x0801b078
 800dac8:	0801af74 	.word	0x0801af74
 800dacc:	0801b084 	.word	0x0801b084

0800dad0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b082      	sub	sp, #8
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	460b      	mov	r3, r1
 800dada:	807b      	strh	r3, [r7, #2]
 800dadc:	4613      	mov	r3, r2
 800dade:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800dae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	da08      	bge.n	800dafa <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800dae8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800daec:	425b      	negs	r3, r3
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff ff9b 	bl	800da2c <pbuf_remove_header>
 800daf6:	4603      	mov	r3, r0
 800daf8:	e007      	b.n	800db0a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800dafa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800dafe:	787a      	ldrb	r2, [r7, #1]
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7ff ff1a 	bl	800d93c <pbuf_add_header_impl>
 800db08:	4603      	mov	r3, r0
  }
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	3708      	adds	r7, #8
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	460b      	mov	r3, r1
 800db1c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800db1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800db22:	2201      	movs	r2, #1
 800db24:	4619      	mov	r1, r3
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff ffd2 	bl	800dad0 <pbuf_header_impl>
 800db2c:	4603      	mov	r3, r0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
	...

0800db38 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b088      	sub	sp, #32
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d10b      	bne.n	800db5e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d106      	bne.n	800db5a <pbuf_free+0x22>
 800db4c:	4b3b      	ldr	r3, [pc, #236]	; (800dc3c <pbuf_free+0x104>)
 800db4e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800db52:	493b      	ldr	r1, [pc, #236]	; (800dc40 <pbuf_free+0x108>)
 800db54:	483b      	ldr	r0, [pc, #236]	; (800dc44 <pbuf_free+0x10c>)
 800db56:	f00b fd39 	bl	80195cc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800db5a:	2300      	movs	r3, #0
 800db5c:	e069      	b.n	800dc32 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800db5e:	2300      	movs	r3, #0
 800db60:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800db62:	e062      	b.n	800dc2a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800db64:	f00b fb96 	bl	8019294 <sys_arch_protect>
 800db68:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	7b9b      	ldrb	r3, [r3, #14]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d106      	bne.n	800db80 <pbuf_free+0x48>
 800db72:	4b32      	ldr	r3, [pc, #200]	; (800dc3c <pbuf_free+0x104>)
 800db74:	f240 22f1 	movw	r2, #753	; 0x2f1
 800db78:	4933      	ldr	r1, [pc, #204]	; (800dc48 <pbuf_free+0x110>)
 800db7a:	4832      	ldr	r0, [pc, #200]	; (800dc44 <pbuf_free+0x10c>)
 800db7c:	f00b fd26 	bl	80195cc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	7b9b      	ldrb	r3, [r3, #14]
 800db84:	3b01      	subs	r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	739a      	strb	r2, [r3, #14]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	7b9b      	ldrb	r3, [r3, #14]
 800db90:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800db92:	69b8      	ldr	r0, [r7, #24]
 800db94:	f00b fb8c 	bl	80192b0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800db98:	7dfb      	ldrb	r3, [r7, #23]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d143      	bne.n	800dc26 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	7b1b      	ldrb	r3, [r3, #12]
 800dba8:	f003 030f 	and.w	r3, r3, #15
 800dbac:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	7b5b      	ldrb	r3, [r3, #13]
 800dbb2:	f003 0302 	and.w	r3, r3, #2
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d011      	beq.n	800dbde <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	691b      	ldr	r3, [r3, #16]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d106      	bne.n	800dbd4 <pbuf_free+0x9c>
 800dbc6:	4b1d      	ldr	r3, [pc, #116]	; (800dc3c <pbuf_free+0x104>)
 800dbc8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800dbcc:	491f      	ldr	r1, [pc, #124]	; (800dc4c <pbuf_free+0x114>)
 800dbce:	481d      	ldr	r0, [pc, #116]	; (800dc44 <pbuf_free+0x10c>)
 800dbd0:	f00b fcfc 	bl	80195cc <iprintf>
        pc->custom_free_function(p);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	691b      	ldr	r3, [r3, #16]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	4798      	blx	r3
 800dbdc:	e01d      	b.n	800dc1a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
 800dbe0:	2b02      	cmp	r3, #2
 800dbe2:	d104      	bne.n	800dbee <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	200c      	movs	r0, #12
 800dbe8:	f7ff f8f6 	bl	800cdd8 <memp_free>
 800dbec:	e015      	b.n	800dc1a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800dbee:	7bfb      	ldrb	r3, [r7, #15]
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d104      	bne.n	800dbfe <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800dbf4:	6879      	ldr	r1, [r7, #4]
 800dbf6:	200b      	movs	r0, #11
 800dbf8:	f7ff f8ee 	bl	800cdd8 <memp_free>
 800dbfc:	e00d      	b.n	800dc1a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d103      	bne.n	800dc0c <pbuf_free+0xd4>
          mem_free(p);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f7fe fd33 	bl	800c670 <mem_free>
 800dc0a:	e006      	b.n	800dc1a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800dc0c:	4b0b      	ldr	r3, [pc, #44]	; (800dc3c <pbuf_free+0x104>)
 800dc0e:	f240 320f 	movw	r2, #783	; 0x30f
 800dc12:	490f      	ldr	r1, [pc, #60]	; (800dc50 <pbuf_free+0x118>)
 800dc14:	480b      	ldr	r0, [pc, #44]	; (800dc44 <pbuf_free+0x10c>)
 800dc16:	f00b fcd9 	bl	80195cc <iprintf>
        }
      }
      count++;
 800dc1a:	7ffb      	ldrb	r3, [r7, #31]
 800dc1c:	3301      	adds	r3, #1
 800dc1e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	607b      	str	r3, [r7, #4]
 800dc24:	e001      	b.n	800dc2a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800dc26:	2300      	movs	r3, #0
 800dc28:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d199      	bne.n	800db64 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800dc30:	7ffb      	ldrb	r3, [r7, #31]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3720      	adds	r7, #32
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}
 800dc3a:	bf00      	nop
 800dc3c:	0801af14 	.word	0x0801af14
 800dc40:	0801b078 	.word	0x0801b078
 800dc44:	0801af74 	.word	0x0801af74
 800dc48:	0801b0a4 	.word	0x0801b0a4
 800dc4c:	0801b0bc 	.word	0x0801b0bc
 800dc50:	0801b0e0 	.word	0x0801b0e0

0800dc54 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800dc60:	e005      	b.n	800dc6e <pbuf_clen+0x1a>
    ++len;
 800dc62:	89fb      	ldrh	r3, [r7, #14]
 800dc64:	3301      	adds	r3, #1
 800dc66:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d1f6      	bne.n	800dc62 <pbuf_clen+0xe>
  }
  return len;
 800dc74:	89fb      	ldrh	r3, [r7, #14]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3714      	adds	r7, #20
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
	...

0800dc84 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b084      	sub	sp, #16
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d016      	beq.n	800dcc0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800dc92:	f00b faff 	bl	8019294 <sys_arch_protect>
 800dc96:	60f8      	str	r0, [r7, #12]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	7b9b      	ldrb	r3, [r3, #14]
 800dc9c:	3301      	adds	r3, #1
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	739a      	strb	r2, [r3, #14]
 800dca4:	68f8      	ldr	r0, [r7, #12]
 800dca6:	f00b fb03 	bl	80192b0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	7b9b      	ldrb	r3, [r3, #14]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d106      	bne.n	800dcc0 <pbuf_ref+0x3c>
 800dcb2:	4b05      	ldr	r3, [pc, #20]	; (800dcc8 <pbuf_ref+0x44>)
 800dcb4:	f240 3242 	movw	r2, #834	; 0x342
 800dcb8:	4904      	ldr	r1, [pc, #16]	; (800dccc <pbuf_ref+0x48>)
 800dcba:	4805      	ldr	r0, [pc, #20]	; (800dcd0 <pbuf_ref+0x4c>)
 800dcbc:	f00b fc86 	bl	80195cc <iprintf>
  }
}
 800dcc0:	bf00      	nop
 800dcc2:	3710      	adds	r7, #16
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}
 800dcc8:	0801af14 	.word	0x0801af14
 800dccc:	0801b0f4 	.word	0x0801b0f4
 800dcd0:	0801af74 	.word	0x0801af74

0800dcd4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d002      	beq.n	800dcea <pbuf_cat+0x16>
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d107      	bne.n	800dcfa <pbuf_cat+0x26>
 800dcea:	4b20      	ldr	r3, [pc, #128]	; (800dd6c <pbuf_cat+0x98>)
 800dcec:	f240 3259 	movw	r2, #857	; 0x359
 800dcf0:	491f      	ldr	r1, [pc, #124]	; (800dd70 <pbuf_cat+0x9c>)
 800dcf2:	4820      	ldr	r0, [pc, #128]	; (800dd74 <pbuf_cat+0xa0>)
 800dcf4:	f00b fc6a 	bl	80195cc <iprintf>
 800dcf8:	e034      	b.n	800dd64 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	e00a      	b.n	800dd16 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	891a      	ldrh	r2, [r3, #8]
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	891b      	ldrh	r3, [r3, #8]
 800dd08:	4413      	add	r3, r2
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d1f0      	bne.n	800dd00 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	891a      	ldrh	r2, [r3, #8]
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	895b      	ldrh	r3, [r3, #10]
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d006      	beq.n	800dd38 <pbuf_cat+0x64>
 800dd2a:	4b10      	ldr	r3, [pc, #64]	; (800dd6c <pbuf_cat+0x98>)
 800dd2c:	f240 3262 	movw	r2, #866	; 0x362
 800dd30:	4911      	ldr	r1, [pc, #68]	; (800dd78 <pbuf_cat+0xa4>)
 800dd32:	4810      	ldr	r0, [pc, #64]	; (800dd74 <pbuf_cat+0xa0>)
 800dd34:	f00b fc4a 	bl	80195cc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d006      	beq.n	800dd4e <pbuf_cat+0x7a>
 800dd40:	4b0a      	ldr	r3, [pc, #40]	; (800dd6c <pbuf_cat+0x98>)
 800dd42:	f240 3263 	movw	r2, #867	; 0x363
 800dd46:	490d      	ldr	r1, [pc, #52]	; (800dd7c <pbuf_cat+0xa8>)
 800dd48:	480a      	ldr	r0, [pc, #40]	; (800dd74 <pbuf_cat+0xa0>)
 800dd4a:	f00b fc3f 	bl	80195cc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	891a      	ldrh	r2, [r3, #8]
 800dd52:	683b      	ldr	r3, [r7, #0]
 800dd54:	891b      	ldrh	r3, [r3, #8]
 800dd56:	4413      	add	r3, r2
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	683a      	ldr	r2, [r7, #0]
 800dd62:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800dd64:	3710      	adds	r7, #16
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	0801af14 	.word	0x0801af14
 800dd70:	0801b108 	.word	0x0801b108
 800dd74:	0801af74 	.word	0x0801af74
 800dd78:	0801b140 	.word	0x0801b140
 800dd7c:	0801b170 	.word	0x0801b170

0800dd80 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800dd8a:	6839      	ldr	r1, [r7, #0]
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f7ff ffa1 	bl	800dcd4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800dd92:	6838      	ldr	r0, [r7, #0]
 800dd94:	f7ff ff76 	bl	800dc84 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800dd98:	bf00      	nop
 800dd9a:	3708      	adds	r7, #8
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	617b      	str	r3, [r7, #20]
 800ddae:	2300      	movs	r3, #0
 800ddb0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d008      	beq.n	800ddca <pbuf_copy+0x2a>
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d005      	beq.n	800ddca <pbuf_copy+0x2a>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	891a      	ldrh	r2, [r3, #8]
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	891b      	ldrh	r3, [r3, #8]
 800ddc6:	429a      	cmp	r2, r3
 800ddc8:	d209      	bcs.n	800ddde <pbuf_copy+0x3e>
 800ddca:	4b57      	ldr	r3, [pc, #348]	; (800df28 <pbuf_copy+0x188>)
 800ddcc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ddd0:	4956      	ldr	r1, [pc, #344]	; (800df2c <pbuf_copy+0x18c>)
 800ddd2:	4857      	ldr	r0, [pc, #348]	; (800df30 <pbuf_copy+0x190>)
 800ddd4:	f00b fbfa 	bl	80195cc <iprintf>
 800ddd8:	f06f 030f 	mvn.w	r3, #15
 800dddc:	e09f      	b.n	800df1e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	895b      	ldrh	r3, [r3, #10]
 800dde2:	461a      	mov	r2, r3
 800dde4:	697b      	ldr	r3, [r7, #20]
 800dde6:	1ad2      	subs	r2, r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	895b      	ldrh	r3, [r3, #10]
 800ddec:	4619      	mov	r1, r3
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	1acb      	subs	r3, r1, r3
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d306      	bcc.n	800de04 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	895b      	ldrh	r3, [r3, #10]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	1ad3      	subs	r3, r2, r3
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	e005      	b.n	800de10 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	895b      	ldrh	r3, [r3, #10]
 800de08:	461a      	mov	r2, r3
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	1ad3      	subs	r3, r2, r3
 800de0e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	685a      	ldr	r2, [r3, #4]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	18d0      	adds	r0, r2, r3
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	685a      	ldr	r2, [r3, #4]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	4413      	add	r3, r2
 800de20:	68fa      	ldr	r2, [r7, #12]
 800de22:	4619      	mov	r1, r3
 800de24:	f00b fcd0 	bl	80197c8 <memcpy>
    offset_to += len;
 800de28:	697a      	ldr	r2, [r7, #20]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	4413      	add	r3, r2
 800de2e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800de30:	693a      	ldr	r2, [r7, #16]
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	4413      	add	r3, r2
 800de36:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	895b      	ldrh	r3, [r3, #10]
 800de3c:	461a      	mov	r2, r3
 800de3e:	697b      	ldr	r3, [r7, #20]
 800de40:	4293      	cmp	r3, r2
 800de42:	d906      	bls.n	800de52 <pbuf_copy+0xb2>
 800de44:	4b38      	ldr	r3, [pc, #224]	; (800df28 <pbuf_copy+0x188>)
 800de46:	f240 32d9 	movw	r2, #985	; 0x3d9
 800de4a:	493a      	ldr	r1, [pc, #232]	; (800df34 <pbuf_copy+0x194>)
 800de4c:	4838      	ldr	r0, [pc, #224]	; (800df30 <pbuf_copy+0x190>)
 800de4e:	f00b fbbd 	bl	80195cc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	895b      	ldrh	r3, [r3, #10]
 800de56:	461a      	mov	r2, r3
 800de58:	693b      	ldr	r3, [r7, #16]
 800de5a:	4293      	cmp	r3, r2
 800de5c:	d906      	bls.n	800de6c <pbuf_copy+0xcc>
 800de5e:	4b32      	ldr	r3, [pc, #200]	; (800df28 <pbuf_copy+0x188>)
 800de60:	f240 32da 	movw	r2, #986	; 0x3da
 800de64:	4934      	ldr	r1, [pc, #208]	; (800df38 <pbuf_copy+0x198>)
 800de66:	4832      	ldr	r0, [pc, #200]	; (800df30 <pbuf_copy+0x190>)
 800de68:	f00b fbb0 	bl	80195cc <iprintf>
    if (offset_from >= p_from->len) {
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	895b      	ldrh	r3, [r3, #10]
 800de70:	461a      	mov	r2, r3
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	4293      	cmp	r3, r2
 800de76:	d304      	bcc.n	800de82 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800de78:	2300      	movs	r3, #0
 800de7a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	895b      	ldrh	r3, [r3, #10]
 800de86:	461a      	mov	r2, r3
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d114      	bne.n	800deb8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800de8e:	2300      	movs	r3, #0
 800de90:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d10c      	bne.n	800deb8 <pbuf_copy+0x118>
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d009      	beq.n	800deb8 <pbuf_copy+0x118>
 800dea4:	4b20      	ldr	r3, [pc, #128]	; (800df28 <pbuf_copy+0x188>)
 800dea6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800deaa:	4924      	ldr	r1, [pc, #144]	; (800df3c <pbuf_copy+0x19c>)
 800deac:	4820      	ldr	r0, [pc, #128]	; (800df30 <pbuf_copy+0x190>)
 800deae:	f00b fb8d 	bl	80195cc <iprintf>
 800deb2:	f06f 030f 	mvn.w	r3, #15
 800deb6:	e032      	b.n	800df1e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d013      	beq.n	800dee6 <pbuf_copy+0x146>
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	895a      	ldrh	r2, [r3, #10]
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	891b      	ldrh	r3, [r3, #8]
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d10d      	bne.n	800dee6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800deca:	683b      	ldr	r3, [r7, #0]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d009      	beq.n	800dee6 <pbuf_copy+0x146>
 800ded2:	4b15      	ldr	r3, [pc, #84]	; (800df28 <pbuf_copy+0x188>)
 800ded4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800ded8:	4919      	ldr	r1, [pc, #100]	; (800df40 <pbuf_copy+0x1a0>)
 800deda:	4815      	ldr	r0, [pc, #84]	; (800df30 <pbuf_copy+0x190>)
 800dedc:	f00b fb76 	bl	80195cc <iprintf>
 800dee0:	f06f 0305 	mvn.w	r3, #5
 800dee4:	e01b      	b.n	800df1e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d013      	beq.n	800df14 <pbuf_copy+0x174>
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	895a      	ldrh	r2, [r3, #10]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	891b      	ldrh	r3, [r3, #8]
 800def4:	429a      	cmp	r2, r3
 800def6:	d10d      	bne.n	800df14 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d009      	beq.n	800df14 <pbuf_copy+0x174>
 800df00:	4b09      	ldr	r3, [pc, #36]	; (800df28 <pbuf_copy+0x188>)
 800df02:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800df06:	490e      	ldr	r1, [pc, #56]	; (800df40 <pbuf_copy+0x1a0>)
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <pbuf_copy+0x190>)
 800df0a:	f00b fb5f 	bl	80195cc <iprintf>
 800df0e:	f06f 0305 	mvn.w	r3, #5
 800df12:	e004      	b.n	800df1e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	2b00      	cmp	r3, #0
 800df18:	f47f af61 	bne.w	800ddde <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3718      	adds	r7, #24
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	0801af14 	.word	0x0801af14
 800df2c:	0801b1bc 	.word	0x0801b1bc
 800df30:	0801af74 	.word	0x0801af74
 800df34:	0801b1ec 	.word	0x0801b1ec
 800df38:	0801b204 	.word	0x0801b204
 800df3c:	0801b220 	.word	0x0801b220
 800df40:	0801b230 	.word	0x0801b230

0800df44 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b088      	sub	sp, #32
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4611      	mov	r1, r2
 800df50:	461a      	mov	r2, r3
 800df52:	460b      	mov	r3, r1
 800df54:	80fb      	strh	r3, [r7, #6]
 800df56:	4613      	mov	r3, r2
 800df58:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800df5e:	2300      	movs	r3, #0
 800df60:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800df62:	68fb      	ldr	r3, [r7, #12]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d108      	bne.n	800df7a <pbuf_copy_partial+0x36>
 800df68:	4b2b      	ldr	r3, [pc, #172]	; (800e018 <pbuf_copy_partial+0xd4>)
 800df6a:	f240 420a 	movw	r2, #1034	; 0x40a
 800df6e:	492b      	ldr	r1, [pc, #172]	; (800e01c <pbuf_copy_partial+0xd8>)
 800df70:	482b      	ldr	r0, [pc, #172]	; (800e020 <pbuf_copy_partial+0xdc>)
 800df72:	f00b fb2b 	bl	80195cc <iprintf>
 800df76:	2300      	movs	r3, #0
 800df78:	e04a      	b.n	800e010 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d108      	bne.n	800df92 <pbuf_copy_partial+0x4e>
 800df80:	4b25      	ldr	r3, [pc, #148]	; (800e018 <pbuf_copy_partial+0xd4>)
 800df82:	f240 420b 	movw	r2, #1035	; 0x40b
 800df86:	4927      	ldr	r1, [pc, #156]	; (800e024 <pbuf_copy_partial+0xe0>)
 800df88:	4825      	ldr	r0, [pc, #148]	; (800e020 <pbuf_copy_partial+0xdc>)
 800df8a:	f00b fb1f 	bl	80195cc <iprintf>
 800df8e:	2300      	movs	r3, #0
 800df90:	e03e      	b.n	800e010 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	61fb      	str	r3, [r7, #28]
 800df96:	e034      	b.n	800e002 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800df98:	88bb      	ldrh	r3, [r7, #4]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00a      	beq.n	800dfb4 <pbuf_copy_partial+0x70>
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	895b      	ldrh	r3, [r3, #10]
 800dfa2:	88ba      	ldrh	r2, [r7, #4]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d305      	bcc.n	800dfb4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	895b      	ldrh	r3, [r3, #10]
 800dfac:	88ba      	ldrh	r2, [r7, #4]
 800dfae:	1ad3      	subs	r3, r2, r3
 800dfb0:	80bb      	strh	r3, [r7, #4]
 800dfb2:	e023      	b.n	800dffc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dfb4:	69fb      	ldr	r3, [r7, #28]
 800dfb6:	895a      	ldrh	r2, [r3, #10]
 800dfb8:	88bb      	ldrh	r3, [r7, #4]
 800dfba:	1ad3      	subs	r3, r2, r3
 800dfbc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dfbe:	8b3a      	ldrh	r2, [r7, #24]
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d901      	bls.n	800dfca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dfc6:	88fb      	ldrh	r3, [r7, #6]
 800dfc8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dfca:	8b7b      	ldrh	r3, [r7, #26]
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	18d0      	adds	r0, r2, r3
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	88bb      	ldrh	r3, [r7, #4]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	8b3a      	ldrh	r2, [r7, #24]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	f00b fbf4 	bl	80197c8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dfe0:	8afa      	ldrh	r2, [r7, #22]
 800dfe2:	8b3b      	ldrh	r3, [r7, #24]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dfe8:	8b7a      	ldrh	r2, [r7, #26]
 800dfea:	8b3b      	ldrh	r3, [r7, #24]
 800dfec:	4413      	add	r3, r2
 800dfee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dff0:	88fa      	ldrh	r2, [r7, #6]
 800dff2:	8b3b      	ldrh	r3, [r7, #24]
 800dff4:	1ad3      	subs	r3, r2, r3
 800dff6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dff8:	2300      	movs	r3, #0
 800dffa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dffc:	69fb      	ldr	r3, [r7, #28]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	61fb      	str	r3, [r7, #28]
 800e002:	88fb      	ldrh	r3, [r7, #6]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d002      	beq.n	800e00e <pbuf_copy_partial+0xca>
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1c4      	bne.n	800df98 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800e00e:	8afb      	ldrh	r3, [r7, #22]
}
 800e010:	4618      	mov	r0, r3
 800e012:	3720      	adds	r7, #32
 800e014:	46bd      	mov	sp, r7
 800e016:	bd80      	pop	{r7, pc}
 800e018:	0801af14 	.word	0x0801af14
 800e01c:	0801b25c 	.word	0x0801b25c
 800e020:	0801af74 	.word	0x0801af74
 800e024:	0801b27c 	.word	0x0801b27c

0800e028 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b084      	sub	sp, #16
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	4603      	mov	r3, r0
 800e030:	603a      	str	r2, [r7, #0]
 800e032:	71fb      	strb	r3, [r7, #7]
 800e034:	460b      	mov	r3, r1
 800e036:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	8919      	ldrh	r1, [r3, #8]
 800e03c:	88ba      	ldrh	r2, [r7, #4]
 800e03e:	79fb      	ldrb	r3, [r7, #7]
 800e040:	4618      	mov	r0, r3
 800e042:	f7ff fa95 	bl	800d570 <pbuf_alloc>
 800e046:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d101      	bne.n	800e052 <pbuf_clone+0x2a>
    return NULL;
 800e04e:	2300      	movs	r3, #0
 800e050:	e011      	b.n	800e076 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	68f8      	ldr	r0, [r7, #12]
 800e056:	f7ff fea3 	bl	800dda0 <pbuf_copy>
 800e05a:	4603      	mov	r3, r0
 800e05c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800e05e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d006      	beq.n	800e074 <pbuf_clone+0x4c>
 800e066:	4b06      	ldr	r3, [pc, #24]	; (800e080 <pbuf_clone+0x58>)
 800e068:	f240 5224 	movw	r2, #1316	; 0x524
 800e06c:	4905      	ldr	r1, [pc, #20]	; (800e084 <pbuf_clone+0x5c>)
 800e06e:	4806      	ldr	r0, [pc, #24]	; (800e088 <pbuf_clone+0x60>)
 800e070:	f00b faac 	bl	80195cc <iprintf>
  return q;
 800e074:	68fb      	ldr	r3, [r7, #12]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3710      	adds	r7, #16
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	0801af14 	.word	0x0801af14
 800e084:	0801b388 	.word	0x0801b388
 800e088:	0801af74 	.word	0x0801af74

0800e08c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800e090:	f00b f922 	bl	80192d8 <rand>
 800e094:	4603      	mov	r3, r0
 800e096:	b29b      	uxth	r3, r3
 800e098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e09c:	b29b      	uxth	r3, r3
 800e09e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800e0a2:	b29a      	uxth	r2, r3
 800e0a4:	4b01      	ldr	r3, [pc, #4]	; (800e0ac <tcp_init+0x20>)
 800e0a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	2000003c 	.word	0x2000003c

0800e0b0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b082      	sub	sp, #8
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	7d1b      	ldrb	r3, [r3, #20]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d105      	bne.n	800e0cc <tcp_free+0x1c>
 800e0c0:	4b06      	ldr	r3, [pc, #24]	; (800e0dc <tcp_free+0x2c>)
 800e0c2:	22d4      	movs	r2, #212	; 0xd4
 800e0c4:	4906      	ldr	r1, [pc, #24]	; (800e0e0 <tcp_free+0x30>)
 800e0c6:	4807      	ldr	r0, [pc, #28]	; (800e0e4 <tcp_free+0x34>)
 800e0c8:	f00b fa80 	bl	80195cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800e0cc:	6879      	ldr	r1, [r7, #4]
 800e0ce:	2001      	movs	r0, #1
 800e0d0:	f7fe fe82 	bl	800cdd8 <memp_free>
}
 800e0d4:	bf00      	nop
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}
 800e0dc:	0801b414 	.word	0x0801b414
 800e0e0:	0801b444 	.word	0x0801b444
 800e0e4:	0801b458 	.word	0x0801b458

0800e0e8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	7d1b      	ldrb	r3, [r3, #20]
 800e0f4:	2b01      	cmp	r3, #1
 800e0f6:	d105      	bne.n	800e104 <tcp_free_listen+0x1c>
 800e0f8:	4b06      	ldr	r3, [pc, #24]	; (800e114 <tcp_free_listen+0x2c>)
 800e0fa:	22df      	movs	r2, #223	; 0xdf
 800e0fc:	4906      	ldr	r1, [pc, #24]	; (800e118 <tcp_free_listen+0x30>)
 800e0fe:	4807      	ldr	r0, [pc, #28]	; (800e11c <tcp_free_listen+0x34>)
 800e100:	f00b fa64 	bl	80195cc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	2002      	movs	r0, #2
 800e108:	f7fe fe66 	bl	800cdd8 <memp_free>
}
 800e10c:	bf00      	nop
 800e10e:	3708      	adds	r7, #8
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}
 800e114:	0801b414 	.word	0x0801b414
 800e118:	0801b480 	.word	0x0801b480
 800e11c:	0801b458 	.word	0x0801b458

0800e120 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800e124:	f001 f85c 	bl	800f1e0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800e128:	4b07      	ldr	r3, [pc, #28]	; (800e148 <tcp_tmr+0x28>)
 800e12a:	781b      	ldrb	r3, [r3, #0]
 800e12c:	3301      	adds	r3, #1
 800e12e:	b2da      	uxtb	r2, r3
 800e130:	4b05      	ldr	r3, [pc, #20]	; (800e148 <tcp_tmr+0x28>)
 800e132:	701a      	strb	r2, [r3, #0]
 800e134:	4b04      	ldr	r3, [pc, #16]	; (800e148 <tcp_tmr+0x28>)
 800e136:	781b      	ldrb	r3, [r3, #0]
 800e138:	f003 0301 	and.w	r3, r3, #1
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d001      	beq.n	800e144 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800e140:	f000 fd0e 	bl	800eb60 <tcp_slowtmr>
  }
}
 800e144:	bf00      	nop
 800e146:	bd80      	pop	{r7, pc}
 800e148:	2000cf39 	.word	0x2000cf39

0800e14c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800e14c:	b580      	push	{r7, lr}
 800e14e:	b084      	sub	sp, #16
 800e150:	af00      	add	r7, sp, #0
 800e152:	6078      	str	r0, [r7, #4]
 800e154:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d105      	bne.n	800e168 <tcp_remove_listener+0x1c>
 800e15c:	4b0d      	ldr	r3, [pc, #52]	; (800e194 <tcp_remove_listener+0x48>)
 800e15e:	22ff      	movs	r2, #255	; 0xff
 800e160:	490d      	ldr	r1, [pc, #52]	; (800e198 <tcp_remove_listener+0x4c>)
 800e162:	480e      	ldr	r0, [pc, #56]	; (800e19c <tcp_remove_listener+0x50>)
 800e164:	f00b fa32 	bl	80195cc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	60fb      	str	r3, [r7, #12]
 800e16c:	e00a      	b.n	800e184 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e172:	683a      	ldr	r2, [r7, #0]
 800e174:	429a      	cmp	r2, r3
 800e176:	d102      	bne.n	800e17e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	2200      	movs	r2, #0
 800e17c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	68db      	ldr	r3, [r3, #12]
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d1f1      	bne.n	800e16e <tcp_remove_listener+0x22>
    }
  }
}
 800e18a:	bf00      	nop
 800e18c:	bf00      	nop
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	0801b414 	.word	0x0801b414
 800e198:	0801b49c 	.word	0x0801b49c
 800e19c:	0801b458 	.word	0x0801b458

0800e1a0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <tcp_listen_closed+0x1c>
 800e1ae:	4b14      	ldr	r3, [pc, #80]	; (800e200 <tcp_listen_closed+0x60>)
 800e1b0:	f240 1211 	movw	r2, #273	; 0x111
 800e1b4:	4913      	ldr	r1, [pc, #76]	; (800e204 <tcp_listen_closed+0x64>)
 800e1b6:	4814      	ldr	r0, [pc, #80]	; (800e208 <tcp_listen_closed+0x68>)
 800e1b8:	f00b fa08 	bl	80195cc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	7d1b      	ldrb	r3, [r3, #20]
 800e1c0:	2b01      	cmp	r3, #1
 800e1c2:	d006      	beq.n	800e1d2 <tcp_listen_closed+0x32>
 800e1c4:	4b0e      	ldr	r3, [pc, #56]	; (800e200 <tcp_listen_closed+0x60>)
 800e1c6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800e1ca:	4910      	ldr	r1, [pc, #64]	; (800e20c <tcp_listen_closed+0x6c>)
 800e1cc:	480e      	ldr	r0, [pc, #56]	; (800e208 <tcp_listen_closed+0x68>)
 800e1ce:	f00b f9fd 	bl	80195cc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	60fb      	str	r3, [r7, #12]
 800e1d6:	e00b      	b.n	800e1f0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800e1d8:	4a0d      	ldr	r2, [pc, #52]	; (800e210 <tcp_listen_closed+0x70>)
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	6879      	ldr	r1, [r7, #4]
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	f7ff ffb1 	bl	800e14c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	3301      	adds	r3, #1
 800e1ee:	60fb      	str	r3, [r7, #12]
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	2b03      	cmp	r3, #3
 800e1f4:	d9f0      	bls.n	800e1d8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800e1f6:	bf00      	nop
 800e1f8:	bf00      	nop
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	0801b414 	.word	0x0801b414
 800e204:	0801b4c4 	.word	0x0801b4c4
 800e208:	0801b458 	.word	0x0801b458
 800e20c:	0801b4d0 	.word	0x0801b4d0
 800e210:	0801fb78 	.word	0x0801fb78

0800e214 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800e214:	b5b0      	push	{r4, r5, r7, lr}
 800e216:	b088      	sub	sp, #32
 800e218:	af04      	add	r7, sp, #16
 800e21a:	6078      	str	r0, [r7, #4]
 800e21c:	460b      	mov	r3, r1
 800e21e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <tcp_close_shutdown+0x20>
 800e226:	4b63      	ldr	r3, [pc, #396]	; (800e3b4 <tcp_close_shutdown+0x1a0>)
 800e228:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800e22c:	4962      	ldr	r1, [pc, #392]	; (800e3b8 <tcp_close_shutdown+0x1a4>)
 800e22e:	4863      	ldr	r0, [pc, #396]	; (800e3bc <tcp_close_shutdown+0x1a8>)
 800e230:	f00b f9cc 	bl	80195cc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800e234:	78fb      	ldrb	r3, [r7, #3]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d066      	beq.n	800e308 <tcp_close_shutdown+0xf4>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	7d1b      	ldrb	r3, [r3, #20]
 800e23e:	2b04      	cmp	r3, #4
 800e240:	d003      	beq.n	800e24a <tcp_close_shutdown+0x36>
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	7d1b      	ldrb	r3, [r3, #20]
 800e246:	2b07      	cmp	r3, #7
 800e248:	d15e      	bne.n	800e308 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d104      	bne.n	800e25c <tcp_close_shutdown+0x48>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e256:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e25a:	d055      	beq.n	800e308 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	8b5b      	ldrh	r3, [r3, #26]
 800e260:	f003 0310 	and.w	r3, r3, #16
 800e264:	2b00      	cmp	r3, #0
 800e266:	d106      	bne.n	800e276 <tcp_close_shutdown+0x62>
 800e268:	4b52      	ldr	r3, [pc, #328]	; (800e3b4 <tcp_close_shutdown+0x1a0>)
 800e26a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800e26e:	4954      	ldr	r1, [pc, #336]	; (800e3c0 <tcp_close_shutdown+0x1ac>)
 800e270:	4852      	ldr	r0, [pc, #328]	; (800e3bc <tcp_close_shutdown+0x1a8>)
 800e272:	f00b f9ab 	bl	80195cc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e27e:	687d      	ldr	r5, [r7, #4]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3304      	adds	r3, #4
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	8ad2      	ldrh	r2, [r2, #22]
 800e288:	6879      	ldr	r1, [r7, #4]
 800e28a:	8b09      	ldrh	r1, [r1, #24]
 800e28c:	9102      	str	r1, [sp, #8]
 800e28e:	9201      	str	r2, [sp, #4]
 800e290:	9300      	str	r3, [sp, #0]
 800e292:	462b      	mov	r3, r5
 800e294:	4622      	mov	r2, r4
 800e296:	4601      	mov	r1, r0
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f005 fd8f 	bl	8013dbc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f001 fb6c 	bl	800f97c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800e2a4:	4b47      	ldr	r3, [pc, #284]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	687a      	ldr	r2, [r7, #4]
 800e2aa:	429a      	cmp	r2, r3
 800e2ac:	d105      	bne.n	800e2ba <tcp_close_shutdown+0xa6>
 800e2ae:	4b45      	ldr	r3, [pc, #276]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	68db      	ldr	r3, [r3, #12]
 800e2b4:	4a43      	ldr	r2, [pc, #268]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2b6:	6013      	str	r3, [r2, #0]
 800e2b8:	e013      	b.n	800e2e2 <tcp_close_shutdown+0xce>
 800e2ba:	4b42      	ldr	r3, [pc, #264]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	60fb      	str	r3, [r7, #12]
 800e2c0:	e00c      	b.n	800e2dc <tcp_close_shutdown+0xc8>
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	68db      	ldr	r3, [r3, #12]
 800e2c6:	687a      	ldr	r2, [r7, #4]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d104      	bne.n	800e2d6 <tcp_close_shutdown+0xc2>
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	68da      	ldr	r2, [r3, #12]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	60da      	str	r2, [r3, #12]
 800e2d4:	e005      	b.n	800e2e2 <tcp_close_shutdown+0xce>
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	68db      	ldr	r3, [r3, #12]
 800e2da:	60fb      	str	r3, [r7, #12]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d1ef      	bne.n	800e2c2 <tcp_close_shutdown+0xae>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	60da      	str	r2, [r3, #12]
 800e2e8:	4b37      	ldr	r3, [pc, #220]	; (800e3c8 <tcp_close_shutdown+0x1b4>)
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800e2ee:	4b37      	ldr	r3, [pc, #220]	; (800e3cc <tcp_close_shutdown+0x1b8>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d102      	bne.n	800e2fe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800e2f8:	f004 f804 	bl	8012304 <tcp_trigger_input_pcb_close>
 800e2fc:	e002      	b.n	800e304 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7ff fed6 	bl	800e0b0 <tcp_free>
      }
      return ERR_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	e050      	b.n	800e3aa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	7d1b      	ldrb	r3, [r3, #20]
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d03b      	beq.n	800e388 <tcp_close_shutdown+0x174>
 800e310:	2b02      	cmp	r3, #2
 800e312:	dc44      	bgt.n	800e39e <tcp_close_shutdown+0x18a>
 800e314:	2b00      	cmp	r3, #0
 800e316:	d002      	beq.n	800e31e <tcp_close_shutdown+0x10a>
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d02a      	beq.n	800e372 <tcp_close_shutdown+0x15e>
 800e31c:	e03f      	b.n	800e39e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	8adb      	ldrh	r3, [r3, #22]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d021      	beq.n	800e36a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e326:	4b2a      	ldr	r3, [pc, #168]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	687a      	ldr	r2, [r7, #4]
 800e32c:	429a      	cmp	r2, r3
 800e32e:	d105      	bne.n	800e33c <tcp_close_shutdown+0x128>
 800e330:	4b27      	ldr	r3, [pc, #156]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	68db      	ldr	r3, [r3, #12]
 800e336:	4a26      	ldr	r2, [pc, #152]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e338:	6013      	str	r3, [r2, #0]
 800e33a:	e013      	b.n	800e364 <tcp_close_shutdown+0x150>
 800e33c:	4b24      	ldr	r3, [pc, #144]	; (800e3d0 <tcp_close_shutdown+0x1bc>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	60bb      	str	r3, [r7, #8]
 800e342:	e00c      	b.n	800e35e <tcp_close_shutdown+0x14a>
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	429a      	cmp	r2, r3
 800e34c:	d104      	bne.n	800e358 <tcp_close_shutdown+0x144>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	68da      	ldr	r2, [r3, #12]
 800e352:	68bb      	ldr	r3, [r7, #8]
 800e354:	60da      	str	r2, [r3, #12]
 800e356:	e005      	b.n	800e364 <tcp_close_shutdown+0x150>
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	60bb      	str	r3, [r7, #8]
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d1ef      	bne.n	800e344 <tcp_close_shutdown+0x130>
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f7ff fea0 	bl	800e0b0 <tcp_free>
      break;
 800e370:	e01a      	b.n	800e3a8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff ff14 	bl	800e1a0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800e378:	6879      	ldr	r1, [r7, #4]
 800e37a:	4816      	ldr	r0, [pc, #88]	; (800e3d4 <tcp_close_shutdown+0x1c0>)
 800e37c:	f001 fb4e 	bl	800fa1c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff feb1 	bl	800e0e8 <tcp_free_listen>
      break;
 800e386:	e00f      	b.n	800e3a8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e388:	6879      	ldr	r1, [r7, #4]
 800e38a:	480e      	ldr	r0, [pc, #56]	; (800e3c4 <tcp_close_shutdown+0x1b0>)
 800e38c:	f001 fb46 	bl	800fa1c <tcp_pcb_remove>
 800e390:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <tcp_close_shutdown+0x1b4>)
 800e392:	2201      	movs	r2, #1
 800e394:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff fe8a 	bl	800e0b0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800e39c:	e004      	b.n	800e3a8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 f81a 	bl	800e3d8 <tcp_close_shutdown_fin>
 800e3a4:	4603      	mov	r3, r0
 800e3a6:	e000      	b.n	800e3aa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800e3a8:	2300      	movs	r3, #0
}
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	0801b414 	.word	0x0801b414
 800e3b8:	0801b4e8 	.word	0x0801b4e8
 800e3bc:	0801b458 	.word	0x0801b458
 800e3c0:	0801b508 	.word	0x0801b508
 800e3c4:	2000cf30 	.word	0x2000cf30
 800e3c8:	2000cf38 	.word	0x2000cf38
 800e3cc:	2000cf70 	.word	0x2000cf70
 800e3d0:	2000cf28 	.word	0x2000cf28
 800e3d4:	2000cf2c 	.word	0x2000cf2c

0800e3d8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b084      	sub	sp, #16
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_close_shutdown_fin+0x1c>
 800e3e6:	4b2e      	ldr	r3, [pc, #184]	; (800e4a0 <tcp_close_shutdown_fin+0xc8>)
 800e3e8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800e3ec:	492d      	ldr	r1, [pc, #180]	; (800e4a4 <tcp_close_shutdown_fin+0xcc>)
 800e3ee:	482e      	ldr	r0, [pc, #184]	; (800e4a8 <tcp_close_shutdown_fin+0xd0>)
 800e3f0:	f00b f8ec 	bl	80195cc <iprintf>

  switch (pcb->state) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	7d1b      	ldrb	r3, [r3, #20]
 800e3f8:	2b07      	cmp	r3, #7
 800e3fa:	d020      	beq.n	800e43e <tcp_close_shutdown_fin+0x66>
 800e3fc:	2b07      	cmp	r3, #7
 800e3fe:	dc2b      	bgt.n	800e458 <tcp_close_shutdown_fin+0x80>
 800e400:	2b03      	cmp	r3, #3
 800e402:	d002      	beq.n	800e40a <tcp_close_shutdown_fin+0x32>
 800e404:	2b04      	cmp	r3, #4
 800e406:	d00d      	beq.n	800e424 <tcp_close_shutdown_fin+0x4c>
 800e408:	e026      	b.n	800e458 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f004 fde4 	bl	8012fd8 <tcp_send_fin>
 800e410:	4603      	mov	r3, r0
 800e412:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d11f      	bne.n	800e45c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	2205      	movs	r2, #5
 800e420:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e422:	e01b      	b.n	800e45c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f004 fdd7 	bl	8012fd8 <tcp_send_fin>
 800e42a:	4603      	mov	r3, r0
 800e42c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e42e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d114      	bne.n	800e460 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2205      	movs	r2, #5
 800e43a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e43c:	e010      	b.n	800e460 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f004 fdca 	bl	8012fd8 <tcp_send_fin>
 800e444:	4603      	mov	r3, r0
 800e446:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e448:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d109      	bne.n	800e464 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2209      	movs	r2, #9
 800e454:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e456:	e005      	b.n	800e464 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e458:	2300      	movs	r3, #0
 800e45a:	e01c      	b.n	800e496 <tcp_close_shutdown_fin+0xbe>
      break;
 800e45c:	bf00      	nop
 800e45e:	e002      	b.n	800e466 <tcp_close_shutdown_fin+0x8e>
      break;
 800e460:	bf00      	nop
 800e462:	e000      	b.n	800e466 <tcp_close_shutdown_fin+0x8e>
      break;
 800e464:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d103      	bne.n	800e476 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f004 fef0 	bl	8013254 <tcp_output>
 800e474:	e00d      	b.n	800e492 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47e:	d108      	bne.n	800e492 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	8b5b      	ldrh	r3, [r3, #26]
 800e484:	f043 0308 	orr.w	r3, r3, #8
 800e488:	b29a      	uxth	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e48e:	2300      	movs	r3, #0
 800e490:	e001      	b.n	800e496 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e492:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e496:	4618      	mov	r0, r3
 800e498:	3710      	adds	r7, #16
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}
 800e49e:	bf00      	nop
 800e4a0:	0801b414 	.word	0x0801b414
 800e4a4:	0801b4c4 	.word	0x0801b4c4
 800e4a8:	0801b458 	.word	0x0801b458

0800e4ac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b082      	sub	sp, #8
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d109      	bne.n	800e4ce <tcp_close+0x22>
 800e4ba:	4b0f      	ldr	r3, [pc, #60]	; (800e4f8 <tcp_close+0x4c>)
 800e4bc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e4c0:	490e      	ldr	r1, [pc, #56]	; (800e4fc <tcp_close+0x50>)
 800e4c2:	480f      	ldr	r0, [pc, #60]	; (800e500 <tcp_close+0x54>)
 800e4c4:	f00b f882 	bl	80195cc <iprintf>
 800e4c8:	f06f 030f 	mvn.w	r3, #15
 800e4cc:	e00f      	b.n	800e4ee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	7d1b      	ldrb	r3, [r3, #20]
 800e4d2:	2b01      	cmp	r3, #1
 800e4d4:	d006      	beq.n	800e4e4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	8b5b      	ldrh	r3, [r3, #26]
 800e4da:	f043 0310 	orr.w	r3, r3, #16
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e4e4:	2101      	movs	r1, #1
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f7ff fe94 	bl	800e214 <tcp_close_shutdown>
 800e4ec:	4603      	mov	r3, r0
}
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	3708      	adds	r7, #8
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	0801b414 	.word	0x0801b414
 800e4fc:	0801b524 	.word	0x0801b524
 800e500:	0801b458 	.word	0x0801b458

0800e504 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b08e      	sub	sp, #56	; 0x38
 800e508:	af04      	add	r7, sp, #16
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d107      	bne.n	800e524 <tcp_abandon+0x20>
 800e514:	4b52      	ldr	r3, [pc, #328]	; (800e660 <tcp_abandon+0x15c>)
 800e516:	f240 223d 	movw	r2, #573	; 0x23d
 800e51a:	4952      	ldr	r1, [pc, #328]	; (800e664 <tcp_abandon+0x160>)
 800e51c:	4852      	ldr	r0, [pc, #328]	; (800e668 <tcp_abandon+0x164>)
 800e51e:	f00b f855 	bl	80195cc <iprintf>
 800e522:	e099      	b.n	800e658 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	7d1b      	ldrb	r3, [r3, #20]
 800e528:	2b01      	cmp	r3, #1
 800e52a:	d106      	bne.n	800e53a <tcp_abandon+0x36>
 800e52c:	4b4c      	ldr	r3, [pc, #304]	; (800e660 <tcp_abandon+0x15c>)
 800e52e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e532:	494e      	ldr	r1, [pc, #312]	; (800e66c <tcp_abandon+0x168>)
 800e534:	484c      	ldr	r0, [pc, #304]	; (800e668 <tcp_abandon+0x164>)
 800e536:	f00b f849 	bl	80195cc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	7d1b      	ldrb	r3, [r3, #20]
 800e53e:	2b0a      	cmp	r3, #10
 800e540:	d107      	bne.n	800e552 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e542:	6879      	ldr	r1, [r7, #4]
 800e544:	484a      	ldr	r0, [pc, #296]	; (800e670 <tcp_abandon+0x16c>)
 800e546:	f001 fa69 	bl	800fa1c <tcp_pcb_remove>
    tcp_free(pcb);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f7ff fdb0 	bl	800e0b0 <tcp_free>
 800e550:	e082      	b.n	800e658 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e556:	2300      	movs	r3, #0
 800e558:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e55e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e564:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e56c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	691b      	ldr	r3, [r3, #16]
 800e572:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	7d1b      	ldrb	r3, [r3, #20]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d126      	bne.n	800e5ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	8adb      	ldrh	r3, [r3, #22]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d02e      	beq.n	800e5e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e584:	4b3b      	ldr	r3, [pc, #236]	; (800e674 <tcp_abandon+0x170>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	687a      	ldr	r2, [r7, #4]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d105      	bne.n	800e59a <tcp_abandon+0x96>
 800e58e:	4b39      	ldr	r3, [pc, #228]	; (800e674 <tcp_abandon+0x170>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68db      	ldr	r3, [r3, #12]
 800e594:	4a37      	ldr	r2, [pc, #220]	; (800e674 <tcp_abandon+0x170>)
 800e596:	6013      	str	r3, [r2, #0]
 800e598:	e013      	b.n	800e5c2 <tcp_abandon+0xbe>
 800e59a:	4b36      	ldr	r3, [pc, #216]	; (800e674 <tcp_abandon+0x170>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	61fb      	str	r3, [r7, #28]
 800e5a0:	e00c      	b.n	800e5bc <tcp_abandon+0xb8>
 800e5a2:	69fb      	ldr	r3, [r7, #28]
 800e5a4:	68db      	ldr	r3, [r3, #12]
 800e5a6:	687a      	ldr	r2, [r7, #4]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d104      	bne.n	800e5b6 <tcp_abandon+0xb2>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	68da      	ldr	r2, [r3, #12]
 800e5b0:	69fb      	ldr	r3, [r7, #28]
 800e5b2:	60da      	str	r2, [r3, #12]
 800e5b4:	e005      	b.n	800e5c2 <tcp_abandon+0xbe>
 800e5b6:	69fb      	ldr	r3, [r7, #28]
 800e5b8:	68db      	ldr	r3, [r3, #12]
 800e5ba:	61fb      	str	r3, [r7, #28]
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d1ef      	bne.n	800e5a2 <tcp_abandon+0x9e>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	60da      	str	r2, [r3, #12]
 800e5c8:	e00b      	b.n	800e5e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	8adb      	ldrh	r3, [r3, #22]
 800e5d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e5d4:	6879      	ldr	r1, [r7, #4]
 800e5d6:	4828      	ldr	r0, [pc, #160]	; (800e678 <tcp_abandon+0x174>)
 800e5d8:	f001 fa20 	bl	800fa1c <tcp_pcb_remove>
 800e5dc:	4b27      	ldr	r3, [pc, #156]	; (800e67c <tcp_abandon+0x178>)
 800e5de:	2201      	movs	r2, #1
 800e5e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d004      	beq.n	800e5f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 fed6 	bl	800f3a0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d004      	beq.n	800e606 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e600:	4618      	mov	r0, r3
 800e602:	f000 fecd 	bl	800f3a0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d004      	beq.n	800e618 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e612:	4618      	mov	r0, r3
 800e614:	f000 fec4 	bl	800f3a0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d00e      	beq.n	800e63c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e61e:	6879      	ldr	r1, [r7, #4]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3304      	adds	r3, #4
 800e624:	687a      	ldr	r2, [r7, #4]
 800e626:	8b12      	ldrh	r2, [r2, #24]
 800e628:	9202      	str	r2, [sp, #8]
 800e62a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e62c:	9201      	str	r2, [sp, #4]
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	460b      	mov	r3, r1
 800e632:	697a      	ldr	r2, [r7, #20]
 800e634:	69b9      	ldr	r1, [r7, #24]
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f005 fbc0 	bl	8013dbc <tcp_rst>
    }
    last_state = pcb->state;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	7d1b      	ldrb	r3, [r3, #20]
 800e640:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7ff fd34 	bl	800e0b0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e648:	693b      	ldr	r3, [r7, #16]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d004      	beq.n	800e658 <tcp_abandon+0x154>
 800e64e:	693b      	ldr	r3, [r7, #16]
 800e650:	f06f 010c 	mvn.w	r1, #12
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	4798      	blx	r3
  }
}
 800e658:	3728      	adds	r7, #40	; 0x28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	0801b414 	.word	0x0801b414
 800e664:	0801b558 	.word	0x0801b558
 800e668:	0801b458 	.word	0x0801b458
 800e66c:	0801b574 	.word	0x0801b574
 800e670:	2000cf34 	.word	0x2000cf34
 800e674:	2000cf28 	.word	0x2000cf28
 800e678:	2000cf30 	.word	0x2000cf30
 800e67c:	2000cf38 	.word	0x2000cf38

0800e680 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e688:	2101      	movs	r1, #1
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f7ff ff3a 	bl	800e504 <tcp_abandon>
}
 800e690:	bf00      	nop
 800e692:	3708      	adds	r7, #8
 800e694:	46bd      	mov	sp, r7
 800e696:	bd80      	pop	{r7, pc}

0800e698 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	4613      	mov	r3, r2
 800e6a4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e6a6:	2304      	movs	r3, #4
 800e6a8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e6b0:	4b3e      	ldr	r3, [pc, #248]	; (800e7ac <tcp_bind+0x114>)
 800e6b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d109      	bne.n	800e6ce <tcp_bind+0x36>
 800e6ba:	4b3d      	ldr	r3, [pc, #244]	; (800e7b0 <tcp_bind+0x118>)
 800e6bc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e6c0:	493c      	ldr	r1, [pc, #240]	; (800e7b4 <tcp_bind+0x11c>)
 800e6c2:	483d      	ldr	r0, [pc, #244]	; (800e7b8 <tcp_bind+0x120>)
 800e6c4:	f00a ff82 	bl	80195cc <iprintf>
 800e6c8:	f06f 030f 	mvn.w	r3, #15
 800e6cc:	e06a      	b.n	800e7a4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d009      	beq.n	800e6ea <tcp_bind+0x52>
 800e6d6:	4b36      	ldr	r3, [pc, #216]	; (800e7b0 <tcp_bind+0x118>)
 800e6d8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e6dc:	4937      	ldr	r1, [pc, #220]	; (800e7bc <tcp_bind+0x124>)
 800e6de:	4836      	ldr	r0, [pc, #216]	; (800e7b8 <tcp_bind+0x120>)
 800e6e0:	f00a ff74 	bl	80195cc <iprintf>
 800e6e4:	f06f 0305 	mvn.w	r3, #5
 800e6e8:	e05c      	b.n	800e7a4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e6ea:	88fb      	ldrh	r3, [r7, #6]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d109      	bne.n	800e704 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e6f0:	f000 f9f0 	bl	800ead4 <tcp_new_port>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e6f8:	88fb      	ldrh	r3, [r7, #6]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d135      	bne.n	800e76a <tcp_bind+0xd2>
      return ERR_BUF;
 800e6fe:	f06f 0301 	mvn.w	r3, #1
 800e702:	e04f      	b.n	800e7a4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e704:	2300      	movs	r3, #0
 800e706:	61fb      	str	r3, [r7, #28]
 800e708:	e02b      	b.n	800e762 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e70a:	4a2d      	ldr	r2, [pc, #180]	; (800e7c0 <tcp_bind+0x128>)
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	61bb      	str	r3, [r7, #24]
 800e716:	e01e      	b.n	800e756 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	8adb      	ldrh	r3, [r3, #22]
 800e71c:	88fa      	ldrh	r2, [r7, #6]
 800e71e:	429a      	cmp	r2, r3
 800e720:	d116      	bne.n	800e750 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e722:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e724:	2b00      	cmp	r3, #0
 800e726:	d010      	beq.n	800e74a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d00c      	beq.n	800e74a <tcp_bind+0xb2>
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d009      	beq.n	800e74a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d005      	beq.n	800e74a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e73e:	69bb      	ldr	r3, [r7, #24]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e746:	429a      	cmp	r2, r3
 800e748:	d102      	bne.n	800e750 <tcp_bind+0xb8>
              return ERR_USE;
 800e74a:	f06f 0307 	mvn.w	r3, #7
 800e74e:	e029      	b.n	800e7a4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e750:	69bb      	ldr	r3, [r7, #24]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	61bb      	str	r3, [r7, #24]
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1dd      	bne.n	800e718 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	3301      	adds	r3, #1
 800e760:	61fb      	str	r3, [r7, #28]
 800e762:	69fa      	ldr	r2, [r7, #28]
 800e764:	697b      	ldr	r3, [r7, #20]
 800e766:	429a      	cmp	r2, r3
 800e768:	dbcf      	blt.n	800e70a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e76a:	68bb      	ldr	r3, [r7, #8]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d00c      	beq.n	800e78a <tcp_bind+0xf2>
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	2b00      	cmp	r3, #0
 800e776:	d008      	beq.n	800e78a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e778:	68bb      	ldr	r3, [r7, #8]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <tcp_bind+0xec>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	e000      	b.n	800e786 <tcp_bind+0xee>
 800e784:	2300      	movs	r3, #0
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	88fa      	ldrh	r2, [r7, #6]
 800e78e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e790:	4b0c      	ldr	r3, [pc, #48]	; (800e7c4 <tcp_bind+0x12c>)
 800e792:	681a      	ldr	r2, [r3, #0]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	60da      	str	r2, [r3, #12]
 800e798:	4a0a      	ldr	r2, [pc, #40]	; (800e7c4 <tcp_bind+0x12c>)
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6013      	str	r3, [r2, #0]
 800e79e:	f005 fccf 	bl	8014140 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e7a2:	2300      	movs	r3, #0
}
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	3720      	adds	r7, #32
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	bd80      	pop	{r7, pc}
 800e7ac:	0801fbb0 	.word	0x0801fbb0
 800e7b0:	0801b414 	.word	0x0801b414
 800e7b4:	0801b5a8 	.word	0x0801b5a8
 800e7b8:	0801b458 	.word	0x0801b458
 800e7bc:	0801b5c0 	.word	0x0801b5c0
 800e7c0:	0801fb78 	.word	0x0801fb78
 800e7c4:	2000cf28 	.word	0x2000cf28

0800e7c8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	4613      	mov	r3, r2
 800e7d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d106      	bne.n	800e7ea <tcp_accept_null+0x22>
 800e7dc:	4b07      	ldr	r3, [pc, #28]	; (800e7fc <tcp_accept_null+0x34>)
 800e7de:	f240 320f 	movw	r2, #783	; 0x30f
 800e7e2:	4907      	ldr	r1, [pc, #28]	; (800e800 <tcp_accept_null+0x38>)
 800e7e4:	4807      	ldr	r0, [pc, #28]	; (800e804 <tcp_accept_null+0x3c>)
 800e7e6:	f00a fef1 	bl	80195cc <iprintf>

  tcp_abort(pcb);
 800e7ea:	68b8      	ldr	r0, [r7, #8]
 800e7ec:	f7ff ff48 	bl	800e680 <tcp_abort>

  return ERR_ABRT;
 800e7f0:	f06f 030c 	mvn.w	r3, #12
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	3710      	adds	r7, #16
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	bd80      	pop	{r7, pc}
 800e7fc:	0801b414 	.word	0x0801b414
 800e800:	0801b5e8 	.word	0x0801b5e8
 800e804:	0801b458 	.word	0x0801b458

0800e808 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e814:	78fb      	ldrb	r3, [r7, #3]
 800e816:	2200      	movs	r2, #0
 800e818:	4619      	mov	r1, r3
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 f806 	bl	800e82c <tcp_listen_with_backlog_and_err>
 800e820:	4603      	mov	r3, r0
}
 800e822:	4618      	mov	r0, r3
 800e824:	3708      	adds	r7, #8
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
	...

0800e82c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b088      	sub	sp, #32
 800e830:	af00      	add	r7, sp, #0
 800e832:	60f8      	str	r0, [r7, #12]
 800e834:	460b      	mov	r3, r1
 800e836:	607a      	str	r2, [r7, #4]
 800e838:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e83a:	2300      	movs	r3, #0
 800e83c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d109      	bne.n	800e858 <tcp_listen_with_backlog_and_err+0x2c>
 800e844:	4b47      	ldr	r3, [pc, #284]	; (800e964 <tcp_listen_with_backlog_and_err+0x138>)
 800e846:	f240 3259 	movw	r2, #857	; 0x359
 800e84a:	4947      	ldr	r1, [pc, #284]	; (800e968 <tcp_listen_with_backlog_and_err+0x13c>)
 800e84c:	4847      	ldr	r0, [pc, #284]	; (800e96c <tcp_listen_with_backlog_and_err+0x140>)
 800e84e:	f00a febd 	bl	80195cc <iprintf>
 800e852:	23f0      	movs	r3, #240	; 0xf0
 800e854:	76fb      	strb	r3, [r7, #27]
 800e856:	e079      	b.n	800e94c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	7d1b      	ldrb	r3, [r3, #20]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d009      	beq.n	800e874 <tcp_listen_with_backlog_and_err+0x48>
 800e860:	4b40      	ldr	r3, [pc, #256]	; (800e964 <tcp_listen_with_backlog_and_err+0x138>)
 800e862:	f240 325a 	movw	r2, #858	; 0x35a
 800e866:	4942      	ldr	r1, [pc, #264]	; (800e970 <tcp_listen_with_backlog_and_err+0x144>)
 800e868:	4840      	ldr	r0, [pc, #256]	; (800e96c <tcp_listen_with_backlog_and_err+0x140>)
 800e86a:	f00a feaf 	bl	80195cc <iprintf>
 800e86e:	23f1      	movs	r3, #241	; 0xf1
 800e870:	76fb      	strb	r3, [r7, #27]
 800e872:	e06b      	b.n	800e94c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	7d1b      	ldrb	r3, [r3, #20]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d104      	bne.n	800e886 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e880:	23f7      	movs	r3, #247	; 0xf7
 800e882:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e884:	e062      	b.n	800e94c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e886:	2002      	movs	r0, #2
 800e888:	f7fe fa30 	bl	800ccec <memp_malloc>
 800e88c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e88e:	69fb      	ldr	r3, [r7, #28]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d102      	bne.n	800e89a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e894:	23ff      	movs	r3, #255	; 0xff
 800e896:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e898:	e058      	b.n	800e94c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	691a      	ldr	r2, [r3, #16]
 800e89e:	69fb      	ldr	r3, [r7, #28]
 800e8a0:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	8ada      	ldrh	r2, [r3, #22]
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e8aa:	69fb      	ldr	r3, [r7, #28]
 800e8ac:	2201      	movs	r2, #1
 800e8ae:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	7d5a      	ldrb	r2, [r3, #21]
 800e8b4:	69fb      	ldr	r3, [r7, #28]
 800e8b6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	7a5a      	ldrb	r2, [r3, #9]
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	7ada      	ldrb	r2, [r3, #11]
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	7a9a      	ldrb	r2, [r3, #10]
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	681a      	ldr	r2, [r3, #0]
 800e8da:	69fb      	ldr	r3, [r7, #28]
 800e8dc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	8adb      	ldrh	r3, [r3, #22]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d021      	beq.n	800e92a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e8e6:	4b23      	ldr	r3, [pc, #140]	; (800e974 <tcp_listen_with_backlog_and_err+0x148>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68fa      	ldr	r2, [r7, #12]
 800e8ec:	429a      	cmp	r2, r3
 800e8ee:	d105      	bne.n	800e8fc <tcp_listen_with_backlog_and_err+0xd0>
 800e8f0:	4b20      	ldr	r3, [pc, #128]	; (800e974 <tcp_listen_with_backlog_and_err+0x148>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	4a1f      	ldr	r2, [pc, #124]	; (800e974 <tcp_listen_with_backlog_and_err+0x148>)
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	e013      	b.n	800e924 <tcp_listen_with_backlog_and_err+0xf8>
 800e8fc:	4b1d      	ldr	r3, [pc, #116]	; (800e974 <tcp_listen_with_backlog_and_err+0x148>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	617b      	str	r3, [r7, #20]
 800e902:	e00c      	b.n	800e91e <tcp_listen_with_backlog_and_err+0xf2>
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	68fa      	ldr	r2, [r7, #12]
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d104      	bne.n	800e918 <tcp_listen_with_backlog_and_err+0xec>
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	68da      	ldr	r2, [r3, #12]
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	60da      	str	r2, [r3, #12]
 800e916:	e005      	b.n	800e924 <tcp_listen_with_backlog_and_err+0xf8>
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	68db      	ldr	r3, [r3, #12]
 800e91c:	617b      	str	r3, [r7, #20]
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1ef      	bne.n	800e904 <tcp_listen_with_backlog_and_err+0xd8>
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2200      	movs	r2, #0
 800e928:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f7ff fbc0 	bl	800e0b0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	4a11      	ldr	r2, [pc, #68]	; (800e978 <tcp_listen_with_backlog_and_err+0x14c>)
 800e934:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e936:	4b11      	ldr	r3, [pc, #68]	; (800e97c <tcp_listen_with_backlog_and_err+0x150>)
 800e938:	681a      	ldr	r2, [r3, #0]
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	60da      	str	r2, [r3, #12]
 800e93e:	4a0f      	ldr	r2, [pc, #60]	; (800e97c <tcp_listen_with_backlog_and_err+0x150>)
 800e940:	69fb      	ldr	r3, [r7, #28]
 800e942:	6013      	str	r3, [r2, #0]
 800e944:	f005 fbfc 	bl	8014140 <tcp_timer_needed>
  res = ERR_OK;
 800e948:	2300      	movs	r3, #0
 800e94a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d002      	beq.n	800e958 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	7efa      	ldrb	r2, [r7, #27]
 800e956:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e958:	69fb      	ldr	r3, [r7, #28]
}
 800e95a:	4618      	mov	r0, r3
 800e95c:	3720      	adds	r7, #32
 800e95e:	46bd      	mov	sp, r7
 800e960:	bd80      	pop	{r7, pc}
 800e962:	bf00      	nop
 800e964:	0801b414 	.word	0x0801b414
 800e968:	0801b608 	.word	0x0801b608
 800e96c:	0801b458 	.word	0x0801b458
 800e970:	0801b638 	.word	0x0801b638
 800e974:	2000cf28 	.word	0x2000cf28
 800e978:	0800e7c9 	.word	0x0800e7c9
 800e97c:	2000cf2c 	.word	0x2000cf2c

0800e980 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b084      	sub	sp, #16
 800e984:	af00      	add	r7, sp, #0
 800e986:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d106      	bne.n	800e99c <tcp_update_rcv_ann_wnd+0x1c>
 800e98e:	4b25      	ldr	r3, [pc, #148]	; (800ea24 <tcp_update_rcv_ann_wnd+0xa4>)
 800e990:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e994:	4924      	ldr	r1, [pc, #144]	; (800ea28 <tcp_update_rcv_ann_wnd+0xa8>)
 800e996:	4825      	ldr	r0, [pc, #148]	; (800ea2c <tcp_update_rcv_ann_wnd+0xac>)
 800e998:	f00a fe18 	bl	80195cc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9a0:	687a      	ldr	r2, [r7, #4]
 800e9a2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e9a4:	4413      	add	r3, r2
 800e9a6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ac:	687a      	ldr	r2, [r7, #4]
 800e9ae:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e9b0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e9b4:	bf28      	it	cs
 800e9b6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e9ba:	b292      	uxth	r2, r2
 800e9bc:	4413      	add	r3, r2
 800e9be:	68fa      	ldr	r2, [r7, #12]
 800e9c0:	1ad3      	subs	r3, r2, r3
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	db08      	blt.n	800e9d8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9d2:	68fa      	ldr	r2, [r7, #12]
 800e9d4:	1ad3      	subs	r3, r2, r3
 800e9d6:	e020      	b.n	800ea1a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e0:	1ad3      	subs	r3, r2, r3
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	dd03      	ble.n	800e9ee <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e9ec:	e014      	b.n	800ea18 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f6:	1ad3      	subs	r3, r2, r3
 800e9f8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea00:	d306      	bcc.n	800ea10 <tcp_update_rcv_ann_wnd+0x90>
 800ea02:	4b08      	ldr	r3, [pc, #32]	; (800ea24 <tcp_update_rcv_ann_wnd+0xa4>)
 800ea04:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ea08:	4909      	ldr	r1, [pc, #36]	; (800ea30 <tcp_update_rcv_ann_wnd+0xb0>)
 800ea0a:	4808      	ldr	r0, [pc, #32]	; (800ea2c <tcp_update_rcv_ann_wnd+0xac>)
 800ea0c:	f00a fdde 	bl	80195cc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	b29a      	uxth	r2, r3
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ea18:	2300      	movs	r3, #0
  }
}
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	3710      	adds	r7, #16
 800ea1e:	46bd      	mov	sp, r7
 800ea20:	bd80      	pop	{r7, pc}
 800ea22:	bf00      	nop
 800ea24:	0801b414 	.word	0x0801b414
 800ea28:	0801b670 	.word	0x0801b670
 800ea2c:	0801b458 	.word	0x0801b458
 800ea30:	0801b694 	.word	0x0801b694

0800ea34 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d107      	bne.n	800ea56 <tcp_recved+0x22>
 800ea46:	4b1f      	ldr	r3, [pc, #124]	; (800eac4 <tcp_recved+0x90>)
 800ea48:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ea4c:	491e      	ldr	r1, [pc, #120]	; (800eac8 <tcp_recved+0x94>)
 800ea4e:	481f      	ldr	r0, [pc, #124]	; (800eacc <tcp_recved+0x98>)
 800ea50:	f00a fdbc 	bl	80195cc <iprintf>
 800ea54:	e032      	b.n	800eabc <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	7d1b      	ldrb	r3, [r3, #20]
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d106      	bne.n	800ea6c <tcp_recved+0x38>
 800ea5e:	4b19      	ldr	r3, [pc, #100]	; (800eac4 <tcp_recved+0x90>)
 800ea60:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ea64:	491a      	ldr	r1, [pc, #104]	; (800ead0 <tcp_recved+0x9c>)
 800ea66:	4819      	ldr	r0, [pc, #100]	; (800eacc <tcp_recved+0x98>)
 800ea68:	f00a fdb0 	bl	80195cc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ea70:	887b      	ldrh	r3, [r7, #2]
 800ea72:	4413      	add	r3, r2
 800ea74:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ea76:	89fb      	ldrh	r3, [r7, #14]
 800ea78:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ea7c:	d804      	bhi.n	800ea88 <tcp_recved+0x54>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea82:	89fa      	ldrh	r2, [r7, #14]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	d204      	bcs.n	800ea92 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ea8e:	851a      	strh	r2, [r3, #40]	; 0x28
 800ea90:	e002      	b.n	800ea98 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	89fa      	ldrh	r2, [r7, #14]
 800ea96:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff ff71 	bl	800e980 <tcp_update_rcv_ann_wnd>
 800ea9e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800eaa6:	d309      	bcc.n	800eabc <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	8b5b      	ldrh	r3, [r3, #26]
 800eaac:	f043 0302 	orr.w	r3, r3, #2
 800eab0:	b29a      	uxth	r2, r3
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f004 fbcc 	bl	8013254 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
 800eac2:	bf00      	nop
 800eac4:	0801b414 	.word	0x0801b414
 800eac8:	0801b6b0 	.word	0x0801b6b0
 800eacc:	0801b458 	.word	0x0801b458
 800ead0:	0801b6c8 	.word	0x0801b6c8

0800ead4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800eada:	2300      	movs	r3, #0
 800eadc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800eade:	4b1e      	ldr	r3, [pc, #120]	; (800eb58 <tcp_new_port+0x84>)
 800eae0:	881b      	ldrh	r3, [r3, #0]
 800eae2:	3301      	adds	r3, #1
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	4b1c      	ldr	r3, [pc, #112]	; (800eb58 <tcp_new_port+0x84>)
 800eae8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800eaea:	4b1b      	ldr	r3, [pc, #108]	; (800eb58 <tcp_new_port+0x84>)
 800eaec:	881b      	ldrh	r3, [r3, #0]
 800eaee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eaf2:	4293      	cmp	r3, r2
 800eaf4:	d103      	bne.n	800eafe <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800eaf6:	4b18      	ldr	r3, [pc, #96]	; (800eb58 <tcp_new_port+0x84>)
 800eaf8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eafc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eafe:	2300      	movs	r3, #0
 800eb00:	71fb      	strb	r3, [r7, #7]
 800eb02:	e01e      	b.n	800eb42 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	4a15      	ldr	r2, [pc, #84]	; (800eb5c <tcp_new_port+0x88>)
 800eb08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	603b      	str	r3, [r7, #0]
 800eb10:	e011      	b.n	800eb36 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800eb12:	683b      	ldr	r3, [r7, #0]
 800eb14:	8ada      	ldrh	r2, [r3, #22]
 800eb16:	4b10      	ldr	r3, [pc, #64]	; (800eb58 <tcp_new_port+0x84>)
 800eb18:	881b      	ldrh	r3, [r3, #0]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d108      	bne.n	800eb30 <tcp_new_port+0x5c>
        n++;
 800eb1e:	88bb      	ldrh	r3, [r7, #4]
 800eb20:	3301      	adds	r3, #1
 800eb22:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800eb24:	88bb      	ldrh	r3, [r7, #4]
 800eb26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800eb2a:	d3d8      	bcc.n	800eade <tcp_new_port+0xa>
          return 0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	e00d      	b.n	800eb4c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	68db      	ldr	r3, [r3, #12]
 800eb34:	603b      	str	r3, [r7, #0]
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d1ea      	bne.n	800eb12 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800eb3c:	79fb      	ldrb	r3, [r7, #7]
 800eb3e:	3301      	adds	r3, #1
 800eb40:	71fb      	strb	r3, [r7, #7]
 800eb42:	79fb      	ldrb	r3, [r7, #7]
 800eb44:	2b03      	cmp	r3, #3
 800eb46:	d9dd      	bls.n	800eb04 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800eb48:	4b03      	ldr	r3, [pc, #12]	; (800eb58 <tcp_new_port+0x84>)
 800eb4a:	881b      	ldrh	r3, [r3, #0]
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr
 800eb58:	2000003c 	.word	0x2000003c
 800eb5c:	0801fb78 	.word	0x0801fb78

0800eb60 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800eb60:	b5b0      	push	{r4, r5, r7, lr}
 800eb62:	b090      	sub	sp, #64	; 0x40
 800eb64:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800eb66:	2300      	movs	r3, #0
 800eb68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800eb6c:	4b94      	ldr	r3, [pc, #592]	; (800edc0 <tcp_slowtmr+0x260>)
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	3301      	adds	r3, #1
 800eb72:	4a93      	ldr	r2, [pc, #588]	; (800edc0 <tcp_slowtmr+0x260>)
 800eb74:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800eb76:	4b93      	ldr	r3, [pc, #588]	; (800edc4 <tcp_slowtmr+0x264>)
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	b2da      	uxtb	r2, r3
 800eb7e:	4b91      	ldr	r3, [pc, #580]	; (800edc4 <tcp_slowtmr+0x264>)
 800eb80:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800eb82:	2300      	movs	r3, #0
 800eb84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800eb86:	4b90      	ldr	r3, [pc, #576]	; (800edc8 <tcp_slowtmr+0x268>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800eb8c:	e29d      	b.n	800f0ca <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800eb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb90:	7d1b      	ldrb	r3, [r3, #20]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d106      	bne.n	800eba4 <tcp_slowtmr+0x44>
 800eb96:	4b8d      	ldr	r3, [pc, #564]	; (800edcc <tcp_slowtmr+0x26c>)
 800eb98:	f240 42be 	movw	r2, #1214	; 0x4be
 800eb9c:	498c      	ldr	r1, [pc, #560]	; (800edd0 <tcp_slowtmr+0x270>)
 800eb9e:	488d      	ldr	r0, [pc, #564]	; (800edd4 <tcp_slowtmr+0x274>)
 800eba0:	f00a fd14 	bl	80195cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800eba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba6:	7d1b      	ldrb	r3, [r3, #20]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d106      	bne.n	800ebba <tcp_slowtmr+0x5a>
 800ebac:	4b87      	ldr	r3, [pc, #540]	; (800edcc <tcp_slowtmr+0x26c>)
 800ebae:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800ebb2:	4989      	ldr	r1, [pc, #548]	; (800edd8 <tcp_slowtmr+0x278>)
 800ebb4:	4887      	ldr	r0, [pc, #540]	; (800edd4 <tcp_slowtmr+0x274>)
 800ebb6:	f00a fd09 	bl	80195cc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	7d1b      	ldrb	r3, [r3, #20]
 800ebbe:	2b0a      	cmp	r3, #10
 800ebc0:	d106      	bne.n	800ebd0 <tcp_slowtmr+0x70>
 800ebc2:	4b82      	ldr	r3, [pc, #520]	; (800edcc <tcp_slowtmr+0x26c>)
 800ebc4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ebc8:	4984      	ldr	r1, [pc, #528]	; (800eddc <tcp_slowtmr+0x27c>)
 800ebca:	4882      	ldr	r0, [pc, #520]	; (800edd4 <tcp_slowtmr+0x274>)
 800ebcc:	f00a fcfe 	bl	80195cc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ebd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd2:	7f9a      	ldrb	r2, [r3, #30]
 800ebd4:	4b7b      	ldr	r3, [pc, #492]	; (800edc4 <tcp_slowtmr+0x264>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	429a      	cmp	r2, r3
 800ebda:	d105      	bne.n	800ebe8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ebdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebde:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ebe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe2:	68db      	ldr	r3, [r3, #12]
 800ebe4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ebe6:	e270      	b.n	800f0ca <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ebe8:	4b76      	ldr	r3, [pc, #472]	; (800edc4 <tcp_slowtmr+0x264>)
 800ebea:	781a      	ldrb	r2, [r3, #0]
 800ebec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebee:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ebfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebfe:	7d1b      	ldrb	r3, [r3, #20]
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	d10a      	bne.n	800ec1a <tcp_slowtmr+0xba>
 800ec04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec0a:	2b05      	cmp	r3, #5
 800ec0c:	d905      	bls.n	800ec1a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ec0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec12:	3301      	adds	r3, #1
 800ec14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec18:	e11e      	b.n	800ee58 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ec1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec1c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ec20:	2b0b      	cmp	r3, #11
 800ec22:	d905      	bls.n	800ec30 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ec24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec28:	3301      	adds	r3, #1
 800ec2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec2e:	e113      	b.n	800ee58 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d075      	beq.n	800ed26 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ec3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d006      	beq.n	800ec50 <tcp_slowtmr+0xf0>
 800ec42:	4b62      	ldr	r3, [pc, #392]	; (800edcc <tcp_slowtmr+0x26c>)
 800ec44:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ec48:	4965      	ldr	r1, [pc, #404]	; (800ede0 <tcp_slowtmr+0x280>)
 800ec4a:	4862      	ldr	r0, [pc, #392]	; (800edd4 <tcp_slowtmr+0x274>)
 800ec4c:	f00a fcbe 	bl	80195cc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ec50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d106      	bne.n	800ec66 <tcp_slowtmr+0x106>
 800ec58:	4b5c      	ldr	r3, [pc, #368]	; (800edcc <tcp_slowtmr+0x26c>)
 800ec5a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ec5e:	4961      	ldr	r1, [pc, #388]	; (800ede4 <tcp_slowtmr+0x284>)
 800ec60:	485c      	ldr	r0, [pc, #368]	; (800edd4 <tcp_slowtmr+0x274>)
 800ec62:	f00a fcb3 	bl	80195cc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ec66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec68:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ec6c:	2b0b      	cmp	r3, #11
 800ec6e:	d905      	bls.n	800ec7c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800ec70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec74:	3301      	adds	r3, #1
 800ec76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec7a:	e0ed      	b.n	800ee58 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800ec7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ec82:	3b01      	subs	r3, #1
 800ec84:	4a58      	ldr	r2, [pc, #352]	; (800ede8 <tcp_slowtmr+0x288>)
 800ec86:	5cd3      	ldrb	r3, [r2, r3]
 800ec88:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800ec8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec90:	7c7a      	ldrb	r2, [r7, #17]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d907      	bls.n	800eca6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800ec96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	b2da      	uxtb	r2, r3
 800eca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800eca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eca8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800ecac:	7c7a      	ldrb	r2, [r7, #17]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	f200 80d2 	bhi.w	800ee58 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800ecb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d108      	bne.n	800ecd4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800ecc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecc4:	f005 f96e 	bl	8013fa4 <tcp_zero_window_probe>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d014      	beq.n	800ecf8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800ecce:	2300      	movs	r3, #0
 800ecd0:	623b      	str	r3, [r7, #32]
 800ecd2:	e011      	b.n	800ecf8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800ecd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecd6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ecda:	4619      	mov	r1, r3
 800ecdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecde:	f004 f833 	bl	8012d48 <tcp_split_unsent_seg>
 800ece2:	4603      	mov	r3, r0
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d107      	bne.n	800ecf8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800ece8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ecea:	f004 fab3 	bl	8013254 <tcp_output>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	f000 80ac 	beq.w	800ee58 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800ed00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed02:	2200      	movs	r2, #0
 800ed04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ed08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed0a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed0e:	2b06      	cmp	r3, #6
 800ed10:	f200 80a2 	bhi.w	800ee58 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800ed14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed16:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	b2da      	uxtb	r2, r3
 800ed1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed20:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800ed24:	e098      	b.n	800ee58 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800ed26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	db0f      	blt.n	800ed50 <tcp_slowtmr+0x1f0>
 800ed30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed36:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d008      	beq.n	800ed50 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800ed3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed40:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ed44:	b29b      	uxth	r3, r3
 800ed46:	3301      	adds	r3, #1
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	b21a      	sxth	r2, r3
 800ed4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed4e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800ed50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed52:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	db7b      	blt.n	800ee58 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800ed60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ed62:	f004 fd6b 	bl	801383c <tcp_rexmit_rto_prepare>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d007      	beq.n	800ed7c <tcp_slowtmr+0x21c>
 800ed6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d171      	bne.n	800ee58 <tcp_slowtmr+0x2f8>
 800ed74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d06d      	beq.n	800ee58 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ed7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed7e:	7d1b      	ldrb	r3, [r3, #20]
 800ed80:	2b02      	cmp	r3, #2
 800ed82:	d03a      	beq.n	800edfa <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ed84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed8a:	2b0c      	cmp	r3, #12
 800ed8c:	bf28      	it	cs
 800ed8e:	230c      	movcs	r3, #12
 800ed90:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ed92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ed98:	10db      	asrs	r3, r3, #3
 800ed9a:	b21b      	sxth	r3, r3
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800eda4:	4413      	add	r3, r2
 800eda6:	7efa      	ldrb	r2, [r7, #27]
 800eda8:	4910      	ldr	r1, [pc, #64]	; (800edec <tcp_slowtmr+0x28c>)
 800edaa:	5c8a      	ldrb	r2, [r1, r2]
 800edac:	4093      	lsls	r3, r2
 800edae:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800edb0:	697b      	ldr	r3, [r7, #20]
 800edb2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800edb6:	4293      	cmp	r3, r2
 800edb8:	dc1a      	bgt.n	800edf0 <tcp_slowtmr+0x290>
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	b21a      	sxth	r2, r3
 800edbe:	e019      	b.n	800edf4 <tcp_slowtmr+0x294>
 800edc0:	2000cf24 	.word	0x2000cf24
 800edc4:	2000cf3a 	.word	0x2000cf3a
 800edc8:	2000cf30 	.word	0x2000cf30
 800edcc:	0801b414 	.word	0x0801b414
 800edd0:	0801b758 	.word	0x0801b758
 800edd4:	0801b458 	.word	0x0801b458
 800edd8:	0801b784 	.word	0x0801b784
 800eddc:	0801b7b0 	.word	0x0801b7b0
 800ede0:	0801b7e0 	.word	0x0801b7e0
 800ede4:	0801b814 	.word	0x0801b814
 800ede8:	0801fb70 	.word	0x0801fb70
 800edec:	0801fb60 	.word	0x0801fb60
 800edf0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800edf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800edfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edfc:	2200      	movs	r2, #0
 800edfe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ee00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ee06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee08:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee0c:	4293      	cmp	r3, r2
 800ee0e:	bf28      	it	cs
 800ee10:	4613      	movcs	r3, r2
 800ee12:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800ee14:	8a7b      	ldrh	r3, [r7, #18]
 800ee16:	085b      	lsrs	r3, r3, #1
 800ee18:	b29a      	uxth	r2, r3
 800ee1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800ee20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee22:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ee26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	b29b      	uxth	r3, r3
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d206      	bcs.n	800ee40 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800ee32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee36:	005b      	lsls	r3, r3, #1
 800ee38:	b29a      	uxth	r2, r3
 800ee3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800ee40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee42:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ee44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800ee4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4c:	2200      	movs	r2, #0
 800ee4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800ee52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ee54:	f004 fd62 	bl	801391c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800ee58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee5a:	7d1b      	ldrb	r3, [r3, #20]
 800ee5c:	2b06      	cmp	r3, #6
 800ee5e:	d111      	bne.n	800ee84 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800ee60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee62:	8b5b      	ldrh	r3, [r3, #26]
 800ee64:	f003 0310 	and.w	r3, r3, #16
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00b      	beq.n	800ee84 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ee6c:	4b9c      	ldr	r3, [pc, #624]	; (800f0e0 <tcp_slowtmr+0x580>)
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee72:	6a1b      	ldr	r3, [r3, #32]
 800ee74:	1ad3      	subs	r3, r2, r3
 800ee76:	2b28      	cmp	r3, #40	; 0x28
 800ee78:	d904      	bls.n	800ee84 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ee7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee7e:	3301      	adds	r3, #1
 800ee80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee86:	7a5b      	ldrb	r3, [r3, #9]
 800ee88:	f003 0308 	and.w	r3, r3, #8
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d04a      	beq.n	800ef26 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ee90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee92:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ee94:	2b04      	cmp	r3, #4
 800ee96:	d003      	beq.n	800eea0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ee98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ee9c:	2b07      	cmp	r3, #7
 800ee9e:	d142      	bne.n	800ef26 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eea0:	4b8f      	ldr	r3, [pc, #572]	; (800f0e0 <tcp_slowtmr+0x580>)
 800eea2:	681a      	ldr	r2, [r3, #0]
 800eea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea6:	6a1b      	ldr	r3, [r3, #32]
 800eea8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800eeaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeac:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eeb0:	4b8c      	ldr	r3, [pc, #560]	; (800f0e4 <tcp_slowtmr+0x584>)
 800eeb2:	440b      	add	r3, r1
 800eeb4:	498c      	ldr	r1, [pc, #560]	; (800f0e8 <tcp_slowtmr+0x588>)
 800eeb6:	fba1 1303 	umull	r1, r3, r1, r3
 800eeba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eebc:	429a      	cmp	r2, r3
 800eebe:	d90a      	bls.n	800eed6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800eec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eec4:	3301      	adds	r3, #1
 800eec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800eeca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eece:	3301      	adds	r3, #1
 800eed0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800eed4:	e027      	b.n	800ef26 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eed6:	4b82      	ldr	r3, [pc, #520]	; (800f0e0 <tcp_slowtmr+0x580>)
 800eed8:	681a      	ldr	r2, [r3, #0]
 800eeda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800eee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eee8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800eeec:	4618      	mov	r0, r3
 800eeee:	4b7f      	ldr	r3, [pc, #508]	; (800f0ec <tcp_slowtmr+0x58c>)
 800eef0:	fb00 f303 	mul.w	r3, r0, r3
 800eef4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800eef6:	497c      	ldr	r1, [pc, #496]	; (800f0e8 <tcp_slowtmr+0x588>)
 800eef8:	fba1 1303 	umull	r1, r3, r1, r3
 800eefc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d911      	bls.n	800ef26 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800ef02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef04:	f005 f80e 	bl	8013f24 <tcp_keepalive>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800ef0e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d107      	bne.n	800ef26 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800ef16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef18:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	b2da      	uxtb	r2, r3
 800ef20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef22:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800ef26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d011      	beq.n	800ef52 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800ef2e:	4b6c      	ldr	r3, [pc, #432]	; (800f0e0 <tcp_slowtmr+0x580>)
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef34:	6a1b      	ldr	r3, [r3, #32]
 800ef36:	1ad2      	subs	r2, r2, r3
 800ef38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800ef3e:	4619      	mov	r1, r3
 800ef40:	460b      	mov	r3, r1
 800ef42:	005b      	lsls	r3, r3, #1
 800ef44:	440b      	add	r3, r1
 800ef46:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ef48:	429a      	cmp	r2, r3
 800ef4a:	d302      	bcc.n	800ef52 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800ef4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ef4e:	f000 fec9 	bl	800fce4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ef52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef54:	7d1b      	ldrb	r3, [r3, #20]
 800ef56:	2b03      	cmp	r3, #3
 800ef58:	d10b      	bne.n	800ef72 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ef5a:	4b61      	ldr	r3, [pc, #388]	; (800f0e0 <tcp_slowtmr+0x580>)
 800ef5c:	681a      	ldr	r2, [r3, #0]
 800ef5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef60:	6a1b      	ldr	r3, [r3, #32]
 800ef62:	1ad3      	subs	r3, r2, r3
 800ef64:	2b28      	cmp	r3, #40	; 0x28
 800ef66:	d904      	bls.n	800ef72 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ef68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef6c:	3301      	adds	r3, #1
 800ef6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ef72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef74:	7d1b      	ldrb	r3, [r3, #20]
 800ef76:	2b09      	cmp	r3, #9
 800ef78:	d10b      	bne.n	800ef92 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ef7a:	4b59      	ldr	r3, [pc, #356]	; (800f0e0 <tcp_slowtmr+0x580>)
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	1ad3      	subs	r3, r2, r3
 800ef84:	2bf0      	cmp	r3, #240	; 0xf0
 800ef86:	d904      	bls.n	800ef92 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800ef88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ef92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d060      	beq.n	800f05c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ef9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800efa0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800efa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800efa4:	f000 fcea 	bl	800f97c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800efa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d010      	beq.n	800efd0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800efae:	4b50      	ldr	r3, [pc, #320]	; (800f0f0 <tcp_slowtmr+0x590>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d106      	bne.n	800efc6 <tcp_slowtmr+0x466>
 800efb8:	4b4e      	ldr	r3, [pc, #312]	; (800f0f4 <tcp_slowtmr+0x594>)
 800efba:	f240 526d 	movw	r2, #1389	; 0x56d
 800efbe:	494e      	ldr	r1, [pc, #312]	; (800f0f8 <tcp_slowtmr+0x598>)
 800efc0:	484e      	ldr	r0, [pc, #312]	; (800f0fc <tcp_slowtmr+0x59c>)
 800efc2:	f00a fb03 	bl	80195cc <iprintf>
        prev->next = pcb->next;
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	68da      	ldr	r2, [r3, #12]
 800efca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efcc:	60da      	str	r2, [r3, #12]
 800efce:	e00f      	b.n	800eff0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800efd0:	4b47      	ldr	r3, [pc, #284]	; (800f0f0 <tcp_slowtmr+0x590>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d006      	beq.n	800efe8 <tcp_slowtmr+0x488>
 800efda:	4b46      	ldr	r3, [pc, #280]	; (800f0f4 <tcp_slowtmr+0x594>)
 800efdc:	f240 5271 	movw	r2, #1393	; 0x571
 800efe0:	4947      	ldr	r1, [pc, #284]	; (800f100 <tcp_slowtmr+0x5a0>)
 800efe2:	4846      	ldr	r0, [pc, #280]	; (800f0fc <tcp_slowtmr+0x59c>)
 800efe4:	f00a faf2 	bl	80195cc <iprintf>
        tcp_active_pcbs = pcb->next;
 800efe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efea:	68db      	ldr	r3, [r3, #12]
 800efec:	4a40      	ldr	r2, [pc, #256]	; (800f0f0 <tcp_slowtmr+0x590>)
 800efee:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800eff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d013      	beq.n	800f020 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800eff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800effc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800effe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f000:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f004:	3304      	adds	r3, #4
 800f006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f008:	8ad2      	ldrh	r2, [r2, #22]
 800f00a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f00c:	8b09      	ldrh	r1, [r1, #24]
 800f00e:	9102      	str	r1, [sp, #8]
 800f010:	9201      	str	r2, [sp, #4]
 800f012:	9300      	str	r3, [sp, #0]
 800f014:	462b      	mov	r3, r5
 800f016:	4622      	mov	r2, r4
 800f018:	4601      	mov	r1, r0
 800f01a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f01c:	f004 fece 	bl	8013dbc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f022:	691b      	ldr	r3, [r3, #16]
 800f024:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800f026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f028:	7d1b      	ldrb	r3, [r3, #20]
 800f02a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800f02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f02e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800f030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f036:	6838      	ldr	r0, [r7, #0]
 800f038:	f7ff f83a 	bl	800e0b0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800f03c:	4b31      	ldr	r3, [pc, #196]	; (800f104 <tcp_slowtmr+0x5a4>)
 800f03e:	2200      	movs	r2, #0
 800f040:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d004      	beq.n	800f052 <tcp_slowtmr+0x4f2>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f06f 010c 	mvn.w	r1, #12
 800f04e:	68b8      	ldr	r0, [r7, #8]
 800f050:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800f052:	4b2c      	ldr	r3, [pc, #176]	; (800f104 <tcp_slowtmr+0x5a4>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d037      	beq.n	800f0ca <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800f05a:	e592      	b.n	800eb82 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800f05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f05e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f062:	68db      	ldr	r3, [r3, #12]
 800f064:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800f066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f068:	7f1b      	ldrb	r3, [r3, #28]
 800f06a:	3301      	adds	r3, #1
 800f06c:	b2da      	uxtb	r2, r3
 800f06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f070:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800f072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f074:	7f1a      	ldrb	r2, [r3, #28]
 800f076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f078:	7f5b      	ldrb	r3, [r3, #29]
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d325      	bcc.n	800f0ca <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800f07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f080:	2200      	movs	r2, #0
 800f082:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800f084:	4b1f      	ldr	r3, [pc, #124]	; (800f104 <tcp_slowtmr+0x5a4>)
 800f086:	2200      	movs	r2, #0
 800f088:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800f08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f08c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00b      	beq.n	800f0ac <tcp_slowtmr+0x54c>
 800f094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f09a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f09c:	6912      	ldr	r2, [r2, #16]
 800f09e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0a0:	4610      	mov	r0, r2
 800f0a2:	4798      	blx	r3
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f0aa:	e002      	b.n	800f0b2 <tcp_slowtmr+0x552>
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800f0b2:	4b14      	ldr	r3, [pc, #80]	; (800f104 <tcp_slowtmr+0x5a4>)
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d000      	beq.n	800f0bc <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800f0ba:	e562      	b.n	800eb82 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800f0bc:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d102      	bne.n	800f0ca <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800f0c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f0c6:	f004 f8c5 	bl	8013254 <tcp_output>
  while (pcb != NULL) {
 800f0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	f47f ad5e 	bne.w	800eb8e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800f0d6:	4b0c      	ldr	r3, [pc, #48]	; (800f108 <tcp_slowtmr+0x5a8>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f0dc:	e069      	b.n	800f1b2 <tcp_slowtmr+0x652>
 800f0de:	bf00      	nop
 800f0e0:	2000cf24 	.word	0x2000cf24
 800f0e4:	000a4cb8 	.word	0x000a4cb8
 800f0e8:	10624dd3 	.word	0x10624dd3
 800f0ec:	000124f8 	.word	0x000124f8
 800f0f0:	2000cf30 	.word	0x2000cf30
 800f0f4:	0801b414 	.word	0x0801b414
 800f0f8:	0801b84c 	.word	0x0801b84c
 800f0fc:	0801b458 	.word	0x0801b458
 800f100:	0801b878 	.word	0x0801b878
 800f104:	2000cf38 	.word	0x2000cf38
 800f108:	2000cf34 	.word	0x2000cf34
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10e:	7d1b      	ldrb	r3, [r3, #20]
 800f110:	2b0a      	cmp	r3, #10
 800f112:	d006      	beq.n	800f122 <tcp_slowtmr+0x5c2>
 800f114:	4b2b      	ldr	r3, [pc, #172]	; (800f1c4 <tcp_slowtmr+0x664>)
 800f116:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800f11a:	492b      	ldr	r1, [pc, #172]	; (800f1c8 <tcp_slowtmr+0x668>)
 800f11c:	482b      	ldr	r0, [pc, #172]	; (800f1cc <tcp_slowtmr+0x66c>)
 800f11e:	f00a fa55 	bl	80195cc <iprintf>
    pcb_remove = 0;
 800f122:	2300      	movs	r3, #0
 800f124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800f128:	4b29      	ldr	r3, [pc, #164]	; (800f1d0 <tcp_slowtmr+0x670>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	6a1b      	ldr	r3, [r3, #32]
 800f130:	1ad3      	subs	r3, r2, r3
 800f132:	2bf0      	cmp	r3, #240	; 0xf0
 800f134:	d904      	bls.n	800f140 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800f136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f13a:	3301      	adds	r3, #1
 800f13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800f140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f144:	2b00      	cmp	r3, #0
 800f146:	d02f      	beq.n	800f1a8 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800f148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f14a:	f000 fc17 	bl	800f97c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f150:	2b00      	cmp	r3, #0
 800f152:	d010      	beq.n	800f176 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800f154:	4b1f      	ldr	r3, [pc, #124]	; (800f1d4 <tcp_slowtmr+0x674>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f15a:	429a      	cmp	r2, r3
 800f15c:	d106      	bne.n	800f16c <tcp_slowtmr+0x60c>
 800f15e:	4b19      	ldr	r3, [pc, #100]	; (800f1c4 <tcp_slowtmr+0x664>)
 800f160:	f240 52af 	movw	r2, #1455	; 0x5af
 800f164:	491c      	ldr	r1, [pc, #112]	; (800f1d8 <tcp_slowtmr+0x678>)
 800f166:	4819      	ldr	r0, [pc, #100]	; (800f1cc <tcp_slowtmr+0x66c>)
 800f168:	f00a fa30 	bl	80195cc <iprintf>
        prev->next = pcb->next;
 800f16c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f16e:	68da      	ldr	r2, [r3, #12]
 800f170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f172:	60da      	str	r2, [r3, #12]
 800f174:	e00f      	b.n	800f196 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800f176:	4b17      	ldr	r3, [pc, #92]	; (800f1d4 <tcp_slowtmr+0x674>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f17c:	429a      	cmp	r2, r3
 800f17e:	d006      	beq.n	800f18e <tcp_slowtmr+0x62e>
 800f180:	4b10      	ldr	r3, [pc, #64]	; (800f1c4 <tcp_slowtmr+0x664>)
 800f182:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800f186:	4915      	ldr	r1, [pc, #84]	; (800f1dc <tcp_slowtmr+0x67c>)
 800f188:	4810      	ldr	r0, [pc, #64]	; (800f1cc <tcp_slowtmr+0x66c>)
 800f18a:	f00a fa1f 	bl	80195cc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800f18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	4a10      	ldr	r2, [pc, #64]	; (800f1d4 <tcp_slowtmr+0x674>)
 800f194:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800f196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f198:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800f19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800f1a0:	69f8      	ldr	r0, [r7, #28]
 800f1a2:	f7fe ff85 	bl	800e0b0 <tcp_free>
 800f1a6:	e004      	b.n	800f1b2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800f1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800f1ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800f1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1a9      	bne.n	800f10c <tcp_slowtmr+0x5ac>
    }
  }
}
 800f1b8:	bf00      	nop
 800f1ba:	bf00      	nop
 800f1bc:	3730      	adds	r7, #48	; 0x30
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bdb0      	pop	{r4, r5, r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	0801b414 	.word	0x0801b414
 800f1c8:	0801b8a4 	.word	0x0801b8a4
 800f1cc:	0801b458 	.word	0x0801b458
 800f1d0:	2000cf24 	.word	0x2000cf24
 800f1d4:	2000cf34 	.word	0x2000cf34
 800f1d8:	0801b8d4 	.word	0x0801b8d4
 800f1dc:	0801b8fc 	.word	0x0801b8fc

0800f1e0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800f1e6:	4b2d      	ldr	r3, [pc, #180]	; (800f29c <tcp_fasttmr+0xbc>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	b2da      	uxtb	r2, r3
 800f1ee:	4b2b      	ldr	r3, [pc, #172]	; (800f29c <tcp_fasttmr+0xbc>)
 800f1f0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800f1f2:	4b2b      	ldr	r3, [pc, #172]	; (800f2a0 <tcp_fasttmr+0xc0>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f1f8:	e048      	b.n	800f28c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	7f9a      	ldrb	r2, [r3, #30]
 800f1fe:	4b27      	ldr	r3, [pc, #156]	; (800f29c <tcp_fasttmr+0xbc>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	429a      	cmp	r2, r3
 800f204:	d03f      	beq.n	800f286 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800f206:	4b25      	ldr	r3, [pc, #148]	; (800f29c <tcp_fasttmr+0xbc>)
 800f208:	781a      	ldrb	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	8b5b      	ldrh	r3, [r3, #26]
 800f212:	f003 0301 	and.w	r3, r3, #1
 800f216:	2b00      	cmp	r3, #0
 800f218:	d010      	beq.n	800f23c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	8b5b      	ldrh	r3, [r3, #26]
 800f21e:	f043 0302 	orr.w	r3, r3, #2
 800f222:	b29a      	uxth	r2, r3
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	f004 f813 	bl	8013254 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	8b5b      	ldrh	r3, [r3, #26]
 800f232:	f023 0303 	bic.w	r3, r3, #3
 800f236:	b29a      	uxth	r2, r3
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	8b5b      	ldrh	r3, [r3, #26]
 800f240:	f003 0308 	and.w	r3, r3, #8
 800f244:	2b00      	cmp	r3, #0
 800f246:	d009      	beq.n	800f25c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	8b5b      	ldrh	r3, [r3, #26]
 800f24c:	f023 0308 	bic.w	r3, r3, #8
 800f250:	b29a      	uxth	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f7ff f8be 	bl	800e3d8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	68db      	ldr	r3, [r3, #12]
 800f260:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f266:	2b00      	cmp	r3, #0
 800f268:	d00a      	beq.n	800f280 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800f26a:	4b0e      	ldr	r3, [pc, #56]	; (800f2a4 <tcp_fasttmr+0xc4>)
 800f26c:	2200      	movs	r2, #0
 800f26e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f000 f819 	bl	800f2a8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800f276:	4b0b      	ldr	r3, [pc, #44]	; (800f2a4 <tcp_fasttmr+0xc4>)
 800f278:	781b      	ldrb	r3, [r3, #0]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d000      	beq.n	800f280 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800f27e:	e7b8      	b.n	800f1f2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	607b      	str	r3, [r7, #4]
 800f284:	e002      	b.n	800f28c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1b3      	bne.n	800f1fa <tcp_fasttmr+0x1a>
    }
  }
}
 800f292:	bf00      	nop
 800f294:	bf00      	nop
 800f296:	3708      	adds	r7, #8
 800f298:	46bd      	mov	sp, r7
 800f29a:	bd80      	pop	{r7, pc}
 800f29c:	2000cf3a 	.word	0x2000cf3a
 800f2a0:	2000cf30 	.word	0x2000cf30
 800f2a4:	2000cf38 	.word	0x2000cf38

0800f2a8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800f2a8:	b590      	push	{r4, r7, lr}
 800f2aa:	b085      	sub	sp, #20
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d109      	bne.n	800f2ca <tcp_process_refused_data+0x22>
 800f2b6:	4b37      	ldr	r3, [pc, #220]	; (800f394 <tcp_process_refused_data+0xec>)
 800f2b8:	f240 6209 	movw	r2, #1545	; 0x609
 800f2bc:	4936      	ldr	r1, [pc, #216]	; (800f398 <tcp_process_refused_data+0xf0>)
 800f2be:	4837      	ldr	r0, [pc, #220]	; (800f39c <tcp_process_refused_data+0xf4>)
 800f2c0:	f00a f984 	bl	80195cc <iprintf>
 800f2c4:	f06f 030f 	mvn.w	r3, #15
 800f2c8:	e060      	b.n	800f38c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2ce:	7b5b      	ldrb	r3, [r3, #13]
 800f2d0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f2d6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2200      	movs	r2, #0
 800f2dc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00b      	beq.n	800f300 <tcp_process_refused_data+0x58>
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	6918      	ldr	r0, [r3, #16]
 800f2f2:	2300      	movs	r3, #0
 800f2f4:	68ba      	ldr	r2, [r7, #8]
 800f2f6:	6879      	ldr	r1, [r7, #4]
 800f2f8:	47a0      	blx	r4
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	73fb      	strb	r3, [r7, #15]
 800f2fe:	e007      	b.n	800f310 <tcp_process_refused_data+0x68>
 800f300:	2300      	movs	r3, #0
 800f302:	68ba      	ldr	r2, [r7, #8]
 800f304:	6879      	ldr	r1, [r7, #4]
 800f306:	2000      	movs	r0, #0
 800f308:	f000 f8c2 	bl	800f490 <tcp_recv_null>
 800f30c:	4603      	mov	r3, r0
 800f30e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800f310:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d12a      	bne.n	800f36e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800f318:	7bbb      	ldrb	r3, [r7, #14]
 800f31a:	f003 0320 	and.w	r3, r3, #32
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d033      	beq.n	800f38a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f326:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f32a:	d005      	beq.n	800f338 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f330:	3301      	adds	r3, #1
 800f332:	b29a      	uxth	r2, r3
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d00b      	beq.n	800f35a <tcp_process_refused_data+0xb2>
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	6918      	ldr	r0, [r3, #16]
 800f34c:	2300      	movs	r3, #0
 800f34e:	2200      	movs	r2, #0
 800f350:	6879      	ldr	r1, [r7, #4]
 800f352:	47a0      	blx	r4
 800f354:	4603      	mov	r3, r0
 800f356:	73fb      	strb	r3, [r7, #15]
 800f358:	e001      	b.n	800f35e <tcp_process_refused_data+0xb6>
 800f35a:	2300      	movs	r3, #0
 800f35c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800f35e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f362:	f113 0f0d 	cmn.w	r3, #13
 800f366:	d110      	bne.n	800f38a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800f368:	f06f 030c 	mvn.w	r3, #12
 800f36c:	e00e      	b.n	800f38c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800f36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f372:	f113 0f0d 	cmn.w	r3, #13
 800f376:	d102      	bne.n	800f37e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800f378:	f06f 030c 	mvn.w	r3, #12
 800f37c:	e006      	b.n	800f38c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	68ba      	ldr	r2, [r7, #8]
 800f382:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800f384:	f06f 0304 	mvn.w	r3, #4
 800f388:	e000      	b.n	800f38c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800f38a:	2300      	movs	r3, #0
}
 800f38c:	4618      	mov	r0, r3
 800f38e:	3714      	adds	r7, #20
 800f390:	46bd      	mov	sp, r7
 800f392:	bd90      	pop	{r4, r7, pc}
 800f394:	0801b414 	.word	0x0801b414
 800f398:	0801b924 	.word	0x0801b924
 800f39c:	0801b458 	.word	0x0801b458

0800f3a0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b084      	sub	sp, #16
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800f3a8:	e007      	b.n	800f3ba <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f000 f80a 	bl	800f3ca <tcp_seg_free>
    seg = next;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d1f4      	bne.n	800f3aa <tcp_segs_free+0xa>
  }
}
 800f3c0:	bf00      	nop
 800f3c2:	bf00      	nop
 800f3c4:	3710      	adds	r7, #16
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b082      	sub	sp, #8
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d00c      	beq.n	800f3f2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	685b      	ldr	r3, [r3, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d004      	beq.n	800f3ea <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fe fba7 	bl	800db38 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800f3ea:	6879      	ldr	r1, [r7, #4]
 800f3ec:	2003      	movs	r0, #3
 800f3ee:	f7fd fcf3 	bl	800cdd8 <memp_free>
  }
}
 800f3f2:	bf00      	nop
 800f3f4:	3708      	adds	r7, #8
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
	...

0800f3fc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d107      	bne.n	800f41e <tcp_setprio+0x22>
 800f40e:	4b07      	ldr	r3, [pc, #28]	; (800f42c <tcp_setprio+0x30>)
 800f410:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800f414:	4906      	ldr	r1, [pc, #24]	; (800f430 <tcp_setprio+0x34>)
 800f416:	4807      	ldr	r0, [pc, #28]	; (800f434 <tcp_setprio+0x38>)
 800f418:	f00a f8d8 	bl	80195cc <iprintf>
 800f41c:	e002      	b.n	800f424 <tcp_setprio+0x28>

  pcb->prio = prio;
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	78fa      	ldrb	r2, [r7, #3]
 800f422:	755a      	strb	r2, [r3, #21]
}
 800f424:	3708      	adds	r7, #8
 800f426:	46bd      	mov	sp, r7
 800f428:	bd80      	pop	{r7, pc}
 800f42a:	bf00      	nop
 800f42c:	0801b414 	.word	0x0801b414
 800f430:	0801b94c 	.word	0x0801b94c
 800f434:	0801b458 	.word	0x0801b458

0800f438 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b084      	sub	sp, #16
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d106      	bne.n	800f454 <tcp_seg_copy+0x1c>
 800f446:	4b0f      	ldr	r3, [pc, #60]	; (800f484 <tcp_seg_copy+0x4c>)
 800f448:	f240 6282 	movw	r2, #1666	; 0x682
 800f44c:	490e      	ldr	r1, [pc, #56]	; (800f488 <tcp_seg_copy+0x50>)
 800f44e:	480f      	ldr	r0, [pc, #60]	; (800f48c <tcp_seg_copy+0x54>)
 800f450:	f00a f8bc 	bl	80195cc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800f454:	2003      	movs	r0, #3
 800f456:	f7fd fc49 	bl	800ccec <memp_malloc>
 800f45a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d101      	bne.n	800f466 <tcp_seg_copy+0x2e>
    return NULL;
 800f462:	2300      	movs	r3, #0
 800f464:	e00a      	b.n	800f47c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800f466:	2210      	movs	r2, #16
 800f468:	6879      	ldr	r1, [r7, #4]
 800f46a:	68f8      	ldr	r0, [r7, #12]
 800f46c:	f00a f9ac 	bl	80197c8 <memcpy>
  pbuf_ref(cseg->p);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	685b      	ldr	r3, [r3, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	f7fe fc05 	bl	800dc84 <pbuf_ref>
  return cseg;
 800f47a:	68fb      	ldr	r3, [r7, #12]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3710      	adds	r7, #16
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	0801b414 	.word	0x0801b414
 800f488:	0801b968 	.word	0x0801b968
 800f48c:	0801b458 	.word	0x0801b458

0800f490 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	607a      	str	r2, [r7, #4]
 800f49c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800f49e:	68bb      	ldr	r3, [r7, #8]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d109      	bne.n	800f4b8 <tcp_recv_null+0x28>
 800f4a4:	4b12      	ldr	r3, [pc, #72]	; (800f4f0 <tcp_recv_null+0x60>)
 800f4a6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f4aa:	4912      	ldr	r1, [pc, #72]	; (800f4f4 <tcp_recv_null+0x64>)
 800f4ac:	4812      	ldr	r0, [pc, #72]	; (800f4f8 <tcp_recv_null+0x68>)
 800f4ae:	f00a f88d 	bl	80195cc <iprintf>
 800f4b2:	f06f 030f 	mvn.w	r3, #15
 800f4b6:	e016      	b.n	800f4e6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d009      	beq.n	800f4d2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	891b      	ldrh	r3, [r3, #8]
 800f4c2:	4619      	mov	r1, r3
 800f4c4:	68b8      	ldr	r0, [r7, #8]
 800f4c6:	f7ff fab5 	bl	800ea34 <tcp_recved>
    pbuf_free(p);
 800f4ca:	6878      	ldr	r0, [r7, #4]
 800f4cc:	f7fe fb34 	bl	800db38 <pbuf_free>
 800f4d0:	e008      	b.n	800f4e4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800f4d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d104      	bne.n	800f4e4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800f4da:	68b8      	ldr	r0, [r7, #8]
 800f4dc:	f7fe ffe6 	bl	800e4ac <tcp_close>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	e000      	b.n	800f4e6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800f4e4:	2300      	movs	r3, #0
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3710      	adds	r7, #16
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	bd80      	pop	{r7, pc}
 800f4ee:	bf00      	nop
 800f4f0:	0801b414 	.word	0x0801b414
 800f4f4:	0801b984 	.word	0x0801b984
 800f4f8:	0801b458 	.word	0x0801b458

0800f4fc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b086      	sub	sp, #24
 800f500:	af00      	add	r7, sp, #0
 800f502:	4603      	mov	r3, r0
 800f504:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800f506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	db01      	blt.n	800f512 <tcp_kill_prio+0x16>
 800f50e:	79fb      	ldrb	r3, [r7, #7]
 800f510:	e000      	b.n	800f514 <tcp_kill_prio+0x18>
 800f512:	237f      	movs	r3, #127	; 0x7f
 800f514:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800f516:	7afb      	ldrb	r3, [r7, #11]
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d034      	beq.n	800f586 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800f51c:	7afb      	ldrb	r3, [r7, #11]
 800f51e:	3b01      	subs	r3, #1
 800f520:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f526:	2300      	movs	r3, #0
 800f528:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f52a:	4b19      	ldr	r3, [pc, #100]	; (800f590 <tcp_kill_prio+0x94>)
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	617b      	str	r3, [r7, #20]
 800f530:	e01f      	b.n	800f572 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800f532:	697b      	ldr	r3, [r7, #20]
 800f534:	7d5b      	ldrb	r3, [r3, #21]
 800f536:	7afa      	ldrb	r2, [r7, #11]
 800f538:	429a      	cmp	r2, r3
 800f53a:	d80c      	bhi.n	800f556 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800f540:	7afa      	ldrb	r2, [r7, #11]
 800f542:	429a      	cmp	r2, r3
 800f544:	d112      	bne.n	800f56c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800f546:	4b13      	ldr	r3, [pc, #76]	; (800f594 <tcp_kill_prio+0x98>)
 800f548:	681a      	ldr	r2, [r3, #0]
 800f54a:	697b      	ldr	r3, [r7, #20]
 800f54c:	6a1b      	ldr	r3, [r3, #32]
 800f54e:	1ad3      	subs	r3, r2, r3
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	429a      	cmp	r2, r3
 800f554:	d80a      	bhi.n	800f56c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800f556:	4b0f      	ldr	r3, [pc, #60]	; (800f594 <tcp_kill_prio+0x98>)
 800f558:	681a      	ldr	r2, [r3, #0]
 800f55a:	697b      	ldr	r3, [r7, #20]
 800f55c:	6a1b      	ldr	r3, [r3, #32]
 800f55e:	1ad3      	subs	r3, r2, r3
 800f560:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800f562:	697b      	ldr	r3, [r7, #20]
 800f564:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800f566:	697b      	ldr	r3, [r7, #20]
 800f568:	7d5b      	ldrb	r3, [r3, #21]
 800f56a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	617b      	str	r3, [r7, #20]
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d1dc      	bne.n	800f532 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d004      	beq.n	800f588 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f57e:	6938      	ldr	r0, [r7, #16]
 800f580:	f7ff f87e 	bl	800e680 <tcp_abort>
 800f584:	e000      	b.n	800f588 <tcp_kill_prio+0x8c>
    return;
 800f586:	bf00      	nop
  }
}
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	2000cf30 	.word	0x2000cf30
 800f594:	2000cf24 	.word	0x2000cf24

0800f598 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b086      	sub	sp, #24
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	4603      	mov	r3, r0
 800f5a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800f5a2:	79fb      	ldrb	r3, [r7, #7]
 800f5a4:	2b08      	cmp	r3, #8
 800f5a6:	d009      	beq.n	800f5bc <tcp_kill_state+0x24>
 800f5a8:	79fb      	ldrb	r3, [r7, #7]
 800f5aa:	2b09      	cmp	r3, #9
 800f5ac:	d006      	beq.n	800f5bc <tcp_kill_state+0x24>
 800f5ae:	4b1a      	ldr	r3, [pc, #104]	; (800f618 <tcp_kill_state+0x80>)
 800f5b0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800f5b4:	4919      	ldr	r1, [pc, #100]	; (800f61c <tcp_kill_state+0x84>)
 800f5b6:	481a      	ldr	r0, [pc, #104]	; (800f620 <tcp_kill_state+0x88>)
 800f5b8:	f00a f808 	bl	80195cc <iprintf>

  inactivity = 0;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5c4:	4b17      	ldr	r3, [pc, #92]	; (800f624 <tcp_kill_state+0x8c>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	617b      	str	r3, [r7, #20]
 800f5ca:	e017      	b.n	800f5fc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	7d1b      	ldrb	r3, [r3, #20]
 800f5d0:	79fa      	ldrb	r2, [r7, #7]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d10f      	bne.n	800f5f6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f5d6:	4b14      	ldr	r3, [pc, #80]	; (800f628 <tcp_kill_state+0x90>)
 800f5d8:	681a      	ldr	r2, [r3, #0]
 800f5da:	697b      	ldr	r3, [r7, #20]
 800f5dc:	6a1b      	ldr	r3, [r3, #32]
 800f5de:	1ad3      	subs	r3, r2, r3
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	429a      	cmp	r2, r3
 800f5e4:	d807      	bhi.n	800f5f6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800f5e6:	4b10      	ldr	r3, [pc, #64]	; (800f628 <tcp_kill_state+0x90>)
 800f5e8:	681a      	ldr	r2, [r3, #0]
 800f5ea:	697b      	ldr	r3, [r7, #20]
 800f5ec:	6a1b      	ldr	r3, [r3, #32]
 800f5ee:	1ad3      	subs	r3, r2, r3
 800f5f0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800f5f2:	697b      	ldr	r3, [r7, #20]
 800f5f4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5f6:	697b      	ldr	r3, [r7, #20]
 800f5f8:	68db      	ldr	r3, [r3, #12]
 800f5fa:	617b      	str	r3, [r7, #20]
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d1e4      	bne.n	800f5cc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800f602:	693b      	ldr	r3, [r7, #16]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d003      	beq.n	800f610 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800f608:	2100      	movs	r1, #0
 800f60a:	6938      	ldr	r0, [r7, #16]
 800f60c:	f7fe ff7a 	bl	800e504 <tcp_abandon>
  }
}
 800f610:	bf00      	nop
 800f612:	3718      	adds	r7, #24
 800f614:	46bd      	mov	sp, r7
 800f616:	bd80      	pop	{r7, pc}
 800f618:	0801b414 	.word	0x0801b414
 800f61c:	0801b9a0 	.word	0x0801b9a0
 800f620:	0801b458 	.word	0x0801b458
 800f624:	2000cf30 	.word	0x2000cf30
 800f628:	2000cf24 	.word	0x2000cf24

0800f62c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b084      	sub	sp, #16
 800f630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f632:	2300      	movs	r3, #0
 800f634:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f63a:	4b12      	ldr	r3, [pc, #72]	; (800f684 <tcp_kill_timewait+0x58>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	60fb      	str	r3, [r7, #12]
 800f640:	e012      	b.n	800f668 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f642:	4b11      	ldr	r3, [pc, #68]	; (800f688 <tcp_kill_timewait+0x5c>)
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	6a1b      	ldr	r3, [r3, #32]
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	429a      	cmp	r2, r3
 800f650:	d807      	bhi.n	800f662 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f652:	4b0d      	ldr	r3, [pc, #52]	; (800f688 <tcp_kill_timewait+0x5c>)
 800f654:	681a      	ldr	r2, [r3, #0]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	1ad3      	subs	r3, r2, r3
 800f65c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	68db      	ldr	r3, [r3, #12]
 800f666:	60fb      	str	r3, [r7, #12]
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e9      	bne.n	800f642 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f66e:	68bb      	ldr	r3, [r7, #8]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d002      	beq.n	800f67a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f674:	68b8      	ldr	r0, [r7, #8]
 800f676:	f7ff f803 	bl	800e680 <tcp_abort>
  }
}
 800f67a:	bf00      	nop
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bd80      	pop	{r7, pc}
 800f682:	bf00      	nop
 800f684:	2000cf34 	.word	0x2000cf34
 800f688:	2000cf24 	.word	0x2000cf24

0800f68c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f692:	4b10      	ldr	r3, [pc, #64]	; (800f6d4 <tcp_handle_closepend+0x48>)
 800f694:	681b      	ldr	r3, [r3, #0]
 800f696:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f698:	e014      	b.n	800f6c4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68db      	ldr	r3, [r3, #12]
 800f69e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	8b5b      	ldrh	r3, [r3, #26]
 800f6a4:	f003 0308 	and.w	r3, r3, #8
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d009      	beq.n	800f6c0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8b5b      	ldrh	r3, [r3, #26]
 800f6b0:	f023 0308 	bic.w	r3, r3, #8
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7fe fe8c 	bl	800e3d8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d1e7      	bne.n	800f69a <tcp_handle_closepend+0xe>
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	2000cf30 	.word	0x2000cf30

0800f6d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b084      	sub	sp, #16
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	4603      	mov	r3, r0
 800f6e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f6e2:	2001      	movs	r0, #1
 800f6e4:	f7fd fb02 	bl	800ccec <memp_malloc>
 800f6e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d126      	bne.n	800f73e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f6f0:	f7ff ffcc 	bl	800f68c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f6f4:	f7ff ff9a 	bl	800f62c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f6f8:	2001      	movs	r0, #1
 800f6fa:	f7fd faf7 	bl	800ccec <memp_malloc>
 800f6fe:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d11b      	bne.n	800f73e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f706:	2009      	movs	r0, #9
 800f708:	f7ff ff46 	bl	800f598 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f70c:	2001      	movs	r0, #1
 800f70e:	f7fd faed 	bl	800ccec <memp_malloc>
 800f712:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d111      	bne.n	800f73e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f71a:	2008      	movs	r0, #8
 800f71c:	f7ff ff3c 	bl	800f598 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f720:	2001      	movs	r0, #1
 800f722:	f7fd fae3 	bl	800ccec <memp_malloc>
 800f726:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d107      	bne.n	800f73e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f72e:	79fb      	ldrb	r3, [r7, #7]
 800f730:	4618      	mov	r0, r3
 800f732:	f7ff fee3 	bl	800f4fc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f736:	2001      	movs	r0, #1
 800f738:	f7fd fad8 	bl	800ccec <memp_malloc>
 800f73c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d03f      	beq.n	800f7c4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f744:	229c      	movs	r2, #156	; 0x9c
 800f746:	2100      	movs	r1, #0
 800f748:	68f8      	ldr	r0, [r7, #12]
 800f74a:	f009 ffa4 	bl	8019696 <memset>
    pcb->prio = prio;
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	79fa      	ldrb	r2, [r7, #7]
 800f752:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f75a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f75e:	68fb      	ldr	r3, [r7, #12]
 800f760:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f764:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	22ff      	movs	r2, #255	; 0xff
 800f772:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f77a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2206      	movs	r2, #6
 800f780:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2206      	movs	r2, #6
 800f788:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f790:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	2201      	movs	r2, #1
 800f796:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f79a:	4b0d      	ldr	r3, [pc, #52]	; (800f7d0 <tcp_alloc+0xf8>)
 800f79c:	681a      	ldr	r2, [r3, #0]
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f7a2:	4b0c      	ldr	r3, [pc, #48]	; (800f7d4 <tcp_alloc+0xfc>)
 800f7a4:	781a      	ldrb	r2, [r3, #0]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f7b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	4a08      	ldr	r2, [pc, #32]	; (800f7d8 <tcp_alloc+0x100>)
 800f7b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	4a07      	ldr	r2, [pc, #28]	; (800f7dc <tcp_alloc+0x104>)
 800f7c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f7c4:	68fb      	ldr	r3, [r7, #12]
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3710      	adds	r7, #16
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	2000cf24 	.word	0x2000cf24
 800f7d4:	2000cf3a 	.word	0x2000cf3a
 800f7d8:	0800f491 	.word	0x0800f491
 800f7dc:	006ddd00 	.word	0x006ddd00

0800f7e0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b084      	sub	sp, #16
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f7ea:	2040      	movs	r0, #64	; 0x40
 800f7ec:	f7ff ff74 	bl	800f6d8 <tcp_alloc>
 800f7f0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3710      	adds	r7, #16
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
 800f804:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d002      	beq.n	800f812 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	611a      	str	r2, [r3, #16]
  }
}
 800f812:	bf00      	nop
 800f814:	370c      	adds	r7, #12
 800f816:	46bd      	mov	sp, r7
 800f818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81c:	4770      	bx	lr
	...

0800f820 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00e      	beq.n	800f84e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	7d1b      	ldrb	r3, [r3, #20]
 800f834:	2b01      	cmp	r3, #1
 800f836:	d106      	bne.n	800f846 <tcp_recv+0x26>
 800f838:	4b07      	ldr	r3, [pc, #28]	; (800f858 <tcp_recv+0x38>)
 800f83a:	f240 72df 	movw	r2, #2015	; 0x7df
 800f83e:	4907      	ldr	r1, [pc, #28]	; (800f85c <tcp_recv+0x3c>)
 800f840:	4807      	ldr	r0, [pc, #28]	; (800f860 <tcp_recv+0x40>)
 800f842:	f009 fec3 	bl	80195cc <iprintf>
    pcb->recv = recv;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	683a      	ldr	r2, [r7, #0]
 800f84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f84e:	bf00      	nop
 800f850:	3708      	adds	r7, #8
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	0801b414 	.word	0x0801b414
 800f85c:	0801b9b0 	.word	0x0801b9b0
 800f860:	0801b458 	.word	0x0801b458

0800f864 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d00e      	beq.n	800f892 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	7d1b      	ldrb	r3, [r3, #20]
 800f878:	2b01      	cmp	r3, #1
 800f87a:	d106      	bne.n	800f88a <tcp_sent+0x26>
 800f87c:	4b07      	ldr	r3, [pc, #28]	; (800f89c <tcp_sent+0x38>)
 800f87e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f882:	4907      	ldr	r1, [pc, #28]	; (800f8a0 <tcp_sent+0x3c>)
 800f884:	4807      	ldr	r0, [pc, #28]	; (800f8a4 <tcp_sent+0x40>)
 800f886:	f009 fea1 	bl	80195cc <iprintf>
    pcb->sent = sent;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	683a      	ldr	r2, [r7, #0]
 800f88e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f892:	bf00      	nop
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop
 800f89c:	0801b414 	.word	0x0801b414
 800f8a0:	0801b9d8 	.word	0x0801b9d8
 800f8a4:	0801b458 	.word	0x0801b458

0800f8a8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b082      	sub	sp, #8
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
 800f8b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d00e      	beq.n	800f8d6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	7d1b      	ldrb	r3, [r3, #20]
 800f8bc:	2b01      	cmp	r3, #1
 800f8be:	d106      	bne.n	800f8ce <tcp_err+0x26>
 800f8c0:	4b07      	ldr	r3, [pc, #28]	; (800f8e0 <tcp_err+0x38>)
 800f8c2:	f640 020d 	movw	r2, #2061	; 0x80d
 800f8c6:	4907      	ldr	r1, [pc, #28]	; (800f8e4 <tcp_err+0x3c>)
 800f8c8:	4807      	ldr	r0, [pc, #28]	; (800f8e8 <tcp_err+0x40>)
 800f8ca:	f009 fe7f 	bl	80195cc <iprintf>
    pcb->errf = err;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f8d6:	bf00      	nop
 800f8d8:	3708      	adds	r7, #8
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	0801b414 	.word	0x0801b414
 800f8e4:	0801ba00 	.word	0x0801ba00
 800f8e8:	0801b458 	.word	0x0801b458

0800f8ec <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f8ec:	b480      	push	{r7}
 800f8ee:	b085      	sub	sp, #20
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
 800f8f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d008      	beq.n	800f90e <tcp_accept+0x22>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	7d1b      	ldrb	r3, [r3, #20]
 800f900:	2b01      	cmp	r3, #1
 800f902:	d104      	bne.n	800f90e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	683a      	ldr	r2, [r7, #0]
 800f90c:	619a      	str	r2, [r3, #24]
  }
}
 800f90e:	bf00      	nop
 800f910:	3714      	adds	r7, #20
 800f912:	46bd      	mov	sp, r7
 800f914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f918:	4770      	bx	lr
	...

0800f91c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b084      	sub	sp, #16
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	4613      	mov	r3, r2
 800f928:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d107      	bne.n	800f940 <tcp_poll+0x24>
 800f930:	4b0e      	ldr	r3, [pc, #56]	; (800f96c <tcp_poll+0x50>)
 800f932:	f640 023d 	movw	r2, #2109	; 0x83d
 800f936:	490e      	ldr	r1, [pc, #56]	; (800f970 <tcp_poll+0x54>)
 800f938:	480e      	ldr	r0, [pc, #56]	; (800f974 <tcp_poll+0x58>)
 800f93a:	f009 fe47 	bl	80195cc <iprintf>
 800f93e:	e011      	b.n	800f964 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	7d1b      	ldrb	r3, [r3, #20]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d106      	bne.n	800f956 <tcp_poll+0x3a>
 800f948:	4b08      	ldr	r3, [pc, #32]	; (800f96c <tcp_poll+0x50>)
 800f94a:	f640 023e 	movw	r2, #2110	; 0x83e
 800f94e:	490a      	ldr	r1, [pc, #40]	; (800f978 <tcp_poll+0x5c>)
 800f950:	4808      	ldr	r0, [pc, #32]	; (800f974 <tcp_poll+0x58>)
 800f952:	f009 fe3b 	bl	80195cc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	68ba      	ldr	r2, [r7, #8]
 800f95a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	79fa      	ldrb	r2, [r7, #7]
 800f962:	775a      	strb	r2, [r3, #29]
}
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop
 800f96c:	0801b414 	.word	0x0801b414
 800f970:	0801ba28 	.word	0x0801ba28
 800f974:	0801b458 	.word	0x0801b458
 800f978:	0801ba40 	.word	0x0801ba40

0800f97c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b082      	sub	sp, #8
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d107      	bne.n	800f99a <tcp_pcb_purge+0x1e>
 800f98a:	4b21      	ldr	r3, [pc, #132]	; (800fa10 <tcp_pcb_purge+0x94>)
 800f98c:	f640 0251 	movw	r2, #2129	; 0x851
 800f990:	4920      	ldr	r1, [pc, #128]	; (800fa14 <tcp_pcb_purge+0x98>)
 800f992:	4821      	ldr	r0, [pc, #132]	; (800fa18 <tcp_pcb_purge+0x9c>)
 800f994:	f009 fe1a 	bl	80195cc <iprintf>
 800f998:	e037      	b.n	800fa0a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	7d1b      	ldrb	r3, [r3, #20]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d033      	beq.n	800fa0a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f9a6:	2b0a      	cmp	r3, #10
 800f9a8:	d02f      	beq.n	800fa0a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d02b      	beq.n	800fa0a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d007      	beq.n	800f9ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f7fe f8ba 	bl	800db38 <pbuf_free>
      pcb->refused_data = NULL;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d002      	beq.n	800f9d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f986 	bl	800fce4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f9de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7ff fcdb 	bl	800f3a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7ff fcd6 	bl	800f3a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2200      	movs	r2, #0
 800fa06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}
 800fa10:	0801b414 	.word	0x0801b414
 800fa14:	0801ba60 	.word	0x0801ba60
 800fa18:	0801b458 	.word	0x0801b458

0800fa1c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b084      	sub	sp, #16
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d106      	bne.n	800fa3a <tcp_pcb_remove+0x1e>
 800fa2c:	4b3e      	ldr	r3, [pc, #248]	; (800fb28 <tcp_pcb_remove+0x10c>)
 800fa2e:	f640 0283 	movw	r2, #2179	; 0x883
 800fa32:	493e      	ldr	r1, [pc, #248]	; (800fb2c <tcp_pcb_remove+0x110>)
 800fa34:	483e      	ldr	r0, [pc, #248]	; (800fb30 <tcp_pcb_remove+0x114>)
 800fa36:	f009 fdc9 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d106      	bne.n	800fa4e <tcp_pcb_remove+0x32>
 800fa40:	4b39      	ldr	r3, [pc, #228]	; (800fb28 <tcp_pcb_remove+0x10c>)
 800fa42:	f640 0284 	movw	r2, #2180	; 0x884
 800fa46:	493b      	ldr	r1, [pc, #236]	; (800fb34 <tcp_pcb_remove+0x118>)
 800fa48:	4839      	ldr	r0, [pc, #228]	; (800fb30 <tcp_pcb_remove+0x114>)
 800fa4a:	f009 fdbf 	bl	80195cc <iprintf>

  TCP_RMV(pcblist, pcb);
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	d105      	bne.n	800fa64 <tcp_pcb_remove+0x48>
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	68da      	ldr	r2, [r3, #12]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	e013      	b.n	800fa8c <tcp_pcb_remove+0x70>
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	60fb      	str	r3, [r7, #12]
 800fa6a:	e00c      	b.n	800fa86 <tcp_pcb_remove+0x6a>
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	68db      	ldr	r3, [r3, #12]
 800fa70:	683a      	ldr	r2, [r7, #0]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d104      	bne.n	800fa80 <tcp_pcb_remove+0x64>
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	68da      	ldr	r2, [r3, #12]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	60da      	str	r2, [r3, #12]
 800fa7e:	e005      	b.n	800fa8c <tcp_pcb_remove+0x70>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	60fb      	str	r3, [r7, #12]
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d1ef      	bne.n	800fa6c <tcp_pcb_remove+0x50>
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800fa92:	6838      	ldr	r0, [r7, #0]
 800fa94:	f7ff ff72 	bl	800f97c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	7d1b      	ldrb	r3, [r3, #20]
 800fa9c:	2b0a      	cmp	r3, #10
 800fa9e:	d013      	beq.n	800fac8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d00f      	beq.n	800fac8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800faa8:	683b      	ldr	r3, [r7, #0]
 800faaa:	8b5b      	ldrh	r3, [r3, #26]
 800faac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d009      	beq.n	800fac8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	8b5b      	ldrh	r3, [r3, #26]
 800fab8:	f043 0302 	orr.w	r3, r3, #2
 800fabc:	b29a      	uxth	r2, r3
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fac2:	6838      	ldr	r0, [r7, #0]
 800fac4:	f003 fbc6 	bl	8013254 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	7d1b      	ldrb	r3, [r3, #20]
 800facc:	2b01      	cmp	r3, #1
 800face:	d020      	beq.n	800fb12 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d006      	beq.n	800fae6 <tcp_pcb_remove+0xca>
 800fad8:	4b13      	ldr	r3, [pc, #76]	; (800fb28 <tcp_pcb_remove+0x10c>)
 800fada:	f640 0293 	movw	r2, #2195	; 0x893
 800fade:	4916      	ldr	r1, [pc, #88]	; (800fb38 <tcp_pcb_remove+0x11c>)
 800fae0:	4813      	ldr	r0, [pc, #76]	; (800fb30 <tcp_pcb_remove+0x114>)
 800fae2:	f009 fd73 	bl	80195cc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800fae6:	683b      	ldr	r3, [r7, #0]
 800fae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800faea:	2b00      	cmp	r3, #0
 800faec:	d006      	beq.n	800fafc <tcp_pcb_remove+0xe0>
 800faee:	4b0e      	ldr	r3, [pc, #56]	; (800fb28 <tcp_pcb_remove+0x10c>)
 800faf0:	f640 0294 	movw	r2, #2196	; 0x894
 800faf4:	4911      	ldr	r1, [pc, #68]	; (800fb3c <tcp_pcb_remove+0x120>)
 800faf6:	480e      	ldr	r0, [pc, #56]	; (800fb30 <tcp_pcb_remove+0x114>)
 800faf8:	f009 fd68 	bl	80195cc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d006      	beq.n	800fb12 <tcp_pcb_remove+0xf6>
 800fb04:	4b08      	ldr	r3, [pc, #32]	; (800fb28 <tcp_pcb_remove+0x10c>)
 800fb06:	f640 0296 	movw	r2, #2198	; 0x896
 800fb0a:	490d      	ldr	r1, [pc, #52]	; (800fb40 <tcp_pcb_remove+0x124>)
 800fb0c:	4808      	ldr	r0, [pc, #32]	; (800fb30 <tcp_pcb_remove+0x114>)
 800fb0e:	f009 fd5d 	bl	80195cc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	2200      	movs	r2, #0
 800fb16:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800fb1e:	bf00      	nop
 800fb20:	3710      	adds	r7, #16
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}
 800fb26:	bf00      	nop
 800fb28:	0801b414 	.word	0x0801b414
 800fb2c:	0801ba7c 	.word	0x0801ba7c
 800fb30:	0801b458 	.word	0x0801b458
 800fb34:	0801ba98 	.word	0x0801ba98
 800fb38:	0801bab8 	.word	0x0801bab8
 800fb3c:	0801bad0 	.word	0x0801bad0
 800fb40:	0801baec 	.word	0x0801baec

0800fb44 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d106      	bne.n	800fb60 <tcp_next_iss+0x1c>
 800fb52:	4b0a      	ldr	r3, [pc, #40]	; (800fb7c <tcp_next_iss+0x38>)
 800fb54:	f640 02af 	movw	r2, #2223	; 0x8af
 800fb58:	4909      	ldr	r1, [pc, #36]	; (800fb80 <tcp_next_iss+0x3c>)
 800fb5a:	480a      	ldr	r0, [pc, #40]	; (800fb84 <tcp_next_iss+0x40>)
 800fb5c:	f009 fd36 	bl	80195cc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800fb60:	4b09      	ldr	r3, [pc, #36]	; (800fb88 <tcp_next_iss+0x44>)
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	4b09      	ldr	r3, [pc, #36]	; (800fb8c <tcp_next_iss+0x48>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	4413      	add	r3, r2
 800fb6a:	4a07      	ldr	r2, [pc, #28]	; (800fb88 <tcp_next_iss+0x44>)
 800fb6c:	6013      	str	r3, [r2, #0]
  return iss;
 800fb6e:	4b06      	ldr	r3, [pc, #24]	; (800fb88 <tcp_next_iss+0x44>)
 800fb70:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	3708      	adds	r7, #8
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	0801b414 	.word	0x0801b414
 800fb80:	0801bb04 	.word	0x0801bb04
 800fb84:	0801b458 	.word	0x0801b458
 800fb88:	20000040 	.word	0x20000040
 800fb8c:	2000cf24 	.word	0x2000cf24

0800fb90 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b086      	sub	sp, #24
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4603      	mov	r3, r0
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	607a      	str	r2, [r7, #4]
 800fb9c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d106      	bne.n	800fbb2 <tcp_eff_send_mss_netif+0x22>
 800fba4:	4b14      	ldr	r3, [pc, #80]	; (800fbf8 <tcp_eff_send_mss_netif+0x68>)
 800fba6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800fbaa:	4914      	ldr	r1, [pc, #80]	; (800fbfc <tcp_eff_send_mss_netif+0x6c>)
 800fbac:	4814      	ldr	r0, [pc, #80]	; (800fc00 <tcp_eff_send_mss_netif+0x70>)
 800fbae:	f009 fd0d 	bl	80195cc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d101      	bne.n	800fbbc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800fbb8:	89fb      	ldrh	r3, [r7, #14]
 800fbba:	e019      	b.n	800fbf0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbc0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800fbc2:	8afb      	ldrh	r3, [r7, #22]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d012      	beq.n	800fbee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800fbc8:	2328      	movs	r3, #40	; 0x28
 800fbca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800fbcc:	8afa      	ldrh	r2, [r7, #22]
 800fbce:	8abb      	ldrh	r3, [r7, #20]
 800fbd0:	429a      	cmp	r2, r3
 800fbd2:	d904      	bls.n	800fbde <tcp_eff_send_mss_netif+0x4e>
 800fbd4:	8afa      	ldrh	r2, [r7, #22]
 800fbd6:	8abb      	ldrh	r3, [r7, #20]
 800fbd8:	1ad3      	subs	r3, r2, r3
 800fbda:	b29b      	uxth	r3, r3
 800fbdc:	e000      	b.n	800fbe0 <tcp_eff_send_mss_netif+0x50>
 800fbde:	2300      	movs	r3, #0
 800fbe0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800fbe2:	8a7a      	ldrh	r2, [r7, #18]
 800fbe4:	89fb      	ldrh	r3, [r7, #14]
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	bf28      	it	cs
 800fbea:	4613      	movcs	r3, r2
 800fbec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800fbee:	89fb      	ldrh	r3, [r7, #14]
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3718      	adds	r7, #24
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	bd80      	pop	{r7, pc}
 800fbf8:	0801b414 	.word	0x0801b414
 800fbfc:	0801bb20 	.word	0x0801bb20
 800fc00:	0801b458 	.word	0x0801b458

0800fc04 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d119      	bne.n	800fc4c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800fc18:	4b10      	ldr	r3, [pc, #64]	; (800fc5c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800fc1a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800fc1e:	4910      	ldr	r1, [pc, #64]	; (800fc60 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800fc20:	4810      	ldr	r0, [pc, #64]	; (800fc64 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800fc22:	f009 fcd3 	bl	80195cc <iprintf>

  while (pcb != NULL) {
 800fc26:	e011      	b.n	800fc4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d108      	bne.n	800fc46 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800fc3a:	68f8      	ldr	r0, [r7, #12]
 800fc3c:	f7fe fd20 	bl	800e680 <tcp_abort>
      pcb = next;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	60fb      	str	r3, [r7, #12]
 800fc44:	e002      	b.n	800fc4c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	68db      	ldr	r3, [r3, #12]
 800fc4a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1ea      	bne.n	800fc28 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800fc52:	bf00      	nop
 800fc54:	bf00      	nop
 800fc56:	3710      	adds	r7, #16
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}
 800fc5c:	0801b414 	.word	0x0801b414
 800fc60:	0801bb48 	.word	0x0801bb48
 800fc64:	0801b458 	.word	0x0801b458

0800fc68 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	b084      	sub	sp, #16
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
 800fc70:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d02a      	beq.n	800fcce <tcp_netif_ip_addr_changed+0x66>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d026      	beq.n	800fcce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800fc80:	4b15      	ldr	r3, [pc, #84]	; (800fcd8 <tcp_netif_ip_addr_changed+0x70>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	4619      	mov	r1, r3
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f7ff ffbc 	bl	800fc04 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800fc8c:	4b13      	ldr	r3, [pc, #76]	; (800fcdc <tcp_netif_ip_addr_changed+0x74>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4619      	mov	r1, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7ff ffb6 	bl	800fc04 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d017      	beq.n	800fcce <tcp_netif_ip_addr_changed+0x66>
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d013      	beq.n	800fcce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fca6:	4b0e      	ldr	r3, [pc, #56]	; (800fce0 <tcp_netif_ip_addr_changed+0x78>)
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	60fb      	str	r3, [r7, #12]
 800fcac:	e00c      	b.n	800fcc8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	681a      	ldr	r2, [r3, #0]
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d103      	bne.n	800fcc2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800fcba:	683b      	ldr	r3, [r7, #0]
 800fcbc:	681a      	ldr	r2, [r3, #0]
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	68db      	ldr	r3, [r3, #12]
 800fcc6:	60fb      	str	r3, [r7, #12]
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d1ef      	bne.n	800fcae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800fcce:	bf00      	nop
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	2000cf30 	.word	0x2000cf30
 800fcdc:	2000cf28 	.word	0x2000cf28
 800fce0:	2000cf2c 	.word	0x2000cf2c

0800fce4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b082      	sub	sp, #8
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d007      	beq.n	800fd04 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7ff fb51 	bl	800f3a0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800fd04:	bf00      	nop
 800fd06:	3708      	adds	r7, #8
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}

0800fd0c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800fd0c:	b590      	push	{r4, r7, lr}
 800fd0e:	b08d      	sub	sp, #52	; 0x34
 800fd10:	af04      	add	r7, sp, #16
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d105      	bne.n	800fd28 <tcp_input+0x1c>
 800fd1c:	4b9b      	ldr	r3, [pc, #620]	; (800ff8c <tcp_input+0x280>)
 800fd1e:	2283      	movs	r2, #131	; 0x83
 800fd20:	499b      	ldr	r1, [pc, #620]	; (800ff90 <tcp_input+0x284>)
 800fd22:	489c      	ldr	r0, [pc, #624]	; (800ff94 <tcp_input+0x288>)
 800fd24:	f009 fc52 	bl	80195cc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	685b      	ldr	r3, [r3, #4]
 800fd2c:	4a9a      	ldr	r2, [pc, #616]	; (800ff98 <tcp_input+0x28c>)
 800fd2e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	895b      	ldrh	r3, [r3, #10]
 800fd34:	2b13      	cmp	r3, #19
 800fd36:	f240 83d1 	bls.w	80104dc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd3a:	4b98      	ldr	r3, [pc, #608]	; (800ff9c <tcp_input+0x290>)
 800fd3c:	695b      	ldr	r3, [r3, #20]
 800fd3e:	4a97      	ldr	r2, [pc, #604]	; (800ff9c <tcp_input+0x290>)
 800fd40:	6812      	ldr	r2, [r2, #0]
 800fd42:	4611      	mov	r1, r2
 800fd44:	4618      	mov	r0, r3
 800fd46:	f008 fa57 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 800fd4a:	4603      	mov	r3, r0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	f040 83c7 	bne.w	80104e0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800fd52:	4b92      	ldr	r3, [pc, #584]	; (800ff9c <tcp_input+0x290>)
 800fd54:	695b      	ldr	r3, [r3, #20]
 800fd56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800fd5a:	2be0      	cmp	r3, #224	; 0xe0
 800fd5c:	f000 83c0 	beq.w	80104e0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800fd60:	4b8d      	ldr	r3, [pc, #564]	; (800ff98 <tcp_input+0x28c>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	899b      	ldrh	r3, [r3, #12]
 800fd66:	b29b      	uxth	r3, r3
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f7fc fab1 	bl	800c2d0 <lwip_htons>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	0b1b      	lsrs	r3, r3, #12
 800fd72:	b29b      	uxth	r3, r3
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	009b      	lsls	r3, r3, #2
 800fd78:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800fd7a:	7cbb      	ldrb	r3, [r7, #18]
 800fd7c:	2b13      	cmp	r3, #19
 800fd7e:	f240 83b1 	bls.w	80104e4 <tcp_input+0x7d8>
 800fd82:	7cbb      	ldrb	r3, [r7, #18]
 800fd84:	b29a      	uxth	r2, r3
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	891b      	ldrh	r3, [r3, #8]
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	f200 83aa 	bhi.w	80104e4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800fd90:	7cbb      	ldrb	r3, [r7, #18]
 800fd92:	b29b      	uxth	r3, r3
 800fd94:	3b14      	subs	r3, #20
 800fd96:	b29a      	uxth	r2, r3
 800fd98:	4b81      	ldr	r3, [pc, #516]	; (800ffa0 <tcp_input+0x294>)
 800fd9a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800fd9c:	4b81      	ldr	r3, [pc, #516]	; (800ffa4 <tcp_input+0x298>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	895a      	ldrh	r2, [r3, #10]
 800fda6:	7cbb      	ldrb	r3, [r7, #18]
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d309      	bcc.n	800fdc2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800fdae:	4b7c      	ldr	r3, [pc, #496]	; (800ffa0 <tcp_input+0x294>)
 800fdb0:	881a      	ldrh	r2, [r3, #0]
 800fdb2:	4b7d      	ldr	r3, [pc, #500]	; (800ffa8 <tcp_input+0x29c>)
 800fdb4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800fdb6:	7cbb      	ldrb	r3, [r7, #18]
 800fdb8:	4619      	mov	r1, r3
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7fd fe36 	bl	800da2c <pbuf_remove_header>
 800fdc0:	e04e      	b.n	800fe60 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d105      	bne.n	800fdd6 <tcp_input+0xca>
 800fdca:	4b70      	ldr	r3, [pc, #448]	; (800ff8c <tcp_input+0x280>)
 800fdcc:	22c2      	movs	r2, #194	; 0xc2
 800fdce:	4977      	ldr	r1, [pc, #476]	; (800ffac <tcp_input+0x2a0>)
 800fdd0:	4870      	ldr	r0, [pc, #448]	; (800ff94 <tcp_input+0x288>)
 800fdd2:	f009 fbfb 	bl	80195cc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800fdd6:	2114      	movs	r1, #20
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	f7fd fe27 	bl	800da2c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	895a      	ldrh	r2, [r3, #10]
 800fde2:	4b71      	ldr	r3, [pc, #452]	; (800ffa8 <tcp_input+0x29c>)
 800fde4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800fde6:	4b6e      	ldr	r3, [pc, #440]	; (800ffa0 <tcp_input+0x294>)
 800fde8:	881a      	ldrh	r2, [r3, #0]
 800fdea:	4b6f      	ldr	r3, [pc, #444]	; (800ffa8 <tcp_input+0x29c>)
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	1ad3      	subs	r3, r2, r3
 800fdf0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800fdf2:	4b6d      	ldr	r3, [pc, #436]	; (800ffa8 <tcp_input+0x29c>)
 800fdf4:	881b      	ldrh	r3, [r3, #0]
 800fdf6:	4619      	mov	r1, r3
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f7fd fe17 	bl	800da2c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	895b      	ldrh	r3, [r3, #10]
 800fe04:	8a3a      	ldrh	r2, [r7, #16]
 800fe06:	429a      	cmp	r2, r3
 800fe08:	f200 836e 	bhi.w	80104e8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	4a64      	ldr	r2, [pc, #400]	; (800ffa4 <tcp_input+0x298>)
 800fe14:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	8a3a      	ldrh	r2, [r7, #16]
 800fe1c:	4611      	mov	r1, r2
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fd fe04 	bl	800da2c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	891a      	ldrh	r2, [r3, #8]
 800fe28:	8a3b      	ldrh	r3, [r7, #16]
 800fe2a:	1ad3      	subs	r3, r2, r3
 800fe2c:	b29a      	uxth	r2, r3
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	895b      	ldrh	r3, [r3, #10]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d005      	beq.n	800fe46 <tcp_input+0x13a>
 800fe3a:	4b54      	ldr	r3, [pc, #336]	; (800ff8c <tcp_input+0x280>)
 800fe3c:	22df      	movs	r2, #223	; 0xdf
 800fe3e:	495c      	ldr	r1, [pc, #368]	; (800ffb0 <tcp_input+0x2a4>)
 800fe40:	4854      	ldr	r0, [pc, #336]	; (800ff94 <tcp_input+0x288>)
 800fe42:	f009 fbc3 	bl	80195cc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	891a      	ldrh	r2, [r3, #8]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	891b      	ldrh	r3, [r3, #8]
 800fe50:	429a      	cmp	r2, r3
 800fe52:	d005      	beq.n	800fe60 <tcp_input+0x154>
 800fe54:	4b4d      	ldr	r3, [pc, #308]	; (800ff8c <tcp_input+0x280>)
 800fe56:	22e0      	movs	r2, #224	; 0xe0
 800fe58:	4956      	ldr	r1, [pc, #344]	; (800ffb4 <tcp_input+0x2a8>)
 800fe5a:	484e      	ldr	r0, [pc, #312]	; (800ff94 <tcp_input+0x288>)
 800fe5c:	f009 fbb6 	bl	80195cc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800fe60:	4b4d      	ldr	r3, [pc, #308]	; (800ff98 <tcp_input+0x28c>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	4a4b      	ldr	r2, [pc, #300]	; (800ff98 <tcp_input+0x28c>)
 800fe6a:	6814      	ldr	r4, [r2, #0]
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fc fa2f 	bl	800c2d0 <lwip_htons>
 800fe72:	4603      	mov	r3, r0
 800fe74:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800fe76:	4b48      	ldr	r3, [pc, #288]	; (800ff98 <tcp_input+0x28c>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	885b      	ldrh	r3, [r3, #2]
 800fe7c:	b29b      	uxth	r3, r3
 800fe7e:	4a46      	ldr	r2, [pc, #280]	; (800ff98 <tcp_input+0x28c>)
 800fe80:	6814      	ldr	r4, [r2, #0]
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fc fa24 	bl	800c2d0 <lwip_htons>
 800fe88:	4603      	mov	r3, r0
 800fe8a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800fe8c:	4b42      	ldr	r3, [pc, #264]	; (800ff98 <tcp_input+0x28c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	685b      	ldr	r3, [r3, #4]
 800fe92:	4a41      	ldr	r2, [pc, #260]	; (800ff98 <tcp_input+0x28c>)
 800fe94:	6814      	ldr	r4, [r2, #0]
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7fc fa2f 	bl	800c2fa <lwip_htonl>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	6063      	str	r3, [r4, #4]
 800fea0:	6863      	ldr	r3, [r4, #4]
 800fea2:	4a45      	ldr	r2, [pc, #276]	; (800ffb8 <tcp_input+0x2ac>)
 800fea4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800fea6:	4b3c      	ldr	r3, [pc, #240]	; (800ff98 <tcp_input+0x28c>)
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	689b      	ldr	r3, [r3, #8]
 800feac:	4a3a      	ldr	r2, [pc, #232]	; (800ff98 <tcp_input+0x28c>)
 800feae:	6814      	ldr	r4, [r2, #0]
 800feb0:	4618      	mov	r0, r3
 800feb2:	f7fc fa22 	bl	800c2fa <lwip_htonl>
 800feb6:	4603      	mov	r3, r0
 800feb8:	60a3      	str	r3, [r4, #8]
 800feba:	68a3      	ldr	r3, [r4, #8]
 800febc:	4a3f      	ldr	r2, [pc, #252]	; (800ffbc <tcp_input+0x2b0>)
 800febe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800fec0:	4b35      	ldr	r3, [pc, #212]	; (800ff98 <tcp_input+0x28c>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	89db      	ldrh	r3, [r3, #14]
 800fec6:	b29b      	uxth	r3, r3
 800fec8:	4a33      	ldr	r2, [pc, #204]	; (800ff98 <tcp_input+0x28c>)
 800feca:	6814      	ldr	r4, [r2, #0]
 800fecc:	4618      	mov	r0, r3
 800fece:	f7fc f9ff 	bl	800c2d0 <lwip_htons>
 800fed2:	4603      	mov	r3, r0
 800fed4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800fed6:	4b30      	ldr	r3, [pc, #192]	; (800ff98 <tcp_input+0x28c>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	899b      	ldrh	r3, [r3, #12]
 800fedc:	b29b      	uxth	r3, r3
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fc f9f6 	bl	800c2d0 <lwip_htons>
 800fee4:	4603      	mov	r3, r0
 800fee6:	b2db      	uxtb	r3, r3
 800fee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800feec:	b2da      	uxtb	r2, r3
 800feee:	4b34      	ldr	r3, [pc, #208]	; (800ffc0 <tcp_input+0x2b4>)
 800fef0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	891a      	ldrh	r2, [r3, #8]
 800fef6:	4b33      	ldr	r3, [pc, #204]	; (800ffc4 <tcp_input+0x2b8>)
 800fef8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800fefa:	4b31      	ldr	r3, [pc, #196]	; (800ffc0 <tcp_input+0x2b4>)
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00c      	beq.n	800ff20 <tcp_input+0x214>
    tcplen++;
 800ff06:	4b2f      	ldr	r3, [pc, #188]	; (800ffc4 <tcp_input+0x2b8>)
 800ff08:	881b      	ldrh	r3, [r3, #0]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	4b2d      	ldr	r3, [pc, #180]	; (800ffc4 <tcp_input+0x2b8>)
 800ff10:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	891a      	ldrh	r2, [r3, #8]
 800ff16:	4b2b      	ldr	r3, [pc, #172]	; (800ffc4 <tcp_input+0x2b8>)
 800ff18:	881b      	ldrh	r3, [r3, #0]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	f200 82e6 	bhi.w	80104ec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ff24:	4b28      	ldr	r3, [pc, #160]	; (800ffc8 <tcp_input+0x2bc>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	61fb      	str	r3, [r7, #28]
 800ff2a:	e09d      	b.n	8010068 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800ff2c:	69fb      	ldr	r3, [r7, #28]
 800ff2e:	7d1b      	ldrb	r3, [r3, #20]
 800ff30:	2b00      	cmp	r3, #0
 800ff32:	d105      	bne.n	800ff40 <tcp_input+0x234>
 800ff34:	4b15      	ldr	r3, [pc, #84]	; (800ff8c <tcp_input+0x280>)
 800ff36:	22fb      	movs	r2, #251	; 0xfb
 800ff38:	4924      	ldr	r1, [pc, #144]	; (800ffcc <tcp_input+0x2c0>)
 800ff3a:	4816      	ldr	r0, [pc, #88]	; (800ff94 <tcp_input+0x288>)
 800ff3c:	f009 fb46 	bl	80195cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	7d1b      	ldrb	r3, [r3, #20]
 800ff44:	2b0a      	cmp	r3, #10
 800ff46:	d105      	bne.n	800ff54 <tcp_input+0x248>
 800ff48:	4b10      	ldr	r3, [pc, #64]	; (800ff8c <tcp_input+0x280>)
 800ff4a:	22fc      	movs	r2, #252	; 0xfc
 800ff4c:	4920      	ldr	r1, [pc, #128]	; (800ffd0 <tcp_input+0x2c4>)
 800ff4e:	4811      	ldr	r0, [pc, #68]	; (800ff94 <tcp_input+0x288>)
 800ff50:	f009 fb3c 	bl	80195cc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800ff54:	69fb      	ldr	r3, [r7, #28]
 800ff56:	7d1b      	ldrb	r3, [r3, #20]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d105      	bne.n	800ff68 <tcp_input+0x25c>
 800ff5c:	4b0b      	ldr	r3, [pc, #44]	; (800ff8c <tcp_input+0x280>)
 800ff5e:	22fd      	movs	r2, #253	; 0xfd
 800ff60:	491c      	ldr	r1, [pc, #112]	; (800ffd4 <tcp_input+0x2c8>)
 800ff62:	480c      	ldr	r0, [pc, #48]	; (800ff94 <tcp_input+0x288>)
 800ff64:	f009 fb32 	bl	80195cc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	7a1b      	ldrb	r3, [r3, #8]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d033      	beq.n	800ffd8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ff70:	69fb      	ldr	r3, [r7, #28]
 800ff72:	7a1a      	ldrb	r2, [r3, #8]
 800ff74:	4b09      	ldr	r3, [pc, #36]	; (800ff9c <tcp_input+0x290>)
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ff7c:	3301      	adds	r3, #1
 800ff7e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d029      	beq.n	800ffd8 <tcp_input+0x2cc>
      prev = pcb;
 800ff84:	69fb      	ldr	r3, [r7, #28]
 800ff86:	61bb      	str	r3, [r7, #24]
      continue;
 800ff88:	e06b      	b.n	8010062 <tcp_input+0x356>
 800ff8a:	bf00      	nop
 800ff8c:	0801bb7c 	.word	0x0801bb7c
 800ff90:	0801bbb0 	.word	0x0801bbb0
 800ff94:	0801bbc8 	.word	0x0801bbc8
 800ff98:	2000cf4c 	.word	0x2000cf4c
 800ff9c:	200097b0 	.word	0x200097b0
 800ffa0:	2000cf50 	.word	0x2000cf50
 800ffa4:	2000cf54 	.word	0x2000cf54
 800ffa8:	2000cf52 	.word	0x2000cf52
 800ffac:	0801bbf0 	.word	0x0801bbf0
 800ffb0:	0801bc00 	.word	0x0801bc00
 800ffb4:	0801bc0c 	.word	0x0801bc0c
 800ffb8:	2000cf5c 	.word	0x2000cf5c
 800ffbc:	2000cf60 	.word	0x2000cf60
 800ffc0:	2000cf68 	.word	0x2000cf68
 800ffc4:	2000cf66 	.word	0x2000cf66
 800ffc8:	2000cf30 	.word	0x2000cf30
 800ffcc:	0801bc2c 	.word	0x0801bc2c
 800ffd0:	0801bc54 	.word	0x0801bc54
 800ffd4:	0801bc80 	.word	0x0801bc80
    }

    if (pcb->remote_port == tcphdr->src &&
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	8b1a      	ldrh	r2, [r3, #24]
 800ffdc:	4b72      	ldr	r3, [pc, #456]	; (80101a8 <tcp_input+0x49c>)
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	881b      	ldrh	r3, [r3, #0]
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d13a      	bne.n	801005e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800ffe8:	69fb      	ldr	r3, [r7, #28]
 800ffea:	8ada      	ldrh	r2, [r3, #22]
 800ffec:	4b6e      	ldr	r3, [pc, #440]	; (80101a8 <tcp_input+0x49c>)
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	885b      	ldrh	r3, [r3, #2]
 800fff2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800fff4:	429a      	cmp	r2, r3
 800fff6:	d132      	bne.n	801005e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	4b6b      	ldr	r3, [pc, #428]	; (80101ac <tcp_input+0x4a0>)
 800fffe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8010000:	429a      	cmp	r2, r3
 8010002:	d12c      	bne.n	801005e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010004:	69fb      	ldr	r3, [r7, #28]
 8010006:	681a      	ldr	r2, [r3, #0]
 8010008:	4b68      	ldr	r3, [pc, #416]	; (80101ac <tcp_input+0x4a0>)
 801000a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801000c:	429a      	cmp	r2, r3
 801000e:	d126      	bne.n	801005e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	69fa      	ldr	r2, [r7, #28]
 8010016:	429a      	cmp	r2, r3
 8010018:	d106      	bne.n	8010028 <tcp_input+0x31c>
 801001a:	4b65      	ldr	r3, [pc, #404]	; (80101b0 <tcp_input+0x4a4>)
 801001c:	f240 120d 	movw	r2, #269	; 0x10d
 8010020:	4964      	ldr	r1, [pc, #400]	; (80101b4 <tcp_input+0x4a8>)
 8010022:	4865      	ldr	r0, [pc, #404]	; (80101b8 <tcp_input+0x4ac>)
 8010024:	f009 fad2 	bl	80195cc <iprintf>
      if (prev != NULL) {
 8010028:	69bb      	ldr	r3, [r7, #24]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d00a      	beq.n	8010044 <tcp_input+0x338>
        prev->next = pcb->next;
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	68da      	ldr	r2, [r3, #12]
 8010032:	69bb      	ldr	r3, [r7, #24]
 8010034:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8010036:	4b61      	ldr	r3, [pc, #388]	; (80101bc <tcp_input+0x4b0>)
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	69fb      	ldr	r3, [r7, #28]
 801003c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801003e:	4a5f      	ldr	r2, [pc, #380]	; (80101bc <tcp_input+0x4b0>)
 8010040:	69fb      	ldr	r3, [r7, #28]
 8010042:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8010044:	69fb      	ldr	r3, [r7, #28]
 8010046:	68db      	ldr	r3, [r3, #12]
 8010048:	69fa      	ldr	r2, [r7, #28]
 801004a:	429a      	cmp	r2, r3
 801004c:	d111      	bne.n	8010072 <tcp_input+0x366>
 801004e:	4b58      	ldr	r3, [pc, #352]	; (80101b0 <tcp_input+0x4a4>)
 8010050:	f240 1215 	movw	r2, #277	; 0x115
 8010054:	495a      	ldr	r1, [pc, #360]	; (80101c0 <tcp_input+0x4b4>)
 8010056:	4858      	ldr	r0, [pc, #352]	; (80101b8 <tcp_input+0x4ac>)
 8010058:	f009 fab8 	bl	80195cc <iprintf>
      break;
 801005c:	e009      	b.n	8010072 <tcp_input+0x366>
    }
    prev = pcb;
 801005e:	69fb      	ldr	r3, [r7, #28]
 8010060:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010062:	69fb      	ldr	r3, [r7, #28]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	61fb      	str	r3, [r7, #28]
 8010068:	69fb      	ldr	r3, [r7, #28]
 801006a:	2b00      	cmp	r3, #0
 801006c:	f47f af5e 	bne.w	800ff2c <tcp_input+0x220>
 8010070:	e000      	b.n	8010074 <tcp_input+0x368>
      break;
 8010072:	bf00      	nop
  }

  if (pcb == NULL) {
 8010074:	69fb      	ldr	r3, [r7, #28]
 8010076:	2b00      	cmp	r3, #0
 8010078:	f040 80aa 	bne.w	80101d0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801007c:	4b51      	ldr	r3, [pc, #324]	; (80101c4 <tcp_input+0x4b8>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	61fb      	str	r3, [r7, #28]
 8010082:	e03f      	b.n	8010104 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010084:	69fb      	ldr	r3, [r7, #28]
 8010086:	7d1b      	ldrb	r3, [r3, #20]
 8010088:	2b0a      	cmp	r3, #10
 801008a:	d006      	beq.n	801009a <tcp_input+0x38e>
 801008c:	4b48      	ldr	r3, [pc, #288]	; (80101b0 <tcp_input+0x4a4>)
 801008e:	f240 121f 	movw	r2, #287	; 0x11f
 8010092:	494d      	ldr	r1, [pc, #308]	; (80101c8 <tcp_input+0x4bc>)
 8010094:	4848      	ldr	r0, [pc, #288]	; (80101b8 <tcp_input+0x4ac>)
 8010096:	f009 fa99 	bl	80195cc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801009a:	69fb      	ldr	r3, [r7, #28]
 801009c:	7a1b      	ldrb	r3, [r3, #8]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d009      	beq.n	80100b6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80100a2:	69fb      	ldr	r3, [r7, #28]
 80100a4:	7a1a      	ldrb	r2, [r3, #8]
 80100a6:	4b41      	ldr	r3, [pc, #260]	; (80101ac <tcp_input+0x4a0>)
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80100ae:	3301      	adds	r3, #1
 80100b0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d122      	bne.n	80100fc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80100b6:	69fb      	ldr	r3, [r7, #28]
 80100b8:	8b1a      	ldrh	r2, [r3, #24]
 80100ba:	4b3b      	ldr	r3, [pc, #236]	; (80101a8 <tcp_input+0x49c>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	881b      	ldrh	r3, [r3, #0]
 80100c0:	b29b      	uxth	r3, r3
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d11b      	bne.n	80100fe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80100c6:	69fb      	ldr	r3, [r7, #28]
 80100c8:	8ada      	ldrh	r2, [r3, #22]
 80100ca:	4b37      	ldr	r3, [pc, #220]	; (80101a8 <tcp_input+0x49c>)
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	885b      	ldrh	r3, [r3, #2]
 80100d0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80100d2:	429a      	cmp	r2, r3
 80100d4:	d113      	bne.n	80100fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80100d6:	69fb      	ldr	r3, [r7, #28]
 80100d8:	685a      	ldr	r2, [r3, #4]
 80100da:	4b34      	ldr	r3, [pc, #208]	; (80101ac <tcp_input+0x4a0>)
 80100dc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80100de:	429a      	cmp	r2, r3
 80100e0:	d10d      	bne.n	80100fe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	4b31      	ldr	r3, [pc, #196]	; (80101ac <tcp_input+0x4a0>)
 80100e8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d107      	bne.n	80100fe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80100ee:	69f8      	ldr	r0, [r7, #28]
 80100f0:	f000 fb56 	bl	80107a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7fd fd1f 	bl	800db38 <pbuf_free>
        return;
 80100fa:	e1fd      	b.n	80104f8 <tcp_input+0x7ec>
        continue;
 80100fc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80100fe:	69fb      	ldr	r3, [r7, #28]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	61fb      	str	r3, [r7, #28]
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1bc      	bne.n	8010084 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801010a:	2300      	movs	r3, #0
 801010c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801010e:	4b2f      	ldr	r3, [pc, #188]	; (80101cc <tcp_input+0x4c0>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	617b      	str	r3, [r7, #20]
 8010114:	e02a      	b.n	801016c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8010116:	697b      	ldr	r3, [r7, #20]
 8010118:	7a1b      	ldrb	r3, [r3, #8]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d00c      	beq.n	8010138 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	7a1a      	ldrb	r2, [r3, #8]
 8010122:	4b22      	ldr	r3, [pc, #136]	; (80101ac <tcp_input+0x4a0>)
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801012a:	3301      	adds	r3, #1
 801012c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801012e:	429a      	cmp	r2, r3
 8010130:	d002      	beq.n	8010138 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8010132:	697b      	ldr	r3, [r7, #20]
 8010134:	61bb      	str	r3, [r7, #24]
        continue;
 8010136:	e016      	b.n	8010166 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8010138:	697b      	ldr	r3, [r7, #20]
 801013a:	8ada      	ldrh	r2, [r3, #22]
 801013c:	4b1a      	ldr	r3, [pc, #104]	; (80101a8 <tcp_input+0x49c>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	885b      	ldrh	r3, [r3, #2]
 8010142:	b29b      	uxth	r3, r3
 8010144:	429a      	cmp	r2, r3
 8010146:	d10c      	bne.n	8010162 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8010148:	697b      	ldr	r3, [r7, #20]
 801014a:	681a      	ldr	r2, [r3, #0]
 801014c:	4b17      	ldr	r3, [pc, #92]	; (80101ac <tcp_input+0x4a0>)
 801014e:	695b      	ldr	r3, [r3, #20]
 8010150:	429a      	cmp	r2, r3
 8010152:	d00f      	beq.n	8010174 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00d      	beq.n	8010176 <tcp_input+0x46a>
 801015a:	697b      	ldr	r3, [r7, #20]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d009      	beq.n	8010176 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8010162:	697b      	ldr	r3, [r7, #20]
 8010164:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8010166:	697b      	ldr	r3, [r7, #20]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	617b      	str	r3, [r7, #20]
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	2b00      	cmp	r3, #0
 8010170:	d1d1      	bne.n	8010116 <tcp_input+0x40a>
 8010172:	e000      	b.n	8010176 <tcp_input+0x46a>
            break;
 8010174:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	2b00      	cmp	r3, #0
 801017a:	d029      	beq.n	80101d0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801017c:	69bb      	ldr	r3, [r7, #24]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d00a      	beq.n	8010198 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8010182:	697b      	ldr	r3, [r7, #20]
 8010184:	68da      	ldr	r2, [r3, #12]
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801018a:	4b10      	ldr	r3, [pc, #64]	; (80101cc <tcp_input+0x4c0>)
 801018c:	681a      	ldr	r2, [r3, #0]
 801018e:	697b      	ldr	r3, [r7, #20]
 8010190:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8010192:	4a0e      	ldr	r2, [pc, #56]	; (80101cc <tcp_input+0x4c0>)
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8010198:	6978      	ldr	r0, [r7, #20]
 801019a:	f000 fa03 	bl	80105a4 <tcp_listen_input>
      }
      pbuf_free(p);
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f7fd fcca 	bl	800db38 <pbuf_free>
      return;
 80101a4:	e1a8      	b.n	80104f8 <tcp_input+0x7ec>
 80101a6:	bf00      	nop
 80101a8:	2000cf4c 	.word	0x2000cf4c
 80101ac:	200097b0 	.word	0x200097b0
 80101b0:	0801bb7c 	.word	0x0801bb7c
 80101b4:	0801bca8 	.word	0x0801bca8
 80101b8:	0801bbc8 	.word	0x0801bbc8
 80101bc:	2000cf30 	.word	0x2000cf30
 80101c0:	0801bcd4 	.word	0x0801bcd4
 80101c4:	2000cf34 	.word	0x2000cf34
 80101c8:	0801bd00 	.word	0x0801bd00
 80101cc:	2000cf2c 	.word	0x2000cf2c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80101d0:	69fb      	ldr	r3, [r7, #28]
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	f000 8158 	beq.w	8010488 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80101d8:	4b95      	ldr	r3, [pc, #596]	; (8010430 <tcp_input+0x724>)
 80101da:	2200      	movs	r2, #0
 80101dc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	891a      	ldrh	r2, [r3, #8]
 80101e2:	4b93      	ldr	r3, [pc, #588]	; (8010430 <tcp_input+0x724>)
 80101e4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80101e6:	4a92      	ldr	r2, [pc, #584]	; (8010430 <tcp_input+0x724>)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80101ec:	4b91      	ldr	r3, [pc, #580]	; (8010434 <tcp_input+0x728>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	4a8f      	ldr	r2, [pc, #572]	; (8010430 <tcp_input+0x724>)
 80101f2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80101f4:	4b90      	ldr	r3, [pc, #576]	; (8010438 <tcp_input+0x72c>)
 80101f6:	2200      	movs	r2, #0
 80101f8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80101fa:	4b90      	ldr	r3, [pc, #576]	; (801043c <tcp_input+0x730>)
 80101fc:	2200      	movs	r2, #0
 80101fe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8010200:	4b8f      	ldr	r3, [pc, #572]	; (8010440 <tcp_input+0x734>)
 8010202:	2200      	movs	r2, #0
 8010204:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8010206:	4b8f      	ldr	r3, [pc, #572]	; (8010444 <tcp_input+0x738>)
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	f003 0308 	and.w	r3, r3, #8
 801020e:	2b00      	cmp	r3, #0
 8010210:	d006      	beq.n	8010220 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	7b5b      	ldrb	r3, [r3, #13]
 8010216:	f043 0301 	orr.w	r3, r3, #1
 801021a:	b2da      	uxtb	r2, r3
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8010220:	69fb      	ldr	r3, [r7, #28]
 8010222:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010224:	2b00      	cmp	r3, #0
 8010226:	d017      	beq.n	8010258 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8010228:	69f8      	ldr	r0, [r7, #28]
 801022a:	f7ff f83d 	bl	800f2a8 <tcp_process_refused_data>
 801022e:	4603      	mov	r3, r0
 8010230:	f113 0f0d 	cmn.w	r3, #13
 8010234:	d007      	beq.n	8010246 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801023a:	2b00      	cmp	r3, #0
 801023c:	d00c      	beq.n	8010258 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801023e:	4b82      	ldr	r3, [pc, #520]	; (8010448 <tcp_input+0x73c>)
 8010240:	881b      	ldrh	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d008      	beq.n	8010258 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8010246:	69fb      	ldr	r3, [r7, #28]
 8010248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801024a:	2b00      	cmp	r3, #0
 801024c:	f040 80e3 	bne.w	8010416 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8010250:	69f8      	ldr	r0, [r7, #28]
 8010252:	f003 fe05 	bl	8013e60 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8010256:	e0de      	b.n	8010416 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8010258:	4a7c      	ldr	r2, [pc, #496]	; (801044c <tcp_input+0x740>)
 801025a:	69fb      	ldr	r3, [r7, #28]
 801025c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801025e:	69f8      	ldr	r0, [r7, #28]
 8010260:	f000 fb18 	bl	8010894 <tcp_process>
 8010264:	4603      	mov	r3, r0
 8010266:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8010268:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801026c:	f113 0f0d 	cmn.w	r3, #13
 8010270:	f000 80d3 	beq.w	801041a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8010274:	4b71      	ldr	r3, [pc, #452]	; (801043c <tcp_input+0x730>)
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	f003 0308 	and.w	r3, r3, #8
 801027c:	2b00      	cmp	r3, #0
 801027e:	d015      	beq.n	80102ac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010286:	2b00      	cmp	r3, #0
 8010288:	d008      	beq.n	801029c <tcp_input+0x590>
 801028a:	69fb      	ldr	r3, [r7, #28]
 801028c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010290:	69fa      	ldr	r2, [r7, #28]
 8010292:	6912      	ldr	r2, [r2, #16]
 8010294:	f06f 010d 	mvn.w	r1, #13
 8010298:	4610      	mov	r0, r2
 801029a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801029c:	69f9      	ldr	r1, [r7, #28]
 801029e:	486c      	ldr	r0, [pc, #432]	; (8010450 <tcp_input+0x744>)
 80102a0:	f7ff fbbc 	bl	800fa1c <tcp_pcb_remove>
        tcp_free(pcb);
 80102a4:	69f8      	ldr	r0, [r7, #28]
 80102a6:	f7fd ff03 	bl	800e0b0 <tcp_free>
 80102aa:	e0da      	b.n	8010462 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80102ac:	2300      	movs	r3, #0
 80102ae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80102b0:	4b63      	ldr	r3, [pc, #396]	; (8010440 <tcp_input+0x734>)
 80102b2:	881b      	ldrh	r3, [r3, #0]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d01d      	beq.n	80102f4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80102b8:	4b61      	ldr	r3, [pc, #388]	; (8010440 <tcp_input+0x734>)
 80102ba:	881b      	ldrh	r3, [r3, #0]
 80102bc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d00a      	beq.n	80102de <tcp_input+0x5d2>
 80102c8:	69fb      	ldr	r3, [r7, #28]
 80102ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ce:	69fa      	ldr	r2, [r7, #28]
 80102d0:	6910      	ldr	r0, [r2, #16]
 80102d2:	89fa      	ldrh	r2, [r7, #14]
 80102d4:	69f9      	ldr	r1, [r7, #28]
 80102d6:	4798      	blx	r3
 80102d8:	4603      	mov	r3, r0
 80102da:	74fb      	strb	r3, [r7, #19]
 80102dc:	e001      	b.n	80102e2 <tcp_input+0x5d6>
 80102de:	2300      	movs	r3, #0
 80102e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80102e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80102e6:	f113 0f0d 	cmn.w	r3, #13
 80102ea:	f000 8098 	beq.w	801041e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80102ee:	4b54      	ldr	r3, [pc, #336]	; (8010440 <tcp_input+0x734>)
 80102f0:	2200      	movs	r2, #0
 80102f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80102f4:	69f8      	ldr	r0, [r7, #28]
 80102f6:	f000 f915 	bl	8010524 <tcp_input_delayed_close>
 80102fa:	4603      	mov	r3, r0
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f040 8090 	bne.w	8010422 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8010302:	4b4d      	ldr	r3, [pc, #308]	; (8010438 <tcp_input+0x72c>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	2b00      	cmp	r3, #0
 8010308:	d041      	beq.n	801038e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801030a:	69fb      	ldr	r3, [r7, #28]
 801030c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801030e:	2b00      	cmp	r3, #0
 8010310:	d006      	beq.n	8010320 <tcp_input+0x614>
 8010312:	4b50      	ldr	r3, [pc, #320]	; (8010454 <tcp_input+0x748>)
 8010314:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010318:	494f      	ldr	r1, [pc, #316]	; (8010458 <tcp_input+0x74c>)
 801031a:	4850      	ldr	r0, [pc, #320]	; (801045c <tcp_input+0x750>)
 801031c:	f009 f956 	bl	80195cc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	8b5b      	ldrh	r3, [r3, #26]
 8010324:	f003 0310 	and.w	r3, r3, #16
 8010328:	2b00      	cmp	r3, #0
 801032a:	d008      	beq.n	801033e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801032c:	4b42      	ldr	r3, [pc, #264]	; (8010438 <tcp_input+0x72c>)
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	4618      	mov	r0, r3
 8010332:	f7fd fc01 	bl	800db38 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8010336:	69f8      	ldr	r0, [r7, #28]
 8010338:	f7fe f9a2 	bl	800e680 <tcp_abort>
            goto aborted;
 801033c:	e091      	b.n	8010462 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801033e:	69fb      	ldr	r3, [r7, #28]
 8010340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010344:	2b00      	cmp	r3, #0
 8010346:	d00c      	beq.n	8010362 <tcp_input+0x656>
 8010348:	69fb      	ldr	r3, [r7, #28]
 801034a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801034e:	69fb      	ldr	r3, [r7, #28]
 8010350:	6918      	ldr	r0, [r3, #16]
 8010352:	4b39      	ldr	r3, [pc, #228]	; (8010438 <tcp_input+0x72c>)
 8010354:	681a      	ldr	r2, [r3, #0]
 8010356:	2300      	movs	r3, #0
 8010358:	69f9      	ldr	r1, [r7, #28]
 801035a:	47a0      	blx	r4
 801035c:	4603      	mov	r3, r0
 801035e:	74fb      	strb	r3, [r7, #19]
 8010360:	e008      	b.n	8010374 <tcp_input+0x668>
 8010362:	4b35      	ldr	r3, [pc, #212]	; (8010438 <tcp_input+0x72c>)
 8010364:	681a      	ldr	r2, [r3, #0]
 8010366:	2300      	movs	r3, #0
 8010368:	69f9      	ldr	r1, [r7, #28]
 801036a:	2000      	movs	r0, #0
 801036c:	f7ff f890 	bl	800f490 <tcp_recv_null>
 8010370:	4603      	mov	r3, r0
 8010372:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8010374:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010378:	f113 0f0d 	cmn.w	r3, #13
 801037c:	d053      	beq.n	8010426 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801037e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d003      	beq.n	801038e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8010386:	4b2c      	ldr	r3, [pc, #176]	; (8010438 <tcp_input+0x72c>)
 8010388:	681a      	ldr	r2, [r3, #0]
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801038e:	4b2b      	ldr	r3, [pc, #172]	; (801043c <tcp_input+0x730>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	f003 0320 	and.w	r3, r3, #32
 8010396:	2b00      	cmp	r3, #0
 8010398:	d030      	beq.n	80103fc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801039a:	69fb      	ldr	r3, [r7, #28]
 801039c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d009      	beq.n	80103b6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103a6:	7b5a      	ldrb	r2, [r3, #13]
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103ac:	f042 0220 	orr.w	r2, r2, #32
 80103b0:	b2d2      	uxtb	r2, r2
 80103b2:	735a      	strb	r2, [r3, #13]
 80103b4:	e022      	b.n	80103fc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80103b6:	69fb      	ldr	r3, [r7, #28]
 80103b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103ba:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80103be:	d005      	beq.n	80103cc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103c4:	3301      	adds	r3, #1
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	69fb      	ldr	r3, [r7, #28]
 80103ca:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80103cc:	69fb      	ldr	r3, [r7, #28]
 80103ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d00b      	beq.n	80103ee <tcp_input+0x6e2>
 80103d6:	69fb      	ldr	r3, [r7, #28]
 80103d8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	6918      	ldr	r0, [r3, #16]
 80103e0:	2300      	movs	r3, #0
 80103e2:	2200      	movs	r2, #0
 80103e4:	69f9      	ldr	r1, [r7, #28]
 80103e6:	47a0      	blx	r4
 80103e8:	4603      	mov	r3, r0
 80103ea:	74fb      	strb	r3, [r7, #19]
 80103ec:	e001      	b.n	80103f2 <tcp_input+0x6e6>
 80103ee:	2300      	movs	r3, #0
 80103f0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80103f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80103f6:	f113 0f0d 	cmn.w	r3, #13
 80103fa:	d016      	beq.n	801042a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80103fc:	4b13      	ldr	r3, [pc, #76]	; (801044c <tcp_input+0x740>)
 80103fe:	2200      	movs	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8010402:	69f8      	ldr	r0, [r7, #28]
 8010404:	f000 f88e 	bl	8010524 <tcp_input_delayed_close>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d128      	bne.n	8010460 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801040e:	69f8      	ldr	r0, [r7, #28]
 8010410:	f002 ff20 	bl	8013254 <tcp_output>
 8010414:	e025      	b.n	8010462 <tcp_input+0x756>
        goto aborted;
 8010416:	bf00      	nop
 8010418:	e023      	b.n	8010462 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801041a:	bf00      	nop
 801041c:	e021      	b.n	8010462 <tcp_input+0x756>
              goto aborted;
 801041e:	bf00      	nop
 8010420:	e01f      	b.n	8010462 <tcp_input+0x756>
          goto aborted;
 8010422:	bf00      	nop
 8010424:	e01d      	b.n	8010462 <tcp_input+0x756>
            goto aborted;
 8010426:	bf00      	nop
 8010428:	e01b      	b.n	8010462 <tcp_input+0x756>
              goto aborted;
 801042a:	bf00      	nop
 801042c:	e019      	b.n	8010462 <tcp_input+0x756>
 801042e:	bf00      	nop
 8010430:	2000cf3c 	.word	0x2000cf3c
 8010434:	2000cf4c 	.word	0x2000cf4c
 8010438:	2000cf6c 	.word	0x2000cf6c
 801043c:	2000cf69 	.word	0x2000cf69
 8010440:	2000cf64 	.word	0x2000cf64
 8010444:	2000cf68 	.word	0x2000cf68
 8010448:	2000cf66 	.word	0x2000cf66
 801044c:	2000cf70 	.word	0x2000cf70
 8010450:	2000cf30 	.word	0x2000cf30
 8010454:	0801bb7c 	.word	0x0801bb7c
 8010458:	0801bd30 	.word	0x0801bd30
 801045c:	0801bbc8 	.word	0x0801bbc8
          goto aborted;
 8010460:	bf00      	nop
    tcp_input_pcb = NULL;
 8010462:	4b27      	ldr	r3, [pc, #156]	; (8010500 <tcp_input+0x7f4>)
 8010464:	2200      	movs	r2, #0
 8010466:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8010468:	4b26      	ldr	r3, [pc, #152]	; (8010504 <tcp_input+0x7f8>)
 801046a:	2200      	movs	r2, #0
 801046c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801046e:	4b26      	ldr	r3, [pc, #152]	; (8010508 <tcp_input+0x7fc>)
 8010470:	685b      	ldr	r3, [r3, #4]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d03f      	beq.n	80104f6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8010476:	4b24      	ldr	r3, [pc, #144]	; (8010508 <tcp_input+0x7fc>)
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	4618      	mov	r0, r3
 801047c:	f7fd fb5c 	bl	800db38 <pbuf_free>
      inseg.p = NULL;
 8010480:	4b21      	ldr	r3, [pc, #132]	; (8010508 <tcp_input+0x7fc>)
 8010482:	2200      	movs	r2, #0
 8010484:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8010486:	e036      	b.n	80104f6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8010488:	4b20      	ldr	r3, [pc, #128]	; (801050c <tcp_input+0x800>)
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	899b      	ldrh	r3, [r3, #12]
 801048e:	b29b      	uxth	r3, r3
 8010490:	4618      	mov	r0, r3
 8010492:	f7fb ff1d 	bl	800c2d0 <lwip_htons>
 8010496:	4603      	mov	r3, r0
 8010498:	b2db      	uxtb	r3, r3
 801049a:	f003 0304 	and.w	r3, r3, #4
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d118      	bne.n	80104d4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104a2:	4b1b      	ldr	r3, [pc, #108]	; (8010510 <tcp_input+0x804>)
 80104a4:	6819      	ldr	r1, [r3, #0]
 80104a6:	4b1b      	ldr	r3, [pc, #108]	; (8010514 <tcp_input+0x808>)
 80104a8:	881b      	ldrh	r3, [r3, #0]
 80104aa:	461a      	mov	r2, r3
 80104ac:	4b1a      	ldr	r3, [pc, #104]	; (8010518 <tcp_input+0x80c>)
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104b2:	4b16      	ldr	r3, [pc, #88]	; (801050c <tcp_input+0x800>)
 80104b4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104b6:	885b      	ldrh	r3, [r3, #2]
 80104b8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80104ba:	4a14      	ldr	r2, [pc, #80]	; (801050c <tcp_input+0x800>)
 80104bc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80104be:	8812      	ldrh	r2, [r2, #0]
 80104c0:	b292      	uxth	r2, r2
 80104c2:	9202      	str	r2, [sp, #8]
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	4b15      	ldr	r3, [pc, #84]	; (801051c <tcp_input+0x810>)
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	4b15      	ldr	r3, [pc, #84]	; (8010520 <tcp_input+0x814>)
 80104cc:	4602      	mov	r2, r0
 80104ce:	2000      	movs	r0, #0
 80104d0:	f003 fc74 	bl	8013dbc <tcp_rst>
    pbuf_free(p);
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f7fd fb2f 	bl	800db38 <pbuf_free>
  return;
 80104da:	e00c      	b.n	80104f6 <tcp_input+0x7ea>
    goto dropped;
 80104dc:	bf00      	nop
 80104de:	e006      	b.n	80104ee <tcp_input+0x7e2>
    goto dropped;
 80104e0:	bf00      	nop
 80104e2:	e004      	b.n	80104ee <tcp_input+0x7e2>
    goto dropped;
 80104e4:	bf00      	nop
 80104e6:	e002      	b.n	80104ee <tcp_input+0x7e2>
      goto dropped;
 80104e8:	bf00      	nop
 80104ea:	e000      	b.n	80104ee <tcp_input+0x7e2>
      goto dropped;
 80104ec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80104ee:	6878      	ldr	r0, [r7, #4]
 80104f0:	f7fd fb22 	bl	800db38 <pbuf_free>
 80104f4:	e000      	b.n	80104f8 <tcp_input+0x7ec>
  return;
 80104f6:	bf00      	nop
}
 80104f8:	3724      	adds	r7, #36	; 0x24
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd90      	pop	{r4, r7, pc}
 80104fe:	bf00      	nop
 8010500:	2000cf70 	.word	0x2000cf70
 8010504:	2000cf6c 	.word	0x2000cf6c
 8010508:	2000cf3c 	.word	0x2000cf3c
 801050c:	2000cf4c 	.word	0x2000cf4c
 8010510:	2000cf60 	.word	0x2000cf60
 8010514:	2000cf66 	.word	0x2000cf66
 8010518:	2000cf5c 	.word	0x2000cf5c
 801051c:	200097c0 	.word	0x200097c0
 8010520:	200097c4 	.word	0x200097c4

08010524 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b082      	sub	sp, #8
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b00      	cmp	r3, #0
 8010530:	d106      	bne.n	8010540 <tcp_input_delayed_close+0x1c>
 8010532:	4b17      	ldr	r3, [pc, #92]	; (8010590 <tcp_input_delayed_close+0x6c>)
 8010534:	f240 225a 	movw	r2, #602	; 0x25a
 8010538:	4916      	ldr	r1, [pc, #88]	; (8010594 <tcp_input_delayed_close+0x70>)
 801053a:	4817      	ldr	r0, [pc, #92]	; (8010598 <tcp_input_delayed_close+0x74>)
 801053c:	f009 f846 	bl	80195cc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8010540:	4b16      	ldr	r3, [pc, #88]	; (801059c <tcp_input_delayed_close+0x78>)
 8010542:	781b      	ldrb	r3, [r3, #0]
 8010544:	f003 0310 	and.w	r3, r3, #16
 8010548:	2b00      	cmp	r3, #0
 801054a:	d01c      	beq.n	8010586 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	8b5b      	ldrh	r3, [r3, #26]
 8010550:	f003 0310 	and.w	r3, r3, #16
 8010554:	2b00      	cmp	r3, #0
 8010556:	d10d      	bne.n	8010574 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801055e:	2b00      	cmp	r3, #0
 8010560:	d008      	beq.n	8010574 <tcp_input_delayed_close+0x50>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	6912      	ldr	r2, [r2, #16]
 801056c:	f06f 010e 	mvn.w	r1, #14
 8010570:	4610      	mov	r0, r2
 8010572:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8010574:	6879      	ldr	r1, [r7, #4]
 8010576:	480a      	ldr	r0, [pc, #40]	; (80105a0 <tcp_input_delayed_close+0x7c>)
 8010578:	f7ff fa50 	bl	800fa1c <tcp_pcb_remove>
    tcp_free(pcb);
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f7fd fd97 	bl	800e0b0 <tcp_free>
    return 1;
 8010582:	2301      	movs	r3, #1
 8010584:	e000      	b.n	8010588 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8010586:	2300      	movs	r3, #0
}
 8010588:	4618      	mov	r0, r3
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}
 8010590:	0801bb7c 	.word	0x0801bb7c
 8010594:	0801bd4c 	.word	0x0801bd4c
 8010598:	0801bbc8 	.word	0x0801bbc8
 801059c:	2000cf69 	.word	0x2000cf69
 80105a0:	2000cf30 	.word	0x2000cf30

080105a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80105a4:	b590      	push	{r4, r7, lr}
 80105a6:	b08b      	sub	sp, #44	; 0x2c
 80105a8:	af04      	add	r7, sp, #16
 80105aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80105ac:	4b6f      	ldr	r3, [pc, #444]	; (801076c <tcp_listen_input+0x1c8>)
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	f003 0304 	and.w	r3, r3, #4
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	f040 80d2 	bne.w	801075e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d106      	bne.n	80105ce <tcp_listen_input+0x2a>
 80105c0:	4b6b      	ldr	r3, [pc, #428]	; (8010770 <tcp_listen_input+0x1cc>)
 80105c2:	f240 2281 	movw	r2, #641	; 0x281
 80105c6:	496b      	ldr	r1, [pc, #428]	; (8010774 <tcp_listen_input+0x1d0>)
 80105c8:	486b      	ldr	r0, [pc, #428]	; (8010778 <tcp_listen_input+0x1d4>)
 80105ca:	f008 ffff 	bl	80195cc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80105ce:	4b67      	ldr	r3, [pc, #412]	; (801076c <tcp_listen_input+0x1c8>)
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	f003 0310 	and.w	r3, r3, #16
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d019      	beq.n	801060e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105da:	4b68      	ldr	r3, [pc, #416]	; (801077c <tcp_listen_input+0x1d8>)
 80105dc:	6819      	ldr	r1, [r3, #0]
 80105de:	4b68      	ldr	r3, [pc, #416]	; (8010780 <tcp_listen_input+0x1dc>)
 80105e0:	881b      	ldrh	r3, [r3, #0]
 80105e2:	461a      	mov	r2, r3
 80105e4:	4b67      	ldr	r3, [pc, #412]	; (8010784 <tcp_listen_input+0x1e0>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105ea:	4b67      	ldr	r3, [pc, #412]	; (8010788 <tcp_listen_input+0x1e4>)
 80105ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105ee:	885b      	ldrh	r3, [r3, #2]
 80105f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105f2:	4a65      	ldr	r2, [pc, #404]	; (8010788 <tcp_listen_input+0x1e4>)
 80105f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105f6:	8812      	ldrh	r2, [r2, #0]
 80105f8:	b292      	uxth	r2, r2
 80105fa:	9202      	str	r2, [sp, #8]
 80105fc:	9301      	str	r3, [sp, #4]
 80105fe:	4b63      	ldr	r3, [pc, #396]	; (801078c <tcp_listen_input+0x1e8>)
 8010600:	9300      	str	r3, [sp, #0]
 8010602:	4b63      	ldr	r3, [pc, #396]	; (8010790 <tcp_listen_input+0x1ec>)
 8010604:	4602      	mov	r2, r0
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f003 fbd8 	bl	8013dbc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801060c:	e0a9      	b.n	8010762 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801060e:	4b57      	ldr	r3, [pc, #348]	; (801076c <tcp_listen_input+0x1c8>)
 8010610:	781b      	ldrb	r3, [r3, #0]
 8010612:	f003 0302 	and.w	r3, r3, #2
 8010616:	2b00      	cmp	r3, #0
 8010618:	f000 80a3 	beq.w	8010762 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	7d5b      	ldrb	r3, [r3, #21]
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff f859 	bl	800f6d8 <tcp_alloc>
 8010626:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010628:	697b      	ldr	r3, [r7, #20]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d111      	bne.n	8010652 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d00a      	beq.n	801064c <tcp_listen_input+0xa8>
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	699b      	ldr	r3, [r3, #24]
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	6910      	ldr	r0, [r2, #16]
 801063e:	f04f 32ff 	mov.w	r2, #4294967295
 8010642:	2100      	movs	r1, #0
 8010644:	4798      	blx	r3
 8010646:	4603      	mov	r3, r0
 8010648:	73bb      	strb	r3, [r7, #14]
      return;
 801064a:	e08b      	b.n	8010764 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801064c:	23f0      	movs	r3, #240	; 0xf0
 801064e:	73bb      	strb	r3, [r7, #14]
      return;
 8010650:	e088      	b.n	8010764 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010652:	4b50      	ldr	r3, [pc, #320]	; (8010794 <tcp_listen_input+0x1f0>)
 8010654:	695a      	ldr	r2, [r3, #20]
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801065a:	4b4e      	ldr	r3, [pc, #312]	; (8010794 <tcp_listen_input+0x1f0>)
 801065c:	691a      	ldr	r2, [r3, #16]
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	8ada      	ldrh	r2, [r3, #22]
 8010666:	697b      	ldr	r3, [r7, #20]
 8010668:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801066a:	4b47      	ldr	r3, [pc, #284]	; (8010788 <tcp_listen_input+0x1e4>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	b29a      	uxth	r2, r3
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010676:	697b      	ldr	r3, [r7, #20]
 8010678:	2203      	movs	r2, #3
 801067a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801067c:	4b41      	ldr	r3, [pc, #260]	; (8010784 <tcp_listen_input+0x1e0>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	1c5a      	adds	r2, r3, #1
 8010682:	697b      	ldr	r3, [r7, #20]
 8010684:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801068e:	6978      	ldr	r0, [r7, #20]
 8010690:	f7ff fa58 	bl	800fb44 <tcp_next_iss>
 8010694:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	693a      	ldr	r2, [r7, #16]
 801069a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801069c:	697b      	ldr	r3, [r7, #20]
 801069e:	693a      	ldr	r2, [r7, #16]
 80106a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80106a2:	697b      	ldr	r3, [r7, #20]
 80106a4:	693a      	ldr	r2, [r7, #16]
 80106a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	693a      	ldr	r2, [r7, #16]
 80106ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80106ae:	4b35      	ldr	r3, [pc, #212]	; (8010784 <tcp_listen_input+0x1e0>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	1e5a      	subs	r2, r3, #1
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	691a      	ldr	r2, [r3, #16]
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80106c0:	697b      	ldr	r3, [r7, #20]
 80106c2:	687a      	ldr	r2, [r7, #4]
 80106c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	7a5b      	ldrb	r3, [r3, #9]
 80106ca:	f003 030c 	and.w	r3, r3, #12
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	7a1a      	ldrb	r2, [r3, #8]
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80106dc:	4b2e      	ldr	r3, [pc, #184]	; (8010798 <tcp_listen_input+0x1f4>)
 80106de:	681a      	ldr	r2, [r3, #0]
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	60da      	str	r2, [r3, #12]
 80106e4:	4a2c      	ldr	r2, [pc, #176]	; (8010798 <tcp_listen_input+0x1f4>)
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	6013      	str	r3, [r2, #0]
 80106ea:	f003 fd29 	bl	8014140 <tcp_timer_needed>
 80106ee:	4b2b      	ldr	r3, [pc, #172]	; (801079c <tcp_listen_input+0x1f8>)
 80106f0:	2201      	movs	r2, #1
 80106f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80106f4:	6978      	ldr	r0, [r7, #20]
 80106f6:	f001 fd8f 	bl	8012218 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80106fa:	4b23      	ldr	r3, [pc, #140]	; (8010788 <tcp_listen_input+0x1e4>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	89db      	ldrh	r3, [r3, #14]
 8010700:	b29a      	uxth	r2, r3
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	3304      	adds	r3, #4
 801071c:	4618      	mov	r0, r3
 801071e:	f007 fab7 	bl	8017c90 <ip4_route>
 8010722:	4601      	mov	r1, r0
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	3304      	adds	r3, #4
 8010728:	461a      	mov	r2, r3
 801072a:	4620      	mov	r0, r4
 801072c:	f7ff fa30 	bl	800fb90 <tcp_eff_send_mss_netif>
 8010730:	4603      	mov	r3, r0
 8010732:	461a      	mov	r2, r3
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010738:	2112      	movs	r1, #18
 801073a:	6978      	ldr	r0, [r7, #20]
 801073c:	f002 fc9c 	bl	8013078 <tcp_enqueue_flags>
 8010740:	4603      	mov	r3, r0
 8010742:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010744:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010748:	2b00      	cmp	r3, #0
 801074a:	d004      	beq.n	8010756 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801074c:	2100      	movs	r1, #0
 801074e:	6978      	ldr	r0, [r7, #20]
 8010750:	f7fd fed8 	bl	800e504 <tcp_abandon>
      return;
 8010754:	e006      	b.n	8010764 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010756:	6978      	ldr	r0, [r7, #20]
 8010758:	f002 fd7c 	bl	8013254 <tcp_output>
  return;
 801075c:	e001      	b.n	8010762 <tcp_listen_input+0x1be>
    return;
 801075e:	bf00      	nop
 8010760:	e000      	b.n	8010764 <tcp_listen_input+0x1c0>
  return;
 8010762:	bf00      	nop
}
 8010764:	371c      	adds	r7, #28
 8010766:	46bd      	mov	sp, r7
 8010768:	bd90      	pop	{r4, r7, pc}
 801076a:	bf00      	nop
 801076c:	2000cf68 	.word	0x2000cf68
 8010770:	0801bb7c 	.word	0x0801bb7c
 8010774:	0801bd74 	.word	0x0801bd74
 8010778:	0801bbc8 	.word	0x0801bbc8
 801077c:	2000cf60 	.word	0x2000cf60
 8010780:	2000cf66 	.word	0x2000cf66
 8010784:	2000cf5c 	.word	0x2000cf5c
 8010788:	2000cf4c 	.word	0x2000cf4c
 801078c:	200097c0 	.word	0x200097c0
 8010790:	200097c4 	.word	0x200097c4
 8010794:	200097b0 	.word	0x200097b0
 8010798:	2000cf30 	.word	0x2000cf30
 801079c:	2000cf38 	.word	0x2000cf38

080107a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b086      	sub	sp, #24
 80107a4:	af04      	add	r7, sp, #16
 80107a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80107a8:	4b2f      	ldr	r3, [pc, #188]	; (8010868 <tcp_timewait_input+0xc8>)
 80107aa:	781b      	ldrb	r3, [r3, #0]
 80107ac:	f003 0304 	and.w	r3, r3, #4
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d153      	bne.n	801085c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d106      	bne.n	80107c8 <tcp_timewait_input+0x28>
 80107ba:	4b2c      	ldr	r3, [pc, #176]	; (801086c <tcp_timewait_input+0xcc>)
 80107bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80107c0:	492b      	ldr	r1, [pc, #172]	; (8010870 <tcp_timewait_input+0xd0>)
 80107c2:	482c      	ldr	r0, [pc, #176]	; (8010874 <tcp_timewait_input+0xd4>)
 80107c4:	f008 ff02 	bl	80195cc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80107c8:	4b27      	ldr	r3, [pc, #156]	; (8010868 <tcp_timewait_input+0xc8>)
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	f003 0302 	and.w	r3, r3, #2
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d02a      	beq.n	801082a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80107d4:	4b28      	ldr	r3, [pc, #160]	; (8010878 <tcp_timewait_input+0xd8>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	db2d      	blt.n	801083e <tcp_timewait_input+0x9e>
 80107e2:	4b25      	ldr	r3, [pc, #148]	; (8010878 <tcp_timewait_input+0xd8>)
 80107e4:	681a      	ldr	r2, [r3, #0]
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ea:	6879      	ldr	r1, [r7, #4]
 80107ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80107ee:	440b      	add	r3, r1
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	dc23      	bgt.n	801083e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107f6:	4b21      	ldr	r3, [pc, #132]	; (801087c <tcp_timewait_input+0xdc>)
 80107f8:	6819      	ldr	r1, [r3, #0]
 80107fa:	4b21      	ldr	r3, [pc, #132]	; (8010880 <tcp_timewait_input+0xe0>)
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	461a      	mov	r2, r3
 8010800:	4b1d      	ldr	r3, [pc, #116]	; (8010878 <tcp_timewait_input+0xd8>)
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010806:	4b1f      	ldr	r3, [pc, #124]	; (8010884 <tcp_timewait_input+0xe4>)
 8010808:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801080a:	885b      	ldrh	r3, [r3, #2]
 801080c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801080e:	4a1d      	ldr	r2, [pc, #116]	; (8010884 <tcp_timewait_input+0xe4>)
 8010810:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010812:	8812      	ldrh	r2, [r2, #0]
 8010814:	b292      	uxth	r2, r2
 8010816:	9202      	str	r2, [sp, #8]
 8010818:	9301      	str	r3, [sp, #4]
 801081a:	4b1b      	ldr	r3, [pc, #108]	; (8010888 <tcp_timewait_input+0xe8>)
 801081c:	9300      	str	r3, [sp, #0]
 801081e:	4b1b      	ldr	r3, [pc, #108]	; (801088c <tcp_timewait_input+0xec>)
 8010820:	4602      	mov	r2, r0
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f003 faca 	bl	8013dbc <tcp_rst>
      return;
 8010828:	e01b      	b.n	8010862 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801082a:	4b0f      	ldr	r3, [pc, #60]	; (8010868 <tcp_timewait_input+0xc8>)
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	f003 0301 	and.w	r3, r3, #1
 8010832:	2b00      	cmp	r3, #0
 8010834:	d003      	beq.n	801083e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010836:	4b16      	ldr	r3, [pc, #88]	; (8010890 <tcp_timewait_input+0xf0>)
 8010838:	681a      	ldr	r2, [r3, #0]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801083e:	4b10      	ldr	r3, [pc, #64]	; (8010880 <tcp_timewait_input+0xe0>)
 8010840:	881b      	ldrh	r3, [r3, #0]
 8010842:	2b00      	cmp	r3, #0
 8010844:	d00c      	beq.n	8010860 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	8b5b      	ldrh	r3, [r3, #26]
 801084a:	f043 0302 	orr.w	r3, r3, #2
 801084e:	b29a      	uxth	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010854:	6878      	ldr	r0, [r7, #4]
 8010856:	f002 fcfd 	bl	8013254 <tcp_output>
  }
  return;
 801085a:	e001      	b.n	8010860 <tcp_timewait_input+0xc0>
    return;
 801085c:	bf00      	nop
 801085e:	e000      	b.n	8010862 <tcp_timewait_input+0xc2>
  return;
 8010860:	bf00      	nop
}
 8010862:	3708      	adds	r7, #8
 8010864:	46bd      	mov	sp, r7
 8010866:	bd80      	pop	{r7, pc}
 8010868:	2000cf68 	.word	0x2000cf68
 801086c:	0801bb7c 	.word	0x0801bb7c
 8010870:	0801bd94 	.word	0x0801bd94
 8010874:	0801bbc8 	.word	0x0801bbc8
 8010878:	2000cf5c 	.word	0x2000cf5c
 801087c:	2000cf60 	.word	0x2000cf60
 8010880:	2000cf66 	.word	0x2000cf66
 8010884:	2000cf4c 	.word	0x2000cf4c
 8010888:	200097c0 	.word	0x200097c0
 801088c:	200097c4 	.word	0x200097c4
 8010890:	2000cf24 	.word	0x2000cf24

08010894 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010894:	b590      	push	{r4, r7, lr}
 8010896:	b08d      	sub	sp, #52	; 0x34
 8010898:	af04      	add	r7, sp, #16
 801089a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801089c:	2300      	movs	r3, #0
 801089e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80108a0:	2300      	movs	r3, #0
 80108a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d106      	bne.n	80108b8 <tcp_process+0x24>
 80108aa:	4b9d      	ldr	r3, [pc, #628]	; (8010b20 <tcp_process+0x28c>)
 80108ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80108b0:	499c      	ldr	r1, [pc, #624]	; (8010b24 <tcp_process+0x290>)
 80108b2:	489d      	ldr	r0, [pc, #628]	; (8010b28 <tcp_process+0x294>)
 80108b4:	f008 fe8a 	bl	80195cc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80108b8:	4b9c      	ldr	r3, [pc, #624]	; (8010b2c <tcp_process+0x298>)
 80108ba:	781b      	ldrb	r3, [r3, #0]
 80108bc:	f003 0304 	and.w	r3, r3, #4
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d04e      	beq.n	8010962 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	7d1b      	ldrb	r3, [r3, #20]
 80108c8:	2b02      	cmp	r3, #2
 80108ca:	d108      	bne.n	80108de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108d0:	4b97      	ldr	r3, [pc, #604]	; (8010b30 <tcp_process+0x29c>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d123      	bne.n	8010920 <tcp_process+0x8c>
        acceptable = 1;
 80108d8:	2301      	movs	r3, #1
 80108da:	76fb      	strb	r3, [r7, #27]
 80108dc:	e020      	b.n	8010920 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108e2:	4b94      	ldr	r3, [pc, #592]	; (8010b34 <tcp_process+0x2a0>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	429a      	cmp	r2, r3
 80108e8:	d102      	bne.n	80108f0 <tcp_process+0x5c>
        acceptable = 1;
 80108ea:	2301      	movs	r3, #1
 80108ec:	76fb      	strb	r3, [r7, #27]
 80108ee:	e017      	b.n	8010920 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80108f0:	4b90      	ldr	r3, [pc, #576]	; (8010b34 <tcp_process+0x2a0>)
 80108f2:	681a      	ldr	r2, [r3, #0]
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	db10      	blt.n	8010920 <tcp_process+0x8c>
 80108fe:	4b8d      	ldr	r3, [pc, #564]	; (8010b34 <tcp_process+0x2a0>)
 8010900:	681a      	ldr	r2, [r3, #0]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010906:	6879      	ldr	r1, [r7, #4]
 8010908:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801090a:	440b      	add	r3, r1
 801090c:	1ad3      	subs	r3, r2, r3
 801090e:	2b00      	cmp	r3, #0
 8010910:	dc06      	bgt.n	8010920 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	8b5b      	ldrh	r3, [r3, #26]
 8010916:	f043 0302 	orr.w	r3, r3, #2
 801091a:	b29a      	uxth	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010920:	7efb      	ldrb	r3, [r7, #27]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d01b      	beq.n	801095e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	7d1b      	ldrb	r3, [r3, #20]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <tcp_process+0xa8>
 801092e:	4b7c      	ldr	r3, [pc, #496]	; (8010b20 <tcp_process+0x28c>)
 8010930:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010934:	4980      	ldr	r1, [pc, #512]	; (8010b38 <tcp_process+0x2a4>)
 8010936:	487c      	ldr	r0, [pc, #496]	; (8010b28 <tcp_process+0x294>)
 8010938:	f008 fe48 	bl	80195cc <iprintf>
      recv_flags |= TF_RESET;
 801093c:	4b7f      	ldr	r3, [pc, #508]	; (8010b3c <tcp_process+0x2a8>)
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	f043 0308 	orr.w	r3, r3, #8
 8010944:	b2da      	uxtb	r2, r3
 8010946:	4b7d      	ldr	r3, [pc, #500]	; (8010b3c <tcp_process+0x2a8>)
 8010948:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	8b5b      	ldrh	r3, [r3, #26]
 801094e:	f023 0301 	bic.w	r3, r3, #1
 8010952:	b29a      	uxth	r2, r3
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010958:	f06f 030d 	mvn.w	r3, #13
 801095c:	e37a      	b.n	8011054 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801095e:	2300      	movs	r3, #0
 8010960:	e378      	b.n	8011054 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010962:	4b72      	ldr	r3, [pc, #456]	; (8010b2c <tcp_process+0x298>)
 8010964:	781b      	ldrb	r3, [r3, #0]
 8010966:	f003 0302 	and.w	r3, r3, #2
 801096a:	2b00      	cmp	r3, #0
 801096c:	d010      	beq.n	8010990 <tcp_process+0xfc>
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	7d1b      	ldrb	r3, [r3, #20]
 8010972:	2b02      	cmp	r3, #2
 8010974:	d00c      	beq.n	8010990 <tcp_process+0xfc>
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	7d1b      	ldrb	r3, [r3, #20]
 801097a:	2b03      	cmp	r3, #3
 801097c:	d008      	beq.n	8010990 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	8b5b      	ldrh	r3, [r3, #26]
 8010982:	f043 0302 	orr.w	r3, r3, #2
 8010986:	b29a      	uxth	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801098c:	2300      	movs	r3, #0
 801098e:	e361      	b.n	8011054 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	8b5b      	ldrh	r3, [r3, #26]
 8010994:	f003 0310 	and.w	r3, r3, #16
 8010998:	2b00      	cmp	r3, #0
 801099a:	d103      	bne.n	80109a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801099c:	4b68      	ldr	r3, [pc, #416]	; (8010b40 <tcp_process+0x2ac>)
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	2200      	movs	r2, #0
 80109a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2200      	movs	r2, #0
 80109b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80109b4:	6878      	ldr	r0, [r7, #4]
 80109b6:	f001 fc2f 	bl	8012218 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	7d1b      	ldrb	r3, [r3, #20]
 80109be:	3b02      	subs	r3, #2
 80109c0:	2b07      	cmp	r3, #7
 80109c2:	f200 8337 	bhi.w	8011034 <tcp_process+0x7a0>
 80109c6:	a201      	add	r2, pc, #4	; (adr r2, 80109cc <tcp_process+0x138>)
 80109c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109cc:	080109ed 	.word	0x080109ed
 80109d0:	08010c1d 	.word	0x08010c1d
 80109d4:	08010d95 	.word	0x08010d95
 80109d8:	08010dbf 	.word	0x08010dbf
 80109dc:	08010ee3 	.word	0x08010ee3
 80109e0:	08010d95 	.word	0x08010d95
 80109e4:	08010f6f 	.word	0x08010f6f
 80109e8:	08010fff 	.word	0x08010fff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80109ec:	4b4f      	ldr	r3, [pc, #316]	; (8010b2c <tcp_process+0x298>)
 80109ee:	781b      	ldrb	r3, [r3, #0]
 80109f0:	f003 0310 	and.w	r3, r3, #16
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	f000 80e4 	beq.w	8010bc2 <tcp_process+0x32e>
 80109fa:	4b4c      	ldr	r3, [pc, #304]	; (8010b2c <tcp_process+0x298>)
 80109fc:	781b      	ldrb	r3, [r3, #0]
 80109fe:	f003 0302 	and.w	r3, r3, #2
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	f000 80dd 	beq.w	8010bc2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a0c:	1c5a      	adds	r2, r3, #1
 8010a0e:	4b48      	ldr	r3, [pc, #288]	; (8010b30 <tcp_process+0x29c>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	f040 80d5 	bne.w	8010bc2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010a18:	4b46      	ldr	r3, [pc, #280]	; (8010b34 <tcp_process+0x2a0>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	1c5a      	adds	r2, r3, #1
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010a2a:	4b41      	ldr	r3, [pc, #260]	; (8010b30 <tcp_process+0x29c>)
 8010a2c:	681a      	ldr	r2, [r3, #0]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010a32:	4b44      	ldr	r3, [pc, #272]	; (8010b44 <tcp_process+0x2b0>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	89db      	ldrh	r3, [r3, #14]
 8010a38:	b29a      	uxth	r2, r3
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010a4c:	4b39      	ldr	r3, [pc, #228]	; (8010b34 <tcp_process+0x2a0>)
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	1e5a      	subs	r2, r3, #1
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2204      	movs	r2, #4
 8010a5a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	3304      	adds	r3, #4
 8010a64:	4618      	mov	r0, r3
 8010a66:	f007 f913 	bl	8017c90 <ip4_route>
 8010a6a:	4601      	mov	r1, r0
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	3304      	adds	r3, #4
 8010a70:	461a      	mov	r2, r3
 8010a72:	4620      	mov	r0, r4
 8010a74:	f7ff f88c 	bl	800fb90 <tcp_eff_send_mss_netif>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a84:	009a      	lsls	r2, r3, #2
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a8a:	005b      	lsls	r3, r3, #1
 8010a8c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010a90:	428b      	cmp	r3, r1
 8010a92:	bf38      	it	cc
 8010a94:	460b      	movcc	r3, r1
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d204      	bcs.n	8010aa4 <tcp_process+0x210>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	b29b      	uxth	r3, r3
 8010aa2:	e00d      	b.n	8010ac0 <tcp_process+0x22c>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010aa8:	005b      	lsls	r3, r3, #1
 8010aaa:	f241 121c 	movw	r2, #4380	; 0x111c
 8010aae:	4293      	cmp	r3, r2
 8010ab0:	d904      	bls.n	8010abc <tcp_process+0x228>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	b29b      	uxth	r3, r3
 8010aba:	e001      	b.n	8010ac0 <tcp_process+0x22c>
 8010abc:	f241 131c 	movw	r3, #4380	; 0x111c
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d106      	bne.n	8010ade <tcp_process+0x24a>
 8010ad0:	4b13      	ldr	r3, [pc, #76]	; (8010b20 <tcp_process+0x28c>)
 8010ad2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010ad6:	491c      	ldr	r1, [pc, #112]	; (8010b48 <tcp_process+0x2b4>)
 8010ad8:	4813      	ldr	r0, [pc, #76]	; (8010b28 <tcp_process+0x294>)
 8010ada:	f008 fd77 	bl	80195cc <iprintf>
        --pcb->snd_queuelen;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	b29a      	uxth	r2, r3
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010af2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d12a      	bne.n	8010b50 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010afe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010b00:	69fb      	ldr	r3, [r7, #28]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d106      	bne.n	8010b14 <tcp_process+0x280>
 8010b06:	4b06      	ldr	r3, [pc, #24]	; (8010b20 <tcp_process+0x28c>)
 8010b08:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010b0c:	490f      	ldr	r1, [pc, #60]	; (8010b4c <tcp_process+0x2b8>)
 8010b0e:	4806      	ldr	r0, [pc, #24]	; (8010b28 <tcp_process+0x294>)
 8010b10:	f008 fd5c 	bl	80195cc <iprintf>
          pcb->unsent = rseg->next;
 8010b14:	69fb      	ldr	r3, [r7, #28]
 8010b16:	681a      	ldr	r2, [r3, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	66da      	str	r2, [r3, #108]	; 0x6c
 8010b1c:	e01c      	b.n	8010b58 <tcp_process+0x2c4>
 8010b1e:	bf00      	nop
 8010b20:	0801bb7c 	.word	0x0801bb7c
 8010b24:	0801bdb4 	.word	0x0801bdb4
 8010b28:	0801bbc8 	.word	0x0801bbc8
 8010b2c:	2000cf68 	.word	0x2000cf68
 8010b30:	2000cf60 	.word	0x2000cf60
 8010b34:	2000cf5c 	.word	0x2000cf5c
 8010b38:	0801bdd0 	.word	0x0801bdd0
 8010b3c:	2000cf69 	.word	0x2000cf69
 8010b40:	2000cf24 	.word	0x2000cf24
 8010b44:	2000cf4c 	.word	0x2000cf4c
 8010b48:	0801bdf0 	.word	0x0801bdf0
 8010b4c:	0801be08 	.word	0x0801be08
        } else {
          pcb->unacked = rseg->next;
 8010b50:	69fb      	ldr	r3, [r7, #28]
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010b58:	69f8      	ldr	r0, [r7, #28]
 8010b5a:	f7fe fc36 	bl	800f3ca <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d104      	bne.n	8010b70 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010b6c:	861a      	strh	r2, [r3, #48]	; 0x30
 8010b6e:	e006      	b.n	8010b7e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	2200      	movs	r2, #0
 8010b74:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	2200      	movs	r2, #0
 8010b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d00a      	beq.n	8010b9e <tcp_process+0x30a>
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b8e:	687a      	ldr	r2, [r7, #4]
 8010b90:	6910      	ldr	r0, [r2, #16]
 8010b92:	2200      	movs	r2, #0
 8010b94:	6879      	ldr	r1, [r7, #4]
 8010b96:	4798      	blx	r3
 8010b98:	4603      	mov	r3, r0
 8010b9a:	76bb      	strb	r3, [r7, #26]
 8010b9c:	e001      	b.n	8010ba2 <tcp_process+0x30e>
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010ba2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ba6:	f113 0f0d 	cmn.w	r3, #13
 8010baa:	d102      	bne.n	8010bb2 <tcp_process+0x31e>
          return ERR_ABRT;
 8010bac:	f06f 030c 	mvn.w	r3, #12
 8010bb0:	e250      	b.n	8011054 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	8b5b      	ldrh	r3, [r3, #26]
 8010bb6:	f043 0302 	orr.w	r3, r3, #2
 8010bba:	b29a      	uxth	r2, r3
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010bc0:	e23a      	b.n	8011038 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010bc2:	4b98      	ldr	r3, [pc, #608]	; (8010e24 <tcp_process+0x590>)
 8010bc4:	781b      	ldrb	r3, [r3, #0]
 8010bc6:	f003 0310 	and.w	r3, r3, #16
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f000 8234 	beq.w	8011038 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bd0:	4b95      	ldr	r3, [pc, #596]	; (8010e28 <tcp_process+0x594>)
 8010bd2:	6819      	ldr	r1, [r3, #0]
 8010bd4:	4b95      	ldr	r3, [pc, #596]	; (8010e2c <tcp_process+0x598>)
 8010bd6:	881b      	ldrh	r3, [r3, #0]
 8010bd8:	461a      	mov	r2, r3
 8010bda:	4b95      	ldr	r3, [pc, #596]	; (8010e30 <tcp_process+0x59c>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010be0:	4b94      	ldr	r3, [pc, #592]	; (8010e34 <tcp_process+0x5a0>)
 8010be2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010be4:	885b      	ldrh	r3, [r3, #2]
 8010be6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010be8:	4a92      	ldr	r2, [pc, #584]	; (8010e34 <tcp_process+0x5a0>)
 8010bea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010bec:	8812      	ldrh	r2, [r2, #0]
 8010bee:	b292      	uxth	r2, r2
 8010bf0:	9202      	str	r2, [sp, #8]
 8010bf2:	9301      	str	r3, [sp, #4]
 8010bf4:	4b90      	ldr	r3, [pc, #576]	; (8010e38 <tcp_process+0x5a4>)
 8010bf6:	9300      	str	r3, [sp, #0]
 8010bf8:	4b90      	ldr	r3, [pc, #576]	; (8010e3c <tcp_process+0x5a8>)
 8010bfa:	4602      	mov	r2, r0
 8010bfc:	6878      	ldr	r0, [r7, #4]
 8010bfe:	f003 f8dd 	bl	8013dbc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c08:	2b05      	cmp	r3, #5
 8010c0a:	f200 8215 	bhi.w	8011038 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	2200      	movs	r2, #0
 8010c12:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f002 fea9 	bl	801396c <tcp_rexmit_rto>
      break;
 8010c1a:	e20d      	b.n	8011038 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010c1c:	4b81      	ldr	r3, [pc, #516]	; (8010e24 <tcp_process+0x590>)
 8010c1e:	781b      	ldrb	r3, [r3, #0]
 8010c20:	f003 0310 	and.w	r3, r3, #16
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	f000 80a1 	beq.w	8010d6c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c2a:	4b7f      	ldr	r3, [pc, #508]	; (8010e28 <tcp_process+0x594>)
 8010c2c:	681a      	ldr	r2, [r3, #0]
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c32:	1ad3      	subs	r3, r2, r3
 8010c34:	3b01      	subs	r3, #1
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	db7e      	blt.n	8010d38 <tcp_process+0x4a4>
 8010c3a:	4b7b      	ldr	r3, [pc, #492]	; (8010e28 <tcp_process+0x594>)
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c42:	1ad3      	subs	r3, r2, r3
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	dc77      	bgt.n	8010d38 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2204      	movs	r2, #4
 8010c4c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d102      	bne.n	8010c5c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010c56:	23fa      	movs	r3, #250	; 0xfa
 8010c58:	76bb      	strb	r3, [r7, #26]
 8010c5a:	e01d      	b.n	8010c98 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c60:	699b      	ldr	r3, [r3, #24]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d106      	bne.n	8010c74 <tcp_process+0x3e0>
 8010c66:	4b76      	ldr	r3, [pc, #472]	; (8010e40 <tcp_process+0x5ac>)
 8010c68:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010c6c:	4975      	ldr	r1, [pc, #468]	; (8010e44 <tcp_process+0x5b0>)
 8010c6e:	4876      	ldr	r0, [pc, #472]	; (8010e48 <tcp_process+0x5b4>)
 8010c70:	f008 fcac 	bl	80195cc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c78:	699b      	ldr	r3, [r3, #24]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d00a      	beq.n	8010c94 <tcp_process+0x400>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010c82:	699b      	ldr	r3, [r3, #24]
 8010c84:	687a      	ldr	r2, [r7, #4]
 8010c86:	6910      	ldr	r0, [r2, #16]
 8010c88:	2200      	movs	r2, #0
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	4798      	blx	r3
 8010c8e:	4603      	mov	r3, r0
 8010c90:	76bb      	strb	r3, [r7, #26]
 8010c92:	e001      	b.n	8010c98 <tcp_process+0x404>
 8010c94:	23f0      	movs	r3, #240	; 0xf0
 8010c96:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010c98:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d00a      	beq.n	8010cb6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010ca0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010ca4:	f113 0f0d 	cmn.w	r3, #13
 8010ca8:	d002      	beq.n	8010cb0 <tcp_process+0x41c>
              tcp_abort(pcb);
 8010caa:	6878      	ldr	r0, [r7, #4]
 8010cac:	f7fd fce8 	bl	800e680 <tcp_abort>
            }
            return ERR_ABRT;
 8010cb0:	f06f 030c 	mvn.w	r3, #12
 8010cb4:	e1ce      	b.n	8011054 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010cb6:	6878      	ldr	r0, [r7, #4]
 8010cb8:	f000 fae0 	bl	801127c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8010cbc:	4b63      	ldr	r3, [pc, #396]	; (8010e4c <tcp_process+0x5b8>)
 8010cbe:	881b      	ldrh	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d005      	beq.n	8010cd0 <tcp_process+0x43c>
            recv_acked--;
 8010cc4:	4b61      	ldr	r3, [pc, #388]	; (8010e4c <tcp_process+0x5b8>)
 8010cc6:	881b      	ldrh	r3, [r3, #0]
 8010cc8:	3b01      	subs	r3, #1
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	4b5f      	ldr	r3, [pc, #380]	; (8010e4c <tcp_process+0x5b8>)
 8010cce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cd4:	009a      	lsls	r2, r3, #2
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cda:	005b      	lsls	r3, r3, #1
 8010cdc:	f241 111c 	movw	r1, #4380	; 0x111c
 8010ce0:	428b      	cmp	r3, r1
 8010ce2:	bf38      	it	cc
 8010ce4:	460b      	movcc	r3, r1
 8010ce6:	429a      	cmp	r2, r3
 8010ce8:	d204      	bcs.n	8010cf4 <tcp_process+0x460>
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	b29b      	uxth	r3, r3
 8010cf2:	e00d      	b.n	8010d10 <tcp_process+0x47c>
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	f241 121c 	movw	r2, #4380	; 0x111c
 8010cfe:	4293      	cmp	r3, r2
 8010d00:	d904      	bls.n	8010d0c <tcp_process+0x478>
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d06:	005b      	lsls	r3, r3, #1
 8010d08:	b29b      	uxth	r3, r3
 8010d0a:	e001      	b.n	8010d10 <tcp_process+0x47c>
 8010d0c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010d16:	4b4e      	ldr	r3, [pc, #312]	; (8010e50 <tcp_process+0x5bc>)
 8010d18:	781b      	ldrb	r3, [r3, #0]
 8010d1a:	f003 0320 	and.w	r3, r3, #32
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d037      	beq.n	8010d92 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	8b5b      	ldrh	r3, [r3, #26]
 8010d26:	f043 0302 	orr.w	r3, r3, #2
 8010d2a:	b29a      	uxth	r2, r3
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2207      	movs	r2, #7
 8010d34:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010d36:	e02c      	b.n	8010d92 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d38:	4b3b      	ldr	r3, [pc, #236]	; (8010e28 <tcp_process+0x594>)
 8010d3a:	6819      	ldr	r1, [r3, #0]
 8010d3c:	4b3b      	ldr	r3, [pc, #236]	; (8010e2c <tcp_process+0x598>)
 8010d3e:	881b      	ldrh	r3, [r3, #0]
 8010d40:	461a      	mov	r2, r3
 8010d42:	4b3b      	ldr	r3, [pc, #236]	; (8010e30 <tcp_process+0x59c>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d48:	4b3a      	ldr	r3, [pc, #232]	; (8010e34 <tcp_process+0x5a0>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d4c:	885b      	ldrh	r3, [r3, #2]
 8010d4e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010d50:	4a38      	ldr	r2, [pc, #224]	; (8010e34 <tcp_process+0x5a0>)
 8010d52:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010d54:	8812      	ldrh	r2, [r2, #0]
 8010d56:	b292      	uxth	r2, r2
 8010d58:	9202      	str	r2, [sp, #8]
 8010d5a:	9301      	str	r3, [sp, #4]
 8010d5c:	4b36      	ldr	r3, [pc, #216]	; (8010e38 <tcp_process+0x5a4>)
 8010d5e:	9300      	str	r3, [sp, #0]
 8010d60:	4b36      	ldr	r3, [pc, #216]	; (8010e3c <tcp_process+0x5a8>)
 8010d62:	4602      	mov	r2, r0
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f003 f829 	bl	8013dbc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010d6a:	e167      	b.n	801103c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010d6c:	4b2d      	ldr	r3, [pc, #180]	; (8010e24 <tcp_process+0x590>)
 8010d6e:	781b      	ldrb	r3, [r3, #0]
 8010d70:	f003 0302 	and.w	r3, r3, #2
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	f000 8161 	beq.w	801103c <tcp_process+0x7a8>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d7e:	1e5a      	subs	r2, r3, #1
 8010d80:	4b2b      	ldr	r3, [pc, #172]	; (8010e30 <tcp_process+0x59c>)
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	429a      	cmp	r2, r3
 8010d86:	f040 8159 	bne.w	801103c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f002 fe10 	bl	80139b0 <tcp_rexmit>
      break;
 8010d90:	e154      	b.n	801103c <tcp_process+0x7a8>
 8010d92:	e153      	b.n	801103c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f000 fa71 	bl	801127c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8010d9a:	4b2d      	ldr	r3, [pc, #180]	; (8010e50 <tcp_process+0x5bc>)
 8010d9c:	781b      	ldrb	r3, [r3, #0]
 8010d9e:	f003 0320 	and.w	r3, r3, #32
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f000 814c 	beq.w	8011040 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	8b5b      	ldrh	r3, [r3, #26]
 8010dac:	f043 0302 	orr.w	r3, r3, #2
 8010db0:	b29a      	uxth	r2, r3
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	2207      	movs	r2, #7
 8010dba:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010dbc:	e140      	b.n	8011040 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 fa5c 	bl	801127c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010dc4:	4b22      	ldr	r3, [pc, #136]	; (8010e50 <tcp_process+0x5bc>)
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	f003 0320 	and.w	r3, r3, #32
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d071      	beq.n	8010eb4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010dd0:	4b14      	ldr	r3, [pc, #80]	; (8010e24 <tcp_process+0x590>)
 8010dd2:	781b      	ldrb	r3, [r3, #0]
 8010dd4:	f003 0310 	and.w	r3, r3, #16
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d060      	beq.n	8010e9e <tcp_process+0x60a>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010de0:	4b11      	ldr	r3, [pc, #68]	; (8010e28 <tcp_process+0x594>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d15a      	bne.n	8010e9e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d156      	bne.n	8010e9e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	8b5b      	ldrh	r3, [r3, #26]
 8010df4:	f043 0302 	orr.w	r3, r3, #2
 8010df8:	b29a      	uxth	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	f7fe fdbc 	bl	800f97c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010e04:	4b13      	ldr	r3, [pc, #76]	; (8010e54 <tcp_process+0x5c0>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	687a      	ldr	r2, [r7, #4]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d105      	bne.n	8010e1a <tcp_process+0x586>
 8010e0e:	4b11      	ldr	r3, [pc, #68]	; (8010e54 <tcp_process+0x5c0>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	4a0f      	ldr	r2, [pc, #60]	; (8010e54 <tcp_process+0x5c0>)
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	e02e      	b.n	8010e78 <tcp_process+0x5e4>
 8010e1a:	4b0e      	ldr	r3, [pc, #56]	; (8010e54 <tcp_process+0x5c0>)
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	617b      	str	r3, [r7, #20]
 8010e20:	e027      	b.n	8010e72 <tcp_process+0x5de>
 8010e22:	bf00      	nop
 8010e24:	2000cf68 	.word	0x2000cf68
 8010e28:	2000cf60 	.word	0x2000cf60
 8010e2c:	2000cf66 	.word	0x2000cf66
 8010e30:	2000cf5c 	.word	0x2000cf5c
 8010e34:	2000cf4c 	.word	0x2000cf4c
 8010e38:	200097c0 	.word	0x200097c0
 8010e3c:	200097c4 	.word	0x200097c4
 8010e40:	0801bb7c 	.word	0x0801bb7c
 8010e44:	0801be1c 	.word	0x0801be1c
 8010e48:	0801bbc8 	.word	0x0801bbc8
 8010e4c:	2000cf64 	.word	0x2000cf64
 8010e50:	2000cf69 	.word	0x2000cf69
 8010e54:	2000cf30 	.word	0x2000cf30
 8010e58:	697b      	ldr	r3, [r7, #20]
 8010e5a:	68db      	ldr	r3, [r3, #12]
 8010e5c:	687a      	ldr	r2, [r7, #4]
 8010e5e:	429a      	cmp	r2, r3
 8010e60:	d104      	bne.n	8010e6c <tcp_process+0x5d8>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	68da      	ldr	r2, [r3, #12]
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	60da      	str	r2, [r3, #12]
 8010e6a:	e005      	b.n	8010e78 <tcp_process+0x5e4>
 8010e6c:	697b      	ldr	r3, [r7, #20]
 8010e6e:	68db      	ldr	r3, [r3, #12]
 8010e70:	617b      	str	r3, [r7, #20]
 8010e72:	697b      	ldr	r3, [r7, #20]
 8010e74:	2b00      	cmp	r3, #0
 8010e76:	d1ef      	bne.n	8010e58 <tcp_process+0x5c4>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	60da      	str	r2, [r3, #12]
 8010e7e:	4b77      	ldr	r3, [pc, #476]	; (801105c <tcp_process+0x7c8>)
 8010e80:	2201      	movs	r2, #1
 8010e82:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	220a      	movs	r2, #10
 8010e88:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010e8a:	4b75      	ldr	r3, [pc, #468]	; (8011060 <tcp_process+0x7cc>)
 8010e8c:	681a      	ldr	r2, [r3, #0]
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	60da      	str	r2, [r3, #12]
 8010e92:	4a73      	ldr	r2, [pc, #460]	; (8011060 <tcp_process+0x7cc>)
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	6013      	str	r3, [r2, #0]
 8010e98:	f003 f952 	bl	8014140 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8010e9c:	e0d2      	b.n	8011044 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	8b5b      	ldrh	r3, [r3, #26]
 8010ea2:	f043 0302 	orr.w	r3, r3, #2
 8010ea6:	b29a      	uxth	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	2208      	movs	r2, #8
 8010eb0:	751a      	strb	r2, [r3, #20]
      break;
 8010eb2:	e0c7      	b.n	8011044 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010eb4:	4b6b      	ldr	r3, [pc, #428]	; (8011064 <tcp_process+0x7d0>)
 8010eb6:	781b      	ldrb	r3, [r3, #0]
 8010eb8:	f003 0310 	and.w	r3, r3, #16
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	f000 80c1 	beq.w	8011044 <tcp_process+0x7b0>
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010ec6:	4b68      	ldr	r3, [pc, #416]	; (8011068 <tcp_process+0x7d4>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	f040 80ba 	bne.w	8011044 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	f040 80b5 	bne.w	8011044 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2206      	movs	r2, #6
 8010ede:	751a      	strb	r2, [r3, #20]
      break;
 8010ee0:	e0b0      	b.n	8011044 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f000 f9ca 	bl	801127c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010ee8:	4b60      	ldr	r3, [pc, #384]	; (801106c <tcp_process+0x7d8>)
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	f003 0320 	and.w	r3, r3, #32
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	f000 80a9 	beq.w	8011048 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	8b5b      	ldrh	r3, [r3, #26]
 8010efa:	f043 0302 	orr.w	r3, r3, #2
 8010efe:	b29a      	uxth	r2, r3
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	f7fe fd39 	bl	800f97c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f0a:	4b59      	ldr	r3, [pc, #356]	; (8011070 <tcp_process+0x7dc>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	429a      	cmp	r2, r3
 8010f12:	d105      	bne.n	8010f20 <tcp_process+0x68c>
 8010f14:	4b56      	ldr	r3, [pc, #344]	; (8011070 <tcp_process+0x7dc>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	68db      	ldr	r3, [r3, #12]
 8010f1a:	4a55      	ldr	r2, [pc, #340]	; (8011070 <tcp_process+0x7dc>)
 8010f1c:	6013      	str	r3, [r2, #0]
 8010f1e:	e013      	b.n	8010f48 <tcp_process+0x6b4>
 8010f20:	4b53      	ldr	r3, [pc, #332]	; (8011070 <tcp_process+0x7dc>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	613b      	str	r3, [r7, #16]
 8010f26:	e00c      	b.n	8010f42 <tcp_process+0x6ae>
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d104      	bne.n	8010f3c <tcp_process+0x6a8>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	68da      	ldr	r2, [r3, #12]
 8010f36:	693b      	ldr	r3, [r7, #16]
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	e005      	b.n	8010f48 <tcp_process+0x6b4>
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	68db      	ldr	r3, [r3, #12]
 8010f40:	613b      	str	r3, [r7, #16]
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1ef      	bne.n	8010f28 <tcp_process+0x694>
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	60da      	str	r2, [r3, #12]
 8010f4e:	4b43      	ldr	r3, [pc, #268]	; (801105c <tcp_process+0x7c8>)
 8010f50:	2201      	movs	r2, #1
 8010f52:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	220a      	movs	r2, #10
 8010f58:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010f5a:	4b41      	ldr	r3, [pc, #260]	; (8011060 <tcp_process+0x7cc>)
 8010f5c:	681a      	ldr	r2, [r3, #0]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	60da      	str	r2, [r3, #12]
 8010f62:	4a3f      	ldr	r2, [pc, #252]	; (8011060 <tcp_process+0x7cc>)
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6013      	str	r3, [r2, #0]
 8010f68:	f003 f8ea 	bl	8014140 <tcp_timer_needed>
      }
      break;
 8010f6c:	e06c      	b.n	8011048 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8010f6e:	6878      	ldr	r0, [r7, #4]
 8010f70:	f000 f984 	bl	801127c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010f74:	4b3b      	ldr	r3, [pc, #236]	; (8011064 <tcp_process+0x7d0>)
 8010f76:	781b      	ldrb	r3, [r3, #0]
 8010f78:	f003 0310 	and.w	r3, r3, #16
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d065      	beq.n	801104c <tcp_process+0x7b8>
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f84:	4b38      	ldr	r3, [pc, #224]	; (8011068 <tcp_process+0x7d4>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d15f      	bne.n	801104c <tcp_process+0x7b8>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d15b      	bne.n	801104c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7fe fcf1 	bl	800f97c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010f9a:	4b35      	ldr	r3, [pc, #212]	; (8011070 <tcp_process+0x7dc>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d105      	bne.n	8010fb0 <tcp_process+0x71c>
 8010fa4:	4b32      	ldr	r3, [pc, #200]	; (8011070 <tcp_process+0x7dc>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	68db      	ldr	r3, [r3, #12]
 8010faa:	4a31      	ldr	r2, [pc, #196]	; (8011070 <tcp_process+0x7dc>)
 8010fac:	6013      	str	r3, [r2, #0]
 8010fae:	e013      	b.n	8010fd8 <tcp_process+0x744>
 8010fb0:	4b2f      	ldr	r3, [pc, #188]	; (8011070 <tcp_process+0x7dc>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	60fb      	str	r3, [r7, #12]
 8010fb6:	e00c      	b.n	8010fd2 <tcp_process+0x73e>
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	68db      	ldr	r3, [r3, #12]
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	429a      	cmp	r2, r3
 8010fc0:	d104      	bne.n	8010fcc <tcp_process+0x738>
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	68da      	ldr	r2, [r3, #12]
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	60da      	str	r2, [r3, #12]
 8010fca:	e005      	b.n	8010fd8 <tcp_process+0x744>
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	68db      	ldr	r3, [r3, #12]
 8010fd0:	60fb      	str	r3, [r7, #12]
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d1ef      	bne.n	8010fb8 <tcp_process+0x724>
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	2200      	movs	r2, #0
 8010fdc:	60da      	str	r2, [r3, #12]
 8010fde:	4b1f      	ldr	r3, [pc, #124]	; (801105c <tcp_process+0x7c8>)
 8010fe0:	2201      	movs	r2, #1
 8010fe2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	220a      	movs	r2, #10
 8010fe8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010fea:	4b1d      	ldr	r3, [pc, #116]	; (8011060 <tcp_process+0x7cc>)
 8010fec:	681a      	ldr	r2, [r3, #0]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	60da      	str	r2, [r3, #12]
 8010ff2:	4a1b      	ldr	r2, [pc, #108]	; (8011060 <tcp_process+0x7cc>)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	6013      	str	r3, [r2, #0]
 8010ff8:	f003 f8a2 	bl	8014140 <tcp_timer_needed>
      }
      break;
 8010ffc:	e026      	b.n	801104c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 f93c 	bl	801127c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8011004:	4b17      	ldr	r3, [pc, #92]	; (8011064 <tcp_process+0x7d0>)
 8011006:	781b      	ldrb	r3, [r3, #0]
 8011008:	f003 0310 	and.w	r3, r3, #16
 801100c:	2b00      	cmp	r3, #0
 801100e:	d01f      	beq.n	8011050 <tcp_process+0x7bc>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011014:	4b14      	ldr	r3, [pc, #80]	; (8011068 <tcp_process+0x7d4>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	429a      	cmp	r2, r3
 801101a:	d119      	bne.n	8011050 <tcp_process+0x7bc>
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011020:	2b00      	cmp	r3, #0
 8011022:	d115      	bne.n	8011050 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8011024:	4b11      	ldr	r3, [pc, #68]	; (801106c <tcp_process+0x7d8>)
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	f043 0310 	orr.w	r3, r3, #16
 801102c:	b2da      	uxtb	r2, r3
 801102e:	4b0f      	ldr	r3, [pc, #60]	; (801106c <tcp_process+0x7d8>)
 8011030:	701a      	strb	r2, [r3, #0]
      }
      break;
 8011032:	e00d      	b.n	8011050 <tcp_process+0x7bc>
    default:
      break;
 8011034:	bf00      	nop
 8011036:	e00c      	b.n	8011052 <tcp_process+0x7be>
      break;
 8011038:	bf00      	nop
 801103a:	e00a      	b.n	8011052 <tcp_process+0x7be>
      break;
 801103c:	bf00      	nop
 801103e:	e008      	b.n	8011052 <tcp_process+0x7be>
      break;
 8011040:	bf00      	nop
 8011042:	e006      	b.n	8011052 <tcp_process+0x7be>
      break;
 8011044:	bf00      	nop
 8011046:	e004      	b.n	8011052 <tcp_process+0x7be>
      break;
 8011048:	bf00      	nop
 801104a:	e002      	b.n	8011052 <tcp_process+0x7be>
      break;
 801104c:	bf00      	nop
 801104e:	e000      	b.n	8011052 <tcp_process+0x7be>
      break;
 8011050:	bf00      	nop
  }
  return ERR_OK;
 8011052:	2300      	movs	r3, #0
}
 8011054:	4618      	mov	r0, r3
 8011056:	3724      	adds	r7, #36	; 0x24
 8011058:	46bd      	mov	sp, r7
 801105a:	bd90      	pop	{r4, r7, pc}
 801105c:	2000cf38 	.word	0x2000cf38
 8011060:	2000cf34 	.word	0x2000cf34
 8011064:	2000cf68 	.word	0x2000cf68
 8011068:	2000cf60 	.word	0x2000cf60
 801106c:	2000cf69 	.word	0x2000cf69
 8011070:	2000cf30 	.word	0x2000cf30

08011074 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8011074:	b590      	push	{r4, r7, lr}
 8011076:	b085      	sub	sp, #20
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d106      	bne.n	8011092 <tcp_oos_insert_segment+0x1e>
 8011084:	4b3b      	ldr	r3, [pc, #236]	; (8011174 <tcp_oos_insert_segment+0x100>)
 8011086:	f240 421f 	movw	r2, #1055	; 0x41f
 801108a:	493b      	ldr	r1, [pc, #236]	; (8011178 <tcp_oos_insert_segment+0x104>)
 801108c:	483b      	ldr	r0, [pc, #236]	; (801117c <tcp_oos_insert_segment+0x108>)
 801108e:	f008 fa9d 	bl	80195cc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	899b      	ldrh	r3, [r3, #12]
 8011098:	b29b      	uxth	r3, r3
 801109a:	4618      	mov	r0, r3
 801109c:	f7fb f918 	bl	800c2d0 <lwip_htons>
 80110a0:	4603      	mov	r3, r0
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f003 0301 	and.w	r3, r3, #1
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d028      	beq.n	80110fe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80110ac:	6838      	ldr	r0, [r7, #0]
 80110ae:	f7fe f977 	bl	800f3a0 <tcp_segs_free>
    next = NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	603b      	str	r3, [r7, #0]
 80110b6:	e056      	b.n	8011166 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	68db      	ldr	r3, [r3, #12]
 80110bc:	899b      	ldrh	r3, [r3, #12]
 80110be:	b29b      	uxth	r3, r3
 80110c0:	4618      	mov	r0, r3
 80110c2:	f7fb f905 	bl	800c2d0 <lwip_htons>
 80110c6:	4603      	mov	r3, r0
 80110c8:	b2db      	uxtb	r3, r3
 80110ca:	f003 0301 	and.w	r3, r3, #1
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d00d      	beq.n	80110ee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	68db      	ldr	r3, [r3, #12]
 80110d6:	899b      	ldrh	r3, [r3, #12]
 80110d8:	b29c      	uxth	r4, r3
 80110da:	2001      	movs	r0, #1
 80110dc:	f7fb f8f8 	bl	800c2d0 <lwip_htons>
 80110e0:	4603      	mov	r3, r0
 80110e2:	461a      	mov	r2, r3
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	68db      	ldr	r3, [r3, #12]
 80110e8:	4322      	orrs	r2, r4
 80110ea:	b292      	uxth	r2, r2
 80110ec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80110ee:	683b      	ldr	r3, [r7, #0]
 80110f0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80110f2:	683b      	ldr	r3, [r7, #0]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80110f8:	68f8      	ldr	r0, [r7, #12]
 80110fa:	f7fe f966 	bl	800f3ca <tcp_seg_free>
    while (next &&
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d00e      	beq.n	8011122 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	891b      	ldrh	r3, [r3, #8]
 8011108:	461a      	mov	r2, r3
 801110a:	4b1d      	ldr	r3, [pc, #116]	; (8011180 <tcp_oos_insert_segment+0x10c>)
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	441a      	add	r2, r3
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	68db      	ldr	r3, [r3, #12]
 8011114:	685b      	ldr	r3, [r3, #4]
 8011116:	6839      	ldr	r1, [r7, #0]
 8011118:	8909      	ldrh	r1, [r1, #8]
 801111a:	440b      	add	r3, r1
 801111c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801111e:	2b00      	cmp	r3, #0
 8011120:	daca      	bge.n	80110b8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d01e      	beq.n	8011166 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	891b      	ldrh	r3, [r3, #8]
 801112c:	461a      	mov	r2, r3
 801112e:	4b14      	ldr	r3, [pc, #80]	; (8011180 <tcp_oos_insert_segment+0x10c>)
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	441a      	add	r2, r3
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	68db      	ldr	r3, [r3, #12]
 8011138:	685b      	ldr	r3, [r3, #4]
 801113a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801113c:	2b00      	cmp	r3, #0
 801113e:	dd12      	ble.n	8011166 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	68db      	ldr	r3, [r3, #12]
 8011144:	685b      	ldr	r3, [r3, #4]
 8011146:	b29a      	uxth	r2, r3
 8011148:	4b0d      	ldr	r3, [pc, #52]	; (8011180 <tcp_oos_insert_segment+0x10c>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	b29b      	uxth	r3, r3
 801114e:	1ad3      	subs	r3, r2, r3
 8011150:	b29a      	uxth	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	685a      	ldr	r2, [r3, #4]
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	891b      	ldrh	r3, [r3, #8]
 801115e:	4619      	mov	r1, r3
 8011160:	4610      	mov	r0, r2
 8011162:	f7fc fb63 	bl	800d82c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	683a      	ldr	r2, [r7, #0]
 801116a:	601a      	str	r2, [r3, #0]
}
 801116c:	bf00      	nop
 801116e:	3714      	adds	r7, #20
 8011170:	46bd      	mov	sp, r7
 8011172:	bd90      	pop	{r4, r7, pc}
 8011174:	0801bb7c 	.word	0x0801bb7c
 8011178:	0801be3c 	.word	0x0801be3c
 801117c:	0801bbc8 	.word	0x0801bbc8
 8011180:	2000cf5c 	.word	0x2000cf5c

08011184 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8011184:	b5b0      	push	{r4, r5, r7, lr}
 8011186:	b086      	sub	sp, #24
 8011188:	af00      	add	r7, sp, #0
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
 8011190:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8011192:	e03e      	b.n	8011212 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8011194:	68bb      	ldr	r3, [r7, #8]
 8011196:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801119e:	697b      	ldr	r3, [r7, #20]
 80111a0:	685b      	ldr	r3, [r3, #4]
 80111a2:	4618      	mov	r0, r3
 80111a4:	f7fc fd56 	bl	800dc54 <pbuf_clen>
 80111a8:	4603      	mov	r3, r0
 80111aa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80111ac:	68fb      	ldr	r3, [r7, #12]
 80111ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111b2:	8a7a      	ldrh	r2, [r7, #18]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d906      	bls.n	80111c6 <tcp_free_acked_segments+0x42>
 80111b8:	4b2a      	ldr	r3, [pc, #168]	; (8011264 <tcp_free_acked_segments+0xe0>)
 80111ba:	f240 4257 	movw	r2, #1111	; 0x457
 80111be:	492a      	ldr	r1, [pc, #168]	; (8011268 <tcp_free_acked_segments+0xe4>)
 80111c0:	482a      	ldr	r0, [pc, #168]	; (801126c <tcp_free_acked_segments+0xe8>)
 80111c2:	f008 fa03 	bl	80195cc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80111cc:	8a7b      	ldrh	r3, [r7, #18]
 80111ce:	1ad3      	subs	r3, r2, r3
 80111d0:	b29a      	uxth	r2, r3
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	891a      	ldrh	r2, [r3, #8]
 80111dc:	4b24      	ldr	r3, [pc, #144]	; (8011270 <tcp_free_acked_segments+0xec>)
 80111de:	881b      	ldrh	r3, [r3, #0]
 80111e0:	4413      	add	r3, r2
 80111e2:	b29a      	uxth	r2, r3
 80111e4:	4b22      	ldr	r3, [pc, #136]	; (8011270 <tcp_free_acked_segments+0xec>)
 80111e6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80111e8:	6978      	ldr	r0, [r7, #20]
 80111ea:	f7fe f8ee 	bl	800f3ca <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00c      	beq.n	8011212 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d109      	bne.n	8011212 <tcp_free_acked_segments+0x8e>
 80111fe:	683b      	ldr	r3, [r7, #0]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d106      	bne.n	8011212 <tcp_free_acked_segments+0x8e>
 8011204:	4b17      	ldr	r3, [pc, #92]	; (8011264 <tcp_free_acked_segments+0xe0>)
 8011206:	f240 4261 	movw	r2, #1121	; 0x461
 801120a:	491a      	ldr	r1, [pc, #104]	; (8011274 <tcp_free_acked_segments+0xf0>)
 801120c:	4817      	ldr	r0, [pc, #92]	; (801126c <tcp_free_acked_segments+0xe8>)
 801120e:	f008 f9dd 	bl	80195cc <iprintf>
  while (seg_list != NULL &&
 8011212:	68bb      	ldr	r3, [r7, #8]
 8011214:	2b00      	cmp	r3, #0
 8011216:	d020      	beq.n	801125a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8011218:	68bb      	ldr	r3, [r7, #8]
 801121a:	68db      	ldr	r3, [r3, #12]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	4618      	mov	r0, r3
 8011220:	f7fb f86b 	bl	800c2fa <lwip_htonl>
 8011224:	4604      	mov	r4, r0
 8011226:	68bb      	ldr	r3, [r7, #8]
 8011228:	891b      	ldrh	r3, [r3, #8]
 801122a:	461d      	mov	r5, r3
 801122c:	68bb      	ldr	r3, [r7, #8]
 801122e:	68db      	ldr	r3, [r3, #12]
 8011230:	899b      	ldrh	r3, [r3, #12]
 8011232:	b29b      	uxth	r3, r3
 8011234:	4618      	mov	r0, r3
 8011236:	f7fb f84b 	bl	800c2d0 <lwip_htons>
 801123a:	4603      	mov	r3, r0
 801123c:	b2db      	uxtb	r3, r3
 801123e:	f003 0303 	and.w	r3, r3, #3
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <tcp_free_acked_segments+0xc6>
 8011246:	2301      	movs	r3, #1
 8011248:	e000      	b.n	801124c <tcp_free_acked_segments+0xc8>
 801124a:	2300      	movs	r3, #0
 801124c:	442b      	add	r3, r5
 801124e:	18e2      	adds	r2, r4, r3
 8011250:	4b09      	ldr	r3, [pc, #36]	; (8011278 <tcp_free_acked_segments+0xf4>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8011256:	2b00      	cmp	r3, #0
 8011258:	dd9c      	ble.n	8011194 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801125a:	68bb      	ldr	r3, [r7, #8]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3718      	adds	r7, #24
 8011260:	46bd      	mov	sp, r7
 8011262:	bdb0      	pop	{r4, r5, r7, pc}
 8011264:	0801bb7c 	.word	0x0801bb7c
 8011268:	0801be64 	.word	0x0801be64
 801126c:	0801bbc8 	.word	0x0801bbc8
 8011270:	2000cf64 	.word	0x2000cf64
 8011274:	0801be8c 	.word	0x0801be8c
 8011278:	2000cf60 	.word	0x2000cf60

0801127c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801127c:	b5b0      	push	{r4, r5, r7, lr}
 801127e:	b094      	sub	sp, #80	; 0x50
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8011284:	2300      	movs	r3, #0
 8011286:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d106      	bne.n	801129c <tcp_receive+0x20>
 801128e:	4b91      	ldr	r3, [pc, #580]	; (80114d4 <tcp_receive+0x258>)
 8011290:	f240 427b 	movw	r2, #1147	; 0x47b
 8011294:	4990      	ldr	r1, [pc, #576]	; (80114d8 <tcp_receive+0x25c>)
 8011296:	4891      	ldr	r0, [pc, #580]	; (80114dc <tcp_receive+0x260>)
 8011298:	f008 f998 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	7d1b      	ldrb	r3, [r3, #20]
 80112a0:	2b03      	cmp	r3, #3
 80112a2:	d806      	bhi.n	80112b2 <tcp_receive+0x36>
 80112a4:	4b8b      	ldr	r3, [pc, #556]	; (80114d4 <tcp_receive+0x258>)
 80112a6:	f240 427c 	movw	r2, #1148	; 0x47c
 80112aa:	498d      	ldr	r1, [pc, #564]	; (80114e0 <tcp_receive+0x264>)
 80112ac:	488b      	ldr	r0, [pc, #556]	; (80114dc <tcp_receive+0x260>)
 80112ae:	f008 f98d 	bl	80195cc <iprintf>

  if (flags & TCP_ACK) {
 80112b2:	4b8c      	ldr	r3, [pc, #560]	; (80114e4 <tcp_receive+0x268>)
 80112b4:	781b      	ldrb	r3, [r3, #0]
 80112b6:	f003 0310 	and.w	r3, r3, #16
 80112ba:	2b00      	cmp	r3, #0
 80112bc:	f000 8264 	beq.w	8011788 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80112c6:	461a      	mov	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80112cc:	4413      	add	r3, r2
 80112ce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80112d4:	4b84      	ldr	r3, [pc, #528]	; (80114e8 <tcp_receive+0x26c>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	1ad3      	subs	r3, r2, r3
 80112da:	2b00      	cmp	r3, #0
 80112dc:	db1b      	blt.n	8011316 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80112e2:	4b81      	ldr	r3, [pc, #516]	; (80114e8 <tcp_receive+0x26c>)
 80112e4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80112e6:	429a      	cmp	r2, r3
 80112e8:	d106      	bne.n	80112f8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112ee:	4b7f      	ldr	r3, [pc, #508]	; (80114ec <tcp_receive+0x270>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	1ad3      	subs	r3, r2, r3
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	db0e      	blt.n	8011316 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80112fc:	4b7b      	ldr	r3, [pc, #492]	; (80114ec <tcp_receive+0x270>)
 80112fe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8011300:	429a      	cmp	r2, r3
 8011302:	d125      	bne.n	8011350 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8011304:	4b7a      	ldr	r3, [pc, #488]	; (80114f0 <tcp_receive+0x274>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	89db      	ldrh	r3, [r3, #14]
 801130a:	b29a      	uxth	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011312:	429a      	cmp	r2, r3
 8011314:	d91c      	bls.n	8011350 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8011316:	4b76      	ldr	r3, [pc, #472]	; (80114f0 <tcp_receive+0x274>)
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	89db      	ldrh	r3, [r3, #14]
 801131c:	b29a      	uxth	r2, r3
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011330:	429a      	cmp	r2, r3
 8011332:	d205      	bcs.n	8011340 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8011340:	4b69      	ldr	r3, [pc, #420]	; (80114e8 <tcp_receive+0x26c>)
 8011342:	681a      	ldr	r2, [r3, #0]
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8011348:	4b68      	ldr	r3, [pc, #416]	; (80114ec <tcp_receive+0x270>)
 801134a:	681a      	ldr	r2, [r3, #0]
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8011350:	4b66      	ldr	r3, [pc, #408]	; (80114ec <tcp_receive+0x270>)
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	2b00      	cmp	r3, #0
 801135c:	dc58      	bgt.n	8011410 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801135e:	4b65      	ldr	r3, [pc, #404]	; (80114f4 <tcp_receive+0x278>)
 8011360:	881b      	ldrh	r3, [r3, #0]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d14b      	bne.n	80113fe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801136a:	687a      	ldr	r2, [r7, #4]
 801136c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8011370:	4413      	add	r3, r2
 8011372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011374:	429a      	cmp	r2, r3
 8011376:	d142      	bne.n	80113fe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801137e:	2b00      	cmp	r3, #0
 8011380:	db3d      	blt.n	80113fe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011386:	4b59      	ldr	r3, [pc, #356]	; (80114ec <tcp_receive+0x270>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	429a      	cmp	r2, r3
 801138c:	d137      	bne.n	80113fe <tcp_receive+0x182>
              found_dupack = 1;
 801138e:	2301      	movs	r3, #1
 8011390:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8011398:	2bff      	cmp	r3, #255	; 0xff
 801139a:	d007      	beq.n	80113ac <tcp_receive+0x130>
                ++pcb->dupacks;
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113a2:	3301      	adds	r3, #1
 80113a4:	b2da      	uxtb	r2, r3
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113b2:	2b03      	cmp	r3, #3
 80113b4:	d91b      	bls.n	80113ee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113c0:	4413      	add	r3, r2
 80113c2:	b29a      	uxth	r2, r3
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80113ca:	429a      	cmp	r2, r3
 80113cc:	d30a      	bcc.n	80113e4 <tcp_receive+0x168>
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80113d8:	4413      	add	r3, r2
 80113da:	b29a      	uxth	r2, r3
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80113e2:	e004      	b.n	80113ee <tcp_receive+0x172>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80113f4:	2b02      	cmp	r3, #2
 80113f6:	d902      	bls.n	80113fe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f002 fb45 	bl	8013a88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80113fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011400:	2b00      	cmp	r3, #0
 8011402:	f040 8161 	bne.w	80116c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	2200      	movs	r2, #0
 801140a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801140e:	e15b      	b.n	80116c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011410:	4b36      	ldr	r3, [pc, #216]	; (80114ec <tcp_receive+0x270>)
 8011412:	681a      	ldr	r2, [r3, #0]
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011418:	1ad3      	subs	r3, r2, r3
 801141a:	3b01      	subs	r3, #1
 801141c:	2b00      	cmp	r3, #0
 801141e:	f2c0 814e 	blt.w	80116be <tcp_receive+0x442>
 8011422:	4b32      	ldr	r3, [pc, #200]	; (80114ec <tcp_receive+0x270>)
 8011424:	681a      	ldr	r2, [r3, #0]
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801142a:	1ad3      	subs	r3, r2, r3
 801142c:	2b00      	cmp	r3, #0
 801142e:	f300 8146 	bgt.w	80116be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	8b5b      	ldrh	r3, [r3, #26]
 8011436:	f003 0304 	and.w	r3, r3, #4
 801143a:	2b00      	cmp	r3, #0
 801143c:	d010      	beq.n	8011460 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	8b5b      	ldrh	r3, [r3, #26]
 8011442:	f023 0304 	bic.w	r3, r3, #4
 8011446:	b29a      	uxth	r2, r3
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	2200      	movs	r2, #0
 801145c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2200      	movs	r2, #0
 8011464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801146e:	10db      	asrs	r3, r3, #3
 8011470:	b21b      	sxth	r3, r3
 8011472:	b29a      	uxth	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801147a:	b29b      	uxth	r3, r3
 801147c:	4413      	add	r3, r2
 801147e:	b29b      	uxth	r3, r3
 8011480:	b21a      	sxth	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8011488:	4b18      	ldr	r3, [pc, #96]	; (80114ec <tcp_receive+0x270>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	b29a      	uxth	r2, r3
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011492:	b29b      	uxth	r3, r3
 8011494:	1ad3      	subs	r3, r2, r3
 8011496:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	2200      	movs	r2, #0
 801149c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80114a0:	4b12      	ldr	r3, [pc, #72]	; (80114ec <tcp_receive+0x270>)
 80114a2:	681a      	ldr	r2, [r3, #0]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	7d1b      	ldrb	r3, [r3, #20]
 80114ac:	2b03      	cmp	r3, #3
 80114ae:	f240 8097 	bls.w	80115e0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80114be:	429a      	cmp	r2, r3
 80114c0:	d245      	bcs.n	801154e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	8b5b      	ldrh	r3, [r3, #26]
 80114c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d014      	beq.n	80114f8 <tcp_receive+0x27c>
 80114ce:	2301      	movs	r3, #1
 80114d0:	e013      	b.n	80114fa <tcp_receive+0x27e>
 80114d2:	bf00      	nop
 80114d4:	0801bb7c 	.word	0x0801bb7c
 80114d8:	0801beac 	.word	0x0801beac
 80114dc:	0801bbc8 	.word	0x0801bbc8
 80114e0:	0801bec8 	.word	0x0801bec8
 80114e4:	2000cf68 	.word	0x2000cf68
 80114e8:	2000cf5c 	.word	0x2000cf5c
 80114ec:	2000cf60 	.word	0x2000cf60
 80114f0:	2000cf4c 	.word	0x2000cf4c
 80114f4:	2000cf66 	.word	0x2000cf66
 80114f8:	2302      	movs	r3, #2
 80114fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80114fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011502:	b29a      	uxth	r2, r3
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011508:	fb12 f303 	smulbb	r3, r2, r3
 801150c:	b29b      	uxth	r3, r3
 801150e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011510:	4293      	cmp	r3, r2
 8011512:	bf28      	it	cs
 8011514:	4613      	movcs	r3, r2
 8011516:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801151e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011520:	4413      	add	r3, r2
 8011522:	b29a      	uxth	r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801152a:	429a      	cmp	r2, r3
 801152c:	d309      	bcc.n	8011542 <tcp_receive+0x2c6>
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011534:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011536:	4413      	add	r3, r2
 8011538:	b29a      	uxth	r2, r3
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8011540:	e04e      	b.n	80115e0 <tcp_receive+0x364>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011548:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801154c:	e048      	b.n	80115e0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011554:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011556:	4413      	add	r3, r2
 8011558:	b29a      	uxth	r2, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8011560:	429a      	cmp	r2, r3
 8011562:	d309      	bcc.n	8011578 <tcp_receive+0x2fc>
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801156a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801156c:	4413      	add	r3, r2
 801156e:	b29a      	uxth	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8011576:	e004      	b.n	8011582 <tcp_receive+0x306>
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801157e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801158e:	429a      	cmp	r2, r3
 8011590:	d326      	bcc.n	80115e0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801159e:	1ad3      	subs	r3, r2, r3
 80115a0:	b29a      	uxth	r2, r3
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115b2:	4413      	add	r3, r2
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115bc:	429a      	cmp	r2, r3
 80115be:	d30a      	bcc.n	80115d6 <tcp_receive+0x35a>
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80115ca:	4413      	add	r3, r2
 80115cc:	b29a      	uxth	r2, r3
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80115d4:	e004      	b.n	80115e0 <tcp_receive+0x364>
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115e8:	4a98      	ldr	r2, [pc, #608]	; (801184c <tcp_receive+0x5d0>)
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f7ff fdca 	bl	8011184 <tcp_free_acked_segments>
 80115f0:	4602      	mov	r2, r0
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115fe:	4a94      	ldr	r2, [pc, #592]	; (8011850 <tcp_receive+0x5d4>)
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff fdbf 	bl	8011184 <tcp_free_acked_segments>
 8011606:	4602      	mov	r2, r0
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011610:	2b00      	cmp	r3, #0
 8011612:	d104      	bne.n	801161e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801161a:	861a      	strh	r2, [r3, #48]	; 0x30
 801161c:	e002      	b.n	8011624 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2200      	movs	r2, #0
 8011622:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2200      	movs	r2, #0
 8011628:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801162e:	2b00      	cmp	r3, #0
 8011630:	d103      	bne.n	801163a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2200      	movs	r2, #0
 8011636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011640:	4b84      	ldr	r3, [pc, #528]	; (8011854 <tcp_receive+0x5d8>)
 8011642:	881b      	ldrh	r3, [r3, #0]
 8011644:	4413      	add	r3, r2
 8011646:	b29a      	uxth	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8b5b      	ldrh	r3, [r3, #26]
 8011652:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011656:	2b00      	cmp	r3, #0
 8011658:	d035      	beq.n	80116c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801165e:	2b00      	cmp	r3, #0
 8011660:	d118      	bne.n	8011694 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011666:	2b00      	cmp	r3, #0
 8011668:	d00c      	beq.n	8011684 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011672:	68db      	ldr	r3, [r3, #12]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	4618      	mov	r0, r3
 8011678:	f7fa fe3f 	bl	800c2fa <lwip_htonl>
 801167c:	4603      	mov	r3, r0
 801167e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011680:	2b00      	cmp	r3, #0
 8011682:	dc20      	bgt.n	80116c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	8b5b      	ldrh	r3, [r3, #26]
 8011688:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801168c:	b29a      	uxth	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011692:	e018      	b.n	80116c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fa fe2a 	bl	800c2fa <lwip_htonl>
 80116a6:	4603      	mov	r3, r0
 80116a8:	1ae3      	subs	r3, r4, r3
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	dc0b      	bgt.n	80116c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	8b5b      	ldrh	r3, [r3, #26]
 80116b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80116b6:	b29a      	uxth	r2, r3
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116bc:	e003      	b.n	80116c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f002 fbce 	bl	8013e60 <tcp_send_empty_ack>
 80116c4:	e000      	b.n	80116c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80116c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d05b      	beq.n	8011788 <tcp_receive+0x50c>
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116d4:	4b60      	ldr	r3, [pc, #384]	; (8011858 <tcp_receive+0x5dc>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	1ad3      	subs	r3, r2, r3
 80116da:	2b00      	cmp	r3, #0
 80116dc:	da54      	bge.n	8011788 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80116de:	4b5f      	ldr	r3, [pc, #380]	; (801185c <tcp_receive+0x5e0>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116e8:	b29b      	uxth	r3, r3
 80116ea:	1ad3      	subs	r3, r2, r3
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80116f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80116fc:	10db      	asrs	r3, r3, #3
 80116fe:	b21b      	sxth	r3, r3
 8011700:	b29b      	uxth	r3, r3
 8011702:	1ad3      	subs	r3, r2, r3
 8011704:	b29b      	uxth	r3, r3
 8011706:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011710:	b29a      	uxth	r2, r3
 8011712:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011716:	4413      	add	r3, r2
 8011718:	b29b      	uxth	r3, r3
 801171a:	b21a      	sxth	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011720:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011724:	2b00      	cmp	r3, #0
 8011726:	da05      	bge.n	8011734 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011728:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801172c:	425b      	negs	r3, r3
 801172e:	b29b      	uxth	r3, r3
 8011730:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011734:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801173e:	109b      	asrs	r3, r3, #2
 8011740:	b21b      	sxth	r3, r3
 8011742:	b29b      	uxth	r3, r3
 8011744:	1ad3      	subs	r3, r2, r3
 8011746:	b29b      	uxth	r3, r3
 8011748:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011752:	b29a      	uxth	r2, r3
 8011754:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011758:	4413      	add	r3, r2
 801175a:	b29b      	uxth	r3, r3
 801175c:	b21a      	sxth	r2, r3
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011768:	10db      	asrs	r3, r3, #3
 801176a:	b21b      	sxth	r3, r3
 801176c:	b29a      	uxth	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011774:	b29b      	uxth	r3, r3
 8011776:	4413      	add	r3, r2
 8011778:	b29b      	uxth	r3, r3
 801177a:	b21a      	sxth	r2, r3
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	2200      	movs	r2, #0
 8011786:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011788:	4b35      	ldr	r3, [pc, #212]	; (8011860 <tcp_receive+0x5e4>)
 801178a:	881b      	ldrh	r3, [r3, #0]
 801178c:	2b00      	cmp	r3, #0
 801178e:	f000 84e2 	beq.w	8012156 <tcp_receive+0xeda>
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	7d1b      	ldrb	r3, [r3, #20]
 8011796:	2b06      	cmp	r3, #6
 8011798:	f200 84dd 	bhi.w	8012156 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117a0:	4b30      	ldr	r3, [pc, #192]	; (8011864 <tcp_receive+0x5e8>)
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	1ad3      	subs	r3, r2, r3
 80117a6:	3b01      	subs	r3, #1
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	f2c0 808f 	blt.w	80118cc <tcp_receive+0x650>
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117b2:	4b2b      	ldr	r3, [pc, #172]	; (8011860 <tcp_receive+0x5e4>)
 80117b4:	881b      	ldrh	r3, [r3, #0]
 80117b6:	4619      	mov	r1, r3
 80117b8:	4b2a      	ldr	r3, [pc, #168]	; (8011864 <tcp_receive+0x5e8>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	440b      	add	r3, r1
 80117be:	1ad3      	subs	r3, r2, r3
 80117c0:	3301      	adds	r3, #1
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	f300 8082 	bgt.w	80118cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80117c8:	4b27      	ldr	r3, [pc, #156]	; (8011868 <tcp_receive+0x5ec>)
 80117ca:	685b      	ldr	r3, [r3, #4]
 80117cc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80117d2:	4b24      	ldr	r3, [pc, #144]	; (8011864 <tcp_receive+0x5e8>)
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80117da:	4b23      	ldr	r3, [pc, #140]	; (8011868 <tcp_receive+0x5ec>)
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d106      	bne.n	80117f0 <tcp_receive+0x574>
 80117e2:	4b22      	ldr	r3, [pc, #136]	; (801186c <tcp_receive+0x5f0>)
 80117e4:	f240 5294 	movw	r2, #1428	; 0x594
 80117e8:	4921      	ldr	r1, [pc, #132]	; (8011870 <tcp_receive+0x5f4>)
 80117ea:	4822      	ldr	r0, [pc, #136]	; (8011874 <tcp_receive+0x5f8>)
 80117ec:	f007 feee 	bl	80195cc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80117f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80117f6:	4293      	cmp	r3, r2
 80117f8:	d906      	bls.n	8011808 <tcp_receive+0x58c>
 80117fa:	4b1c      	ldr	r3, [pc, #112]	; (801186c <tcp_receive+0x5f0>)
 80117fc:	f240 5295 	movw	r2, #1429	; 0x595
 8011800:	491d      	ldr	r1, [pc, #116]	; (8011878 <tcp_receive+0x5fc>)
 8011802:	481c      	ldr	r0, [pc, #112]	; (8011874 <tcp_receive+0x5f8>)
 8011804:	f007 fee2 	bl	80195cc <iprintf>
      off = (u16_t)off32;
 8011808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801180a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801180e:	4b16      	ldr	r3, [pc, #88]	; (8011868 <tcp_receive+0x5ec>)
 8011810:	685b      	ldr	r3, [r3, #4]
 8011812:	891b      	ldrh	r3, [r3, #8]
 8011814:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011818:	429a      	cmp	r2, r3
 801181a:	d906      	bls.n	801182a <tcp_receive+0x5ae>
 801181c:	4b13      	ldr	r3, [pc, #76]	; (801186c <tcp_receive+0x5f0>)
 801181e:	f240 5297 	movw	r2, #1431	; 0x597
 8011822:	4916      	ldr	r1, [pc, #88]	; (801187c <tcp_receive+0x600>)
 8011824:	4813      	ldr	r0, [pc, #76]	; (8011874 <tcp_receive+0x5f8>)
 8011826:	f007 fed1 	bl	80195cc <iprintf>
      inseg.len -= off;
 801182a:	4b0f      	ldr	r3, [pc, #60]	; (8011868 <tcp_receive+0x5ec>)
 801182c:	891a      	ldrh	r2, [r3, #8]
 801182e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011832:	1ad3      	subs	r3, r2, r3
 8011834:	b29a      	uxth	r2, r3
 8011836:	4b0c      	ldr	r3, [pc, #48]	; (8011868 <tcp_receive+0x5ec>)
 8011838:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801183a:	4b0b      	ldr	r3, [pc, #44]	; (8011868 <tcp_receive+0x5ec>)
 801183c:	685b      	ldr	r3, [r3, #4]
 801183e:	891a      	ldrh	r2, [r3, #8]
 8011840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011844:	1ad3      	subs	r3, r2, r3
 8011846:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011848:	e02a      	b.n	80118a0 <tcp_receive+0x624>
 801184a:	bf00      	nop
 801184c:	0801bee4 	.word	0x0801bee4
 8011850:	0801beec 	.word	0x0801beec
 8011854:	2000cf64 	.word	0x2000cf64
 8011858:	2000cf60 	.word	0x2000cf60
 801185c:	2000cf24 	.word	0x2000cf24
 8011860:	2000cf66 	.word	0x2000cf66
 8011864:	2000cf5c 	.word	0x2000cf5c
 8011868:	2000cf3c 	.word	0x2000cf3c
 801186c:	0801bb7c 	.word	0x0801bb7c
 8011870:	0801bef4 	.word	0x0801bef4
 8011874:	0801bbc8 	.word	0x0801bbc8
 8011878:	0801bf04 	.word	0x0801bf04
 801187c:	0801bf14 	.word	0x0801bf14
        off -= p->len;
 8011880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011882:	895b      	ldrh	r3, [r3, #10]
 8011884:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011888:	1ad3      	subs	r3, r2, r3
 801188a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801188e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011890:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011892:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011894:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011896:	2200      	movs	r2, #0
 8011898:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801189a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80118a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a2:	895b      	ldrh	r3, [r3, #10]
 80118a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d8e9      	bhi.n	8011880 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80118ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80118b0:	4619      	mov	r1, r3
 80118b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80118b4:	f7fc f8ba 	bl	800da2c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118bc:	4a91      	ldr	r2, [pc, #580]	; (8011b04 <tcp_receive+0x888>)
 80118be:	6013      	str	r3, [r2, #0]
 80118c0:	4b91      	ldr	r3, [pc, #580]	; (8011b08 <tcp_receive+0x88c>)
 80118c2:	68db      	ldr	r3, [r3, #12]
 80118c4:	4a8f      	ldr	r2, [pc, #572]	; (8011b04 <tcp_receive+0x888>)
 80118c6:	6812      	ldr	r2, [r2, #0]
 80118c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80118ca:	e00d      	b.n	80118e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80118cc:	4b8d      	ldr	r3, [pc, #564]	; (8011b04 <tcp_receive+0x888>)
 80118ce:	681a      	ldr	r2, [r3, #0]
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	da06      	bge.n	80118e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	8b5b      	ldrh	r3, [r3, #26]
 80118de:	f043 0302 	orr.w	r3, r3, #2
 80118e2:	b29a      	uxth	r2, r3
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80118e8:	4b86      	ldr	r3, [pc, #536]	; (8011b04 <tcp_receive+0x888>)
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118f0:	1ad3      	subs	r3, r2, r3
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f2c0 842a 	blt.w	801214c <tcp_receive+0xed0>
 80118f8:	4b82      	ldr	r3, [pc, #520]	; (8011b04 <tcp_receive+0x888>)
 80118fa:	681a      	ldr	r2, [r3, #0]
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011900:	6879      	ldr	r1, [r7, #4]
 8011902:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011904:	440b      	add	r3, r1
 8011906:	1ad3      	subs	r3, r2, r3
 8011908:	3301      	adds	r3, #1
 801190a:	2b00      	cmp	r3, #0
 801190c:	f300 841e 	bgt.w	801214c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011914:	4b7b      	ldr	r3, [pc, #492]	; (8011b04 <tcp_receive+0x888>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	429a      	cmp	r2, r3
 801191a:	f040 829a 	bne.w	8011e52 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801191e:	4b7a      	ldr	r3, [pc, #488]	; (8011b08 <tcp_receive+0x88c>)
 8011920:	891c      	ldrh	r4, [r3, #8]
 8011922:	4b79      	ldr	r3, [pc, #484]	; (8011b08 <tcp_receive+0x88c>)
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	899b      	ldrh	r3, [r3, #12]
 8011928:	b29b      	uxth	r3, r3
 801192a:	4618      	mov	r0, r3
 801192c:	f7fa fcd0 	bl	800c2d0 <lwip_htons>
 8011930:	4603      	mov	r3, r0
 8011932:	b2db      	uxtb	r3, r3
 8011934:	f003 0303 	and.w	r3, r3, #3
 8011938:	2b00      	cmp	r3, #0
 801193a:	d001      	beq.n	8011940 <tcp_receive+0x6c4>
 801193c:	2301      	movs	r3, #1
 801193e:	e000      	b.n	8011942 <tcp_receive+0x6c6>
 8011940:	2300      	movs	r3, #0
 8011942:	4423      	add	r3, r4
 8011944:	b29a      	uxth	r2, r3
 8011946:	4b71      	ldr	r3, [pc, #452]	; (8011b0c <tcp_receive+0x890>)
 8011948:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801194e:	4b6f      	ldr	r3, [pc, #444]	; (8011b0c <tcp_receive+0x890>)
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	429a      	cmp	r2, r3
 8011954:	d275      	bcs.n	8011a42 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011956:	4b6c      	ldr	r3, [pc, #432]	; (8011b08 <tcp_receive+0x88c>)
 8011958:	68db      	ldr	r3, [r3, #12]
 801195a:	899b      	ldrh	r3, [r3, #12]
 801195c:	b29b      	uxth	r3, r3
 801195e:	4618      	mov	r0, r3
 8011960:	f7fa fcb6 	bl	800c2d0 <lwip_htons>
 8011964:	4603      	mov	r3, r0
 8011966:	b2db      	uxtb	r3, r3
 8011968:	f003 0301 	and.w	r3, r3, #1
 801196c:	2b00      	cmp	r3, #0
 801196e:	d01f      	beq.n	80119b0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011970:	4b65      	ldr	r3, [pc, #404]	; (8011b08 <tcp_receive+0x88c>)
 8011972:	68db      	ldr	r3, [r3, #12]
 8011974:	899b      	ldrh	r3, [r3, #12]
 8011976:	b29b      	uxth	r3, r3
 8011978:	b21b      	sxth	r3, r3
 801197a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801197e:	b21c      	sxth	r4, r3
 8011980:	4b61      	ldr	r3, [pc, #388]	; (8011b08 <tcp_receive+0x88c>)
 8011982:	68db      	ldr	r3, [r3, #12]
 8011984:	899b      	ldrh	r3, [r3, #12]
 8011986:	b29b      	uxth	r3, r3
 8011988:	4618      	mov	r0, r3
 801198a:	f7fa fca1 	bl	800c2d0 <lwip_htons>
 801198e:	4603      	mov	r3, r0
 8011990:	b2db      	uxtb	r3, r3
 8011992:	b29b      	uxth	r3, r3
 8011994:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011998:	b29b      	uxth	r3, r3
 801199a:	4618      	mov	r0, r3
 801199c:	f7fa fc98 	bl	800c2d0 <lwip_htons>
 80119a0:	4603      	mov	r3, r0
 80119a2:	b21b      	sxth	r3, r3
 80119a4:	4323      	orrs	r3, r4
 80119a6:	b21a      	sxth	r2, r3
 80119a8:	4b57      	ldr	r3, [pc, #348]	; (8011b08 <tcp_receive+0x88c>)
 80119aa:	68db      	ldr	r3, [r3, #12]
 80119ac:	b292      	uxth	r2, r2
 80119ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80119b4:	4b54      	ldr	r3, [pc, #336]	; (8011b08 <tcp_receive+0x88c>)
 80119b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80119b8:	4b53      	ldr	r3, [pc, #332]	; (8011b08 <tcp_receive+0x88c>)
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	899b      	ldrh	r3, [r3, #12]
 80119be:	b29b      	uxth	r3, r3
 80119c0:	4618      	mov	r0, r3
 80119c2:	f7fa fc85 	bl	800c2d0 <lwip_htons>
 80119c6:	4603      	mov	r3, r0
 80119c8:	b2db      	uxtb	r3, r3
 80119ca:	f003 0302 	and.w	r3, r3, #2
 80119ce:	2b00      	cmp	r3, #0
 80119d0:	d005      	beq.n	80119de <tcp_receive+0x762>
            inseg.len -= 1;
 80119d2:	4b4d      	ldr	r3, [pc, #308]	; (8011b08 <tcp_receive+0x88c>)
 80119d4:	891b      	ldrh	r3, [r3, #8]
 80119d6:	3b01      	subs	r3, #1
 80119d8:	b29a      	uxth	r2, r3
 80119da:	4b4b      	ldr	r3, [pc, #300]	; (8011b08 <tcp_receive+0x88c>)
 80119dc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80119de:	4b4a      	ldr	r3, [pc, #296]	; (8011b08 <tcp_receive+0x88c>)
 80119e0:	685b      	ldr	r3, [r3, #4]
 80119e2:	4a49      	ldr	r2, [pc, #292]	; (8011b08 <tcp_receive+0x88c>)
 80119e4:	8912      	ldrh	r2, [r2, #8]
 80119e6:	4611      	mov	r1, r2
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7fb ff1f 	bl	800d82c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80119ee:	4b46      	ldr	r3, [pc, #280]	; (8011b08 <tcp_receive+0x88c>)
 80119f0:	891c      	ldrh	r4, [r3, #8]
 80119f2:	4b45      	ldr	r3, [pc, #276]	; (8011b08 <tcp_receive+0x88c>)
 80119f4:	68db      	ldr	r3, [r3, #12]
 80119f6:	899b      	ldrh	r3, [r3, #12]
 80119f8:	b29b      	uxth	r3, r3
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7fa fc68 	bl	800c2d0 <lwip_htons>
 8011a00:	4603      	mov	r3, r0
 8011a02:	b2db      	uxtb	r3, r3
 8011a04:	f003 0303 	and.w	r3, r3, #3
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d001      	beq.n	8011a10 <tcp_receive+0x794>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e000      	b.n	8011a12 <tcp_receive+0x796>
 8011a10:	2300      	movs	r3, #0
 8011a12:	4423      	add	r3, r4
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	4b3d      	ldr	r3, [pc, #244]	; (8011b0c <tcp_receive+0x890>)
 8011a18:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011a1a:	4b3c      	ldr	r3, [pc, #240]	; (8011b0c <tcp_receive+0x890>)
 8011a1c:	881b      	ldrh	r3, [r3, #0]
 8011a1e:	461a      	mov	r2, r3
 8011a20:	4b38      	ldr	r3, [pc, #224]	; (8011b04 <tcp_receive+0x888>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	441a      	add	r2, r3
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a2a:	6879      	ldr	r1, [r7, #4]
 8011a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a2e:	440b      	add	r3, r1
 8011a30:	429a      	cmp	r2, r3
 8011a32:	d006      	beq.n	8011a42 <tcp_receive+0x7c6>
 8011a34:	4b36      	ldr	r3, [pc, #216]	; (8011b10 <tcp_receive+0x894>)
 8011a36:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011a3a:	4936      	ldr	r1, [pc, #216]	; (8011b14 <tcp_receive+0x898>)
 8011a3c:	4836      	ldr	r0, [pc, #216]	; (8011b18 <tcp_receive+0x89c>)
 8011a3e:	f007 fdc5 	bl	80195cc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f000 80e7 	beq.w	8011c1a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a4c:	4b2e      	ldr	r3, [pc, #184]	; (8011b08 <tcp_receive+0x88c>)
 8011a4e:	68db      	ldr	r3, [r3, #12]
 8011a50:	899b      	ldrh	r3, [r3, #12]
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fa fc3b 	bl	800c2d0 <lwip_htons>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	b2db      	uxtb	r3, r3
 8011a5e:	f003 0301 	and.w	r3, r3, #1
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d010      	beq.n	8011a88 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011a66:	e00a      	b.n	8011a7e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a6c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a72:	681a      	ldr	r2, [r3, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011a78:	68f8      	ldr	r0, [r7, #12]
 8011a7a:	f7fd fca6 	bl	800f3ca <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d1f0      	bne.n	8011a68 <tcp_receive+0x7ec>
 8011a86:	e0c8      	b.n	8011c1a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011a8e:	e052      	b.n	8011b36 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a92:	68db      	ldr	r3, [r3, #12]
 8011a94:	899b      	ldrh	r3, [r3, #12]
 8011a96:	b29b      	uxth	r3, r3
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fa fc19 	bl	800c2d0 <lwip_htons>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	f003 0301 	and.w	r3, r3, #1
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d03d      	beq.n	8011b26 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011aaa:	4b17      	ldr	r3, [pc, #92]	; (8011b08 <tcp_receive+0x88c>)
 8011aac:	68db      	ldr	r3, [r3, #12]
 8011aae:	899b      	ldrh	r3, [r3, #12]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7fa fc0c 	bl	800c2d0 <lwip_htons>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	b2db      	uxtb	r3, r3
 8011abc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d130      	bne.n	8011b26 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011ac4:	4b10      	ldr	r3, [pc, #64]	; (8011b08 <tcp_receive+0x88c>)
 8011ac6:	68db      	ldr	r3, [r3, #12]
 8011ac8:	899b      	ldrh	r3, [r3, #12]
 8011aca:	b29c      	uxth	r4, r3
 8011acc:	2001      	movs	r0, #1
 8011ace:	f7fa fbff 	bl	800c2d0 <lwip_htons>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	4b0c      	ldr	r3, [pc, #48]	; (8011b08 <tcp_receive+0x88c>)
 8011ad8:	68db      	ldr	r3, [r3, #12]
 8011ada:	4322      	orrs	r2, r4
 8011adc:	b292      	uxth	r2, r2
 8011ade:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8011ae0:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <tcp_receive+0x88c>)
 8011ae2:	891c      	ldrh	r4, [r3, #8]
 8011ae4:	4b08      	ldr	r3, [pc, #32]	; (8011b08 <tcp_receive+0x88c>)
 8011ae6:	68db      	ldr	r3, [r3, #12]
 8011ae8:	899b      	ldrh	r3, [r3, #12]
 8011aea:	b29b      	uxth	r3, r3
 8011aec:	4618      	mov	r0, r3
 8011aee:	f7fa fbef 	bl	800c2d0 <lwip_htons>
 8011af2:	4603      	mov	r3, r0
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	f003 0303 	and.w	r3, r3, #3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d00e      	beq.n	8011b1c <tcp_receive+0x8a0>
 8011afe:	2301      	movs	r3, #1
 8011b00:	e00d      	b.n	8011b1e <tcp_receive+0x8a2>
 8011b02:	bf00      	nop
 8011b04:	2000cf5c 	.word	0x2000cf5c
 8011b08:	2000cf3c 	.word	0x2000cf3c
 8011b0c:	2000cf66 	.word	0x2000cf66
 8011b10:	0801bb7c 	.word	0x0801bb7c
 8011b14:	0801bf24 	.word	0x0801bf24
 8011b18:	0801bbc8 	.word	0x0801bbc8
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4423      	add	r3, r4
 8011b20:	b29a      	uxth	r2, r3
 8011b22:	4b98      	ldr	r3, [pc, #608]	; (8011d84 <tcp_receive+0xb08>)
 8011b24:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011b26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b28:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011b30:	6938      	ldr	r0, [r7, #16]
 8011b32:	f7fd fc4a 	bl	800f3ca <tcp_seg_free>
            while (next &&
 8011b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d00e      	beq.n	8011b5a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011b3c:	4b91      	ldr	r3, [pc, #580]	; (8011d84 <tcp_receive+0xb08>)
 8011b3e:	881b      	ldrh	r3, [r3, #0]
 8011b40:	461a      	mov	r2, r3
 8011b42:	4b91      	ldr	r3, [pc, #580]	; (8011d88 <tcp_receive+0xb0c>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	441a      	add	r2, r3
 8011b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011b50:	8909      	ldrh	r1, [r1, #8]
 8011b52:	440b      	add	r3, r1
 8011b54:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	da9a      	bge.n	8011a90 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d059      	beq.n	8011c14 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011b60:	4b88      	ldr	r3, [pc, #544]	; (8011d84 <tcp_receive+0xb08>)
 8011b62:	881b      	ldrh	r3, [r3, #0]
 8011b64:	461a      	mov	r2, r3
 8011b66:	4b88      	ldr	r3, [pc, #544]	; (8011d88 <tcp_receive+0xb0c>)
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	441a      	add	r2, r3
 8011b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	685b      	ldr	r3, [r3, #4]
 8011b72:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	dd4d      	ble.n	8011c14 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	685b      	ldr	r3, [r3, #4]
 8011b7e:	b29a      	uxth	r2, r3
 8011b80:	4b81      	ldr	r3, [pc, #516]	; (8011d88 <tcp_receive+0xb0c>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	b29b      	uxth	r3, r3
 8011b86:	1ad3      	subs	r3, r2, r3
 8011b88:	b29a      	uxth	r2, r3
 8011b8a:	4b80      	ldr	r3, [pc, #512]	; (8011d8c <tcp_receive+0xb10>)
 8011b8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011b8e:	4b7f      	ldr	r3, [pc, #508]	; (8011d8c <tcp_receive+0xb10>)
 8011b90:	68db      	ldr	r3, [r3, #12]
 8011b92:	899b      	ldrh	r3, [r3, #12]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	4618      	mov	r0, r3
 8011b98:	f7fa fb9a 	bl	800c2d0 <lwip_htons>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	b2db      	uxtb	r3, r3
 8011ba0:	f003 0302 	and.w	r3, r3, #2
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d005      	beq.n	8011bb4 <tcp_receive+0x938>
                inseg.len -= 1;
 8011ba8:	4b78      	ldr	r3, [pc, #480]	; (8011d8c <tcp_receive+0xb10>)
 8011baa:	891b      	ldrh	r3, [r3, #8]
 8011bac:	3b01      	subs	r3, #1
 8011bae:	b29a      	uxth	r2, r3
 8011bb0:	4b76      	ldr	r3, [pc, #472]	; (8011d8c <tcp_receive+0xb10>)
 8011bb2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011bb4:	4b75      	ldr	r3, [pc, #468]	; (8011d8c <tcp_receive+0xb10>)
 8011bb6:	685b      	ldr	r3, [r3, #4]
 8011bb8:	4a74      	ldr	r2, [pc, #464]	; (8011d8c <tcp_receive+0xb10>)
 8011bba:	8912      	ldrh	r2, [r2, #8]
 8011bbc:	4611      	mov	r1, r2
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	f7fb fe34 	bl	800d82c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011bc4:	4b71      	ldr	r3, [pc, #452]	; (8011d8c <tcp_receive+0xb10>)
 8011bc6:	891c      	ldrh	r4, [r3, #8]
 8011bc8:	4b70      	ldr	r3, [pc, #448]	; (8011d8c <tcp_receive+0xb10>)
 8011bca:	68db      	ldr	r3, [r3, #12]
 8011bcc:	899b      	ldrh	r3, [r3, #12]
 8011bce:	b29b      	uxth	r3, r3
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7fa fb7d 	bl	800c2d0 <lwip_htons>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	b2db      	uxtb	r3, r3
 8011bda:	f003 0303 	and.w	r3, r3, #3
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d001      	beq.n	8011be6 <tcp_receive+0x96a>
 8011be2:	2301      	movs	r3, #1
 8011be4:	e000      	b.n	8011be8 <tcp_receive+0x96c>
 8011be6:	2300      	movs	r3, #0
 8011be8:	4423      	add	r3, r4
 8011bea:	b29a      	uxth	r2, r3
 8011bec:	4b65      	ldr	r3, [pc, #404]	; (8011d84 <tcp_receive+0xb08>)
 8011bee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011bf0:	4b64      	ldr	r3, [pc, #400]	; (8011d84 <tcp_receive+0xb08>)
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	461a      	mov	r2, r3
 8011bf6:	4b64      	ldr	r3, [pc, #400]	; (8011d88 <tcp_receive+0xb0c>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	441a      	add	r2, r3
 8011bfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bfe:	68db      	ldr	r3, [r3, #12]
 8011c00:	685b      	ldr	r3, [r3, #4]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d006      	beq.n	8011c14 <tcp_receive+0x998>
 8011c06:	4b62      	ldr	r3, [pc, #392]	; (8011d90 <tcp_receive+0xb14>)
 8011c08:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011c0c:	4961      	ldr	r1, [pc, #388]	; (8011d94 <tcp_receive+0xb18>)
 8011c0e:	4862      	ldr	r0, [pc, #392]	; (8011d98 <tcp_receive+0xb1c>)
 8011c10:	f007 fcdc 	bl	80195cc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011c18:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011c1a:	4b5a      	ldr	r3, [pc, #360]	; (8011d84 <tcp_receive+0xb08>)
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	4b59      	ldr	r3, [pc, #356]	; (8011d88 <tcp_receive+0xb0c>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	441a      	add	r2, r3
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c2e:	4b55      	ldr	r3, [pc, #340]	; (8011d84 <tcp_receive+0xb08>)
 8011c30:	881b      	ldrh	r3, [r3, #0]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d206      	bcs.n	8011c44 <tcp_receive+0x9c8>
 8011c36:	4b56      	ldr	r3, [pc, #344]	; (8011d90 <tcp_receive+0xb14>)
 8011c38:	f240 6207 	movw	r2, #1543	; 0x607
 8011c3c:	4957      	ldr	r1, [pc, #348]	; (8011d9c <tcp_receive+0xb20>)
 8011c3e:	4856      	ldr	r0, [pc, #344]	; (8011d98 <tcp_receive+0xb1c>)
 8011c40:	f007 fcc4 	bl	80195cc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011c48:	4b4e      	ldr	r3, [pc, #312]	; (8011d84 <tcp_receive+0xb08>)
 8011c4a:	881b      	ldrh	r3, [r3, #0]
 8011c4c:	1ad3      	subs	r3, r2, r3
 8011c4e:	b29a      	uxth	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011c54:	6878      	ldr	r0, [r7, #4]
 8011c56:	f7fc fe93 	bl	800e980 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011c5a:	4b4c      	ldr	r3, [pc, #304]	; (8011d8c <tcp_receive+0xb10>)
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	891b      	ldrh	r3, [r3, #8]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d006      	beq.n	8011c72 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011c64:	4b49      	ldr	r3, [pc, #292]	; (8011d8c <tcp_receive+0xb10>)
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	4a4d      	ldr	r2, [pc, #308]	; (8011da0 <tcp_receive+0xb24>)
 8011c6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011c6c:	4b47      	ldr	r3, [pc, #284]	; (8011d8c <tcp_receive+0xb10>)
 8011c6e:	2200      	movs	r2, #0
 8011c70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011c72:	4b46      	ldr	r3, [pc, #280]	; (8011d8c <tcp_receive+0xb10>)
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	899b      	ldrh	r3, [r3, #12]
 8011c78:	b29b      	uxth	r3, r3
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	f7fa fb28 	bl	800c2d0 <lwip_htons>
 8011c80:	4603      	mov	r3, r0
 8011c82:	b2db      	uxtb	r3, r3
 8011c84:	f003 0301 	and.w	r3, r3, #1
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	f000 80b8 	beq.w	8011dfe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8011c8e:	4b45      	ldr	r3, [pc, #276]	; (8011da4 <tcp_receive+0xb28>)
 8011c90:	781b      	ldrb	r3, [r3, #0]
 8011c92:	f043 0320 	orr.w	r3, r3, #32
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	4b42      	ldr	r3, [pc, #264]	; (8011da4 <tcp_receive+0xb28>)
 8011c9a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011c9c:	e0af      	b.n	8011dfe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ca2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	685b      	ldr	r3, [r3, #4]
 8011cac:	4a36      	ldr	r2, [pc, #216]	; (8011d88 <tcp_receive+0xb0c>)
 8011cae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	461c      	mov	r4, r3
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	899b      	ldrh	r3, [r3, #12]
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fa fb06 	bl	800c2d0 <lwip_htons>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	f003 0303 	and.w	r3, r3, #3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <tcp_receive+0xa58>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e000      	b.n	8011cd6 <tcp_receive+0xa5a>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	191a      	adds	r2, r3, r4
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cdc:	441a      	add	r2, r3
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ce6:	461c      	mov	r4, r3
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	891b      	ldrh	r3, [r3, #8]
 8011cec:	461d      	mov	r5, r3
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	68db      	ldr	r3, [r3, #12]
 8011cf2:	899b      	ldrh	r3, [r3, #12]
 8011cf4:	b29b      	uxth	r3, r3
 8011cf6:	4618      	mov	r0, r3
 8011cf8:	f7fa faea 	bl	800c2d0 <lwip_htons>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	b2db      	uxtb	r3, r3
 8011d00:	f003 0303 	and.w	r3, r3, #3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d001      	beq.n	8011d0c <tcp_receive+0xa90>
 8011d08:	2301      	movs	r3, #1
 8011d0a:	e000      	b.n	8011d0e <tcp_receive+0xa92>
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	442b      	add	r3, r5
 8011d10:	429c      	cmp	r4, r3
 8011d12:	d206      	bcs.n	8011d22 <tcp_receive+0xaa6>
 8011d14:	4b1e      	ldr	r3, [pc, #120]	; (8011d90 <tcp_receive+0xb14>)
 8011d16:	f240 622b 	movw	r2, #1579	; 0x62b
 8011d1a:	4923      	ldr	r1, [pc, #140]	; (8011da8 <tcp_receive+0xb2c>)
 8011d1c:	481e      	ldr	r0, [pc, #120]	; (8011d98 <tcp_receive+0xb1c>)
 8011d1e:	f007 fc55 	bl	80195cc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011d22:	68bb      	ldr	r3, [r7, #8]
 8011d24:	891b      	ldrh	r3, [r3, #8]
 8011d26:	461c      	mov	r4, r3
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	68db      	ldr	r3, [r3, #12]
 8011d2c:	899b      	ldrh	r3, [r3, #12]
 8011d2e:	b29b      	uxth	r3, r3
 8011d30:	4618      	mov	r0, r3
 8011d32:	f7fa facd 	bl	800c2d0 <lwip_htons>
 8011d36:	4603      	mov	r3, r0
 8011d38:	b2db      	uxtb	r3, r3
 8011d3a:	f003 0303 	and.w	r3, r3, #3
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d001      	beq.n	8011d46 <tcp_receive+0xaca>
 8011d42:	2301      	movs	r3, #1
 8011d44:	e000      	b.n	8011d48 <tcp_receive+0xacc>
 8011d46:	2300      	movs	r3, #0
 8011d48:	1919      	adds	r1, r3, r4
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d4e:	b28b      	uxth	r3, r1
 8011d50:	1ad3      	subs	r3, r2, r3
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f7fc fe11 	bl	800e980 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	685b      	ldr	r3, [r3, #4]
 8011d62:	891b      	ldrh	r3, [r3, #8]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d028      	beq.n	8011dba <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011d68:	4b0d      	ldr	r3, [pc, #52]	; (8011da0 <tcp_receive+0xb24>)
 8011d6a:	681b      	ldr	r3, [r3, #0]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d01d      	beq.n	8011dac <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011d70:	4b0b      	ldr	r3, [pc, #44]	; (8011da0 <tcp_receive+0xb24>)
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	68bb      	ldr	r3, [r7, #8]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	4619      	mov	r1, r3
 8011d7a:	4610      	mov	r0, r2
 8011d7c:	f7fb ffaa 	bl	800dcd4 <pbuf_cat>
 8011d80:	e018      	b.n	8011db4 <tcp_receive+0xb38>
 8011d82:	bf00      	nop
 8011d84:	2000cf66 	.word	0x2000cf66
 8011d88:	2000cf5c 	.word	0x2000cf5c
 8011d8c:	2000cf3c 	.word	0x2000cf3c
 8011d90:	0801bb7c 	.word	0x0801bb7c
 8011d94:	0801bf5c 	.word	0x0801bf5c
 8011d98:	0801bbc8 	.word	0x0801bbc8
 8011d9c:	0801bf98 	.word	0x0801bf98
 8011da0:	2000cf6c 	.word	0x2000cf6c
 8011da4:	2000cf69 	.word	0x2000cf69
 8011da8:	0801bfb8 	.word	0x0801bfb8
            } else {
              recv_data = cseg->p;
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	4a70      	ldr	r2, [pc, #448]	; (8011f74 <tcp_receive+0xcf8>)
 8011db2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	2200      	movs	r2, #0
 8011db8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	68db      	ldr	r3, [r3, #12]
 8011dbe:	899b      	ldrh	r3, [r3, #12]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7fa fa84 	bl	800c2d0 <lwip_htons>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	b2db      	uxtb	r3, r3
 8011dcc:	f003 0301 	and.w	r3, r3, #1
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00d      	beq.n	8011df0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011dd4:	4b68      	ldr	r3, [pc, #416]	; (8011f78 <tcp_receive+0xcfc>)
 8011dd6:	781b      	ldrb	r3, [r3, #0]
 8011dd8:	f043 0320 	orr.w	r3, r3, #32
 8011ddc:	b2da      	uxtb	r2, r3
 8011dde:	4b66      	ldr	r3, [pc, #408]	; (8011f78 <tcp_receive+0xcfc>)
 8011de0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	7d1b      	ldrb	r3, [r3, #20]
 8011de6:	2b04      	cmp	r3, #4
 8011de8:	d102      	bne.n	8011df0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2207      	movs	r2, #7
 8011dee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	681a      	ldr	r2, [r3, #0]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011df8:	68b8      	ldr	r0, [r7, #8]
 8011dfa:	f7fd fae6 	bl	800f3ca <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d008      	beq.n	8011e18 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	685a      	ldr	r2, [r3, #4]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011e12:	429a      	cmp	r2, r3
 8011e14:	f43f af43 	beq.w	8011c9e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	8b5b      	ldrh	r3, [r3, #26]
 8011e1c:	f003 0301 	and.w	r3, r3, #1
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00e      	beq.n	8011e42 <tcp_receive+0xbc6>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	8b5b      	ldrh	r3, [r3, #26]
 8011e28:	f023 0301 	bic.w	r3, r3, #1
 8011e2c:	b29a      	uxth	r2, r3
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	835a      	strh	r2, [r3, #26]
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	8b5b      	ldrh	r3, [r3, #26]
 8011e36:	f043 0302 	orr.w	r3, r3, #2
 8011e3a:	b29a      	uxth	r2, r3
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e40:	e188      	b.n	8012154 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	8b5b      	ldrh	r3, [r3, #26]
 8011e46:	f043 0301 	orr.w	r3, r3, #1
 8011e4a:	b29a      	uxth	r2, r3
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011e50:	e180      	b.n	8012154 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d106      	bne.n	8011e68 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011e5a:	4848      	ldr	r0, [pc, #288]	; (8011f7c <tcp_receive+0xd00>)
 8011e5c:	f7fd faec 	bl	800f438 <tcp_seg_copy>
 8011e60:	4602      	mov	r2, r0
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	675a      	str	r2, [r3, #116]	; 0x74
 8011e66:	e16d      	b.n	8012144 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011e68:	2300      	movs	r3, #0
 8011e6a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011e70:	63bb      	str	r3, [r7, #56]	; 0x38
 8011e72:	e157      	b.n	8012124 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	685a      	ldr	r2, [r3, #4]
 8011e7a:	4b41      	ldr	r3, [pc, #260]	; (8011f80 <tcp_receive+0xd04>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	d11d      	bne.n	8011ebe <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011e82:	4b3e      	ldr	r3, [pc, #248]	; (8011f7c <tcp_receive+0xd00>)
 8011e84:	891a      	ldrh	r2, [r3, #8]
 8011e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e88:	891b      	ldrh	r3, [r3, #8]
 8011e8a:	429a      	cmp	r2, r3
 8011e8c:	f240 814f 	bls.w	801212e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011e90:	483a      	ldr	r0, [pc, #232]	; (8011f7c <tcp_receive+0xd00>)
 8011e92:	f7fd fad1 	bl	800f438 <tcp_seg_copy>
 8011e96:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011e98:	697b      	ldr	r3, [r7, #20]
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f000 8149 	beq.w	8012132 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d003      	beq.n	8011eae <tcp_receive+0xc32>
                    prev->next = cseg;
 8011ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ea8:	697a      	ldr	r2, [r7, #20]
 8011eaa:	601a      	str	r2, [r3, #0]
 8011eac:	e002      	b.n	8011eb4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	697a      	ldr	r2, [r7, #20]
 8011eb2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011eb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011eb6:	6978      	ldr	r0, [r7, #20]
 8011eb8:	f7ff f8dc 	bl	8011074 <tcp_oos_insert_segment>
                }
                break;
 8011ebc:	e139      	b.n	8012132 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d117      	bne.n	8011ef4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011ec4:	4b2e      	ldr	r3, [pc, #184]	; (8011f80 <tcp_receive+0xd04>)
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eca:	68db      	ldr	r3, [r3, #12]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	1ad3      	subs	r3, r2, r3
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	da57      	bge.n	8011f84 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011ed4:	4829      	ldr	r0, [pc, #164]	; (8011f7c <tcp_receive+0xd00>)
 8011ed6:	f7fd faaf 	bl	800f438 <tcp_seg_copy>
 8011eda:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	f000 8129 	beq.w	8012136 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	69ba      	ldr	r2, [r7, #24]
 8011ee8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011eea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011eec:	69b8      	ldr	r0, [r7, #24]
 8011eee:	f7ff f8c1 	bl	8011074 <tcp_oos_insert_segment>
                  }
                  break;
 8011ef2:	e120      	b.n	8012136 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011ef4:	4b22      	ldr	r3, [pc, #136]	; (8011f80 <tcp_receive+0xd04>)
 8011ef6:	681a      	ldr	r2, [r3, #0]
 8011ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	685b      	ldr	r3, [r3, #4]
 8011efe:	1ad3      	subs	r3, r2, r3
 8011f00:	3b01      	subs	r3, #1
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	db3e      	blt.n	8011f84 <tcp_receive+0xd08>
 8011f06:	4b1e      	ldr	r3, [pc, #120]	; (8011f80 <tcp_receive+0xd04>)
 8011f08:	681a      	ldr	r2, [r3, #0]
 8011f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f0c:	68db      	ldr	r3, [r3, #12]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	1ad3      	subs	r3, r2, r3
 8011f12:	3301      	adds	r3, #1
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	dc35      	bgt.n	8011f84 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011f18:	4818      	ldr	r0, [pc, #96]	; (8011f7c <tcp_receive+0xd00>)
 8011f1a:	f7fd fa8d 	bl	800f438 <tcp_seg_copy>
 8011f1e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	f000 8109 	beq.w	801213a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f2a:	68db      	ldr	r3, [r3, #12]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011f30:	8912      	ldrh	r2, [r2, #8]
 8011f32:	441a      	add	r2, r3
 8011f34:	4b12      	ldr	r3, [pc, #72]	; (8011f80 <tcp_receive+0xd04>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	1ad3      	subs	r3, r2, r3
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	dd12      	ble.n	8011f64 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011f3e:	4b10      	ldr	r3, [pc, #64]	; (8011f80 <tcp_receive+0xd04>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	b29a      	uxth	r2, r3
 8011f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f46:	68db      	ldr	r3, [r3, #12]
 8011f48:	685b      	ldr	r3, [r3, #4]
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	1ad3      	subs	r3, r2, r3
 8011f4e:	b29a      	uxth	r2, r3
 8011f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f52:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f56:	685a      	ldr	r2, [r3, #4]
 8011f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f5a:	891b      	ldrh	r3, [r3, #8]
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	4610      	mov	r0, r2
 8011f60:	f7fb fc64 	bl	800d82c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f66:	69fa      	ldr	r2, [r7, #28]
 8011f68:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011f6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011f6c:	69f8      	ldr	r0, [r7, #28]
 8011f6e:	f7ff f881 	bl	8011074 <tcp_oos_insert_segment>
                  }
                  break;
 8011f72:	e0e2      	b.n	801213a <tcp_receive+0xebe>
 8011f74:	2000cf6c 	.word	0x2000cf6c
 8011f78:	2000cf69 	.word	0x2000cf69
 8011f7c:	2000cf3c 	.word	0x2000cf3c
 8011f80:	2000cf5c 	.word	0x2000cf5c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f86:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	f040 80c6 	bne.w	801211e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011f92:	4b80      	ldr	r3, [pc, #512]	; (8012194 <tcp_receive+0xf18>)
 8011f94:	681a      	ldr	r2, [r3, #0]
 8011f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f340 80bd 	ble.w	801211e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	899b      	ldrh	r3, [r3, #12]
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7fa f98f 	bl	800c2d0 <lwip_htons>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	b2db      	uxtb	r3, r3
 8011fb6:	f003 0301 	and.w	r3, r3, #1
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	f040 80bf 	bne.w	801213e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011fc0:	4875      	ldr	r0, [pc, #468]	; (8012198 <tcp_receive+0xf1c>)
 8011fc2:	f7fd fa39 	bl	800f438 <tcp_seg_copy>
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	f000 80b6 	beq.w	8012142 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd8:	68db      	ldr	r3, [r3, #12]
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011fde:	8912      	ldrh	r2, [r2, #8]
 8011fe0:	441a      	add	r2, r3
 8011fe2:	4b6c      	ldr	r3, [pc, #432]	; (8012194 <tcp_receive+0xf18>)
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	dd12      	ble.n	8012012 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011fec:	4b69      	ldr	r3, [pc, #420]	; (8012194 <tcp_receive+0xf18>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	b29a      	uxth	r2, r3
 8011ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ff4:	68db      	ldr	r3, [r3, #12]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	b29b      	uxth	r3, r3
 8011ffa:	1ad3      	subs	r3, r2, r3
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012000:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	685a      	ldr	r2, [r3, #4]
 8012006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012008:	891b      	ldrh	r3, [r3, #8]
 801200a:	4619      	mov	r1, r3
 801200c:	4610      	mov	r0, r2
 801200e:	f7fb fc0d 	bl	800d82c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8012012:	4b62      	ldr	r3, [pc, #392]	; (801219c <tcp_receive+0xf20>)
 8012014:	881b      	ldrh	r3, [r3, #0]
 8012016:	461a      	mov	r2, r3
 8012018:	4b5e      	ldr	r3, [pc, #376]	; (8012194 <tcp_receive+0xf18>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	441a      	add	r2, r3
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012022:	6879      	ldr	r1, [r7, #4]
 8012024:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012026:	440b      	add	r3, r1
 8012028:	1ad3      	subs	r3, r2, r3
 801202a:	2b00      	cmp	r3, #0
 801202c:	f340 8089 	ble.w	8012142 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8012030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	68db      	ldr	r3, [r3, #12]
 8012036:	899b      	ldrh	r3, [r3, #12]
 8012038:	b29b      	uxth	r3, r3
 801203a:	4618      	mov	r0, r3
 801203c:	f7fa f948 	bl	800c2d0 <lwip_htons>
 8012040:	4603      	mov	r3, r0
 8012042:	b2db      	uxtb	r3, r3
 8012044:	f003 0301 	and.w	r3, r3, #1
 8012048:	2b00      	cmp	r3, #0
 801204a:	d022      	beq.n	8012092 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801204c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	68db      	ldr	r3, [r3, #12]
 8012052:	899b      	ldrh	r3, [r3, #12]
 8012054:	b29b      	uxth	r3, r3
 8012056:	b21b      	sxth	r3, r3
 8012058:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801205c:	b21c      	sxth	r4, r3
 801205e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	68db      	ldr	r3, [r3, #12]
 8012064:	899b      	ldrh	r3, [r3, #12]
 8012066:	b29b      	uxth	r3, r3
 8012068:	4618      	mov	r0, r3
 801206a:	f7fa f931 	bl	800c2d0 <lwip_htons>
 801206e:	4603      	mov	r3, r0
 8012070:	b2db      	uxtb	r3, r3
 8012072:	b29b      	uxth	r3, r3
 8012074:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012078:	b29b      	uxth	r3, r3
 801207a:	4618      	mov	r0, r3
 801207c:	f7fa f928 	bl	800c2d0 <lwip_htons>
 8012080:	4603      	mov	r3, r0
 8012082:	b21b      	sxth	r3, r3
 8012084:	4323      	orrs	r3, r4
 8012086:	b21a      	sxth	r2, r3
 8012088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	b292      	uxth	r2, r2
 8012090:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012096:	b29a      	uxth	r2, r3
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801209c:	4413      	add	r3, r2
 801209e:	b299      	uxth	r1, r3
 80120a0:	4b3c      	ldr	r3, [pc, #240]	; (8012194 <tcp_receive+0xf18>)
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	1a8a      	subs	r2, r1, r2
 80120ac:	b292      	uxth	r2, r2
 80120ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80120b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	685a      	ldr	r2, [r3, #4]
 80120b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	891b      	ldrh	r3, [r3, #8]
 80120bc:	4619      	mov	r1, r3
 80120be:	4610      	mov	r0, r2
 80120c0:	f7fb fbb4 	bl	800d82c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80120c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	891c      	ldrh	r4, [r3, #8]
 80120ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120cc:	681b      	ldr	r3, [r3, #0]
 80120ce:	68db      	ldr	r3, [r3, #12]
 80120d0:	899b      	ldrh	r3, [r3, #12]
 80120d2:	b29b      	uxth	r3, r3
 80120d4:	4618      	mov	r0, r3
 80120d6:	f7fa f8fb 	bl	800c2d0 <lwip_htons>
 80120da:	4603      	mov	r3, r0
 80120dc:	b2db      	uxtb	r3, r3
 80120de:	f003 0303 	and.w	r3, r3, #3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d001      	beq.n	80120ea <tcp_receive+0xe6e>
 80120e6:	2301      	movs	r3, #1
 80120e8:	e000      	b.n	80120ec <tcp_receive+0xe70>
 80120ea:	2300      	movs	r3, #0
 80120ec:	4423      	add	r3, r4
 80120ee:	b29a      	uxth	r2, r3
 80120f0:	4b2a      	ldr	r3, [pc, #168]	; (801219c <tcp_receive+0xf20>)
 80120f2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80120f4:	4b29      	ldr	r3, [pc, #164]	; (801219c <tcp_receive+0xf20>)
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	461a      	mov	r2, r3
 80120fa:	4b26      	ldr	r3, [pc, #152]	; (8012194 <tcp_receive+0xf18>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	441a      	add	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	6879      	ldr	r1, [r7, #4]
 8012106:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012108:	440b      	add	r3, r1
 801210a:	429a      	cmp	r2, r3
 801210c:	d019      	beq.n	8012142 <tcp_receive+0xec6>
 801210e:	4b24      	ldr	r3, [pc, #144]	; (80121a0 <tcp_receive+0xf24>)
 8012110:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8012114:	4923      	ldr	r1, [pc, #140]	; (80121a4 <tcp_receive+0xf28>)
 8012116:	4824      	ldr	r0, [pc, #144]	; (80121a8 <tcp_receive+0xf2c>)
 8012118:	f007 fa58 	bl	80195cc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801211c:	e011      	b.n	8012142 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801211e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	63bb      	str	r3, [r7, #56]	; 0x38
 8012124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012126:	2b00      	cmp	r3, #0
 8012128:	f47f aea4 	bne.w	8011e74 <tcp_receive+0xbf8>
 801212c:	e00a      	b.n	8012144 <tcp_receive+0xec8>
                break;
 801212e:	bf00      	nop
 8012130:	e008      	b.n	8012144 <tcp_receive+0xec8>
                break;
 8012132:	bf00      	nop
 8012134:	e006      	b.n	8012144 <tcp_receive+0xec8>
                  break;
 8012136:	bf00      	nop
 8012138:	e004      	b.n	8012144 <tcp_receive+0xec8>
                  break;
 801213a:	bf00      	nop
 801213c:	e002      	b.n	8012144 <tcp_receive+0xec8>
                  break;
 801213e:	bf00      	nop
 8012140:	e000      	b.n	8012144 <tcp_receive+0xec8>
                break;
 8012142:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f001 fe8b 	bl	8013e60 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801214a:	e003      	b.n	8012154 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f001 fe87 	bl	8013e60 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012152:	e01a      	b.n	801218a <tcp_receive+0xf0e>
 8012154:	e019      	b.n	801218a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012156:	4b0f      	ldr	r3, [pc, #60]	; (8012194 <tcp_receive+0xf18>)
 8012158:	681a      	ldr	r2, [r3, #0]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	2b00      	cmp	r3, #0
 8012162:	db0a      	blt.n	801217a <tcp_receive+0xefe>
 8012164:	4b0b      	ldr	r3, [pc, #44]	; (8012194 <tcp_receive+0xf18>)
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801216c:	6879      	ldr	r1, [r7, #4]
 801216e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012170:	440b      	add	r3, r1
 8012172:	1ad3      	subs	r3, r2, r3
 8012174:	3301      	adds	r3, #1
 8012176:	2b00      	cmp	r3, #0
 8012178:	dd07      	ble.n	801218a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	8b5b      	ldrh	r3, [r3, #26]
 801217e:	f043 0302 	orr.w	r3, r3, #2
 8012182:	b29a      	uxth	r2, r3
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012188:	e7ff      	b.n	801218a <tcp_receive+0xf0e>
 801218a:	bf00      	nop
 801218c:	3750      	adds	r7, #80	; 0x50
 801218e:	46bd      	mov	sp, r7
 8012190:	bdb0      	pop	{r4, r5, r7, pc}
 8012192:	bf00      	nop
 8012194:	2000cf5c 	.word	0x2000cf5c
 8012198:	2000cf3c 	.word	0x2000cf3c
 801219c:	2000cf66 	.word	0x2000cf66
 80121a0:	0801bb7c 	.word	0x0801bb7c
 80121a4:	0801bf24 	.word	0x0801bf24
 80121a8:	0801bbc8 	.word	0x0801bbc8

080121ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80121b2:	4b15      	ldr	r3, [pc, #84]	; (8012208 <tcp_get_next_optbyte+0x5c>)
 80121b4:	881b      	ldrh	r3, [r3, #0]
 80121b6:	1c5a      	adds	r2, r3, #1
 80121b8:	b291      	uxth	r1, r2
 80121ba:	4a13      	ldr	r2, [pc, #76]	; (8012208 <tcp_get_next_optbyte+0x5c>)
 80121bc:	8011      	strh	r1, [r2, #0]
 80121be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80121c0:	4b12      	ldr	r3, [pc, #72]	; (801220c <tcp_get_next_optbyte+0x60>)
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d004      	beq.n	80121d2 <tcp_get_next_optbyte+0x26>
 80121c8:	4b11      	ldr	r3, [pc, #68]	; (8012210 <tcp_get_next_optbyte+0x64>)
 80121ca:	881b      	ldrh	r3, [r3, #0]
 80121cc:	88fa      	ldrh	r2, [r7, #6]
 80121ce:	429a      	cmp	r2, r3
 80121d0:	d208      	bcs.n	80121e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80121d2:	4b10      	ldr	r3, [pc, #64]	; (8012214 <tcp_get_next_optbyte+0x68>)
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	3314      	adds	r3, #20
 80121d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80121da:	88fb      	ldrh	r3, [r7, #6]
 80121dc:	683a      	ldr	r2, [r7, #0]
 80121de:	4413      	add	r3, r2
 80121e0:	781b      	ldrb	r3, [r3, #0]
 80121e2:	e00b      	b.n	80121fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80121e4:	88fb      	ldrh	r3, [r7, #6]
 80121e6:	b2da      	uxtb	r2, r3
 80121e8:	4b09      	ldr	r3, [pc, #36]	; (8012210 <tcp_get_next_optbyte+0x64>)
 80121ea:	881b      	ldrh	r3, [r3, #0]
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80121f2:	4b06      	ldr	r3, [pc, #24]	; (801220c <tcp_get_next_optbyte+0x60>)
 80121f4:	681a      	ldr	r2, [r3, #0]
 80121f6:	797b      	ldrb	r3, [r7, #5]
 80121f8:	4413      	add	r3, r2
 80121fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80121fc:	4618      	mov	r0, r3
 80121fe:	370c      	adds	r7, #12
 8012200:	46bd      	mov	sp, r7
 8012202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012206:	4770      	bx	lr
 8012208:	2000cf58 	.word	0x2000cf58
 801220c:	2000cf54 	.word	0x2000cf54
 8012210:	2000cf52 	.word	0x2000cf52
 8012214:	2000cf4c 	.word	0x2000cf4c

08012218 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b084      	sub	sp, #16
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d106      	bne.n	8012234 <tcp_parseopt+0x1c>
 8012226:	4b32      	ldr	r3, [pc, #200]	; (80122f0 <tcp_parseopt+0xd8>)
 8012228:	f240 727d 	movw	r2, #1917	; 0x77d
 801222c:	4931      	ldr	r1, [pc, #196]	; (80122f4 <tcp_parseopt+0xdc>)
 801222e:	4832      	ldr	r0, [pc, #200]	; (80122f8 <tcp_parseopt+0xe0>)
 8012230:	f007 f9cc 	bl	80195cc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012234:	4b31      	ldr	r3, [pc, #196]	; (80122fc <tcp_parseopt+0xe4>)
 8012236:	881b      	ldrh	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d055      	beq.n	80122e8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801223c:	4b30      	ldr	r3, [pc, #192]	; (8012300 <tcp_parseopt+0xe8>)
 801223e:	2200      	movs	r2, #0
 8012240:	801a      	strh	r2, [r3, #0]
 8012242:	e045      	b.n	80122d0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8012244:	f7ff ffb2 	bl	80121ac <tcp_get_next_optbyte>
 8012248:	4603      	mov	r3, r0
 801224a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801224c:	7bfb      	ldrb	r3, [r7, #15]
 801224e:	2b02      	cmp	r3, #2
 8012250:	d006      	beq.n	8012260 <tcp_parseopt+0x48>
 8012252:	2b02      	cmp	r3, #2
 8012254:	dc2b      	bgt.n	80122ae <tcp_parseopt+0x96>
 8012256:	2b00      	cmp	r3, #0
 8012258:	d041      	beq.n	80122de <tcp_parseopt+0xc6>
 801225a:	2b01      	cmp	r3, #1
 801225c:	d127      	bne.n	80122ae <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801225e:	e037      	b.n	80122d0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012260:	f7ff ffa4 	bl	80121ac <tcp_get_next_optbyte>
 8012264:	4603      	mov	r3, r0
 8012266:	2b04      	cmp	r3, #4
 8012268:	d13b      	bne.n	80122e2 <tcp_parseopt+0xca>
 801226a:	4b25      	ldr	r3, [pc, #148]	; (8012300 <tcp_parseopt+0xe8>)
 801226c:	881b      	ldrh	r3, [r3, #0]
 801226e:	3301      	adds	r3, #1
 8012270:	4a22      	ldr	r2, [pc, #136]	; (80122fc <tcp_parseopt+0xe4>)
 8012272:	8812      	ldrh	r2, [r2, #0]
 8012274:	4293      	cmp	r3, r2
 8012276:	da34      	bge.n	80122e2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012278:	f7ff ff98 	bl	80121ac <tcp_get_next_optbyte>
 801227c:	4603      	mov	r3, r0
 801227e:	b29b      	uxth	r3, r3
 8012280:	021b      	lsls	r3, r3, #8
 8012282:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012284:	f7ff ff92 	bl	80121ac <tcp_get_next_optbyte>
 8012288:	4603      	mov	r3, r0
 801228a:	b29a      	uxth	r2, r3
 801228c:	89bb      	ldrh	r3, [r7, #12]
 801228e:	4313      	orrs	r3, r2
 8012290:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012292:	89bb      	ldrh	r3, [r7, #12]
 8012294:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012298:	d804      	bhi.n	80122a4 <tcp_parseopt+0x8c>
 801229a:	89bb      	ldrh	r3, [r7, #12]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d001      	beq.n	80122a4 <tcp_parseopt+0x8c>
 80122a0:	89ba      	ldrh	r2, [r7, #12]
 80122a2:	e001      	b.n	80122a8 <tcp_parseopt+0x90>
 80122a4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80122ac:	e010      	b.n	80122d0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80122ae:	f7ff ff7d 	bl	80121ac <tcp_get_next_optbyte>
 80122b2:	4603      	mov	r3, r0
 80122b4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80122b6:	7afb      	ldrb	r3, [r7, #11]
 80122b8:	2b01      	cmp	r3, #1
 80122ba:	d914      	bls.n	80122e6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80122bc:	7afb      	ldrb	r3, [r7, #11]
 80122be:	b29a      	uxth	r2, r3
 80122c0:	4b0f      	ldr	r3, [pc, #60]	; (8012300 <tcp_parseopt+0xe8>)
 80122c2:	881b      	ldrh	r3, [r3, #0]
 80122c4:	4413      	add	r3, r2
 80122c6:	b29b      	uxth	r3, r3
 80122c8:	3b02      	subs	r3, #2
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	4b0c      	ldr	r3, [pc, #48]	; (8012300 <tcp_parseopt+0xe8>)
 80122ce:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80122d0:	4b0b      	ldr	r3, [pc, #44]	; (8012300 <tcp_parseopt+0xe8>)
 80122d2:	881a      	ldrh	r2, [r3, #0]
 80122d4:	4b09      	ldr	r3, [pc, #36]	; (80122fc <tcp_parseopt+0xe4>)
 80122d6:	881b      	ldrh	r3, [r3, #0]
 80122d8:	429a      	cmp	r2, r3
 80122da:	d3b3      	bcc.n	8012244 <tcp_parseopt+0x2c>
 80122dc:	e004      	b.n	80122e8 <tcp_parseopt+0xd0>
          return;
 80122de:	bf00      	nop
 80122e0:	e002      	b.n	80122e8 <tcp_parseopt+0xd0>
            return;
 80122e2:	bf00      	nop
 80122e4:	e000      	b.n	80122e8 <tcp_parseopt+0xd0>
            return;
 80122e6:	bf00      	nop
      }
    }
  }
}
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}
 80122ee:	bf00      	nop
 80122f0:	0801bb7c 	.word	0x0801bb7c
 80122f4:	0801bfe0 	.word	0x0801bfe0
 80122f8:	0801bbc8 	.word	0x0801bbc8
 80122fc:	2000cf50 	.word	0x2000cf50
 8012300:	2000cf58 	.word	0x2000cf58

08012304 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012304:	b480      	push	{r7}
 8012306:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012308:	4b05      	ldr	r3, [pc, #20]	; (8012320 <tcp_trigger_input_pcb_close+0x1c>)
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	f043 0310 	orr.w	r3, r3, #16
 8012310:	b2da      	uxtb	r2, r3
 8012312:	4b03      	ldr	r3, [pc, #12]	; (8012320 <tcp_trigger_input_pcb_close+0x1c>)
 8012314:	701a      	strb	r2, [r3, #0]
}
 8012316:	bf00      	nop
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr
 8012320:	2000cf69 	.word	0x2000cf69

08012324 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012324:	b580      	push	{r7, lr}
 8012326:	b084      	sub	sp, #16
 8012328:	af00      	add	r7, sp, #0
 801232a:	60f8      	str	r0, [r7, #12]
 801232c:	60b9      	str	r1, [r7, #8]
 801232e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d00a      	beq.n	801234c <tcp_route+0x28>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	7a1b      	ldrb	r3, [r3, #8]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d006      	beq.n	801234c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	7a1b      	ldrb	r3, [r3, #8]
 8012342:	4618      	mov	r0, r3
 8012344:	f7fb f86a 	bl	800d41c <netif_get_by_index>
 8012348:	4603      	mov	r3, r0
 801234a:	e003      	b.n	8012354 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801234c:	6878      	ldr	r0, [r7, #4]
 801234e:	f005 fc9f 	bl	8017c90 <ip4_route>
 8012352:	4603      	mov	r3, r0
  }
}
 8012354:	4618      	mov	r0, r3
 8012356:	3710      	adds	r7, #16
 8012358:	46bd      	mov	sp, r7
 801235a:	bd80      	pop	{r7, pc}

0801235c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801235c:	b590      	push	{r4, r7, lr}
 801235e:	b087      	sub	sp, #28
 8012360:	af00      	add	r7, sp, #0
 8012362:	60f8      	str	r0, [r7, #12]
 8012364:	60b9      	str	r1, [r7, #8]
 8012366:	603b      	str	r3, [r7, #0]
 8012368:	4613      	mov	r3, r2
 801236a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d105      	bne.n	801237e <tcp_create_segment+0x22>
 8012372:	4b44      	ldr	r3, [pc, #272]	; (8012484 <tcp_create_segment+0x128>)
 8012374:	22a3      	movs	r2, #163	; 0xa3
 8012376:	4944      	ldr	r1, [pc, #272]	; (8012488 <tcp_create_segment+0x12c>)
 8012378:	4844      	ldr	r0, [pc, #272]	; (801248c <tcp_create_segment+0x130>)
 801237a:	f007 f927 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d105      	bne.n	8012390 <tcp_create_segment+0x34>
 8012384:	4b3f      	ldr	r3, [pc, #252]	; (8012484 <tcp_create_segment+0x128>)
 8012386:	22a4      	movs	r2, #164	; 0xa4
 8012388:	4941      	ldr	r1, [pc, #260]	; (8012490 <tcp_create_segment+0x134>)
 801238a:	4840      	ldr	r0, [pc, #256]	; (801248c <tcp_create_segment+0x130>)
 801238c:	f007 f91e 	bl	80195cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012390:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	b2db      	uxtb	r3, r3
 8012398:	f003 0304 	and.w	r3, r3, #4
 801239c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801239e:	2003      	movs	r0, #3
 80123a0:	f7fa fca4 	bl	800ccec <memp_malloc>
 80123a4:	6138      	str	r0, [r7, #16]
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d104      	bne.n	80123b6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80123ac:	68b8      	ldr	r0, [r7, #8]
 80123ae:	f7fb fbc3 	bl	800db38 <pbuf_free>
    return NULL;
 80123b2:	2300      	movs	r3, #0
 80123b4:	e061      	b.n	801247a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80123b6:	693b      	ldr	r3, [r7, #16]
 80123b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80123bc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80123be:	693b      	ldr	r3, [r7, #16]
 80123c0:	2200      	movs	r2, #0
 80123c2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	68ba      	ldr	r2, [r7, #8]
 80123c8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	891a      	ldrh	r2, [r3, #8]
 80123ce:	7dfb      	ldrb	r3, [r7, #23]
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	429a      	cmp	r2, r3
 80123d4:	d205      	bcs.n	80123e2 <tcp_create_segment+0x86>
 80123d6:	4b2b      	ldr	r3, [pc, #172]	; (8012484 <tcp_create_segment+0x128>)
 80123d8:	22b0      	movs	r2, #176	; 0xb0
 80123da:	492e      	ldr	r1, [pc, #184]	; (8012494 <tcp_create_segment+0x138>)
 80123dc:	482b      	ldr	r0, [pc, #172]	; (801248c <tcp_create_segment+0x130>)
 80123de:	f007 f8f5 	bl	80195cc <iprintf>
  seg->len = p->tot_len - optlen;
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	891a      	ldrh	r2, [r3, #8]
 80123e6:	7dfb      	ldrb	r3, [r7, #23]
 80123e8:	b29b      	uxth	r3, r3
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80123f2:	2114      	movs	r1, #20
 80123f4:	68b8      	ldr	r0, [r7, #8]
 80123f6:	f7fb fb09 	bl	800da0c <pbuf_add_header>
 80123fa:	4603      	mov	r3, r0
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d004      	beq.n	801240a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012400:	6938      	ldr	r0, [r7, #16]
 8012402:	f7fc ffe2 	bl	800f3ca <tcp_seg_free>
    return NULL;
 8012406:	2300      	movs	r3, #0
 8012408:	e037      	b.n	801247a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801240a:	693b      	ldr	r3, [r7, #16]
 801240c:	685b      	ldr	r3, [r3, #4]
 801240e:	685a      	ldr	r2, [r3, #4]
 8012410:	693b      	ldr	r3, [r7, #16]
 8012412:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	8ada      	ldrh	r2, [r3, #22]
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	68dc      	ldr	r4, [r3, #12]
 801241c:	4610      	mov	r0, r2
 801241e:	f7f9 ff57 	bl	800c2d0 <lwip_htons>
 8012422:	4603      	mov	r3, r0
 8012424:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	8b1a      	ldrh	r2, [r3, #24]
 801242a:	693b      	ldr	r3, [r7, #16]
 801242c:	68dc      	ldr	r4, [r3, #12]
 801242e:	4610      	mov	r0, r2
 8012430:	f7f9 ff4e 	bl	800c2d0 <lwip_htons>
 8012434:	4603      	mov	r3, r0
 8012436:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8012438:	693b      	ldr	r3, [r7, #16]
 801243a:	68dc      	ldr	r4, [r3, #12]
 801243c:	6838      	ldr	r0, [r7, #0]
 801243e:	f7f9 ff5c 	bl	800c2fa <lwip_htonl>
 8012442:	4603      	mov	r3, r0
 8012444:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8012446:	7dfb      	ldrb	r3, [r7, #23]
 8012448:	089b      	lsrs	r3, r3, #2
 801244a:	b2db      	uxtb	r3, r3
 801244c:	b29b      	uxth	r3, r3
 801244e:	3305      	adds	r3, #5
 8012450:	b29b      	uxth	r3, r3
 8012452:	031b      	lsls	r3, r3, #12
 8012454:	b29a      	uxth	r2, r3
 8012456:	79fb      	ldrb	r3, [r7, #7]
 8012458:	b29b      	uxth	r3, r3
 801245a:	4313      	orrs	r3, r2
 801245c:	b29a      	uxth	r2, r3
 801245e:	693b      	ldr	r3, [r7, #16]
 8012460:	68dc      	ldr	r4, [r3, #12]
 8012462:	4610      	mov	r0, r2
 8012464:	f7f9 ff34 	bl	800c2d0 <lwip_htons>
 8012468:	4603      	mov	r3, r0
 801246a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	2200      	movs	r2, #0
 8012472:	749a      	strb	r2, [r3, #18]
 8012474:	2200      	movs	r2, #0
 8012476:	74da      	strb	r2, [r3, #19]
  return seg;
 8012478:	693b      	ldr	r3, [r7, #16]
}
 801247a:	4618      	mov	r0, r3
 801247c:	371c      	adds	r7, #28
 801247e:	46bd      	mov	sp, r7
 8012480:	bd90      	pop	{r4, r7, pc}
 8012482:	bf00      	nop
 8012484:	0801bffc 	.word	0x0801bffc
 8012488:	0801c030 	.word	0x0801c030
 801248c:	0801c050 	.word	0x0801c050
 8012490:	0801c078 	.word	0x0801c078
 8012494:	0801c09c 	.word	0x0801c09c

08012498 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b086      	sub	sp, #24
 801249c:	af00      	add	r7, sp, #0
 801249e:	607b      	str	r3, [r7, #4]
 80124a0:	4603      	mov	r3, r0
 80124a2:	73fb      	strb	r3, [r7, #15]
 80124a4:	460b      	mov	r3, r1
 80124a6:	81bb      	strh	r3, [r7, #12]
 80124a8:	4613      	mov	r3, r2
 80124aa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80124ac:	89bb      	ldrh	r3, [r7, #12]
 80124ae:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d105      	bne.n	80124c2 <tcp_pbuf_prealloc+0x2a>
 80124b6:	4b30      	ldr	r3, [pc, #192]	; (8012578 <tcp_pbuf_prealloc+0xe0>)
 80124b8:	22e8      	movs	r2, #232	; 0xe8
 80124ba:	4930      	ldr	r1, [pc, #192]	; (801257c <tcp_pbuf_prealloc+0xe4>)
 80124bc:	4830      	ldr	r0, [pc, #192]	; (8012580 <tcp_pbuf_prealloc+0xe8>)
 80124be:	f007 f885 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80124c2:	6a3b      	ldr	r3, [r7, #32]
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d105      	bne.n	80124d4 <tcp_pbuf_prealloc+0x3c>
 80124c8:	4b2b      	ldr	r3, [pc, #172]	; (8012578 <tcp_pbuf_prealloc+0xe0>)
 80124ca:	22e9      	movs	r2, #233	; 0xe9
 80124cc:	492d      	ldr	r1, [pc, #180]	; (8012584 <tcp_pbuf_prealloc+0xec>)
 80124ce:	482c      	ldr	r0, [pc, #176]	; (8012580 <tcp_pbuf_prealloc+0xe8>)
 80124d0:	f007 f87c 	bl	80195cc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80124d4:	89ba      	ldrh	r2, [r7, #12]
 80124d6:	897b      	ldrh	r3, [r7, #10]
 80124d8:	429a      	cmp	r2, r3
 80124da:	d221      	bcs.n	8012520 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80124dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80124e0:	f003 0302 	and.w	r3, r3, #2
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d111      	bne.n	801250c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80124e8:	6a3b      	ldr	r3, [r7, #32]
 80124ea:	8b5b      	ldrh	r3, [r3, #26]
 80124ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d115      	bne.n	8012520 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80124f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d007      	beq.n	801250c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80124fc:	6a3b      	ldr	r3, [r7, #32]
 80124fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8012500:	2b00      	cmp	r3, #0
 8012502:	d103      	bne.n	801250c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8012504:	6a3b      	ldr	r3, [r7, #32]
 8012506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8012508:	2b00      	cmp	r3, #0
 801250a:	d009      	beq.n	8012520 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801250c:	89bb      	ldrh	r3, [r7, #12]
 801250e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8012512:	f023 0203 	bic.w	r2, r3, #3
 8012516:	897b      	ldrh	r3, [r7, #10]
 8012518:	4293      	cmp	r3, r2
 801251a:	bf28      	it	cs
 801251c:	4613      	movcs	r3, r2
 801251e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8012520:	8af9      	ldrh	r1, [r7, #22]
 8012522:	7bfb      	ldrb	r3, [r7, #15]
 8012524:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012528:	4618      	mov	r0, r3
 801252a:	f7fb f821 	bl	800d570 <pbuf_alloc>
 801252e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012530:	693b      	ldr	r3, [r7, #16]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d101      	bne.n	801253a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8012536:	2300      	movs	r3, #0
 8012538:	e019      	b.n	801256e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d006      	beq.n	8012550 <tcp_pbuf_prealloc+0xb8>
 8012542:	4b0d      	ldr	r3, [pc, #52]	; (8012578 <tcp_pbuf_prealloc+0xe0>)
 8012544:	f240 120b 	movw	r2, #267	; 0x10b
 8012548:	490f      	ldr	r1, [pc, #60]	; (8012588 <tcp_pbuf_prealloc+0xf0>)
 801254a:	480d      	ldr	r0, [pc, #52]	; (8012580 <tcp_pbuf_prealloc+0xe8>)
 801254c:	f007 f83e 	bl	80195cc <iprintf>
  *oversize = p->len - length;
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	895a      	ldrh	r2, [r3, #10]
 8012554:	89bb      	ldrh	r3, [r7, #12]
 8012556:	1ad3      	subs	r3, r2, r3
 8012558:	b29a      	uxth	r2, r3
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	89ba      	ldrh	r2, [r7, #12]
 8012562:	811a      	strh	r2, [r3, #8]
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	891a      	ldrh	r2, [r3, #8]
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	815a      	strh	r2, [r3, #10]
  return p;
 801256c:	693b      	ldr	r3, [r7, #16]
}
 801256e:	4618      	mov	r0, r3
 8012570:	3718      	adds	r7, #24
 8012572:	46bd      	mov	sp, r7
 8012574:	bd80      	pop	{r7, pc}
 8012576:	bf00      	nop
 8012578:	0801bffc 	.word	0x0801bffc
 801257c:	0801c0b4 	.word	0x0801c0b4
 8012580:	0801c050 	.word	0x0801c050
 8012584:	0801c0d8 	.word	0x0801c0d8
 8012588:	0801c0f8 	.word	0x0801c0f8

0801258c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b082      	sub	sp, #8
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	460b      	mov	r3, r1
 8012596:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d106      	bne.n	80125ac <tcp_write_checks+0x20>
 801259e:	4b33      	ldr	r3, [pc, #204]	; (801266c <tcp_write_checks+0xe0>)
 80125a0:	f240 1233 	movw	r2, #307	; 0x133
 80125a4:	4932      	ldr	r1, [pc, #200]	; (8012670 <tcp_write_checks+0xe4>)
 80125a6:	4833      	ldr	r0, [pc, #204]	; (8012674 <tcp_write_checks+0xe8>)
 80125a8:	f007 f810 	bl	80195cc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	7d1b      	ldrb	r3, [r3, #20]
 80125b0:	2b04      	cmp	r3, #4
 80125b2:	d00e      	beq.n	80125d2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80125b8:	2b07      	cmp	r3, #7
 80125ba:	d00a      	beq.n	80125d2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80125c0:	2b02      	cmp	r3, #2
 80125c2:	d006      	beq.n	80125d2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80125c8:	2b03      	cmp	r3, #3
 80125ca:	d002      	beq.n	80125d2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80125cc:	f06f 030a 	mvn.w	r3, #10
 80125d0:	e048      	b.n	8012664 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80125d2:	887b      	ldrh	r3, [r7, #2]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d101      	bne.n	80125dc <tcp_write_checks+0x50>
    return ERR_OK;
 80125d8:	2300      	movs	r3, #0
 80125da:	e043      	b.n	8012664 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80125e2:	887a      	ldrh	r2, [r7, #2]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d909      	bls.n	80125fc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	8b5b      	ldrh	r3, [r3, #26]
 80125ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125f0:	b29a      	uxth	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80125f6:	f04f 33ff 	mov.w	r3, #4294967295
 80125fa:	e033      	b.n	8012664 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012602:	2b08      	cmp	r3, #8
 8012604:	d909      	bls.n	801261a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	8b5b      	ldrh	r3, [r3, #26]
 801260a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801260e:	b29a      	uxth	r2, r3
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012614:	f04f 33ff 	mov.w	r3, #4294967295
 8012618:	e024      	b.n	8012664 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012620:	2b00      	cmp	r3, #0
 8012622:	d00f      	beq.n	8012644 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012628:	2b00      	cmp	r3, #0
 801262a:	d11a      	bne.n	8012662 <tcp_write_checks+0xd6>
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012630:	2b00      	cmp	r3, #0
 8012632:	d116      	bne.n	8012662 <tcp_write_checks+0xd6>
 8012634:	4b0d      	ldr	r3, [pc, #52]	; (801266c <tcp_write_checks+0xe0>)
 8012636:	f240 1255 	movw	r2, #341	; 0x155
 801263a:	490f      	ldr	r1, [pc, #60]	; (8012678 <tcp_write_checks+0xec>)
 801263c:	480d      	ldr	r0, [pc, #52]	; (8012674 <tcp_write_checks+0xe8>)
 801263e:	f006 ffc5 	bl	80195cc <iprintf>
 8012642:	e00e      	b.n	8012662 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012648:	2b00      	cmp	r3, #0
 801264a:	d103      	bne.n	8012654 <tcp_write_checks+0xc8>
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012650:	2b00      	cmp	r3, #0
 8012652:	d006      	beq.n	8012662 <tcp_write_checks+0xd6>
 8012654:	4b05      	ldr	r3, [pc, #20]	; (801266c <tcp_write_checks+0xe0>)
 8012656:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801265a:	4908      	ldr	r1, [pc, #32]	; (801267c <tcp_write_checks+0xf0>)
 801265c:	4805      	ldr	r0, [pc, #20]	; (8012674 <tcp_write_checks+0xe8>)
 801265e:	f006 ffb5 	bl	80195cc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012662:	2300      	movs	r3, #0
}
 8012664:	4618      	mov	r0, r3
 8012666:	3708      	adds	r7, #8
 8012668:	46bd      	mov	sp, r7
 801266a:	bd80      	pop	{r7, pc}
 801266c:	0801bffc 	.word	0x0801bffc
 8012670:	0801c10c 	.word	0x0801c10c
 8012674:	0801c050 	.word	0x0801c050
 8012678:	0801c12c 	.word	0x0801c12c
 801267c:	0801c168 	.word	0x0801c168

08012680 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012680:	b590      	push	{r4, r7, lr}
 8012682:	b09b      	sub	sp, #108	; 0x6c
 8012684:	af04      	add	r7, sp, #16
 8012686:	60f8      	str	r0, [r7, #12]
 8012688:	60b9      	str	r1, [r7, #8]
 801268a:	4611      	mov	r1, r2
 801268c:	461a      	mov	r2, r3
 801268e:	460b      	mov	r3, r1
 8012690:	80fb      	strh	r3, [r7, #6]
 8012692:	4613      	mov	r3, r2
 8012694:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012696:	2300      	movs	r3, #0
 8012698:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801269a:	2300      	movs	r3, #0
 801269c:	653b      	str	r3, [r7, #80]	; 0x50
 801269e:	2300      	movs	r3, #0
 80126a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126a2:	2300      	movs	r3, #0
 80126a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80126a6:	2300      	movs	r3, #0
 80126a8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80126aa:	2300      	movs	r3, #0
 80126ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80126b0:	2300      	movs	r3, #0
 80126b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80126b6:	2300      	movs	r3, #0
 80126b8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80126ba:	2300      	movs	r3, #0
 80126bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80126be:	2300      	movs	r3, #0
 80126c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d109      	bne.n	80126dc <tcp_write+0x5c>
 80126c8:	4ba4      	ldr	r3, [pc, #656]	; (801295c <tcp_write+0x2dc>)
 80126ca:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80126ce:	49a4      	ldr	r1, [pc, #656]	; (8012960 <tcp_write+0x2e0>)
 80126d0:	48a4      	ldr	r0, [pc, #656]	; (8012964 <tcp_write+0x2e4>)
 80126d2:	f006 ff7b 	bl	80195cc <iprintf>
 80126d6:	f06f 030f 	mvn.w	r3, #15
 80126da:	e32a      	b.n	8012d32 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80126e2:	085b      	lsrs	r3, r3, #1
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126ea:	4293      	cmp	r3, r2
 80126ec:	bf28      	it	cs
 80126ee:	4613      	movcs	r3, r2
 80126f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80126f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d102      	bne.n	80126fe <tcp_write+0x7e>
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80126fc:	e000      	b.n	8012700 <tcp_write+0x80>
 80126fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012700:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8012702:	68bb      	ldr	r3, [r7, #8]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d109      	bne.n	801271c <tcp_write+0x9c>
 8012708:	4b94      	ldr	r3, [pc, #592]	; (801295c <tcp_write+0x2dc>)
 801270a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801270e:	4996      	ldr	r1, [pc, #600]	; (8012968 <tcp_write+0x2e8>)
 8012710:	4894      	ldr	r0, [pc, #592]	; (8012964 <tcp_write+0x2e4>)
 8012712:	f006 ff5b 	bl	80195cc <iprintf>
 8012716:	f06f 030f 	mvn.w	r3, #15
 801271a:	e30a      	b.n	8012d32 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801271c:	88fb      	ldrh	r3, [r7, #6]
 801271e:	4619      	mov	r1, r3
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f7ff ff33 	bl	801258c <tcp_write_checks>
 8012726:	4603      	mov	r3, r0
 8012728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801272c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012730:	2b00      	cmp	r3, #0
 8012732:	d002      	beq.n	801273a <tcp_write+0xba>
    return err;
 8012734:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012738:	e2fb      	b.n	8012d32 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012740:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012744:	2300      	movs	r3, #0
 8012746:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801274e:	2b00      	cmp	r3, #0
 8012750:	f000 80f6 	beq.w	8012940 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012758:	653b      	str	r3, [r7, #80]	; 0x50
 801275a:	e002      	b.n	8012762 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d1f8      	bne.n	801275c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801276a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801276c:	7a9b      	ldrb	r3, [r3, #10]
 801276e:	009b      	lsls	r3, r3, #2
 8012770:	b29b      	uxth	r3, r3
 8012772:	f003 0304 	and.w	r3, r3, #4
 8012776:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012778:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801277a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801277c:	891b      	ldrh	r3, [r3, #8]
 801277e:	4619      	mov	r1, r3
 8012780:	8c3b      	ldrh	r3, [r7, #32]
 8012782:	440b      	add	r3, r1
 8012784:	429a      	cmp	r2, r3
 8012786:	da06      	bge.n	8012796 <tcp_write+0x116>
 8012788:	4b74      	ldr	r3, [pc, #464]	; (801295c <tcp_write+0x2dc>)
 801278a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801278e:	4977      	ldr	r1, [pc, #476]	; (801296c <tcp_write+0x2ec>)
 8012790:	4874      	ldr	r0, [pc, #464]	; (8012964 <tcp_write+0x2e4>)
 8012792:	f006 ff1b 	bl	80195cc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012798:	891a      	ldrh	r2, [r3, #8]
 801279a:	8c3b      	ldrh	r3, [r7, #32]
 801279c:	4413      	add	r3, r2
 801279e:	b29b      	uxth	r3, r3
 80127a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80127a2:	1ad3      	subs	r3, r2, r3
 80127a4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80127ac:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80127ae:	8a7b      	ldrh	r3, [r7, #18]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d026      	beq.n	8012802 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80127b4:	8a7b      	ldrh	r3, [r7, #18]
 80127b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d206      	bcs.n	80127ca <tcp_write+0x14a>
 80127bc:	4b67      	ldr	r3, [pc, #412]	; (801295c <tcp_write+0x2dc>)
 80127be:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80127c2:	496b      	ldr	r1, [pc, #428]	; (8012970 <tcp_write+0x2f0>)
 80127c4:	4867      	ldr	r0, [pc, #412]	; (8012964 <tcp_write+0x2e4>)
 80127c6:	f006 ff01 	bl	80195cc <iprintf>
      seg = last_unsent;
 80127ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80127cc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80127ce:	8a7b      	ldrh	r3, [r7, #18]
 80127d0:	88fa      	ldrh	r2, [r7, #6]
 80127d2:	4293      	cmp	r3, r2
 80127d4:	bf28      	it	cs
 80127d6:	4613      	movcs	r3, r2
 80127d8:	b29b      	uxth	r3, r3
 80127da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80127dc:	4293      	cmp	r3, r2
 80127de:	bf28      	it	cs
 80127e0:	4613      	movcs	r3, r2
 80127e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80127e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80127e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127ea:	4413      	add	r3, r2
 80127ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80127f0:	8a7a      	ldrh	r2, [r7, #18]
 80127f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127f4:	1ad3      	subs	r3, r2, r3
 80127f6:	b29b      	uxth	r3, r3
 80127f8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80127fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80127fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012802:	8a7b      	ldrh	r3, [r7, #18]
 8012804:	2b00      	cmp	r3, #0
 8012806:	d00b      	beq.n	8012820 <tcp_write+0x1a0>
 8012808:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801280c:	88fb      	ldrh	r3, [r7, #6]
 801280e:	429a      	cmp	r2, r3
 8012810:	d006      	beq.n	8012820 <tcp_write+0x1a0>
 8012812:	4b52      	ldr	r3, [pc, #328]	; (801295c <tcp_write+0x2dc>)
 8012814:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012818:	4956      	ldr	r1, [pc, #344]	; (8012974 <tcp_write+0x2f4>)
 801281a:	4852      	ldr	r0, [pc, #328]	; (8012964 <tcp_write+0x2e4>)
 801281c:	f006 fed6 	bl	80195cc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012820:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012824:	88fb      	ldrh	r3, [r7, #6]
 8012826:	429a      	cmp	r2, r3
 8012828:	f080 8167 	bcs.w	8012afa <tcp_write+0x47a>
 801282c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801282e:	2b00      	cmp	r3, #0
 8012830:	f000 8163 	beq.w	8012afa <tcp_write+0x47a>
 8012834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012836:	891b      	ldrh	r3, [r3, #8]
 8012838:	2b00      	cmp	r3, #0
 801283a:	f000 815e 	beq.w	8012afa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801283e:	88fa      	ldrh	r2, [r7, #6]
 8012840:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012844:	1ad2      	subs	r2, r2, r3
 8012846:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012848:	4293      	cmp	r3, r2
 801284a:	bfa8      	it	ge
 801284c:	4613      	movge	r3, r2
 801284e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012850:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012852:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012854:	797b      	ldrb	r3, [r7, #5]
 8012856:	f003 0301 	and.w	r3, r3, #1
 801285a:	2b00      	cmp	r3, #0
 801285c:	d027      	beq.n	80128ae <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801285e:	f107 0012 	add.w	r0, r7, #18
 8012862:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012864:	8bf9      	ldrh	r1, [r7, #30]
 8012866:	2301      	movs	r3, #1
 8012868:	9302      	str	r3, [sp, #8]
 801286a:	797b      	ldrb	r3, [r7, #5]
 801286c:	9301      	str	r3, [sp, #4]
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	9300      	str	r3, [sp, #0]
 8012872:	4603      	mov	r3, r0
 8012874:	2000      	movs	r0, #0
 8012876:	f7ff fe0f 	bl	8012498 <tcp_pbuf_prealloc>
 801287a:	6578      	str	r0, [r7, #84]	; 0x54
 801287c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801287e:	2b00      	cmp	r3, #0
 8012880:	f000 8225 	beq.w	8012cce <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012884:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012886:	6858      	ldr	r0, [r3, #4]
 8012888:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801288c:	68ba      	ldr	r2, [r7, #8]
 801288e:	4413      	add	r3, r2
 8012890:	8bfa      	ldrh	r2, [r7, #30]
 8012892:	4619      	mov	r1, r3
 8012894:	f006 ff98 	bl	80197c8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012898:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801289a:	f7fb f9db 	bl	800dc54 <pbuf_clen>
 801289e:	4603      	mov	r3, r0
 80128a0:	461a      	mov	r2, r3
 80128a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80128a6:	4413      	add	r3, r2
 80128a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80128ac:	e041      	b.n	8012932 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80128ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	637b      	str	r3, [r7, #52]	; 0x34
 80128b4:	e002      	b.n	80128bc <tcp_write+0x23c>
 80128b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	637b      	str	r3, [r7, #52]	; 0x34
 80128bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d1f8      	bne.n	80128b6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80128c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128c6:	7b1b      	ldrb	r3, [r3, #12]
 80128c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d115      	bne.n	80128fc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80128d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80128d6:	8952      	ldrh	r2, [r2, #10]
 80128d8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80128da:	68ba      	ldr	r2, [r7, #8]
 80128dc:	429a      	cmp	r2, r3
 80128de:	d10d      	bne.n	80128fc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80128e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d006      	beq.n	80128f6 <tcp_write+0x276>
 80128e8:	4b1c      	ldr	r3, [pc, #112]	; (801295c <tcp_write+0x2dc>)
 80128ea:	f240 2231 	movw	r2, #561	; 0x231
 80128ee:	4922      	ldr	r1, [pc, #136]	; (8012978 <tcp_write+0x2f8>)
 80128f0:	481c      	ldr	r0, [pc, #112]	; (8012964 <tcp_write+0x2e4>)
 80128f2:	f006 fe6b 	bl	80195cc <iprintf>
          extendlen = seglen;
 80128f6:	8bfb      	ldrh	r3, [r7, #30]
 80128f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80128fa:	e01a      	b.n	8012932 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80128fc:	8bfb      	ldrh	r3, [r7, #30]
 80128fe:	2201      	movs	r2, #1
 8012900:	4619      	mov	r1, r3
 8012902:	2000      	movs	r0, #0
 8012904:	f7fa fe34 	bl	800d570 <pbuf_alloc>
 8012908:	6578      	str	r0, [r7, #84]	; 0x54
 801290a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801290c:	2b00      	cmp	r3, #0
 801290e:	f000 81e0 	beq.w	8012cd2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012912:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012916:	68ba      	ldr	r2, [r7, #8]
 8012918:	441a      	add	r2, r3
 801291a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801291c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801291e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012920:	f7fb f998 	bl	800dc54 <pbuf_clen>
 8012924:	4603      	mov	r3, r0
 8012926:	461a      	mov	r2, r3
 8012928:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801292c:	4413      	add	r3, r2
 801292e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012932:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012936:	8bfb      	ldrh	r3, [r7, #30]
 8012938:	4413      	add	r3, r2
 801293a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801293e:	e0dc      	b.n	8012afa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012946:	2b00      	cmp	r3, #0
 8012948:	f000 80d7 	beq.w	8012afa <tcp_write+0x47a>
 801294c:	4b03      	ldr	r3, [pc, #12]	; (801295c <tcp_write+0x2dc>)
 801294e:	f240 224a 	movw	r2, #586	; 0x24a
 8012952:	490a      	ldr	r1, [pc, #40]	; (801297c <tcp_write+0x2fc>)
 8012954:	4803      	ldr	r0, [pc, #12]	; (8012964 <tcp_write+0x2e4>)
 8012956:	f006 fe39 	bl	80195cc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801295a:	e0ce      	b.n	8012afa <tcp_write+0x47a>
 801295c:	0801bffc 	.word	0x0801bffc
 8012960:	0801c19c 	.word	0x0801c19c
 8012964:	0801c050 	.word	0x0801c050
 8012968:	0801c1b4 	.word	0x0801c1b4
 801296c:	0801c1e8 	.word	0x0801c1e8
 8012970:	0801c200 	.word	0x0801c200
 8012974:	0801c220 	.word	0x0801c220
 8012978:	0801c240 	.word	0x0801c240
 801297c:	0801c26c 	.word	0x0801c26c
    struct pbuf *p;
    u16_t left = len - pos;
 8012980:	88fa      	ldrh	r2, [r7, #6]
 8012982:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012986:	1ad3      	subs	r3, r2, r3
 8012988:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801298a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801298e:	b29b      	uxth	r3, r3
 8012990:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012992:	1ad3      	subs	r3, r2, r3
 8012994:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012996:	8b7a      	ldrh	r2, [r7, #26]
 8012998:	8bbb      	ldrh	r3, [r7, #28]
 801299a:	4293      	cmp	r3, r2
 801299c:	bf28      	it	cs
 801299e:	4613      	movcs	r3, r2
 80129a0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80129a2:	797b      	ldrb	r3, [r7, #5]
 80129a4:	f003 0301 	and.w	r3, r3, #1
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d036      	beq.n	8012a1a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80129ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	8b3b      	ldrh	r3, [r7, #24]
 80129b4:	4413      	add	r3, r2
 80129b6:	b299      	uxth	r1, r3
 80129b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	bf0c      	ite	eq
 80129be:	2301      	moveq	r3, #1
 80129c0:	2300      	movne	r3, #0
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	f107 0012 	add.w	r0, r7, #18
 80129c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80129ca:	9302      	str	r3, [sp, #8]
 80129cc:	797b      	ldrb	r3, [r7, #5]
 80129ce:	9301      	str	r3, [sp, #4]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	9300      	str	r3, [sp, #0]
 80129d4:	4603      	mov	r3, r0
 80129d6:	2036      	movs	r0, #54	; 0x36
 80129d8:	f7ff fd5e 	bl	8012498 <tcp_pbuf_prealloc>
 80129dc:	6338      	str	r0, [r7, #48]	; 0x30
 80129de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	f000 8178 	beq.w	8012cd6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80129e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e8:	895b      	ldrh	r3, [r3, #10]
 80129ea:	8b3a      	ldrh	r2, [r7, #24]
 80129ec:	429a      	cmp	r2, r3
 80129ee:	d906      	bls.n	80129fe <tcp_write+0x37e>
 80129f0:	4b8c      	ldr	r3, [pc, #560]	; (8012c24 <tcp_write+0x5a4>)
 80129f2:	f240 2266 	movw	r2, #614	; 0x266
 80129f6:	498c      	ldr	r1, [pc, #560]	; (8012c28 <tcp_write+0x5a8>)
 80129f8:	488c      	ldr	r0, [pc, #560]	; (8012c2c <tcp_write+0x5ac>)
 80129fa:	f006 fde7 	bl	80195cc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80129fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a00:	685a      	ldr	r2, [r3, #4]
 8012a02:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012a06:	18d0      	adds	r0, r2, r3
 8012a08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	4413      	add	r3, r2
 8012a10:	8b3a      	ldrh	r2, [r7, #24]
 8012a12:	4619      	mov	r1, r3
 8012a14:	f006 fed8 	bl	80197c8 <memcpy>
 8012a18:	e02f      	b.n	8012a7a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012a1a:	8a7b      	ldrh	r3, [r7, #18]
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d006      	beq.n	8012a2e <tcp_write+0x3ae>
 8012a20:	4b80      	ldr	r3, [pc, #512]	; (8012c24 <tcp_write+0x5a4>)
 8012a22:	f240 2271 	movw	r2, #625	; 0x271
 8012a26:	4982      	ldr	r1, [pc, #520]	; (8012c30 <tcp_write+0x5b0>)
 8012a28:	4880      	ldr	r0, [pc, #512]	; (8012c2c <tcp_write+0x5ac>)
 8012a2a:	f006 fdcf 	bl	80195cc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8012a2e:	8b3b      	ldrh	r3, [r7, #24]
 8012a30:	2201      	movs	r2, #1
 8012a32:	4619      	mov	r1, r3
 8012a34:	2036      	movs	r0, #54	; 0x36
 8012a36:	f7fa fd9b 	bl	800d570 <pbuf_alloc>
 8012a3a:	6178      	str	r0, [r7, #20]
 8012a3c:	697b      	ldr	r3, [r7, #20]
 8012a3e:	2b00      	cmp	r3, #0
 8012a40:	f000 814b 	beq.w	8012cda <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012a44:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012a48:	68ba      	ldr	r2, [r7, #8]
 8012a4a:	441a      	add	r2, r3
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012a50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012a54:	b29b      	uxth	r3, r3
 8012a56:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	2036      	movs	r0, #54	; 0x36
 8012a5e:	f7fa fd87 	bl	800d570 <pbuf_alloc>
 8012a62:	6338      	str	r0, [r7, #48]	; 0x30
 8012a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d103      	bne.n	8012a72 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012a6a:	6978      	ldr	r0, [r7, #20]
 8012a6c:	f7fb f864 	bl	800db38 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012a70:	e136      	b.n	8012ce0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012a72:	6979      	ldr	r1, [r7, #20]
 8012a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a76:	f7fb f92d 	bl	800dcd4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012a7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a7c:	f7fb f8ea 	bl	800dc54 <pbuf_clen>
 8012a80:	4603      	mov	r3, r0
 8012a82:	461a      	mov	r2, r3
 8012a84:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012a88:	4413      	add	r3, r2
 8012a8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012a8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012a92:	2b09      	cmp	r3, #9
 8012a94:	d903      	bls.n	8012a9e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012a96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a98:	f7fb f84e 	bl	800db38 <pbuf_free>
      goto memerr;
 8012a9c:	e120      	b.n	8012ce0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012aa2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012aa6:	441a      	add	r2, r3
 8012aa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012aac:	9300      	str	r3, [sp, #0]
 8012aae:	4613      	mov	r3, r2
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	f7ff fc51 	bl	801235c <tcp_create_segment>
 8012aba:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	f000 810d 	beq.w	8012cde <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d102      	bne.n	8012ad0 <tcp_write+0x450>
      queue = seg;
 8012aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012acc:	647b      	str	r3, [r7, #68]	; 0x44
 8012ace:	e00c      	b.n	8012aea <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d106      	bne.n	8012ae4 <tcp_write+0x464>
 8012ad6:	4b53      	ldr	r3, [pc, #332]	; (8012c24 <tcp_write+0x5a4>)
 8012ad8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012adc:	4955      	ldr	r1, [pc, #340]	; (8012c34 <tcp_write+0x5b4>)
 8012ade:	4853      	ldr	r0, [pc, #332]	; (8012c2c <tcp_write+0x5ac>)
 8012ae0:	f006 fd74 	bl	80195cc <iprintf>
      prev_seg->next = seg;
 8012ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012ae6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012ae8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012aea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012aec:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012aee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012af2:	8b3b      	ldrh	r3, [r7, #24]
 8012af4:	4413      	add	r3, r2
 8012af6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012afa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012afe:	88fb      	ldrh	r3, [r7, #6]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	f4ff af3d 	bcc.w	8012980 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012b06:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d02c      	beq.n	8012b66 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012b0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b12:	e01e      	b.n	8012b52 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b16:	891a      	ldrh	r2, [r3, #8]
 8012b18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b1a:	4413      	add	r3, r2
 8012b1c:	b29a      	uxth	r2, r3
 8012b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b20:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d110      	bne.n	8012b4c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b30:	8952      	ldrh	r2, [r2, #10]
 8012b32:	4413      	add	r3, r2
 8012b34:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012b36:	68b9      	ldr	r1, [r7, #8]
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f006 fe45 	bl	80197c8 <memcpy>
        p->len += oversize_used;
 8012b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b40:	895a      	ldrh	r2, [r3, #10]
 8012b42:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b44:	4413      	add	r3, r2
 8012b46:	b29a      	uxth	r2, r3
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1dd      	bne.n	8012b14 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b5a:	891a      	ldrh	r2, [r3, #8]
 8012b5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012b5e:	4413      	add	r3, r2
 8012b60:	b29a      	uxth	r2, r3
 8012b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b64:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012b66:	8a7a      	ldrh	r2, [r7, #18]
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d018      	beq.n	8012ba6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012b74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d106      	bne.n	8012b88 <tcp_write+0x508>
 8012b7a:	4b2a      	ldr	r3, [pc, #168]	; (8012c24 <tcp_write+0x5a4>)
 8012b7c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012b80:	492d      	ldr	r1, [pc, #180]	; (8012c38 <tcp_write+0x5b8>)
 8012b82:	482a      	ldr	r0, [pc, #168]	; (8012c2c <tcp_write+0x5ac>)
 8012b84:	f006 fd22 	bl	80195cc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b8a:	685b      	ldr	r3, [r3, #4]
 8012b8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012b8e:	4618      	mov	r0, r3
 8012b90:	f7fb f8a0 	bl	800dcd4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b96:	891a      	ldrh	r2, [r3, #8]
 8012b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b9a:	891b      	ldrh	r3, [r3, #8]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	b29a      	uxth	r2, r3
 8012ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba2:	811a      	strh	r2, [r3, #8]
 8012ba4:	e037      	b.n	8012c16 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012ba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d034      	beq.n	8012c16 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d003      	beq.n	8012bba <tcp_write+0x53a>
 8012bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d106      	bne.n	8012bc8 <tcp_write+0x548>
 8012bba:	4b1a      	ldr	r3, [pc, #104]	; (8012c24 <tcp_write+0x5a4>)
 8012bbc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8012bc0:	491e      	ldr	r1, [pc, #120]	; (8012c3c <tcp_write+0x5bc>)
 8012bc2:	481a      	ldr	r0, [pc, #104]	; (8012c2c <tcp_write+0x5ac>)
 8012bc4:	f006 fd02 	bl	80195cc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012bca:	685b      	ldr	r3, [r3, #4]
 8012bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8012bce:	e009      	b.n	8012be4 <tcp_write+0x564>
      p->tot_len += extendlen;
 8012bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bd2:	891a      	ldrh	r2, [r3, #8]
 8012bd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bd6:	4413      	add	r3, r2
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bdc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d1f1      	bne.n	8012bd0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	891a      	ldrh	r2, [r3, #8]
 8012bf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012bf2:	4413      	add	r3, r2
 8012bf4:	b29a      	uxth	r2, r3
 8012bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfc:	895a      	ldrh	r2, [r3, #10]
 8012bfe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c00:	4413      	add	r3, r2
 8012c02:	b29a      	uxth	r2, r3
 8012c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c06:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012c08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c0a:	891a      	ldrh	r2, [r3, #8]
 8012c0c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c0e:	4413      	add	r3, r2
 8012c10:	b29a      	uxth	r2, r3
 8012c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c14:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d111      	bne.n	8012c40 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c20:	66da      	str	r2, [r3, #108]	; 0x6c
 8012c22:	e010      	b.n	8012c46 <tcp_write+0x5c6>
 8012c24:	0801bffc 	.word	0x0801bffc
 8012c28:	0801c29c 	.word	0x0801c29c
 8012c2c:	0801c050 	.word	0x0801c050
 8012c30:	0801c2dc 	.word	0x0801c2dc
 8012c34:	0801c2ec 	.word	0x0801c2ec
 8012c38:	0801c300 	.word	0x0801c300
 8012c3c:	0801c338 	.word	0x0801c338
  } else {
    last_unsent->next = queue;
 8012c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c44:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012c4a:	88fb      	ldrh	r3, [r7, #6]
 8012c4c:	441a      	add	r2, r3
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012c58:	88fb      	ldrh	r3, [r7, #6]
 8012c5a:	1ad3      	subs	r3, r2, r3
 8012c5c:	b29a      	uxth	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012c6a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d00e      	beq.n	8012c96 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d10a      	bne.n	8012c96 <tcp_write+0x616>
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d106      	bne.n	8012c96 <tcp_write+0x616>
 8012c88:	4b2c      	ldr	r3, [pc, #176]	; (8012d3c <tcp_write+0x6bc>)
 8012c8a:	f240 3212 	movw	r2, #786	; 0x312
 8012c8e:	492c      	ldr	r1, [pc, #176]	; (8012d40 <tcp_write+0x6c0>)
 8012c90:	482c      	ldr	r0, [pc, #176]	; (8012d44 <tcp_write+0x6c4>)
 8012c92:	f006 fc9b 	bl	80195cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012c96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d016      	beq.n	8012cca <tcp_write+0x64a>
 8012c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c9e:	68db      	ldr	r3, [r3, #12]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d012      	beq.n	8012cca <tcp_write+0x64a>
 8012ca4:	797b      	ldrb	r3, [r7, #5]
 8012ca6:	f003 0302 	and.w	r3, r3, #2
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d10d      	bne.n	8012cca <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	899b      	ldrh	r3, [r3, #12]
 8012cb4:	b29c      	uxth	r4, r3
 8012cb6:	2008      	movs	r0, #8
 8012cb8:	f7f9 fb0a 	bl	800c2d0 <lwip_htons>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	461a      	mov	r2, r3
 8012cc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	4322      	orrs	r2, r4
 8012cc6:	b292      	uxth	r2, r2
 8012cc8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012cca:	2300      	movs	r3, #0
 8012ccc:	e031      	b.n	8012d32 <tcp_write+0x6b2>
          goto memerr;
 8012cce:	bf00      	nop
 8012cd0:	e006      	b.n	8012ce0 <tcp_write+0x660>
            goto memerr;
 8012cd2:	bf00      	nop
 8012cd4:	e004      	b.n	8012ce0 <tcp_write+0x660>
        goto memerr;
 8012cd6:	bf00      	nop
 8012cd8:	e002      	b.n	8012ce0 <tcp_write+0x660>
        goto memerr;
 8012cda:	bf00      	nop
 8012cdc:	e000      	b.n	8012ce0 <tcp_write+0x660>
      goto memerr;
 8012cde:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	8b5b      	ldrh	r3, [r3, #26]
 8012ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ce8:	b29a      	uxth	r2, r3
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012cee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d002      	beq.n	8012cfa <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012cf4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012cf6:	f7fa ff1f 	bl	800db38 <pbuf_free>
  }
  if (queue != NULL) {
 8012cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d002      	beq.n	8012d06 <tcp_write+0x686>
    tcp_segs_free(queue);
 8012d00:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8012d02:	f7fc fb4d 	bl	800f3a0 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d00e      	beq.n	8012d2e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d10a      	bne.n	8012d2e <tcp_write+0x6ae>
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d106      	bne.n	8012d2e <tcp_write+0x6ae>
 8012d20:	4b06      	ldr	r3, [pc, #24]	; (8012d3c <tcp_write+0x6bc>)
 8012d22:	f240 3227 	movw	r2, #807	; 0x327
 8012d26:	4906      	ldr	r1, [pc, #24]	; (8012d40 <tcp_write+0x6c0>)
 8012d28:	4806      	ldr	r0, [pc, #24]	; (8012d44 <tcp_write+0x6c4>)
 8012d2a:	f006 fc4f 	bl	80195cc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8012d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012d32:	4618      	mov	r0, r3
 8012d34:	375c      	adds	r7, #92	; 0x5c
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd90      	pop	{r4, r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	0801bffc 	.word	0x0801bffc
 8012d40:	0801c370 	.word	0x0801c370
 8012d44:	0801c050 	.word	0x0801c050

08012d48 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012d48:	b590      	push	{r4, r7, lr}
 8012d4a:	b08b      	sub	sp, #44	; 0x2c
 8012d4c:	af02      	add	r7, sp, #8
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	460b      	mov	r3, r1
 8012d52:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012d54:	2300      	movs	r3, #0
 8012d56:	61fb      	str	r3, [r7, #28]
 8012d58:	2300      	movs	r3, #0
 8012d5a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d106      	bne.n	8012d74 <tcp_split_unsent_seg+0x2c>
 8012d66:	4b95      	ldr	r3, [pc, #596]	; (8012fbc <tcp_split_unsent_seg+0x274>)
 8012d68:	f240 324b 	movw	r2, #843	; 0x34b
 8012d6c:	4994      	ldr	r1, [pc, #592]	; (8012fc0 <tcp_split_unsent_seg+0x278>)
 8012d6e:	4895      	ldr	r0, [pc, #596]	; (8012fc4 <tcp_split_unsent_seg+0x27c>)
 8012d70:	f006 fc2c 	bl	80195cc <iprintf>

  useg = pcb->unsent;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012d78:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012d7a:	697b      	ldr	r3, [r7, #20]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d102      	bne.n	8012d86 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012d80:	f04f 33ff 	mov.w	r3, #4294967295
 8012d84:	e116      	b.n	8012fb4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012d86:	887b      	ldrh	r3, [r7, #2]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d109      	bne.n	8012da0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012d8c:	4b8b      	ldr	r3, [pc, #556]	; (8012fbc <tcp_split_unsent_seg+0x274>)
 8012d8e:	f240 3253 	movw	r2, #851	; 0x353
 8012d92:	498d      	ldr	r1, [pc, #564]	; (8012fc8 <tcp_split_unsent_seg+0x280>)
 8012d94:	488b      	ldr	r0, [pc, #556]	; (8012fc4 <tcp_split_unsent_seg+0x27c>)
 8012d96:	f006 fc19 	bl	80195cc <iprintf>
    return ERR_VAL;
 8012d9a:	f06f 0305 	mvn.w	r3, #5
 8012d9e:	e109      	b.n	8012fb4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012da0:	697b      	ldr	r3, [r7, #20]
 8012da2:	891b      	ldrh	r3, [r3, #8]
 8012da4:	887a      	ldrh	r2, [r7, #2]
 8012da6:	429a      	cmp	r2, r3
 8012da8:	d301      	bcc.n	8012dae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8012daa:	2300      	movs	r3, #0
 8012dac:	e102      	b.n	8012fb4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012db2:	887a      	ldrh	r2, [r7, #2]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d906      	bls.n	8012dc6 <tcp_split_unsent_seg+0x7e>
 8012db8:	4b80      	ldr	r3, [pc, #512]	; (8012fbc <tcp_split_unsent_seg+0x274>)
 8012dba:	f240 325b 	movw	r2, #859	; 0x35b
 8012dbe:	4983      	ldr	r1, [pc, #524]	; (8012fcc <tcp_split_unsent_seg+0x284>)
 8012dc0:	4880      	ldr	r0, [pc, #512]	; (8012fc4 <tcp_split_unsent_seg+0x27c>)
 8012dc2:	f006 fc03 	bl	80195cc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012dc6:	697b      	ldr	r3, [r7, #20]
 8012dc8:	891b      	ldrh	r3, [r3, #8]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d106      	bne.n	8012ddc <tcp_split_unsent_seg+0x94>
 8012dce:	4b7b      	ldr	r3, [pc, #492]	; (8012fbc <tcp_split_unsent_seg+0x274>)
 8012dd0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8012dd4:	497e      	ldr	r1, [pc, #504]	; (8012fd0 <tcp_split_unsent_seg+0x288>)
 8012dd6:	487b      	ldr	r0, [pc, #492]	; (8012fc4 <tcp_split_unsent_seg+0x27c>)
 8012dd8:	f006 fbf8 	bl	80195cc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	7a9b      	ldrb	r3, [r3, #10]
 8012de0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012de2:	7bfb      	ldrb	r3, [r7, #15]
 8012de4:	009b      	lsls	r3, r3, #2
 8012de6:	b2db      	uxtb	r3, r3
 8012de8:	f003 0304 	and.w	r3, r3, #4
 8012dec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012dee:	697b      	ldr	r3, [r7, #20]
 8012df0:	891a      	ldrh	r2, [r3, #8]
 8012df2:	887b      	ldrh	r3, [r7, #2]
 8012df4:	1ad3      	subs	r3, r2, r3
 8012df6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012df8:	7bbb      	ldrb	r3, [r7, #14]
 8012dfa:	b29a      	uxth	r2, r3
 8012dfc:	89bb      	ldrh	r3, [r7, #12]
 8012dfe:	4413      	add	r3, r2
 8012e00:	b29b      	uxth	r3, r3
 8012e02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012e06:	4619      	mov	r1, r3
 8012e08:	2036      	movs	r0, #54	; 0x36
 8012e0a:	f7fa fbb1 	bl	800d570 <pbuf_alloc>
 8012e0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	f000 80b7 	beq.w	8012f86 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012e18:	697b      	ldr	r3, [r7, #20]
 8012e1a:	685b      	ldr	r3, [r3, #4]
 8012e1c:	891a      	ldrh	r2, [r3, #8]
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	891b      	ldrh	r3, [r3, #8]
 8012e22:	1ad3      	subs	r3, r2, r3
 8012e24:	b29a      	uxth	r2, r3
 8012e26:	887b      	ldrh	r3, [r7, #2]
 8012e28:	4413      	add	r3, r2
 8012e2a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012e2c:	697b      	ldr	r3, [r7, #20]
 8012e2e:	6858      	ldr	r0, [r3, #4]
 8012e30:	693b      	ldr	r3, [r7, #16]
 8012e32:	685a      	ldr	r2, [r3, #4]
 8012e34:	7bbb      	ldrb	r3, [r7, #14]
 8012e36:	18d1      	adds	r1, r2, r3
 8012e38:	897b      	ldrh	r3, [r7, #10]
 8012e3a:	89ba      	ldrh	r2, [r7, #12]
 8012e3c:	f7fb f882 	bl	800df44 <pbuf_copy_partial>
 8012e40:	4603      	mov	r3, r0
 8012e42:	461a      	mov	r2, r3
 8012e44:	89bb      	ldrh	r3, [r7, #12]
 8012e46:	4293      	cmp	r3, r2
 8012e48:	f040 809f 	bne.w	8012f8a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012e4c:	697b      	ldr	r3, [r7, #20]
 8012e4e:	68db      	ldr	r3, [r3, #12]
 8012e50:	899b      	ldrh	r3, [r3, #12]
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	4618      	mov	r0, r3
 8012e56:	f7f9 fa3b 	bl	800c2d0 <lwip_htons>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e62:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012e64:	2300      	movs	r3, #0
 8012e66:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012e68:	7efb      	ldrb	r3, [r7, #27]
 8012e6a:	f003 0308 	and.w	r3, r3, #8
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d007      	beq.n	8012e82 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012e72:	7efb      	ldrb	r3, [r7, #27]
 8012e74:	f023 0308 	bic.w	r3, r3, #8
 8012e78:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012e7a:	7ebb      	ldrb	r3, [r7, #26]
 8012e7c:	f043 0308 	orr.w	r3, r3, #8
 8012e80:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012e82:	7efb      	ldrb	r3, [r7, #27]
 8012e84:	f003 0301 	and.w	r3, r3, #1
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d007      	beq.n	8012e9c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012e8c:	7efb      	ldrb	r3, [r7, #27]
 8012e8e:	f023 0301 	bic.w	r3, r3, #1
 8012e92:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012e94:	7ebb      	ldrb	r3, [r7, #26]
 8012e96:	f043 0301 	orr.w	r3, r3, #1
 8012e9a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	68db      	ldr	r3, [r3, #12]
 8012ea0:	685b      	ldr	r3, [r3, #4]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f7f9 fa29 	bl	800c2fa <lwip_htonl>
 8012ea8:	4602      	mov	r2, r0
 8012eaa:	887b      	ldrh	r3, [r7, #2]
 8012eac:	18d1      	adds	r1, r2, r3
 8012eae:	7eba      	ldrb	r2, [r7, #26]
 8012eb0:	7bfb      	ldrb	r3, [r7, #15]
 8012eb2:	9300      	str	r3, [sp, #0]
 8012eb4:	460b      	mov	r3, r1
 8012eb6:	6939      	ldr	r1, [r7, #16]
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7ff fa4f 	bl	801235c <tcp_create_segment>
 8012ebe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012ec0:	69fb      	ldr	r3, [r7, #28]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d063      	beq.n	8012f8e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	685b      	ldr	r3, [r3, #4]
 8012eca:	4618      	mov	r0, r3
 8012ecc:	f7fa fec2 	bl	800dc54 <pbuf_clen>
 8012ed0:	4603      	mov	r3, r0
 8012ed2:	461a      	mov	r2, r3
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012eda:	1a9b      	subs	r3, r3, r2
 8012edc:	b29a      	uxth	r2, r3
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	6858      	ldr	r0, [r3, #4]
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	685b      	ldr	r3, [r3, #4]
 8012eec:	891a      	ldrh	r2, [r3, #8]
 8012eee:	89bb      	ldrh	r3, [r7, #12]
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	b29b      	uxth	r3, r3
 8012ef4:	4619      	mov	r1, r3
 8012ef6:	f7fa fc99 	bl	800d82c <pbuf_realloc>
  useg->len -= remainder;
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	891a      	ldrh	r2, [r3, #8]
 8012efe:	89bb      	ldrh	r3, [r7, #12]
 8012f00:	1ad3      	subs	r3, r2, r3
 8012f02:	b29a      	uxth	r2, r3
 8012f04:	697b      	ldr	r3, [r7, #20]
 8012f06:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	68db      	ldr	r3, [r3, #12]
 8012f0c:	899b      	ldrh	r3, [r3, #12]
 8012f0e:	b29c      	uxth	r4, r3
 8012f10:	7efb      	ldrb	r3, [r7, #27]
 8012f12:	b29b      	uxth	r3, r3
 8012f14:	4618      	mov	r0, r3
 8012f16:	f7f9 f9db 	bl	800c2d0 <lwip_htons>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	461a      	mov	r2, r3
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	68db      	ldr	r3, [r3, #12]
 8012f22:	4322      	orrs	r2, r4
 8012f24:	b292      	uxth	r2, r2
 8012f26:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012f28:	697b      	ldr	r3, [r7, #20]
 8012f2a:	685b      	ldr	r3, [r3, #4]
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	f7fa fe91 	bl	800dc54 <pbuf_clen>
 8012f32:	4603      	mov	r3, r0
 8012f34:	461a      	mov	r2, r3
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f3c:	4413      	add	r3, r2
 8012f3e:	b29a      	uxth	r2, r3
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012f46:	69fb      	ldr	r3, [r7, #28]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7fa fe82 	bl	800dc54 <pbuf_clen>
 8012f50:	4603      	mov	r3, r0
 8012f52:	461a      	mov	r2, r3
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012f5a:	4413      	add	r3, r2
 8012f5c:	b29a      	uxth	r2, r3
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	681a      	ldr	r2, [r3, #0]
 8012f68:	69fb      	ldr	r3, [r7, #28]
 8012f6a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012f6c:	697b      	ldr	r3, [r7, #20]
 8012f6e:	69fa      	ldr	r2, [r7, #28]
 8012f70:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d103      	bne.n	8012f82 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	2200      	movs	r2, #0
 8012f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012f82:	2300      	movs	r3, #0
 8012f84:	e016      	b.n	8012fb4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012f86:	bf00      	nop
 8012f88:	e002      	b.n	8012f90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012f8a:	bf00      	nop
 8012f8c:	e000      	b.n	8012f90 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012f8e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012f90:	69fb      	ldr	r3, [r7, #28]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d006      	beq.n	8012fa4 <tcp_split_unsent_seg+0x25c>
 8012f96:	4b09      	ldr	r3, [pc, #36]	; (8012fbc <tcp_split_unsent_seg+0x274>)
 8012f98:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8012f9c:	490d      	ldr	r1, [pc, #52]	; (8012fd4 <tcp_split_unsent_seg+0x28c>)
 8012f9e:	4809      	ldr	r0, [pc, #36]	; (8012fc4 <tcp_split_unsent_seg+0x27c>)
 8012fa0:	f006 fb14 	bl	80195cc <iprintf>
  if (p != NULL) {
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d002      	beq.n	8012fb0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8012faa:	6938      	ldr	r0, [r7, #16]
 8012fac:	f7fa fdc4 	bl	800db38 <pbuf_free>
  }

  return ERR_MEM;
 8012fb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	3724      	adds	r7, #36	; 0x24
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd90      	pop	{r4, r7, pc}
 8012fbc:	0801bffc 	.word	0x0801bffc
 8012fc0:	0801c390 	.word	0x0801c390
 8012fc4:	0801c050 	.word	0x0801c050
 8012fc8:	0801c3b4 	.word	0x0801c3b4
 8012fcc:	0801c3d8 	.word	0x0801c3d8
 8012fd0:	0801c3e8 	.word	0x0801c3e8
 8012fd4:	0801c3f8 	.word	0x0801c3f8

08012fd8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8012fd8:	b590      	push	{r4, r7, lr}
 8012fda:	b085      	sub	sp, #20
 8012fdc:	af00      	add	r7, sp, #0
 8012fde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d106      	bne.n	8012ff4 <tcp_send_fin+0x1c>
 8012fe6:	4b21      	ldr	r3, [pc, #132]	; (801306c <tcp_send_fin+0x94>)
 8012fe8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8012fec:	4920      	ldr	r1, [pc, #128]	; (8013070 <tcp_send_fin+0x98>)
 8012fee:	4821      	ldr	r0, [pc, #132]	; (8013074 <tcp_send_fin+0x9c>)
 8012ff0:	f006 faec 	bl	80195cc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d02e      	beq.n	801305a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013000:	60fb      	str	r3, [r7, #12]
 8013002:	e002      	b.n	801300a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801300a:	68fb      	ldr	r3, [r7, #12]
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	2b00      	cmp	r3, #0
 8013010:	d1f8      	bne.n	8013004 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	899b      	ldrh	r3, [r3, #12]
 8013018:	b29b      	uxth	r3, r3
 801301a:	4618      	mov	r0, r3
 801301c:	f7f9 f958 	bl	800c2d0 <lwip_htons>
 8013020:	4603      	mov	r3, r0
 8013022:	b2db      	uxtb	r3, r3
 8013024:	f003 0307 	and.w	r3, r3, #7
 8013028:	2b00      	cmp	r3, #0
 801302a:	d116      	bne.n	801305a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	68db      	ldr	r3, [r3, #12]
 8013030:	899b      	ldrh	r3, [r3, #12]
 8013032:	b29c      	uxth	r4, r3
 8013034:	2001      	movs	r0, #1
 8013036:	f7f9 f94b 	bl	800c2d0 <lwip_htons>
 801303a:	4603      	mov	r3, r0
 801303c:	461a      	mov	r2, r3
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	68db      	ldr	r3, [r3, #12]
 8013042:	4322      	orrs	r2, r4
 8013044:	b292      	uxth	r2, r2
 8013046:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	8b5b      	ldrh	r3, [r3, #26]
 801304c:	f043 0320 	orr.w	r3, r3, #32
 8013050:	b29a      	uxth	r2, r3
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013056:	2300      	movs	r3, #0
 8013058:	e004      	b.n	8013064 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801305a:	2101      	movs	r1, #1
 801305c:	6878      	ldr	r0, [r7, #4]
 801305e:	f000 f80b 	bl	8013078 <tcp_enqueue_flags>
 8013062:	4603      	mov	r3, r0
}
 8013064:	4618      	mov	r0, r3
 8013066:	3714      	adds	r7, #20
 8013068:	46bd      	mov	sp, r7
 801306a:	bd90      	pop	{r4, r7, pc}
 801306c:	0801bffc 	.word	0x0801bffc
 8013070:	0801c404 	.word	0x0801c404
 8013074:	0801c050 	.word	0x0801c050

08013078 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013078:	b580      	push	{r7, lr}
 801307a:	b08a      	sub	sp, #40	; 0x28
 801307c:	af02      	add	r7, sp, #8
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013084:	2300      	movs	r3, #0
 8013086:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013088:	2300      	movs	r3, #0
 801308a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801308c:	78fb      	ldrb	r3, [r7, #3]
 801308e:	f003 0303 	and.w	r3, r3, #3
 8013092:	2b00      	cmp	r3, #0
 8013094:	d106      	bne.n	80130a4 <tcp_enqueue_flags+0x2c>
 8013096:	4b67      	ldr	r3, [pc, #412]	; (8013234 <tcp_enqueue_flags+0x1bc>)
 8013098:	f240 4211 	movw	r2, #1041	; 0x411
 801309c:	4966      	ldr	r1, [pc, #408]	; (8013238 <tcp_enqueue_flags+0x1c0>)
 801309e:	4867      	ldr	r0, [pc, #412]	; (801323c <tcp_enqueue_flags+0x1c4>)
 80130a0:	f006 fa94 	bl	80195cc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d106      	bne.n	80130b8 <tcp_enqueue_flags+0x40>
 80130aa:	4b62      	ldr	r3, [pc, #392]	; (8013234 <tcp_enqueue_flags+0x1bc>)
 80130ac:	f240 4213 	movw	r2, #1043	; 0x413
 80130b0:	4963      	ldr	r1, [pc, #396]	; (8013240 <tcp_enqueue_flags+0x1c8>)
 80130b2:	4862      	ldr	r0, [pc, #392]	; (801323c <tcp_enqueue_flags+0x1c4>)
 80130b4:	f006 fa8a 	bl	80195cc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80130b8:	78fb      	ldrb	r3, [r7, #3]
 80130ba:	f003 0302 	and.w	r3, r3, #2
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d001      	beq.n	80130c6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80130c2:	2301      	movs	r3, #1
 80130c4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80130c6:	7ffb      	ldrb	r3, [r7, #31]
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	b2db      	uxtb	r3, r3
 80130cc:	f003 0304 	and.w	r3, r3, #4
 80130d0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80130d2:	7dfb      	ldrb	r3, [r7, #23]
 80130d4:	b29b      	uxth	r3, r3
 80130d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80130da:	4619      	mov	r1, r3
 80130dc:	2036      	movs	r0, #54	; 0x36
 80130de:	f7fa fa47 	bl	800d570 <pbuf_alloc>
 80130e2:	6138      	str	r0, [r7, #16]
 80130e4:	693b      	ldr	r3, [r7, #16]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d109      	bne.n	80130fe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	8b5b      	ldrh	r3, [r3, #26]
 80130ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130f2:	b29a      	uxth	r2, r3
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80130f8:	f04f 33ff 	mov.w	r3, #4294967295
 80130fc:	e095      	b.n	801322a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	895a      	ldrh	r2, [r3, #10]
 8013102:	7dfb      	ldrb	r3, [r7, #23]
 8013104:	b29b      	uxth	r3, r3
 8013106:	429a      	cmp	r2, r3
 8013108:	d206      	bcs.n	8013118 <tcp_enqueue_flags+0xa0>
 801310a:	4b4a      	ldr	r3, [pc, #296]	; (8013234 <tcp_enqueue_flags+0x1bc>)
 801310c:	f240 4239 	movw	r2, #1081	; 0x439
 8013110:	494c      	ldr	r1, [pc, #304]	; (8013244 <tcp_enqueue_flags+0x1cc>)
 8013112:	484a      	ldr	r0, [pc, #296]	; (801323c <tcp_enqueue_flags+0x1c4>)
 8013114:	f006 fa5a 	bl	80195cc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801311c:	78fa      	ldrb	r2, [r7, #3]
 801311e:	7ffb      	ldrb	r3, [r7, #31]
 8013120:	9300      	str	r3, [sp, #0]
 8013122:	460b      	mov	r3, r1
 8013124:	6939      	ldr	r1, [r7, #16]
 8013126:	6878      	ldr	r0, [r7, #4]
 8013128:	f7ff f918 	bl	801235c <tcp_create_segment>
 801312c:	60f8      	str	r0, [r7, #12]
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d109      	bne.n	8013148 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	8b5b      	ldrh	r3, [r3, #26]
 8013138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801313c:	b29a      	uxth	r2, r3
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013142:	f04f 33ff 	mov.w	r3, #4294967295
 8013146:	e070      	b.n	801322a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	f003 0303 	and.w	r3, r3, #3
 8013150:	2b00      	cmp	r3, #0
 8013152:	d006      	beq.n	8013162 <tcp_enqueue_flags+0xea>
 8013154:	4b37      	ldr	r3, [pc, #220]	; (8013234 <tcp_enqueue_flags+0x1bc>)
 8013156:	f240 4242 	movw	r2, #1090	; 0x442
 801315a:	493b      	ldr	r1, [pc, #236]	; (8013248 <tcp_enqueue_flags+0x1d0>)
 801315c:	4837      	ldr	r0, [pc, #220]	; (801323c <tcp_enqueue_flags+0x1c4>)
 801315e:	f006 fa35 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	891b      	ldrh	r3, [r3, #8]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d006      	beq.n	8013178 <tcp_enqueue_flags+0x100>
 801316a:	4b32      	ldr	r3, [pc, #200]	; (8013234 <tcp_enqueue_flags+0x1bc>)
 801316c:	f240 4243 	movw	r2, #1091	; 0x443
 8013170:	4936      	ldr	r1, [pc, #216]	; (801324c <tcp_enqueue_flags+0x1d4>)
 8013172:	4832      	ldr	r0, [pc, #200]	; (801323c <tcp_enqueue_flags+0x1c4>)
 8013174:	f006 fa2a 	bl	80195cc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801317c:	2b00      	cmp	r3, #0
 801317e:	d103      	bne.n	8013188 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	66da      	str	r2, [r3, #108]	; 0x6c
 8013186:	e00d      	b.n	80131a4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801318c:	61bb      	str	r3, [r7, #24]
 801318e:	e002      	b.n	8013196 <tcp_enqueue_flags+0x11e>
 8013190:	69bb      	ldr	r3, [r7, #24]
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	61bb      	str	r3, [r7, #24]
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d1f8      	bne.n	8013190 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	68fa      	ldr	r2, [r7, #12]
 80131a2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80131ac:	78fb      	ldrb	r3, [r7, #3]
 80131ae:	f003 0302 	and.w	r3, r3, #2
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d104      	bne.n	80131c0 <tcp_enqueue_flags+0x148>
 80131b6:	78fb      	ldrb	r3, [r7, #3]
 80131b8:	f003 0301 	and.w	r3, r3, #1
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d004      	beq.n	80131ca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80131c4:	1c5a      	adds	r2, r3, #1
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80131ca:	78fb      	ldrb	r3, [r7, #3]
 80131cc:	f003 0301 	and.w	r3, r3, #1
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d006      	beq.n	80131e2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	8b5b      	ldrh	r3, [r3, #26]
 80131d8:	f043 0320 	orr.w	r3, r3, #32
 80131dc:	b29a      	uxth	r2, r3
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	4618      	mov	r0, r3
 80131e8:	f7fa fd34 	bl	800dc54 <pbuf_clen>
 80131ec:	4603      	mov	r3, r0
 80131ee:	461a      	mov	r2, r3
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80131f6:	4413      	add	r3, r2
 80131f8:	b29a      	uxth	r2, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013206:	2b00      	cmp	r3, #0
 8013208:	d00e      	beq.n	8013228 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801320e:	2b00      	cmp	r3, #0
 8013210:	d10a      	bne.n	8013228 <tcp_enqueue_flags+0x1b0>
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d106      	bne.n	8013228 <tcp_enqueue_flags+0x1b0>
 801321a:	4b06      	ldr	r3, [pc, #24]	; (8013234 <tcp_enqueue_flags+0x1bc>)
 801321c:	f240 4265 	movw	r2, #1125	; 0x465
 8013220:	490b      	ldr	r1, [pc, #44]	; (8013250 <tcp_enqueue_flags+0x1d8>)
 8013222:	4806      	ldr	r0, [pc, #24]	; (801323c <tcp_enqueue_flags+0x1c4>)
 8013224:	f006 f9d2 	bl	80195cc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013228:	2300      	movs	r3, #0
}
 801322a:	4618      	mov	r0, r3
 801322c:	3720      	adds	r7, #32
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}
 8013232:	bf00      	nop
 8013234:	0801bffc 	.word	0x0801bffc
 8013238:	0801c420 	.word	0x0801c420
 801323c:	0801c050 	.word	0x0801c050
 8013240:	0801c478 	.word	0x0801c478
 8013244:	0801c498 	.word	0x0801c498
 8013248:	0801c4d4 	.word	0x0801c4d4
 801324c:	0801c4ec 	.word	0x0801c4ec
 8013250:	0801c518 	.word	0x0801c518

08013254 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013254:	b5b0      	push	{r4, r5, r7, lr}
 8013256:	b08a      	sub	sp, #40	; 0x28
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d106      	bne.n	8013270 <tcp_output+0x1c>
 8013262:	4b8a      	ldr	r3, [pc, #552]	; (801348c <tcp_output+0x238>)
 8013264:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013268:	4989      	ldr	r1, [pc, #548]	; (8013490 <tcp_output+0x23c>)
 801326a:	488a      	ldr	r0, [pc, #552]	; (8013494 <tcp_output+0x240>)
 801326c:	f006 f9ae 	bl	80195cc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	7d1b      	ldrb	r3, [r3, #20]
 8013274:	2b01      	cmp	r3, #1
 8013276:	d106      	bne.n	8013286 <tcp_output+0x32>
 8013278:	4b84      	ldr	r3, [pc, #528]	; (801348c <tcp_output+0x238>)
 801327a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801327e:	4986      	ldr	r1, [pc, #536]	; (8013498 <tcp_output+0x244>)
 8013280:	4884      	ldr	r0, [pc, #528]	; (8013494 <tcp_output+0x240>)
 8013282:	f006 f9a3 	bl	80195cc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013286:	4b85      	ldr	r3, [pc, #532]	; (801349c <tcp_output+0x248>)
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	687a      	ldr	r2, [r7, #4]
 801328c:	429a      	cmp	r2, r3
 801328e:	d101      	bne.n	8013294 <tcp_output+0x40>
    return ERR_OK;
 8013290:	2300      	movs	r3, #0
 8013292:	e1ce      	b.n	8013632 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80132a0:	4293      	cmp	r3, r2
 80132a2:	bf28      	it	cs
 80132a4:	4613      	movcs	r3, r2
 80132a6:	b29b      	uxth	r3, r3
 80132a8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80132b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d10b      	bne.n	80132ce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	8b5b      	ldrh	r3, [r3, #26]
 80132ba:	f003 0302 	and.w	r3, r3, #2
 80132be:	2b00      	cmp	r3, #0
 80132c0:	f000 81aa 	beq.w	8013618 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fdcb 	bl	8013e60 <tcp_send_empty_ack>
 80132ca:	4603      	mov	r3, r0
 80132cc:	e1b1      	b.n	8013632 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80132ce:	6879      	ldr	r1, [r7, #4]
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	3304      	adds	r3, #4
 80132d4:	461a      	mov	r2, r3
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff f824 	bl	8012324 <tcp_route>
 80132dc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80132de:	697b      	ldr	r3, [r7, #20]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d102      	bne.n	80132ea <tcp_output+0x96>
    return ERR_RTE;
 80132e4:	f06f 0303 	mvn.w	r3, #3
 80132e8:	e1a3      	b.n	8013632 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d003      	beq.n	80132f8 <tcp_output+0xa4>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	681b      	ldr	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d111      	bne.n	801331c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d002      	beq.n	8013304 <tcp_output+0xb0>
 80132fe:	697b      	ldr	r3, [r7, #20]
 8013300:	3304      	adds	r3, #4
 8013302:	e000      	b.n	8013306 <tcp_output+0xb2>
 8013304:	2300      	movs	r3, #0
 8013306:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013308:	693b      	ldr	r3, [r7, #16]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d102      	bne.n	8013314 <tcp_output+0xc0>
      return ERR_RTE;
 801330e:	f06f 0303 	mvn.w	r3, #3
 8013312:	e18e      	b.n	8013632 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013314:	693b      	ldr	r3, [r7, #16]
 8013316:	681a      	ldr	r2, [r3, #0]
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801331e:	68db      	ldr	r3, [r3, #12]
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	4618      	mov	r0, r3
 8013324:	f7f8 ffe9 	bl	800c2fa <lwip_htonl>
 8013328:	4602      	mov	r2, r0
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801332e:	1ad3      	subs	r3, r2, r3
 8013330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013332:	8912      	ldrh	r2, [r2, #8]
 8013334:	4413      	add	r3, r2
 8013336:	69ba      	ldr	r2, [r7, #24]
 8013338:	429a      	cmp	r2, r3
 801333a:	d227      	bcs.n	801338c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013342:	461a      	mov	r2, r3
 8013344:	69bb      	ldr	r3, [r7, #24]
 8013346:	4293      	cmp	r3, r2
 8013348:	d114      	bne.n	8013374 <tcp_output+0x120>
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801334e:	2b00      	cmp	r3, #0
 8013350:	d110      	bne.n	8013374 <tcp_output+0x120>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013358:	2b00      	cmp	r3, #0
 801335a:	d10b      	bne.n	8013374 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2201      	movs	r2, #1
 8013368:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	8b5b      	ldrh	r3, [r3, #26]
 8013378:	f003 0302 	and.w	r3, r3, #2
 801337c:	2b00      	cmp	r3, #0
 801337e:	f000 814d 	beq.w	801361c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f000 fd6c 	bl	8013e60 <tcp_send_empty_ack>
 8013388:	4603      	mov	r3, r0
 801338a:	e152      	b.n	8013632 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2200      	movs	r2, #0
 8013390:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013398:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	2b00      	cmp	r3, #0
 801339e:	f000 811c 	beq.w	80135da <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80133a2:	e002      	b.n	80133aa <tcp_output+0x156>
 80133a4:	6a3b      	ldr	r3, [r7, #32]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	623b      	str	r3, [r7, #32]
 80133aa:	6a3b      	ldr	r3, [r7, #32]
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d1f8      	bne.n	80133a4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80133b2:	e112      	b.n	80135da <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80133b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b6:	68db      	ldr	r3, [r3, #12]
 80133b8:	899b      	ldrh	r3, [r3, #12]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f8 ff87 	bl	800c2d0 <lwip_htons>
 80133c2:	4603      	mov	r3, r0
 80133c4:	b2db      	uxtb	r3, r3
 80133c6:	f003 0304 	and.w	r3, r3, #4
 80133ca:	2b00      	cmp	r3, #0
 80133cc:	d006      	beq.n	80133dc <tcp_output+0x188>
 80133ce:	4b2f      	ldr	r3, [pc, #188]	; (801348c <tcp_output+0x238>)
 80133d0:	f240 5236 	movw	r2, #1334	; 0x536
 80133d4:	4932      	ldr	r1, [pc, #200]	; (80134a0 <tcp_output+0x24c>)
 80133d6:	482f      	ldr	r0, [pc, #188]	; (8013494 <tcp_output+0x240>)
 80133d8:	f006 f8f8 	bl	80195cc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d01f      	beq.n	8013424 <tcp_output+0x1d0>
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	8b5b      	ldrh	r3, [r3, #26]
 80133e8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d119      	bne.n	8013424 <tcp_output+0x1d0>
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d00b      	beq.n	8013410 <tcp_output+0x1bc>
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d110      	bne.n	8013424 <tcp_output+0x1d0>
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013406:	891a      	ldrh	r2, [r3, #8]
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801340c:	429a      	cmp	r2, r3
 801340e:	d209      	bcs.n	8013424 <tcp_output+0x1d0>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8013416:	2b00      	cmp	r3, #0
 8013418:	d004      	beq.n	8013424 <tcp_output+0x1d0>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013420:	2b08      	cmp	r3, #8
 8013422:	d901      	bls.n	8013428 <tcp_output+0x1d4>
 8013424:	2301      	movs	r3, #1
 8013426:	e000      	b.n	801342a <tcp_output+0x1d6>
 8013428:	2300      	movs	r3, #0
 801342a:	2b00      	cmp	r3, #0
 801342c:	d106      	bne.n	801343c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	8b5b      	ldrh	r3, [r3, #26]
 8013432:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013436:	2b00      	cmp	r3, #0
 8013438:	f000 80e4 	beq.w	8013604 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	7d1b      	ldrb	r3, [r3, #20]
 8013440:	2b02      	cmp	r3, #2
 8013442:	d00d      	beq.n	8013460 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013446:	68db      	ldr	r3, [r3, #12]
 8013448:	899b      	ldrh	r3, [r3, #12]
 801344a:	b29c      	uxth	r4, r3
 801344c:	2010      	movs	r0, #16
 801344e:	f7f8 ff3f 	bl	800c2d0 <lwip_htons>
 8013452:	4603      	mov	r3, r0
 8013454:	461a      	mov	r2, r3
 8013456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	4322      	orrs	r2, r4
 801345c:	b292      	uxth	r2, r2
 801345e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8013460:	697a      	ldr	r2, [r7, #20]
 8013462:	6879      	ldr	r1, [r7, #4]
 8013464:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013466:	f000 f909 	bl	801367c <tcp_output_segment>
 801346a:	4603      	mov	r3, r0
 801346c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801346e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d016      	beq.n	80134a4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	8b5b      	ldrh	r3, [r3, #26]
 801347a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801347e:	b29a      	uxth	r2, r3
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	835a      	strh	r2, [r3, #26]
      return err;
 8013484:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013488:	e0d3      	b.n	8013632 <tcp_output+0x3de>
 801348a:	bf00      	nop
 801348c:	0801bffc 	.word	0x0801bffc
 8013490:	0801c540 	.word	0x0801c540
 8013494:	0801c050 	.word	0x0801c050
 8013498:	0801c558 	.word	0x0801c558
 801349c:	2000cf70 	.word	0x2000cf70
 80134a0:	0801c580 	.word	0x0801c580
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80134a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a6:	681a      	ldr	r2, [r3, #0]
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	7d1b      	ldrb	r3, [r3, #20]
 80134b0:	2b02      	cmp	r3, #2
 80134b2:	d006      	beq.n	80134c2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	8b5b      	ldrh	r3, [r3, #26]
 80134b8:	f023 0303 	bic.w	r3, r3, #3
 80134bc:	b29a      	uxth	r2, r3
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80134c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	685b      	ldr	r3, [r3, #4]
 80134c8:	4618      	mov	r0, r3
 80134ca:	f7f8 ff16 	bl	800c2fa <lwip_htonl>
 80134ce:	4604      	mov	r4, r0
 80134d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d2:	891b      	ldrh	r3, [r3, #8]
 80134d4:	461d      	mov	r5, r3
 80134d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	899b      	ldrh	r3, [r3, #12]
 80134dc:	b29b      	uxth	r3, r3
 80134de:	4618      	mov	r0, r3
 80134e0:	f7f8 fef6 	bl	800c2d0 <lwip_htons>
 80134e4:	4603      	mov	r3, r0
 80134e6:	b2db      	uxtb	r3, r3
 80134e8:	f003 0303 	and.w	r3, r3, #3
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d001      	beq.n	80134f4 <tcp_output+0x2a0>
 80134f0:	2301      	movs	r3, #1
 80134f2:	e000      	b.n	80134f6 <tcp_output+0x2a2>
 80134f4:	2300      	movs	r3, #0
 80134f6:	442b      	add	r3, r5
 80134f8:	4423      	add	r3, r4
 80134fa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	2b00      	cmp	r3, #0
 8013506:	da02      	bge.n	801350e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	68ba      	ldr	r2, [r7, #8]
 801350c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801350e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013510:	891b      	ldrh	r3, [r3, #8]
 8013512:	461c      	mov	r4, r3
 8013514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013516:	68db      	ldr	r3, [r3, #12]
 8013518:	899b      	ldrh	r3, [r3, #12]
 801351a:	b29b      	uxth	r3, r3
 801351c:	4618      	mov	r0, r3
 801351e:	f7f8 fed7 	bl	800c2d0 <lwip_htons>
 8013522:	4603      	mov	r3, r0
 8013524:	b2db      	uxtb	r3, r3
 8013526:	f003 0303 	and.w	r3, r3, #3
 801352a:	2b00      	cmp	r3, #0
 801352c:	d001      	beq.n	8013532 <tcp_output+0x2de>
 801352e:	2301      	movs	r3, #1
 8013530:	e000      	b.n	8013534 <tcp_output+0x2e0>
 8013532:	2300      	movs	r3, #0
 8013534:	4423      	add	r3, r4
 8013536:	2b00      	cmp	r3, #0
 8013538:	d049      	beq.n	80135ce <tcp_output+0x37a>
      seg->next = NULL;
 801353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801353c:	2200      	movs	r2, #0
 801353e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013544:	2b00      	cmp	r3, #0
 8013546:	d105      	bne.n	8013554 <tcp_output+0x300>
        pcb->unacked = seg;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801354c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801354e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013550:	623b      	str	r3, [r7, #32]
 8013552:	e03f      	b.n	80135d4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8013554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013556:	68db      	ldr	r3, [r3, #12]
 8013558:	685b      	ldr	r3, [r3, #4]
 801355a:	4618      	mov	r0, r3
 801355c:	f7f8 fecd 	bl	800c2fa <lwip_htonl>
 8013560:	4604      	mov	r4, r0
 8013562:	6a3b      	ldr	r3, [r7, #32]
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	4618      	mov	r0, r3
 801356a:	f7f8 fec6 	bl	800c2fa <lwip_htonl>
 801356e:	4603      	mov	r3, r0
 8013570:	1ae3      	subs	r3, r4, r3
 8013572:	2b00      	cmp	r3, #0
 8013574:	da24      	bge.n	80135c0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	3370      	adds	r3, #112	; 0x70
 801357a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801357c:	e002      	b.n	8013584 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d011      	beq.n	80135b0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	681b      	ldr	r3, [r3, #0]
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	685b      	ldr	r3, [r3, #4]
 8013594:	4618      	mov	r0, r3
 8013596:	f7f8 feb0 	bl	800c2fa <lwip_htonl>
 801359a:	4604      	mov	r4, r0
 801359c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801359e:	68db      	ldr	r3, [r3, #12]
 80135a0:	685b      	ldr	r3, [r3, #4]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f7f8 fea9 	bl	800c2fa <lwip_htonl>
 80135a8:	4603      	mov	r3, r0
 80135aa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	dbe6      	blt.n	801357e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	681a      	ldr	r2, [r3, #0]
 80135b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135b6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80135b8:	69fb      	ldr	r3, [r7, #28]
 80135ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135bc:	601a      	str	r2, [r3, #0]
 80135be:	e009      	b.n	80135d4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80135c0:	6a3b      	ldr	r3, [r7, #32]
 80135c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135c4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80135c6:	6a3b      	ldr	r3, [r7, #32]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	623b      	str	r3, [r7, #32]
 80135cc:	e002      	b.n	80135d4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80135ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80135d0:	f7fb fefb 	bl	800f3ca <tcp_seg_free>
    }
    seg = pcb->unsent;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80135d8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80135da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d012      	beq.n	8013606 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80135e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e2:	68db      	ldr	r3, [r3, #12]
 80135e4:	685b      	ldr	r3, [r3, #4]
 80135e6:	4618      	mov	r0, r3
 80135e8:	f7f8 fe87 	bl	800c2fa <lwip_htonl>
 80135ec:	4602      	mov	r2, r0
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135f6:	8912      	ldrh	r2, [r2, #8]
 80135f8:	4413      	add	r3, r2
  while (seg != NULL &&
 80135fa:	69ba      	ldr	r2, [r7, #24]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	f4bf aed9 	bcs.w	80133b4 <tcp_output+0x160>
 8013602:	e000      	b.n	8013606 <tcp_output+0x3b2>
      break;
 8013604:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801360a:	2b00      	cmp	r3, #0
 801360c:	d108      	bne.n	8013620 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013616:	e004      	b.n	8013622 <tcp_output+0x3ce>
    goto output_done;
 8013618:	bf00      	nop
 801361a:	e002      	b.n	8013622 <tcp_output+0x3ce>
    goto output_done;
 801361c:	bf00      	nop
 801361e:	e000      	b.n	8013622 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013620:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	8b5b      	ldrh	r3, [r3, #26]
 8013626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801362a:	b29a      	uxth	r2, r3
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013630:	2300      	movs	r3, #0
}
 8013632:	4618      	mov	r0, r3
 8013634:	3728      	adds	r7, #40	; 0x28
 8013636:	46bd      	mov	sp, r7
 8013638:	bdb0      	pop	{r4, r5, r7, pc}
 801363a:	bf00      	nop

0801363c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d106      	bne.n	8013658 <tcp_output_segment_busy+0x1c>
 801364a:	4b09      	ldr	r3, [pc, #36]	; (8013670 <tcp_output_segment_busy+0x34>)
 801364c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013650:	4908      	ldr	r1, [pc, #32]	; (8013674 <tcp_output_segment_busy+0x38>)
 8013652:	4809      	ldr	r0, [pc, #36]	; (8013678 <tcp_output_segment_busy+0x3c>)
 8013654:	f005 ffba 	bl	80195cc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	685b      	ldr	r3, [r3, #4]
 801365c:	7b9b      	ldrb	r3, [r3, #14]
 801365e:	2b01      	cmp	r3, #1
 8013660:	d001      	beq.n	8013666 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013662:	2301      	movs	r3, #1
 8013664:	e000      	b.n	8013668 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013666:	2300      	movs	r3, #0
}
 8013668:	4618      	mov	r0, r3
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	0801bffc 	.word	0x0801bffc
 8013674:	0801c598 	.word	0x0801c598
 8013678:	0801c050 	.word	0x0801c050

0801367c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801367c:	b5b0      	push	{r4, r5, r7, lr}
 801367e:	b08c      	sub	sp, #48	; 0x30
 8013680:	af04      	add	r7, sp, #16
 8013682:	60f8      	str	r0, [r7, #12]
 8013684:	60b9      	str	r1, [r7, #8]
 8013686:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d106      	bne.n	801369c <tcp_output_segment+0x20>
 801368e:	4b64      	ldr	r3, [pc, #400]	; (8013820 <tcp_output_segment+0x1a4>)
 8013690:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013694:	4963      	ldr	r1, [pc, #396]	; (8013824 <tcp_output_segment+0x1a8>)
 8013696:	4864      	ldr	r0, [pc, #400]	; (8013828 <tcp_output_segment+0x1ac>)
 8013698:	f005 ff98 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d106      	bne.n	80136b0 <tcp_output_segment+0x34>
 80136a2:	4b5f      	ldr	r3, [pc, #380]	; (8013820 <tcp_output_segment+0x1a4>)
 80136a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80136a8:	4960      	ldr	r1, [pc, #384]	; (801382c <tcp_output_segment+0x1b0>)
 80136aa:	485f      	ldr	r0, [pc, #380]	; (8013828 <tcp_output_segment+0x1ac>)
 80136ac:	f005 ff8e 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	d106      	bne.n	80136c4 <tcp_output_segment+0x48>
 80136b6:	4b5a      	ldr	r3, [pc, #360]	; (8013820 <tcp_output_segment+0x1a4>)
 80136b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80136bc:	495c      	ldr	r1, [pc, #368]	; (8013830 <tcp_output_segment+0x1b4>)
 80136be:	485a      	ldr	r0, [pc, #360]	; (8013828 <tcp_output_segment+0x1ac>)
 80136c0:	f005 ff84 	bl	80195cc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7ff ffb9 	bl	801363c <tcp_output_segment_busy>
 80136ca:	4603      	mov	r3, r0
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d001      	beq.n	80136d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80136d0:	2300      	movs	r3, #0
 80136d2:	e0a1      	b.n	8013818 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80136d4:	68bb      	ldr	r3, [r7, #8]
 80136d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	68dc      	ldr	r4, [r3, #12]
 80136dc:	4610      	mov	r0, r2
 80136de:	f7f8 fe0c 	bl	800c2fa <lwip_htonl>
 80136e2:	4603      	mov	r3, r0
 80136e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80136e6:	68bb      	ldr	r3, [r7, #8]
 80136e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	68dc      	ldr	r4, [r3, #12]
 80136ee:	4610      	mov	r0, r2
 80136f0:	f7f8 fdee 	bl	800c2d0 <lwip_htons>
 80136f4:	4603      	mov	r3, r0
 80136f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136fc:	68ba      	ldr	r2, [r7, #8]
 80136fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013700:	441a      	add	r2, r3
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	3314      	adds	r3, #20
 801370c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	7a9b      	ldrb	r3, [r3, #10]
 8013712:	f003 0301 	and.w	r3, r3, #1
 8013716:	2b00      	cmp	r3, #0
 8013718:	d015      	beq.n	8013746 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801371a:	68bb      	ldr	r3, [r7, #8]
 801371c:	3304      	adds	r3, #4
 801371e:	461a      	mov	r2, r3
 8013720:	6879      	ldr	r1, [r7, #4]
 8013722:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013726:	f7fc fa33 	bl	800fb90 <tcp_eff_send_mss_netif>
 801372a:	4603      	mov	r3, r0
 801372c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801372e:	8b7b      	ldrh	r3, [r7, #26]
 8013730:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013734:	4618      	mov	r0, r3
 8013736:	f7f8 fde0 	bl	800c2fa <lwip_htonl>
 801373a:	4602      	mov	r2, r0
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	3304      	adds	r3, #4
 8013744:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801374c:	2b00      	cmp	r3, #0
 801374e:	da02      	bge.n	8013756 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	2200      	movs	r2, #0
 8013754:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801375a:	2b00      	cmp	r3, #0
 801375c:	d10c      	bne.n	8013778 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801375e:	4b35      	ldr	r3, [pc, #212]	; (8013834 <tcp_output_segment+0x1b8>)
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	68db      	ldr	r3, [r3, #12]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	4618      	mov	r0, r3
 801376e:	f7f8 fdc4 	bl	800c2fa <lwip_htonl>
 8013772:	4602      	mov	r2, r0
 8013774:	68bb      	ldr	r3, [r7, #8]
 8013776:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	68da      	ldr	r2, [r3, #12]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	685b      	ldr	r3, [r3, #4]
 8013780:	685b      	ldr	r3, [r3, #4]
 8013782:	1ad3      	subs	r3, r2, r3
 8013784:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	685b      	ldr	r3, [r3, #4]
 801378a:	8959      	ldrh	r1, [r3, #10]
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	8b3a      	ldrh	r2, [r7, #24]
 8013792:	1a8a      	subs	r2, r1, r2
 8013794:	b292      	uxth	r2, r2
 8013796:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	8919      	ldrh	r1, [r3, #8]
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	685b      	ldr	r3, [r3, #4]
 80137a2:	8b3a      	ldrh	r2, [r7, #24]
 80137a4:	1a8a      	subs	r2, r1, r2
 80137a6:	b292      	uxth	r2, r2
 80137a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80137aa:	68fb      	ldr	r3, [r7, #12]
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	68fa      	ldr	r2, [r7, #12]
 80137b0:	68d2      	ldr	r2, [r2, #12]
 80137b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	2200      	movs	r2, #0
 80137ba:	741a      	strb	r2, [r3, #16]
 80137bc:	2200      	movs	r2, #0
 80137be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	68da      	ldr	r2, [r3, #12]
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	7a9b      	ldrb	r3, [r3, #10]
 80137c8:	f003 0301 	and.w	r3, r3, #1
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d001      	beq.n	80137d4 <tcp_output_segment+0x158>
 80137d0:	2318      	movs	r3, #24
 80137d2:	e000      	b.n	80137d6 <tcp_output_segment+0x15a>
 80137d4:	2314      	movs	r3, #20
 80137d6:	4413      	add	r3, r2
 80137d8:	69fa      	ldr	r2, [r7, #28]
 80137da:	429a      	cmp	r2, r3
 80137dc:	d006      	beq.n	80137ec <tcp_output_segment+0x170>
 80137de:	4b10      	ldr	r3, [pc, #64]	; (8013820 <tcp_output_segment+0x1a4>)
 80137e0:	f240 621c 	movw	r2, #1564	; 0x61c
 80137e4:	4914      	ldr	r1, [pc, #80]	; (8013838 <tcp_output_segment+0x1bc>)
 80137e6:	4810      	ldr	r0, [pc, #64]	; (8013828 <tcp_output_segment+0x1ac>)
 80137e8:	f005 fef0 	bl	80195cc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80137ec:	68fb      	ldr	r3, [r7, #12]
 80137ee:	6858      	ldr	r0, [r3, #4]
 80137f0:	68b9      	ldr	r1, [r7, #8]
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	1d1c      	adds	r4, r3, #4
 80137f6:	68bb      	ldr	r3, [r7, #8]
 80137f8:	7add      	ldrb	r5, [r3, #11]
 80137fa:	68bb      	ldr	r3, [r7, #8]
 80137fc:	7a9b      	ldrb	r3, [r3, #10]
 80137fe:	687a      	ldr	r2, [r7, #4]
 8013800:	9202      	str	r2, [sp, #8]
 8013802:	2206      	movs	r2, #6
 8013804:	9201      	str	r2, [sp, #4]
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	462b      	mov	r3, r5
 801380a:	4622      	mov	r2, r4
 801380c:	f004 fc1c 	bl	8018048 <ip4_output_if>
 8013810:	4603      	mov	r3, r0
 8013812:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013818:	4618      	mov	r0, r3
 801381a:	3720      	adds	r7, #32
 801381c:	46bd      	mov	sp, r7
 801381e:	bdb0      	pop	{r4, r5, r7, pc}
 8013820:	0801bffc 	.word	0x0801bffc
 8013824:	0801c5c0 	.word	0x0801c5c0
 8013828:	0801c050 	.word	0x0801c050
 801382c:	0801c5e0 	.word	0x0801c5e0
 8013830:	0801c600 	.word	0x0801c600
 8013834:	2000cf24 	.word	0x2000cf24
 8013838:	0801c624 	.word	0x0801c624

0801383c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801383c:	b5b0      	push	{r4, r5, r7, lr}
 801383e:	b084      	sub	sp, #16
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	2b00      	cmp	r3, #0
 8013848:	d106      	bne.n	8013858 <tcp_rexmit_rto_prepare+0x1c>
 801384a:	4b31      	ldr	r3, [pc, #196]	; (8013910 <tcp_rexmit_rto_prepare+0xd4>)
 801384c:	f240 6263 	movw	r2, #1635	; 0x663
 8013850:	4930      	ldr	r1, [pc, #192]	; (8013914 <tcp_rexmit_rto_prepare+0xd8>)
 8013852:	4831      	ldr	r0, [pc, #196]	; (8013918 <tcp_rexmit_rto_prepare+0xdc>)
 8013854:	f005 feba 	bl	80195cc <iprintf>

  if (pcb->unacked == NULL) {
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801385c:	2b00      	cmp	r3, #0
 801385e:	d102      	bne.n	8013866 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013860:	f06f 0305 	mvn.w	r3, #5
 8013864:	e050      	b.n	8013908 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801386a:	60fb      	str	r3, [r7, #12]
 801386c:	e00b      	b.n	8013886 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f7ff fee4 	bl	801363c <tcp_output_segment_busy>
 8013874:	4603      	mov	r3, r0
 8013876:	2b00      	cmp	r3, #0
 8013878:	d002      	beq.n	8013880 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801387a:	f06f 0305 	mvn.w	r3, #5
 801387e:	e043      	b.n	8013908 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013880:	68fb      	ldr	r3, [r7, #12]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	60fb      	str	r3, [r7, #12]
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d1ef      	bne.n	801386e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801388e:	68f8      	ldr	r0, [r7, #12]
 8013890:	f7ff fed4 	bl	801363c <tcp_output_segment_busy>
 8013894:	4603      	mov	r3, r0
 8013896:	2b00      	cmp	r3, #0
 8013898:	d002      	beq.n	80138a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801389a:	f06f 0305 	mvn.w	r3, #5
 801389e:	e033      	b.n	8013908 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	2200      	movs	r2, #0
 80138b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	8b5b      	ldrh	r3, [r3, #26]
 80138ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80138be:	b29a      	uxth	r2, r3
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7f8 fd15 	bl	800c2fa <lwip_htonl>
 80138d0:	4604      	mov	r4, r0
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	891b      	ldrh	r3, [r3, #8]
 80138d6:	461d      	mov	r5, r3
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	68db      	ldr	r3, [r3, #12]
 80138dc:	899b      	ldrh	r3, [r3, #12]
 80138de:	b29b      	uxth	r3, r3
 80138e0:	4618      	mov	r0, r3
 80138e2:	f7f8 fcf5 	bl	800c2d0 <lwip_htons>
 80138e6:	4603      	mov	r3, r0
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	f003 0303 	and.w	r3, r3, #3
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d001      	beq.n	80138f6 <tcp_rexmit_rto_prepare+0xba>
 80138f2:	2301      	movs	r3, #1
 80138f4:	e000      	b.n	80138f8 <tcp_rexmit_rto_prepare+0xbc>
 80138f6:	2300      	movs	r3, #0
 80138f8:	442b      	add	r3, r5
 80138fa:	18e2      	adds	r2, r4, r3
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2200      	movs	r2, #0
 8013904:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013906:	2300      	movs	r3, #0
}
 8013908:	4618      	mov	r0, r3
 801390a:	3710      	adds	r7, #16
 801390c:	46bd      	mov	sp, r7
 801390e:	bdb0      	pop	{r4, r5, r7, pc}
 8013910:	0801bffc 	.word	0x0801bffc
 8013914:	0801c638 	.word	0x0801c638
 8013918:	0801c050 	.word	0x0801c050

0801391c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013924:	687b      	ldr	r3, [r7, #4]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d106      	bne.n	8013938 <tcp_rexmit_rto_commit+0x1c>
 801392a:	4b0d      	ldr	r3, [pc, #52]	; (8013960 <tcp_rexmit_rto_commit+0x44>)
 801392c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013930:	490c      	ldr	r1, [pc, #48]	; (8013964 <tcp_rexmit_rto_commit+0x48>)
 8013932:	480d      	ldr	r0, [pc, #52]	; (8013968 <tcp_rexmit_rto_commit+0x4c>)
 8013934:	f005 fe4a 	bl	80195cc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801393e:	2bff      	cmp	r3, #255	; 0xff
 8013940:	d007      	beq.n	8013952 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013948:	3301      	adds	r3, #1
 801394a:	b2da      	uxtb	r2, r3
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013952:	6878      	ldr	r0, [r7, #4]
 8013954:	f7ff fc7e 	bl	8013254 <tcp_output>
}
 8013958:	bf00      	nop
 801395a:	3708      	adds	r7, #8
 801395c:	46bd      	mov	sp, r7
 801395e:	bd80      	pop	{r7, pc}
 8013960:	0801bffc 	.word	0x0801bffc
 8013964:	0801c65c 	.word	0x0801c65c
 8013968:	0801c050 	.word	0x0801c050

0801396c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b082      	sub	sp, #8
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d106      	bne.n	8013988 <tcp_rexmit_rto+0x1c>
 801397a:	4b0a      	ldr	r3, [pc, #40]	; (80139a4 <tcp_rexmit_rto+0x38>)
 801397c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013980:	4909      	ldr	r1, [pc, #36]	; (80139a8 <tcp_rexmit_rto+0x3c>)
 8013982:	480a      	ldr	r0, [pc, #40]	; (80139ac <tcp_rexmit_rto+0x40>)
 8013984:	f005 fe22 	bl	80195cc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013988:	6878      	ldr	r0, [r7, #4]
 801398a:	f7ff ff57 	bl	801383c <tcp_rexmit_rto_prepare>
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	d102      	bne.n	801399a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f7ff ffc1 	bl	801391c <tcp_rexmit_rto_commit>
  }
}
 801399a:	bf00      	nop
 801399c:	3708      	adds	r7, #8
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	0801bffc 	.word	0x0801bffc
 80139a8:	0801c680 	.word	0x0801c680
 80139ac:	0801c050 	.word	0x0801c050

080139b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80139b0:	b590      	push	{r4, r7, lr}
 80139b2:	b085      	sub	sp, #20
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <tcp_rexmit+0x1c>
 80139be:	4b2f      	ldr	r3, [pc, #188]	; (8013a7c <tcp_rexmit+0xcc>)
 80139c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80139c4:	492e      	ldr	r1, [pc, #184]	; (8013a80 <tcp_rexmit+0xd0>)
 80139c6:	482f      	ldr	r0, [pc, #188]	; (8013a84 <tcp_rexmit+0xd4>)
 80139c8:	f005 fe00 	bl	80195cc <iprintf>

  if (pcb->unacked == NULL) {
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d102      	bne.n	80139da <tcp_rexmit+0x2a>
    return ERR_VAL;
 80139d4:	f06f 0305 	mvn.w	r3, #5
 80139d8:	e04c      	b.n	8013a74 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80139de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80139e0:	68b8      	ldr	r0, [r7, #8]
 80139e2:	f7ff fe2b 	bl	801363c <tcp_output_segment_busy>
 80139e6:	4603      	mov	r3, r0
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d002      	beq.n	80139f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80139ec:	f06f 0305 	mvn.w	r3, #5
 80139f0:	e040      	b.n	8013a74 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80139f2:	68bb      	ldr	r3, [r7, #8]
 80139f4:	681a      	ldr	r2, [r3, #0]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	336c      	adds	r3, #108	; 0x6c
 80139fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a00:	e002      	b.n	8013a08 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013a02:	68fb      	ldr	r3, [r7, #12]
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d011      	beq.n	8013a34 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	68db      	ldr	r3, [r3, #12]
 8013a16:	685b      	ldr	r3, [r3, #4]
 8013a18:	4618      	mov	r0, r3
 8013a1a:	f7f8 fc6e 	bl	800c2fa <lwip_htonl>
 8013a1e:	4604      	mov	r4, r0
 8013a20:	68bb      	ldr	r3, [r7, #8]
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	685b      	ldr	r3, [r3, #4]
 8013a26:	4618      	mov	r0, r3
 8013a28:	f7f8 fc67 	bl	800c2fa <lwip_htonl>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	dbe6      	blt.n	8013a02 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	68ba      	ldr	r2, [r7, #8]
 8013a40:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013a42:	68bb      	ldr	r3, [r7, #8]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d103      	bne.n	8013a52 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a58:	2bff      	cmp	r3, #255	; 0xff
 8013a5a:	d007      	beq.n	8013a6c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013a62:	3301      	adds	r3, #1
 8013a64:	b2da      	uxtb	r2, r3
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2200      	movs	r2, #0
 8013a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013a72:	2300      	movs	r3, #0
}
 8013a74:	4618      	mov	r0, r3
 8013a76:	3714      	adds	r7, #20
 8013a78:	46bd      	mov	sp, r7
 8013a7a:	bd90      	pop	{r4, r7, pc}
 8013a7c:	0801bffc 	.word	0x0801bffc
 8013a80:	0801c69c 	.word	0x0801c69c
 8013a84:	0801c050 	.word	0x0801c050

08013a88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b082      	sub	sp, #8
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d106      	bne.n	8013aa4 <tcp_rexmit_fast+0x1c>
 8013a96:	4b2a      	ldr	r3, [pc, #168]	; (8013b40 <tcp_rexmit_fast+0xb8>)
 8013a98:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8013a9c:	4929      	ldr	r1, [pc, #164]	; (8013b44 <tcp_rexmit_fast+0xbc>)
 8013a9e:	482a      	ldr	r0, [pc, #168]	; (8013b48 <tcp_rexmit_fast+0xc0>)
 8013aa0:	f005 fd94 	bl	80195cc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d045      	beq.n	8013b38 <tcp_rexmit_fast+0xb0>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	8b5b      	ldrh	r3, [r3, #26]
 8013ab0:	f003 0304 	and.w	r3, r3, #4
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d13f      	bne.n	8013b38 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff ff79 	bl	80139b0 <tcp_rexmit>
 8013abe:	4603      	mov	r3, r0
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d139      	bne.n	8013b38 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013ac4:	687b      	ldr	r3, [r7, #4]
 8013ac6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	bf28      	it	cs
 8013ad4:	4613      	movcs	r3, r2
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	da00      	bge.n	8013ade <tcp_rexmit_fast+0x56>
 8013adc:	3301      	adds	r3, #1
 8013ade:	105b      	asrs	r3, r3, #1
 8013ae0:	b29a      	uxth	r2, r3
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013aee:	461a      	mov	r2, r3
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013af4:	005b      	lsls	r3, r3, #1
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d206      	bcs.n	8013b08 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013afe:	005b      	lsls	r3, r3, #1
 8013b00:	b29a      	uxth	r2, r3
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b12:	4619      	mov	r1, r3
 8013b14:	0049      	lsls	r1, r1, #1
 8013b16:	440b      	add	r3, r1
 8013b18:	b29b      	uxth	r3, r3
 8013b1a:	4413      	add	r3, r2
 8013b1c:	b29a      	uxth	r2, r3
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	8b5b      	ldrh	r3, [r3, #26]
 8013b28:	f043 0304 	orr.w	r3, r3, #4
 8013b2c:	b29a      	uxth	r2, r3
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2200      	movs	r2, #0
 8013b36:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013b38:	bf00      	nop
 8013b3a:	3708      	adds	r7, #8
 8013b3c:	46bd      	mov	sp, r7
 8013b3e:	bd80      	pop	{r7, pc}
 8013b40:	0801bffc 	.word	0x0801bffc
 8013b44:	0801c6b4 	.word	0x0801c6b4
 8013b48:	0801c050 	.word	0x0801c050

08013b4c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b086      	sub	sp, #24
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	60f8      	str	r0, [r7, #12]
 8013b54:	607b      	str	r3, [r7, #4]
 8013b56:	460b      	mov	r3, r1
 8013b58:	817b      	strh	r3, [r7, #10]
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013b5e:	897a      	ldrh	r2, [r7, #10]
 8013b60:	893b      	ldrh	r3, [r7, #8]
 8013b62:	4413      	add	r3, r2
 8013b64:	b29b      	uxth	r3, r3
 8013b66:	3314      	adds	r3, #20
 8013b68:	b29b      	uxth	r3, r3
 8013b6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013b6e:	4619      	mov	r1, r3
 8013b70:	2022      	movs	r0, #34	; 0x22
 8013b72:	f7f9 fcfd 	bl	800d570 <pbuf_alloc>
 8013b76:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013b78:	697b      	ldr	r3, [r7, #20]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d04d      	beq.n	8013c1a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013b7e:	897b      	ldrh	r3, [r7, #10]
 8013b80:	3313      	adds	r3, #19
 8013b82:	697a      	ldr	r2, [r7, #20]
 8013b84:	8952      	ldrh	r2, [r2, #10]
 8013b86:	4293      	cmp	r3, r2
 8013b88:	db06      	blt.n	8013b98 <tcp_output_alloc_header_common+0x4c>
 8013b8a:	4b26      	ldr	r3, [pc, #152]	; (8013c24 <tcp_output_alloc_header_common+0xd8>)
 8013b8c:	f240 7223 	movw	r2, #1827	; 0x723
 8013b90:	4925      	ldr	r1, [pc, #148]	; (8013c28 <tcp_output_alloc_header_common+0xdc>)
 8013b92:	4826      	ldr	r0, [pc, #152]	; (8013c2c <tcp_output_alloc_header_common+0xe0>)
 8013b94:	f005 fd1a 	bl	80195cc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	685b      	ldr	r3, [r3, #4]
 8013b9c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013b9e:	8c3b      	ldrh	r3, [r7, #32]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7f8 fb95 	bl	800c2d0 <lwip_htons>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	461a      	mov	r2, r3
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8013bae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7f8 fb8d 	bl	800c2d0 <lwip_htons>
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	461a      	mov	r2, r3
 8013bba:	693b      	ldr	r3, [r7, #16]
 8013bbc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8013bc4:	68f8      	ldr	r0, [r7, #12]
 8013bc6:	f7f8 fb98 	bl	800c2fa <lwip_htonl>
 8013bca:	4602      	mov	r2, r0
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8013bd0:	897b      	ldrh	r3, [r7, #10]
 8013bd2:	089b      	lsrs	r3, r3, #2
 8013bd4:	b29b      	uxth	r3, r3
 8013bd6:	3305      	adds	r3, #5
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	031b      	lsls	r3, r3, #12
 8013bdc:	b29a      	uxth	r2, r3
 8013bde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013be2:	b29b      	uxth	r3, r3
 8013be4:	4313      	orrs	r3, r2
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7f8 fb71 	bl	800c2d0 <lwip_htons>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	461a      	mov	r2, r3
 8013bf2:	693b      	ldr	r3, [r7, #16]
 8013bf4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013bf6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7f8 fb69 	bl	800c2d0 <lwip_htons>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	461a      	mov	r2, r3
 8013c02:	693b      	ldr	r3, [r7, #16]
 8013c04:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	2200      	movs	r2, #0
 8013c0a:	741a      	strb	r2, [r3, #16]
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	2200      	movs	r2, #0
 8013c14:	749a      	strb	r2, [r3, #18]
 8013c16:	2200      	movs	r2, #0
 8013c18:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013c1a:	697b      	ldr	r3, [r7, #20]
}
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3718      	adds	r7, #24
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}
 8013c24:	0801bffc 	.word	0x0801bffc
 8013c28:	0801c6d4 	.word	0x0801c6d4
 8013c2c:	0801c050 	.word	0x0801c050

08013c30 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013c30:	b5b0      	push	{r4, r5, r7, lr}
 8013c32:	b08a      	sub	sp, #40	; 0x28
 8013c34:	af04      	add	r7, sp, #16
 8013c36:	60f8      	str	r0, [r7, #12]
 8013c38:	607b      	str	r3, [r7, #4]
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	817b      	strh	r3, [r7, #10]
 8013c3e:	4613      	mov	r3, r2
 8013c40:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d106      	bne.n	8013c56 <tcp_output_alloc_header+0x26>
 8013c48:	4b15      	ldr	r3, [pc, #84]	; (8013ca0 <tcp_output_alloc_header+0x70>)
 8013c4a:	f240 7242 	movw	r2, #1858	; 0x742
 8013c4e:	4915      	ldr	r1, [pc, #84]	; (8013ca4 <tcp_output_alloc_header+0x74>)
 8013c50:	4815      	ldr	r0, [pc, #84]	; (8013ca8 <tcp_output_alloc_header+0x78>)
 8013c52:	f005 fcbb 	bl	80195cc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	8adb      	ldrh	r3, [r3, #22]
 8013c5e:	68fa      	ldr	r2, [r7, #12]
 8013c60:	8b12      	ldrh	r2, [r2, #24]
 8013c62:	68f9      	ldr	r1, [r7, #12]
 8013c64:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013c66:	893d      	ldrh	r5, [r7, #8]
 8013c68:	897c      	ldrh	r4, [r7, #10]
 8013c6a:	9103      	str	r1, [sp, #12]
 8013c6c:	2110      	movs	r1, #16
 8013c6e:	9102      	str	r1, [sp, #8]
 8013c70:	9201      	str	r2, [sp, #4]
 8013c72:	9300      	str	r3, [sp, #0]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	462a      	mov	r2, r5
 8013c78:	4621      	mov	r1, r4
 8013c7a:	f7ff ff67 	bl	8013b4c <tcp_output_alloc_header_common>
 8013c7e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d006      	beq.n	8013c94 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c8a:	68fa      	ldr	r2, [r7, #12]
 8013c8c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8013c8e:	441a      	add	r2, r3
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013c94:	697b      	ldr	r3, [r7, #20]
}
 8013c96:	4618      	mov	r0, r3
 8013c98:	3718      	adds	r7, #24
 8013c9a:	46bd      	mov	sp, r7
 8013c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8013c9e:	bf00      	nop
 8013ca0:	0801bffc 	.word	0x0801bffc
 8013ca4:	0801c704 	.word	0x0801c704
 8013ca8:	0801c050 	.word	0x0801c050

08013cac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b088      	sub	sp, #32
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	4611      	mov	r1, r2
 8013cb8:	461a      	mov	r2, r3
 8013cba:	460b      	mov	r3, r1
 8013cbc:	71fb      	strb	r3, [r7, #7]
 8013cbe:	4613      	mov	r3, r2
 8013cc0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d106      	bne.n	8013cda <tcp_output_fill_options+0x2e>
 8013ccc:	4b12      	ldr	r3, [pc, #72]	; (8013d18 <tcp_output_fill_options+0x6c>)
 8013cce:	f240 7256 	movw	r2, #1878	; 0x756
 8013cd2:	4912      	ldr	r1, [pc, #72]	; (8013d1c <tcp_output_fill_options+0x70>)
 8013cd4:	4812      	ldr	r0, [pc, #72]	; (8013d20 <tcp_output_fill_options+0x74>)
 8013cd6:	f005 fc79 	bl	80195cc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	685b      	ldr	r3, [r3, #4]
 8013cde:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8013ce0:	69bb      	ldr	r3, [r7, #24]
 8013ce2:	3314      	adds	r3, #20
 8013ce4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8013ce6:	8bfb      	ldrh	r3, [r7, #30]
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	461a      	mov	r2, r3
 8013cec:	79fb      	ldrb	r3, [r7, #7]
 8013cee:	009b      	lsls	r3, r3, #2
 8013cf0:	f003 0304 	and.w	r3, r3, #4
 8013cf4:	4413      	add	r3, r2
 8013cf6:	3314      	adds	r3, #20
 8013cf8:	69ba      	ldr	r2, [r7, #24]
 8013cfa:	4413      	add	r3, r2
 8013cfc:	697a      	ldr	r2, [r7, #20]
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d006      	beq.n	8013d10 <tcp_output_fill_options+0x64>
 8013d02:	4b05      	ldr	r3, [pc, #20]	; (8013d18 <tcp_output_fill_options+0x6c>)
 8013d04:	f240 7275 	movw	r2, #1909	; 0x775
 8013d08:	4906      	ldr	r1, [pc, #24]	; (8013d24 <tcp_output_fill_options+0x78>)
 8013d0a:	4805      	ldr	r0, [pc, #20]	; (8013d20 <tcp_output_fill_options+0x74>)
 8013d0c:	f005 fc5e 	bl	80195cc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013d10:	bf00      	nop
 8013d12:	3720      	adds	r7, #32
 8013d14:	46bd      	mov	sp, r7
 8013d16:	bd80      	pop	{r7, pc}
 8013d18:	0801bffc 	.word	0x0801bffc
 8013d1c:	0801c72c 	.word	0x0801c72c
 8013d20:	0801c050 	.word	0x0801c050
 8013d24:	0801c624 	.word	0x0801c624

08013d28 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013d28:	b580      	push	{r7, lr}
 8013d2a:	b08a      	sub	sp, #40	; 0x28
 8013d2c:	af04      	add	r7, sp, #16
 8013d2e:	60f8      	str	r0, [r7, #12]
 8013d30:	60b9      	str	r1, [r7, #8]
 8013d32:	607a      	str	r2, [r7, #4]
 8013d34:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013d36:	68bb      	ldr	r3, [r7, #8]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d106      	bne.n	8013d4a <tcp_output_control_segment+0x22>
 8013d3c:	4b1c      	ldr	r3, [pc, #112]	; (8013db0 <tcp_output_control_segment+0x88>)
 8013d3e:	f240 7287 	movw	r2, #1927	; 0x787
 8013d42:	491c      	ldr	r1, [pc, #112]	; (8013db4 <tcp_output_control_segment+0x8c>)
 8013d44:	481c      	ldr	r0, [pc, #112]	; (8013db8 <tcp_output_control_segment+0x90>)
 8013d46:	f005 fc41 	bl	80195cc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013d4a:	683a      	ldr	r2, [r7, #0]
 8013d4c:	6879      	ldr	r1, [r7, #4]
 8013d4e:	68f8      	ldr	r0, [r7, #12]
 8013d50:	f7fe fae8 	bl	8012324 <tcp_route>
 8013d54:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d102      	bne.n	8013d62 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013d5c:	23fc      	movs	r3, #252	; 0xfc
 8013d5e:	75fb      	strb	r3, [r7, #23]
 8013d60:	e01c      	b.n	8013d9c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d006      	beq.n	8013d76 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	7adb      	ldrb	r3, [r3, #11]
 8013d6c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	7a9b      	ldrb	r3, [r3, #10]
 8013d72:	757b      	strb	r3, [r7, #21]
 8013d74:	e003      	b.n	8013d7e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013d76:	23ff      	movs	r3, #255	; 0xff
 8013d78:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8013d7e:	7dba      	ldrb	r2, [r7, #22]
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	9302      	str	r3, [sp, #8]
 8013d84:	2306      	movs	r3, #6
 8013d86:	9301      	str	r3, [sp, #4]
 8013d88:	7d7b      	ldrb	r3, [r7, #21]
 8013d8a:	9300      	str	r3, [sp, #0]
 8013d8c:	4613      	mov	r3, r2
 8013d8e:	683a      	ldr	r2, [r7, #0]
 8013d90:	6879      	ldr	r1, [r7, #4]
 8013d92:	68b8      	ldr	r0, [r7, #8]
 8013d94:	f004 f958 	bl	8018048 <ip4_output_if>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8013d9c:	68b8      	ldr	r0, [r7, #8]
 8013d9e:	f7f9 fecb 	bl	800db38 <pbuf_free>
  return err;
 8013da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3718      	adds	r7, #24
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	0801bffc 	.word	0x0801bffc
 8013db4:	0801c754 	.word	0x0801c754
 8013db8:	0801c050 	.word	0x0801c050

08013dbc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8013dbc:	b590      	push	{r4, r7, lr}
 8013dbe:	b08b      	sub	sp, #44	; 0x2c
 8013dc0:	af04      	add	r7, sp, #16
 8013dc2:	60f8      	str	r0, [r7, #12]
 8013dc4:	60b9      	str	r1, [r7, #8]
 8013dc6:	607a      	str	r2, [r7, #4]
 8013dc8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8013dca:	683b      	ldr	r3, [r7, #0]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d106      	bne.n	8013dde <tcp_rst+0x22>
 8013dd0:	4b1f      	ldr	r3, [pc, #124]	; (8013e50 <tcp_rst+0x94>)
 8013dd2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8013dd6:	491f      	ldr	r1, [pc, #124]	; (8013e54 <tcp_rst+0x98>)
 8013dd8:	481f      	ldr	r0, [pc, #124]	; (8013e58 <tcp_rst+0x9c>)
 8013dda:	f005 fbf7 	bl	80195cc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8013dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d106      	bne.n	8013df2 <tcp_rst+0x36>
 8013de4:	4b1a      	ldr	r3, [pc, #104]	; (8013e50 <tcp_rst+0x94>)
 8013de6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8013dea:	491c      	ldr	r1, [pc, #112]	; (8013e5c <tcp_rst+0xa0>)
 8013dec:	481a      	ldr	r0, [pc, #104]	; (8013e58 <tcp_rst+0x9c>)
 8013dee:	f005 fbed 	bl	80195cc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013df2:	2300      	movs	r3, #0
 8013df4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013df6:	f246 0308 	movw	r3, #24584	; 0x6008
 8013dfa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013dfc:	7dfb      	ldrb	r3, [r7, #23]
 8013dfe:	b29c      	uxth	r4, r3
 8013e00:	68b8      	ldr	r0, [r7, #8]
 8013e02:	f7f8 fa7a 	bl	800c2fa <lwip_htonl>
 8013e06:	4602      	mov	r2, r0
 8013e08:	8abb      	ldrh	r3, [r7, #20]
 8013e0a:	9303      	str	r3, [sp, #12]
 8013e0c:	2314      	movs	r3, #20
 8013e0e:	9302      	str	r3, [sp, #8]
 8013e10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013e12:	9301      	str	r3, [sp, #4]
 8013e14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013e16:	9300      	str	r3, [sp, #0]
 8013e18:	4613      	mov	r3, r2
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	4621      	mov	r1, r4
 8013e1e:	6878      	ldr	r0, [r7, #4]
 8013e20:	f7ff fe94 	bl	8013b4c <tcp_output_alloc_header_common>
 8013e24:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d00c      	beq.n	8013e46 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013e2c:	7dfb      	ldrb	r3, [r7, #23]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	6939      	ldr	r1, [r7, #16]
 8013e32:	68f8      	ldr	r0, [r7, #12]
 8013e34:	f7ff ff3a 	bl	8013cac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3a:	683a      	ldr	r2, [r7, #0]
 8013e3c:	6939      	ldr	r1, [r7, #16]
 8013e3e:	68f8      	ldr	r0, [r7, #12]
 8013e40:	f7ff ff72 	bl	8013d28 <tcp_output_control_segment>
 8013e44:	e000      	b.n	8013e48 <tcp_rst+0x8c>
    return;
 8013e46:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013e48:	371c      	adds	r7, #28
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd90      	pop	{r4, r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	0801bffc 	.word	0x0801bffc
 8013e54:	0801c780 	.word	0x0801c780
 8013e58:	0801c050 	.word	0x0801c050
 8013e5c:	0801c79c 	.word	0x0801c79c

08013e60 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013e60:	b590      	push	{r4, r7, lr}
 8013e62:	b087      	sub	sp, #28
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013e68:	2300      	movs	r3, #0
 8013e6a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d106      	bne.n	8013e84 <tcp_send_empty_ack+0x24>
 8013e76:	4b28      	ldr	r3, [pc, #160]	; (8013f18 <tcp_send_empty_ack+0xb8>)
 8013e78:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013e7c:	4927      	ldr	r1, [pc, #156]	; (8013f1c <tcp_send_empty_ack+0xbc>)
 8013e7e:	4828      	ldr	r0, [pc, #160]	; (8013f20 <tcp_send_empty_ack+0xc0>)
 8013e80:	f005 fba4 	bl	80195cc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013e84:	7dfb      	ldrb	r3, [r7, #23]
 8013e86:	009b      	lsls	r3, r3, #2
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	f003 0304 	and.w	r3, r3, #4
 8013e8e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013e90:	7d7b      	ldrb	r3, [r7, #21]
 8013e92:	b29c      	uxth	r4, r3
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7f8 fa2e 	bl	800c2fa <lwip_htonl>
 8013e9e:	4603      	mov	r3, r0
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	4621      	mov	r1, r4
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7ff fec3 	bl	8013c30 <tcp_output_alloc_header>
 8013eaa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d109      	bne.n	8013ec6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	8b5b      	ldrh	r3, [r3, #26]
 8013eb6:	f043 0303 	orr.w	r3, r3, #3
 8013eba:	b29a      	uxth	r2, r3
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8013ec0:	f06f 0301 	mvn.w	r3, #1
 8013ec4:	e023      	b.n	8013f0e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8013ec6:	7dbb      	ldrb	r3, [r7, #22]
 8013ec8:	7dfa      	ldrb	r2, [r7, #23]
 8013eca:	6939      	ldr	r1, [r7, #16]
 8013ecc:	6878      	ldr	r0, [r7, #4]
 8013ece:	f7ff feed 	bl	8013cac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013ed2:	687a      	ldr	r2, [r7, #4]
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	3304      	adds	r3, #4
 8013ed8:	6939      	ldr	r1, [r7, #16]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f7ff ff24 	bl	8013d28 <tcp_output_control_segment>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8013ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d007      	beq.n	8013efc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	8b5b      	ldrh	r3, [r3, #26]
 8013ef0:	f043 0303 	orr.w	r3, r3, #3
 8013ef4:	b29a      	uxth	r2, r3
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	835a      	strh	r2, [r3, #26]
 8013efa:	e006      	b.n	8013f0a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	8b5b      	ldrh	r3, [r3, #26]
 8013f00:	f023 0303 	bic.w	r3, r3, #3
 8013f04:	b29a      	uxth	r2, r3
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f0e:	4618      	mov	r0, r3
 8013f10:	371c      	adds	r7, #28
 8013f12:	46bd      	mov	sp, r7
 8013f14:	bd90      	pop	{r4, r7, pc}
 8013f16:	bf00      	nop
 8013f18:	0801bffc 	.word	0x0801bffc
 8013f1c:	0801c7b8 	.word	0x0801c7b8
 8013f20:	0801c050 	.word	0x0801c050

08013f24 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013f24:	b590      	push	{r4, r7, lr}
 8013f26:	b087      	sub	sp, #28
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013f2c:	2300      	movs	r3, #0
 8013f2e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d106      	bne.n	8013f44 <tcp_keepalive+0x20>
 8013f36:	4b18      	ldr	r3, [pc, #96]	; (8013f98 <tcp_keepalive+0x74>)
 8013f38:	f640 0224 	movw	r2, #2084	; 0x824
 8013f3c:	4917      	ldr	r1, [pc, #92]	; (8013f9c <tcp_keepalive+0x78>)
 8013f3e:	4818      	ldr	r0, [pc, #96]	; (8013fa0 <tcp_keepalive+0x7c>)
 8013f40:	f005 fb44 	bl	80195cc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013f44:	7dfb      	ldrb	r3, [r7, #23]
 8013f46:	b29c      	uxth	r4, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f4c:	3b01      	subs	r3, #1
 8013f4e:	4618      	mov	r0, r3
 8013f50:	f7f8 f9d3 	bl	800c2fa <lwip_htonl>
 8013f54:	4603      	mov	r3, r0
 8013f56:	2200      	movs	r2, #0
 8013f58:	4621      	mov	r1, r4
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7ff fe68 	bl	8013c30 <tcp_output_alloc_header>
 8013f60:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d102      	bne.n	8013f6e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013f68:	f04f 33ff 	mov.w	r3, #4294967295
 8013f6c:	e010      	b.n	8013f90 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013f6e:	7dfb      	ldrb	r3, [r7, #23]
 8013f70:	2200      	movs	r2, #0
 8013f72:	6939      	ldr	r1, [r7, #16]
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f7ff fe99 	bl	8013cac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013f7a:	687a      	ldr	r2, [r7, #4]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	3304      	adds	r3, #4
 8013f80:	6939      	ldr	r1, [r7, #16]
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f7ff fed0 	bl	8013d28 <tcp_output_control_segment>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	371c      	adds	r7, #28
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd90      	pop	{r4, r7, pc}
 8013f98:	0801bffc 	.word	0x0801bffc
 8013f9c:	0801c7d8 	.word	0x0801c7d8
 8013fa0:	0801c050 	.word	0x0801c050

08013fa4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013fa4:	b590      	push	{r4, r7, lr}
 8013fa6:	b08b      	sub	sp, #44	; 0x2c
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013fac:	2300      	movs	r3, #0
 8013fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d106      	bne.n	8013fc6 <tcp_zero_window_probe+0x22>
 8013fb8:	4b4c      	ldr	r3, [pc, #304]	; (80140ec <tcp_zero_window_probe+0x148>)
 8013fba:	f640 024f 	movw	r2, #2127	; 0x84f
 8013fbe:	494c      	ldr	r1, [pc, #304]	; (80140f0 <tcp_zero_window_probe+0x14c>)
 8013fc0:	484c      	ldr	r0, [pc, #304]	; (80140f4 <tcp_zero_window_probe+0x150>)
 8013fc2:	f005 fb03 	bl	80195cc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8013fcc:	6a3b      	ldr	r3, [r7, #32]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d101      	bne.n	8013fd6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8013fd2:	2300      	movs	r3, #0
 8013fd4:	e086      	b.n	80140e4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013fdc:	2bff      	cmp	r3, #255	; 0xff
 8013fde:	d007      	beq.n	8013ff0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	b2da      	uxtb	r2, r3
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8013ff0:	6a3b      	ldr	r3, [r7, #32]
 8013ff2:	68db      	ldr	r3, [r3, #12]
 8013ff4:	899b      	ldrh	r3, [r3, #12]
 8013ff6:	b29b      	uxth	r3, r3
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f7f8 f969 	bl	800c2d0 <lwip_htons>
 8013ffe:	4603      	mov	r3, r0
 8014000:	b2db      	uxtb	r3, r3
 8014002:	f003 0301 	and.w	r3, r3, #1
 8014006:	2b00      	cmp	r3, #0
 8014008:	d005      	beq.n	8014016 <tcp_zero_window_probe+0x72>
 801400a:	6a3b      	ldr	r3, [r7, #32]
 801400c:	891b      	ldrh	r3, [r3, #8]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d101      	bne.n	8014016 <tcp_zero_window_probe+0x72>
 8014012:	2301      	movs	r3, #1
 8014014:	e000      	b.n	8014018 <tcp_zero_window_probe+0x74>
 8014016:	2300      	movs	r3, #0
 8014018:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801401a:	7ffb      	ldrb	r3, [r7, #31]
 801401c:	2b00      	cmp	r3, #0
 801401e:	bf0c      	ite	eq
 8014020:	2301      	moveq	r3, #1
 8014022:	2300      	movne	r3, #0
 8014024:	b2db      	uxtb	r3, r3
 8014026:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801402c:	b299      	uxth	r1, r3
 801402e:	6a3b      	ldr	r3, [r7, #32]
 8014030:	68db      	ldr	r3, [r3, #12]
 8014032:	685b      	ldr	r3, [r3, #4]
 8014034:	8bba      	ldrh	r2, [r7, #28]
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f7ff fdfa 	bl	8013c30 <tcp_output_alloc_header>
 801403c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d102      	bne.n	801404a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014044:	f04f 33ff 	mov.w	r3, #4294967295
 8014048:	e04c      	b.n	80140e4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801404a:	69bb      	ldr	r3, [r7, #24]
 801404c:	685b      	ldr	r3, [r3, #4]
 801404e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014050:	7ffb      	ldrb	r3, [r7, #31]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d011      	beq.n	801407a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	899b      	ldrh	r3, [r3, #12]
 801405a:	b29b      	uxth	r3, r3
 801405c:	b21b      	sxth	r3, r3
 801405e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014062:	b21c      	sxth	r4, r3
 8014064:	2011      	movs	r0, #17
 8014066:	f7f8 f933 	bl	800c2d0 <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	b21b      	sxth	r3, r3
 801406e:	4323      	orrs	r3, r4
 8014070:	b21b      	sxth	r3, r3
 8014072:	b29a      	uxth	r2, r3
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	819a      	strh	r2, [r3, #12]
 8014078:	e010      	b.n	801409c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801407a:	69bb      	ldr	r3, [r7, #24]
 801407c:	685b      	ldr	r3, [r3, #4]
 801407e:	3314      	adds	r3, #20
 8014080:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014082:	6a3b      	ldr	r3, [r7, #32]
 8014084:	6858      	ldr	r0, [r3, #4]
 8014086:	6a3b      	ldr	r3, [r7, #32]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	891a      	ldrh	r2, [r3, #8]
 801408c:	6a3b      	ldr	r3, [r7, #32]
 801408e:	891b      	ldrh	r3, [r3, #8]
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	b29b      	uxth	r3, r3
 8014094:	2201      	movs	r2, #1
 8014096:	6939      	ldr	r1, [r7, #16]
 8014098:	f7f9 ff54 	bl	800df44 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801409c:	6a3b      	ldr	r3, [r7, #32]
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	685b      	ldr	r3, [r3, #4]
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7f8 f929 	bl	800c2fa <lwip_htonl>
 80140a8:	4603      	mov	r3, r0
 80140aa:	3301      	adds	r3, #1
 80140ac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	1ad3      	subs	r3, r2, r3
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	da02      	bge.n	80140c0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	68fa      	ldr	r2, [r7, #12]
 80140be:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80140c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140c4:	2200      	movs	r2, #0
 80140c6:	69b9      	ldr	r1, [r7, #24]
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7ff fdef 	bl	8013cac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80140ce:	687a      	ldr	r2, [r7, #4]
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	3304      	adds	r3, #4
 80140d4:	69b9      	ldr	r1, [r7, #24]
 80140d6:	6878      	ldr	r0, [r7, #4]
 80140d8:	f7ff fe26 	bl	8013d28 <tcp_output_control_segment>
 80140dc:	4603      	mov	r3, r0
 80140de:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80140e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	372c      	adds	r7, #44	; 0x2c
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd90      	pop	{r4, r7, pc}
 80140ec:	0801bffc 	.word	0x0801bffc
 80140f0:	0801c7f4 	.word	0x0801c7f4
 80140f4:	0801c050 	.word	0x0801c050

080140f8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014100:	f7fa f80e 	bl	800e120 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014104:	4b0a      	ldr	r3, [pc, #40]	; (8014130 <tcpip_tcp_timer+0x38>)
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d103      	bne.n	8014114 <tcpip_tcp_timer+0x1c>
 801410c:	4b09      	ldr	r3, [pc, #36]	; (8014134 <tcpip_tcp_timer+0x3c>)
 801410e:	681b      	ldr	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d005      	beq.n	8014120 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014114:	2200      	movs	r2, #0
 8014116:	4908      	ldr	r1, [pc, #32]	; (8014138 <tcpip_tcp_timer+0x40>)
 8014118:	20fa      	movs	r0, #250	; 0xfa
 801411a:	f000 f8f3 	bl	8014304 <sys_timeout>
 801411e:	e003      	b.n	8014128 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014120:	4b06      	ldr	r3, [pc, #24]	; (801413c <tcpip_tcp_timer+0x44>)
 8014122:	2200      	movs	r2, #0
 8014124:	601a      	str	r2, [r3, #0]
  }
}
 8014126:	bf00      	nop
 8014128:	bf00      	nop
 801412a:	3708      	adds	r7, #8
 801412c:	46bd      	mov	sp, r7
 801412e:	bd80      	pop	{r7, pc}
 8014130:	2000cf30 	.word	0x2000cf30
 8014134:	2000cf34 	.word	0x2000cf34
 8014138:	080140f9 	.word	0x080140f9
 801413c:	2000cf7c 	.word	0x2000cf7c

08014140 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014144:	4b0a      	ldr	r3, [pc, #40]	; (8014170 <tcp_timer_needed+0x30>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d10f      	bne.n	801416c <tcp_timer_needed+0x2c>
 801414c:	4b09      	ldr	r3, [pc, #36]	; (8014174 <tcp_timer_needed+0x34>)
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d103      	bne.n	801415c <tcp_timer_needed+0x1c>
 8014154:	4b08      	ldr	r3, [pc, #32]	; (8014178 <tcp_timer_needed+0x38>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d007      	beq.n	801416c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801415c:	4b04      	ldr	r3, [pc, #16]	; (8014170 <tcp_timer_needed+0x30>)
 801415e:	2201      	movs	r2, #1
 8014160:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014162:	2200      	movs	r2, #0
 8014164:	4905      	ldr	r1, [pc, #20]	; (801417c <tcp_timer_needed+0x3c>)
 8014166:	20fa      	movs	r0, #250	; 0xfa
 8014168:	f000 f8cc 	bl	8014304 <sys_timeout>
  }
}
 801416c:	bf00      	nop
 801416e:	bd80      	pop	{r7, pc}
 8014170:	2000cf7c 	.word	0x2000cf7c
 8014174:	2000cf30 	.word	0x2000cf30
 8014178:	2000cf34 	.word	0x2000cf34
 801417c:	080140f9 	.word	0x080140f9

08014180 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b086      	sub	sp, #24
 8014184:	af00      	add	r7, sp, #0
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801418c:	200a      	movs	r0, #10
 801418e:	f7f8 fdad 	bl	800ccec <memp_malloc>
 8014192:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014194:	693b      	ldr	r3, [r7, #16]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d109      	bne.n	80141ae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801419a:	693b      	ldr	r3, [r7, #16]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d151      	bne.n	8014244 <sys_timeout_abs+0xc4>
 80141a0:	4b2a      	ldr	r3, [pc, #168]	; (801424c <sys_timeout_abs+0xcc>)
 80141a2:	22be      	movs	r2, #190	; 0xbe
 80141a4:	492a      	ldr	r1, [pc, #168]	; (8014250 <sys_timeout_abs+0xd0>)
 80141a6:	482b      	ldr	r0, [pc, #172]	; (8014254 <sys_timeout_abs+0xd4>)
 80141a8:	f005 fa10 	bl	80195cc <iprintf>
    return;
 80141ac:	e04a      	b.n	8014244 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80141ae:	693b      	ldr	r3, [r7, #16]
 80141b0:	2200      	movs	r2, #0
 80141b2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80141b4:	693b      	ldr	r3, [r7, #16]
 80141b6:	68ba      	ldr	r2, [r7, #8]
 80141b8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80141ba:	693b      	ldr	r3, [r7, #16]
 80141bc:	687a      	ldr	r2, [r7, #4]
 80141be:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80141c0:	693b      	ldr	r3, [r7, #16]
 80141c2:	68fa      	ldr	r2, [r7, #12]
 80141c4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80141c6:	4b24      	ldr	r3, [pc, #144]	; (8014258 <sys_timeout_abs+0xd8>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	d103      	bne.n	80141d6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80141ce:	4a22      	ldr	r2, [pc, #136]	; (8014258 <sys_timeout_abs+0xd8>)
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	6013      	str	r3, [r2, #0]
    return;
 80141d4:	e037      	b.n	8014246 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80141d6:	693b      	ldr	r3, [r7, #16]
 80141d8:	685a      	ldr	r2, [r3, #4]
 80141da:	4b1f      	ldr	r3, [pc, #124]	; (8014258 <sys_timeout_abs+0xd8>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	1ad3      	subs	r3, r2, r3
 80141e2:	0fdb      	lsrs	r3, r3, #31
 80141e4:	f003 0301 	and.w	r3, r3, #1
 80141e8:	b2db      	uxtb	r3, r3
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d007      	beq.n	80141fe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80141ee:	4b1a      	ldr	r3, [pc, #104]	; (8014258 <sys_timeout_abs+0xd8>)
 80141f0:	681a      	ldr	r2, [r3, #0]
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80141f6:	4a18      	ldr	r2, [pc, #96]	; (8014258 <sys_timeout_abs+0xd8>)
 80141f8:	693b      	ldr	r3, [r7, #16]
 80141fa:	6013      	str	r3, [r2, #0]
 80141fc:	e023      	b.n	8014246 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80141fe:	4b16      	ldr	r3, [pc, #88]	; (8014258 <sys_timeout_abs+0xd8>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	617b      	str	r3, [r7, #20]
 8014204:	e01a      	b.n	801423c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014206:	697b      	ldr	r3, [r7, #20]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d00b      	beq.n	8014226 <sys_timeout_abs+0xa6>
 801420e:	693b      	ldr	r3, [r7, #16]
 8014210:	685a      	ldr	r2, [r3, #4]
 8014212:	697b      	ldr	r3, [r7, #20]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	685b      	ldr	r3, [r3, #4]
 8014218:	1ad3      	subs	r3, r2, r3
 801421a:	0fdb      	lsrs	r3, r3, #31
 801421c:	f003 0301 	and.w	r3, r3, #1
 8014220:	b2db      	uxtb	r3, r3
 8014222:	2b00      	cmp	r3, #0
 8014224:	d007      	beq.n	8014236 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	681a      	ldr	r2, [r3, #0]
 801422a:	693b      	ldr	r3, [r7, #16]
 801422c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801422e:	697b      	ldr	r3, [r7, #20]
 8014230:	693a      	ldr	r2, [r7, #16]
 8014232:	601a      	str	r2, [r3, #0]
        break;
 8014234:	e007      	b.n	8014246 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	617b      	str	r3, [r7, #20]
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d1e1      	bne.n	8014206 <sys_timeout_abs+0x86>
 8014242:	e000      	b.n	8014246 <sys_timeout_abs+0xc6>
    return;
 8014244:	bf00      	nop
      }
    }
  }
}
 8014246:	3718      	adds	r7, #24
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}
 801424c:	0801c818 	.word	0x0801c818
 8014250:	0801c84c 	.word	0x0801c84c
 8014254:	0801c88c 	.word	0x0801c88c
 8014258:	2000cf74 	.word	0x2000cf74

0801425c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801425c:	b580      	push	{r7, lr}
 801425e:	b086      	sub	sp, #24
 8014260:	af00      	add	r7, sp, #0
 8014262:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	685b      	ldr	r3, [r3, #4]
 801426c:	4798      	blx	r3

  now = sys_now();
 801426e:	f7f3 fa41 	bl	80076f4 <sys_now>
 8014272:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	4b0f      	ldr	r3, [pc, #60]	; (80142b8 <lwip_cyclic_timer+0x5c>)
 801427a:	681b      	ldr	r3, [r3, #0]
 801427c:	4413      	add	r3, r2
 801427e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014280:	68fa      	ldr	r2, [r7, #12]
 8014282:	693b      	ldr	r3, [r7, #16]
 8014284:	1ad3      	subs	r3, r2, r3
 8014286:	0fdb      	lsrs	r3, r3, #31
 8014288:	f003 0301 	and.w	r3, r3, #1
 801428c:	b2db      	uxtb	r3, r3
 801428e:	2b00      	cmp	r3, #0
 8014290:	d009      	beq.n	80142a6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	681a      	ldr	r2, [r3, #0]
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	4413      	add	r3, r2
 801429a:	687a      	ldr	r2, [r7, #4]
 801429c:	4907      	ldr	r1, [pc, #28]	; (80142bc <lwip_cyclic_timer+0x60>)
 801429e:	4618      	mov	r0, r3
 80142a0:	f7ff ff6e 	bl	8014180 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80142a4:	e004      	b.n	80142b0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	4904      	ldr	r1, [pc, #16]	; (80142bc <lwip_cyclic_timer+0x60>)
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	f7ff ff68 	bl	8014180 <sys_timeout_abs>
}
 80142b0:	bf00      	nop
 80142b2:	3718      	adds	r7, #24
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	2000cf78 	.word	0x2000cf78
 80142bc:	0801425d 	.word	0x0801425d

080142c0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b082      	sub	sp, #8
 80142c4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80142c6:	2301      	movs	r3, #1
 80142c8:	607b      	str	r3, [r7, #4]
 80142ca:	e00e      	b.n	80142ea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80142cc:	4a0b      	ldr	r2, [pc, #44]	; (80142fc <sys_timeouts_init+0x3c>)
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	00db      	lsls	r3, r3, #3
 80142d8:	4a08      	ldr	r2, [pc, #32]	; (80142fc <sys_timeouts_init+0x3c>)
 80142da:	4413      	add	r3, r2
 80142dc:	461a      	mov	r2, r3
 80142de:	4908      	ldr	r1, [pc, #32]	; (8014300 <sys_timeouts_init+0x40>)
 80142e0:	f000 f810 	bl	8014304 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	3301      	adds	r3, #1
 80142e8:	607b      	str	r3, [r7, #4]
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	2b04      	cmp	r3, #4
 80142ee:	d9ed      	bls.n	80142cc <sys_timeouts_init+0xc>
  }
}
 80142f0:	bf00      	nop
 80142f2:	bf00      	nop
 80142f4:	3708      	adds	r7, #8
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	0801fb88 	.word	0x0801fb88
 8014300:	0801425d 	.word	0x0801425d

08014304 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b086      	sub	sp, #24
 8014308:	af00      	add	r7, sp, #0
 801430a:	60f8      	str	r0, [r7, #12]
 801430c:	60b9      	str	r1, [r7, #8]
 801430e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014316:	d306      	bcc.n	8014326 <sys_timeout+0x22>
 8014318:	4b0a      	ldr	r3, [pc, #40]	; (8014344 <sys_timeout+0x40>)
 801431a:	f240 1229 	movw	r2, #297	; 0x129
 801431e:	490a      	ldr	r1, [pc, #40]	; (8014348 <sys_timeout+0x44>)
 8014320:	480a      	ldr	r0, [pc, #40]	; (801434c <sys_timeout+0x48>)
 8014322:	f005 f953 	bl	80195cc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014326:	f7f3 f9e5 	bl	80076f4 <sys_now>
 801432a:	4602      	mov	r2, r0
 801432c:	68fb      	ldr	r3, [r7, #12]
 801432e:	4413      	add	r3, r2
 8014330:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014332:	687a      	ldr	r2, [r7, #4]
 8014334:	68b9      	ldr	r1, [r7, #8]
 8014336:	6978      	ldr	r0, [r7, #20]
 8014338:	f7ff ff22 	bl	8014180 <sys_timeout_abs>
#endif
}
 801433c:	bf00      	nop
 801433e:	3718      	adds	r7, #24
 8014340:	46bd      	mov	sp, r7
 8014342:	bd80      	pop	{r7, pc}
 8014344:	0801c818 	.word	0x0801c818
 8014348:	0801c8b4 	.word	0x0801c8b4
 801434c:	0801c88c 	.word	0x0801c88c

08014350 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014350:	b580      	push	{r7, lr}
 8014352:	b084      	sub	sp, #16
 8014354:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014356:	f7f3 f9cd 	bl	80076f4 <sys_now>
 801435a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801435c:	4b17      	ldr	r3, [pc, #92]	; (80143bc <sys_check_timeouts+0x6c>)
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d022      	beq.n	80143ae <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014368:	68bb      	ldr	r3, [r7, #8]
 801436a:	685b      	ldr	r3, [r3, #4]
 801436c:	68fa      	ldr	r2, [r7, #12]
 801436e:	1ad3      	subs	r3, r2, r3
 8014370:	0fdb      	lsrs	r3, r3, #31
 8014372:	f003 0301 	and.w	r3, r3, #1
 8014376:	b2db      	uxtb	r3, r3
 8014378:	2b00      	cmp	r3, #0
 801437a:	d11a      	bne.n	80143b2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801437c:	68bb      	ldr	r3, [r7, #8]
 801437e:	681b      	ldr	r3, [r3, #0]
 8014380:	4a0e      	ldr	r2, [pc, #56]	; (80143bc <sys_check_timeouts+0x6c>)
 8014382:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	689b      	ldr	r3, [r3, #8]
 8014388:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	68db      	ldr	r3, [r3, #12]
 801438e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	685b      	ldr	r3, [r3, #4]
 8014394:	4a0a      	ldr	r2, [pc, #40]	; (80143c0 <sys_check_timeouts+0x70>)
 8014396:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014398:	68b9      	ldr	r1, [r7, #8]
 801439a:	200a      	movs	r0, #10
 801439c:	f7f8 fd1c 	bl	800cdd8 <memp_free>
    if (handler != NULL) {
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d0da      	beq.n	801435c <sys_check_timeouts+0xc>
      handler(arg);
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6838      	ldr	r0, [r7, #0]
 80143aa:	4798      	blx	r3
  do {
 80143ac:	e7d6      	b.n	801435c <sys_check_timeouts+0xc>
      return;
 80143ae:	bf00      	nop
 80143b0:	e000      	b.n	80143b4 <sys_check_timeouts+0x64>
      return;
 80143b2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80143b4:	3710      	adds	r7, #16
 80143b6:	46bd      	mov	sp, r7
 80143b8:	bd80      	pop	{r7, pc}
 80143ba:	bf00      	nop
 80143bc:	2000cf74 	.word	0x2000cf74
 80143c0:	2000cf78 	.word	0x2000cf78

080143c4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80143c4:	b580      	push	{r7, lr}
 80143c6:	b082      	sub	sp, #8
 80143c8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80143ca:	4b16      	ldr	r3, [pc, #88]	; (8014424 <sys_timeouts_sleeptime+0x60>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d102      	bne.n	80143d8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80143d2:	f04f 33ff 	mov.w	r3, #4294967295
 80143d6:	e020      	b.n	801441a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80143d8:	f7f3 f98c 	bl	80076f4 <sys_now>
 80143dc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80143de:	4b11      	ldr	r3, [pc, #68]	; (8014424 <sys_timeouts_sleeptime+0x60>)
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	685a      	ldr	r2, [r3, #4]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	1ad3      	subs	r3, r2, r3
 80143e8:	0fdb      	lsrs	r3, r3, #31
 80143ea:	f003 0301 	and.w	r3, r3, #1
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	d001      	beq.n	80143f8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80143f4:	2300      	movs	r3, #0
 80143f6:	e010      	b.n	801441a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80143f8:	4b0a      	ldr	r3, [pc, #40]	; (8014424 <sys_timeouts_sleeptime+0x60>)
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	685a      	ldr	r2, [r3, #4]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	1ad3      	subs	r3, r2, r3
 8014402:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	da06      	bge.n	8014418 <sys_timeouts_sleeptime+0x54>
 801440a:	4b07      	ldr	r3, [pc, #28]	; (8014428 <sys_timeouts_sleeptime+0x64>)
 801440c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014410:	4906      	ldr	r1, [pc, #24]	; (801442c <sys_timeouts_sleeptime+0x68>)
 8014412:	4807      	ldr	r0, [pc, #28]	; (8014430 <sys_timeouts_sleeptime+0x6c>)
 8014414:	f005 f8da 	bl	80195cc <iprintf>
    return ret;
 8014418:	683b      	ldr	r3, [r7, #0]
  }
}
 801441a:	4618      	mov	r0, r3
 801441c:	3708      	adds	r7, #8
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	2000cf74 	.word	0x2000cf74
 8014428:	0801c818 	.word	0x0801c818
 801442c:	0801c8ec 	.word	0x0801c8ec
 8014430:	0801c88c 	.word	0x0801c88c

08014434 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014434:	b580      	push	{r7, lr}
 8014436:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014438:	f004 ff4e 	bl	80192d8 <rand>
 801443c:	4603      	mov	r3, r0
 801443e:	b29b      	uxth	r3, r3
 8014440:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014444:	b29b      	uxth	r3, r3
 8014446:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801444a:	b29a      	uxth	r2, r3
 801444c:	4b01      	ldr	r3, [pc, #4]	; (8014454 <udp_init+0x20>)
 801444e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014450:	bf00      	nop
 8014452:	bd80      	pop	{r7, pc}
 8014454:	20000044 	.word	0x20000044

08014458 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014458:	b480      	push	{r7}
 801445a:	b083      	sub	sp, #12
 801445c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801445e:	2300      	movs	r3, #0
 8014460:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014462:	4b17      	ldr	r3, [pc, #92]	; (80144c0 <udp_new_port+0x68>)
 8014464:	881b      	ldrh	r3, [r3, #0]
 8014466:	1c5a      	adds	r2, r3, #1
 8014468:	b291      	uxth	r1, r2
 801446a:	4a15      	ldr	r2, [pc, #84]	; (80144c0 <udp_new_port+0x68>)
 801446c:	8011      	strh	r1, [r2, #0]
 801446e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014472:	4293      	cmp	r3, r2
 8014474:	d103      	bne.n	801447e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014476:	4b12      	ldr	r3, [pc, #72]	; (80144c0 <udp_new_port+0x68>)
 8014478:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801447c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801447e:	4b11      	ldr	r3, [pc, #68]	; (80144c4 <udp_new_port+0x6c>)
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	603b      	str	r3, [r7, #0]
 8014484:	e011      	b.n	80144aa <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	8a5a      	ldrh	r2, [r3, #18]
 801448a:	4b0d      	ldr	r3, [pc, #52]	; (80144c0 <udp_new_port+0x68>)
 801448c:	881b      	ldrh	r3, [r3, #0]
 801448e:	429a      	cmp	r2, r3
 8014490:	d108      	bne.n	80144a4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014492:	88fb      	ldrh	r3, [r7, #6]
 8014494:	3301      	adds	r3, #1
 8014496:	80fb      	strh	r3, [r7, #6]
 8014498:	88fb      	ldrh	r3, [r7, #6]
 801449a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801449e:	d3e0      	bcc.n	8014462 <udp_new_port+0xa>
        return 0;
 80144a0:	2300      	movs	r3, #0
 80144a2:	e007      	b.n	80144b4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80144a4:	683b      	ldr	r3, [r7, #0]
 80144a6:	68db      	ldr	r3, [r3, #12]
 80144a8:	603b      	str	r3, [r7, #0]
 80144aa:	683b      	ldr	r3, [r7, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d1ea      	bne.n	8014486 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80144b0:	4b03      	ldr	r3, [pc, #12]	; (80144c0 <udp_new_port+0x68>)
 80144b2:	881b      	ldrh	r3, [r3, #0]
}
 80144b4:	4618      	mov	r0, r3
 80144b6:	370c      	adds	r7, #12
 80144b8:	46bd      	mov	sp, r7
 80144ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144be:	4770      	bx	lr
 80144c0:	20000044 	.word	0x20000044
 80144c4:	2000cf80 	.word	0x2000cf80

080144c8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	60f8      	str	r0, [r7, #12]
 80144d0:	60b9      	str	r1, [r7, #8]
 80144d2:	4613      	mov	r3, r2
 80144d4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d105      	bne.n	80144e8 <udp_input_local_match+0x20>
 80144dc:	4b27      	ldr	r3, [pc, #156]	; (801457c <udp_input_local_match+0xb4>)
 80144de:	2287      	movs	r2, #135	; 0x87
 80144e0:	4927      	ldr	r1, [pc, #156]	; (8014580 <udp_input_local_match+0xb8>)
 80144e2:	4828      	ldr	r0, [pc, #160]	; (8014584 <udp_input_local_match+0xbc>)
 80144e4:	f005 f872 	bl	80195cc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d105      	bne.n	80144fa <udp_input_local_match+0x32>
 80144ee:	4b23      	ldr	r3, [pc, #140]	; (801457c <udp_input_local_match+0xb4>)
 80144f0:	2288      	movs	r2, #136	; 0x88
 80144f2:	4925      	ldr	r1, [pc, #148]	; (8014588 <udp_input_local_match+0xc0>)
 80144f4:	4823      	ldr	r0, [pc, #140]	; (8014584 <udp_input_local_match+0xbc>)
 80144f6:	f005 f869 	bl	80195cc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	7a1b      	ldrb	r3, [r3, #8]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00b      	beq.n	801451a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	7a1a      	ldrb	r2, [r3, #8]
 8014506:	4b21      	ldr	r3, [pc, #132]	; (801458c <udp_input_local_match+0xc4>)
 8014508:	685b      	ldr	r3, [r3, #4]
 801450a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801450e:	3301      	adds	r3, #1
 8014510:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014512:	429a      	cmp	r2, r3
 8014514:	d001      	beq.n	801451a <udp_input_local_match+0x52>
    return 0;
 8014516:	2300      	movs	r3, #0
 8014518:	e02b      	b.n	8014572 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801451a:	79fb      	ldrb	r3, [r7, #7]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d018      	beq.n	8014552 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014520:	68fb      	ldr	r3, [r7, #12]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d013      	beq.n	801454e <udp_input_local_match+0x86>
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d00f      	beq.n	801454e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801452e:	4b17      	ldr	r3, [pc, #92]	; (801458c <udp_input_local_match+0xc4>)
 8014530:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014536:	d00a      	beq.n	801454e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	4b13      	ldr	r3, [pc, #76]	; (801458c <udp_input_local_match+0xc4>)
 801453e:	695b      	ldr	r3, [r3, #20]
 8014540:	405a      	eors	r2, r3
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	3308      	adds	r3, #8
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801454a:	2b00      	cmp	r3, #0
 801454c:	d110      	bne.n	8014570 <udp_input_local_match+0xa8>
          return 1;
 801454e:	2301      	movs	r3, #1
 8014550:	e00f      	b.n	8014572 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	2b00      	cmp	r3, #0
 8014556:	d009      	beq.n	801456c <udp_input_local_match+0xa4>
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d005      	beq.n	801456c <udp_input_local_match+0xa4>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	681a      	ldr	r2, [r3, #0]
 8014564:	4b09      	ldr	r3, [pc, #36]	; (801458c <udp_input_local_match+0xc4>)
 8014566:	695b      	ldr	r3, [r3, #20]
 8014568:	429a      	cmp	r2, r3
 801456a:	d101      	bne.n	8014570 <udp_input_local_match+0xa8>
        return 1;
 801456c:	2301      	movs	r3, #1
 801456e:	e000      	b.n	8014572 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8014570:	2300      	movs	r3, #0
}
 8014572:	4618      	mov	r0, r3
 8014574:	3710      	adds	r7, #16
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}
 801457a:	bf00      	nop
 801457c:	0801c900 	.word	0x0801c900
 8014580:	0801c930 	.word	0x0801c930
 8014584:	0801c954 	.word	0x0801c954
 8014588:	0801c97c 	.word	0x0801c97c
 801458c:	200097b0 	.word	0x200097b0

08014590 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014590:	b590      	push	{r4, r7, lr}
 8014592:	b08d      	sub	sp, #52	; 0x34
 8014594:	af02      	add	r7, sp, #8
 8014596:	6078      	str	r0, [r7, #4]
 8014598:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801459a:	2300      	movs	r3, #0
 801459c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	2b00      	cmp	r3, #0
 80145a2:	d105      	bne.n	80145b0 <udp_input+0x20>
 80145a4:	4b7c      	ldr	r3, [pc, #496]	; (8014798 <udp_input+0x208>)
 80145a6:	22cf      	movs	r2, #207	; 0xcf
 80145a8:	497c      	ldr	r1, [pc, #496]	; (801479c <udp_input+0x20c>)
 80145aa:	487d      	ldr	r0, [pc, #500]	; (80147a0 <udp_input+0x210>)
 80145ac:	f005 f80e 	bl	80195cc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80145b0:	683b      	ldr	r3, [r7, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d105      	bne.n	80145c2 <udp_input+0x32>
 80145b6:	4b78      	ldr	r3, [pc, #480]	; (8014798 <udp_input+0x208>)
 80145b8:	22d0      	movs	r2, #208	; 0xd0
 80145ba:	497a      	ldr	r1, [pc, #488]	; (80147a4 <udp_input+0x214>)
 80145bc:	4878      	ldr	r0, [pc, #480]	; (80147a0 <udp_input+0x210>)
 80145be:	f005 f805 	bl	80195cc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	895b      	ldrh	r3, [r3, #10]
 80145c6:	2b07      	cmp	r3, #7
 80145c8:	d803      	bhi.n	80145d2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80145ca:	6878      	ldr	r0, [r7, #4]
 80145cc:	f7f9 fab4 	bl	800db38 <pbuf_free>
    goto end;
 80145d0:	e0de      	b.n	8014790 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	685b      	ldr	r3, [r3, #4]
 80145d6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80145d8:	4b73      	ldr	r3, [pc, #460]	; (80147a8 <udp_input+0x218>)
 80145da:	695b      	ldr	r3, [r3, #20]
 80145dc:	4a72      	ldr	r2, [pc, #456]	; (80147a8 <udp_input+0x218>)
 80145de:	6812      	ldr	r2, [r2, #0]
 80145e0:	4611      	mov	r1, r2
 80145e2:	4618      	mov	r0, r3
 80145e4:	f003 fe08 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 80145e8:	4603      	mov	r3, r0
 80145ea:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80145ec:	697b      	ldr	r3, [r7, #20]
 80145ee:	881b      	ldrh	r3, [r3, #0]
 80145f0:	b29b      	uxth	r3, r3
 80145f2:	4618      	mov	r0, r3
 80145f4:	f7f7 fe6c 	bl	800c2d0 <lwip_htons>
 80145f8:	4603      	mov	r3, r0
 80145fa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	885b      	ldrh	r3, [r3, #2]
 8014600:	b29b      	uxth	r3, r3
 8014602:	4618      	mov	r0, r3
 8014604:	f7f7 fe64 	bl	800c2d0 <lwip_htons>
 8014608:	4603      	mov	r3, r0
 801460a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801460c:	2300      	movs	r3, #0
 801460e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014610:	2300      	movs	r3, #0
 8014612:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014614:	2300      	movs	r3, #0
 8014616:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014618:	4b64      	ldr	r3, [pc, #400]	; (80147ac <udp_input+0x21c>)
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	627b      	str	r3, [r7, #36]	; 0x24
 801461e:	e054      	b.n	80146ca <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014622:	8a5b      	ldrh	r3, [r3, #18]
 8014624:	89fa      	ldrh	r2, [r7, #14]
 8014626:	429a      	cmp	r2, r3
 8014628:	d14a      	bne.n	80146c0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801462a:	7cfb      	ldrb	r3, [r7, #19]
 801462c:	461a      	mov	r2, r3
 801462e:	6839      	ldr	r1, [r7, #0]
 8014630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014632:	f7ff ff49 	bl	80144c8 <udp_input_local_match>
 8014636:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014638:	2b00      	cmp	r3, #0
 801463a:	d041      	beq.n	80146c0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463e:	7c1b      	ldrb	r3, [r3, #16]
 8014640:	f003 0304 	and.w	r3, r3, #4
 8014644:	2b00      	cmp	r3, #0
 8014646:	d11d      	bne.n	8014684 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014648:	69fb      	ldr	r3, [r7, #28]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d102      	bne.n	8014654 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014650:	61fb      	str	r3, [r7, #28]
 8014652:	e017      	b.n	8014684 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014654:	7cfb      	ldrb	r3, [r7, #19]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d014      	beq.n	8014684 <udp_input+0xf4>
 801465a:	4b53      	ldr	r3, [pc, #332]	; (80147a8 <udp_input+0x218>)
 801465c:	695b      	ldr	r3, [r3, #20]
 801465e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014662:	d10f      	bne.n	8014684 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	681a      	ldr	r2, [r3, #0]
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	3304      	adds	r3, #4
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	429a      	cmp	r2, r3
 8014670:	d008      	beq.n	8014684 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014674:	681a      	ldr	r2, [r3, #0]
 8014676:	683b      	ldr	r3, [r7, #0]
 8014678:	3304      	adds	r3, #4
 801467a:	681b      	ldr	r3, [r3, #0]
 801467c:	429a      	cmp	r2, r3
 801467e:	d101      	bne.n	8014684 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014682:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014686:	8a9b      	ldrh	r3, [r3, #20]
 8014688:	8a3a      	ldrh	r2, [r7, #16]
 801468a:	429a      	cmp	r2, r3
 801468c:	d118      	bne.n	80146c0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014690:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014692:	2b00      	cmp	r3, #0
 8014694:	d005      	beq.n	80146a2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014698:	685a      	ldr	r2, [r3, #4]
 801469a:	4b43      	ldr	r3, [pc, #268]	; (80147a8 <udp_input+0x218>)
 801469c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801469e:	429a      	cmp	r2, r3
 80146a0:	d10e      	bne.n	80146c0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80146a2:	6a3b      	ldr	r3, [r7, #32]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d014      	beq.n	80146d2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80146a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146aa:	68da      	ldr	r2, [r3, #12]
 80146ac:	6a3b      	ldr	r3, [r7, #32]
 80146ae:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80146b0:	4b3e      	ldr	r3, [pc, #248]	; (80147ac <udp_input+0x21c>)
 80146b2:	681a      	ldr	r2, [r3, #0]
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80146b8:	4a3c      	ldr	r2, [pc, #240]	; (80147ac <udp_input+0x21c>)
 80146ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146bc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80146be:	e008      	b.n	80146d2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80146c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80146c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	627b      	str	r3, [r7, #36]	; 0x24
 80146ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d1a7      	bne.n	8014620 <udp_input+0x90>
 80146d0:	e000      	b.n	80146d4 <udp_input+0x144>
        break;
 80146d2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80146d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d101      	bne.n	80146de <udp_input+0x14e>
    pcb = uncon_pcb;
 80146da:	69fb      	ldr	r3, [r7, #28]
 80146dc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d002      	beq.n	80146ea <udp_input+0x15a>
    for_us = 1;
 80146e4:	2301      	movs	r3, #1
 80146e6:	76fb      	strb	r3, [r7, #27]
 80146e8:	e00a      	b.n	8014700 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	3304      	adds	r3, #4
 80146ee:	681a      	ldr	r2, [r3, #0]
 80146f0:	4b2d      	ldr	r3, [pc, #180]	; (80147a8 <udp_input+0x218>)
 80146f2:	695b      	ldr	r3, [r3, #20]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	bf0c      	ite	eq
 80146f8:	2301      	moveq	r3, #1
 80146fa:	2300      	movne	r3, #0
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014700:	7efb      	ldrb	r3, [r7, #27]
 8014702:	2b00      	cmp	r3, #0
 8014704:	d041      	beq.n	801478a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014706:	2108      	movs	r1, #8
 8014708:	6878      	ldr	r0, [r7, #4]
 801470a:	f7f9 f98f 	bl	800da2c <pbuf_remove_header>
 801470e:	4603      	mov	r3, r0
 8014710:	2b00      	cmp	r3, #0
 8014712:	d00a      	beq.n	801472a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014714:	4b20      	ldr	r3, [pc, #128]	; (8014798 <udp_input+0x208>)
 8014716:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801471a:	4925      	ldr	r1, [pc, #148]	; (80147b0 <udp_input+0x220>)
 801471c:	4820      	ldr	r0, [pc, #128]	; (80147a0 <udp_input+0x210>)
 801471e:	f004 ff55 	bl	80195cc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014722:	6878      	ldr	r0, [r7, #4]
 8014724:	f7f9 fa08 	bl	800db38 <pbuf_free>
      goto end;
 8014728:	e032      	b.n	8014790 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801472c:	2b00      	cmp	r3, #0
 801472e:	d012      	beq.n	8014756 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014732:	699b      	ldr	r3, [r3, #24]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d00a      	beq.n	801474e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473a:	699c      	ldr	r4, [r3, #24]
 801473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801473e:	69d8      	ldr	r0, [r3, #28]
 8014740:	8a3b      	ldrh	r3, [r7, #16]
 8014742:	9300      	str	r3, [sp, #0]
 8014744:	4b1b      	ldr	r3, [pc, #108]	; (80147b4 <udp_input+0x224>)
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801474a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801474c:	e021      	b.n	8014792 <udp_input+0x202>
        pbuf_free(p);
 801474e:	6878      	ldr	r0, [r7, #4]
 8014750:	f7f9 f9f2 	bl	800db38 <pbuf_free>
        goto end;
 8014754:	e01c      	b.n	8014790 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014756:	7cfb      	ldrb	r3, [r7, #19]
 8014758:	2b00      	cmp	r3, #0
 801475a:	d112      	bne.n	8014782 <udp_input+0x1f2>
 801475c:	4b12      	ldr	r3, [pc, #72]	; (80147a8 <udp_input+0x218>)
 801475e:	695b      	ldr	r3, [r3, #20]
 8014760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014764:	2be0      	cmp	r3, #224	; 0xe0
 8014766:	d00c      	beq.n	8014782 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014768:	4b0f      	ldr	r3, [pc, #60]	; (80147a8 <udp_input+0x218>)
 801476a:	899b      	ldrh	r3, [r3, #12]
 801476c:	3308      	adds	r3, #8
 801476e:	b29b      	uxth	r3, r3
 8014770:	b21b      	sxth	r3, r3
 8014772:	4619      	mov	r1, r3
 8014774:	6878      	ldr	r0, [r7, #4]
 8014776:	f7f9 f9cc 	bl	800db12 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801477a:	2103      	movs	r1, #3
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	f003 f9fd 	bl	8017b7c <icmp_dest_unreach>
      pbuf_free(p);
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f7f9 f9d8 	bl	800db38 <pbuf_free>
  return;
 8014788:	e003      	b.n	8014792 <udp_input+0x202>
    pbuf_free(p);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f7f9 f9d4 	bl	800db38 <pbuf_free>
  return;
 8014790:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014792:	372c      	adds	r7, #44	; 0x2c
 8014794:	46bd      	mov	sp, r7
 8014796:	bd90      	pop	{r4, r7, pc}
 8014798:	0801c900 	.word	0x0801c900
 801479c:	0801c9a4 	.word	0x0801c9a4
 80147a0:	0801c954 	.word	0x0801c954
 80147a4:	0801c9bc 	.word	0x0801c9bc
 80147a8:	200097b0 	.word	0x200097b0
 80147ac:	2000cf80 	.word	0x2000cf80
 80147b0:	0801c9d8 	.word	0x0801c9d8
 80147b4:	200097c0 	.word	0x200097c0

080147b8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80147b8:	b580      	push	{r7, lr}
 80147ba:	b088      	sub	sp, #32
 80147bc:	af02      	add	r7, sp, #8
 80147be:	60f8      	str	r0, [r7, #12]
 80147c0:	60b9      	str	r1, [r7, #8]
 80147c2:	607a      	str	r2, [r7, #4]
 80147c4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d109      	bne.n	80147e0 <udp_sendto_if+0x28>
 80147cc:	4b2e      	ldr	r3, [pc, #184]	; (8014888 <udp_sendto_if+0xd0>)
 80147ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147d2:	492e      	ldr	r1, [pc, #184]	; (801488c <udp_sendto_if+0xd4>)
 80147d4:	482e      	ldr	r0, [pc, #184]	; (8014890 <udp_sendto_if+0xd8>)
 80147d6:	f004 fef9 	bl	80195cc <iprintf>
 80147da:	f06f 030f 	mvn.w	r3, #15
 80147de:	e04f      	b.n	8014880 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80147e0:	68bb      	ldr	r3, [r7, #8]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d109      	bne.n	80147fa <udp_sendto_if+0x42>
 80147e6:	4b28      	ldr	r3, [pc, #160]	; (8014888 <udp_sendto_if+0xd0>)
 80147e8:	f240 2281 	movw	r2, #641	; 0x281
 80147ec:	4929      	ldr	r1, [pc, #164]	; (8014894 <udp_sendto_if+0xdc>)
 80147ee:	4828      	ldr	r0, [pc, #160]	; (8014890 <udp_sendto_if+0xd8>)
 80147f0:	f004 feec 	bl	80195cc <iprintf>
 80147f4:	f06f 030f 	mvn.w	r3, #15
 80147f8:	e042      	b.n	8014880 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d109      	bne.n	8014814 <udp_sendto_if+0x5c>
 8014800:	4b21      	ldr	r3, [pc, #132]	; (8014888 <udp_sendto_if+0xd0>)
 8014802:	f240 2282 	movw	r2, #642	; 0x282
 8014806:	4924      	ldr	r1, [pc, #144]	; (8014898 <udp_sendto_if+0xe0>)
 8014808:	4821      	ldr	r0, [pc, #132]	; (8014890 <udp_sendto_if+0xd8>)
 801480a:	f004 fedf 	bl	80195cc <iprintf>
 801480e:	f06f 030f 	mvn.w	r3, #15
 8014812:	e035      	b.n	8014880 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014814:	6a3b      	ldr	r3, [r7, #32]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d109      	bne.n	801482e <udp_sendto_if+0x76>
 801481a:	4b1b      	ldr	r3, [pc, #108]	; (8014888 <udp_sendto_if+0xd0>)
 801481c:	f240 2283 	movw	r2, #643	; 0x283
 8014820:	491e      	ldr	r1, [pc, #120]	; (801489c <udp_sendto_if+0xe4>)
 8014822:	481b      	ldr	r0, [pc, #108]	; (8014890 <udp_sendto_if+0xd8>)
 8014824:	f004 fed2 	bl	80195cc <iprintf>
 8014828:	f06f 030f 	mvn.w	r3, #15
 801482c:	e028      	b.n	8014880 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d009      	beq.n	8014848 <udp_sendto_if+0x90>
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d005      	beq.n	8014848 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801483c:	68fb      	ldr	r3, [r7, #12]
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014844:	2be0      	cmp	r3, #224	; 0xe0
 8014846:	d103      	bne.n	8014850 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014848:	6a3b      	ldr	r3, [r7, #32]
 801484a:	3304      	adds	r3, #4
 801484c:	617b      	str	r3, [r7, #20]
 801484e:	e00b      	b.n	8014868 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014850:	68fb      	ldr	r3, [r7, #12]
 8014852:	681a      	ldr	r2, [r3, #0]
 8014854:	6a3b      	ldr	r3, [r7, #32]
 8014856:	3304      	adds	r3, #4
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	429a      	cmp	r2, r3
 801485c:	d002      	beq.n	8014864 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801485e:	f06f 0303 	mvn.w	r3, #3
 8014862:	e00d      	b.n	8014880 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014868:	887a      	ldrh	r2, [r7, #2]
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	9301      	str	r3, [sp, #4]
 801486e:	6a3b      	ldr	r3, [r7, #32]
 8014870:	9300      	str	r3, [sp, #0]
 8014872:	4613      	mov	r3, r2
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	68b9      	ldr	r1, [r7, #8]
 8014878:	68f8      	ldr	r0, [r7, #12]
 801487a:	f000 f811 	bl	80148a0 <udp_sendto_if_src>
 801487e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014880:	4618      	mov	r0, r3
 8014882:	3718      	adds	r7, #24
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	0801c900 	.word	0x0801c900
 801488c:	0801ca74 	.word	0x0801ca74
 8014890:	0801c954 	.word	0x0801c954
 8014894:	0801ca90 	.word	0x0801ca90
 8014898:	0801caac 	.word	0x0801caac
 801489c:	0801cacc 	.word	0x0801cacc

080148a0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b08c      	sub	sp, #48	; 0x30
 80148a4:	af04      	add	r7, sp, #16
 80148a6:	60f8      	str	r0, [r7, #12]
 80148a8:	60b9      	str	r1, [r7, #8]
 80148aa:	607a      	str	r2, [r7, #4]
 80148ac:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d109      	bne.n	80148c8 <udp_sendto_if_src+0x28>
 80148b4:	4b65      	ldr	r3, [pc, #404]	; (8014a4c <udp_sendto_if_src+0x1ac>)
 80148b6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80148ba:	4965      	ldr	r1, [pc, #404]	; (8014a50 <udp_sendto_if_src+0x1b0>)
 80148bc:	4865      	ldr	r0, [pc, #404]	; (8014a54 <udp_sendto_if_src+0x1b4>)
 80148be:	f004 fe85 	bl	80195cc <iprintf>
 80148c2:	f06f 030f 	mvn.w	r3, #15
 80148c6:	e0bc      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d109      	bne.n	80148e2 <udp_sendto_if_src+0x42>
 80148ce:	4b5f      	ldr	r3, [pc, #380]	; (8014a4c <udp_sendto_if_src+0x1ac>)
 80148d0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80148d4:	4960      	ldr	r1, [pc, #384]	; (8014a58 <udp_sendto_if_src+0x1b8>)
 80148d6:	485f      	ldr	r0, [pc, #380]	; (8014a54 <udp_sendto_if_src+0x1b4>)
 80148d8:	f004 fe78 	bl	80195cc <iprintf>
 80148dc:	f06f 030f 	mvn.w	r3, #15
 80148e0:	e0af      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	d109      	bne.n	80148fc <udp_sendto_if_src+0x5c>
 80148e8:	4b58      	ldr	r3, [pc, #352]	; (8014a4c <udp_sendto_if_src+0x1ac>)
 80148ea:	f240 22d3 	movw	r2, #723	; 0x2d3
 80148ee:	495b      	ldr	r1, [pc, #364]	; (8014a5c <udp_sendto_if_src+0x1bc>)
 80148f0:	4858      	ldr	r0, [pc, #352]	; (8014a54 <udp_sendto_if_src+0x1b4>)
 80148f2:	f004 fe6b 	bl	80195cc <iprintf>
 80148f6:	f06f 030f 	mvn.w	r3, #15
 80148fa:	e0a2      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80148fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d109      	bne.n	8014916 <udp_sendto_if_src+0x76>
 8014902:	4b52      	ldr	r3, [pc, #328]	; (8014a4c <udp_sendto_if_src+0x1ac>)
 8014904:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8014908:	4955      	ldr	r1, [pc, #340]	; (8014a60 <udp_sendto_if_src+0x1c0>)
 801490a:	4852      	ldr	r0, [pc, #328]	; (8014a54 <udp_sendto_if_src+0x1b4>)
 801490c:	f004 fe5e 	bl	80195cc <iprintf>
 8014910:	f06f 030f 	mvn.w	r3, #15
 8014914:	e095      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014918:	2b00      	cmp	r3, #0
 801491a:	d109      	bne.n	8014930 <udp_sendto_if_src+0x90>
 801491c:	4b4b      	ldr	r3, [pc, #300]	; (8014a4c <udp_sendto_if_src+0x1ac>)
 801491e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014922:	4950      	ldr	r1, [pc, #320]	; (8014a64 <udp_sendto_if_src+0x1c4>)
 8014924:	484b      	ldr	r0, [pc, #300]	; (8014a54 <udp_sendto_if_src+0x1b4>)
 8014926:	f004 fe51 	bl	80195cc <iprintf>
 801492a:	f06f 030f 	mvn.w	r3, #15
 801492e:	e088      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014930:	68fb      	ldr	r3, [r7, #12]
 8014932:	8a5b      	ldrh	r3, [r3, #18]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d10f      	bne.n	8014958 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014938:	68f9      	ldr	r1, [r7, #12]
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	8a5b      	ldrh	r3, [r3, #18]
 801493e:	461a      	mov	r2, r3
 8014940:	68f8      	ldr	r0, [r7, #12]
 8014942:	f000 f893 	bl	8014a6c <udp_bind>
 8014946:	4603      	mov	r3, r0
 8014948:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801494a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801494e:	2b00      	cmp	r3, #0
 8014950:	d002      	beq.n	8014958 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014952:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014956:	e074      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	891b      	ldrh	r3, [r3, #8]
 801495c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014960:	4293      	cmp	r3, r2
 8014962:	d902      	bls.n	801496a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014964:	f04f 33ff 	mov.w	r3, #4294967295
 8014968:	e06b      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801496a:	2108      	movs	r1, #8
 801496c:	68b8      	ldr	r0, [r7, #8]
 801496e:	f7f9 f84d 	bl	800da0c <pbuf_add_header>
 8014972:	4603      	mov	r3, r0
 8014974:	2b00      	cmp	r3, #0
 8014976:	d015      	beq.n	80149a4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014978:	f44f 7220 	mov.w	r2, #640	; 0x280
 801497c:	2108      	movs	r1, #8
 801497e:	2022      	movs	r0, #34	; 0x22
 8014980:	f7f8 fdf6 	bl	800d570 <pbuf_alloc>
 8014984:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014986:	69fb      	ldr	r3, [r7, #28]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d102      	bne.n	8014992 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801498c:	f04f 33ff 	mov.w	r3, #4294967295
 8014990:	e057      	b.n	8014a42 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	891b      	ldrh	r3, [r3, #8]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d006      	beq.n	80149a8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801499a:	68b9      	ldr	r1, [r7, #8]
 801499c:	69f8      	ldr	r0, [r7, #28]
 801499e:	f7f9 f9ef 	bl	800dd80 <pbuf_chain>
 80149a2:	e001      	b.n	80149a8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80149a4:	68bb      	ldr	r3, [r7, #8]
 80149a6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80149a8:	69fb      	ldr	r3, [r7, #28]
 80149aa:	895b      	ldrh	r3, [r3, #10]
 80149ac:	2b07      	cmp	r3, #7
 80149ae:	d806      	bhi.n	80149be <udp_sendto_if_src+0x11e>
 80149b0:	4b26      	ldr	r3, [pc, #152]	; (8014a4c <udp_sendto_if_src+0x1ac>)
 80149b2:	f240 320d 	movw	r2, #781	; 0x30d
 80149b6:	492c      	ldr	r1, [pc, #176]	; (8014a68 <udp_sendto_if_src+0x1c8>)
 80149b8:	4826      	ldr	r0, [pc, #152]	; (8014a54 <udp_sendto_if_src+0x1b4>)
 80149ba:	f004 fe07 	bl	80195cc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80149be:	69fb      	ldr	r3, [r7, #28]
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	8a5b      	ldrh	r3, [r3, #18]
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7f7 fc81 	bl	800c2d0 <lwip_htons>
 80149ce:	4603      	mov	r3, r0
 80149d0:	461a      	mov	r2, r3
 80149d2:	697b      	ldr	r3, [r7, #20]
 80149d4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80149d6:	887b      	ldrh	r3, [r7, #2]
 80149d8:	4618      	mov	r0, r3
 80149da:	f7f7 fc79 	bl	800c2d0 <lwip_htons>
 80149de:	4603      	mov	r3, r0
 80149e0:	461a      	mov	r2, r3
 80149e2:	697b      	ldr	r3, [r7, #20]
 80149e4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80149e6:	697b      	ldr	r3, [r7, #20]
 80149e8:	2200      	movs	r2, #0
 80149ea:	719a      	strb	r2, [r3, #6]
 80149ec:	2200      	movs	r2, #0
 80149ee:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80149f0:	69fb      	ldr	r3, [r7, #28]
 80149f2:	891b      	ldrh	r3, [r3, #8]
 80149f4:	4618      	mov	r0, r3
 80149f6:	f7f7 fc6b 	bl	800c2d0 <lwip_htons>
 80149fa:	4603      	mov	r3, r0
 80149fc:	461a      	mov	r2, r3
 80149fe:	697b      	ldr	r3, [r7, #20]
 8014a00:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8014a02:	2311      	movs	r3, #17
 8014a04:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	7adb      	ldrb	r3, [r3, #11]
 8014a0a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8014a0c:	68fb      	ldr	r3, [r7, #12]
 8014a0e:	7a9b      	ldrb	r3, [r3, #10]
 8014a10:	7cb9      	ldrb	r1, [r7, #18]
 8014a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014a14:	9202      	str	r2, [sp, #8]
 8014a16:	7cfa      	ldrb	r2, [r7, #19]
 8014a18:	9201      	str	r2, [sp, #4]
 8014a1a:	9300      	str	r3, [sp, #0]
 8014a1c:	460b      	mov	r3, r1
 8014a1e:	687a      	ldr	r2, [r7, #4]
 8014a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a22:	69f8      	ldr	r0, [r7, #28]
 8014a24:	f003 fb3a 	bl	801809c <ip4_output_if_src>
 8014a28:	4603      	mov	r3, r0
 8014a2a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8014a2c:	69fa      	ldr	r2, [r7, #28]
 8014a2e:	68bb      	ldr	r3, [r7, #8]
 8014a30:	429a      	cmp	r2, r3
 8014a32:	d004      	beq.n	8014a3e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014a34:	69f8      	ldr	r0, [r7, #28]
 8014a36:	f7f9 f87f 	bl	800db38 <pbuf_free>
    q = NULL;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8014a3e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3720      	adds	r7, #32
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	0801c900 	.word	0x0801c900
 8014a50:	0801caec 	.word	0x0801caec
 8014a54:	0801c954 	.word	0x0801c954
 8014a58:	0801cb0c 	.word	0x0801cb0c
 8014a5c:	0801cb2c 	.word	0x0801cb2c
 8014a60:	0801cb50 	.word	0x0801cb50
 8014a64:	0801cb74 	.word	0x0801cb74
 8014a68:	0801cb98 	.word	0x0801cb98

08014a6c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014a6c:	b580      	push	{r7, lr}
 8014a6e:	b086      	sub	sp, #24
 8014a70:	af00      	add	r7, sp, #0
 8014a72:	60f8      	str	r0, [r7, #12]
 8014a74:	60b9      	str	r1, [r7, #8]
 8014a76:	4613      	mov	r3, r2
 8014a78:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014a7a:	68bb      	ldr	r3, [r7, #8]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d101      	bne.n	8014a84 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014a80:	4b39      	ldr	r3, [pc, #228]	; (8014b68 <udp_bind+0xfc>)
 8014a82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a84:	68fb      	ldr	r3, [r7, #12]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d109      	bne.n	8014a9e <udp_bind+0x32>
 8014a8a:	4b38      	ldr	r3, [pc, #224]	; (8014b6c <udp_bind+0x100>)
 8014a8c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014a90:	4937      	ldr	r1, [pc, #220]	; (8014b70 <udp_bind+0x104>)
 8014a92:	4838      	ldr	r0, [pc, #224]	; (8014b74 <udp_bind+0x108>)
 8014a94:	f004 fd9a 	bl	80195cc <iprintf>
 8014a98:	f06f 030f 	mvn.w	r3, #15
 8014a9c:	e060      	b.n	8014b60 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014aa2:	4b35      	ldr	r3, [pc, #212]	; (8014b78 <udp_bind+0x10c>)
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	617b      	str	r3, [r7, #20]
 8014aa8:	e009      	b.n	8014abe <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014aaa:	68fa      	ldr	r2, [r7, #12]
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	429a      	cmp	r2, r3
 8014ab0:	d102      	bne.n	8014ab8 <udp_bind+0x4c>
      rebind = 1;
 8014ab2:	2301      	movs	r3, #1
 8014ab4:	74fb      	strb	r3, [r7, #19]
      break;
 8014ab6:	e005      	b.n	8014ac4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ab8:	697b      	ldr	r3, [r7, #20]
 8014aba:	68db      	ldr	r3, [r3, #12]
 8014abc:	617b      	str	r3, [r7, #20]
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	d1f2      	bne.n	8014aaa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8014ac4:	88fb      	ldrh	r3, [r7, #6]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d109      	bne.n	8014ade <udp_bind+0x72>
    port = udp_new_port();
 8014aca:	f7ff fcc5 	bl	8014458 <udp_new_port>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014ad2:	88fb      	ldrh	r3, [r7, #6]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d12c      	bne.n	8014b32 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014ad8:	f06f 0307 	mvn.w	r3, #7
 8014adc:	e040      	b.n	8014b60 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014ade:	4b26      	ldr	r3, [pc, #152]	; (8014b78 <udp_bind+0x10c>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	617b      	str	r3, [r7, #20]
 8014ae4:	e022      	b.n	8014b2c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	697b      	ldr	r3, [r7, #20]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d01b      	beq.n	8014b26 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	8a5b      	ldrh	r3, [r3, #18]
 8014af2:	88fa      	ldrh	r2, [r7, #6]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d116      	bne.n	8014b26 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014af8:	697b      	ldr	r3, [r7, #20]
 8014afa:	681a      	ldr	r2, [r3, #0]
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d00d      	beq.n	8014b20 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d00a      	beq.n	8014b20 <udp_bind+0xb4>
 8014b0a:	68bb      	ldr	r3, [r7, #8]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d006      	beq.n	8014b20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b12:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d003      	beq.n	8014b20 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d102      	bne.n	8014b26 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014b20:	f06f 0307 	mvn.w	r3, #7
 8014b24:	e01c      	b.n	8014b60 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	617b      	str	r3, [r7, #20]
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d1d9      	bne.n	8014ae6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d002      	beq.n	8014b3e <udp_bind+0xd2>
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	e000      	b.n	8014b40 <udp_bind+0xd4>
 8014b3e:	2300      	movs	r3, #0
 8014b40:	68fa      	ldr	r2, [r7, #12]
 8014b42:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	88fa      	ldrh	r2, [r7, #6]
 8014b48:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8014b4a:	7cfb      	ldrb	r3, [r7, #19]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d106      	bne.n	8014b5e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014b50:	4b09      	ldr	r3, [pc, #36]	; (8014b78 <udp_bind+0x10c>)
 8014b52:	681a      	ldr	r2, [r3, #0]
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014b58:	4a07      	ldr	r2, [pc, #28]	; (8014b78 <udp_bind+0x10c>)
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8014b5e:	2300      	movs	r3, #0
}
 8014b60:	4618      	mov	r0, r3
 8014b62:	3718      	adds	r7, #24
 8014b64:	46bd      	mov	sp, r7
 8014b66:	bd80      	pop	{r7, pc}
 8014b68:	0801fbb0 	.word	0x0801fbb0
 8014b6c:	0801c900 	.word	0x0801c900
 8014b70:	0801cbc8 	.word	0x0801cbc8
 8014b74:	0801c954 	.word	0x0801c954
 8014b78:	2000cf80 	.word	0x2000cf80

08014b7c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b086      	sub	sp, #24
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	60f8      	str	r0, [r7, #12]
 8014b84:	60b9      	str	r1, [r7, #8]
 8014b86:	4613      	mov	r3, r2
 8014b88:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d109      	bne.n	8014ba4 <udp_connect+0x28>
 8014b90:	4b2c      	ldr	r3, [pc, #176]	; (8014c44 <udp_connect+0xc8>)
 8014b92:	f240 4235 	movw	r2, #1077	; 0x435
 8014b96:	492c      	ldr	r1, [pc, #176]	; (8014c48 <udp_connect+0xcc>)
 8014b98:	482c      	ldr	r0, [pc, #176]	; (8014c4c <udp_connect+0xd0>)
 8014b9a:	f004 fd17 	bl	80195cc <iprintf>
 8014b9e:	f06f 030f 	mvn.w	r3, #15
 8014ba2:	e04b      	b.n	8014c3c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014ba4:	68bb      	ldr	r3, [r7, #8]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d109      	bne.n	8014bbe <udp_connect+0x42>
 8014baa:	4b26      	ldr	r3, [pc, #152]	; (8014c44 <udp_connect+0xc8>)
 8014bac:	f240 4236 	movw	r2, #1078	; 0x436
 8014bb0:	4927      	ldr	r1, [pc, #156]	; (8014c50 <udp_connect+0xd4>)
 8014bb2:	4826      	ldr	r0, [pc, #152]	; (8014c4c <udp_connect+0xd0>)
 8014bb4:	f004 fd0a 	bl	80195cc <iprintf>
 8014bb8:	f06f 030f 	mvn.w	r3, #15
 8014bbc:	e03e      	b.n	8014c3c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	8a5b      	ldrh	r3, [r3, #18]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d10f      	bne.n	8014be6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014bc6:	68f9      	ldr	r1, [r7, #12]
 8014bc8:	68fb      	ldr	r3, [r7, #12]
 8014bca:	8a5b      	ldrh	r3, [r3, #18]
 8014bcc:	461a      	mov	r2, r3
 8014bce:	68f8      	ldr	r0, [r7, #12]
 8014bd0:	f7ff ff4c 	bl	8014a6c <udp_bind>
 8014bd4:	4603      	mov	r3, r0
 8014bd6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014bd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d002      	beq.n	8014be6 <udp_connect+0x6a>
      return err;
 8014be0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014be4:	e02a      	b.n	8014c3c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d002      	beq.n	8014bf2 <udp_connect+0x76>
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	e000      	b.n	8014bf4 <udp_connect+0x78>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	68fa      	ldr	r2, [r7, #12]
 8014bf6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014bf8:	68fb      	ldr	r3, [r7, #12]
 8014bfa:	88fa      	ldrh	r2, [r7, #6]
 8014bfc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014bfe:	68fb      	ldr	r3, [r7, #12]
 8014c00:	7c1b      	ldrb	r3, [r3, #16]
 8014c02:	f043 0304 	orr.w	r3, r3, #4
 8014c06:	b2da      	uxtb	r2, r3
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014c0c:	4b11      	ldr	r3, [pc, #68]	; (8014c54 <udp_connect+0xd8>)
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	617b      	str	r3, [r7, #20]
 8014c12:	e008      	b.n	8014c26 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014c14:	68fa      	ldr	r2, [r7, #12]
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	d101      	bne.n	8014c20 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014c1c:	2300      	movs	r3, #0
 8014c1e:	e00d      	b.n	8014c3c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	68db      	ldr	r3, [r3, #12]
 8014c24:	617b      	str	r3, [r7, #20]
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d1f3      	bne.n	8014c14 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014c2c:	4b09      	ldr	r3, [pc, #36]	; (8014c54 <udp_connect+0xd8>)
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014c34:	4a07      	ldr	r2, [pc, #28]	; (8014c54 <udp_connect+0xd8>)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014c3a:	2300      	movs	r3, #0
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3718      	adds	r7, #24
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	0801c900 	.word	0x0801c900
 8014c48:	0801cbe0 	.word	0x0801cbe0
 8014c4c:	0801c954 	.word	0x0801c954
 8014c50:	0801cbfc 	.word	0x0801cbfc
 8014c54:	2000cf80 	.word	0x2000cf80

08014c58 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
 8014c5e:	60f8      	str	r0, [r7, #12]
 8014c60:	60b9      	str	r1, [r7, #8]
 8014c62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014c64:	68fb      	ldr	r3, [r7, #12]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d107      	bne.n	8014c7a <udp_recv+0x22>
 8014c6a:	4b08      	ldr	r3, [pc, #32]	; (8014c8c <udp_recv+0x34>)
 8014c6c:	f240 428a 	movw	r2, #1162	; 0x48a
 8014c70:	4907      	ldr	r1, [pc, #28]	; (8014c90 <udp_recv+0x38>)
 8014c72:	4808      	ldr	r0, [pc, #32]	; (8014c94 <udp_recv+0x3c>)
 8014c74:	f004 fcaa 	bl	80195cc <iprintf>
 8014c78:	e005      	b.n	8014c86 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	68ba      	ldr	r2, [r7, #8]
 8014c7e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	687a      	ldr	r2, [r7, #4]
 8014c84:	61da      	str	r2, [r3, #28]
}
 8014c86:	3710      	adds	r7, #16
 8014c88:	46bd      	mov	sp, r7
 8014c8a:	bd80      	pop	{r7, pc}
 8014c8c:	0801c900 	.word	0x0801c900
 8014c90:	0801cc34 	.word	0x0801cc34
 8014c94:	0801c954 	.word	0x0801c954

08014c98 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014c98:	b580      	push	{r7, lr}
 8014c9a:	b084      	sub	sp, #16
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d107      	bne.n	8014cb6 <udp_remove+0x1e>
 8014ca6:	4b19      	ldr	r3, [pc, #100]	; (8014d0c <udp_remove+0x74>)
 8014ca8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014cac:	4918      	ldr	r1, [pc, #96]	; (8014d10 <udp_remove+0x78>)
 8014cae:	4819      	ldr	r0, [pc, #100]	; (8014d14 <udp_remove+0x7c>)
 8014cb0:	f004 fc8c 	bl	80195cc <iprintf>
 8014cb4:	e026      	b.n	8014d04 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8014cb6:	4b18      	ldr	r3, [pc, #96]	; (8014d18 <udp_remove+0x80>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	687a      	ldr	r2, [r7, #4]
 8014cbc:	429a      	cmp	r2, r3
 8014cbe:	d105      	bne.n	8014ccc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014cc0:	4b15      	ldr	r3, [pc, #84]	; (8014d18 <udp_remove+0x80>)
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	68db      	ldr	r3, [r3, #12]
 8014cc6:	4a14      	ldr	r2, [pc, #80]	; (8014d18 <udp_remove+0x80>)
 8014cc8:	6013      	str	r3, [r2, #0]
 8014cca:	e017      	b.n	8014cfc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014ccc:	4b12      	ldr	r3, [pc, #72]	; (8014d18 <udp_remove+0x80>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	60fb      	str	r3, [r7, #12]
 8014cd2:	e010      	b.n	8014cf6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	68db      	ldr	r3, [r3, #12]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d009      	beq.n	8014cf0 <udp_remove+0x58>
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d104      	bne.n	8014cf0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	68da      	ldr	r2, [r3, #12]
 8014cea:	68fb      	ldr	r3, [r7, #12]
 8014cec:	60da      	str	r2, [r3, #12]
        break;
 8014cee:	e005      	b.n	8014cfc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	68db      	ldr	r3, [r3, #12]
 8014cf4:	60fb      	str	r3, [r7, #12]
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d1eb      	bne.n	8014cd4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014cfc:	6879      	ldr	r1, [r7, #4]
 8014cfe:	2000      	movs	r0, #0
 8014d00:	f7f8 f86a 	bl	800cdd8 <memp_free>
}
 8014d04:	3710      	adds	r7, #16
 8014d06:	46bd      	mov	sp, r7
 8014d08:	bd80      	pop	{r7, pc}
 8014d0a:	bf00      	nop
 8014d0c:	0801c900 	.word	0x0801c900
 8014d10:	0801cc4c 	.word	0x0801cc4c
 8014d14:	0801c954 	.word	0x0801c954
 8014d18:	2000cf80 	.word	0x2000cf80

08014d1c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014d1c:	b580      	push	{r7, lr}
 8014d1e:	b082      	sub	sp, #8
 8014d20:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014d22:	2000      	movs	r0, #0
 8014d24:	f7f7 ffe2 	bl	800ccec <memp_malloc>
 8014d28:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d007      	beq.n	8014d40 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014d30:	2220      	movs	r2, #32
 8014d32:	2100      	movs	r1, #0
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f004 fcae 	bl	8019696 <memset>
    pcb->ttl = UDP_TTL;
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	22ff      	movs	r2, #255	; 0xff
 8014d3e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014d40:	687b      	ldr	r3, [r7, #4]
}
 8014d42:	4618      	mov	r0, r3
 8014d44:	3708      	adds	r7, #8
 8014d46:	46bd      	mov	sp, r7
 8014d48:	bd80      	pop	{r7, pc}
	...

08014d4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014d4c:	b480      	push	{r7}
 8014d4e:	b085      	sub	sp, #20
 8014d50:	af00      	add	r7, sp, #0
 8014d52:	6078      	str	r0, [r7, #4]
 8014d54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	d01e      	beq.n	8014d9a <udp_netif_ip_addr_changed+0x4e>
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d01a      	beq.n	8014d9a <udp_netif_ip_addr_changed+0x4e>
 8014d64:	683b      	ldr	r3, [r7, #0]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d017      	beq.n	8014d9a <udp_netif_ip_addr_changed+0x4e>
 8014d6a:	683b      	ldr	r3, [r7, #0]
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d013      	beq.n	8014d9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d72:	4b0d      	ldr	r3, [pc, #52]	; (8014da8 <udp_netif_ip_addr_changed+0x5c>)
 8014d74:	681b      	ldr	r3, [r3, #0]
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	e00c      	b.n	8014d94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d103      	bne.n	8014d8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014d86:	683b      	ldr	r3, [r7, #0]
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	68db      	ldr	r3, [r3, #12]
 8014d92:	60fb      	str	r3, [r7, #12]
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1ef      	bne.n	8014d7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8014d9a:	bf00      	nop
 8014d9c:	3714      	adds	r7, #20
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da4:	4770      	bx	lr
 8014da6:	bf00      	nop
 8014da8:	2000cf80 	.word	0x2000cf80

08014dac <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8014db0:	4b20      	ldr	r3, [pc, #128]	; (8014e34 <dhcp_inc_pcb_refcount+0x88>)
 8014db2:	781b      	ldrb	r3, [r3, #0]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d133      	bne.n	8014e20 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8014db8:	4b1f      	ldr	r3, [pc, #124]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d005      	beq.n	8014dcc <dhcp_inc_pcb_refcount+0x20>
 8014dc0:	4b1e      	ldr	r3, [pc, #120]	; (8014e3c <dhcp_inc_pcb_refcount+0x90>)
 8014dc2:	22e5      	movs	r2, #229	; 0xe5
 8014dc4:	491e      	ldr	r1, [pc, #120]	; (8014e40 <dhcp_inc_pcb_refcount+0x94>)
 8014dc6:	481f      	ldr	r0, [pc, #124]	; (8014e44 <dhcp_inc_pcb_refcount+0x98>)
 8014dc8:	f004 fc00 	bl	80195cc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8014dcc:	f7ff ffa6 	bl	8014d1c <udp_new>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	4a19      	ldr	r2, [pc, #100]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014dd4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8014dd6:	4b18      	ldr	r3, [pc, #96]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014dd8:	681b      	ldr	r3, [r3, #0]
 8014dda:	2b00      	cmp	r3, #0
 8014ddc:	d102      	bne.n	8014de4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8014dde:	f04f 33ff 	mov.w	r3, #4294967295
 8014de2:	e024      	b.n	8014e2e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8014de4:	4b14      	ldr	r3, [pc, #80]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014de6:	681b      	ldr	r3, [r3, #0]
 8014de8:	7a5a      	ldrb	r2, [r3, #9]
 8014dea:	4b13      	ldr	r3, [pc, #76]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014dec:	681b      	ldr	r3, [r3, #0]
 8014dee:	f042 0220 	orr.w	r2, r2, #32
 8014df2:	b2d2      	uxtb	r2, r2
 8014df4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8014df6:	4b10      	ldr	r3, [pc, #64]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	2244      	movs	r2, #68	; 0x44
 8014dfc:	4912      	ldr	r1, [pc, #72]	; (8014e48 <dhcp_inc_pcb_refcount+0x9c>)
 8014dfe:	4618      	mov	r0, r3
 8014e00:	f7ff fe34 	bl	8014a6c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8014e04:	4b0c      	ldr	r3, [pc, #48]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	2243      	movs	r2, #67	; 0x43
 8014e0a:	490f      	ldr	r1, [pc, #60]	; (8014e48 <dhcp_inc_pcb_refcount+0x9c>)
 8014e0c:	4618      	mov	r0, r3
 8014e0e:	f7ff feb5 	bl	8014b7c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014e12:	4b09      	ldr	r3, [pc, #36]	; (8014e38 <dhcp_inc_pcb_refcount+0x8c>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	2200      	movs	r2, #0
 8014e18:	490c      	ldr	r1, [pc, #48]	; (8014e4c <dhcp_inc_pcb_refcount+0xa0>)
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	f7ff ff1c 	bl	8014c58 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014e20:	4b04      	ldr	r3, [pc, #16]	; (8014e34 <dhcp_inc_pcb_refcount+0x88>)
 8014e22:	781b      	ldrb	r3, [r3, #0]
 8014e24:	3301      	adds	r3, #1
 8014e26:	b2da      	uxtb	r2, r3
 8014e28:	4b02      	ldr	r3, [pc, #8]	; (8014e34 <dhcp_inc_pcb_refcount+0x88>)
 8014e2a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8014e2c:	2300      	movs	r3, #0
}
 8014e2e:	4618      	mov	r0, r3
 8014e30:	bd80      	pop	{r7, pc}
 8014e32:	bf00      	nop
 8014e34:	2000cfb0 	.word	0x2000cfb0
 8014e38:	2000cfac 	.word	0x2000cfac
 8014e3c:	0801cc64 	.word	0x0801cc64
 8014e40:	0801cc9c 	.word	0x0801cc9c
 8014e44:	0801ccc4 	.word	0x0801ccc4
 8014e48:	0801fbb0 	.word	0x0801fbb0
 8014e4c:	080166e5 	.word	0x080166e5

08014e50 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014e50:	b580      	push	{r7, lr}
 8014e52:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014e54:	4b0e      	ldr	r3, [pc, #56]	; (8014e90 <dhcp_dec_pcb_refcount+0x40>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d105      	bne.n	8014e68 <dhcp_dec_pcb_refcount+0x18>
 8014e5c:	4b0d      	ldr	r3, [pc, #52]	; (8014e94 <dhcp_dec_pcb_refcount+0x44>)
 8014e5e:	22ff      	movs	r2, #255	; 0xff
 8014e60:	490d      	ldr	r1, [pc, #52]	; (8014e98 <dhcp_dec_pcb_refcount+0x48>)
 8014e62:	480e      	ldr	r0, [pc, #56]	; (8014e9c <dhcp_dec_pcb_refcount+0x4c>)
 8014e64:	f004 fbb2 	bl	80195cc <iprintf>
  dhcp_pcb_refcount--;
 8014e68:	4b09      	ldr	r3, [pc, #36]	; (8014e90 <dhcp_dec_pcb_refcount+0x40>)
 8014e6a:	781b      	ldrb	r3, [r3, #0]
 8014e6c:	3b01      	subs	r3, #1
 8014e6e:	b2da      	uxtb	r2, r3
 8014e70:	4b07      	ldr	r3, [pc, #28]	; (8014e90 <dhcp_dec_pcb_refcount+0x40>)
 8014e72:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014e74:	4b06      	ldr	r3, [pc, #24]	; (8014e90 <dhcp_dec_pcb_refcount+0x40>)
 8014e76:	781b      	ldrb	r3, [r3, #0]
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d107      	bne.n	8014e8c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8014e7c:	4b08      	ldr	r3, [pc, #32]	; (8014ea0 <dhcp_dec_pcb_refcount+0x50>)
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7ff ff09 	bl	8014c98 <udp_remove>
    dhcp_pcb = NULL;
 8014e86:	4b06      	ldr	r3, [pc, #24]	; (8014ea0 <dhcp_dec_pcb_refcount+0x50>)
 8014e88:	2200      	movs	r2, #0
 8014e8a:	601a      	str	r2, [r3, #0]
  }
}
 8014e8c:	bf00      	nop
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	2000cfb0 	.word	0x2000cfb0
 8014e94:	0801cc64 	.word	0x0801cc64
 8014e98:	0801ccec 	.word	0x0801ccec
 8014e9c:	0801ccc4 	.word	0x0801ccc4
 8014ea0:	2000cfac 	.word	0x2000cfac

08014ea4 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014ea4:	b580      	push	{r7, lr}
 8014ea6:	b084      	sub	sp, #16
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014eb0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8014eb2:	210c      	movs	r1, #12
 8014eb4:	68f8      	ldr	r0, [r7, #12]
 8014eb6:	f001 f857 	bl	8015f68 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014eba:	4b06      	ldr	r3, [pc, #24]	; (8014ed4 <dhcp_handle_nak+0x30>)
 8014ebc:	4a05      	ldr	r2, [pc, #20]	; (8014ed4 <dhcp_handle_nak+0x30>)
 8014ebe:	4905      	ldr	r1, [pc, #20]	; (8014ed4 <dhcp_handle_nak+0x30>)
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7f8 f92b 	bl	800d11c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8014ec6:	6878      	ldr	r0, [r7, #4]
 8014ec8:	f000 fc4a 	bl	8015760 <dhcp_discover>
}
 8014ecc:	bf00      	nop
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	0801fbb0 	.word	0x0801fbb0

08014ed8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b084      	sub	sp, #16
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8014ee6:	2108      	movs	r1, #8
 8014ee8:	68f8      	ldr	r0, [r7, #12]
 8014eea:	f001 f83d 	bl	8015f68 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	331c      	adds	r3, #28
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	4619      	mov	r1, r3
 8014ef6:	6878      	ldr	r0, [r7, #4]
 8014ef8:	f002 fb3e 	bl	8017578 <etharp_query>
 8014efc:	4603      	mov	r3, r0
 8014efe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	799b      	ldrb	r3, [r3, #6]
 8014f04:	2bff      	cmp	r3, #255	; 0xff
 8014f06:	d005      	beq.n	8014f14 <dhcp_check+0x3c>
    dhcp->tries++;
 8014f08:	68fb      	ldr	r3, [r7, #12]
 8014f0a:	799b      	ldrb	r3, [r3, #6]
 8014f0c:	3301      	adds	r3, #1
 8014f0e:	b2da      	uxtb	r2, r3
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014f14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014f18:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014f1a:	893b      	ldrh	r3, [r7, #8]
 8014f1c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014f20:	4a06      	ldr	r2, [pc, #24]	; (8014f3c <dhcp_check+0x64>)
 8014f22:	fb82 1203 	smull	r1, r2, r2, r3
 8014f26:	1152      	asrs	r2, r2, #5
 8014f28:	17db      	asrs	r3, r3, #31
 8014f2a:	1ad3      	subs	r3, r2, r3
 8014f2c:	b29a      	uxth	r2, r3
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014f32:	bf00      	nop
 8014f34:	3710      	adds	r7, #16
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	10624dd3 	.word	0x10624dd3

08014f40 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b084      	sub	sp, #16
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f4e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014f50:	4b0c      	ldr	r3, [pc, #48]	; (8014f84 <dhcp_handle_offer+0x44>)
 8014f52:	789b      	ldrb	r3, [r3, #2]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d011      	beq.n	8014f7c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8014f5e:	4b0a      	ldr	r3, [pc, #40]	; (8014f88 <dhcp_handle_offer+0x48>)
 8014f60:	689b      	ldr	r3, [r3, #8]
 8014f62:	4618      	mov	r0, r3
 8014f64:	f7f7 f9c9 	bl	800c2fa <lwip_htonl>
 8014f68:	4602      	mov	r2, r0
 8014f6a:	68fb      	ldr	r3, [r7, #12]
 8014f6c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	691a      	ldr	r2, [r3, #16]
 8014f72:	68fb      	ldr	r3, [r7, #12]
 8014f74:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014f76:	6878      	ldr	r0, [r7, #4]
 8014f78:	f000 f808 	bl	8014f8c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8014f7c:	bf00      	nop
 8014f7e:	3710      	adds	r7, #16
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	2000cfa4 	.word	0x2000cfa4
 8014f88:	2000cf84 	.word	0x2000cf84

08014f8c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8014f8c:	b5b0      	push	{r4, r5, r7, lr}
 8014f8e:	b08a      	sub	sp, #40	; 0x28
 8014f90:	af02      	add	r7, sp, #8
 8014f92:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d109      	bne.n	8014fae <dhcp_select+0x22>
 8014f9a:	4b71      	ldr	r3, [pc, #452]	; (8015160 <dhcp_select+0x1d4>)
 8014f9c:	f240 1277 	movw	r2, #375	; 0x177
 8014fa0:	4970      	ldr	r1, [pc, #448]	; (8015164 <dhcp_select+0x1d8>)
 8014fa2:	4871      	ldr	r0, [pc, #452]	; (8015168 <dhcp_select+0x1dc>)
 8014fa4:	f004 fb12 	bl	80195cc <iprintf>
 8014fa8:	f06f 030f 	mvn.w	r3, #15
 8014fac:	e0d3      	b.n	8015156 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fb2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014fb4:	69bb      	ldr	r3, [r7, #24]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d109      	bne.n	8014fce <dhcp_select+0x42>
 8014fba:	4b69      	ldr	r3, [pc, #420]	; (8015160 <dhcp_select+0x1d4>)
 8014fbc:	f240 1279 	movw	r2, #377	; 0x179
 8014fc0:	496a      	ldr	r1, [pc, #424]	; (801516c <dhcp_select+0x1e0>)
 8014fc2:	4869      	ldr	r0, [pc, #420]	; (8015168 <dhcp_select+0x1dc>)
 8014fc4:	f004 fb02 	bl	80195cc <iprintf>
 8014fc8:	f06f 0305 	mvn.w	r3, #5
 8014fcc:	e0c3      	b.n	8015156 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8014fce:	2101      	movs	r1, #1
 8014fd0:	69b8      	ldr	r0, [r7, #24]
 8014fd2:	f000 ffc9 	bl	8015f68 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014fd6:	f107 030c 	add.w	r3, r7, #12
 8014fda:	2203      	movs	r2, #3
 8014fdc:	69b9      	ldr	r1, [r7, #24]
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f001 fc4e 	bl	8016880 <dhcp_create_msg>
 8014fe4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014fe6:	697b      	ldr	r3, [r7, #20]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f000 8085 	beq.w	80150f8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	685b      	ldr	r3, [r3, #4]
 8014ff2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014ff4:	89b8      	ldrh	r0, [r7, #12]
 8014ff6:	693b      	ldr	r3, [r7, #16]
 8014ff8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014ffc:	2302      	movs	r3, #2
 8014ffe:	2239      	movs	r2, #57	; 0x39
 8015000:	f000 ffcc 	bl	8015f9c <dhcp_option>
 8015004:	4603      	mov	r3, r0
 8015006:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015008:	89b8      	ldrh	r0, [r7, #12]
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015014:	461a      	mov	r2, r3
 8015016:	f001 f81b 	bl	8016050 <dhcp_option_short>
 801501a:	4603      	mov	r3, r0
 801501c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801501e:	89b8      	ldrh	r0, [r7, #12]
 8015020:	693b      	ldr	r3, [r7, #16]
 8015022:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015026:	2304      	movs	r3, #4
 8015028:	2232      	movs	r2, #50	; 0x32
 801502a:	f000 ffb7 	bl	8015f9c <dhcp_option>
 801502e:	4603      	mov	r3, r0
 8015030:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015032:	89bc      	ldrh	r4, [r7, #12]
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801503a:	69bb      	ldr	r3, [r7, #24]
 801503c:	69db      	ldr	r3, [r3, #28]
 801503e:	4618      	mov	r0, r3
 8015040:	f7f7 f95b 	bl	800c2fa <lwip_htonl>
 8015044:	4603      	mov	r3, r0
 8015046:	461a      	mov	r2, r3
 8015048:	4629      	mov	r1, r5
 801504a:	4620      	mov	r0, r4
 801504c:	f001 f832 	bl	80160b4 <dhcp_option_long>
 8015050:	4603      	mov	r3, r0
 8015052:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015054:	89b8      	ldrh	r0, [r7, #12]
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801505c:	2304      	movs	r3, #4
 801505e:	2236      	movs	r2, #54	; 0x36
 8015060:	f000 ff9c 	bl	8015f9c <dhcp_option>
 8015064:	4603      	mov	r3, r0
 8015066:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015068:	89bc      	ldrh	r4, [r7, #12]
 801506a:	693b      	ldr	r3, [r7, #16]
 801506c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015070:	69bb      	ldr	r3, [r7, #24]
 8015072:	699b      	ldr	r3, [r3, #24]
 8015074:	4618      	mov	r0, r3
 8015076:	f7f7 f940 	bl	800c2fa <lwip_htonl>
 801507a:	4603      	mov	r3, r0
 801507c:	461a      	mov	r2, r3
 801507e:	4629      	mov	r1, r5
 8015080:	4620      	mov	r0, r4
 8015082:	f001 f817 	bl	80160b4 <dhcp_option_long>
 8015086:	4603      	mov	r3, r0
 8015088:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801508a:	89b8      	ldrh	r0, [r7, #12]
 801508c:	693b      	ldr	r3, [r7, #16]
 801508e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015092:	2303      	movs	r3, #3
 8015094:	2237      	movs	r2, #55	; 0x37
 8015096:	f000 ff81 	bl	8015f9c <dhcp_option>
 801509a:	4603      	mov	r3, r0
 801509c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801509e:	2300      	movs	r3, #0
 80150a0:	77bb      	strb	r3, [r7, #30]
 80150a2:	e00e      	b.n	80150c2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80150a4:	89b8      	ldrh	r0, [r7, #12]
 80150a6:	693b      	ldr	r3, [r7, #16]
 80150a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80150ac:	7fbb      	ldrb	r3, [r7, #30]
 80150ae:	4a30      	ldr	r2, [pc, #192]	; (8015170 <dhcp_select+0x1e4>)
 80150b0:	5cd3      	ldrb	r3, [r2, r3]
 80150b2:	461a      	mov	r2, r3
 80150b4:	f000 ffa6 	bl	8016004 <dhcp_option_byte>
 80150b8:	4603      	mov	r3, r0
 80150ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80150bc:	7fbb      	ldrb	r3, [r7, #30]
 80150be:	3301      	adds	r3, #1
 80150c0:	77bb      	strb	r3, [r7, #30]
 80150c2:	7fbb      	ldrb	r3, [r7, #30]
 80150c4:	2b02      	cmp	r3, #2
 80150c6:	d9ed      	bls.n	80150a4 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80150c8:	89b8      	ldrh	r0, [r7, #12]
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	33f0      	adds	r3, #240	; 0xf0
 80150ce:	697a      	ldr	r2, [r7, #20]
 80150d0:	4619      	mov	r1, r3
 80150d2:	f001 fcab 	bl	8016a2c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80150d6:	4b27      	ldr	r3, [pc, #156]	; (8015174 <dhcp_select+0x1e8>)
 80150d8:	6818      	ldr	r0, [r3, #0]
 80150da:	4b27      	ldr	r3, [pc, #156]	; (8015178 <dhcp_select+0x1ec>)
 80150dc:	9301      	str	r3, [sp, #4]
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	9300      	str	r3, [sp, #0]
 80150e2:	2343      	movs	r3, #67	; 0x43
 80150e4:	4a25      	ldr	r2, [pc, #148]	; (801517c <dhcp_select+0x1f0>)
 80150e6:	6979      	ldr	r1, [r7, #20]
 80150e8:	f7ff fbda 	bl	80148a0 <udp_sendto_if_src>
 80150ec:	4603      	mov	r3, r0
 80150ee:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80150f0:	6978      	ldr	r0, [r7, #20]
 80150f2:	f7f8 fd21 	bl	800db38 <pbuf_free>
 80150f6:	e001      	b.n	80150fc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80150f8:	23ff      	movs	r3, #255	; 0xff
 80150fa:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	799b      	ldrb	r3, [r3, #6]
 8015100:	2bff      	cmp	r3, #255	; 0xff
 8015102:	d005      	beq.n	8015110 <dhcp_select+0x184>
    dhcp->tries++;
 8015104:	69bb      	ldr	r3, [r7, #24]
 8015106:	799b      	ldrb	r3, [r3, #6]
 8015108:	3301      	adds	r3, #1
 801510a:	b2da      	uxtb	r2, r3
 801510c:	69bb      	ldr	r3, [r7, #24]
 801510e:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015110:	69bb      	ldr	r3, [r7, #24]
 8015112:	799b      	ldrb	r3, [r3, #6]
 8015114:	2b05      	cmp	r3, #5
 8015116:	d80d      	bhi.n	8015134 <dhcp_select+0x1a8>
 8015118:	69bb      	ldr	r3, [r7, #24]
 801511a:	799b      	ldrb	r3, [r3, #6]
 801511c:	461a      	mov	r2, r3
 801511e:	2301      	movs	r3, #1
 8015120:	4093      	lsls	r3, r2
 8015122:	b29b      	uxth	r3, r3
 8015124:	461a      	mov	r2, r3
 8015126:	0152      	lsls	r2, r2, #5
 8015128:	1ad2      	subs	r2, r2, r3
 801512a:	0092      	lsls	r2, r2, #2
 801512c:	4413      	add	r3, r2
 801512e:	00db      	lsls	r3, r3, #3
 8015130:	b29b      	uxth	r3, r3
 8015132:	e001      	b.n	8015138 <dhcp_select+0x1ac>
 8015134:	f64e 2360 	movw	r3, #60000	; 0xea60
 8015138:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801513a:	89fb      	ldrh	r3, [r7, #14]
 801513c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015140:	4a0f      	ldr	r2, [pc, #60]	; (8015180 <dhcp_select+0x1f4>)
 8015142:	fb82 1203 	smull	r1, r2, r2, r3
 8015146:	1152      	asrs	r2, r2, #5
 8015148:	17db      	asrs	r3, r3, #31
 801514a:	1ad3      	subs	r3, r2, r3
 801514c:	b29a      	uxth	r2, r3
 801514e:	69bb      	ldr	r3, [r7, #24]
 8015150:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015152:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015156:	4618      	mov	r0, r3
 8015158:	3720      	adds	r7, #32
 801515a:	46bd      	mov	sp, r7
 801515c:	bdb0      	pop	{r4, r5, r7, pc}
 801515e:	bf00      	nop
 8015160:	0801cc64 	.word	0x0801cc64
 8015164:	0801cd10 	.word	0x0801cd10
 8015168:	0801ccc4 	.word	0x0801ccc4
 801516c:	0801cd2c 	.word	0x0801cd2c
 8015170:	20000048 	.word	0x20000048
 8015174:	2000cfac 	.word	0x2000cfac
 8015178:	0801fbb0 	.word	0x0801fbb0
 801517c:	0801fbb4 	.word	0x0801fbb4
 8015180:	10624dd3 	.word	0x10624dd3

08015184 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b082      	sub	sp, #8
 8015188:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801518a:	4b27      	ldr	r3, [pc, #156]	; (8015228 <dhcp_coarse_tmr+0xa4>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	607b      	str	r3, [r7, #4]
 8015190:	e042      	b.n	8015218 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015196:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d039      	beq.n	8015212 <dhcp_coarse_tmr+0x8e>
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	795b      	ldrb	r3, [r3, #5]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d035      	beq.n	8015212 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	8a9b      	ldrh	r3, [r3, #20]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d012      	beq.n	80151d4 <dhcp_coarse_tmr+0x50>
 80151ae:	683b      	ldr	r3, [r7, #0]
 80151b0:	8a5b      	ldrh	r3, [r3, #18]
 80151b2:	3301      	adds	r3, #1
 80151b4:	b29a      	uxth	r2, r3
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	825a      	strh	r2, [r3, #18]
 80151ba:	683b      	ldr	r3, [r7, #0]
 80151bc:	8a5a      	ldrh	r2, [r3, #18]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	8a9b      	ldrh	r3, [r3, #20]
 80151c2:	429a      	cmp	r2, r3
 80151c4:	d106      	bne.n	80151d4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80151c6:	6878      	ldr	r0, [r7, #4]
 80151c8:	f000 fe34 	bl	8015e34 <dhcp_release_and_stop>
        dhcp_start(netif);
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f000 f96b 	bl	80154a8 <dhcp_start>
 80151d2:	e01e      	b.n	8015212 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	8a1b      	ldrh	r3, [r3, #16]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d00b      	beq.n	80151f4 <dhcp_coarse_tmr+0x70>
 80151dc:	683b      	ldr	r3, [r7, #0]
 80151de:	8a1b      	ldrh	r3, [r3, #16]
 80151e0:	1e5a      	subs	r2, r3, #1
 80151e2:	b291      	uxth	r1, r2
 80151e4:	683a      	ldr	r2, [r7, #0]
 80151e6:	8211      	strh	r1, [r2, #16]
 80151e8:	2b01      	cmp	r3, #1
 80151ea:	d103      	bne.n	80151f4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f000 f8c7 	bl	8015380 <dhcp_t2_timeout>
 80151f2:	e00e      	b.n	8015212 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	89db      	ldrh	r3, [r3, #14]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d00a      	beq.n	8015212 <dhcp_coarse_tmr+0x8e>
 80151fc:	683b      	ldr	r3, [r7, #0]
 80151fe:	89db      	ldrh	r3, [r3, #14]
 8015200:	1e5a      	subs	r2, r3, #1
 8015202:	b291      	uxth	r1, r2
 8015204:	683a      	ldr	r2, [r7, #0]
 8015206:	81d1      	strh	r1, [r2, #14]
 8015208:	2b01      	cmp	r3, #1
 801520a:	d102      	bne.n	8015212 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f000 f888 	bl	8015322 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	607b      	str	r3, [r7, #4]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d1b9      	bne.n	8015192 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801521e:	bf00      	nop
 8015220:	bf00      	nop
 8015222:	3708      	adds	r7, #8
 8015224:	46bd      	mov	sp, r7
 8015226:	bd80      	pop	{r7, pc}
 8015228:	2000cf18 	.word	0x2000cf18

0801522c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801522c:	b580      	push	{r7, lr}
 801522e:	b082      	sub	sp, #8
 8015230:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015232:	4b16      	ldr	r3, [pc, #88]	; (801528c <dhcp_fine_tmr+0x60>)
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	607b      	str	r3, [r7, #4]
 8015238:	e020      	b.n	801527c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801523e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	2b00      	cmp	r3, #0
 8015244:	d017      	beq.n	8015276 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	891b      	ldrh	r3, [r3, #8]
 801524a:	2b01      	cmp	r3, #1
 801524c:	d906      	bls.n	801525c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801524e:	683b      	ldr	r3, [r7, #0]
 8015250:	891b      	ldrh	r3, [r3, #8]
 8015252:	3b01      	subs	r3, #1
 8015254:	b29a      	uxth	r2, r3
 8015256:	683b      	ldr	r3, [r7, #0]
 8015258:	811a      	strh	r2, [r3, #8]
 801525a:	e00c      	b.n	8015276 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	891b      	ldrh	r3, [r3, #8]
 8015260:	2b01      	cmp	r3, #1
 8015262:	d108      	bne.n	8015276 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8015264:	683b      	ldr	r3, [r7, #0]
 8015266:	891b      	ldrh	r3, [r3, #8]
 8015268:	3b01      	subs	r3, #1
 801526a:	b29a      	uxth	r2, r3
 801526c:	683b      	ldr	r3, [r7, #0]
 801526e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015270:	6878      	ldr	r0, [r7, #4]
 8015272:	f000 f80d 	bl	8015290 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	607b      	str	r3, [r7, #4]
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	2b00      	cmp	r3, #0
 8015280:	d1db      	bne.n	801523a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015282:	bf00      	nop
 8015284:	bf00      	nop
 8015286:	3708      	adds	r7, #8
 8015288:	46bd      	mov	sp, r7
 801528a:	bd80      	pop	{r7, pc}
 801528c:	2000cf18 	.word	0x2000cf18

08015290 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	b084      	sub	sp, #16
 8015294:	af00      	add	r7, sp, #0
 8015296:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801529c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	795b      	ldrb	r3, [r3, #5]
 80152a2:	2b0c      	cmp	r3, #12
 80152a4:	d003      	beq.n	80152ae <dhcp_timeout+0x1e>
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	795b      	ldrb	r3, [r3, #5]
 80152aa:	2b06      	cmp	r3, #6
 80152ac:	d103      	bne.n	80152b6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f000 fa56 	bl	8015760 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80152b4:	e031      	b.n	801531a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	795b      	ldrb	r3, [r3, #5]
 80152ba:	2b01      	cmp	r3, #1
 80152bc:	d10e      	bne.n	80152dc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	799b      	ldrb	r3, [r3, #6]
 80152c2:	2b05      	cmp	r3, #5
 80152c4:	d803      	bhi.n	80152ce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f7ff fe60 	bl	8014f8c <dhcp_select>
}
 80152cc:	e025      	b.n	801531a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80152ce:	6878      	ldr	r0, [r7, #4]
 80152d0:	f000 fdb0 	bl	8015e34 <dhcp_release_and_stop>
      dhcp_start(netif);
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f000 f8e7 	bl	80154a8 <dhcp_start>
}
 80152da:	e01e      	b.n	801531a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80152dc:	68fb      	ldr	r3, [r7, #12]
 80152de:	795b      	ldrb	r3, [r3, #5]
 80152e0:	2b08      	cmp	r3, #8
 80152e2:	d10b      	bne.n	80152fc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	799b      	ldrb	r3, [r3, #6]
 80152e8:	2b01      	cmp	r3, #1
 80152ea:	d803      	bhi.n	80152f4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 80152ec:	6878      	ldr	r0, [r7, #4]
 80152ee:	f7ff fdf3 	bl	8014ed8 <dhcp_check>
}
 80152f2:	e012      	b.n	801531a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f000 fad5 	bl	80158a4 <dhcp_bind>
}
 80152fa:	e00e      	b.n	801531a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	795b      	ldrb	r3, [r3, #5]
 8015300:	2b03      	cmp	r3, #3
 8015302:	d10a      	bne.n	801531a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8015304:	68fb      	ldr	r3, [r7, #12]
 8015306:	799b      	ldrb	r3, [r3, #6]
 8015308:	2b01      	cmp	r3, #1
 801530a:	d803      	bhi.n	8015314 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801530c:	6878      	ldr	r0, [r7, #4]
 801530e:	f000 fcdb 	bl	8015cc8 <dhcp_reboot>
}
 8015312:	e002      	b.n	801531a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	f000 fa23 	bl	8015760 <dhcp_discover>
}
 801531a:	bf00      	nop
 801531c:	3710      	adds	r7, #16
 801531e:	46bd      	mov	sp, r7
 8015320:	bd80      	pop	{r7, pc}

08015322 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8015322:	b580      	push	{r7, lr}
 8015324:	b084      	sub	sp, #16
 8015326:	af00      	add	r7, sp, #0
 8015328:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801532e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015330:	68fb      	ldr	r3, [r7, #12]
 8015332:	795b      	ldrb	r3, [r3, #5]
 8015334:	2b01      	cmp	r3, #1
 8015336:	d007      	beq.n	8015348 <dhcp_t1_timeout+0x26>
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	795b      	ldrb	r3, [r3, #5]
 801533c:	2b0a      	cmp	r3, #10
 801533e:	d003      	beq.n	8015348 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8015344:	2b05      	cmp	r3, #5
 8015346:	d117      	bne.n	8015378 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8015348:	6878      	ldr	r0, [r7, #4]
 801534a:	f000 fb85 	bl	8015a58 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	899b      	ldrh	r3, [r3, #12]
 8015352:	461a      	mov	r2, r3
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	8a5b      	ldrh	r3, [r3, #18]
 8015358:	1ad3      	subs	r3, r2, r3
 801535a:	2b01      	cmp	r3, #1
 801535c:	dd0c      	ble.n	8015378 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	899b      	ldrh	r3, [r3, #12]
 8015362:	461a      	mov	r2, r3
 8015364:	68fb      	ldr	r3, [r7, #12]
 8015366:	8a5b      	ldrh	r3, [r3, #18]
 8015368:	1ad3      	subs	r3, r2, r3
 801536a:	2b00      	cmp	r3, #0
 801536c:	da00      	bge.n	8015370 <dhcp_t1_timeout+0x4e>
 801536e:	3301      	adds	r3, #1
 8015370:	105b      	asrs	r3, r3, #1
 8015372:	b29a      	uxth	r2, r3
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8015378:	bf00      	nop
 801537a:	3710      	adds	r7, #16
 801537c:	46bd      	mov	sp, r7
 801537e:	bd80      	pop	{r7, pc}

08015380 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8015380:	b580      	push	{r7, lr}
 8015382:	b084      	sub	sp, #16
 8015384:	af00      	add	r7, sp, #0
 8015386:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801538c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	795b      	ldrb	r3, [r3, #5]
 8015392:	2b01      	cmp	r3, #1
 8015394:	d00b      	beq.n	80153ae <dhcp_t2_timeout+0x2e>
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	795b      	ldrb	r3, [r3, #5]
 801539a:	2b0a      	cmp	r3, #10
 801539c:	d007      	beq.n	80153ae <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80153a2:	2b05      	cmp	r3, #5
 80153a4:	d003      	beq.n	80153ae <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	795b      	ldrb	r3, [r3, #5]
 80153aa:	2b04      	cmp	r3, #4
 80153ac:	d117      	bne.n	80153de <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f000 fbee 	bl	8015b90 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	8a9b      	ldrh	r3, [r3, #20]
 80153b8:	461a      	mov	r2, r3
 80153ba:	68fb      	ldr	r3, [r7, #12]
 80153bc:	8a5b      	ldrh	r3, [r3, #18]
 80153be:	1ad3      	subs	r3, r2, r3
 80153c0:	2b01      	cmp	r3, #1
 80153c2:	dd0c      	ble.n	80153de <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	8a9b      	ldrh	r3, [r3, #20]
 80153c8:	461a      	mov	r2, r3
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	8a5b      	ldrh	r3, [r3, #18]
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	da00      	bge.n	80153d6 <dhcp_t2_timeout+0x56>
 80153d4:	3301      	adds	r3, #1
 80153d6:	105b      	asrs	r3, r3, #1
 80153d8:	b29a      	uxth	r2, r3
 80153da:	68fb      	ldr	r3, [r7, #12]
 80153dc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80153de:	bf00      	nop
 80153e0:	3710      	adds	r7, #16
 80153e2:	46bd      	mov	sp, r7
 80153e4:	bd80      	pop	{r7, pc}
	...

080153e8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2200      	movs	r2, #0
 80153fc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	2200      	movs	r2, #0
 8015402:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8015404:	4b26      	ldr	r3, [pc, #152]	; (80154a0 <dhcp_handle_ack+0xb8>)
 8015406:	78db      	ldrb	r3, [r3, #3]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d003      	beq.n	8015414 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801540c:	4b25      	ldr	r3, [pc, #148]	; (80154a4 <dhcp_handle_ack+0xbc>)
 801540e:	68da      	ldr	r2, [r3, #12]
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8015414:	4b22      	ldr	r3, [pc, #136]	; (80154a0 <dhcp_handle_ack+0xb8>)
 8015416:	791b      	ldrb	r3, [r3, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d004      	beq.n	8015426 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801541c:	4b21      	ldr	r3, [pc, #132]	; (80154a4 <dhcp_handle_ack+0xbc>)
 801541e:	691a      	ldr	r2, [r3, #16]
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	62da      	str	r2, [r3, #44]	; 0x2c
 8015424:	e004      	b.n	8015430 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8015426:	68fb      	ldr	r3, [r7, #12]
 8015428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801542a:	085a      	lsrs	r2, r3, #1
 801542c:	68fb      	ldr	r3, [r7, #12]
 801542e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8015430:	4b1b      	ldr	r3, [pc, #108]	; (80154a0 <dhcp_handle_ack+0xb8>)
 8015432:	795b      	ldrb	r3, [r3, #5]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d004      	beq.n	8015442 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8015438:	4b1a      	ldr	r3, [pc, #104]	; (80154a4 <dhcp_handle_ack+0xbc>)
 801543a:	695a      	ldr	r2, [r3, #20]
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	631a      	str	r2, [r3, #48]	; 0x30
 8015440:	e007      	b.n	8015452 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8015442:	68fb      	ldr	r3, [r7, #12]
 8015444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015446:	4613      	mov	r3, r2
 8015448:	00db      	lsls	r3, r3, #3
 801544a:	1a9b      	subs	r3, r3, r2
 801544c:	08da      	lsrs	r2, r3, #3
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	691a      	ldr	r2, [r3, #16]
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801545a:	4b11      	ldr	r3, [pc, #68]	; (80154a0 <dhcp_handle_ack+0xb8>)
 801545c:	799b      	ldrb	r3, [r3, #6]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d00b      	beq.n	801547a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8015462:	4b10      	ldr	r3, [pc, #64]	; (80154a4 <dhcp_handle_ack+0xbc>)
 8015464:	699b      	ldr	r3, [r3, #24]
 8015466:	4618      	mov	r0, r3
 8015468:	f7f6 ff47 	bl	800c2fa <lwip_htonl>
 801546c:	4602      	mov	r2, r0
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	2201      	movs	r2, #1
 8015476:	71da      	strb	r2, [r3, #7]
 8015478:	e002      	b.n	8015480 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	2200      	movs	r2, #0
 801547e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8015480:	4b07      	ldr	r3, [pc, #28]	; (80154a0 <dhcp_handle_ack+0xb8>)
 8015482:	79db      	ldrb	r3, [r3, #7]
 8015484:	2b00      	cmp	r3, #0
 8015486:	d007      	beq.n	8015498 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8015488:	4b06      	ldr	r3, [pc, #24]	; (80154a4 <dhcp_handle_ack+0xbc>)
 801548a:	69db      	ldr	r3, [r3, #28]
 801548c:	4618      	mov	r0, r3
 801548e:	f7f6 ff34 	bl	800c2fa <lwip_htonl>
 8015492:	4602      	mov	r2, r0
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8015498:	bf00      	nop
 801549a:	3710      	adds	r7, #16
 801549c:	46bd      	mov	sp, r7
 801549e:	bd80      	pop	{r7, pc}
 80154a0:	2000cfa4 	.word	0x2000cfa4
 80154a4:	2000cf84 	.word	0x2000cf84

080154a8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b084      	sub	sp, #16
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d109      	bne.n	80154ca <dhcp_start+0x22>
 80154b6:	4b37      	ldr	r3, [pc, #220]	; (8015594 <dhcp_start+0xec>)
 80154b8:	f240 22e7 	movw	r2, #743	; 0x2e7
 80154bc:	4936      	ldr	r1, [pc, #216]	; (8015598 <dhcp_start+0xf0>)
 80154be:	4837      	ldr	r0, [pc, #220]	; (801559c <dhcp_start+0xf4>)
 80154c0:	f004 f884 	bl	80195cc <iprintf>
 80154c4:	f06f 030f 	mvn.w	r3, #15
 80154c8:	e060      	b.n	801558c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80154d0:	f003 0301 	and.w	r3, r3, #1
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d109      	bne.n	80154ec <dhcp_start+0x44>
 80154d8:	4b2e      	ldr	r3, [pc, #184]	; (8015594 <dhcp_start+0xec>)
 80154da:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80154de:	4930      	ldr	r1, [pc, #192]	; (80155a0 <dhcp_start+0xf8>)
 80154e0:	482e      	ldr	r0, [pc, #184]	; (801559c <dhcp_start+0xf4>)
 80154e2:	f004 f873 	bl	80195cc <iprintf>
 80154e6:	f06f 030f 	mvn.w	r3, #15
 80154ea:	e04f      	b.n	801558c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154f0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154f6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80154fa:	d202      	bcs.n	8015502 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80154fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015500:	e044      	b.n	801558c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2b00      	cmp	r3, #0
 8015506:	d10d      	bne.n	8015524 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8015508:	2034      	movs	r0, #52	; 0x34
 801550a:	f7f7 fa4b 	bl	800c9a4 <mem_malloc>
 801550e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d102      	bne.n	801551c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8015516:	f04f 33ff 	mov.w	r3, #4294967295
 801551a:	e037      	b.n	801558c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	68fa      	ldr	r2, [r7, #12]
 8015520:	625a      	str	r2, [r3, #36]	; 0x24
 8015522:	e005      	b.n	8015530 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	791b      	ldrb	r3, [r3, #4]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d001      	beq.n	8015530 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801552c:	f7ff fc90 	bl	8014e50 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8015530:	2234      	movs	r2, #52	; 0x34
 8015532:	2100      	movs	r1, #0
 8015534:	68f8      	ldr	r0, [r7, #12]
 8015536:	f004 f8ae 	bl	8019696 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801553a:	f7ff fc37 	bl	8014dac <dhcp_inc_pcb_refcount>
 801553e:	4603      	mov	r3, r0
 8015540:	2b00      	cmp	r3, #0
 8015542:	d002      	beq.n	801554a <dhcp_start+0xa2>
    return ERR_MEM;
 8015544:	f04f 33ff 	mov.w	r3, #4294967295
 8015548:	e020      	b.n	801558c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	2201      	movs	r2, #1
 801554e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015556:	f003 0304 	and.w	r3, r3, #4
 801555a:	2b00      	cmp	r3, #0
 801555c:	d105      	bne.n	801556a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801555e:	2102      	movs	r1, #2
 8015560:	68f8      	ldr	r0, [r7, #12]
 8015562:	f000 fd01 	bl	8015f68 <dhcp_set_state>
    return ERR_OK;
 8015566:	2300      	movs	r3, #0
 8015568:	e010      	b.n	801558c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	f000 f8f8 	bl	8015760 <dhcp_discover>
 8015570:	4603      	mov	r3, r0
 8015572:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015574:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d005      	beq.n	8015588 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801557c:	6878      	ldr	r0, [r7, #4]
 801557e:	f000 fc59 	bl	8015e34 <dhcp_release_and_stop>
    return ERR_MEM;
 8015582:	f04f 33ff 	mov.w	r3, #4294967295
 8015586:	e001      	b.n	801558c <dhcp_start+0xe4>
  }
  return result;
 8015588:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801558c:	4618      	mov	r0, r3
 801558e:	3710      	adds	r7, #16
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	0801cc64 	.word	0x0801cc64
 8015598:	0801cd48 	.word	0x0801cd48
 801559c:	0801ccc4 	.word	0x0801ccc4
 80155a0:	0801cd8c 	.word	0x0801cd8c

080155a4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b084      	sub	sp, #16
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155b0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d025      	beq.n	8015604 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80155b8:	68fb      	ldr	r3, [r7, #12]
 80155ba:	795b      	ldrb	r3, [r3, #5]
 80155bc:	2b0a      	cmp	r3, #10
 80155be:	d008      	beq.n	80155d2 <dhcp_network_changed+0x2e>
 80155c0:	2b0a      	cmp	r3, #10
 80155c2:	dc0d      	bgt.n	80155e0 <dhcp_network_changed+0x3c>
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d01f      	beq.n	8015608 <dhcp_network_changed+0x64>
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	db09      	blt.n	80155e0 <dhcp_network_changed+0x3c>
 80155cc:	3b03      	subs	r3, #3
 80155ce:	2b02      	cmp	r3, #2
 80155d0:	d806      	bhi.n	80155e0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80155d2:	68fb      	ldr	r3, [r7, #12]
 80155d4:	2200      	movs	r2, #0
 80155d6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80155d8:	6878      	ldr	r0, [r7, #4]
 80155da:	f000 fb75 	bl	8015cc8 <dhcp_reboot>
      break;
 80155de:	e014      	b.n	801560a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	795b      	ldrb	r3, [r3, #5]
 80155e4:	2b0c      	cmp	r3, #12
 80155e6:	d906      	bls.n	80155f6 <dhcp_network_changed+0x52>
 80155e8:	4b09      	ldr	r3, [pc, #36]	; (8015610 <dhcp_network_changed+0x6c>)
 80155ea:	f240 326d 	movw	r2, #877	; 0x36d
 80155ee:	4909      	ldr	r1, [pc, #36]	; (8015614 <dhcp_network_changed+0x70>)
 80155f0:	4809      	ldr	r0, [pc, #36]	; (8015618 <dhcp_network_changed+0x74>)
 80155f2:	f003 ffeb 	bl	80195cc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	2200      	movs	r2, #0
 80155fa:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 f8af 	bl	8015760 <dhcp_discover>
      break;
 8015602:	e002      	b.n	801560a <dhcp_network_changed+0x66>
    return;
 8015604:	bf00      	nop
 8015606:	e000      	b.n	801560a <dhcp_network_changed+0x66>
      break;
 8015608:	bf00      	nop
  }
}
 801560a:	3710      	adds	r7, #16
 801560c:	46bd      	mov	sp, r7
 801560e:	bd80      	pop	{r7, pc}
 8015610:	0801cc64 	.word	0x0801cc64
 8015614:	0801cdb0 	.word	0x0801cdb0
 8015618:	0801ccc4 	.word	0x0801ccc4

0801561c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
 8015624:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d107      	bne.n	801563c <dhcp_arp_reply+0x20>
 801562c:	4b0e      	ldr	r3, [pc, #56]	; (8015668 <dhcp_arp_reply+0x4c>)
 801562e:	f240 328b 	movw	r2, #907	; 0x38b
 8015632:	490e      	ldr	r1, [pc, #56]	; (801566c <dhcp_arp_reply+0x50>)
 8015634:	480e      	ldr	r0, [pc, #56]	; (8015670 <dhcp_arp_reply+0x54>)
 8015636:	f003 ffc9 	bl	80195cc <iprintf>
 801563a:	e012      	b.n	8015662 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015640:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2b00      	cmp	r3, #0
 8015646:	d00c      	beq.n	8015662 <dhcp_arp_reply+0x46>
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	795b      	ldrb	r3, [r3, #5]
 801564c:	2b08      	cmp	r3, #8
 801564e:	d108      	bne.n	8015662 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	681a      	ldr	r2, [r3, #0]
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	69db      	ldr	r3, [r3, #28]
 8015658:	429a      	cmp	r2, r3
 801565a:	d102      	bne.n	8015662 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f000 f809 	bl	8015674 <dhcp_decline>
    }
  }
}
 8015662:	3710      	adds	r7, #16
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}
 8015668:	0801cc64 	.word	0x0801cc64
 801566c:	0801cd48 	.word	0x0801cd48
 8015670:	0801ccc4 	.word	0x0801ccc4

08015674 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015674:	b5b0      	push	{r4, r5, r7, lr}
 8015676:	b08a      	sub	sp, #40	; 0x28
 8015678:	af02      	add	r7, sp, #8
 801567a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015680:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015682:	210c      	movs	r1, #12
 8015684:	69b8      	ldr	r0, [r7, #24]
 8015686:	f000 fc6f 	bl	8015f68 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801568a:	f107 030c 	add.w	r3, r7, #12
 801568e:	2204      	movs	r2, #4
 8015690:	69b9      	ldr	r1, [r7, #24]
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f001 f8f4 	bl	8016880 <dhcp_create_msg>
 8015698:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d035      	beq.n	801570c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80156a0:	697b      	ldr	r3, [r7, #20]
 80156a2:	685b      	ldr	r3, [r3, #4]
 80156a4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80156a6:	89b8      	ldrh	r0, [r7, #12]
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156ae:	2304      	movs	r3, #4
 80156b0:	2232      	movs	r2, #50	; 0x32
 80156b2:	f000 fc73 	bl	8015f9c <dhcp_option>
 80156b6:	4603      	mov	r3, r0
 80156b8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80156ba:	89bc      	ldrh	r4, [r7, #12]
 80156bc:	693b      	ldr	r3, [r7, #16]
 80156be:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	69db      	ldr	r3, [r3, #28]
 80156c6:	4618      	mov	r0, r3
 80156c8:	f7f6 fe17 	bl	800c2fa <lwip_htonl>
 80156cc:	4603      	mov	r3, r0
 80156ce:	461a      	mov	r2, r3
 80156d0:	4629      	mov	r1, r5
 80156d2:	4620      	mov	r0, r4
 80156d4:	f000 fcee 	bl	80160b4 <dhcp_option_long>
 80156d8:	4603      	mov	r3, r0
 80156da:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80156dc:	89b8      	ldrh	r0, [r7, #12]
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	33f0      	adds	r3, #240	; 0xf0
 80156e2:	697a      	ldr	r2, [r7, #20]
 80156e4:	4619      	mov	r1, r3
 80156e6:	f001 f9a1 	bl	8016a2c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80156ea:	4b19      	ldr	r3, [pc, #100]	; (8015750 <dhcp_decline+0xdc>)
 80156ec:	6818      	ldr	r0, [r3, #0]
 80156ee:	4b19      	ldr	r3, [pc, #100]	; (8015754 <dhcp_decline+0xe0>)
 80156f0:	9301      	str	r3, [sp, #4]
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	9300      	str	r3, [sp, #0]
 80156f6:	2343      	movs	r3, #67	; 0x43
 80156f8:	4a17      	ldr	r2, [pc, #92]	; (8015758 <dhcp_decline+0xe4>)
 80156fa:	6979      	ldr	r1, [r7, #20]
 80156fc:	f7ff f8d0 	bl	80148a0 <udp_sendto_if_src>
 8015700:	4603      	mov	r3, r0
 8015702:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015704:	6978      	ldr	r0, [r7, #20]
 8015706:	f7f8 fa17 	bl	800db38 <pbuf_free>
 801570a:	e001      	b.n	8015710 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801570c:	23ff      	movs	r3, #255	; 0xff
 801570e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015710:	69bb      	ldr	r3, [r7, #24]
 8015712:	799b      	ldrb	r3, [r3, #6]
 8015714:	2bff      	cmp	r3, #255	; 0xff
 8015716:	d005      	beq.n	8015724 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015718:	69bb      	ldr	r3, [r7, #24]
 801571a:	799b      	ldrb	r3, [r3, #6]
 801571c:	3301      	adds	r3, #1
 801571e:	b2da      	uxtb	r2, r3
 8015720:	69bb      	ldr	r3, [r7, #24]
 8015722:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015724:	f242 7310 	movw	r3, #10000	; 0x2710
 8015728:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801572a:	89fb      	ldrh	r3, [r7, #14]
 801572c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015730:	4a0a      	ldr	r2, [pc, #40]	; (801575c <dhcp_decline+0xe8>)
 8015732:	fb82 1203 	smull	r1, r2, r2, r3
 8015736:	1152      	asrs	r2, r2, #5
 8015738:	17db      	asrs	r3, r3, #31
 801573a:	1ad3      	subs	r3, r2, r3
 801573c:	b29a      	uxth	r2, r3
 801573e:	69bb      	ldr	r3, [r7, #24]
 8015740:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015742:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015746:	4618      	mov	r0, r3
 8015748:	3720      	adds	r7, #32
 801574a:	46bd      	mov	sp, r7
 801574c:	bdb0      	pop	{r4, r5, r7, pc}
 801574e:	bf00      	nop
 8015750:	2000cfac 	.word	0x2000cfac
 8015754:	0801fbb0 	.word	0x0801fbb0
 8015758:	0801fbb4 	.word	0x0801fbb4
 801575c:	10624dd3 	.word	0x10624dd3

08015760 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b08a      	sub	sp, #40	; 0x28
 8015764:	af02      	add	r7, sp, #8
 8015766:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801576c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801576e:	2300      	movs	r3, #0
 8015770:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	2200      	movs	r2, #0
 8015776:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015778:	2106      	movs	r1, #6
 801577a:	69b8      	ldr	r0, [r7, #24]
 801577c:	f000 fbf4 	bl	8015f68 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015780:	f107 0308 	add.w	r3, r7, #8
 8015784:	2201      	movs	r2, #1
 8015786:	69b9      	ldr	r1, [r7, #24]
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f001 f879 	bl	8016880 <dhcp_create_msg>
 801578e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d04b      	beq.n	801582e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015796:	693b      	ldr	r3, [r7, #16]
 8015798:	685b      	ldr	r3, [r3, #4]
 801579a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801579c:	8938      	ldrh	r0, [r7, #8]
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157a4:	2302      	movs	r3, #2
 80157a6:	2239      	movs	r2, #57	; 0x39
 80157a8:	f000 fbf8 	bl	8015f9c <dhcp_option>
 80157ac:	4603      	mov	r3, r0
 80157ae:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80157b0:	8938      	ldrh	r0, [r7, #8]
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157b8:	687b      	ldr	r3, [r7, #4]
 80157ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157bc:	461a      	mov	r2, r3
 80157be:	f000 fc47 	bl	8016050 <dhcp_option_short>
 80157c2:	4603      	mov	r3, r0
 80157c4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80157c6:	8938      	ldrh	r0, [r7, #8]
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157ce:	2303      	movs	r3, #3
 80157d0:	2237      	movs	r2, #55	; 0x37
 80157d2:	f000 fbe3 	bl	8015f9c <dhcp_option>
 80157d6:	4603      	mov	r3, r0
 80157d8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157da:	2300      	movs	r3, #0
 80157dc:	77fb      	strb	r3, [r7, #31]
 80157de:	e00e      	b.n	80157fe <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80157e0:	8938      	ldrh	r0, [r7, #8]
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80157e8:	7ffb      	ldrb	r3, [r7, #31]
 80157ea:	4a29      	ldr	r2, [pc, #164]	; (8015890 <dhcp_discover+0x130>)
 80157ec:	5cd3      	ldrb	r3, [r2, r3]
 80157ee:	461a      	mov	r2, r3
 80157f0:	f000 fc08 	bl	8016004 <dhcp_option_byte>
 80157f4:	4603      	mov	r3, r0
 80157f6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80157f8:	7ffb      	ldrb	r3, [r7, #31]
 80157fa:	3301      	adds	r3, #1
 80157fc:	77fb      	strb	r3, [r7, #31]
 80157fe:	7ffb      	ldrb	r3, [r7, #31]
 8015800:	2b02      	cmp	r3, #2
 8015802:	d9ed      	bls.n	80157e0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015804:	8938      	ldrh	r0, [r7, #8]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	33f0      	adds	r3, #240	; 0xf0
 801580a:	693a      	ldr	r2, [r7, #16]
 801580c:	4619      	mov	r1, r3
 801580e:	f001 f90d 	bl	8016a2c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015812:	4b20      	ldr	r3, [pc, #128]	; (8015894 <dhcp_discover+0x134>)
 8015814:	6818      	ldr	r0, [r3, #0]
 8015816:	4b20      	ldr	r3, [pc, #128]	; (8015898 <dhcp_discover+0x138>)
 8015818:	9301      	str	r3, [sp, #4]
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	9300      	str	r3, [sp, #0]
 801581e:	2343      	movs	r3, #67	; 0x43
 8015820:	4a1e      	ldr	r2, [pc, #120]	; (801589c <dhcp_discover+0x13c>)
 8015822:	6939      	ldr	r1, [r7, #16]
 8015824:	f7ff f83c 	bl	80148a0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015828:	6938      	ldr	r0, [r7, #16]
 801582a:	f7f8 f985 	bl	800db38 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801582e:	69bb      	ldr	r3, [r7, #24]
 8015830:	799b      	ldrb	r3, [r3, #6]
 8015832:	2bff      	cmp	r3, #255	; 0xff
 8015834:	d005      	beq.n	8015842 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	799b      	ldrb	r3, [r3, #6]
 801583a:	3301      	adds	r3, #1
 801583c:	b2da      	uxtb	r2, r3
 801583e:	69bb      	ldr	r3, [r7, #24]
 8015840:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015842:	69bb      	ldr	r3, [r7, #24]
 8015844:	799b      	ldrb	r3, [r3, #6]
 8015846:	2b05      	cmp	r3, #5
 8015848:	d80d      	bhi.n	8015866 <dhcp_discover+0x106>
 801584a:	69bb      	ldr	r3, [r7, #24]
 801584c:	799b      	ldrb	r3, [r3, #6]
 801584e:	461a      	mov	r2, r3
 8015850:	2301      	movs	r3, #1
 8015852:	4093      	lsls	r3, r2
 8015854:	b29b      	uxth	r3, r3
 8015856:	461a      	mov	r2, r3
 8015858:	0152      	lsls	r2, r2, #5
 801585a:	1ad2      	subs	r2, r2, r3
 801585c:	0092      	lsls	r2, r2, #2
 801585e:	4413      	add	r3, r2
 8015860:	00db      	lsls	r3, r3, #3
 8015862:	b29b      	uxth	r3, r3
 8015864:	e001      	b.n	801586a <dhcp_discover+0x10a>
 8015866:	f64e 2360 	movw	r3, #60000	; 0xea60
 801586a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801586c:	897b      	ldrh	r3, [r7, #10]
 801586e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015872:	4a0b      	ldr	r2, [pc, #44]	; (80158a0 <dhcp_discover+0x140>)
 8015874:	fb82 1203 	smull	r1, r2, r2, r3
 8015878:	1152      	asrs	r2, r2, #5
 801587a:	17db      	asrs	r3, r3, #31
 801587c:	1ad3      	subs	r3, r2, r3
 801587e:	b29a      	uxth	r2, r3
 8015880:	69bb      	ldr	r3, [r7, #24]
 8015882:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015884:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015888:	4618      	mov	r0, r3
 801588a:	3720      	adds	r7, #32
 801588c:	46bd      	mov	sp, r7
 801588e:	bd80      	pop	{r7, pc}
 8015890:	20000048 	.word	0x20000048
 8015894:	2000cfac 	.word	0x2000cfac
 8015898:	0801fbb0 	.word	0x0801fbb0
 801589c:	0801fbb4 	.word	0x0801fbb4
 80158a0:	10624dd3 	.word	0x10624dd3

080158a4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b088      	sub	sp, #32
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d107      	bne.n	80158c2 <dhcp_bind+0x1e>
 80158b2:	4b64      	ldr	r3, [pc, #400]	; (8015a44 <dhcp_bind+0x1a0>)
 80158b4:	f240 4215 	movw	r2, #1045	; 0x415
 80158b8:	4963      	ldr	r1, [pc, #396]	; (8015a48 <dhcp_bind+0x1a4>)
 80158ba:	4864      	ldr	r0, [pc, #400]	; (8015a4c <dhcp_bind+0x1a8>)
 80158bc:	f003 fe86 	bl	80195cc <iprintf>
 80158c0:	e0bc      	b.n	8015a3c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80158c8:	69bb      	ldr	r3, [r7, #24]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d107      	bne.n	80158de <dhcp_bind+0x3a>
 80158ce:	4b5d      	ldr	r3, [pc, #372]	; (8015a44 <dhcp_bind+0x1a0>)
 80158d0:	f240 4217 	movw	r2, #1047	; 0x417
 80158d4:	495e      	ldr	r1, [pc, #376]	; (8015a50 <dhcp_bind+0x1ac>)
 80158d6:	485d      	ldr	r0, [pc, #372]	; (8015a4c <dhcp_bind+0x1a8>)
 80158d8:	f003 fe78 	bl	80195cc <iprintf>
 80158dc:	e0ae      	b.n	8015a3c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80158de:	69bb      	ldr	r3, [r7, #24]
 80158e0:	2200      	movs	r2, #0
 80158e2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80158e4:	69bb      	ldr	r3, [r7, #24]
 80158e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158ec:	d019      	beq.n	8015922 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80158ee:	69bb      	ldr	r3, [r7, #24]
 80158f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158f2:	331e      	adds	r3, #30
 80158f4:	4a57      	ldr	r2, [pc, #348]	; (8015a54 <dhcp_bind+0x1b0>)
 80158f6:	fba2 2303 	umull	r2, r3, r2, r3
 80158fa:	095b      	lsrs	r3, r3, #5
 80158fc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015904:	d302      	bcc.n	801590c <dhcp_bind+0x68>
      timeout = 0xffff;
 8015906:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801590a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	b29a      	uxth	r2, r3
 8015910:	69bb      	ldr	r3, [r7, #24]
 8015912:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015914:	69bb      	ldr	r3, [r7, #24]
 8015916:	8a9b      	ldrh	r3, [r3, #20]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d102      	bne.n	8015922 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801591c:	69bb      	ldr	r3, [r7, #24]
 801591e:	2201      	movs	r2, #1
 8015920:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015922:	69bb      	ldr	r3, [r7, #24]
 8015924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801592a:	d01d      	beq.n	8015968 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801592c:	69bb      	ldr	r3, [r7, #24]
 801592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015930:	331e      	adds	r3, #30
 8015932:	4a48      	ldr	r2, [pc, #288]	; (8015a54 <dhcp_bind+0x1b0>)
 8015934:	fba2 2303 	umull	r2, r3, r2, r3
 8015938:	095b      	lsrs	r3, r3, #5
 801593a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015942:	d302      	bcc.n	801594a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015948:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801594a:	69fb      	ldr	r3, [r7, #28]
 801594c:	b29a      	uxth	r2, r3
 801594e:	69bb      	ldr	r3, [r7, #24]
 8015950:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015952:	69bb      	ldr	r3, [r7, #24]
 8015954:	895b      	ldrh	r3, [r3, #10]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d102      	bne.n	8015960 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	2201      	movs	r2, #1
 801595e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015960:	69bb      	ldr	r3, [r7, #24]
 8015962:	895a      	ldrh	r2, [r3, #10]
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015968:	69bb      	ldr	r3, [r7, #24]
 801596a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801596c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015970:	d01d      	beq.n	80159ae <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015972:	69bb      	ldr	r3, [r7, #24]
 8015974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015976:	331e      	adds	r3, #30
 8015978:	4a36      	ldr	r2, [pc, #216]	; (8015a54 <dhcp_bind+0x1b0>)
 801597a:	fba2 2303 	umull	r2, r3, r2, r3
 801597e:	095b      	lsrs	r3, r3, #5
 8015980:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015982:	69fb      	ldr	r3, [r7, #28]
 8015984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015988:	d302      	bcc.n	8015990 <dhcp_bind+0xec>
      timeout = 0xffff;
 801598a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801598e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015990:	69fb      	ldr	r3, [r7, #28]
 8015992:	b29a      	uxth	r2, r3
 8015994:	69bb      	ldr	r3, [r7, #24]
 8015996:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015998:	69bb      	ldr	r3, [r7, #24]
 801599a:	899b      	ldrh	r3, [r3, #12]
 801599c:	2b00      	cmp	r3, #0
 801599e:	d102      	bne.n	80159a6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80159a0:	69bb      	ldr	r3, [r7, #24]
 80159a2:	2201      	movs	r2, #1
 80159a4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80159a6:	69bb      	ldr	r3, [r7, #24]
 80159a8:	899a      	ldrh	r2, [r3, #12]
 80159aa:	69bb      	ldr	r3, [r7, #24]
 80159ac:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80159ae:	69bb      	ldr	r3, [r7, #24]
 80159b0:	895a      	ldrh	r2, [r3, #10]
 80159b2:	69bb      	ldr	r3, [r7, #24]
 80159b4:	899b      	ldrh	r3, [r3, #12]
 80159b6:	429a      	cmp	r2, r3
 80159b8:	d306      	bcc.n	80159c8 <dhcp_bind+0x124>
 80159ba:	69bb      	ldr	r3, [r7, #24]
 80159bc:	899b      	ldrh	r3, [r3, #12]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d002      	beq.n	80159c8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80159c2:	69bb      	ldr	r3, [r7, #24]
 80159c4:	2200      	movs	r2, #0
 80159c6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80159c8:	69bb      	ldr	r3, [r7, #24]
 80159ca:	79db      	ldrb	r3, [r3, #7]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d003      	beq.n	80159d8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80159d0:	69bb      	ldr	r3, [r7, #24]
 80159d2:	6a1b      	ldr	r3, [r3, #32]
 80159d4:	613b      	str	r3, [r7, #16]
 80159d6:	e014      	b.n	8015a02 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80159d8:	69bb      	ldr	r3, [r7, #24]
 80159da:	331c      	adds	r3, #28
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80159e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	db02      	blt.n	80159ee <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80159e8:	23ff      	movs	r3, #255	; 0xff
 80159ea:	613b      	str	r3, [r7, #16]
 80159ec:	e009      	b.n	8015a02 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80159ee:	7dfb      	ldrb	r3, [r7, #23]
 80159f0:	2bbf      	cmp	r3, #191	; 0xbf
 80159f2:	d903      	bls.n	80159fc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80159f4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80159f8:	613b      	str	r3, [r7, #16]
 80159fa:	e002      	b.n	8015a02 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80159fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015a00:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8015a02:	69bb      	ldr	r3, [r7, #24]
 8015a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a06:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d108      	bne.n	8015a20 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8015a0e:	69bb      	ldr	r3, [r7, #24]
 8015a10:	69da      	ldr	r2, [r3, #28]
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	4013      	ands	r3, r2
 8015a16:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015a18:	68fb      	ldr	r3, [r7, #12]
 8015a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8015a1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015a20:	210a      	movs	r1, #10
 8015a22:	69b8      	ldr	r0, [r7, #24]
 8015a24:	f000 faa0 	bl	8015f68 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	f103 011c 	add.w	r1, r3, #28
 8015a2e:	f107 030c 	add.w	r3, r7, #12
 8015a32:	f107 0210 	add.w	r2, r7, #16
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f7f7 fb70 	bl	800d11c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8015a3c:	3720      	adds	r7, #32
 8015a3e:	46bd      	mov	sp, r7
 8015a40:	bd80      	pop	{r7, pc}
 8015a42:	bf00      	nop
 8015a44:	0801cc64 	.word	0x0801cc64
 8015a48:	0801cdc4 	.word	0x0801cdc4
 8015a4c:	0801ccc4 	.word	0x0801ccc4
 8015a50:	0801cde0 	.word	0x0801cde0
 8015a54:	88888889 	.word	0x88888889

08015a58 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b08a      	sub	sp, #40	; 0x28
 8015a5c:	af02      	add	r7, sp, #8
 8015a5e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a64:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015a66:	2105      	movs	r1, #5
 8015a68:	69b8      	ldr	r0, [r7, #24]
 8015a6a:	f000 fa7d 	bl	8015f68 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015a6e:	f107 030c 	add.w	r3, r7, #12
 8015a72:	2203      	movs	r2, #3
 8015a74:	69b9      	ldr	r1, [r7, #24]
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f000 ff02 	bl	8016880 <dhcp_create_msg>
 8015a7c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d04e      	beq.n	8015b22 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015a84:	697b      	ldr	r3, [r7, #20]
 8015a86:	685b      	ldr	r3, [r3, #4]
 8015a88:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015a8a:	89b8      	ldrh	r0, [r7, #12]
 8015a8c:	693b      	ldr	r3, [r7, #16]
 8015a8e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015a92:	2302      	movs	r3, #2
 8015a94:	2239      	movs	r2, #57	; 0x39
 8015a96:	f000 fa81 	bl	8015f9c <dhcp_option>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015a9e:	89b8      	ldrh	r0, [r7, #12]
 8015aa0:	693b      	ldr	r3, [r7, #16]
 8015aa2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015aaa:	461a      	mov	r2, r3
 8015aac:	f000 fad0 	bl	8016050 <dhcp_option_short>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015ab4:	89b8      	ldrh	r0, [r7, #12]
 8015ab6:	693b      	ldr	r3, [r7, #16]
 8015ab8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015abc:	2303      	movs	r3, #3
 8015abe:	2237      	movs	r2, #55	; 0x37
 8015ac0:	f000 fa6c 	bl	8015f9c <dhcp_option>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ac8:	2300      	movs	r3, #0
 8015aca:	77bb      	strb	r3, [r7, #30]
 8015acc:	e00e      	b.n	8015aec <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015ace:	89b8      	ldrh	r0, [r7, #12]
 8015ad0:	693b      	ldr	r3, [r7, #16]
 8015ad2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ad6:	7fbb      	ldrb	r3, [r7, #30]
 8015ad8:	4a2a      	ldr	r2, [pc, #168]	; (8015b84 <dhcp_renew+0x12c>)
 8015ada:	5cd3      	ldrb	r3, [r2, r3]
 8015adc:	461a      	mov	r2, r3
 8015ade:	f000 fa91 	bl	8016004 <dhcp_option_byte>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015ae6:	7fbb      	ldrb	r3, [r7, #30]
 8015ae8:	3301      	adds	r3, #1
 8015aea:	77bb      	strb	r3, [r7, #30]
 8015aec:	7fbb      	ldrb	r3, [r7, #30]
 8015aee:	2b02      	cmp	r3, #2
 8015af0:	d9ed      	bls.n	8015ace <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015af2:	89b8      	ldrh	r0, [r7, #12]
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	33f0      	adds	r3, #240	; 0xf0
 8015af8:	697a      	ldr	r2, [r7, #20]
 8015afa:	4619      	mov	r1, r3
 8015afc:	f000 ff96 	bl	8016a2c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015b00:	4b21      	ldr	r3, [pc, #132]	; (8015b88 <dhcp_renew+0x130>)
 8015b02:	6818      	ldr	r0, [r3, #0]
 8015b04:	69bb      	ldr	r3, [r7, #24]
 8015b06:	f103 0218 	add.w	r2, r3, #24
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	9300      	str	r3, [sp, #0]
 8015b0e:	2343      	movs	r3, #67	; 0x43
 8015b10:	6979      	ldr	r1, [r7, #20]
 8015b12:	f7fe fe51 	bl	80147b8 <udp_sendto_if>
 8015b16:	4603      	mov	r3, r0
 8015b18:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015b1a:	6978      	ldr	r0, [r7, #20]
 8015b1c:	f7f8 f80c 	bl	800db38 <pbuf_free>
 8015b20:	e001      	b.n	8015b26 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015b22:	23ff      	movs	r3, #255	; 0xff
 8015b24:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015b26:	69bb      	ldr	r3, [r7, #24]
 8015b28:	799b      	ldrb	r3, [r3, #6]
 8015b2a:	2bff      	cmp	r3, #255	; 0xff
 8015b2c:	d005      	beq.n	8015b3a <dhcp_renew+0xe2>
    dhcp->tries++;
 8015b2e:	69bb      	ldr	r3, [r7, #24]
 8015b30:	799b      	ldrb	r3, [r3, #6]
 8015b32:	3301      	adds	r3, #1
 8015b34:	b2da      	uxtb	r2, r3
 8015b36:	69bb      	ldr	r3, [r7, #24]
 8015b38:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8015b3a:	69bb      	ldr	r3, [r7, #24]
 8015b3c:	799b      	ldrb	r3, [r3, #6]
 8015b3e:	2b09      	cmp	r3, #9
 8015b40:	d80a      	bhi.n	8015b58 <dhcp_renew+0x100>
 8015b42:	69bb      	ldr	r3, [r7, #24]
 8015b44:	799b      	ldrb	r3, [r3, #6]
 8015b46:	b29b      	uxth	r3, r3
 8015b48:	461a      	mov	r2, r3
 8015b4a:	0152      	lsls	r2, r2, #5
 8015b4c:	1ad2      	subs	r2, r2, r3
 8015b4e:	0092      	lsls	r2, r2, #2
 8015b50:	4413      	add	r3, r2
 8015b52:	011b      	lsls	r3, r3, #4
 8015b54:	b29b      	uxth	r3, r3
 8015b56:	e001      	b.n	8015b5c <dhcp_renew+0x104>
 8015b58:	f644 6320 	movw	r3, #20000	; 0x4e20
 8015b5c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b5e:	89fb      	ldrh	r3, [r7, #14]
 8015b60:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015b64:	4a09      	ldr	r2, [pc, #36]	; (8015b8c <dhcp_renew+0x134>)
 8015b66:	fb82 1203 	smull	r1, r2, r2, r3
 8015b6a:	1152      	asrs	r2, r2, #5
 8015b6c:	17db      	asrs	r3, r3, #31
 8015b6e:	1ad3      	subs	r3, r2, r3
 8015b70:	b29a      	uxth	r2, r3
 8015b72:	69bb      	ldr	r3, [r7, #24]
 8015b74:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015b76:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3720      	adds	r7, #32
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}
 8015b82:	bf00      	nop
 8015b84:	20000048 	.word	0x20000048
 8015b88:	2000cfac 	.word	0x2000cfac
 8015b8c:	10624dd3 	.word	0x10624dd3

08015b90 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b08a      	sub	sp, #40	; 0x28
 8015b94:	af02      	add	r7, sp, #8
 8015b96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8015b9e:	2104      	movs	r1, #4
 8015ba0:	69b8      	ldr	r0, [r7, #24]
 8015ba2:	f000 f9e1 	bl	8015f68 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015ba6:	f107 030c 	add.w	r3, r7, #12
 8015baa:	2203      	movs	r2, #3
 8015bac:	69b9      	ldr	r1, [r7, #24]
 8015bae:	6878      	ldr	r0, [r7, #4]
 8015bb0:	f000 fe66 	bl	8016880 <dhcp_create_msg>
 8015bb4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d04c      	beq.n	8015c56 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	685b      	ldr	r3, [r3, #4]
 8015bc0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015bc2:	89b8      	ldrh	r0, [r7, #12]
 8015bc4:	693b      	ldr	r3, [r7, #16]
 8015bc6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bca:	2302      	movs	r3, #2
 8015bcc:	2239      	movs	r2, #57	; 0x39
 8015bce:	f000 f9e5 	bl	8015f9c <dhcp_option>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015bd6:	89b8      	ldrh	r0, [r7, #12]
 8015bd8:	693b      	ldr	r3, [r7, #16]
 8015bda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015be2:	461a      	mov	r2, r3
 8015be4:	f000 fa34 	bl	8016050 <dhcp_option_short>
 8015be8:	4603      	mov	r3, r0
 8015bea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015bec:	89b8      	ldrh	r0, [r7, #12]
 8015bee:	693b      	ldr	r3, [r7, #16]
 8015bf0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015bf4:	2303      	movs	r3, #3
 8015bf6:	2237      	movs	r2, #55	; 0x37
 8015bf8:	f000 f9d0 	bl	8015f9c <dhcp_option>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015c00:	2300      	movs	r3, #0
 8015c02:	77bb      	strb	r3, [r7, #30]
 8015c04:	e00e      	b.n	8015c24 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015c06:	89b8      	ldrh	r0, [r7, #12]
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015c0e:	7fbb      	ldrb	r3, [r7, #30]
 8015c10:	4a29      	ldr	r2, [pc, #164]	; (8015cb8 <dhcp_rebind+0x128>)
 8015c12:	5cd3      	ldrb	r3, [r2, r3]
 8015c14:	461a      	mov	r2, r3
 8015c16:	f000 f9f5 	bl	8016004 <dhcp_option_byte>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015c1e:	7fbb      	ldrb	r3, [r7, #30]
 8015c20:	3301      	adds	r3, #1
 8015c22:	77bb      	strb	r3, [r7, #30]
 8015c24:	7fbb      	ldrb	r3, [r7, #30]
 8015c26:	2b02      	cmp	r3, #2
 8015c28:	d9ed      	bls.n	8015c06 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015c2a:	89b8      	ldrh	r0, [r7, #12]
 8015c2c:	693b      	ldr	r3, [r7, #16]
 8015c2e:	33f0      	adds	r3, #240	; 0xf0
 8015c30:	697a      	ldr	r2, [r7, #20]
 8015c32:	4619      	mov	r1, r3
 8015c34:	f000 fefa 	bl	8016a2c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015c38:	4b20      	ldr	r3, [pc, #128]	; (8015cbc <dhcp_rebind+0x12c>)
 8015c3a:	6818      	ldr	r0, [r3, #0]
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	9300      	str	r3, [sp, #0]
 8015c40:	2343      	movs	r3, #67	; 0x43
 8015c42:	4a1f      	ldr	r2, [pc, #124]	; (8015cc0 <dhcp_rebind+0x130>)
 8015c44:	6979      	ldr	r1, [r7, #20]
 8015c46:	f7fe fdb7 	bl	80147b8 <udp_sendto_if>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015c4e:	6978      	ldr	r0, [r7, #20]
 8015c50:	f7f7 ff72 	bl	800db38 <pbuf_free>
 8015c54:	e001      	b.n	8015c5a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015c56:	23ff      	movs	r3, #255	; 0xff
 8015c58:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015c5a:	69bb      	ldr	r3, [r7, #24]
 8015c5c:	799b      	ldrb	r3, [r3, #6]
 8015c5e:	2bff      	cmp	r3, #255	; 0xff
 8015c60:	d005      	beq.n	8015c6e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015c62:	69bb      	ldr	r3, [r7, #24]
 8015c64:	799b      	ldrb	r3, [r3, #6]
 8015c66:	3301      	adds	r3, #1
 8015c68:	b2da      	uxtb	r2, r3
 8015c6a:	69bb      	ldr	r3, [r7, #24]
 8015c6c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015c6e:	69bb      	ldr	r3, [r7, #24]
 8015c70:	799b      	ldrb	r3, [r3, #6]
 8015c72:	2b09      	cmp	r3, #9
 8015c74:	d80a      	bhi.n	8015c8c <dhcp_rebind+0xfc>
 8015c76:	69bb      	ldr	r3, [r7, #24]
 8015c78:	799b      	ldrb	r3, [r3, #6]
 8015c7a:	b29b      	uxth	r3, r3
 8015c7c:	461a      	mov	r2, r3
 8015c7e:	0152      	lsls	r2, r2, #5
 8015c80:	1ad2      	subs	r2, r2, r3
 8015c82:	0092      	lsls	r2, r2, #2
 8015c84:	4413      	add	r3, r2
 8015c86:	00db      	lsls	r3, r3, #3
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	e001      	b.n	8015c90 <dhcp_rebind+0x100>
 8015c8c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015c90:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015c92:	89fb      	ldrh	r3, [r7, #14]
 8015c94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015c98:	4a0a      	ldr	r2, [pc, #40]	; (8015cc4 <dhcp_rebind+0x134>)
 8015c9a:	fb82 1203 	smull	r1, r2, r2, r3
 8015c9e:	1152      	asrs	r2, r2, #5
 8015ca0:	17db      	asrs	r3, r3, #31
 8015ca2:	1ad3      	subs	r3, r2, r3
 8015ca4:	b29a      	uxth	r2, r3
 8015ca6:	69bb      	ldr	r3, [r7, #24]
 8015ca8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015caa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3720      	adds	r7, #32
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	20000048 	.word	0x20000048
 8015cbc:	2000cfac 	.word	0x2000cfac
 8015cc0:	0801fbb4 	.word	0x0801fbb4
 8015cc4:	10624dd3 	.word	0x10624dd3

08015cc8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8015cc8:	b5b0      	push	{r4, r5, r7, lr}
 8015cca:	b08a      	sub	sp, #40	; 0x28
 8015ccc:	af02      	add	r7, sp, #8
 8015cce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cd4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8015cd6:	2103      	movs	r1, #3
 8015cd8:	69b8      	ldr	r0, [r7, #24]
 8015cda:	f000 f945 	bl	8015f68 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015cde:	f107 030c 	add.w	r3, r7, #12
 8015ce2:	2203      	movs	r2, #3
 8015ce4:	69b9      	ldr	r1, [r7, #24]
 8015ce6:	6878      	ldr	r0, [r7, #4]
 8015ce8:	f000 fdca 	bl	8016880 <dhcp_create_msg>
 8015cec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d066      	beq.n	8015dc2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015cf4:	697b      	ldr	r3, [r7, #20]
 8015cf6:	685b      	ldr	r3, [r3, #4]
 8015cf8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015cfa:	89b8      	ldrh	r0, [r7, #12]
 8015cfc:	693b      	ldr	r3, [r7, #16]
 8015cfe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d02:	2302      	movs	r3, #2
 8015d04:	2239      	movs	r2, #57	; 0x39
 8015d06:	f000 f949 	bl	8015f9c <dhcp_option>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8015d0e:	89b8      	ldrh	r0, [r7, #12]
 8015d10:	693b      	ldr	r3, [r7, #16]
 8015d12:	33f0      	adds	r3, #240	; 0xf0
 8015d14:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015d18:	4619      	mov	r1, r3
 8015d1a:	f000 f999 	bl	8016050 <dhcp_option_short>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015d22:	89b8      	ldrh	r0, [r7, #12]
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d2a:	2304      	movs	r3, #4
 8015d2c:	2232      	movs	r2, #50	; 0x32
 8015d2e:	f000 f935 	bl	8015f9c <dhcp_option>
 8015d32:	4603      	mov	r3, r0
 8015d34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015d36:	89bc      	ldrh	r4, [r7, #12]
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015d3e:	69bb      	ldr	r3, [r7, #24]
 8015d40:	69db      	ldr	r3, [r3, #28]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7f6 fad9 	bl	800c2fa <lwip_htonl>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	4629      	mov	r1, r5
 8015d4e:	4620      	mov	r0, r4
 8015d50:	f000 f9b0 	bl	80160b4 <dhcp_option_long>
 8015d54:	4603      	mov	r3, r0
 8015d56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015d58:	89b8      	ldrh	r0, [r7, #12]
 8015d5a:	693b      	ldr	r3, [r7, #16]
 8015d5c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d60:	2303      	movs	r3, #3
 8015d62:	2237      	movs	r2, #55	; 0x37
 8015d64:	f000 f91a 	bl	8015f9c <dhcp_option>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	77bb      	strb	r3, [r7, #30]
 8015d70:	e00e      	b.n	8015d90 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015d72:	89b8      	ldrh	r0, [r7, #12]
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015d7a:	7fbb      	ldrb	r3, [r7, #30]
 8015d7c:	4a29      	ldr	r2, [pc, #164]	; (8015e24 <dhcp_reboot+0x15c>)
 8015d7e:	5cd3      	ldrb	r3, [r2, r3]
 8015d80:	461a      	mov	r2, r3
 8015d82:	f000 f93f 	bl	8016004 <dhcp_option_byte>
 8015d86:	4603      	mov	r3, r0
 8015d88:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015d8a:	7fbb      	ldrb	r3, [r7, #30]
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	77bb      	strb	r3, [r7, #30]
 8015d90:	7fbb      	ldrb	r3, [r7, #30]
 8015d92:	2b02      	cmp	r3, #2
 8015d94:	d9ed      	bls.n	8015d72 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015d96:	89b8      	ldrh	r0, [r7, #12]
 8015d98:	693b      	ldr	r3, [r7, #16]
 8015d9a:	33f0      	adds	r3, #240	; 0xf0
 8015d9c:	697a      	ldr	r2, [r7, #20]
 8015d9e:	4619      	mov	r1, r3
 8015da0:	f000 fe44 	bl	8016a2c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015da4:	4b20      	ldr	r3, [pc, #128]	; (8015e28 <dhcp_reboot+0x160>)
 8015da6:	6818      	ldr	r0, [r3, #0]
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	9300      	str	r3, [sp, #0]
 8015dac:	2343      	movs	r3, #67	; 0x43
 8015dae:	4a1f      	ldr	r2, [pc, #124]	; (8015e2c <dhcp_reboot+0x164>)
 8015db0:	6979      	ldr	r1, [r7, #20]
 8015db2:	f7fe fd01 	bl	80147b8 <udp_sendto_if>
 8015db6:	4603      	mov	r3, r0
 8015db8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015dba:	6978      	ldr	r0, [r7, #20]
 8015dbc:	f7f7 febc 	bl	800db38 <pbuf_free>
 8015dc0:	e001      	b.n	8015dc6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015dc2:	23ff      	movs	r3, #255	; 0xff
 8015dc4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015dc6:	69bb      	ldr	r3, [r7, #24]
 8015dc8:	799b      	ldrb	r3, [r3, #6]
 8015dca:	2bff      	cmp	r3, #255	; 0xff
 8015dcc:	d005      	beq.n	8015dda <dhcp_reboot+0x112>
    dhcp->tries++;
 8015dce:	69bb      	ldr	r3, [r7, #24]
 8015dd0:	799b      	ldrb	r3, [r3, #6]
 8015dd2:	3301      	adds	r3, #1
 8015dd4:	b2da      	uxtb	r2, r3
 8015dd6:	69bb      	ldr	r3, [r7, #24]
 8015dd8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	799b      	ldrb	r3, [r3, #6]
 8015dde:	2b09      	cmp	r3, #9
 8015de0:	d80a      	bhi.n	8015df8 <dhcp_reboot+0x130>
 8015de2:	69bb      	ldr	r3, [r7, #24]
 8015de4:	799b      	ldrb	r3, [r3, #6]
 8015de6:	b29b      	uxth	r3, r3
 8015de8:	461a      	mov	r2, r3
 8015dea:	0152      	lsls	r2, r2, #5
 8015dec:	1ad2      	subs	r2, r2, r3
 8015dee:	0092      	lsls	r2, r2, #2
 8015df0:	4413      	add	r3, r2
 8015df2:	00db      	lsls	r3, r3, #3
 8015df4:	b29b      	uxth	r3, r3
 8015df6:	e001      	b.n	8015dfc <dhcp_reboot+0x134>
 8015df8:	f242 7310 	movw	r3, #10000	; 0x2710
 8015dfc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015dfe:	89fb      	ldrh	r3, [r7, #14]
 8015e00:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015e04:	4a0a      	ldr	r2, [pc, #40]	; (8015e30 <dhcp_reboot+0x168>)
 8015e06:	fb82 1203 	smull	r1, r2, r2, r3
 8015e0a:	1152      	asrs	r2, r2, #5
 8015e0c:	17db      	asrs	r3, r3, #31
 8015e0e:	1ad3      	subs	r3, r2, r3
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	69bb      	ldr	r3, [r7, #24]
 8015e14:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015e16:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3720      	adds	r7, #32
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bdb0      	pop	{r4, r5, r7, pc}
 8015e22:	bf00      	nop
 8015e24:	20000048 	.word	0x20000048
 8015e28:	2000cfac 	.word	0x2000cfac
 8015e2c:	0801fbb4 	.word	0x0801fbb4
 8015e30:	10624dd3 	.word	0x10624dd3

08015e34 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015e34:	b5b0      	push	{r4, r5, r7, lr}
 8015e36:	b08a      	sub	sp, #40	; 0x28
 8015e38:	af02      	add	r7, sp, #8
 8015e3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e40:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015e42:	69fb      	ldr	r3, [r7, #28]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	f000 8084 	beq.w	8015f52 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8015e4a:	69fb      	ldr	r3, [r7, #28]
 8015e4c:	795b      	ldrb	r3, [r3, #5]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	f000 8081 	beq.w	8015f56 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015e54:	69fb      	ldr	r3, [r7, #28]
 8015e56:	699b      	ldr	r3, [r3, #24]
 8015e58:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8015e5a:	69fb      	ldr	r3, [r7, #28]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015e60:	69fb      	ldr	r3, [r7, #28]
 8015e62:	2200      	movs	r2, #0
 8015e64:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	2200      	movs	r2, #0
 8015e6a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8015e6c:	69fb      	ldr	r3, [r7, #28]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015e72:	69fb      	ldr	r3, [r7, #28]
 8015e74:	2200      	movs	r2, #0
 8015e76:	631a      	str	r2, [r3, #48]	; 0x30
 8015e78:	69fb      	ldr	r3, [r7, #28]
 8015e7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015e7c:	69fb      	ldr	r3, [r7, #28]
 8015e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015e80:	69fb      	ldr	r3, [r7, #28]
 8015e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e84:	69fb      	ldr	r3, [r7, #28]
 8015e86:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	829a      	strh	r2, [r3, #20]
 8015e8e:	69fb      	ldr	r3, [r7, #28]
 8015e90:	8a9a      	ldrh	r2, [r3, #20]
 8015e92:	69fb      	ldr	r3, [r7, #28]
 8015e94:	825a      	strh	r2, [r3, #18]
 8015e96:	69fb      	ldr	r3, [r7, #28]
 8015e98:	8a5a      	ldrh	r2, [r3, #18]
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	821a      	strh	r2, [r3, #16]
 8015e9e:	69fb      	ldr	r3, [r7, #28]
 8015ea0:	8a1a      	ldrh	r2, [r3, #16]
 8015ea2:	69fb      	ldr	r3, [r7, #28]
 8015ea4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015ea6:	6878      	ldr	r0, [r7, #4]
 8015ea8:	f000 fdee 	bl	8016a88 <dhcp_supplied_address>
 8015eac:	4603      	mov	r3, r0
 8015eae:	2b00      	cmp	r3, #0
 8015eb0:	d03b      	beq.n	8015f2a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8015eb2:	f107 030e 	add.w	r3, r7, #14
 8015eb6:	2207      	movs	r2, #7
 8015eb8:	69f9      	ldr	r1, [r7, #28]
 8015eba:	6878      	ldr	r0, [r7, #4]
 8015ebc:	f000 fce0 	bl	8016880 <dhcp_create_msg>
 8015ec0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d030      	beq.n	8015f2a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	685b      	ldr	r3, [r3, #4]
 8015ecc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015ece:	89f8      	ldrh	r0, [r7, #14]
 8015ed0:	697b      	ldr	r3, [r7, #20]
 8015ed2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015ed6:	2304      	movs	r3, #4
 8015ed8:	2236      	movs	r2, #54	; 0x36
 8015eda:	f000 f85f 	bl	8015f9c <dhcp_option>
 8015ede:	4603      	mov	r3, r0
 8015ee0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8015ee2:	89fc      	ldrh	r4, [r7, #14]
 8015ee4:	697b      	ldr	r3, [r7, #20]
 8015ee6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	4618      	mov	r0, r3
 8015eee:	f7f6 fa04 	bl	800c2fa <lwip_htonl>
 8015ef2:	4603      	mov	r3, r0
 8015ef4:	461a      	mov	r2, r3
 8015ef6:	4629      	mov	r1, r5
 8015ef8:	4620      	mov	r0, r4
 8015efa:	f000 f8db 	bl	80160b4 <dhcp_option_long>
 8015efe:	4603      	mov	r3, r0
 8015f00:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015f02:	89f8      	ldrh	r0, [r7, #14]
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	33f0      	adds	r3, #240	; 0xf0
 8015f08:	69ba      	ldr	r2, [r7, #24]
 8015f0a:	4619      	mov	r1, r3
 8015f0c:	f000 fd8e 	bl	8016a2c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015f10:	4b13      	ldr	r3, [pc, #76]	; (8015f60 <dhcp_release_and_stop+0x12c>)
 8015f12:	6818      	ldr	r0, [r3, #0]
 8015f14:	f107 0210 	add.w	r2, r7, #16
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	9300      	str	r3, [sp, #0]
 8015f1c:	2343      	movs	r3, #67	; 0x43
 8015f1e:	69b9      	ldr	r1, [r7, #24]
 8015f20:	f7fe fc4a 	bl	80147b8 <udp_sendto_if>
      pbuf_free(p_out);
 8015f24:	69b8      	ldr	r0, [r7, #24]
 8015f26:	f7f7 fe07 	bl	800db38 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015f2a:	4b0e      	ldr	r3, [pc, #56]	; (8015f64 <dhcp_release_and_stop+0x130>)
 8015f2c:	4a0d      	ldr	r2, [pc, #52]	; (8015f64 <dhcp_release_and_stop+0x130>)
 8015f2e:	490d      	ldr	r1, [pc, #52]	; (8015f64 <dhcp_release_and_stop+0x130>)
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f7f7 f8f3 	bl	800d11c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015f36:	2100      	movs	r1, #0
 8015f38:	69f8      	ldr	r0, [r7, #28]
 8015f3a:	f000 f815 	bl	8015f68 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	791b      	ldrb	r3, [r3, #4]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d008      	beq.n	8015f58 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015f46:	f7fe ff83 	bl	8014e50 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8015f4a:	69fb      	ldr	r3, [r7, #28]
 8015f4c:	2200      	movs	r2, #0
 8015f4e:	711a      	strb	r2, [r3, #4]
 8015f50:	e002      	b.n	8015f58 <dhcp_release_and_stop+0x124>
    return;
 8015f52:	bf00      	nop
 8015f54:	e000      	b.n	8015f58 <dhcp_release_and_stop+0x124>
    return;
 8015f56:	bf00      	nop
  }
}
 8015f58:	3720      	adds	r7, #32
 8015f5a:	46bd      	mov	sp, r7
 8015f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8015f5e:	bf00      	nop
 8015f60:	2000cfac 	.word	0x2000cfac
 8015f64:	0801fbb0 	.word	0x0801fbb0

08015f68 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015f68:	b480      	push	{r7}
 8015f6a:	b083      	sub	sp, #12
 8015f6c:	af00      	add	r7, sp, #0
 8015f6e:	6078      	str	r0, [r7, #4]
 8015f70:	460b      	mov	r3, r1
 8015f72:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	795b      	ldrb	r3, [r3, #5]
 8015f78:	78fa      	ldrb	r2, [r7, #3]
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d008      	beq.n	8015f90 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	78fa      	ldrb	r2, [r7, #3]
 8015f82:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	2200      	movs	r2, #0
 8015f88:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	811a      	strh	r2, [r3, #8]
  }
}
 8015f90:	bf00      	nop
 8015f92:	370c      	adds	r7, #12
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr

08015f9c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b082      	sub	sp, #8
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6039      	str	r1, [r7, #0]
 8015fa4:	4611      	mov	r1, r2
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	4603      	mov	r3, r0
 8015faa:	80fb      	strh	r3, [r7, #6]
 8015fac:	460b      	mov	r3, r1
 8015fae:	717b      	strb	r3, [r7, #5]
 8015fb0:	4613      	mov	r3, r2
 8015fb2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8015fb4:	88fa      	ldrh	r2, [r7, #6]
 8015fb6:	793b      	ldrb	r3, [r7, #4]
 8015fb8:	4413      	add	r3, r2
 8015fba:	3302      	adds	r3, #2
 8015fbc:	2b44      	cmp	r3, #68	; 0x44
 8015fbe:	d906      	bls.n	8015fce <dhcp_option+0x32>
 8015fc0:	4b0d      	ldr	r3, [pc, #52]	; (8015ff8 <dhcp_option+0x5c>)
 8015fc2:	f240 529a 	movw	r2, #1434	; 0x59a
 8015fc6:	490d      	ldr	r1, [pc, #52]	; (8015ffc <dhcp_option+0x60>)
 8015fc8:	480d      	ldr	r0, [pc, #52]	; (8016000 <dhcp_option+0x64>)
 8015fca:	f003 faff 	bl	80195cc <iprintf>
  options[options_out_len++] = option_type;
 8015fce:	88fb      	ldrh	r3, [r7, #6]
 8015fd0:	1c5a      	adds	r2, r3, #1
 8015fd2:	80fa      	strh	r2, [r7, #6]
 8015fd4:	461a      	mov	r2, r3
 8015fd6:	683b      	ldr	r3, [r7, #0]
 8015fd8:	4413      	add	r3, r2
 8015fda:	797a      	ldrb	r2, [r7, #5]
 8015fdc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8015fde:	88fb      	ldrh	r3, [r7, #6]
 8015fe0:	1c5a      	adds	r2, r3, #1
 8015fe2:	80fa      	strh	r2, [r7, #6]
 8015fe4:	461a      	mov	r2, r3
 8015fe6:	683b      	ldr	r3, [r7, #0]
 8015fe8:	4413      	add	r3, r2
 8015fea:	793a      	ldrb	r2, [r7, #4]
 8015fec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015fee:	88fb      	ldrh	r3, [r7, #6]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	0801cc64 	.word	0x0801cc64
 8015ffc:	0801cdf8 	.word	0x0801cdf8
 8016000:	0801ccc4 	.word	0x0801ccc4

08016004 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8016004:	b580      	push	{r7, lr}
 8016006:	b082      	sub	sp, #8
 8016008:	af00      	add	r7, sp, #0
 801600a:	4603      	mov	r3, r0
 801600c:	6039      	str	r1, [r7, #0]
 801600e:	80fb      	strh	r3, [r7, #6]
 8016010:	4613      	mov	r3, r2
 8016012:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8016014:	88fb      	ldrh	r3, [r7, #6]
 8016016:	2b43      	cmp	r3, #67	; 0x43
 8016018:	d906      	bls.n	8016028 <dhcp_option_byte+0x24>
 801601a:	4b0a      	ldr	r3, [pc, #40]	; (8016044 <dhcp_option_byte+0x40>)
 801601c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8016020:	4909      	ldr	r1, [pc, #36]	; (8016048 <dhcp_option_byte+0x44>)
 8016022:	480a      	ldr	r0, [pc, #40]	; (801604c <dhcp_option_byte+0x48>)
 8016024:	f003 fad2 	bl	80195cc <iprintf>
  options[options_out_len++] = value;
 8016028:	88fb      	ldrh	r3, [r7, #6]
 801602a:	1c5a      	adds	r2, r3, #1
 801602c:	80fa      	strh	r2, [r7, #6]
 801602e:	461a      	mov	r2, r3
 8016030:	683b      	ldr	r3, [r7, #0]
 8016032:	4413      	add	r3, r2
 8016034:	797a      	ldrb	r2, [r7, #5]
 8016036:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016038:	88fb      	ldrh	r3, [r7, #6]
}
 801603a:	4618      	mov	r0, r3
 801603c:	3708      	adds	r7, #8
 801603e:	46bd      	mov	sp, r7
 8016040:	bd80      	pop	{r7, pc}
 8016042:	bf00      	nop
 8016044:	0801cc64 	.word	0x0801cc64
 8016048:	0801ce3c 	.word	0x0801ce3c
 801604c:	0801ccc4 	.word	0x0801ccc4

08016050 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8016050:	b580      	push	{r7, lr}
 8016052:	b082      	sub	sp, #8
 8016054:	af00      	add	r7, sp, #0
 8016056:	4603      	mov	r3, r0
 8016058:	6039      	str	r1, [r7, #0]
 801605a:	80fb      	strh	r3, [r7, #6]
 801605c:	4613      	mov	r3, r2
 801605e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8016060:	88fb      	ldrh	r3, [r7, #6]
 8016062:	3302      	adds	r3, #2
 8016064:	2b44      	cmp	r3, #68	; 0x44
 8016066:	d906      	bls.n	8016076 <dhcp_option_short+0x26>
 8016068:	4b0f      	ldr	r3, [pc, #60]	; (80160a8 <dhcp_option_short+0x58>)
 801606a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801606e:	490f      	ldr	r1, [pc, #60]	; (80160ac <dhcp_option_short+0x5c>)
 8016070:	480f      	ldr	r0, [pc, #60]	; (80160b0 <dhcp_option_short+0x60>)
 8016072:	f003 faab 	bl	80195cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8016076:	88bb      	ldrh	r3, [r7, #4]
 8016078:	0a1b      	lsrs	r3, r3, #8
 801607a:	b29a      	uxth	r2, r3
 801607c:	88fb      	ldrh	r3, [r7, #6]
 801607e:	1c59      	adds	r1, r3, #1
 8016080:	80f9      	strh	r1, [r7, #6]
 8016082:	4619      	mov	r1, r3
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	440b      	add	r3, r1
 8016088:	b2d2      	uxtb	r2, r2
 801608a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801608c:	88fb      	ldrh	r3, [r7, #6]
 801608e:	1c5a      	adds	r2, r3, #1
 8016090:	80fa      	strh	r2, [r7, #6]
 8016092:	461a      	mov	r2, r3
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	4413      	add	r3, r2
 8016098:	88ba      	ldrh	r2, [r7, #4]
 801609a:	b2d2      	uxtb	r2, r2
 801609c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801609e:	88fb      	ldrh	r3, [r7, #6]
}
 80160a0:	4618      	mov	r0, r3
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}
 80160a8:	0801cc64 	.word	0x0801cc64
 80160ac:	0801ce74 	.word	0x0801ce74
 80160b0:	0801ccc4 	.word	0x0801ccc4

080160b4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80160b4:	b580      	push	{r7, lr}
 80160b6:	b084      	sub	sp, #16
 80160b8:	af00      	add	r7, sp, #0
 80160ba:	4603      	mov	r3, r0
 80160bc:	60b9      	str	r1, [r7, #8]
 80160be:	607a      	str	r2, [r7, #4]
 80160c0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80160c2:	89fb      	ldrh	r3, [r7, #14]
 80160c4:	3304      	adds	r3, #4
 80160c6:	2b44      	cmp	r3, #68	; 0x44
 80160c8:	d906      	bls.n	80160d8 <dhcp_option_long+0x24>
 80160ca:	4b19      	ldr	r3, [pc, #100]	; (8016130 <dhcp_option_long+0x7c>)
 80160cc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80160d0:	4918      	ldr	r1, [pc, #96]	; (8016134 <dhcp_option_long+0x80>)
 80160d2:	4819      	ldr	r0, [pc, #100]	; (8016138 <dhcp_option_long+0x84>)
 80160d4:	f003 fa7a 	bl	80195cc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	0e1a      	lsrs	r2, r3, #24
 80160dc:	89fb      	ldrh	r3, [r7, #14]
 80160de:	1c59      	adds	r1, r3, #1
 80160e0:	81f9      	strh	r1, [r7, #14]
 80160e2:	4619      	mov	r1, r3
 80160e4:	68bb      	ldr	r3, [r7, #8]
 80160e6:	440b      	add	r3, r1
 80160e8:	b2d2      	uxtb	r2, r2
 80160ea:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	0c1a      	lsrs	r2, r3, #16
 80160f0:	89fb      	ldrh	r3, [r7, #14]
 80160f2:	1c59      	adds	r1, r3, #1
 80160f4:	81f9      	strh	r1, [r7, #14]
 80160f6:	4619      	mov	r1, r3
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	440b      	add	r3, r1
 80160fc:	b2d2      	uxtb	r2, r2
 80160fe:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	0a1a      	lsrs	r2, r3, #8
 8016104:	89fb      	ldrh	r3, [r7, #14]
 8016106:	1c59      	adds	r1, r3, #1
 8016108:	81f9      	strh	r1, [r7, #14]
 801610a:	4619      	mov	r1, r3
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	440b      	add	r3, r1
 8016110:	b2d2      	uxtb	r2, r2
 8016112:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8016114:	89fb      	ldrh	r3, [r7, #14]
 8016116:	1c5a      	adds	r2, r3, #1
 8016118:	81fa      	strh	r2, [r7, #14]
 801611a:	461a      	mov	r2, r3
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	4413      	add	r3, r2
 8016120:	687a      	ldr	r2, [r7, #4]
 8016122:	b2d2      	uxtb	r2, r2
 8016124:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8016126:	89fb      	ldrh	r3, [r7, #14]
}
 8016128:	4618      	mov	r0, r3
 801612a:	3710      	adds	r7, #16
 801612c:	46bd      	mov	sp, r7
 801612e:	bd80      	pop	{r7, pc}
 8016130:	0801cc64 	.word	0x0801cc64
 8016134:	0801ceb0 	.word	0x0801ceb0
 8016138:	0801ccc4 	.word	0x0801ccc4

0801613c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801613c:	b580      	push	{r7, lr}
 801613e:	b090      	sub	sp, #64	; 0x40
 8016140:	af00      	add	r7, sp, #0
 8016142:	6078      	str	r0, [r7, #4]
 8016144:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8016146:	2300      	movs	r3, #0
 8016148:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801614a:	2300      	movs	r3, #0
 801614c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801614e:	2208      	movs	r2, #8
 8016150:	2100      	movs	r1, #0
 8016152:	48b5      	ldr	r0, [pc, #724]	; (8016428 <dhcp_parse_reply+0x2ec>)
 8016154:	f003 fa9f 	bl	8019696 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	895b      	ldrh	r3, [r3, #10]
 801615c:	2b2b      	cmp	r3, #43	; 0x2b
 801615e:	d802      	bhi.n	8016166 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8016160:	f06f 0301 	mvn.w	r3, #1
 8016164:	e2a7      	b.n	80166b6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	685b      	ldr	r3, [r3, #4]
 801616a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801616c:	23f0      	movs	r3, #240	; 0xf0
 801616e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	891b      	ldrh	r3, [r3, #8]
 8016174:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801617a:	e00c      	b.n	8016196 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801617e:	895b      	ldrh	r3, [r3, #10]
 8016180:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016182:	1ad3      	subs	r3, r2, r3
 8016184:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8016186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016188:	895b      	ldrh	r3, [r3, #10]
 801618a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801618c:	1ad3      	subs	r3, r2, r3
 801618e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8016190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016192:	681b      	ldr	r3, [r3, #0]
 8016194:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8016196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016198:	2b00      	cmp	r3, #0
 801619a:	d004      	beq.n	80161a6 <dhcp_parse_reply+0x6a>
 801619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801619e:	895b      	ldrh	r3, [r3, #10]
 80161a0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80161a2:	429a      	cmp	r2, r3
 80161a4:	d2ea      	bcs.n	801617c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80161a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d102      	bne.n	80161b2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80161ac:	f06f 0301 	mvn.w	r3, #1
 80161b0:	e281      	b.n	80166b6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80161b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80161b4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80161b6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80161b8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80161ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161bc:	685b      	ldr	r3, [r3, #4]
 80161be:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80161c0:	e239      	b.n	8016636 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80161c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161c6:	4413      	add	r3, r2
 80161c8:	781b      	ldrb	r3, [r3, #0]
 80161ca:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80161cc:	2300      	movs	r3, #0
 80161ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80161d2:	f04f 33ff 	mov.w	r3, #4294967295
 80161d6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80161d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161da:	3302      	adds	r3, #2
 80161dc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80161de:	8bfa      	ldrh	r2, [r7, #30]
 80161e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d202      	bcs.n	80161ec <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80161e6:	f06f 0301 	mvn.w	r3, #1
 80161ea:	e264      	b.n	80166b6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80161ec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161ee:	3301      	adds	r3, #1
 80161f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80161f2:	8952      	ldrh	r2, [r2, #10]
 80161f4:	4293      	cmp	r3, r2
 80161f6:	da07      	bge.n	8016208 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80161f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161fa:	3301      	adds	r3, #1
 80161fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80161fe:	4413      	add	r3, r2
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016206:	e00b      	b.n	8016220 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8016208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801620a:	681b      	ldr	r3, [r3, #0]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d004      	beq.n	801621a <dhcp_parse_reply+0xde>
 8016210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	685b      	ldr	r3, [r3, #4]
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	e000      	b.n	801621c <dhcp_parse_reply+0xe0>
 801621a:	2300      	movs	r3, #0
 801621c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8016220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016224:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8016228:	7dfb      	ldrb	r3, [r7, #23]
 801622a:	2b3b      	cmp	r3, #59	; 0x3b
 801622c:	f200 812c 	bhi.w	8016488 <dhcp_parse_reply+0x34c>
 8016230:	a201      	add	r2, pc, #4	; (adr r2, 8016238 <dhcp_parse_reply+0xfc>)
 8016232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016236:	bf00      	nop
 8016238:	08016329 	.word	0x08016329
 801623c:	08016339 	.word	0x08016339
 8016240:	08016489 	.word	0x08016489
 8016244:	0801635b 	.word	0x0801635b
 8016248:	08016489 	.word	0x08016489
 801624c:	08016489 	.word	0x08016489
 8016250:	08016489 	.word	0x08016489
 8016254:	08016489 	.word	0x08016489
 8016258:	08016489 	.word	0x08016489
 801625c:	08016489 	.word	0x08016489
 8016260:	08016489 	.word	0x08016489
 8016264:	08016489 	.word	0x08016489
 8016268:	08016489 	.word	0x08016489
 801626c:	08016489 	.word	0x08016489
 8016270:	08016489 	.word	0x08016489
 8016274:	08016489 	.word	0x08016489
 8016278:	08016489 	.word	0x08016489
 801627c:	08016489 	.word	0x08016489
 8016280:	08016489 	.word	0x08016489
 8016284:	08016489 	.word	0x08016489
 8016288:	08016489 	.word	0x08016489
 801628c:	08016489 	.word	0x08016489
 8016290:	08016489 	.word	0x08016489
 8016294:	08016489 	.word	0x08016489
 8016298:	08016489 	.word	0x08016489
 801629c:	08016489 	.word	0x08016489
 80162a0:	08016489 	.word	0x08016489
 80162a4:	08016489 	.word	0x08016489
 80162a8:	08016489 	.word	0x08016489
 80162ac:	08016489 	.word	0x08016489
 80162b0:	08016489 	.word	0x08016489
 80162b4:	08016489 	.word	0x08016489
 80162b8:	08016489 	.word	0x08016489
 80162bc:	08016489 	.word	0x08016489
 80162c0:	08016489 	.word	0x08016489
 80162c4:	08016489 	.word	0x08016489
 80162c8:	08016489 	.word	0x08016489
 80162cc:	08016489 	.word	0x08016489
 80162d0:	08016489 	.word	0x08016489
 80162d4:	08016489 	.word	0x08016489
 80162d8:	08016489 	.word	0x08016489
 80162dc:	08016489 	.word	0x08016489
 80162e0:	08016489 	.word	0x08016489
 80162e4:	08016489 	.word	0x08016489
 80162e8:	08016489 	.word	0x08016489
 80162ec:	08016489 	.word	0x08016489
 80162f0:	08016489 	.word	0x08016489
 80162f4:	08016489 	.word	0x08016489
 80162f8:	08016489 	.word	0x08016489
 80162fc:	08016489 	.word	0x08016489
 8016300:	08016489 	.word	0x08016489
 8016304:	08016387 	.word	0x08016387
 8016308:	080163a9 	.word	0x080163a9
 801630c:	080163e5 	.word	0x080163e5
 8016310:	08016407 	.word	0x08016407
 8016314:	08016489 	.word	0x08016489
 8016318:	08016489 	.word	0x08016489
 801631c:	08016489 	.word	0x08016489
 8016320:	08016445 	.word	0x08016445
 8016324:	08016467 	.word	0x08016467
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8016328:	2300      	movs	r3, #0
 801632a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801632e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016332:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8016336:	e0ab      	b.n	8016490 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801633c:	2b04      	cmp	r3, #4
 801633e:	d009      	beq.n	8016354 <dhcp_parse_reply+0x218>
 8016340:	4b3a      	ldr	r3, [pc, #232]	; (801642c <dhcp_parse_reply+0x2f0>)
 8016342:	f240 622e 	movw	r2, #1582	; 0x62e
 8016346:	493a      	ldr	r1, [pc, #232]	; (8016430 <dhcp_parse_reply+0x2f4>)
 8016348:	483a      	ldr	r0, [pc, #232]	; (8016434 <dhcp_parse_reply+0x2f8>)
 801634a:	f003 f93f 	bl	80195cc <iprintf>
 801634e:	f06f 0305 	mvn.w	r3, #5
 8016352:	e1b0      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8016354:	2306      	movs	r3, #6
 8016356:	623b      	str	r3, [r7, #32]
        break;
 8016358:	e09a      	b.n	8016490 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801635a:	2304      	movs	r3, #4
 801635c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8016360:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016364:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016368:	429a      	cmp	r2, r3
 801636a:	d209      	bcs.n	8016380 <dhcp_parse_reply+0x244>
 801636c:	4b2f      	ldr	r3, [pc, #188]	; (801642c <dhcp_parse_reply+0x2f0>)
 801636e:	f240 6233 	movw	r2, #1587	; 0x633
 8016372:	4931      	ldr	r1, [pc, #196]	; (8016438 <dhcp_parse_reply+0x2fc>)
 8016374:	482f      	ldr	r0, [pc, #188]	; (8016434 <dhcp_parse_reply+0x2f8>)
 8016376:	f003 f929 	bl	80195cc <iprintf>
 801637a:	f06f 0305 	mvn.w	r3, #5
 801637e:	e19a      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8016380:	2307      	movs	r3, #7
 8016382:	623b      	str	r3, [r7, #32]
        break;
 8016384:	e084      	b.n	8016490 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016386:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801638a:	2b04      	cmp	r3, #4
 801638c:	d009      	beq.n	80163a2 <dhcp_parse_reply+0x266>
 801638e:	4b27      	ldr	r3, [pc, #156]	; (801642c <dhcp_parse_reply+0x2f0>)
 8016390:	f240 6241 	movw	r2, #1601	; 0x641
 8016394:	4926      	ldr	r1, [pc, #152]	; (8016430 <dhcp_parse_reply+0x2f4>)
 8016396:	4827      	ldr	r0, [pc, #156]	; (8016434 <dhcp_parse_reply+0x2f8>)
 8016398:	f003 f918 	bl	80195cc <iprintf>
 801639c:	f06f 0305 	mvn.w	r3, #5
 80163a0:	e189      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80163a2:	2303      	movs	r3, #3
 80163a4:	623b      	str	r3, [r7, #32]
        break;
 80163a6:	e073      	b.n	8016490 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80163a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163ac:	2b01      	cmp	r3, #1
 80163ae:	d009      	beq.n	80163c4 <dhcp_parse_reply+0x288>
 80163b0:	4b1e      	ldr	r3, [pc, #120]	; (801642c <dhcp_parse_reply+0x2f0>)
 80163b2:	f240 624f 	movw	r2, #1615	; 0x64f
 80163b6:	4921      	ldr	r1, [pc, #132]	; (801643c <dhcp_parse_reply+0x300>)
 80163b8:	481e      	ldr	r0, [pc, #120]	; (8016434 <dhcp_parse_reply+0x2f8>)
 80163ba:	f003 f907 	bl	80195cc <iprintf>
 80163be:	f06f 0305 	mvn.w	r3, #5
 80163c2:	e178      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80163c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80163c6:	2bf0      	cmp	r3, #240	; 0xf0
 80163c8:	d009      	beq.n	80163de <dhcp_parse_reply+0x2a2>
 80163ca:	4b18      	ldr	r3, [pc, #96]	; (801642c <dhcp_parse_reply+0x2f0>)
 80163cc:	f240 6251 	movw	r2, #1617	; 0x651
 80163d0:	491b      	ldr	r1, [pc, #108]	; (8016440 <dhcp_parse_reply+0x304>)
 80163d2:	4818      	ldr	r0, [pc, #96]	; (8016434 <dhcp_parse_reply+0x2f8>)
 80163d4:	f003 f8fa 	bl	80195cc <iprintf>
 80163d8:	f06f 0305 	mvn.w	r3, #5
 80163dc:	e16b      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80163de:	2300      	movs	r3, #0
 80163e0:	623b      	str	r3, [r7, #32]
        break;
 80163e2:	e055      	b.n	8016490 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80163e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80163e8:	2b01      	cmp	r3, #1
 80163ea:	d009      	beq.n	8016400 <dhcp_parse_reply+0x2c4>
 80163ec:	4b0f      	ldr	r3, [pc, #60]	; (801642c <dhcp_parse_reply+0x2f0>)
 80163ee:	f240 6255 	movw	r2, #1621	; 0x655
 80163f2:	4912      	ldr	r1, [pc, #72]	; (801643c <dhcp_parse_reply+0x300>)
 80163f4:	480f      	ldr	r0, [pc, #60]	; (8016434 <dhcp_parse_reply+0x2f8>)
 80163f6:	f003 f8e9 	bl	80195cc <iprintf>
 80163fa:	f06f 0305 	mvn.w	r3, #5
 80163fe:	e15a      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8016400:	2301      	movs	r3, #1
 8016402:	623b      	str	r3, [r7, #32]
        break;
 8016404:	e044      	b.n	8016490 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016406:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801640a:	2b04      	cmp	r3, #4
 801640c:	d009      	beq.n	8016422 <dhcp_parse_reply+0x2e6>
 801640e:	4b07      	ldr	r3, [pc, #28]	; (801642c <dhcp_parse_reply+0x2f0>)
 8016410:	f240 6259 	movw	r2, #1625	; 0x659
 8016414:	4906      	ldr	r1, [pc, #24]	; (8016430 <dhcp_parse_reply+0x2f4>)
 8016416:	4807      	ldr	r0, [pc, #28]	; (8016434 <dhcp_parse_reply+0x2f8>)
 8016418:	f003 f8d8 	bl	80195cc <iprintf>
 801641c:	f06f 0305 	mvn.w	r3, #5
 8016420:	e149      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8016422:	2302      	movs	r3, #2
 8016424:	623b      	str	r3, [r7, #32]
        break;
 8016426:	e033      	b.n	8016490 <dhcp_parse_reply+0x354>
 8016428:	2000cfa4 	.word	0x2000cfa4
 801642c:	0801cc64 	.word	0x0801cc64
 8016430:	0801ceec 	.word	0x0801ceec
 8016434:	0801ccc4 	.word	0x0801ccc4
 8016438:	0801cef8 	.word	0x0801cef8
 801643c:	0801cf0c 	.word	0x0801cf0c
 8016440:	0801cf18 	.word	0x0801cf18
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016444:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016448:	2b04      	cmp	r3, #4
 801644a:	d009      	beq.n	8016460 <dhcp_parse_reply+0x324>
 801644c:	4b9c      	ldr	r3, [pc, #624]	; (80166c0 <dhcp_parse_reply+0x584>)
 801644e:	f240 625d 	movw	r2, #1629	; 0x65d
 8016452:	499c      	ldr	r1, [pc, #624]	; (80166c4 <dhcp_parse_reply+0x588>)
 8016454:	489c      	ldr	r0, [pc, #624]	; (80166c8 <dhcp_parse_reply+0x58c>)
 8016456:	f003 f8b9 	bl	80195cc <iprintf>
 801645a:	f06f 0305 	mvn.w	r3, #5
 801645e:	e12a      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8016460:	2304      	movs	r3, #4
 8016462:	623b      	str	r3, [r7, #32]
        break;
 8016464:	e014      	b.n	8016490 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8016466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801646a:	2b04      	cmp	r3, #4
 801646c:	d009      	beq.n	8016482 <dhcp_parse_reply+0x346>
 801646e:	4b94      	ldr	r3, [pc, #592]	; (80166c0 <dhcp_parse_reply+0x584>)
 8016470:	f240 6261 	movw	r2, #1633	; 0x661
 8016474:	4993      	ldr	r1, [pc, #588]	; (80166c4 <dhcp_parse_reply+0x588>)
 8016476:	4894      	ldr	r0, [pc, #592]	; (80166c8 <dhcp_parse_reply+0x58c>)
 8016478:	f003 f8a8 	bl	80195cc <iprintf>
 801647c:	f06f 0305 	mvn.w	r3, #5
 8016480:	e119      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8016482:	2305      	movs	r3, #5
 8016484:	623b      	str	r3, [r7, #32]
        break;
 8016486:	e003      	b.n	8016490 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8016488:	2300      	movs	r3, #0
 801648a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801648e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8016490:	7dfb      	ldrb	r3, [r7, #23]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d103      	bne.n	801649e <dhcp_parse_reply+0x362>
      offset++;
 8016496:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016498:	3301      	adds	r3, #1
 801649a:	877b      	strh	r3, [r7, #58]	; 0x3a
 801649c:	e0a1      	b.n	80165e2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801649e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80164a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164a4:	4413      	add	r3, r2
 80164a6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80164aa:	4293      	cmp	r3, r2
 80164ac:	dd02      	ble.n	80164b4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80164ae:	f06f 0301 	mvn.w	r3, #1
 80164b2:	e100      	b.n	80166b6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80164b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164b8:	b29a      	uxth	r2, r3
 80164ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80164bc:	4413      	add	r3, r2
 80164be:	b29b      	uxth	r3, r3
 80164c0:	3302      	adds	r3, #2
 80164c2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80164c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	f000 808a 	beq.w	80165e2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80164d2:	6a3b      	ldr	r3, [r7, #32]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	db02      	blt.n	80164de <dhcp_parse_reply+0x3a2>
 80164d8:	6a3b      	ldr	r3, [r7, #32]
 80164da:	2b07      	cmp	r3, #7
 80164dc:	dd06      	ble.n	80164ec <dhcp_parse_reply+0x3b0>
 80164de:	4b78      	ldr	r3, [pc, #480]	; (80166c0 <dhcp_parse_reply+0x584>)
 80164e0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80164e4:	4979      	ldr	r1, [pc, #484]	; (80166cc <dhcp_parse_reply+0x590>)
 80164e6:	4878      	ldr	r0, [pc, #480]	; (80166c8 <dhcp_parse_reply+0x58c>)
 80164e8:	f003 f870 	bl	80195cc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80164ec:	4a78      	ldr	r2, [pc, #480]	; (80166d0 <dhcp_parse_reply+0x594>)
 80164ee:	6a3b      	ldr	r3, [r7, #32]
 80164f0:	4413      	add	r3, r2
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d174      	bne.n	80165e2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 80164f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80164fc:	2b04      	cmp	r3, #4
 80164fe:	bf28      	it	cs
 8016500:	2304      	movcs	r3, #4
 8016502:	b2db      	uxtb	r3, r3
 8016504:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8016506:	8bfb      	ldrh	r3, [r7, #30]
 8016508:	8aba      	ldrh	r2, [r7, #20]
 801650a:	f107 0108 	add.w	r1, r7, #8
 801650e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016510:	f7f7 fd18 	bl	800df44 <pbuf_copy_partial>
 8016514:	4603      	mov	r3, r0
 8016516:	461a      	mov	r2, r3
 8016518:	8abb      	ldrh	r3, [r7, #20]
 801651a:	4293      	cmp	r3, r2
 801651c:	d002      	beq.n	8016524 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801651e:	f06f 0301 	mvn.w	r3, #1
 8016522:	e0c8      	b.n	80166b6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8016524:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016528:	2b04      	cmp	r3, #4
 801652a:	d933      	bls.n	8016594 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801652c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016530:	f003 0303 	and.w	r3, r3, #3
 8016534:	b2db      	uxtb	r3, r3
 8016536:	2b00      	cmp	r3, #0
 8016538:	d009      	beq.n	801654e <dhcp_parse_reply+0x412>
 801653a:	4b61      	ldr	r3, [pc, #388]	; (80166c0 <dhcp_parse_reply+0x584>)
 801653c:	f240 6281 	movw	r2, #1665	; 0x681
 8016540:	4964      	ldr	r1, [pc, #400]	; (80166d4 <dhcp_parse_reply+0x598>)
 8016542:	4861      	ldr	r0, [pc, #388]	; (80166c8 <dhcp_parse_reply+0x58c>)
 8016544:	f003 f842 	bl	80195cc <iprintf>
 8016548:	f06f 0305 	mvn.w	r3, #5
 801654c:	e0b3      	b.n	80166b6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801654e:	4a60      	ldr	r2, [pc, #384]	; (80166d0 <dhcp_parse_reply+0x594>)
 8016550:	6a3b      	ldr	r3, [r7, #32]
 8016552:	4413      	add	r3, r2
 8016554:	2201      	movs	r2, #1
 8016556:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8016558:	68bb      	ldr	r3, [r7, #8]
 801655a:	4618      	mov	r0, r3
 801655c:	f7f5 fecd 	bl	800c2fa <lwip_htonl>
 8016560:	4602      	mov	r2, r0
 8016562:	495d      	ldr	r1, [pc, #372]	; (80166d8 <dhcp_parse_reply+0x59c>)
 8016564:	6a3b      	ldr	r3, [r7, #32]
 8016566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801656a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801656e:	3b04      	subs	r3, #4
 8016570:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8016574:	8bfb      	ldrh	r3, [r7, #30]
 8016576:	3304      	adds	r3, #4
 8016578:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801657a:	8a7a      	ldrh	r2, [r7, #18]
 801657c:	8bfb      	ldrh	r3, [r7, #30]
 801657e:	429a      	cmp	r2, r3
 8016580:	d202      	bcs.n	8016588 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8016582:	f06f 0301 	mvn.w	r3, #1
 8016586:	e096      	b.n	80166b6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8016588:	8a7b      	ldrh	r3, [r7, #18]
 801658a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801658c:	6a3b      	ldr	r3, [r7, #32]
 801658e:	3301      	adds	r3, #1
 8016590:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8016592:	e79e      	b.n	80164d2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8016594:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8016598:	2b04      	cmp	r3, #4
 801659a:	d106      	bne.n	80165aa <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	4618      	mov	r0, r3
 80165a0:	f7f5 feab 	bl	800c2fa <lwip_htonl>
 80165a4:	4603      	mov	r3, r0
 80165a6:	60bb      	str	r3, [r7, #8]
 80165a8:	e011      	b.n	80165ce <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80165aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80165ae:	2b01      	cmp	r3, #1
 80165b0:	d009      	beq.n	80165c6 <dhcp_parse_reply+0x48a>
 80165b2:	4b43      	ldr	r3, [pc, #268]	; (80166c0 <dhcp_parse_reply+0x584>)
 80165b4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80165b8:	4948      	ldr	r1, [pc, #288]	; (80166dc <dhcp_parse_reply+0x5a0>)
 80165ba:	4843      	ldr	r0, [pc, #268]	; (80166c8 <dhcp_parse_reply+0x58c>)
 80165bc:	f003 f806 	bl	80195cc <iprintf>
 80165c0:	f06f 0305 	mvn.w	r3, #5
 80165c4:	e077      	b.n	80166b6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80165c6:	f107 0308 	add.w	r3, r7, #8
 80165ca:	781b      	ldrb	r3, [r3, #0]
 80165cc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80165ce:	4a40      	ldr	r2, [pc, #256]	; (80166d0 <dhcp_parse_reply+0x594>)
 80165d0:	6a3b      	ldr	r3, [r7, #32]
 80165d2:	4413      	add	r3, r2
 80165d4:	2201      	movs	r2, #1
 80165d6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80165d8:	68ba      	ldr	r2, [r7, #8]
 80165da:	493f      	ldr	r1, [pc, #252]	; (80166d8 <dhcp_parse_reply+0x59c>)
 80165dc:	6a3b      	ldr	r3, [r7, #32]
 80165de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80165e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e4:	895b      	ldrh	r3, [r3, #10]
 80165e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80165e8:	429a      	cmp	r2, r3
 80165ea:	d324      	bcc.n	8016636 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80165ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165ee:	895b      	ldrh	r3, [r3, #10]
 80165f0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80165f2:	1ad3      	subs	r3, r2, r3
 80165f4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80165f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f8:	895b      	ldrh	r3, [r3, #10]
 80165fa:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80165fc:	1ad3      	subs	r3, r2, r3
 80165fe:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8016600:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016602:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016604:	429a      	cmp	r2, r3
 8016606:	d213      	bcs.n	8016630 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8016608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016610:	2b00      	cmp	r3, #0
 8016612:	d109      	bne.n	8016628 <dhcp_parse_reply+0x4ec>
 8016614:	4b2a      	ldr	r3, [pc, #168]	; (80166c0 <dhcp_parse_reply+0x584>)
 8016616:	f240 629d 	movw	r2, #1693	; 0x69d
 801661a:	4931      	ldr	r1, [pc, #196]	; (80166e0 <dhcp_parse_reply+0x5a4>)
 801661c:	482a      	ldr	r0, [pc, #168]	; (80166c8 <dhcp_parse_reply+0x58c>)
 801661e:	f002 ffd5 	bl	80195cc <iprintf>
 8016622:	f06f 0305 	mvn.w	r3, #5
 8016626:	e046      	b.n	80166b6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8016628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801662a:	685b      	ldr	r3, [r3, #4]
 801662c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801662e:	e002      	b.n	8016636 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016630:	f06f 0301 	mvn.w	r3, #1
 8016634:	e03f      	b.n	80166b6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016638:	2b00      	cmp	r3, #0
 801663a:	d00a      	beq.n	8016652 <dhcp_parse_reply+0x516>
 801663c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801663e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016640:	429a      	cmp	r2, r3
 8016642:	d206      	bcs.n	8016652 <dhcp_parse_reply+0x516>
 8016644:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016648:	4413      	add	r3, r2
 801664a:	781b      	ldrb	r3, [r3, #0]
 801664c:	2bff      	cmp	r3, #255	; 0xff
 801664e:	f47f adb8 	bne.w	80161c2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016652:	4b1f      	ldr	r3, [pc, #124]	; (80166d0 <dhcp_parse_reply+0x594>)
 8016654:	781b      	ldrb	r3, [r3, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d018      	beq.n	801668c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801665a:	4b1f      	ldr	r3, [pc, #124]	; (80166d8 <dhcp_parse_reply+0x59c>)
 801665c:	681b      	ldr	r3, [r3, #0]
 801665e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016660:	4b1b      	ldr	r3, [pc, #108]	; (80166d0 <dhcp_parse_reply+0x594>)
 8016662:	2200      	movs	r2, #0
 8016664:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	2b01      	cmp	r3, #1
 801666a:	d102      	bne.n	8016672 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801666c:	2301      	movs	r3, #1
 801666e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016670:	e00c      	b.n	801668c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	2b02      	cmp	r3, #2
 8016676:	d102      	bne.n	801667e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8016678:	2301      	movs	r3, #1
 801667a:	62bb      	str	r3, [r7, #40]	; 0x28
 801667c:	e006      	b.n	801668c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	2b03      	cmp	r3, #3
 8016682:	d103      	bne.n	801668c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8016684:	2301      	movs	r3, #1
 8016686:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016688:	2301      	movs	r3, #1
 801668a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801668c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668e:	2b00      	cmp	r3, #0
 8016690:	d006      	beq.n	80166a0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016692:	2300      	movs	r3, #0
 8016694:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016696:	236c      	movs	r3, #108	; 0x6c
 8016698:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801669a:	23ec      	movs	r3, #236	; 0xec
 801669c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801669e:	e56a      	b.n	8016176 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80166a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d006      	beq.n	80166b4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80166a6:	2300      	movs	r3, #0
 80166a8:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80166aa:	232c      	movs	r3, #44	; 0x2c
 80166ac:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80166ae:	236c      	movs	r3, #108	; 0x6c
 80166b0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80166b2:	e560      	b.n	8016176 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80166b4:	2300      	movs	r3, #0
}
 80166b6:	4618      	mov	r0, r3
 80166b8:	3740      	adds	r7, #64	; 0x40
 80166ba:	46bd      	mov	sp, r7
 80166bc:	bd80      	pop	{r7, pc}
 80166be:	bf00      	nop
 80166c0:	0801cc64 	.word	0x0801cc64
 80166c4:	0801ceec 	.word	0x0801ceec
 80166c8:	0801ccc4 	.word	0x0801ccc4
 80166cc:	0801cf30 	.word	0x0801cf30
 80166d0:	2000cfa4 	.word	0x2000cfa4
 80166d4:	0801cf44 	.word	0x0801cf44
 80166d8:	2000cf84 	.word	0x2000cf84
 80166dc:	0801cf5c 	.word	0x0801cf5c
 80166e0:	0801cf70 	.word	0x0801cf70

080166e4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b08a      	sub	sp, #40	; 0x28
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	60f8      	str	r0, [r7, #12]
 80166ec:	60b9      	str	r1, [r7, #8]
 80166ee:	607a      	str	r2, [r7, #4]
 80166f0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80166f2:	4b60      	ldr	r3, [pc, #384]	; (8016874 <dhcp_recv+0x190>)
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80166f8:	6a3b      	ldr	r3, [r7, #32]
 80166fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80166fc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	685b      	ldr	r3, [r3, #4]
 8016702:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8016704:	69fb      	ldr	r3, [r7, #28]
 8016706:	2b00      	cmp	r3, #0
 8016708:	f000 809d 	beq.w	8016846 <dhcp_recv+0x162>
 801670c:	69fb      	ldr	r3, [r7, #28]
 801670e:	791b      	ldrb	r3, [r3, #4]
 8016710:	2b00      	cmp	r3, #0
 8016712:	f000 8098 	beq.w	8016846 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	895b      	ldrh	r3, [r3, #10]
 801671a:	2b2b      	cmp	r3, #43	; 0x2b
 801671c:	f240 8095 	bls.w	801684a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016720:	69bb      	ldr	r3, [r7, #24]
 8016722:	781b      	ldrb	r3, [r3, #0]
 8016724:	2b02      	cmp	r3, #2
 8016726:	f040 8092 	bne.w	801684e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801672a:	2300      	movs	r3, #0
 801672c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016730:	e012      	b.n	8016758 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016732:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016736:	6a3a      	ldr	r2, [r7, #32]
 8016738:	4413      	add	r3, r2
 801673a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801673e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016742:	69b9      	ldr	r1, [r7, #24]
 8016744:	440b      	add	r3, r1
 8016746:	7f1b      	ldrb	r3, [r3, #28]
 8016748:	429a      	cmp	r2, r3
 801674a:	f040 8082 	bne.w	8016852 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801674e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016752:	3301      	adds	r3, #1
 8016754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016758:	6a3b      	ldr	r3, [r7, #32]
 801675a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801675e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016762:	429a      	cmp	r2, r3
 8016764:	d203      	bcs.n	801676e <dhcp_recv+0x8a>
 8016766:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801676a:	2b05      	cmp	r3, #5
 801676c:	d9e1      	bls.n	8016732 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801676e:	69bb      	ldr	r3, [r7, #24]
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	4618      	mov	r0, r3
 8016774:	f7f5 fdc1 	bl	800c2fa <lwip_htonl>
 8016778:	4602      	mov	r2, r0
 801677a:	69fb      	ldr	r3, [r7, #28]
 801677c:	681b      	ldr	r3, [r3, #0]
 801677e:	429a      	cmp	r2, r3
 8016780:	d169      	bne.n	8016856 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016782:	69f9      	ldr	r1, [r7, #28]
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f7ff fcd9 	bl	801613c <dhcp_parse_reply>
 801678a:	4603      	mov	r3, r0
 801678c:	2b00      	cmp	r3, #0
 801678e:	d164      	bne.n	801685a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016790:	4b39      	ldr	r3, [pc, #228]	; (8016878 <dhcp_recv+0x194>)
 8016792:	785b      	ldrb	r3, [r3, #1]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d062      	beq.n	801685e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	685b      	ldr	r3, [r3, #4]
 801679c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801679e:	4b37      	ldr	r3, [pc, #220]	; (801687c <dhcp_recv+0x198>)
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80167a4:	7cfb      	ldrb	r3, [r7, #19]
 80167a6:	2b05      	cmp	r3, #5
 80167a8:	d12a      	bne.n	8016800 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80167aa:	69fb      	ldr	r3, [r7, #28]
 80167ac:	795b      	ldrb	r3, [r3, #5]
 80167ae:	2b01      	cmp	r3, #1
 80167b0:	d112      	bne.n	80167d8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80167b2:	6979      	ldr	r1, [r7, #20]
 80167b4:	6a38      	ldr	r0, [r7, #32]
 80167b6:	f7fe fe17 	bl	80153e8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80167ba:	6a3b      	ldr	r3, [r7, #32]
 80167bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80167c0:	f003 0308 	and.w	r3, r3, #8
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d003      	beq.n	80167d0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80167c8:	6a38      	ldr	r0, [r7, #32]
 80167ca:	f7fe fb85 	bl	8014ed8 <dhcp_check>
 80167ce:	e049      	b.n	8016864 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80167d0:	6a38      	ldr	r0, [r7, #32]
 80167d2:	f7ff f867 	bl	80158a4 <dhcp_bind>
 80167d6:	e045      	b.n	8016864 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80167d8:	69fb      	ldr	r3, [r7, #28]
 80167da:	795b      	ldrb	r3, [r3, #5]
 80167dc:	2b03      	cmp	r3, #3
 80167de:	d007      	beq.n	80167f0 <dhcp_recv+0x10c>
 80167e0:	69fb      	ldr	r3, [r7, #28]
 80167e2:	795b      	ldrb	r3, [r3, #5]
 80167e4:	2b04      	cmp	r3, #4
 80167e6:	d003      	beq.n	80167f0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80167e8:	69fb      	ldr	r3, [r7, #28]
 80167ea:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80167ec:	2b05      	cmp	r3, #5
 80167ee:	d139      	bne.n	8016864 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80167f0:	6979      	ldr	r1, [r7, #20]
 80167f2:	6a38      	ldr	r0, [r7, #32]
 80167f4:	f7fe fdf8 	bl	80153e8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80167f8:	6a38      	ldr	r0, [r7, #32]
 80167fa:	f7ff f853 	bl	80158a4 <dhcp_bind>
 80167fe:	e031      	b.n	8016864 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8016800:	7cfb      	ldrb	r3, [r7, #19]
 8016802:	2b06      	cmp	r3, #6
 8016804:	d113      	bne.n	801682e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8016806:	69fb      	ldr	r3, [r7, #28]
 8016808:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801680a:	2b03      	cmp	r3, #3
 801680c:	d00b      	beq.n	8016826 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801680e:	69fb      	ldr	r3, [r7, #28]
 8016810:	795b      	ldrb	r3, [r3, #5]
 8016812:	2b01      	cmp	r3, #1
 8016814:	d007      	beq.n	8016826 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016816:	69fb      	ldr	r3, [r7, #28]
 8016818:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801681a:	2b04      	cmp	r3, #4
 801681c:	d003      	beq.n	8016826 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801681e:	69fb      	ldr	r3, [r7, #28]
 8016820:	795b      	ldrb	r3, [r3, #5]
 8016822:	2b05      	cmp	r3, #5
 8016824:	d103      	bne.n	801682e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016826:	6a38      	ldr	r0, [r7, #32]
 8016828:	f7fe fb3c 	bl	8014ea4 <dhcp_handle_nak>
 801682c:	e01a      	b.n	8016864 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801682e:	7cfb      	ldrb	r3, [r7, #19]
 8016830:	2b02      	cmp	r3, #2
 8016832:	d116      	bne.n	8016862 <dhcp_recv+0x17e>
 8016834:	69fb      	ldr	r3, [r7, #28]
 8016836:	795b      	ldrb	r3, [r3, #5]
 8016838:	2b06      	cmp	r3, #6
 801683a:	d112      	bne.n	8016862 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801683c:	6979      	ldr	r1, [r7, #20]
 801683e:	6a38      	ldr	r0, [r7, #32]
 8016840:	f7fe fb7e 	bl	8014f40 <dhcp_handle_offer>
 8016844:	e00e      	b.n	8016864 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016846:	bf00      	nop
 8016848:	e00c      	b.n	8016864 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801684a:	bf00      	nop
 801684c:	e00a      	b.n	8016864 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801684e:	bf00      	nop
 8016850:	e008      	b.n	8016864 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016852:	bf00      	nop
 8016854:	e006      	b.n	8016864 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016856:	bf00      	nop
 8016858:	e004      	b.n	8016864 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801685a:	bf00      	nop
 801685c:	e002      	b.n	8016864 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801685e:	bf00      	nop
 8016860:	e000      	b.n	8016864 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016862:	bf00      	nop
  pbuf_free(p);
 8016864:	6878      	ldr	r0, [r7, #4]
 8016866:	f7f7 f967 	bl	800db38 <pbuf_free>
}
 801686a:	bf00      	nop
 801686c:	3728      	adds	r7, #40	; 0x28
 801686e:	46bd      	mov	sp, r7
 8016870:	bd80      	pop	{r7, pc}
 8016872:	bf00      	nop
 8016874:	200097b0 	.word	0x200097b0
 8016878:	2000cfa4 	.word	0x2000cfa4
 801687c:	2000cf84 	.word	0x2000cf84

08016880 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016880:	b580      	push	{r7, lr}
 8016882:	b088      	sub	sp, #32
 8016884:	af00      	add	r7, sp, #0
 8016886:	60f8      	str	r0, [r7, #12]
 8016888:	60b9      	str	r1, [r7, #8]
 801688a:	603b      	str	r3, [r7, #0]
 801688c:	4613      	mov	r3, r2
 801688e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d108      	bne.n	80168a8 <dhcp_create_msg+0x28>
 8016896:	4b5f      	ldr	r3, [pc, #380]	; (8016a14 <dhcp_create_msg+0x194>)
 8016898:	f240 7269 	movw	r2, #1897	; 0x769
 801689c:	495e      	ldr	r1, [pc, #376]	; (8016a18 <dhcp_create_msg+0x198>)
 801689e:	485f      	ldr	r0, [pc, #380]	; (8016a1c <dhcp_create_msg+0x19c>)
 80168a0:	f002 fe94 	bl	80195cc <iprintf>
 80168a4:	2300      	movs	r3, #0
 80168a6:	e0b1      	b.n	8016a0c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80168a8:	68bb      	ldr	r3, [r7, #8]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d108      	bne.n	80168c0 <dhcp_create_msg+0x40>
 80168ae:	4b59      	ldr	r3, [pc, #356]	; (8016a14 <dhcp_create_msg+0x194>)
 80168b0:	f240 726a 	movw	r2, #1898	; 0x76a
 80168b4:	495a      	ldr	r1, [pc, #360]	; (8016a20 <dhcp_create_msg+0x1a0>)
 80168b6:	4859      	ldr	r0, [pc, #356]	; (8016a1c <dhcp_create_msg+0x19c>)
 80168b8:	f002 fe88 	bl	80195cc <iprintf>
 80168bc:	2300      	movs	r3, #0
 80168be:	e0a5      	b.n	8016a0c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80168c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80168c4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80168c8:	2036      	movs	r0, #54	; 0x36
 80168ca:	f7f6 fe51 	bl	800d570 <pbuf_alloc>
 80168ce:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80168d0:	69bb      	ldr	r3, [r7, #24]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d101      	bne.n	80168da <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80168d6:	2300      	movs	r3, #0
 80168d8:	e098      	b.n	8016a0c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80168da:	69bb      	ldr	r3, [r7, #24]
 80168dc:	895b      	ldrh	r3, [r3, #10]
 80168de:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80168e2:	d206      	bcs.n	80168f2 <dhcp_create_msg+0x72>
 80168e4:	4b4b      	ldr	r3, [pc, #300]	; (8016a14 <dhcp_create_msg+0x194>)
 80168e6:	f240 7271 	movw	r2, #1905	; 0x771
 80168ea:	494e      	ldr	r1, [pc, #312]	; (8016a24 <dhcp_create_msg+0x1a4>)
 80168ec:	484b      	ldr	r0, [pc, #300]	; (8016a1c <dhcp_create_msg+0x19c>)
 80168ee:	f002 fe6d 	bl	80195cc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80168f2:	79fb      	ldrb	r3, [r7, #7]
 80168f4:	2b03      	cmp	r3, #3
 80168f6:	d103      	bne.n	8016900 <dhcp_create_msg+0x80>
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	795b      	ldrb	r3, [r3, #5]
 80168fc:	2b03      	cmp	r3, #3
 80168fe:	d10d      	bne.n	801691c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	799b      	ldrb	r3, [r3, #6]
 8016904:	2b00      	cmp	r3, #0
 8016906:	d105      	bne.n	8016914 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8016908:	f002 fce6 	bl	80192d8 <rand>
 801690c:	4603      	mov	r3, r0
 801690e:	461a      	mov	r2, r3
 8016910:	4b45      	ldr	r3, [pc, #276]	; (8016a28 <dhcp_create_msg+0x1a8>)
 8016912:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016914:	4b44      	ldr	r3, [pc, #272]	; (8016a28 <dhcp_create_msg+0x1a8>)
 8016916:	681a      	ldr	r2, [r3, #0]
 8016918:	68bb      	ldr	r3, [r7, #8]
 801691a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801691c:	69bb      	ldr	r3, [r7, #24]
 801691e:	685b      	ldr	r3, [r3, #4]
 8016920:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016922:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016926:	2100      	movs	r1, #0
 8016928:	6978      	ldr	r0, [r7, #20]
 801692a:	f002 feb4 	bl	8019696 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	2201      	movs	r2, #1
 8016932:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	2201      	movs	r2, #1
 8016938:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016940:	697b      	ldr	r3, [r7, #20]
 8016942:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4618      	mov	r0, r3
 801694a:	f7f5 fcd6 	bl	800c2fa <lwip_htonl>
 801694e:	4602      	mov	r2, r0
 8016950:	697b      	ldr	r3, [r7, #20]
 8016952:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016954:	79fb      	ldrb	r3, [r7, #7]
 8016956:	2b08      	cmp	r3, #8
 8016958:	d010      	beq.n	801697c <dhcp_create_msg+0xfc>
 801695a:	79fb      	ldrb	r3, [r7, #7]
 801695c:	2b04      	cmp	r3, #4
 801695e:	d00d      	beq.n	801697c <dhcp_create_msg+0xfc>
 8016960:	79fb      	ldrb	r3, [r7, #7]
 8016962:	2b07      	cmp	r3, #7
 8016964:	d00a      	beq.n	801697c <dhcp_create_msg+0xfc>
 8016966:	79fb      	ldrb	r3, [r7, #7]
 8016968:	2b03      	cmp	r3, #3
 801696a:	d10c      	bne.n	8016986 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801696c:	68bb      	ldr	r3, [r7, #8]
 801696e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016970:	2b05      	cmp	r3, #5
 8016972:	d003      	beq.n	801697c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	795b      	ldrb	r3, [r3, #5]
 8016978:	2b04      	cmp	r3, #4
 801697a:	d104      	bne.n	8016986 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801697c:	68fb      	ldr	r3, [r7, #12]
 801697e:	3304      	adds	r3, #4
 8016980:	681a      	ldr	r2, [r3, #0]
 8016982:	697b      	ldr	r3, [r7, #20]
 8016984:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016986:	2300      	movs	r3, #0
 8016988:	83fb      	strh	r3, [r7, #30]
 801698a:	e00c      	b.n	80169a6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801698c:	8bfa      	ldrh	r2, [r7, #30]
 801698e:	8bfb      	ldrh	r3, [r7, #30]
 8016990:	68f9      	ldr	r1, [r7, #12]
 8016992:	440a      	add	r2, r1
 8016994:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016998:	697a      	ldr	r2, [r7, #20]
 801699a:	4413      	add	r3, r2
 801699c:	460a      	mov	r2, r1
 801699e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80169a0:	8bfb      	ldrh	r3, [r7, #30]
 80169a2:	3301      	adds	r3, #1
 80169a4:	83fb      	strh	r3, [r7, #30]
 80169a6:	8bfb      	ldrh	r3, [r7, #30]
 80169a8:	2b05      	cmp	r3, #5
 80169aa:	d9ef      	bls.n	801698c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80169ac:	697b      	ldr	r3, [r7, #20]
 80169ae:	2200      	movs	r2, #0
 80169b0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80169b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80169b8:	2200      	movs	r2, #0
 80169ba:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80169be:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80169c2:	2200      	movs	r2, #0
 80169c4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80169c8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80169cc:	2200      	movs	r2, #0
 80169ce:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80169d2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80169d6:	697b      	ldr	r3, [r7, #20]
 80169d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169dc:	2301      	movs	r3, #1
 80169de:	2235      	movs	r2, #53	; 0x35
 80169e0:	2000      	movs	r0, #0
 80169e2:	f7ff fadb 	bl	8015f9c <dhcp_option>
 80169e6:	4603      	mov	r3, r0
 80169e8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80169f0:	79fa      	ldrb	r2, [r7, #7]
 80169f2:	8a7b      	ldrh	r3, [r7, #18]
 80169f4:	4618      	mov	r0, r3
 80169f6:	f7ff fb05 	bl	8016004 <dhcp_option_byte>
 80169fa:	4603      	mov	r3, r0
 80169fc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80169fe:	683b      	ldr	r3, [r7, #0]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d002      	beq.n	8016a0a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	8a7a      	ldrh	r2, [r7, #18]
 8016a08:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8016a0a:	69bb      	ldr	r3, [r7, #24]
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	3720      	adds	r7, #32
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}
 8016a14:	0801cc64 	.word	0x0801cc64
 8016a18:	0801cf84 	.word	0x0801cf84
 8016a1c:	0801ccc4 	.word	0x0801ccc4
 8016a20:	0801cfa4 	.word	0x0801cfa4
 8016a24:	0801cfc4 	.word	0x0801cfc4
 8016a28:	2000cfb4 	.word	0x2000cfb4

08016a2c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b084      	sub	sp, #16
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	4603      	mov	r3, r0
 8016a34:	60b9      	str	r1, [r7, #8]
 8016a36:	607a      	str	r2, [r7, #4]
 8016a38:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8016a3a:	89fb      	ldrh	r3, [r7, #14]
 8016a3c:	1c5a      	adds	r2, r3, #1
 8016a3e:	81fa      	strh	r2, [r7, #14]
 8016a40:	461a      	mov	r2, r3
 8016a42:	68bb      	ldr	r3, [r7, #8]
 8016a44:	4413      	add	r3, r2
 8016a46:	22ff      	movs	r2, #255	; 0xff
 8016a48:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016a4a:	e007      	b.n	8016a5c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8016a4c:	89fb      	ldrh	r3, [r7, #14]
 8016a4e:	1c5a      	adds	r2, r3, #1
 8016a50:	81fa      	strh	r2, [r7, #14]
 8016a52:	461a      	mov	r2, r3
 8016a54:	68bb      	ldr	r3, [r7, #8]
 8016a56:	4413      	add	r3, r2
 8016a58:	2200      	movs	r2, #0
 8016a5a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8016a5c:	89fb      	ldrh	r3, [r7, #14]
 8016a5e:	2b43      	cmp	r3, #67	; 0x43
 8016a60:	d904      	bls.n	8016a6c <dhcp_option_trailer+0x40>
 8016a62:	89fb      	ldrh	r3, [r7, #14]
 8016a64:	f003 0303 	and.w	r3, r3, #3
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d002      	beq.n	8016a72 <dhcp_option_trailer+0x46>
 8016a6c:	89fb      	ldrh	r3, [r7, #14]
 8016a6e:	2b43      	cmp	r3, #67	; 0x43
 8016a70:	d9ec      	bls.n	8016a4c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016a72:	89fb      	ldrh	r3, [r7, #14]
 8016a74:	33f0      	adds	r3, #240	; 0xf0
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	4619      	mov	r1, r3
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f7f6 fed6 	bl	800d82c <pbuf_realloc>
}
 8016a80:	bf00      	nop
 8016a82:	3710      	adds	r7, #16
 8016a84:	46bd      	mov	sp, r7
 8016a86:	bd80      	pop	{r7, pc}

08016a88 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b085      	sub	sp, #20
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d017      	beq.n	8016ac6 <dhcp_supplied_address+0x3e>
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d013      	beq.n	8016ac6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aa2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016aa4:	68fb      	ldr	r3, [r7, #12]
 8016aa6:	795b      	ldrb	r3, [r3, #5]
 8016aa8:	2b0a      	cmp	r3, #10
 8016aaa:	d007      	beq.n	8016abc <dhcp_supplied_address+0x34>
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	795b      	ldrb	r3, [r3, #5]
 8016ab0:	2b05      	cmp	r3, #5
 8016ab2:	d003      	beq.n	8016abc <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016ab8:	2b04      	cmp	r3, #4
 8016aba:	d101      	bne.n	8016ac0 <dhcp_supplied_address+0x38>
 8016abc:	2301      	movs	r3, #1
 8016abe:	e000      	b.n	8016ac2 <dhcp_supplied_address+0x3a>
 8016ac0:	2300      	movs	r3, #0
 8016ac2:	b2db      	uxtb	r3, r3
 8016ac4:	e000      	b.n	8016ac8 <dhcp_supplied_address+0x40>
  }
  return 0;
 8016ac6:	2300      	movs	r3, #0
}
 8016ac8:	4618      	mov	r0, r3
 8016aca:	3714      	adds	r7, #20
 8016acc:	46bd      	mov	sp, r7
 8016ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ad2:	4770      	bx	lr

08016ad4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016adc:	4915      	ldr	r1, [pc, #84]	; (8016b34 <etharp_free_entry+0x60>)
 8016ade:	687a      	ldr	r2, [r7, #4]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	005b      	lsls	r3, r3, #1
 8016ae4:	4413      	add	r3, r2
 8016ae6:	00db      	lsls	r3, r3, #3
 8016ae8:	440b      	add	r3, r1
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d013      	beq.n	8016b18 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016af0:	4910      	ldr	r1, [pc, #64]	; (8016b34 <etharp_free_entry+0x60>)
 8016af2:	687a      	ldr	r2, [r7, #4]
 8016af4:	4613      	mov	r3, r2
 8016af6:	005b      	lsls	r3, r3, #1
 8016af8:	4413      	add	r3, r2
 8016afa:	00db      	lsls	r3, r3, #3
 8016afc:	440b      	add	r3, r1
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4618      	mov	r0, r3
 8016b02:	f7f7 f819 	bl	800db38 <pbuf_free>
    arp_table[i].q = NULL;
 8016b06:	490b      	ldr	r1, [pc, #44]	; (8016b34 <etharp_free_entry+0x60>)
 8016b08:	687a      	ldr	r2, [r7, #4]
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	005b      	lsls	r3, r3, #1
 8016b0e:	4413      	add	r3, r2
 8016b10:	00db      	lsls	r3, r3, #3
 8016b12:	440b      	add	r3, r1
 8016b14:	2200      	movs	r2, #0
 8016b16:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016b18:	4906      	ldr	r1, [pc, #24]	; (8016b34 <etharp_free_entry+0x60>)
 8016b1a:	687a      	ldr	r2, [r7, #4]
 8016b1c:	4613      	mov	r3, r2
 8016b1e:	005b      	lsls	r3, r3, #1
 8016b20:	4413      	add	r3, r2
 8016b22:	00db      	lsls	r3, r3, #3
 8016b24:	440b      	add	r3, r1
 8016b26:	3314      	adds	r3, #20
 8016b28:	2200      	movs	r2, #0
 8016b2a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016b2c:	bf00      	nop
 8016b2e:	3708      	adds	r7, #8
 8016b30:	46bd      	mov	sp, r7
 8016b32:	bd80      	pop	{r7, pc}
 8016b34:	2000cfb8 	.word	0x2000cfb8

08016b38 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b082      	sub	sp, #8
 8016b3c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016b3e:	2300      	movs	r3, #0
 8016b40:	607b      	str	r3, [r7, #4]
 8016b42:	e096      	b.n	8016c72 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016b44:	494f      	ldr	r1, [pc, #316]	; (8016c84 <etharp_tmr+0x14c>)
 8016b46:	687a      	ldr	r2, [r7, #4]
 8016b48:	4613      	mov	r3, r2
 8016b4a:	005b      	lsls	r3, r3, #1
 8016b4c:	4413      	add	r3, r2
 8016b4e:	00db      	lsls	r3, r3, #3
 8016b50:	440b      	add	r3, r1
 8016b52:	3314      	adds	r3, #20
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016b58:	78fb      	ldrb	r3, [r7, #3]
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	f000 8086 	beq.w	8016c6c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016b60:	4948      	ldr	r1, [pc, #288]	; (8016c84 <etharp_tmr+0x14c>)
 8016b62:	687a      	ldr	r2, [r7, #4]
 8016b64:	4613      	mov	r3, r2
 8016b66:	005b      	lsls	r3, r3, #1
 8016b68:	4413      	add	r3, r2
 8016b6a:	00db      	lsls	r3, r3, #3
 8016b6c:	440b      	add	r3, r1
 8016b6e:	3312      	adds	r3, #18
 8016b70:	881b      	ldrh	r3, [r3, #0]
 8016b72:	3301      	adds	r3, #1
 8016b74:	b298      	uxth	r0, r3
 8016b76:	4943      	ldr	r1, [pc, #268]	; (8016c84 <etharp_tmr+0x14c>)
 8016b78:	687a      	ldr	r2, [r7, #4]
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	005b      	lsls	r3, r3, #1
 8016b7e:	4413      	add	r3, r2
 8016b80:	00db      	lsls	r3, r3, #3
 8016b82:	440b      	add	r3, r1
 8016b84:	3312      	adds	r3, #18
 8016b86:	4602      	mov	r2, r0
 8016b88:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016b8a:	493e      	ldr	r1, [pc, #248]	; (8016c84 <etharp_tmr+0x14c>)
 8016b8c:	687a      	ldr	r2, [r7, #4]
 8016b8e:	4613      	mov	r3, r2
 8016b90:	005b      	lsls	r3, r3, #1
 8016b92:	4413      	add	r3, r2
 8016b94:	00db      	lsls	r3, r3, #3
 8016b96:	440b      	add	r3, r1
 8016b98:	3312      	adds	r3, #18
 8016b9a:	881b      	ldrh	r3, [r3, #0]
 8016b9c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016ba0:	d215      	bcs.n	8016bce <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016ba2:	4938      	ldr	r1, [pc, #224]	; (8016c84 <etharp_tmr+0x14c>)
 8016ba4:	687a      	ldr	r2, [r7, #4]
 8016ba6:	4613      	mov	r3, r2
 8016ba8:	005b      	lsls	r3, r3, #1
 8016baa:	4413      	add	r3, r2
 8016bac:	00db      	lsls	r3, r3, #3
 8016bae:	440b      	add	r3, r1
 8016bb0:	3314      	adds	r3, #20
 8016bb2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016bb4:	2b01      	cmp	r3, #1
 8016bb6:	d10e      	bne.n	8016bd6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016bb8:	4932      	ldr	r1, [pc, #200]	; (8016c84 <etharp_tmr+0x14c>)
 8016bba:	687a      	ldr	r2, [r7, #4]
 8016bbc:	4613      	mov	r3, r2
 8016bbe:	005b      	lsls	r3, r3, #1
 8016bc0:	4413      	add	r3, r2
 8016bc2:	00db      	lsls	r3, r3, #3
 8016bc4:	440b      	add	r3, r1
 8016bc6:	3312      	adds	r3, #18
 8016bc8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016bca:	2b04      	cmp	r3, #4
 8016bcc:	d903      	bls.n	8016bd6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f7ff ff80 	bl	8016ad4 <etharp_free_entry>
 8016bd4:	e04a      	b.n	8016c6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016bd6:	492b      	ldr	r1, [pc, #172]	; (8016c84 <etharp_tmr+0x14c>)
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	4613      	mov	r3, r2
 8016bdc:	005b      	lsls	r3, r3, #1
 8016bde:	4413      	add	r3, r2
 8016be0:	00db      	lsls	r3, r3, #3
 8016be2:	440b      	add	r3, r1
 8016be4:	3314      	adds	r3, #20
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	2b03      	cmp	r3, #3
 8016bea:	d10a      	bne.n	8016c02 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016bec:	4925      	ldr	r1, [pc, #148]	; (8016c84 <etharp_tmr+0x14c>)
 8016bee:	687a      	ldr	r2, [r7, #4]
 8016bf0:	4613      	mov	r3, r2
 8016bf2:	005b      	lsls	r3, r3, #1
 8016bf4:	4413      	add	r3, r2
 8016bf6:	00db      	lsls	r3, r3, #3
 8016bf8:	440b      	add	r3, r1
 8016bfa:	3314      	adds	r3, #20
 8016bfc:	2204      	movs	r2, #4
 8016bfe:	701a      	strb	r2, [r3, #0]
 8016c00:	e034      	b.n	8016c6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016c02:	4920      	ldr	r1, [pc, #128]	; (8016c84 <etharp_tmr+0x14c>)
 8016c04:	687a      	ldr	r2, [r7, #4]
 8016c06:	4613      	mov	r3, r2
 8016c08:	005b      	lsls	r3, r3, #1
 8016c0a:	4413      	add	r3, r2
 8016c0c:	00db      	lsls	r3, r3, #3
 8016c0e:	440b      	add	r3, r1
 8016c10:	3314      	adds	r3, #20
 8016c12:	781b      	ldrb	r3, [r3, #0]
 8016c14:	2b04      	cmp	r3, #4
 8016c16:	d10a      	bne.n	8016c2e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016c18:	491a      	ldr	r1, [pc, #104]	; (8016c84 <etharp_tmr+0x14c>)
 8016c1a:	687a      	ldr	r2, [r7, #4]
 8016c1c:	4613      	mov	r3, r2
 8016c1e:	005b      	lsls	r3, r3, #1
 8016c20:	4413      	add	r3, r2
 8016c22:	00db      	lsls	r3, r3, #3
 8016c24:	440b      	add	r3, r1
 8016c26:	3314      	adds	r3, #20
 8016c28:	2202      	movs	r2, #2
 8016c2a:	701a      	strb	r2, [r3, #0]
 8016c2c:	e01e      	b.n	8016c6c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016c2e:	4915      	ldr	r1, [pc, #84]	; (8016c84 <etharp_tmr+0x14c>)
 8016c30:	687a      	ldr	r2, [r7, #4]
 8016c32:	4613      	mov	r3, r2
 8016c34:	005b      	lsls	r3, r3, #1
 8016c36:	4413      	add	r3, r2
 8016c38:	00db      	lsls	r3, r3, #3
 8016c3a:	440b      	add	r3, r1
 8016c3c:	3314      	adds	r3, #20
 8016c3e:	781b      	ldrb	r3, [r3, #0]
 8016c40:	2b01      	cmp	r3, #1
 8016c42:	d113      	bne.n	8016c6c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016c44:	490f      	ldr	r1, [pc, #60]	; (8016c84 <etharp_tmr+0x14c>)
 8016c46:	687a      	ldr	r2, [r7, #4]
 8016c48:	4613      	mov	r3, r2
 8016c4a:	005b      	lsls	r3, r3, #1
 8016c4c:	4413      	add	r3, r2
 8016c4e:	00db      	lsls	r3, r3, #3
 8016c50:	440b      	add	r3, r1
 8016c52:	3308      	adds	r3, #8
 8016c54:	6818      	ldr	r0, [r3, #0]
 8016c56:	687a      	ldr	r2, [r7, #4]
 8016c58:	4613      	mov	r3, r2
 8016c5a:	005b      	lsls	r3, r3, #1
 8016c5c:	4413      	add	r3, r2
 8016c5e:	00db      	lsls	r3, r3, #3
 8016c60:	4a08      	ldr	r2, [pc, #32]	; (8016c84 <etharp_tmr+0x14c>)
 8016c62:	4413      	add	r3, r2
 8016c64:	3304      	adds	r3, #4
 8016c66:	4619      	mov	r1, r3
 8016c68:	f000 fe72 	bl	8017950 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	3301      	adds	r3, #1
 8016c70:	607b      	str	r3, [r7, #4]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	2b09      	cmp	r3, #9
 8016c76:	f77f af65 	ble.w	8016b44 <etharp_tmr+0xc>
      }
    }
  }
}
 8016c7a:	bf00      	nop
 8016c7c:	bf00      	nop
 8016c7e:	3708      	adds	r7, #8
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}
 8016c84:	2000cfb8 	.word	0x2000cfb8

08016c88 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b08a      	sub	sp, #40	; 0x28
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	60f8      	str	r0, [r7, #12]
 8016c90:	460b      	mov	r3, r1
 8016c92:	607a      	str	r2, [r7, #4]
 8016c94:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016c96:	230a      	movs	r3, #10
 8016c98:	84fb      	strh	r3, [r7, #38]	; 0x26
 8016c9a:	230a      	movs	r3, #10
 8016c9c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8016c9e:	230a      	movs	r3, #10
 8016ca0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016ca6:	230a      	movs	r3, #10
 8016ca8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8016caa:	2300      	movs	r3, #0
 8016cac:	83bb      	strh	r3, [r7, #28]
 8016cae:	2300      	movs	r3, #0
 8016cb0:	837b      	strh	r3, [r7, #26]
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	843b      	strh	r3, [r7, #32]
 8016cba:	e0ae      	b.n	8016e1a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8016cbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016cc0:	49a6      	ldr	r1, [pc, #664]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016cc2:	4613      	mov	r3, r2
 8016cc4:	005b      	lsls	r3, r3, #1
 8016cc6:	4413      	add	r3, r2
 8016cc8:	00db      	lsls	r3, r3, #3
 8016cca:	440b      	add	r3, r1
 8016ccc:	3314      	adds	r3, #20
 8016cce:	781b      	ldrb	r3, [r3, #0]
 8016cd0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8016cd2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016cd6:	2b0a      	cmp	r3, #10
 8016cd8:	d105      	bne.n	8016ce6 <etharp_find_entry+0x5e>
 8016cda:	7dfb      	ldrb	r3, [r7, #23]
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d102      	bne.n	8016ce6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8016ce0:	8c3b      	ldrh	r3, [r7, #32]
 8016ce2:	847b      	strh	r3, [r7, #34]	; 0x22
 8016ce4:	e095      	b.n	8016e12 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8016ce6:	7dfb      	ldrb	r3, [r7, #23]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	f000 8092 	beq.w	8016e12 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8016cee:	7dfb      	ldrb	r3, [r7, #23]
 8016cf0:	2b01      	cmp	r3, #1
 8016cf2:	d009      	beq.n	8016d08 <etharp_find_entry+0x80>
 8016cf4:	7dfb      	ldrb	r3, [r7, #23]
 8016cf6:	2b01      	cmp	r3, #1
 8016cf8:	d806      	bhi.n	8016d08 <etharp_find_entry+0x80>
 8016cfa:	4b99      	ldr	r3, [pc, #612]	; (8016f60 <etharp_find_entry+0x2d8>)
 8016cfc:	f240 1223 	movw	r2, #291	; 0x123
 8016d00:	4998      	ldr	r1, [pc, #608]	; (8016f64 <etharp_find_entry+0x2dc>)
 8016d02:	4899      	ldr	r0, [pc, #612]	; (8016f68 <etharp_find_entry+0x2e0>)
 8016d04:	f002 fc62 	bl	80195cc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d020      	beq.n	8016d50 <etharp_find_entry+0xc8>
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	6819      	ldr	r1, [r3, #0]
 8016d12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d16:	4891      	ldr	r0, [pc, #580]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016d18:	4613      	mov	r3, r2
 8016d1a:	005b      	lsls	r3, r3, #1
 8016d1c:	4413      	add	r3, r2
 8016d1e:	00db      	lsls	r3, r3, #3
 8016d20:	4403      	add	r3, r0
 8016d22:	3304      	adds	r3, #4
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	4299      	cmp	r1, r3
 8016d28:	d112      	bne.n	8016d50 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d00c      	beq.n	8016d4a <etharp_find_entry+0xc2>
 8016d30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d34:	4989      	ldr	r1, [pc, #548]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016d36:	4613      	mov	r3, r2
 8016d38:	005b      	lsls	r3, r3, #1
 8016d3a:	4413      	add	r3, r2
 8016d3c:	00db      	lsls	r3, r3, #3
 8016d3e:	440b      	add	r3, r1
 8016d40:	3308      	adds	r3, #8
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	429a      	cmp	r2, r3
 8016d48:	d102      	bne.n	8016d50 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8016d4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016d4e:	e100      	b.n	8016f52 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016d50:	7dfb      	ldrb	r3, [r7, #23]
 8016d52:	2b01      	cmp	r3, #1
 8016d54:	d140      	bne.n	8016dd8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016d56:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d5a:	4980      	ldr	r1, [pc, #512]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016d5c:	4613      	mov	r3, r2
 8016d5e:	005b      	lsls	r3, r3, #1
 8016d60:	4413      	add	r3, r2
 8016d62:	00db      	lsls	r3, r3, #3
 8016d64:	440b      	add	r3, r1
 8016d66:	681b      	ldr	r3, [r3, #0]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d01a      	beq.n	8016da2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8016d6c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d70:	497a      	ldr	r1, [pc, #488]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016d72:	4613      	mov	r3, r2
 8016d74:	005b      	lsls	r3, r3, #1
 8016d76:	4413      	add	r3, r2
 8016d78:	00db      	lsls	r3, r3, #3
 8016d7a:	440b      	add	r3, r1
 8016d7c:	3312      	adds	r3, #18
 8016d7e:	881b      	ldrh	r3, [r3, #0]
 8016d80:	8bba      	ldrh	r2, [r7, #28]
 8016d82:	429a      	cmp	r2, r3
 8016d84:	d845      	bhi.n	8016e12 <etharp_find_entry+0x18a>
            old_queue = i;
 8016d86:	8c3b      	ldrh	r3, [r7, #32]
 8016d88:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8016d8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016d8e:	4973      	ldr	r1, [pc, #460]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016d90:	4613      	mov	r3, r2
 8016d92:	005b      	lsls	r3, r3, #1
 8016d94:	4413      	add	r3, r2
 8016d96:	00db      	lsls	r3, r3, #3
 8016d98:	440b      	add	r3, r1
 8016d9a:	3312      	adds	r3, #18
 8016d9c:	881b      	ldrh	r3, [r3, #0]
 8016d9e:	83bb      	strh	r3, [r7, #28]
 8016da0:	e037      	b.n	8016e12 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016da2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016da6:	496d      	ldr	r1, [pc, #436]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016da8:	4613      	mov	r3, r2
 8016daa:	005b      	lsls	r3, r3, #1
 8016dac:	4413      	add	r3, r2
 8016dae:	00db      	lsls	r3, r3, #3
 8016db0:	440b      	add	r3, r1
 8016db2:	3312      	adds	r3, #18
 8016db4:	881b      	ldrh	r3, [r3, #0]
 8016db6:	8b7a      	ldrh	r2, [r7, #26]
 8016db8:	429a      	cmp	r2, r3
 8016dba:	d82a      	bhi.n	8016e12 <etharp_find_entry+0x18a>
            old_pending = i;
 8016dbc:	8c3b      	ldrh	r3, [r7, #32]
 8016dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8016dc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016dc4:	4965      	ldr	r1, [pc, #404]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016dc6:	4613      	mov	r3, r2
 8016dc8:	005b      	lsls	r3, r3, #1
 8016dca:	4413      	add	r3, r2
 8016dcc:	00db      	lsls	r3, r3, #3
 8016dce:	440b      	add	r3, r1
 8016dd0:	3312      	adds	r3, #18
 8016dd2:	881b      	ldrh	r3, [r3, #0]
 8016dd4:	837b      	strh	r3, [r7, #26]
 8016dd6:	e01c      	b.n	8016e12 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8016dd8:	7dfb      	ldrb	r3, [r7, #23]
 8016dda:	2b01      	cmp	r3, #1
 8016ddc:	d919      	bls.n	8016e12 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8016dde:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016de2:	495e      	ldr	r1, [pc, #376]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016de4:	4613      	mov	r3, r2
 8016de6:	005b      	lsls	r3, r3, #1
 8016de8:	4413      	add	r3, r2
 8016dea:	00db      	lsls	r3, r3, #3
 8016dec:	440b      	add	r3, r1
 8016dee:	3312      	adds	r3, #18
 8016df0:	881b      	ldrh	r3, [r3, #0]
 8016df2:	8b3a      	ldrh	r2, [r7, #24]
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d80c      	bhi.n	8016e12 <etharp_find_entry+0x18a>
            old_stable = i;
 8016df8:	8c3b      	ldrh	r3, [r7, #32]
 8016dfa:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8016dfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e00:	4956      	ldr	r1, [pc, #344]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016e02:	4613      	mov	r3, r2
 8016e04:	005b      	lsls	r3, r3, #1
 8016e06:	4413      	add	r3, r2
 8016e08:	00db      	lsls	r3, r3, #3
 8016e0a:	440b      	add	r3, r1
 8016e0c:	3312      	adds	r3, #18
 8016e0e:	881b      	ldrh	r3, [r3, #0]
 8016e10:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016e12:	8c3b      	ldrh	r3, [r7, #32]
 8016e14:	3301      	adds	r3, #1
 8016e16:	b29b      	uxth	r3, r3
 8016e18:	843b      	strh	r3, [r7, #32]
 8016e1a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016e1e:	2b09      	cmp	r3, #9
 8016e20:	f77f af4c 	ble.w	8016cbc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016e24:	7afb      	ldrb	r3, [r7, #11]
 8016e26:	f003 0302 	and.w	r3, r3, #2
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d108      	bne.n	8016e40 <etharp_find_entry+0x1b8>
 8016e2e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016e32:	2b0a      	cmp	r3, #10
 8016e34:	d107      	bne.n	8016e46 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016e36:	7afb      	ldrb	r3, [r7, #11]
 8016e38:	f003 0301 	and.w	r3, r3, #1
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d102      	bne.n	8016e46 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016e40:	f04f 33ff 	mov.w	r3, #4294967295
 8016e44:	e085      	b.n	8016f52 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016e46:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016e4a:	2b09      	cmp	r3, #9
 8016e4c:	dc02      	bgt.n	8016e54 <etharp_find_entry+0x1cc>
    i = empty;
 8016e4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016e50:	843b      	strh	r3, [r7, #32]
 8016e52:	e039      	b.n	8016ec8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016e54:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016e58:	2b09      	cmp	r3, #9
 8016e5a:	dc14      	bgt.n	8016e86 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8016e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016e5e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016e60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016e64:	493d      	ldr	r1, [pc, #244]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016e66:	4613      	mov	r3, r2
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	4413      	add	r3, r2
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	440b      	add	r3, r1
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d018      	beq.n	8016ea8 <etharp_find_entry+0x220>
 8016e76:	4b3a      	ldr	r3, [pc, #232]	; (8016f60 <etharp_find_entry+0x2d8>)
 8016e78:	f240 126d 	movw	r2, #365	; 0x16d
 8016e7c:	493b      	ldr	r1, [pc, #236]	; (8016f6c <etharp_find_entry+0x2e4>)
 8016e7e:	483a      	ldr	r0, [pc, #232]	; (8016f68 <etharp_find_entry+0x2e0>)
 8016e80:	f002 fba4 	bl	80195cc <iprintf>
 8016e84:	e010      	b.n	8016ea8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016e86:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8016e8a:	2b09      	cmp	r3, #9
 8016e8c:	dc02      	bgt.n	8016e94 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8016e8e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016e90:	843b      	strh	r3, [r7, #32]
 8016e92:	e009      	b.n	8016ea8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016e94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016e98:	2b09      	cmp	r3, #9
 8016e9a:	dc02      	bgt.n	8016ea2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8016e9c:	8bfb      	ldrh	r3, [r7, #30]
 8016e9e:	843b      	strh	r3, [r7, #32]
 8016ea0:	e002      	b.n	8016ea8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ea6:	e054      	b.n	8016f52 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016ea8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016eac:	2b09      	cmp	r3, #9
 8016eae:	dd06      	ble.n	8016ebe <etharp_find_entry+0x236>
 8016eb0:	4b2b      	ldr	r3, [pc, #172]	; (8016f60 <etharp_find_entry+0x2d8>)
 8016eb2:	f240 127f 	movw	r2, #383	; 0x17f
 8016eb6:	492e      	ldr	r1, [pc, #184]	; (8016f70 <etharp_find_entry+0x2e8>)
 8016eb8:	482b      	ldr	r0, [pc, #172]	; (8016f68 <etharp_find_entry+0x2e0>)
 8016eba:	f002 fb87 	bl	80195cc <iprintf>
    etharp_free_entry(i);
 8016ebe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f7ff fe06 	bl	8016ad4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016ec8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8016ecc:	2b09      	cmp	r3, #9
 8016ece:	dd06      	ble.n	8016ede <etharp_find_entry+0x256>
 8016ed0:	4b23      	ldr	r3, [pc, #140]	; (8016f60 <etharp_find_entry+0x2d8>)
 8016ed2:	f240 1283 	movw	r2, #387	; 0x183
 8016ed6:	4926      	ldr	r1, [pc, #152]	; (8016f70 <etharp_find_entry+0x2e8>)
 8016ed8:	4823      	ldr	r0, [pc, #140]	; (8016f68 <etharp_find_entry+0x2e0>)
 8016eda:	f002 fb77 	bl	80195cc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8016ede:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016ee2:	491e      	ldr	r1, [pc, #120]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016ee4:	4613      	mov	r3, r2
 8016ee6:	005b      	lsls	r3, r3, #1
 8016ee8:	4413      	add	r3, r2
 8016eea:	00db      	lsls	r3, r3, #3
 8016eec:	440b      	add	r3, r1
 8016eee:	3314      	adds	r3, #20
 8016ef0:	781b      	ldrb	r3, [r3, #0]
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d006      	beq.n	8016f04 <etharp_find_entry+0x27c>
 8016ef6:	4b1a      	ldr	r3, [pc, #104]	; (8016f60 <etharp_find_entry+0x2d8>)
 8016ef8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8016efc:	491d      	ldr	r1, [pc, #116]	; (8016f74 <etharp_find_entry+0x2ec>)
 8016efe:	481a      	ldr	r0, [pc, #104]	; (8016f68 <etharp_find_entry+0x2e0>)
 8016f00:	f002 fb64 	bl	80195cc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	2b00      	cmp	r3, #0
 8016f08:	d00b      	beq.n	8016f22 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8016f0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	6819      	ldr	r1, [r3, #0]
 8016f12:	4812      	ldr	r0, [pc, #72]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016f14:	4613      	mov	r3, r2
 8016f16:	005b      	lsls	r3, r3, #1
 8016f18:	4413      	add	r3, r2
 8016f1a:	00db      	lsls	r3, r3, #3
 8016f1c:	4403      	add	r3, r0
 8016f1e:	3304      	adds	r3, #4
 8016f20:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016f22:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f26:	490d      	ldr	r1, [pc, #52]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016f28:	4613      	mov	r3, r2
 8016f2a:	005b      	lsls	r3, r3, #1
 8016f2c:	4413      	add	r3, r2
 8016f2e:	00db      	lsls	r3, r3, #3
 8016f30:	440b      	add	r3, r1
 8016f32:	3312      	adds	r3, #18
 8016f34:	2200      	movs	r2, #0
 8016f36:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016f38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016f3c:	4907      	ldr	r1, [pc, #28]	; (8016f5c <etharp_find_entry+0x2d4>)
 8016f3e:	4613      	mov	r3, r2
 8016f40:	005b      	lsls	r3, r3, #1
 8016f42:	4413      	add	r3, r2
 8016f44:	00db      	lsls	r3, r3, #3
 8016f46:	440b      	add	r3, r1
 8016f48:	3308      	adds	r3, #8
 8016f4a:	687a      	ldr	r2, [r7, #4]
 8016f4c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8016f4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016f52:	4618      	mov	r0, r3
 8016f54:	3728      	adds	r7, #40	; 0x28
 8016f56:	46bd      	mov	sp, r7
 8016f58:	bd80      	pop	{r7, pc}
 8016f5a:	bf00      	nop
 8016f5c:	2000cfb8 	.word	0x2000cfb8
 8016f60:	0801d004 	.word	0x0801d004
 8016f64:	0801d03c 	.word	0x0801d03c
 8016f68:	0801d07c 	.word	0x0801d07c
 8016f6c:	0801d0a4 	.word	0x0801d0a4
 8016f70:	0801d0bc 	.word	0x0801d0bc
 8016f74:	0801d0d0 	.word	0x0801d0d0

08016f78 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b088      	sub	sp, #32
 8016f7c:	af02      	add	r7, sp, #8
 8016f7e:	60f8      	str	r0, [r7, #12]
 8016f80:	60b9      	str	r1, [r7, #8]
 8016f82:	607a      	str	r2, [r7, #4]
 8016f84:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016f8c:	2b06      	cmp	r3, #6
 8016f8e:	d006      	beq.n	8016f9e <etharp_update_arp_entry+0x26>
 8016f90:	4b48      	ldr	r3, [pc, #288]	; (80170b4 <etharp_update_arp_entry+0x13c>)
 8016f92:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016f96:	4948      	ldr	r1, [pc, #288]	; (80170b8 <etharp_update_arp_entry+0x140>)
 8016f98:	4848      	ldr	r0, [pc, #288]	; (80170bc <etharp_update_arp_entry+0x144>)
 8016f9a:	f002 fb17 	bl	80195cc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d012      	beq.n	8016fca <etharp_update_arp_entry+0x52>
 8016fa4:	68bb      	ldr	r3, [r7, #8]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d00e      	beq.n	8016fca <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	681b      	ldr	r3, [r3, #0]
 8016fb0:	68f9      	ldr	r1, [r7, #12]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f001 f920 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 8016fb8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d105      	bne.n	8016fca <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8016fbe:	68bb      	ldr	r3, [r7, #8]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8016fc6:	2be0      	cmp	r3, #224	; 0xe0
 8016fc8:	d102      	bne.n	8016fd0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016fca:	f06f 030f 	mvn.w	r3, #15
 8016fce:	e06c      	b.n	80170aa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8016fd0:	78fb      	ldrb	r3, [r7, #3]
 8016fd2:	68fa      	ldr	r2, [r7, #12]
 8016fd4:	4619      	mov	r1, r3
 8016fd6:	68b8      	ldr	r0, [r7, #8]
 8016fd8:	f7ff fe56 	bl	8016c88 <etharp_find_entry>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8016fe0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	da02      	bge.n	8016fee <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8016fe8:	8afb      	ldrh	r3, [r7, #22]
 8016fea:	b25b      	sxtb	r3, r3
 8016fec:	e05d      	b.n	80170aa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8016fee:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016ff2:	4933      	ldr	r1, [pc, #204]	; (80170c0 <etharp_update_arp_entry+0x148>)
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	440b      	add	r3, r1
 8016ffe:	3314      	adds	r3, #20
 8017000:	2202      	movs	r2, #2
 8017002:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017004:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017008:	492d      	ldr	r1, [pc, #180]	; (80170c0 <etharp_update_arp_entry+0x148>)
 801700a:	4613      	mov	r3, r2
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	4413      	add	r3, r2
 8017010:	00db      	lsls	r3, r3, #3
 8017012:	440b      	add	r3, r1
 8017014:	3308      	adds	r3, #8
 8017016:	68fa      	ldr	r2, [r7, #12]
 8017018:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801701a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801701e:	4613      	mov	r3, r2
 8017020:	005b      	lsls	r3, r3, #1
 8017022:	4413      	add	r3, r2
 8017024:	00db      	lsls	r3, r3, #3
 8017026:	3308      	adds	r3, #8
 8017028:	4a25      	ldr	r2, [pc, #148]	; (80170c0 <etharp_update_arp_entry+0x148>)
 801702a:	4413      	add	r3, r2
 801702c:	3304      	adds	r3, #4
 801702e:	2206      	movs	r2, #6
 8017030:	6879      	ldr	r1, [r7, #4]
 8017032:	4618      	mov	r0, r3
 8017034:	f002 fbc8 	bl	80197c8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017038:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801703c:	4920      	ldr	r1, [pc, #128]	; (80170c0 <etharp_update_arp_entry+0x148>)
 801703e:	4613      	mov	r3, r2
 8017040:	005b      	lsls	r3, r3, #1
 8017042:	4413      	add	r3, r2
 8017044:	00db      	lsls	r3, r3, #3
 8017046:	440b      	add	r3, r1
 8017048:	3312      	adds	r3, #18
 801704a:	2200      	movs	r2, #0
 801704c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801704e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017052:	491b      	ldr	r1, [pc, #108]	; (80170c0 <etharp_update_arp_entry+0x148>)
 8017054:	4613      	mov	r3, r2
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	4413      	add	r3, r2
 801705a:	00db      	lsls	r3, r3, #3
 801705c:	440b      	add	r3, r1
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d021      	beq.n	80170a8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017064:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017068:	4915      	ldr	r1, [pc, #84]	; (80170c0 <etharp_update_arp_entry+0x148>)
 801706a:	4613      	mov	r3, r2
 801706c:	005b      	lsls	r3, r3, #1
 801706e:	4413      	add	r3, r2
 8017070:	00db      	lsls	r3, r3, #3
 8017072:	440b      	add	r3, r1
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017078:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801707c:	4910      	ldr	r1, [pc, #64]	; (80170c0 <etharp_update_arp_entry+0x148>)
 801707e:	4613      	mov	r3, r2
 8017080:	005b      	lsls	r3, r3, #1
 8017082:	4413      	add	r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	440b      	add	r3, r1
 8017088:	2200      	movs	r2, #0
 801708a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8017092:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017096:	9300      	str	r3, [sp, #0]
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	6939      	ldr	r1, [r7, #16]
 801709c:	68f8      	ldr	r0, [r7, #12]
 801709e:	f001 ffb9 	bl	8019014 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80170a2:	6938      	ldr	r0, [r7, #16]
 80170a4:	f7f6 fd48 	bl	800db38 <pbuf_free>
  }
  return ERR_OK;
 80170a8:	2300      	movs	r3, #0
}
 80170aa:	4618      	mov	r0, r3
 80170ac:	3718      	adds	r7, #24
 80170ae:	46bd      	mov	sp, r7
 80170b0:	bd80      	pop	{r7, pc}
 80170b2:	bf00      	nop
 80170b4:	0801d004 	.word	0x0801d004
 80170b8:	0801d0fc 	.word	0x0801d0fc
 80170bc:	0801d07c 	.word	0x0801d07c
 80170c0:	2000cfb8 	.word	0x2000cfb8

080170c4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b084      	sub	sp, #16
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80170cc:	2300      	movs	r3, #0
 80170ce:	60fb      	str	r3, [r7, #12]
 80170d0:	e01e      	b.n	8017110 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80170d2:	4913      	ldr	r1, [pc, #76]	; (8017120 <etharp_cleanup_netif+0x5c>)
 80170d4:	68fa      	ldr	r2, [r7, #12]
 80170d6:	4613      	mov	r3, r2
 80170d8:	005b      	lsls	r3, r3, #1
 80170da:	4413      	add	r3, r2
 80170dc:	00db      	lsls	r3, r3, #3
 80170de:	440b      	add	r3, r1
 80170e0:	3314      	adds	r3, #20
 80170e2:	781b      	ldrb	r3, [r3, #0]
 80170e4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80170e6:	7afb      	ldrb	r3, [r7, #11]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d00e      	beq.n	801710a <etharp_cleanup_netif+0x46>
 80170ec:	490c      	ldr	r1, [pc, #48]	; (8017120 <etharp_cleanup_netif+0x5c>)
 80170ee:	68fa      	ldr	r2, [r7, #12]
 80170f0:	4613      	mov	r3, r2
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	4413      	add	r3, r2
 80170f6:	00db      	lsls	r3, r3, #3
 80170f8:	440b      	add	r3, r1
 80170fa:	3308      	adds	r3, #8
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	429a      	cmp	r2, r3
 8017102:	d102      	bne.n	801710a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017104:	68f8      	ldr	r0, [r7, #12]
 8017106:	f7ff fce5 	bl	8016ad4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801710a:	68fb      	ldr	r3, [r7, #12]
 801710c:	3301      	adds	r3, #1
 801710e:	60fb      	str	r3, [r7, #12]
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	2b09      	cmp	r3, #9
 8017114:	dddd      	ble.n	80170d2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8017116:	bf00      	nop
 8017118:	bf00      	nop
 801711a:	3710      	adds	r7, #16
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}
 8017120:	2000cfb8 	.word	0x2000cfb8

08017124 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017124:	b5b0      	push	{r4, r5, r7, lr}
 8017126:	b08a      	sub	sp, #40	; 0x28
 8017128:	af04      	add	r7, sp, #16
 801712a:	6078      	str	r0, [r7, #4]
 801712c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801712e:	683b      	ldr	r3, [r7, #0]
 8017130:	2b00      	cmp	r3, #0
 8017132:	d107      	bne.n	8017144 <etharp_input+0x20>
 8017134:	4b3f      	ldr	r3, [pc, #252]	; (8017234 <etharp_input+0x110>)
 8017136:	f240 228a 	movw	r2, #650	; 0x28a
 801713a:	493f      	ldr	r1, [pc, #252]	; (8017238 <etharp_input+0x114>)
 801713c:	483f      	ldr	r0, [pc, #252]	; (801723c <etharp_input+0x118>)
 801713e:	f002 fa45 	bl	80195cc <iprintf>
 8017142:	e074      	b.n	801722e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8017144:	687b      	ldr	r3, [r7, #4]
 8017146:	685b      	ldr	r3, [r3, #4]
 8017148:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801714a:	693b      	ldr	r3, [r7, #16]
 801714c:	881b      	ldrh	r3, [r3, #0]
 801714e:	b29b      	uxth	r3, r3
 8017150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017154:	d10c      	bne.n	8017170 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801715a:	2b06      	cmp	r3, #6
 801715c:	d108      	bne.n	8017170 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801715e:	693b      	ldr	r3, [r7, #16]
 8017160:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017162:	2b04      	cmp	r3, #4
 8017164:	d104      	bne.n	8017170 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8017166:	693b      	ldr	r3, [r7, #16]
 8017168:	885b      	ldrh	r3, [r3, #2]
 801716a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801716c:	2b08      	cmp	r3, #8
 801716e:	d003      	beq.n	8017178 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017170:	6878      	ldr	r0, [r7, #4]
 8017172:	f7f6 fce1 	bl	800db38 <pbuf_free>
    return;
 8017176:	e05a      	b.n	801722e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017178:	693b      	ldr	r3, [r7, #16]
 801717a:	330e      	adds	r3, #14
 801717c:	681b      	ldr	r3, [r3, #0]
 801717e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	3318      	adds	r3, #24
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017188:	683b      	ldr	r3, [r7, #0]
 801718a:	3304      	adds	r3, #4
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d102      	bne.n	8017198 <etharp_input+0x74>
    for_us = 0;
 8017192:	2300      	movs	r3, #0
 8017194:	75fb      	strb	r3, [r7, #23]
 8017196:	e009      	b.n	80171ac <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017198:	68ba      	ldr	r2, [r7, #8]
 801719a:	683b      	ldr	r3, [r7, #0]
 801719c:	3304      	adds	r3, #4
 801719e:	681b      	ldr	r3, [r3, #0]
 80171a0:	429a      	cmp	r2, r3
 80171a2:	bf0c      	ite	eq
 80171a4:	2301      	moveq	r3, #1
 80171a6:	2300      	movne	r3, #0
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80171ac:	693b      	ldr	r3, [r7, #16]
 80171ae:	f103 0208 	add.w	r2, r3, #8
 80171b2:	7dfb      	ldrb	r3, [r7, #23]
 80171b4:	2b00      	cmp	r3, #0
 80171b6:	d001      	beq.n	80171bc <etharp_input+0x98>
 80171b8:	2301      	movs	r3, #1
 80171ba:	e000      	b.n	80171be <etharp_input+0x9a>
 80171bc:	2302      	movs	r3, #2
 80171be:	f107 010c 	add.w	r1, r7, #12
 80171c2:	6838      	ldr	r0, [r7, #0]
 80171c4:	f7ff fed8 	bl	8016f78 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80171c8:	693b      	ldr	r3, [r7, #16]
 80171ca:	88db      	ldrh	r3, [r3, #6]
 80171cc:	b29b      	uxth	r3, r3
 80171ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80171d2:	d003      	beq.n	80171dc <etharp_input+0xb8>
 80171d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80171d8:	d01e      	beq.n	8017218 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80171da:	e025      	b.n	8017228 <etharp_input+0x104>
      if (for_us) {
 80171dc:	7dfb      	ldrb	r3, [r7, #23]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d021      	beq.n	8017226 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80171e2:	683b      	ldr	r3, [r7, #0]
 80171e4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80171e8:	693b      	ldr	r3, [r7, #16]
 80171ea:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80171ee:	683b      	ldr	r3, [r7, #0]
 80171f0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80171f4:	683b      	ldr	r3, [r7, #0]
 80171f6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80171f8:	693a      	ldr	r2, [r7, #16]
 80171fa:	3208      	adds	r2, #8
        etharp_raw(netif,
 80171fc:	2102      	movs	r1, #2
 80171fe:	9103      	str	r1, [sp, #12]
 8017200:	f107 010c 	add.w	r1, r7, #12
 8017204:	9102      	str	r1, [sp, #8]
 8017206:	9201      	str	r2, [sp, #4]
 8017208:	9300      	str	r3, [sp, #0]
 801720a:	462b      	mov	r3, r5
 801720c:	4622      	mov	r2, r4
 801720e:	4601      	mov	r1, r0
 8017210:	6838      	ldr	r0, [r7, #0]
 8017212:	f000 faef 	bl	80177f4 <etharp_raw>
      break;
 8017216:	e006      	b.n	8017226 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8017218:	f107 030c 	add.w	r3, r7, #12
 801721c:	4619      	mov	r1, r3
 801721e:	6838      	ldr	r0, [r7, #0]
 8017220:	f7fe f9fc 	bl	801561c <dhcp_arp_reply>
      break;
 8017224:	e000      	b.n	8017228 <etharp_input+0x104>
      break;
 8017226:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8017228:	6878      	ldr	r0, [r7, #4]
 801722a:	f7f6 fc85 	bl	800db38 <pbuf_free>
}
 801722e:	3718      	adds	r7, #24
 8017230:	46bd      	mov	sp, r7
 8017232:	bdb0      	pop	{r4, r5, r7, pc}
 8017234:	0801d004 	.word	0x0801d004
 8017238:	0801d154 	.word	0x0801d154
 801723c:	0801d07c 	.word	0x0801d07c

08017240 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b086      	sub	sp, #24
 8017244:	af02      	add	r7, sp, #8
 8017246:	60f8      	str	r0, [r7, #12]
 8017248:	60b9      	str	r1, [r7, #8]
 801724a:	4613      	mov	r3, r2
 801724c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801724e:	79fa      	ldrb	r2, [r7, #7]
 8017250:	4944      	ldr	r1, [pc, #272]	; (8017364 <etharp_output_to_arp_index+0x124>)
 8017252:	4613      	mov	r3, r2
 8017254:	005b      	lsls	r3, r3, #1
 8017256:	4413      	add	r3, r2
 8017258:	00db      	lsls	r3, r3, #3
 801725a:	440b      	add	r3, r1
 801725c:	3314      	adds	r3, #20
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	2b01      	cmp	r3, #1
 8017262:	d806      	bhi.n	8017272 <etharp_output_to_arp_index+0x32>
 8017264:	4b40      	ldr	r3, [pc, #256]	; (8017368 <etharp_output_to_arp_index+0x128>)
 8017266:	f240 22ee 	movw	r2, #750	; 0x2ee
 801726a:	4940      	ldr	r1, [pc, #256]	; (801736c <etharp_output_to_arp_index+0x12c>)
 801726c:	4840      	ldr	r0, [pc, #256]	; (8017370 <etharp_output_to_arp_index+0x130>)
 801726e:	f002 f9ad 	bl	80195cc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017272:	79fa      	ldrb	r2, [r7, #7]
 8017274:	493b      	ldr	r1, [pc, #236]	; (8017364 <etharp_output_to_arp_index+0x124>)
 8017276:	4613      	mov	r3, r2
 8017278:	005b      	lsls	r3, r3, #1
 801727a:	4413      	add	r3, r2
 801727c:	00db      	lsls	r3, r3, #3
 801727e:	440b      	add	r3, r1
 8017280:	3314      	adds	r3, #20
 8017282:	781b      	ldrb	r3, [r3, #0]
 8017284:	2b02      	cmp	r3, #2
 8017286:	d153      	bne.n	8017330 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017288:	79fa      	ldrb	r2, [r7, #7]
 801728a:	4936      	ldr	r1, [pc, #216]	; (8017364 <etharp_output_to_arp_index+0x124>)
 801728c:	4613      	mov	r3, r2
 801728e:	005b      	lsls	r3, r3, #1
 8017290:	4413      	add	r3, r2
 8017292:	00db      	lsls	r3, r3, #3
 8017294:	440b      	add	r3, r1
 8017296:	3312      	adds	r3, #18
 8017298:	881b      	ldrh	r3, [r3, #0]
 801729a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801729e:	d919      	bls.n	80172d4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80172a0:	79fa      	ldrb	r2, [r7, #7]
 80172a2:	4613      	mov	r3, r2
 80172a4:	005b      	lsls	r3, r3, #1
 80172a6:	4413      	add	r3, r2
 80172a8:	00db      	lsls	r3, r3, #3
 80172aa:	4a2e      	ldr	r2, [pc, #184]	; (8017364 <etharp_output_to_arp_index+0x124>)
 80172ac:	4413      	add	r3, r2
 80172ae:	3304      	adds	r3, #4
 80172b0:	4619      	mov	r1, r3
 80172b2:	68f8      	ldr	r0, [r7, #12]
 80172b4:	f000 fb4c 	bl	8017950 <etharp_request>
 80172b8:	4603      	mov	r3, r0
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d138      	bne.n	8017330 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80172be:	79fa      	ldrb	r2, [r7, #7]
 80172c0:	4928      	ldr	r1, [pc, #160]	; (8017364 <etharp_output_to_arp_index+0x124>)
 80172c2:	4613      	mov	r3, r2
 80172c4:	005b      	lsls	r3, r3, #1
 80172c6:	4413      	add	r3, r2
 80172c8:	00db      	lsls	r3, r3, #3
 80172ca:	440b      	add	r3, r1
 80172cc:	3314      	adds	r3, #20
 80172ce:	2203      	movs	r2, #3
 80172d0:	701a      	strb	r2, [r3, #0]
 80172d2:	e02d      	b.n	8017330 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80172d4:	79fa      	ldrb	r2, [r7, #7]
 80172d6:	4923      	ldr	r1, [pc, #140]	; (8017364 <etharp_output_to_arp_index+0x124>)
 80172d8:	4613      	mov	r3, r2
 80172da:	005b      	lsls	r3, r3, #1
 80172dc:	4413      	add	r3, r2
 80172de:	00db      	lsls	r3, r3, #3
 80172e0:	440b      	add	r3, r1
 80172e2:	3312      	adds	r3, #18
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80172ea:	d321      	bcc.n	8017330 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80172ec:	79fa      	ldrb	r2, [r7, #7]
 80172ee:	4613      	mov	r3, r2
 80172f0:	005b      	lsls	r3, r3, #1
 80172f2:	4413      	add	r3, r2
 80172f4:	00db      	lsls	r3, r3, #3
 80172f6:	4a1b      	ldr	r2, [pc, #108]	; (8017364 <etharp_output_to_arp_index+0x124>)
 80172f8:	4413      	add	r3, r2
 80172fa:	1d19      	adds	r1, r3, #4
 80172fc:	79fa      	ldrb	r2, [r7, #7]
 80172fe:	4613      	mov	r3, r2
 8017300:	005b      	lsls	r3, r3, #1
 8017302:	4413      	add	r3, r2
 8017304:	00db      	lsls	r3, r3, #3
 8017306:	3308      	adds	r3, #8
 8017308:	4a16      	ldr	r2, [pc, #88]	; (8017364 <etharp_output_to_arp_index+0x124>)
 801730a:	4413      	add	r3, r2
 801730c:	3304      	adds	r3, #4
 801730e:	461a      	mov	r2, r3
 8017310:	68f8      	ldr	r0, [r7, #12]
 8017312:	f000 fafb 	bl	801790c <etharp_request_dst>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	d109      	bne.n	8017330 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801731c:	79fa      	ldrb	r2, [r7, #7]
 801731e:	4911      	ldr	r1, [pc, #68]	; (8017364 <etharp_output_to_arp_index+0x124>)
 8017320:	4613      	mov	r3, r2
 8017322:	005b      	lsls	r3, r3, #1
 8017324:	4413      	add	r3, r2
 8017326:	00db      	lsls	r3, r3, #3
 8017328:	440b      	add	r3, r1
 801732a:	3314      	adds	r3, #20
 801732c:	2203      	movs	r2, #3
 801732e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8017336:	79fa      	ldrb	r2, [r7, #7]
 8017338:	4613      	mov	r3, r2
 801733a:	005b      	lsls	r3, r3, #1
 801733c:	4413      	add	r3, r2
 801733e:	00db      	lsls	r3, r3, #3
 8017340:	3308      	adds	r3, #8
 8017342:	4a08      	ldr	r2, [pc, #32]	; (8017364 <etharp_output_to_arp_index+0x124>)
 8017344:	4413      	add	r3, r2
 8017346:	3304      	adds	r3, #4
 8017348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801734c:	9200      	str	r2, [sp, #0]
 801734e:	460a      	mov	r2, r1
 8017350:	68b9      	ldr	r1, [r7, #8]
 8017352:	68f8      	ldr	r0, [r7, #12]
 8017354:	f001 fe5e 	bl	8019014 <ethernet_output>
 8017358:	4603      	mov	r3, r0
}
 801735a:	4618      	mov	r0, r3
 801735c:	3710      	adds	r7, #16
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}
 8017362:	bf00      	nop
 8017364:	2000cfb8 	.word	0x2000cfb8
 8017368:	0801d004 	.word	0x0801d004
 801736c:	0801d174 	.word	0x0801d174
 8017370:	0801d07c 	.word	0x0801d07c

08017374 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b08a      	sub	sp, #40	; 0x28
 8017378:	af02      	add	r7, sp, #8
 801737a:	60f8      	str	r0, [r7, #12]
 801737c:	60b9      	str	r1, [r7, #8]
 801737e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	2b00      	cmp	r3, #0
 8017388:	d106      	bne.n	8017398 <etharp_output+0x24>
 801738a:	4b73      	ldr	r3, [pc, #460]	; (8017558 <etharp_output+0x1e4>)
 801738c:	f240 321e 	movw	r2, #798	; 0x31e
 8017390:	4972      	ldr	r1, [pc, #456]	; (801755c <etharp_output+0x1e8>)
 8017392:	4873      	ldr	r0, [pc, #460]	; (8017560 <etharp_output+0x1ec>)
 8017394:	f002 f91a 	bl	80195cc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017398:	68bb      	ldr	r3, [r7, #8]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d106      	bne.n	80173ac <etharp_output+0x38>
 801739e:	4b6e      	ldr	r3, [pc, #440]	; (8017558 <etharp_output+0x1e4>)
 80173a0:	f240 321f 	movw	r2, #799	; 0x31f
 80173a4:	496f      	ldr	r1, [pc, #444]	; (8017564 <etharp_output+0x1f0>)
 80173a6:	486e      	ldr	r0, [pc, #440]	; (8017560 <etharp_output+0x1ec>)
 80173a8:	f002 f910 	bl	80195cc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d106      	bne.n	80173c0 <etharp_output+0x4c>
 80173b2:	4b69      	ldr	r3, [pc, #420]	; (8017558 <etharp_output+0x1e4>)
 80173b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80173b8:	496b      	ldr	r1, [pc, #428]	; (8017568 <etharp_output+0x1f4>)
 80173ba:	4869      	ldr	r0, [pc, #420]	; (8017560 <etharp_output+0x1ec>)
 80173bc:	f002 f906 	bl	80195cc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	68f9      	ldr	r1, [r7, #12]
 80173c6:	4618      	mov	r0, r3
 80173c8:	f000 ff16 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 80173cc:	4603      	mov	r3, r0
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d002      	beq.n	80173d8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80173d2:	4b66      	ldr	r3, [pc, #408]	; (801756c <etharp_output+0x1f8>)
 80173d4:	61fb      	str	r3, [r7, #28]
 80173d6:	e0af      	b.n	8017538 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173e0:	2be0      	cmp	r3, #224	; 0xe0
 80173e2:	d118      	bne.n	8017416 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80173e4:	2301      	movs	r3, #1
 80173e6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80173e8:	2300      	movs	r3, #0
 80173ea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80173ec:	235e      	movs	r3, #94	; 0x5e
 80173ee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	3301      	adds	r3, #1
 80173f4:	781b      	ldrb	r3, [r3, #0]
 80173f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80173fa:	b2db      	uxtb	r3, r3
 80173fc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	3302      	adds	r3, #2
 8017402:	781b      	ldrb	r3, [r3, #0]
 8017404:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	3303      	adds	r3, #3
 801740a:	781b      	ldrb	r3, [r3, #0]
 801740c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801740e:	f107 0310 	add.w	r3, r7, #16
 8017412:	61fb      	str	r3, [r7, #28]
 8017414:	e090      	b.n	8017538 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	681a      	ldr	r2, [r3, #0]
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	3304      	adds	r3, #4
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	405a      	eors	r2, r3
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	3308      	adds	r3, #8
 8017426:	681b      	ldr	r3, [r3, #0]
 8017428:	4013      	ands	r3, r2
 801742a:	2b00      	cmp	r3, #0
 801742c:	d012      	beq.n	8017454 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017434:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017438:	4293      	cmp	r3, r2
 801743a:	d00b      	beq.n	8017454 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	330c      	adds	r3, #12
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d003      	beq.n	801744e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	330c      	adds	r3, #12
 801744a:	61bb      	str	r3, [r7, #24]
 801744c:	e002      	b.n	8017454 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801744e:	f06f 0303 	mvn.w	r3, #3
 8017452:	e07d      	b.n	8017550 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017454:	4b46      	ldr	r3, [pc, #280]	; (8017570 <etharp_output+0x1fc>)
 8017456:	781b      	ldrb	r3, [r3, #0]
 8017458:	4619      	mov	r1, r3
 801745a:	4a46      	ldr	r2, [pc, #280]	; (8017574 <etharp_output+0x200>)
 801745c:	460b      	mov	r3, r1
 801745e:	005b      	lsls	r3, r3, #1
 8017460:	440b      	add	r3, r1
 8017462:	00db      	lsls	r3, r3, #3
 8017464:	4413      	add	r3, r2
 8017466:	3314      	adds	r3, #20
 8017468:	781b      	ldrb	r3, [r3, #0]
 801746a:	2b01      	cmp	r3, #1
 801746c:	d925      	bls.n	80174ba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801746e:	4b40      	ldr	r3, [pc, #256]	; (8017570 <etharp_output+0x1fc>)
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	4619      	mov	r1, r3
 8017474:	4a3f      	ldr	r2, [pc, #252]	; (8017574 <etharp_output+0x200>)
 8017476:	460b      	mov	r3, r1
 8017478:	005b      	lsls	r3, r3, #1
 801747a:	440b      	add	r3, r1
 801747c:	00db      	lsls	r3, r3, #3
 801747e:	4413      	add	r3, r2
 8017480:	3308      	adds	r3, #8
 8017482:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017484:	68fa      	ldr	r2, [r7, #12]
 8017486:	429a      	cmp	r2, r3
 8017488:	d117      	bne.n	80174ba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801748a:	69bb      	ldr	r3, [r7, #24]
 801748c:	681a      	ldr	r2, [r3, #0]
 801748e:	4b38      	ldr	r3, [pc, #224]	; (8017570 <etharp_output+0x1fc>)
 8017490:	781b      	ldrb	r3, [r3, #0]
 8017492:	4618      	mov	r0, r3
 8017494:	4937      	ldr	r1, [pc, #220]	; (8017574 <etharp_output+0x200>)
 8017496:	4603      	mov	r3, r0
 8017498:	005b      	lsls	r3, r3, #1
 801749a:	4403      	add	r3, r0
 801749c:	00db      	lsls	r3, r3, #3
 801749e:	440b      	add	r3, r1
 80174a0:	3304      	adds	r3, #4
 80174a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80174a4:	429a      	cmp	r2, r3
 80174a6:	d108      	bne.n	80174ba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80174a8:	4b31      	ldr	r3, [pc, #196]	; (8017570 <etharp_output+0x1fc>)
 80174aa:	781b      	ldrb	r3, [r3, #0]
 80174ac:	461a      	mov	r2, r3
 80174ae:	68b9      	ldr	r1, [r7, #8]
 80174b0:	68f8      	ldr	r0, [r7, #12]
 80174b2:	f7ff fec5 	bl	8017240 <etharp_output_to_arp_index>
 80174b6:	4603      	mov	r3, r0
 80174b8:	e04a      	b.n	8017550 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80174ba:	2300      	movs	r3, #0
 80174bc:	75fb      	strb	r3, [r7, #23]
 80174be:	e031      	b.n	8017524 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80174c0:	7dfa      	ldrb	r2, [r7, #23]
 80174c2:	492c      	ldr	r1, [pc, #176]	; (8017574 <etharp_output+0x200>)
 80174c4:	4613      	mov	r3, r2
 80174c6:	005b      	lsls	r3, r3, #1
 80174c8:	4413      	add	r3, r2
 80174ca:	00db      	lsls	r3, r3, #3
 80174cc:	440b      	add	r3, r1
 80174ce:	3314      	adds	r3, #20
 80174d0:	781b      	ldrb	r3, [r3, #0]
 80174d2:	2b01      	cmp	r3, #1
 80174d4:	d923      	bls.n	801751e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80174d6:	7dfa      	ldrb	r2, [r7, #23]
 80174d8:	4926      	ldr	r1, [pc, #152]	; (8017574 <etharp_output+0x200>)
 80174da:	4613      	mov	r3, r2
 80174dc:	005b      	lsls	r3, r3, #1
 80174de:	4413      	add	r3, r2
 80174e0:	00db      	lsls	r3, r3, #3
 80174e2:	440b      	add	r3, r1
 80174e4:	3308      	adds	r3, #8
 80174e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80174e8:	68fa      	ldr	r2, [r7, #12]
 80174ea:	429a      	cmp	r2, r3
 80174ec:	d117      	bne.n	801751e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80174ee:	69bb      	ldr	r3, [r7, #24]
 80174f0:	6819      	ldr	r1, [r3, #0]
 80174f2:	7dfa      	ldrb	r2, [r7, #23]
 80174f4:	481f      	ldr	r0, [pc, #124]	; (8017574 <etharp_output+0x200>)
 80174f6:	4613      	mov	r3, r2
 80174f8:	005b      	lsls	r3, r3, #1
 80174fa:	4413      	add	r3, r2
 80174fc:	00db      	lsls	r3, r3, #3
 80174fe:	4403      	add	r3, r0
 8017500:	3304      	adds	r3, #4
 8017502:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017504:	4299      	cmp	r1, r3
 8017506:	d10a      	bne.n	801751e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017508:	4a19      	ldr	r2, [pc, #100]	; (8017570 <etharp_output+0x1fc>)
 801750a:	7dfb      	ldrb	r3, [r7, #23]
 801750c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801750e:	7dfb      	ldrb	r3, [r7, #23]
 8017510:	461a      	mov	r2, r3
 8017512:	68b9      	ldr	r1, [r7, #8]
 8017514:	68f8      	ldr	r0, [r7, #12]
 8017516:	f7ff fe93 	bl	8017240 <etharp_output_to_arp_index>
 801751a:	4603      	mov	r3, r0
 801751c:	e018      	b.n	8017550 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801751e:	7dfb      	ldrb	r3, [r7, #23]
 8017520:	3301      	adds	r3, #1
 8017522:	75fb      	strb	r3, [r7, #23]
 8017524:	7dfb      	ldrb	r3, [r7, #23]
 8017526:	2b09      	cmp	r3, #9
 8017528:	d9ca      	bls.n	80174c0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801752a:	68ba      	ldr	r2, [r7, #8]
 801752c:	69b9      	ldr	r1, [r7, #24]
 801752e:	68f8      	ldr	r0, [r7, #12]
 8017530:	f000 f822 	bl	8017578 <etharp_query>
 8017534:	4603      	mov	r3, r0
 8017536:	e00b      	b.n	8017550 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801753e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017542:	9300      	str	r3, [sp, #0]
 8017544:	69fb      	ldr	r3, [r7, #28]
 8017546:	68b9      	ldr	r1, [r7, #8]
 8017548:	68f8      	ldr	r0, [r7, #12]
 801754a:	f001 fd63 	bl	8019014 <ethernet_output>
 801754e:	4603      	mov	r3, r0
}
 8017550:	4618      	mov	r0, r3
 8017552:	3720      	adds	r7, #32
 8017554:	46bd      	mov	sp, r7
 8017556:	bd80      	pop	{r7, pc}
 8017558:	0801d004 	.word	0x0801d004
 801755c:	0801d154 	.word	0x0801d154
 8017560:	0801d07c 	.word	0x0801d07c
 8017564:	0801d1a4 	.word	0x0801d1a4
 8017568:	0801d144 	.word	0x0801d144
 801756c:	0801fbb8 	.word	0x0801fbb8
 8017570:	2000d0a8 	.word	0x2000d0a8
 8017574:	2000cfb8 	.word	0x2000cfb8

08017578 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b08c      	sub	sp, #48	; 0x30
 801757c:	af02      	add	r7, sp, #8
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	60b9      	str	r1, [r7, #8]
 8017582:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	332a      	adds	r3, #42	; 0x2a
 8017588:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801758a:	23ff      	movs	r3, #255	; 0xff
 801758c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017590:	2300      	movs	r3, #0
 8017592:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	68f9      	ldr	r1, [r7, #12]
 801759a:	4618      	mov	r0, r3
 801759c:	f000 fe2c 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 80175a0:	4603      	mov	r3, r0
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d10c      	bne.n	80175c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80175ae:	2be0      	cmp	r3, #224	; 0xe0
 80175b0:	d006      	beq.n	80175c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d003      	beq.n	80175c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80175b8:	68bb      	ldr	r3, [r7, #8]
 80175ba:	681b      	ldr	r3, [r3, #0]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d102      	bne.n	80175c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80175c0:	f06f 030f 	mvn.w	r3, #15
 80175c4:	e101      	b.n	80177ca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80175c6:	68fa      	ldr	r2, [r7, #12]
 80175c8:	2101      	movs	r1, #1
 80175ca:	68b8      	ldr	r0, [r7, #8]
 80175cc:	f7ff fb5c 	bl	8016c88 <etharp_find_entry>
 80175d0:	4603      	mov	r3, r0
 80175d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80175d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	da02      	bge.n	80175e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80175dc:	8a7b      	ldrh	r3, [r7, #18]
 80175de:	b25b      	sxtb	r3, r3
 80175e0:	e0f3      	b.n	80177ca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80175e2:	8a7b      	ldrh	r3, [r7, #18]
 80175e4:	2b7e      	cmp	r3, #126	; 0x7e
 80175e6:	d906      	bls.n	80175f6 <etharp_query+0x7e>
 80175e8:	4b7a      	ldr	r3, [pc, #488]	; (80177d4 <etharp_query+0x25c>)
 80175ea:	f240 32c1 	movw	r2, #961	; 0x3c1
 80175ee:	497a      	ldr	r1, [pc, #488]	; (80177d8 <etharp_query+0x260>)
 80175f0:	487a      	ldr	r0, [pc, #488]	; (80177dc <etharp_query+0x264>)
 80175f2:	f001 ffeb 	bl	80195cc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80175f6:	8a7b      	ldrh	r3, [r7, #18]
 80175f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80175fa:	7c7a      	ldrb	r2, [r7, #17]
 80175fc:	4978      	ldr	r1, [pc, #480]	; (80177e0 <etharp_query+0x268>)
 80175fe:	4613      	mov	r3, r2
 8017600:	005b      	lsls	r3, r3, #1
 8017602:	4413      	add	r3, r2
 8017604:	00db      	lsls	r3, r3, #3
 8017606:	440b      	add	r3, r1
 8017608:	3314      	adds	r3, #20
 801760a:	781b      	ldrb	r3, [r3, #0]
 801760c:	2b00      	cmp	r3, #0
 801760e:	d115      	bne.n	801763c <etharp_query+0xc4>
    is_new_entry = 1;
 8017610:	2301      	movs	r3, #1
 8017612:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017614:	7c7a      	ldrb	r2, [r7, #17]
 8017616:	4972      	ldr	r1, [pc, #456]	; (80177e0 <etharp_query+0x268>)
 8017618:	4613      	mov	r3, r2
 801761a:	005b      	lsls	r3, r3, #1
 801761c:	4413      	add	r3, r2
 801761e:	00db      	lsls	r3, r3, #3
 8017620:	440b      	add	r3, r1
 8017622:	3314      	adds	r3, #20
 8017624:	2201      	movs	r2, #1
 8017626:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017628:	7c7a      	ldrb	r2, [r7, #17]
 801762a:	496d      	ldr	r1, [pc, #436]	; (80177e0 <etharp_query+0x268>)
 801762c:	4613      	mov	r3, r2
 801762e:	005b      	lsls	r3, r3, #1
 8017630:	4413      	add	r3, r2
 8017632:	00db      	lsls	r3, r3, #3
 8017634:	440b      	add	r3, r1
 8017636:	3308      	adds	r3, #8
 8017638:	68fa      	ldr	r2, [r7, #12]
 801763a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801763c:	7c7a      	ldrb	r2, [r7, #17]
 801763e:	4968      	ldr	r1, [pc, #416]	; (80177e0 <etharp_query+0x268>)
 8017640:	4613      	mov	r3, r2
 8017642:	005b      	lsls	r3, r3, #1
 8017644:	4413      	add	r3, r2
 8017646:	00db      	lsls	r3, r3, #3
 8017648:	440b      	add	r3, r1
 801764a:	3314      	adds	r3, #20
 801764c:	781b      	ldrb	r3, [r3, #0]
 801764e:	2b01      	cmp	r3, #1
 8017650:	d011      	beq.n	8017676 <etharp_query+0xfe>
 8017652:	7c7a      	ldrb	r2, [r7, #17]
 8017654:	4962      	ldr	r1, [pc, #392]	; (80177e0 <etharp_query+0x268>)
 8017656:	4613      	mov	r3, r2
 8017658:	005b      	lsls	r3, r3, #1
 801765a:	4413      	add	r3, r2
 801765c:	00db      	lsls	r3, r3, #3
 801765e:	440b      	add	r3, r1
 8017660:	3314      	adds	r3, #20
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	2b01      	cmp	r3, #1
 8017666:	d806      	bhi.n	8017676 <etharp_query+0xfe>
 8017668:	4b5a      	ldr	r3, [pc, #360]	; (80177d4 <etharp_query+0x25c>)
 801766a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801766e:	495d      	ldr	r1, [pc, #372]	; (80177e4 <etharp_query+0x26c>)
 8017670:	485a      	ldr	r0, [pc, #360]	; (80177dc <etharp_query+0x264>)
 8017672:	f001 ffab 	bl	80195cc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017676:	6a3b      	ldr	r3, [r7, #32]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d102      	bne.n	8017682 <etharp_query+0x10a>
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	2b00      	cmp	r3, #0
 8017680:	d10c      	bne.n	801769c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017682:	68b9      	ldr	r1, [r7, #8]
 8017684:	68f8      	ldr	r0, [r7, #12]
 8017686:	f000 f963 	bl	8017950 <etharp_request>
 801768a:	4603      	mov	r3, r0
 801768c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	2b00      	cmp	r3, #0
 8017694:	d102      	bne.n	801769c <etharp_query+0x124>
      return result;
 8017696:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801769a:	e096      	b.n	80177ca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d106      	bne.n	80176b0 <etharp_query+0x138>
 80176a2:	4b4c      	ldr	r3, [pc, #304]	; (80177d4 <etharp_query+0x25c>)
 80176a4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80176a8:	494f      	ldr	r1, [pc, #316]	; (80177e8 <etharp_query+0x270>)
 80176aa:	484c      	ldr	r0, [pc, #304]	; (80177dc <etharp_query+0x264>)
 80176ac:	f001 ff8e 	bl	80195cc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80176b0:	7c7a      	ldrb	r2, [r7, #17]
 80176b2:	494b      	ldr	r1, [pc, #300]	; (80177e0 <etharp_query+0x268>)
 80176b4:	4613      	mov	r3, r2
 80176b6:	005b      	lsls	r3, r3, #1
 80176b8:	4413      	add	r3, r2
 80176ba:	00db      	lsls	r3, r3, #3
 80176bc:	440b      	add	r3, r1
 80176be:	3314      	adds	r3, #20
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b01      	cmp	r3, #1
 80176c4:	d917      	bls.n	80176f6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80176c6:	4a49      	ldr	r2, [pc, #292]	; (80177ec <etharp_query+0x274>)
 80176c8:	7c7b      	ldrb	r3, [r7, #17]
 80176ca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80176cc:	7c7a      	ldrb	r2, [r7, #17]
 80176ce:	4613      	mov	r3, r2
 80176d0:	005b      	lsls	r3, r3, #1
 80176d2:	4413      	add	r3, r2
 80176d4:	00db      	lsls	r3, r3, #3
 80176d6:	3308      	adds	r3, #8
 80176d8:	4a41      	ldr	r2, [pc, #260]	; (80177e0 <etharp_query+0x268>)
 80176da:	4413      	add	r3, r2
 80176dc:	3304      	adds	r3, #4
 80176de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80176e2:	9200      	str	r2, [sp, #0]
 80176e4:	697a      	ldr	r2, [r7, #20]
 80176e6:	6879      	ldr	r1, [r7, #4]
 80176e8:	68f8      	ldr	r0, [r7, #12]
 80176ea:	f001 fc93 	bl	8019014 <ethernet_output>
 80176ee:	4603      	mov	r3, r0
 80176f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80176f4:	e067      	b.n	80177c6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80176f6:	7c7a      	ldrb	r2, [r7, #17]
 80176f8:	4939      	ldr	r1, [pc, #228]	; (80177e0 <etharp_query+0x268>)
 80176fa:	4613      	mov	r3, r2
 80176fc:	005b      	lsls	r3, r3, #1
 80176fe:	4413      	add	r3, r2
 8017700:	00db      	lsls	r3, r3, #3
 8017702:	440b      	add	r3, r1
 8017704:	3314      	adds	r3, #20
 8017706:	781b      	ldrb	r3, [r3, #0]
 8017708:	2b01      	cmp	r3, #1
 801770a:	d15c      	bne.n	80177c6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801770c:	2300      	movs	r3, #0
 801770e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017714:	e01c      	b.n	8017750 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017716:	69fb      	ldr	r3, [r7, #28]
 8017718:	895a      	ldrh	r2, [r3, #10]
 801771a:	69fb      	ldr	r3, [r7, #28]
 801771c:	891b      	ldrh	r3, [r3, #8]
 801771e:	429a      	cmp	r2, r3
 8017720:	d10a      	bne.n	8017738 <etharp_query+0x1c0>
 8017722:	69fb      	ldr	r3, [r7, #28]
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d006      	beq.n	8017738 <etharp_query+0x1c0>
 801772a:	4b2a      	ldr	r3, [pc, #168]	; (80177d4 <etharp_query+0x25c>)
 801772c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017730:	492f      	ldr	r1, [pc, #188]	; (80177f0 <etharp_query+0x278>)
 8017732:	482a      	ldr	r0, [pc, #168]	; (80177dc <etharp_query+0x264>)
 8017734:	f001 ff4a 	bl	80195cc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017738:	69fb      	ldr	r3, [r7, #28]
 801773a:	7b1b      	ldrb	r3, [r3, #12]
 801773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017740:	2b00      	cmp	r3, #0
 8017742:	d002      	beq.n	801774a <etharp_query+0x1d2>
        copy_needed = 1;
 8017744:	2301      	movs	r3, #1
 8017746:	61bb      	str	r3, [r7, #24]
        break;
 8017748:	e005      	b.n	8017756 <etharp_query+0x1de>
      }
      p = p->next;
 801774a:	69fb      	ldr	r3, [r7, #28]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017750:	69fb      	ldr	r3, [r7, #28]
 8017752:	2b00      	cmp	r3, #0
 8017754:	d1df      	bne.n	8017716 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017756:	69bb      	ldr	r3, [r7, #24]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d007      	beq.n	801776c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801775c:	687a      	ldr	r2, [r7, #4]
 801775e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017762:	200e      	movs	r0, #14
 8017764:	f7f6 fc60 	bl	800e028 <pbuf_clone>
 8017768:	61f8      	str	r0, [r7, #28]
 801776a:	e004      	b.n	8017776 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017770:	69f8      	ldr	r0, [r7, #28]
 8017772:	f7f6 fa87 	bl	800dc84 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017776:	69fb      	ldr	r3, [r7, #28]
 8017778:	2b00      	cmp	r3, #0
 801777a:	d021      	beq.n	80177c0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801777c:	7c7a      	ldrb	r2, [r7, #17]
 801777e:	4918      	ldr	r1, [pc, #96]	; (80177e0 <etharp_query+0x268>)
 8017780:	4613      	mov	r3, r2
 8017782:	005b      	lsls	r3, r3, #1
 8017784:	4413      	add	r3, r2
 8017786:	00db      	lsls	r3, r3, #3
 8017788:	440b      	add	r3, r1
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d00a      	beq.n	80177a6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017790:	7c7a      	ldrb	r2, [r7, #17]
 8017792:	4913      	ldr	r1, [pc, #76]	; (80177e0 <etharp_query+0x268>)
 8017794:	4613      	mov	r3, r2
 8017796:	005b      	lsls	r3, r3, #1
 8017798:	4413      	add	r3, r2
 801779a:	00db      	lsls	r3, r3, #3
 801779c:	440b      	add	r3, r1
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	4618      	mov	r0, r3
 80177a2:	f7f6 f9c9 	bl	800db38 <pbuf_free>
      }
      arp_table[i].q = p;
 80177a6:	7c7a      	ldrb	r2, [r7, #17]
 80177a8:	490d      	ldr	r1, [pc, #52]	; (80177e0 <etharp_query+0x268>)
 80177aa:	4613      	mov	r3, r2
 80177ac:	005b      	lsls	r3, r3, #1
 80177ae:	4413      	add	r3, r2
 80177b0:	00db      	lsls	r3, r3, #3
 80177b2:	440b      	add	r3, r1
 80177b4:	69fa      	ldr	r2, [r7, #28]
 80177b6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80177b8:	2300      	movs	r3, #0
 80177ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80177be:	e002      	b.n	80177c6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80177c0:	23ff      	movs	r3, #255	; 0xff
 80177c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80177c6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80177ca:	4618      	mov	r0, r3
 80177cc:	3728      	adds	r7, #40	; 0x28
 80177ce:	46bd      	mov	sp, r7
 80177d0:	bd80      	pop	{r7, pc}
 80177d2:	bf00      	nop
 80177d4:	0801d004 	.word	0x0801d004
 80177d8:	0801d1b0 	.word	0x0801d1b0
 80177dc:	0801d07c 	.word	0x0801d07c
 80177e0:	2000cfb8 	.word	0x2000cfb8
 80177e4:	0801d1c0 	.word	0x0801d1c0
 80177e8:	0801d1a4 	.word	0x0801d1a4
 80177ec:	2000d0a8 	.word	0x2000d0a8
 80177f0:	0801d1e8 	.word	0x0801d1e8

080177f4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b08a      	sub	sp, #40	; 0x28
 80177f8:	af02      	add	r7, sp, #8
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	607a      	str	r2, [r7, #4]
 8017800:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017802:	2300      	movs	r3, #0
 8017804:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d106      	bne.n	801781a <etharp_raw+0x26>
 801780c:	4b3a      	ldr	r3, [pc, #232]	; (80178f8 <etharp_raw+0x104>)
 801780e:	f240 4257 	movw	r2, #1111	; 0x457
 8017812:	493a      	ldr	r1, [pc, #232]	; (80178fc <etharp_raw+0x108>)
 8017814:	483a      	ldr	r0, [pc, #232]	; (8017900 <etharp_raw+0x10c>)
 8017816:	f001 fed9 	bl	80195cc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801781a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801781e:	211c      	movs	r1, #28
 8017820:	200e      	movs	r0, #14
 8017822:	f7f5 fea5 	bl	800d570 <pbuf_alloc>
 8017826:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017828:	69bb      	ldr	r3, [r7, #24]
 801782a:	2b00      	cmp	r3, #0
 801782c:	d102      	bne.n	8017834 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801782e:	f04f 33ff 	mov.w	r3, #4294967295
 8017832:	e05d      	b.n	80178f0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017834:	69bb      	ldr	r3, [r7, #24]
 8017836:	895b      	ldrh	r3, [r3, #10]
 8017838:	2b1b      	cmp	r3, #27
 801783a:	d806      	bhi.n	801784a <etharp_raw+0x56>
 801783c:	4b2e      	ldr	r3, [pc, #184]	; (80178f8 <etharp_raw+0x104>)
 801783e:	f240 4262 	movw	r2, #1122	; 0x462
 8017842:	4930      	ldr	r1, [pc, #192]	; (8017904 <etharp_raw+0x110>)
 8017844:	482e      	ldr	r0, [pc, #184]	; (8017900 <etharp_raw+0x10c>)
 8017846:	f001 fec1 	bl	80195cc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801784a:	69bb      	ldr	r3, [r7, #24]
 801784c:	685b      	ldr	r3, [r3, #4]
 801784e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017850:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017852:	4618      	mov	r0, r3
 8017854:	f7f4 fd3c 	bl	800c2d0 <lwip_htons>
 8017858:	4603      	mov	r3, r0
 801785a:	461a      	mov	r2, r3
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017860:	68fb      	ldr	r3, [r7, #12]
 8017862:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017866:	2b06      	cmp	r3, #6
 8017868:	d006      	beq.n	8017878 <etharp_raw+0x84>
 801786a:	4b23      	ldr	r3, [pc, #140]	; (80178f8 <etharp_raw+0x104>)
 801786c:	f240 4269 	movw	r2, #1129	; 0x469
 8017870:	4925      	ldr	r1, [pc, #148]	; (8017908 <etharp_raw+0x114>)
 8017872:	4823      	ldr	r0, [pc, #140]	; (8017900 <etharp_raw+0x10c>)
 8017874:	f001 feaa 	bl	80195cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017878:	697b      	ldr	r3, [r7, #20]
 801787a:	3308      	adds	r3, #8
 801787c:	2206      	movs	r2, #6
 801787e:	6839      	ldr	r1, [r7, #0]
 8017880:	4618      	mov	r0, r3
 8017882:	f001 ffa1 	bl	80197c8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017886:	697b      	ldr	r3, [r7, #20]
 8017888:	3312      	adds	r3, #18
 801788a:	2206      	movs	r2, #6
 801788c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801788e:	4618      	mov	r0, r3
 8017890:	f001 ff9a 	bl	80197c8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017894:	697b      	ldr	r3, [r7, #20]
 8017896:	330e      	adds	r3, #14
 8017898:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801789a:	6812      	ldr	r2, [r2, #0]
 801789c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801789e:	697b      	ldr	r3, [r7, #20]
 80178a0:	3318      	adds	r3, #24
 80178a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80178a4:	6812      	ldr	r2, [r2, #0]
 80178a6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80178a8:	697b      	ldr	r3, [r7, #20]
 80178aa:	2200      	movs	r2, #0
 80178ac:	701a      	strb	r2, [r3, #0]
 80178ae:	2200      	movs	r2, #0
 80178b0:	f042 0201 	orr.w	r2, r2, #1
 80178b4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80178b6:	697b      	ldr	r3, [r7, #20]
 80178b8:	2200      	movs	r2, #0
 80178ba:	f042 0208 	orr.w	r2, r2, #8
 80178be:	709a      	strb	r2, [r3, #2]
 80178c0:	2200      	movs	r2, #0
 80178c2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	2206      	movs	r2, #6
 80178c8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80178ca:	697b      	ldr	r3, [r7, #20]
 80178cc:	2204      	movs	r2, #4
 80178ce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80178d0:	f640 0306 	movw	r3, #2054	; 0x806
 80178d4:	9300      	str	r3, [sp, #0]
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	68ba      	ldr	r2, [r7, #8]
 80178da:	69b9      	ldr	r1, [r7, #24]
 80178dc:	68f8      	ldr	r0, [r7, #12]
 80178de:	f001 fb99 	bl	8019014 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80178e2:	69b8      	ldr	r0, [r7, #24]
 80178e4:	f7f6 f928 	bl	800db38 <pbuf_free>
  p = NULL;
 80178e8:	2300      	movs	r3, #0
 80178ea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80178ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3720      	adds	r7, #32
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}
 80178f8:	0801d004 	.word	0x0801d004
 80178fc:	0801d154 	.word	0x0801d154
 8017900:	0801d07c 	.word	0x0801d07c
 8017904:	0801d204 	.word	0x0801d204
 8017908:	0801d238 	.word	0x0801d238

0801790c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801790c:	b580      	push	{r7, lr}
 801790e:	b088      	sub	sp, #32
 8017910:	af04      	add	r7, sp, #16
 8017912:	60f8      	str	r0, [r7, #12]
 8017914:	60b9      	str	r1, [r7, #8]
 8017916:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017918:	68fb      	ldr	r3, [r7, #12]
 801791a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801791e:	68fb      	ldr	r3, [r7, #12]
 8017920:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017924:	68fb      	ldr	r3, [r7, #12]
 8017926:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017928:	2201      	movs	r2, #1
 801792a:	9203      	str	r2, [sp, #12]
 801792c:	68ba      	ldr	r2, [r7, #8]
 801792e:	9202      	str	r2, [sp, #8]
 8017930:	4a06      	ldr	r2, [pc, #24]	; (801794c <etharp_request_dst+0x40>)
 8017932:	9201      	str	r2, [sp, #4]
 8017934:	9300      	str	r3, [sp, #0]
 8017936:	4603      	mov	r3, r0
 8017938:	687a      	ldr	r2, [r7, #4]
 801793a:	68f8      	ldr	r0, [r7, #12]
 801793c:	f7ff ff5a 	bl	80177f4 <etharp_raw>
 8017940:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017942:	4618      	mov	r0, r3
 8017944:	3710      	adds	r7, #16
 8017946:	46bd      	mov	sp, r7
 8017948:	bd80      	pop	{r7, pc}
 801794a:	bf00      	nop
 801794c:	0801fbc0 	.word	0x0801fbc0

08017950 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017950:	b580      	push	{r7, lr}
 8017952:	b082      	sub	sp, #8
 8017954:	af00      	add	r7, sp, #0
 8017956:	6078      	str	r0, [r7, #4]
 8017958:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801795a:	4a05      	ldr	r2, [pc, #20]	; (8017970 <etharp_request+0x20>)
 801795c:	6839      	ldr	r1, [r7, #0]
 801795e:	6878      	ldr	r0, [r7, #4]
 8017960:	f7ff ffd4 	bl	801790c <etharp_request_dst>
 8017964:	4603      	mov	r3, r0
}
 8017966:	4618      	mov	r0, r3
 8017968:	3708      	adds	r7, #8
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}
 801796e:	bf00      	nop
 8017970:	0801fbb8 	.word	0x0801fbb8

08017974 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b08e      	sub	sp, #56	; 0x38
 8017978:	af04      	add	r7, sp, #16
 801797a:	6078      	str	r0, [r7, #4]
 801797c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801797e:	4b79      	ldr	r3, [pc, #484]	; (8017b64 <icmp_input+0x1f0>)
 8017980:	689b      	ldr	r3, [r3, #8]
 8017982:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017986:	781b      	ldrb	r3, [r3, #0]
 8017988:	f003 030f 	and.w	r3, r3, #15
 801798c:	b2db      	uxtb	r3, r3
 801798e:	009b      	lsls	r3, r3, #2
 8017990:	b2db      	uxtb	r3, r3
 8017992:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017994:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017996:	2b13      	cmp	r3, #19
 8017998:	f240 80cd 	bls.w	8017b36 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	895b      	ldrh	r3, [r3, #10]
 80179a0:	2b03      	cmp	r3, #3
 80179a2:	f240 80ca 	bls.w	8017b3a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	685b      	ldr	r3, [r3, #4]
 80179aa:	781b      	ldrb	r3, [r3, #0]
 80179ac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80179b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	f000 80b7 	beq.w	8017b28 <icmp_input+0x1b4>
 80179ba:	2b08      	cmp	r3, #8
 80179bc:	f040 80b7 	bne.w	8017b2e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80179c0:	4b69      	ldr	r3, [pc, #420]	; (8017b68 <icmp_input+0x1f4>)
 80179c2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80179c4:	4b67      	ldr	r3, [pc, #412]	; (8017b64 <icmp_input+0x1f0>)
 80179c6:	695b      	ldr	r3, [r3, #20]
 80179c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80179cc:	2be0      	cmp	r3, #224	; 0xe0
 80179ce:	f000 80bb 	beq.w	8017b48 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80179d2:	4b64      	ldr	r3, [pc, #400]	; (8017b64 <icmp_input+0x1f0>)
 80179d4:	695b      	ldr	r3, [r3, #20]
 80179d6:	4a63      	ldr	r2, [pc, #396]	; (8017b64 <icmp_input+0x1f0>)
 80179d8:	6812      	ldr	r2, [r2, #0]
 80179da:	4611      	mov	r1, r2
 80179dc:	4618      	mov	r0, r3
 80179de:	f000 fc0b 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 80179e2:	4603      	mov	r3, r0
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	f040 80b1 	bne.w	8017b4c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	891b      	ldrh	r3, [r3, #8]
 80179ee:	2b07      	cmp	r3, #7
 80179f0:	f240 80a5 	bls.w	8017b3e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80179f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80179f6:	330e      	adds	r3, #14
 80179f8:	4619      	mov	r1, r3
 80179fa:	6878      	ldr	r0, [r7, #4]
 80179fc:	f7f6 f806 	bl	800da0c <pbuf_add_header>
 8017a00:	4603      	mov	r3, r0
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d04b      	beq.n	8017a9e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	891a      	ldrh	r2, [r3, #8]
 8017a0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a0c:	4413      	add	r3, r2
 8017a0e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	891b      	ldrh	r3, [r3, #8]
 8017a14:	8b7a      	ldrh	r2, [r7, #26]
 8017a16:	429a      	cmp	r2, r3
 8017a18:	f0c0 809a 	bcc.w	8017b50 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017a1c:	8b7b      	ldrh	r3, [r7, #26]
 8017a1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a22:	4619      	mov	r1, r3
 8017a24:	200e      	movs	r0, #14
 8017a26:	f7f5 fda3 	bl	800d570 <pbuf_alloc>
 8017a2a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017a2c:	697b      	ldr	r3, [r7, #20]
 8017a2e:	2b00      	cmp	r3, #0
 8017a30:	f000 8090 	beq.w	8017b54 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017a34:	697b      	ldr	r3, [r7, #20]
 8017a36:	895b      	ldrh	r3, [r3, #10]
 8017a38:	461a      	mov	r2, r3
 8017a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a3c:	3308      	adds	r3, #8
 8017a3e:	429a      	cmp	r2, r3
 8017a40:	d203      	bcs.n	8017a4a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017a42:	6978      	ldr	r0, [r7, #20]
 8017a44:	f7f6 f878 	bl	800db38 <pbuf_free>
          goto icmperr;
 8017a48:	e085      	b.n	8017b56 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017a4a:	697b      	ldr	r3, [r7, #20]
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017a52:	4618      	mov	r0, r3
 8017a54:	f001 feb8 	bl	80197c8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017a58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017a5a:	4619      	mov	r1, r3
 8017a5c:	6978      	ldr	r0, [r7, #20]
 8017a5e:	f7f5 ffe5 	bl	800da2c <pbuf_remove_header>
 8017a62:	4603      	mov	r3, r0
 8017a64:	2b00      	cmp	r3, #0
 8017a66:	d009      	beq.n	8017a7c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017a68:	4b40      	ldr	r3, [pc, #256]	; (8017b6c <icmp_input+0x1f8>)
 8017a6a:	22b6      	movs	r2, #182	; 0xb6
 8017a6c:	4940      	ldr	r1, [pc, #256]	; (8017b70 <icmp_input+0x1fc>)
 8017a6e:	4841      	ldr	r0, [pc, #260]	; (8017b74 <icmp_input+0x200>)
 8017a70:	f001 fdac 	bl	80195cc <iprintf>
          pbuf_free(r);
 8017a74:	6978      	ldr	r0, [r7, #20]
 8017a76:	f7f6 f85f 	bl	800db38 <pbuf_free>
          goto icmperr;
 8017a7a:	e06c      	b.n	8017b56 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017a7c:	6879      	ldr	r1, [r7, #4]
 8017a7e:	6978      	ldr	r0, [r7, #20]
 8017a80:	f7f6 f98e 	bl	800dda0 <pbuf_copy>
 8017a84:	4603      	mov	r3, r0
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d003      	beq.n	8017a92 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017a8a:	6978      	ldr	r0, [r7, #20]
 8017a8c:	f7f6 f854 	bl	800db38 <pbuf_free>
          goto icmperr;
 8017a90:	e061      	b.n	8017b56 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017a92:	6878      	ldr	r0, [r7, #4]
 8017a94:	f7f6 f850 	bl	800db38 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	607b      	str	r3, [r7, #4]
 8017a9c:	e00f      	b.n	8017abe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017a9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017aa0:	330e      	adds	r3, #14
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7f5 ffc1 	bl	800da2c <pbuf_remove_header>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d006      	beq.n	8017abe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017ab0:	4b2e      	ldr	r3, [pc, #184]	; (8017b6c <icmp_input+0x1f8>)
 8017ab2:	22c7      	movs	r2, #199	; 0xc7
 8017ab4:	4930      	ldr	r1, [pc, #192]	; (8017b78 <icmp_input+0x204>)
 8017ab6:	482f      	ldr	r0, [pc, #188]	; (8017b74 <icmp_input+0x200>)
 8017ab8:	f001 fd88 	bl	80195cc <iprintf>
          goto icmperr;
 8017abc:	e04b      	b.n	8017b56 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017ac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017ac6:	4619      	mov	r1, r3
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f7f5 ff9f 	bl	800da0c <pbuf_add_header>
 8017ace:	4603      	mov	r3, r0
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d12b      	bne.n	8017b2c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	685b      	ldr	r3, [r3, #4]
 8017ad8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	681a      	ldr	r2, [r3, #0]
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017ae2:	4b20      	ldr	r3, [pc, #128]	; (8017b64 <icmp_input+0x1f0>)
 8017ae4:	691a      	ldr	r2, [r3, #16]
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017aea:	693b      	ldr	r3, [r7, #16]
 8017aec:	2200      	movs	r2, #0
 8017aee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	2200      	movs	r2, #0
 8017af4:	709a      	strb	r2, [r3, #2]
 8017af6:	2200      	movs	r2, #0
 8017af8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017afa:	68fb      	ldr	r3, [r7, #12]
 8017afc:	22ff      	movs	r2, #255	; 0xff
 8017afe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017b00:	68fb      	ldr	r3, [r7, #12]
 8017b02:	2200      	movs	r2, #0
 8017b04:	729a      	strb	r2, [r3, #10]
 8017b06:	2200      	movs	r2, #0
 8017b08:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	9302      	str	r3, [sp, #8]
 8017b0e:	2301      	movs	r3, #1
 8017b10:	9301      	str	r3, [sp, #4]
 8017b12:	2300      	movs	r3, #0
 8017b14:	9300      	str	r3, [sp, #0]
 8017b16:	23ff      	movs	r3, #255	; 0xff
 8017b18:	2200      	movs	r2, #0
 8017b1a:	69f9      	ldr	r1, [r7, #28]
 8017b1c:	6878      	ldr	r0, [r7, #4]
 8017b1e:	f000 fa93 	bl	8018048 <ip4_output_if>
 8017b22:	4603      	mov	r3, r0
 8017b24:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017b26:	e001      	b.n	8017b2c <icmp_input+0x1b8>
      break;
 8017b28:	bf00      	nop
 8017b2a:	e000      	b.n	8017b2e <icmp_input+0x1ba>
      break;
 8017b2c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017b2e:	6878      	ldr	r0, [r7, #4]
 8017b30:	f7f6 f802 	bl	800db38 <pbuf_free>
  return;
 8017b34:	e013      	b.n	8017b5e <icmp_input+0x1ea>
    goto lenerr;
 8017b36:	bf00      	nop
 8017b38:	e002      	b.n	8017b40 <icmp_input+0x1cc>
    goto lenerr;
 8017b3a:	bf00      	nop
 8017b3c:	e000      	b.n	8017b40 <icmp_input+0x1cc>
        goto lenerr;
 8017b3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017b40:	6878      	ldr	r0, [r7, #4]
 8017b42:	f7f5 fff9 	bl	800db38 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017b46:	e00a      	b.n	8017b5e <icmp_input+0x1ea>
        goto icmperr;
 8017b48:	bf00      	nop
 8017b4a:	e004      	b.n	8017b56 <icmp_input+0x1e2>
        goto icmperr;
 8017b4c:	bf00      	nop
 8017b4e:	e002      	b.n	8017b56 <icmp_input+0x1e2>
          goto icmperr;
 8017b50:	bf00      	nop
 8017b52:	e000      	b.n	8017b56 <icmp_input+0x1e2>
          goto icmperr;
 8017b54:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017b56:	6878      	ldr	r0, [r7, #4]
 8017b58:	f7f5 ffee 	bl	800db38 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017b5c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017b5e:	3728      	adds	r7, #40	; 0x28
 8017b60:	46bd      	mov	sp, r7
 8017b62:	bd80      	pop	{r7, pc}
 8017b64:	200097b0 	.word	0x200097b0
 8017b68:	200097c4 	.word	0x200097c4
 8017b6c:	0801d27c 	.word	0x0801d27c
 8017b70:	0801d2b4 	.word	0x0801d2b4
 8017b74:	0801d2ec 	.word	0x0801d2ec
 8017b78:	0801d314 	.word	0x0801d314

08017b7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017b7c:	b580      	push	{r7, lr}
 8017b7e:	b082      	sub	sp, #8
 8017b80:	af00      	add	r7, sp, #0
 8017b82:	6078      	str	r0, [r7, #4]
 8017b84:	460b      	mov	r3, r1
 8017b86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017b88:	78fb      	ldrb	r3, [r7, #3]
 8017b8a:	461a      	mov	r2, r3
 8017b8c:	2103      	movs	r1, #3
 8017b8e:	6878      	ldr	r0, [r7, #4]
 8017b90:	f000 f814 	bl	8017bbc <icmp_send_response>
}
 8017b94:	bf00      	nop
 8017b96:	3708      	adds	r7, #8
 8017b98:	46bd      	mov	sp, r7
 8017b9a:	bd80      	pop	{r7, pc}

08017b9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b082      	sub	sp, #8
 8017ba0:	af00      	add	r7, sp, #0
 8017ba2:	6078      	str	r0, [r7, #4]
 8017ba4:	460b      	mov	r3, r1
 8017ba6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017ba8:	78fb      	ldrb	r3, [r7, #3]
 8017baa:	461a      	mov	r2, r3
 8017bac:	210b      	movs	r1, #11
 8017bae:	6878      	ldr	r0, [r7, #4]
 8017bb0:	f000 f804 	bl	8017bbc <icmp_send_response>
}
 8017bb4:	bf00      	nop
 8017bb6:	3708      	adds	r7, #8
 8017bb8:	46bd      	mov	sp, r7
 8017bba:	bd80      	pop	{r7, pc}

08017bbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017bbc:	b580      	push	{r7, lr}
 8017bbe:	b08c      	sub	sp, #48	; 0x30
 8017bc0:	af04      	add	r7, sp, #16
 8017bc2:	6078      	str	r0, [r7, #4]
 8017bc4:	460b      	mov	r3, r1
 8017bc6:	70fb      	strb	r3, [r7, #3]
 8017bc8:	4613      	mov	r3, r2
 8017bca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017bcc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bd0:	2124      	movs	r1, #36	; 0x24
 8017bd2:	2022      	movs	r0, #34	; 0x22
 8017bd4:	f7f5 fccc 	bl	800d570 <pbuf_alloc>
 8017bd8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017bda:	69fb      	ldr	r3, [r7, #28]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d04c      	beq.n	8017c7a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017be0:	69fb      	ldr	r3, [r7, #28]
 8017be2:	895b      	ldrh	r3, [r3, #10]
 8017be4:	2b23      	cmp	r3, #35	; 0x23
 8017be6:	d806      	bhi.n	8017bf6 <icmp_send_response+0x3a>
 8017be8:	4b26      	ldr	r3, [pc, #152]	; (8017c84 <icmp_send_response+0xc8>)
 8017bea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017bee:	4926      	ldr	r1, [pc, #152]	; (8017c88 <icmp_send_response+0xcc>)
 8017bf0:	4826      	ldr	r0, [pc, #152]	; (8017c8c <icmp_send_response+0xd0>)
 8017bf2:	f001 fceb 	bl	80195cc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	685b      	ldr	r3, [r3, #4]
 8017bfa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8017bfc:	69fb      	ldr	r3, [r7, #28]
 8017bfe:	685b      	ldr	r3, [r3, #4]
 8017c00:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	78fa      	ldrb	r2, [r7, #3]
 8017c06:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8017c08:	697b      	ldr	r3, [r7, #20]
 8017c0a:	78ba      	ldrb	r2, [r7, #2]
 8017c0c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8017c0e:	697b      	ldr	r3, [r7, #20]
 8017c10:	2200      	movs	r2, #0
 8017c12:	711a      	strb	r2, [r3, #4]
 8017c14:	2200      	movs	r2, #0
 8017c16:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	719a      	strb	r2, [r3, #6]
 8017c1e:	2200      	movs	r2, #0
 8017c20:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017c22:	69fb      	ldr	r3, [r7, #28]
 8017c24:	685b      	ldr	r3, [r3, #4]
 8017c26:	f103 0008 	add.w	r0, r3, #8
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	685b      	ldr	r3, [r3, #4]
 8017c2e:	221c      	movs	r2, #28
 8017c30:	4619      	mov	r1, r3
 8017c32:	f001 fdc9 	bl	80197c8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017c36:	69bb      	ldr	r3, [r7, #24]
 8017c38:	68db      	ldr	r3, [r3, #12]
 8017c3a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8017c3c:	f107 030c 	add.w	r3, r7, #12
 8017c40:	4618      	mov	r0, r3
 8017c42:	f000 f825 	bl	8017c90 <ip4_route>
 8017c46:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017c48:	693b      	ldr	r3, [r7, #16]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d011      	beq.n	8017c72 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8017c4e:	697b      	ldr	r3, [r7, #20]
 8017c50:	2200      	movs	r2, #0
 8017c52:	709a      	strb	r2, [r3, #2]
 8017c54:	2200      	movs	r2, #0
 8017c56:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017c58:	f107 020c 	add.w	r2, r7, #12
 8017c5c:	693b      	ldr	r3, [r7, #16]
 8017c5e:	9302      	str	r3, [sp, #8]
 8017c60:	2301      	movs	r3, #1
 8017c62:	9301      	str	r3, [sp, #4]
 8017c64:	2300      	movs	r3, #0
 8017c66:	9300      	str	r3, [sp, #0]
 8017c68:	23ff      	movs	r3, #255	; 0xff
 8017c6a:	2100      	movs	r1, #0
 8017c6c:	69f8      	ldr	r0, [r7, #28]
 8017c6e:	f000 f9eb 	bl	8018048 <ip4_output_if>
  }
  pbuf_free(q);
 8017c72:	69f8      	ldr	r0, [r7, #28]
 8017c74:	f7f5 ff60 	bl	800db38 <pbuf_free>
 8017c78:	e000      	b.n	8017c7c <icmp_send_response+0xc0>
    return;
 8017c7a:	bf00      	nop
}
 8017c7c:	3720      	adds	r7, #32
 8017c7e:	46bd      	mov	sp, r7
 8017c80:	bd80      	pop	{r7, pc}
 8017c82:	bf00      	nop
 8017c84:	0801d27c 	.word	0x0801d27c
 8017c88:	0801d348 	.word	0x0801d348
 8017c8c:	0801d2ec 	.word	0x0801d2ec

08017c90 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b085      	sub	sp, #20
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017c98:	4b33      	ldr	r3, [pc, #204]	; (8017d68 <ip4_route+0xd8>)
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	60fb      	str	r3, [r7, #12]
 8017c9e:	e036      	b.n	8017d0e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017ca6:	f003 0301 	and.w	r3, r3, #1
 8017caa:	b2db      	uxtb	r3, r3
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d02b      	beq.n	8017d08 <ip4_route+0x78>
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017cb6:	089b      	lsrs	r3, r3, #2
 8017cb8:	f003 0301 	and.w	r3, r3, #1
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d022      	beq.n	8017d08 <ip4_route+0x78>
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	3304      	adds	r3, #4
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	d01d      	beq.n	8017d08 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	681a      	ldr	r2, [r3, #0]
 8017cd0:	68fb      	ldr	r3, [r7, #12]
 8017cd2:	3304      	adds	r3, #4
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	405a      	eors	r2, r3
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	3308      	adds	r3, #8
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	4013      	ands	r3, r2
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d101      	bne.n	8017ce8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	e038      	b.n	8017d5a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017cee:	f003 0302 	and.w	r3, r3, #2
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d108      	bne.n	8017d08 <ip4_route+0x78>
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	681a      	ldr	r2, [r3, #0]
 8017cfa:	68fb      	ldr	r3, [r7, #12]
 8017cfc:	330c      	adds	r3, #12
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	429a      	cmp	r2, r3
 8017d02:	d101      	bne.n	8017d08 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	e028      	b.n	8017d5a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8017d08:	68fb      	ldr	r3, [r7, #12]
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	60fb      	str	r3, [r7, #12]
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d1c5      	bne.n	8017ca0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017d14:	4b15      	ldr	r3, [pc, #84]	; (8017d6c <ip4_route+0xdc>)
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	d01a      	beq.n	8017d52 <ip4_route+0xc2>
 8017d1c:	4b13      	ldr	r3, [pc, #76]	; (8017d6c <ip4_route+0xdc>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d24:	f003 0301 	and.w	r3, r3, #1
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d012      	beq.n	8017d52 <ip4_route+0xc2>
 8017d2c:	4b0f      	ldr	r3, [pc, #60]	; (8017d6c <ip4_route+0xdc>)
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d34:	f003 0304 	and.w	r3, r3, #4
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d00a      	beq.n	8017d52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017d3c:	4b0b      	ldr	r3, [pc, #44]	; (8017d6c <ip4_route+0xdc>)
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	3304      	adds	r3, #4
 8017d42:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d004      	beq.n	8017d52 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017d48:	687b      	ldr	r3, [r7, #4]
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	b2db      	uxtb	r3, r3
 8017d4e:	2b7f      	cmp	r3, #127	; 0x7f
 8017d50:	d101      	bne.n	8017d56 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017d52:	2300      	movs	r3, #0
 8017d54:	e001      	b.n	8017d5a <ip4_route+0xca>
  }

  return netif_default;
 8017d56:	4b05      	ldr	r3, [pc, #20]	; (8017d6c <ip4_route+0xdc>)
 8017d58:	681b      	ldr	r3, [r3, #0]
}
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	3714      	adds	r7, #20
 8017d5e:	46bd      	mov	sp, r7
 8017d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d64:	4770      	bx	lr
 8017d66:	bf00      	nop
 8017d68:	2000cf18 	.word	0x2000cf18
 8017d6c:	2000cf1c 	.word	0x2000cf1c

08017d70 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017d70:	b580      	push	{r7, lr}
 8017d72:	b082      	sub	sp, #8
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017d7e:	f003 0301 	and.w	r3, r3, #1
 8017d82:	b2db      	uxtb	r3, r3
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d016      	beq.n	8017db6 <ip4_input_accept+0x46>
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	3304      	adds	r3, #4
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d011      	beq.n	8017db6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017d92:	4b0b      	ldr	r3, [pc, #44]	; (8017dc0 <ip4_input_accept+0x50>)
 8017d94:	695a      	ldr	r2, [r3, #20]
 8017d96:	687b      	ldr	r3, [r7, #4]
 8017d98:	3304      	adds	r3, #4
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	429a      	cmp	r2, r3
 8017d9e:	d008      	beq.n	8017db2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017da0:	4b07      	ldr	r3, [pc, #28]	; (8017dc0 <ip4_input_accept+0x50>)
 8017da2:	695b      	ldr	r3, [r3, #20]
 8017da4:	6879      	ldr	r1, [r7, #4]
 8017da6:	4618      	mov	r0, r3
 8017da8:	f000 fa26 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 8017dac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d001      	beq.n	8017db6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8017db2:	2301      	movs	r3, #1
 8017db4:	e000      	b.n	8017db8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8017db6:	2300      	movs	r3, #0
}
 8017db8:	4618      	mov	r0, r3
 8017dba:	3708      	adds	r7, #8
 8017dbc:	46bd      	mov	sp, r7
 8017dbe:	bd80      	pop	{r7, pc}
 8017dc0:	200097b0 	.word	0x200097b0

08017dc4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b088      	sub	sp, #32
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	6078      	str	r0, [r7, #4]
 8017dcc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8017dce:	2301      	movs	r3, #1
 8017dd0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	685b      	ldr	r3, [r3, #4]
 8017dd6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8017dd8:	69fb      	ldr	r3, [r7, #28]
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	091b      	lsrs	r3, r3, #4
 8017dde:	b2db      	uxtb	r3, r3
 8017de0:	2b04      	cmp	r3, #4
 8017de2:	d004      	beq.n	8017dee <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8017de4:	6878      	ldr	r0, [r7, #4]
 8017de6:	f7f5 fea7 	bl	800db38 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8017dea:	2300      	movs	r3, #0
 8017dec:	e123      	b.n	8018036 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8017dee:	69fb      	ldr	r3, [r7, #28]
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	f003 030f 	and.w	r3, r3, #15
 8017df6:	b2db      	uxtb	r3, r3
 8017df8:	009b      	lsls	r3, r3, #2
 8017dfa:	b2db      	uxtb	r3, r3
 8017dfc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8017dfe:	69fb      	ldr	r3, [r7, #28]
 8017e00:	885b      	ldrh	r3, [r3, #2]
 8017e02:	b29b      	uxth	r3, r3
 8017e04:	4618      	mov	r0, r3
 8017e06:	f7f4 fa63 	bl	800c2d0 <lwip_htons>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	891b      	ldrh	r3, [r3, #8]
 8017e12:	8a3a      	ldrh	r2, [r7, #16]
 8017e14:	429a      	cmp	r2, r3
 8017e16:	d204      	bcs.n	8017e22 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017e18:	8a3b      	ldrh	r3, [r7, #16]
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	6878      	ldr	r0, [r7, #4]
 8017e1e:	f7f5 fd05 	bl	800d82c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	895b      	ldrh	r3, [r3, #10]
 8017e26:	8a7a      	ldrh	r2, [r7, #18]
 8017e28:	429a      	cmp	r2, r3
 8017e2a:	d807      	bhi.n	8017e3c <ip4_input+0x78>
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	891b      	ldrh	r3, [r3, #8]
 8017e30:	8a3a      	ldrh	r2, [r7, #16]
 8017e32:	429a      	cmp	r2, r3
 8017e34:	d802      	bhi.n	8017e3c <ip4_input+0x78>
 8017e36:	8a7b      	ldrh	r3, [r7, #18]
 8017e38:	2b13      	cmp	r3, #19
 8017e3a:	d804      	bhi.n	8017e46 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8017e3c:	6878      	ldr	r0, [r7, #4]
 8017e3e:	f7f5 fe7b 	bl	800db38 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017e42:	2300      	movs	r3, #0
 8017e44:	e0f7      	b.n	8018036 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	691b      	ldr	r3, [r3, #16]
 8017e4a:	4a7d      	ldr	r2, [pc, #500]	; (8018040 <ip4_input+0x27c>)
 8017e4c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8017e4e:	69fb      	ldr	r3, [r7, #28]
 8017e50:	68db      	ldr	r3, [r3, #12]
 8017e52:	4a7b      	ldr	r2, [pc, #492]	; (8018040 <ip4_input+0x27c>)
 8017e54:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017e56:	4b7a      	ldr	r3, [pc, #488]	; (8018040 <ip4_input+0x27c>)
 8017e58:	695b      	ldr	r3, [r3, #20]
 8017e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017e5e:	2be0      	cmp	r3, #224	; 0xe0
 8017e60:	d112      	bne.n	8017e88 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017e62:	683b      	ldr	r3, [r7, #0]
 8017e64:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017e68:	f003 0301 	and.w	r3, r3, #1
 8017e6c:	b2db      	uxtb	r3, r3
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d007      	beq.n	8017e82 <ip4_input+0xbe>
 8017e72:	683b      	ldr	r3, [r7, #0]
 8017e74:	3304      	adds	r3, #4
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d002      	beq.n	8017e82 <ip4_input+0xbe>
      netif = inp;
 8017e7c:	683b      	ldr	r3, [r7, #0]
 8017e7e:	61bb      	str	r3, [r7, #24]
 8017e80:	e02a      	b.n	8017ed8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017e82:	2300      	movs	r3, #0
 8017e84:	61bb      	str	r3, [r7, #24]
 8017e86:	e027      	b.n	8017ed8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017e88:	6838      	ldr	r0, [r7, #0]
 8017e8a:	f7ff ff71 	bl	8017d70 <ip4_input_accept>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d002      	beq.n	8017e9a <ip4_input+0xd6>
      netif = inp;
 8017e94:	683b      	ldr	r3, [r7, #0]
 8017e96:	61bb      	str	r3, [r7, #24]
 8017e98:	e01e      	b.n	8017ed8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8017e9e:	4b68      	ldr	r3, [pc, #416]	; (8018040 <ip4_input+0x27c>)
 8017ea0:	695b      	ldr	r3, [r3, #20]
 8017ea2:	b2db      	uxtb	r3, r3
 8017ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8017ea6:	d017      	beq.n	8017ed8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017ea8:	4b66      	ldr	r3, [pc, #408]	; (8018044 <ip4_input+0x280>)
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	61bb      	str	r3, [r7, #24]
 8017eae:	e00e      	b.n	8017ece <ip4_input+0x10a>
          if (netif == inp) {
 8017eb0:	69ba      	ldr	r2, [r7, #24]
 8017eb2:	683b      	ldr	r3, [r7, #0]
 8017eb4:	429a      	cmp	r2, r3
 8017eb6:	d006      	beq.n	8017ec6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8017eb8:	69b8      	ldr	r0, [r7, #24]
 8017eba:	f7ff ff59 	bl	8017d70 <ip4_input_accept>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d108      	bne.n	8017ed6 <ip4_input+0x112>
 8017ec4:	e000      	b.n	8017ec8 <ip4_input+0x104>
            continue;
 8017ec6:	bf00      	nop
        NETIF_FOREACH(netif) {
 8017ec8:	69bb      	ldr	r3, [r7, #24]
 8017eca:	681b      	ldr	r3, [r3, #0]
 8017ecc:	61bb      	str	r3, [r7, #24]
 8017ece:	69bb      	ldr	r3, [r7, #24]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d1ed      	bne.n	8017eb0 <ip4_input+0xec>
 8017ed4:	e000      	b.n	8017ed8 <ip4_input+0x114>
            break;
 8017ed6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8017ed8:	69bb      	ldr	r3, [r7, #24]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d111      	bne.n	8017f02 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8017ede:	69fb      	ldr	r3, [r7, #28]
 8017ee0:	7a5b      	ldrb	r3, [r3, #9]
 8017ee2:	2b11      	cmp	r3, #17
 8017ee4:	d10d      	bne.n	8017f02 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8017ee6:	8a7b      	ldrh	r3, [r7, #18]
 8017ee8:	69fa      	ldr	r2, [r7, #28]
 8017eea:	4413      	add	r3, r2
 8017eec:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	885b      	ldrh	r3, [r3, #2]
 8017ef2:	b29b      	uxth	r3, r3
 8017ef4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8017ef8:	d103      	bne.n	8017f02 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8017efa:	683b      	ldr	r3, [r7, #0]
 8017efc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8017efe:	2300      	movs	r3, #0
 8017f00:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8017f02:	697b      	ldr	r3, [r7, #20]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d017      	beq.n	8017f38 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8017f08:	4b4d      	ldr	r3, [pc, #308]	; (8018040 <ip4_input+0x27c>)
 8017f0a:	691b      	ldr	r3, [r3, #16]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d013      	beq.n	8017f38 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f10:	4b4b      	ldr	r3, [pc, #300]	; (8018040 <ip4_input+0x27c>)
 8017f12:	691b      	ldr	r3, [r3, #16]
 8017f14:	6839      	ldr	r1, [r7, #0]
 8017f16:	4618      	mov	r0, r3
 8017f18:	f000 f96e 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d105      	bne.n	8017f2e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017f22:	4b47      	ldr	r3, [pc, #284]	; (8018040 <ip4_input+0x27c>)
 8017f24:	691b      	ldr	r3, [r3, #16]
 8017f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017f2a:	2be0      	cmp	r3, #224	; 0xe0
 8017f2c:	d104      	bne.n	8017f38 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f7f5 fe02 	bl	800db38 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017f34:	2300      	movs	r3, #0
 8017f36:	e07e      	b.n	8018036 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017f38:	69bb      	ldr	r3, [r7, #24]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d104      	bne.n	8017f48 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7f5 fdfa 	bl	800db38 <pbuf_free>
    return ERR_OK;
 8017f44:	2300      	movs	r3, #0
 8017f46:	e076      	b.n	8018036 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017f48:	69fb      	ldr	r3, [r7, #28]
 8017f4a:	88db      	ldrh	r3, [r3, #6]
 8017f4c:	b29b      	uxth	r3, r3
 8017f4e:	461a      	mov	r2, r3
 8017f50:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017f54:	4013      	ands	r3, r2
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d00b      	beq.n	8017f72 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f000 fc92 	bl	8018884 <ip4_reass>
 8017f60:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d101      	bne.n	8017f6c <ip4_input+0x1a8>
      return ERR_OK;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	e064      	b.n	8018036 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017f72:	4a33      	ldr	r2, [pc, #204]	; (8018040 <ip4_input+0x27c>)
 8017f74:	69bb      	ldr	r3, [r7, #24]
 8017f76:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017f78:	4a31      	ldr	r2, [pc, #196]	; (8018040 <ip4_input+0x27c>)
 8017f7a:	683b      	ldr	r3, [r7, #0]
 8017f7c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8017f7e:	4a30      	ldr	r2, [pc, #192]	; (8018040 <ip4_input+0x27c>)
 8017f80:	69fb      	ldr	r3, [r7, #28]
 8017f82:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017f84:	69fb      	ldr	r3, [r7, #28]
 8017f86:	781b      	ldrb	r3, [r3, #0]
 8017f88:	f003 030f 	and.w	r3, r3, #15
 8017f8c:	b2db      	uxtb	r3, r3
 8017f8e:	009b      	lsls	r3, r3, #2
 8017f90:	b2db      	uxtb	r3, r3
 8017f92:	b29a      	uxth	r2, r3
 8017f94:	4b2a      	ldr	r3, [pc, #168]	; (8018040 <ip4_input+0x27c>)
 8017f96:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017f98:	8a7b      	ldrh	r3, [r7, #18]
 8017f9a:	4619      	mov	r1, r3
 8017f9c:	6878      	ldr	r0, [r7, #4]
 8017f9e:	f7f5 fd45 	bl	800da2c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017fa2:	69fb      	ldr	r3, [r7, #28]
 8017fa4:	7a5b      	ldrb	r3, [r3, #9]
 8017fa6:	2b11      	cmp	r3, #17
 8017fa8:	d006      	beq.n	8017fb8 <ip4_input+0x1f4>
 8017faa:	2b11      	cmp	r3, #17
 8017fac:	dc13      	bgt.n	8017fd6 <ip4_input+0x212>
 8017fae:	2b01      	cmp	r3, #1
 8017fb0:	d00c      	beq.n	8017fcc <ip4_input+0x208>
 8017fb2:	2b06      	cmp	r3, #6
 8017fb4:	d005      	beq.n	8017fc2 <ip4_input+0x1fe>
 8017fb6:	e00e      	b.n	8017fd6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8017fb8:	6839      	ldr	r1, [r7, #0]
 8017fba:	6878      	ldr	r0, [r7, #4]
 8017fbc:	f7fc fae8 	bl	8014590 <udp_input>
        break;
 8017fc0:	e026      	b.n	8018010 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8017fc2:	6839      	ldr	r1, [r7, #0]
 8017fc4:	6878      	ldr	r0, [r7, #4]
 8017fc6:	f7f7 fea1 	bl	800fd0c <tcp_input>
        break;
 8017fca:	e021      	b.n	8018010 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8017fcc:	6839      	ldr	r1, [r7, #0]
 8017fce:	6878      	ldr	r0, [r7, #4]
 8017fd0:	f7ff fcd0 	bl	8017974 <icmp_input>
        break;
 8017fd4:	e01c      	b.n	8018010 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017fd6:	4b1a      	ldr	r3, [pc, #104]	; (8018040 <ip4_input+0x27c>)
 8017fd8:	695b      	ldr	r3, [r3, #20]
 8017fda:	69b9      	ldr	r1, [r7, #24]
 8017fdc:	4618      	mov	r0, r3
 8017fde:	f000 f90b 	bl	80181f8 <ip4_addr_isbroadcast_u32>
 8017fe2:	4603      	mov	r3, r0
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d10f      	bne.n	8018008 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017fe8:	4b15      	ldr	r3, [pc, #84]	; (8018040 <ip4_input+0x27c>)
 8017fea:	695b      	ldr	r3, [r3, #20]
 8017fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8017ff0:	2be0      	cmp	r3, #224	; 0xe0
 8017ff2:	d009      	beq.n	8018008 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8017ff4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017ff8:	4619      	mov	r1, r3
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7f5 fd89 	bl	800db12 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018000:	2102      	movs	r1, #2
 8018002:	6878      	ldr	r0, [r7, #4]
 8018004:	f7ff fdba 	bl	8017b7c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018008:	6878      	ldr	r0, [r7, #4]
 801800a:	f7f5 fd95 	bl	800db38 <pbuf_free>
        break;
 801800e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018010:	4b0b      	ldr	r3, [pc, #44]	; (8018040 <ip4_input+0x27c>)
 8018012:	2200      	movs	r2, #0
 8018014:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018016:	4b0a      	ldr	r3, [pc, #40]	; (8018040 <ip4_input+0x27c>)
 8018018:	2200      	movs	r2, #0
 801801a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801801c:	4b08      	ldr	r3, [pc, #32]	; (8018040 <ip4_input+0x27c>)
 801801e:	2200      	movs	r2, #0
 8018020:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018022:	4b07      	ldr	r3, [pc, #28]	; (8018040 <ip4_input+0x27c>)
 8018024:	2200      	movs	r2, #0
 8018026:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018028:	4b05      	ldr	r3, [pc, #20]	; (8018040 <ip4_input+0x27c>)
 801802a:	2200      	movs	r2, #0
 801802c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801802e:	4b04      	ldr	r3, [pc, #16]	; (8018040 <ip4_input+0x27c>)
 8018030:	2200      	movs	r2, #0
 8018032:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018034:	2300      	movs	r3, #0
}
 8018036:	4618      	mov	r0, r3
 8018038:	3720      	adds	r7, #32
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}
 801803e:	bf00      	nop
 8018040:	200097b0 	.word	0x200097b0
 8018044:	2000cf18 	.word	0x2000cf18

08018048 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018048:	b580      	push	{r7, lr}
 801804a:	b08a      	sub	sp, #40	; 0x28
 801804c:	af04      	add	r7, sp, #16
 801804e:	60f8      	str	r0, [r7, #12]
 8018050:	60b9      	str	r1, [r7, #8]
 8018052:	607a      	str	r2, [r7, #4]
 8018054:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018056:	68bb      	ldr	r3, [r7, #8]
 8018058:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	2b00      	cmp	r3, #0
 801805e:	d009      	beq.n	8018074 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018060:	68bb      	ldr	r3, [r7, #8]
 8018062:	2b00      	cmp	r3, #0
 8018064:	d003      	beq.n	801806e <ip4_output_if+0x26>
 8018066:	68bb      	ldr	r3, [r7, #8]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	2b00      	cmp	r3, #0
 801806c:	d102      	bne.n	8018074 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801806e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018070:	3304      	adds	r3, #4
 8018072:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018074:	78fa      	ldrb	r2, [r7, #3]
 8018076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018078:	9302      	str	r3, [sp, #8]
 801807a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801807e:	9301      	str	r3, [sp, #4]
 8018080:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018084:	9300      	str	r3, [sp, #0]
 8018086:	4613      	mov	r3, r2
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	6979      	ldr	r1, [r7, #20]
 801808c:	68f8      	ldr	r0, [r7, #12]
 801808e:	f000 f805 	bl	801809c <ip4_output_if_src>
 8018092:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018094:	4618      	mov	r0, r3
 8018096:	3718      	adds	r7, #24
 8018098:	46bd      	mov	sp, r7
 801809a:	bd80      	pop	{r7, pc}

0801809c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b088      	sub	sp, #32
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	60f8      	str	r0, [r7, #12]
 80180a4:	60b9      	str	r1, [r7, #8]
 80180a6:	607a      	str	r2, [r7, #4]
 80180a8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	7b9b      	ldrb	r3, [r3, #14]
 80180ae:	2b01      	cmp	r3, #1
 80180b0:	d006      	beq.n	80180c0 <ip4_output_if_src+0x24>
 80180b2:	4b4b      	ldr	r3, [pc, #300]	; (80181e0 <ip4_output_if_src+0x144>)
 80180b4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80180b8:	494a      	ldr	r1, [pc, #296]	; (80181e4 <ip4_output_if_src+0x148>)
 80180ba:	484b      	ldr	r0, [pc, #300]	; (80181e8 <ip4_output_if_src+0x14c>)
 80180bc:	f001 fa86 	bl	80195cc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d060      	beq.n	8018188 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80180c6:	2314      	movs	r3, #20
 80180c8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80180ca:	2114      	movs	r1, #20
 80180cc:	68f8      	ldr	r0, [r7, #12]
 80180ce:	f7f5 fc9d 	bl	800da0c <pbuf_add_header>
 80180d2:	4603      	mov	r3, r0
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d002      	beq.n	80180de <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80180d8:	f06f 0301 	mvn.w	r3, #1
 80180dc:	e07c      	b.n	80181d8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	685b      	ldr	r3, [r3, #4]
 80180e2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	895b      	ldrh	r3, [r3, #10]
 80180e8:	2b13      	cmp	r3, #19
 80180ea:	d806      	bhi.n	80180fa <ip4_output_if_src+0x5e>
 80180ec:	4b3c      	ldr	r3, [pc, #240]	; (80181e0 <ip4_output_if_src+0x144>)
 80180ee:	f44f 7262 	mov.w	r2, #904	; 0x388
 80180f2:	493e      	ldr	r1, [pc, #248]	; (80181ec <ip4_output_if_src+0x150>)
 80180f4:	483c      	ldr	r0, [pc, #240]	; (80181e8 <ip4_output_if_src+0x14c>)
 80180f6:	f001 fa69 	bl	80195cc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80180fa:	69fb      	ldr	r3, [r7, #28]
 80180fc:	78fa      	ldrb	r2, [r7, #3]
 80180fe:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018100:	69fb      	ldr	r3, [r7, #28]
 8018102:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018106:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681a      	ldr	r2, [r3, #0]
 801810c:	69fb      	ldr	r3, [r7, #28]
 801810e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018110:	8b7b      	ldrh	r3, [r7, #26]
 8018112:	089b      	lsrs	r3, r3, #2
 8018114:	b29b      	uxth	r3, r3
 8018116:	b2db      	uxtb	r3, r3
 8018118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801811c:	b2da      	uxtb	r2, r3
 801811e:	69fb      	ldr	r3, [r7, #28]
 8018120:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018128:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	891b      	ldrh	r3, [r3, #8]
 801812e:	4618      	mov	r0, r3
 8018130:	f7f4 f8ce 	bl	800c2d0 <lwip_htons>
 8018134:	4603      	mov	r3, r0
 8018136:	461a      	mov	r2, r3
 8018138:	69fb      	ldr	r3, [r7, #28]
 801813a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801813c:	69fb      	ldr	r3, [r7, #28]
 801813e:	2200      	movs	r2, #0
 8018140:	719a      	strb	r2, [r3, #6]
 8018142:	2200      	movs	r2, #0
 8018144:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018146:	4b2a      	ldr	r3, [pc, #168]	; (80181f0 <ip4_output_if_src+0x154>)
 8018148:	881b      	ldrh	r3, [r3, #0]
 801814a:	4618      	mov	r0, r3
 801814c:	f7f4 f8c0 	bl	800c2d0 <lwip_htons>
 8018150:	4603      	mov	r3, r0
 8018152:	461a      	mov	r2, r3
 8018154:	69fb      	ldr	r3, [r7, #28]
 8018156:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018158:	4b25      	ldr	r3, [pc, #148]	; (80181f0 <ip4_output_if_src+0x154>)
 801815a:	881b      	ldrh	r3, [r3, #0]
 801815c:	3301      	adds	r3, #1
 801815e:	b29a      	uxth	r2, r3
 8018160:	4b23      	ldr	r3, [pc, #140]	; (80181f0 <ip4_output_if_src+0x154>)
 8018162:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d104      	bne.n	8018174 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801816a:	4b22      	ldr	r3, [pc, #136]	; (80181f4 <ip4_output_if_src+0x158>)
 801816c:	681a      	ldr	r2, [r3, #0]
 801816e:	69fb      	ldr	r3, [r7, #28]
 8018170:	60da      	str	r2, [r3, #12]
 8018172:	e003      	b.n	801817c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	681a      	ldr	r2, [r3, #0]
 8018178:	69fb      	ldr	r3, [r7, #28]
 801817a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801817c:	69fb      	ldr	r3, [r7, #28]
 801817e:	2200      	movs	r2, #0
 8018180:	729a      	strb	r2, [r3, #10]
 8018182:	2200      	movs	r2, #0
 8018184:	72da      	strb	r2, [r3, #11]
 8018186:	e00f      	b.n	80181a8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	895b      	ldrh	r3, [r3, #10]
 801818c:	2b13      	cmp	r3, #19
 801818e:	d802      	bhi.n	8018196 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018190:	f06f 0301 	mvn.w	r3, #1
 8018194:	e020      	b.n	80181d8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	685b      	ldr	r3, [r3, #4]
 801819a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801819c:	69fb      	ldr	r3, [r7, #28]
 801819e:	691b      	ldr	r3, [r3, #16]
 80181a0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80181a2:	f107 0314 	add.w	r3, r7, #20
 80181a6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80181a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d00c      	beq.n	80181ca <ip4_output_if_src+0x12e>
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	891a      	ldrh	r2, [r3, #8]
 80181b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d906      	bls.n	80181ca <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80181bc:	687a      	ldr	r2, [r7, #4]
 80181be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80181c0:	68f8      	ldr	r0, [r7, #12]
 80181c2:	f000 fd53 	bl	8018c6c <ip4_frag>
 80181c6:	4603      	mov	r3, r0
 80181c8:	e006      	b.n	80181d8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80181ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80181cc:	695b      	ldr	r3, [r3, #20]
 80181ce:	687a      	ldr	r2, [r7, #4]
 80181d0:	68f9      	ldr	r1, [r7, #12]
 80181d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80181d4:	4798      	blx	r3
 80181d6:	4603      	mov	r3, r0
}
 80181d8:	4618      	mov	r0, r3
 80181da:	3720      	adds	r7, #32
 80181dc:	46bd      	mov	sp, r7
 80181de:	bd80      	pop	{r7, pc}
 80181e0:	0801d374 	.word	0x0801d374
 80181e4:	0801d3a8 	.word	0x0801d3a8
 80181e8:	0801d3b4 	.word	0x0801d3b4
 80181ec:	0801d3dc 	.word	0x0801d3dc
 80181f0:	2000d0aa 	.word	0x2000d0aa
 80181f4:	0801fbb0 	.word	0x0801fbb0

080181f8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80181f8:	b480      	push	{r7}
 80181fa:	b085      	sub	sp, #20
 80181fc:	af00      	add	r7, sp, #0
 80181fe:	6078      	str	r0, [r7, #4]
 8018200:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f1b3 3fff 	cmp.w	r3, #4294967295
 801820c:	d002      	beq.n	8018214 <ip4_addr_isbroadcast_u32+0x1c>
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d101      	bne.n	8018218 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018214:	2301      	movs	r3, #1
 8018216:	e02a      	b.n	801826e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8018218:	683b      	ldr	r3, [r7, #0]
 801821a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801821e:	f003 0302 	and.w	r3, r3, #2
 8018222:	2b00      	cmp	r3, #0
 8018224:	d101      	bne.n	801822a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018226:	2300      	movs	r3, #0
 8018228:	e021      	b.n	801826e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801822a:	683b      	ldr	r3, [r7, #0]
 801822c:	3304      	adds	r3, #4
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	687a      	ldr	r2, [r7, #4]
 8018232:	429a      	cmp	r2, r3
 8018234:	d101      	bne.n	801823a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018236:	2300      	movs	r3, #0
 8018238:	e019      	b.n	801826e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801823a:	68fa      	ldr	r2, [r7, #12]
 801823c:	683b      	ldr	r3, [r7, #0]
 801823e:	3304      	adds	r3, #4
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	405a      	eors	r2, r3
 8018244:	683b      	ldr	r3, [r7, #0]
 8018246:	3308      	adds	r3, #8
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	4013      	ands	r3, r2
 801824c:	2b00      	cmp	r3, #0
 801824e:	d10d      	bne.n	801826c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018250:	683b      	ldr	r3, [r7, #0]
 8018252:	3308      	adds	r3, #8
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	43da      	mvns	r2, r3
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801825c:	683b      	ldr	r3, [r7, #0]
 801825e:	3308      	adds	r3, #8
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018264:	429a      	cmp	r2, r3
 8018266:	d101      	bne.n	801826c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018268:	2301      	movs	r3, #1
 801826a:	e000      	b.n	801826e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801826c:	2300      	movs	r3, #0
  }
}
 801826e:	4618      	mov	r0, r3
 8018270:	3714      	adds	r7, #20
 8018272:	46bd      	mov	sp, r7
 8018274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018278:	4770      	bx	lr
	...

0801827c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b084      	sub	sp, #16
 8018280:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018282:	2300      	movs	r3, #0
 8018284:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018286:	4b12      	ldr	r3, [pc, #72]	; (80182d0 <ip_reass_tmr+0x54>)
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801828c:	e018      	b.n	80182c0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	7fdb      	ldrb	r3, [r3, #31]
 8018292:	2b00      	cmp	r3, #0
 8018294:	d00b      	beq.n	80182ae <ip_reass_tmr+0x32>
      r->timer--;
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	7fdb      	ldrb	r3, [r3, #31]
 801829a:	3b01      	subs	r3, #1
 801829c:	b2da      	uxtb	r2, r3
 801829e:	68fb      	ldr	r3, [r7, #12]
 80182a0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	60fb      	str	r3, [r7, #12]
 80182ac:	e008      	b.n	80182c0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80182b8:	68b9      	ldr	r1, [r7, #8]
 80182ba:	6878      	ldr	r0, [r7, #4]
 80182bc:	f000 f80a 	bl	80182d4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d1e3      	bne.n	801828e <ip_reass_tmr+0x12>
    }
  }
}
 80182c6:	bf00      	nop
 80182c8:	bf00      	nop
 80182ca:	3710      	adds	r7, #16
 80182cc:	46bd      	mov	sp, r7
 80182ce:	bd80      	pop	{r7, pc}
 80182d0:	2000d0ac 	.word	0x2000d0ac

080182d4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80182d4:	b580      	push	{r7, lr}
 80182d6:	b088      	sub	sp, #32
 80182d8:	af00      	add	r7, sp, #0
 80182da:	6078      	str	r0, [r7, #4]
 80182dc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80182de:	2300      	movs	r3, #0
 80182e0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80182e2:	683a      	ldr	r2, [r7, #0]
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	429a      	cmp	r2, r3
 80182e8:	d105      	bne.n	80182f6 <ip_reass_free_complete_datagram+0x22>
 80182ea:	4b45      	ldr	r3, [pc, #276]	; (8018400 <ip_reass_free_complete_datagram+0x12c>)
 80182ec:	22ab      	movs	r2, #171	; 0xab
 80182ee:	4945      	ldr	r1, [pc, #276]	; (8018404 <ip_reass_free_complete_datagram+0x130>)
 80182f0:	4845      	ldr	r0, [pc, #276]	; (8018408 <ip_reass_free_complete_datagram+0x134>)
 80182f2:	f001 f96b 	bl	80195cc <iprintf>
  if (prev != NULL) {
 80182f6:	683b      	ldr	r3, [r7, #0]
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d00a      	beq.n	8018312 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80182fc:	683b      	ldr	r3, [r7, #0]
 80182fe:	681b      	ldr	r3, [r3, #0]
 8018300:	687a      	ldr	r2, [r7, #4]
 8018302:	429a      	cmp	r2, r3
 8018304:	d005      	beq.n	8018312 <ip_reass_free_complete_datagram+0x3e>
 8018306:	4b3e      	ldr	r3, [pc, #248]	; (8018400 <ip_reass_free_complete_datagram+0x12c>)
 8018308:	22ad      	movs	r2, #173	; 0xad
 801830a:	4940      	ldr	r1, [pc, #256]	; (801840c <ip_reass_free_complete_datagram+0x138>)
 801830c:	483e      	ldr	r0, [pc, #248]	; (8018408 <ip_reass_free_complete_datagram+0x134>)
 801830e:	f001 f95d 	bl	80195cc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	685b      	ldr	r3, [r3, #4]
 8018318:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801831a:	697b      	ldr	r3, [r7, #20]
 801831c:	889b      	ldrh	r3, [r3, #4]
 801831e:	b29b      	uxth	r3, r3
 8018320:	2b00      	cmp	r3, #0
 8018322:	d12a      	bne.n	801837a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	685b      	ldr	r3, [r3, #4]
 8018328:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801832a:	697b      	ldr	r3, [r7, #20]
 801832c:	681a      	ldr	r2, [r3, #0]
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018332:	69bb      	ldr	r3, [r7, #24]
 8018334:	6858      	ldr	r0, [r3, #4]
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	3308      	adds	r3, #8
 801833a:	2214      	movs	r2, #20
 801833c:	4619      	mov	r1, r3
 801833e:	f001 fa43 	bl	80197c8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018342:	2101      	movs	r1, #1
 8018344:	69b8      	ldr	r0, [r7, #24]
 8018346:	f7ff fc29 	bl	8017b9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801834a:	69b8      	ldr	r0, [r7, #24]
 801834c:	f7f5 fc82 	bl	800dc54 <pbuf_clen>
 8018350:	4603      	mov	r3, r0
 8018352:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018354:	8bfa      	ldrh	r2, [r7, #30]
 8018356:	8a7b      	ldrh	r3, [r7, #18]
 8018358:	4413      	add	r3, r2
 801835a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801835e:	db05      	blt.n	801836c <ip_reass_free_complete_datagram+0x98>
 8018360:	4b27      	ldr	r3, [pc, #156]	; (8018400 <ip_reass_free_complete_datagram+0x12c>)
 8018362:	22bc      	movs	r2, #188	; 0xbc
 8018364:	492a      	ldr	r1, [pc, #168]	; (8018410 <ip_reass_free_complete_datagram+0x13c>)
 8018366:	4828      	ldr	r0, [pc, #160]	; (8018408 <ip_reass_free_complete_datagram+0x134>)
 8018368:	f001 f930 	bl	80195cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801836c:	8bfa      	ldrh	r2, [r7, #30]
 801836e:	8a7b      	ldrh	r3, [r7, #18]
 8018370:	4413      	add	r3, r2
 8018372:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018374:	69b8      	ldr	r0, [r7, #24]
 8018376:	f7f5 fbdf 	bl	800db38 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	685b      	ldr	r3, [r3, #4]
 801837e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018380:	e01f      	b.n	80183c2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018382:	69bb      	ldr	r3, [r7, #24]
 8018384:	685b      	ldr	r3, [r3, #4]
 8018386:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018388:	69bb      	ldr	r3, [r7, #24]
 801838a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801838c:	697b      	ldr	r3, [r7, #20]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018392:	68f8      	ldr	r0, [r7, #12]
 8018394:	f7f5 fc5e 	bl	800dc54 <pbuf_clen>
 8018398:	4603      	mov	r3, r0
 801839a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801839c:	8bfa      	ldrh	r2, [r7, #30]
 801839e:	8a7b      	ldrh	r3, [r7, #18]
 80183a0:	4413      	add	r3, r2
 80183a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183a6:	db05      	blt.n	80183b4 <ip_reass_free_complete_datagram+0xe0>
 80183a8:	4b15      	ldr	r3, [pc, #84]	; (8018400 <ip_reass_free_complete_datagram+0x12c>)
 80183aa:	22cc      	movs	r2, #204	; 0xcc
 80183ac:	4918      	ldr	r1, [pc, #96]	; (8018410 <ip_reass_free_complete_datagram+0x13c>)
 80183ae:	4816      	ldr	r0, [pc, #88]	; (8018408 <ip_reass_free_complete_datagram+0x134>)
 80183b0:	f001 f90c 	bl	80195cc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80183b4:	8bfa      	ldrh	r2, [r7, #30]
 80183b6:	8a7b      	ldrh	r3, [r7, #18]
 80183b8:	4413      	add	r3, r2
 80183ba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80183bc:	68f8      	ldr	r0, [r7, #12]
 80183be:	f7f5 fbbb 	bl	800db38 <pbuf_free>
  while (p != NULL) {
 80183c2:	69bb      	ldr	r3, [r7, #24]
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d1dc      	bne.n	8018382 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80183c8:	6839      	ldr	r1, [r7, #0]
 80183ca:	6878      	ldr	r0, [r7, #4]
 80183cc:	f000 f8c2 	bl	8018554 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80183d0:	4b10      	ldr	r3, [pc, #64]	; (8018414 <ip_reass_free_complete_datagram+0x140>)
 80183d2:	881b      	ldrh	r3, [r3, #0]
 80183d4:	8bfa      	ldrh	r2, [r7, #30]
 80183d6:	429a      	cmp	r2, r3
 80183d8:	d905      	bls.n	80183e6 <ip_reass_free_complete_datagram+0x112>
 80183da:	4b09      	ldr	r3, [pc, #36]	; (8018400 <ip_reass_free_complete_datagram+0x12c>)
 80183dc:	22d2      	movs	r2, #210	; 0xd2
 80183de:	490e      	ldr	r1, [pc, #56]	; (8018418 <ip_reass_free_complete_datagram+0x144>)
 80183e0:	4809      	ldr	r0, [pc, #36]	; (8018408 <ip_reass_free_complete_datagram+0x134>)
 80183e2:	f001 f8f3 	bl	80195cc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80183e6:	4b0b      	ldr	r3, [pc, #44]	; (8018414 <ip_reass_free_complete_datagram+0x140>)
 80183e8:	881a      	ldrh	r2, [r3, #0]
 80183ea:	8bfb      	ldrh	r3, [r7, #30]
 80183ec:	1ad3      	subs	r3, r2, r3
 80183ee:	b29a      	uxth	r2, r3
 80183f0:	4b08      	ldr	r3, [pc, #32]	; (8018414 <ip_reass_free_complete_datagram+0x140>)
 80183f2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80183f4:	8bfb      	ldrh	r3, [r7, #30]
}
 80183f6:	4618      	mov	r0, r3
 80183f8:	3720      	adds	r7, #32
 80183fa:	46bd      	mov	sp, r7
 80183fc:	bd80      	pop	{r7, pc}
 80183fe:	bf00      	nop
 8018400:	0801d40c 	.word	0x0801d40c
 8018404:	0801d448 	.word	0x0801d448
 8018408:	0801d454 	.word	0x0801d454
 801840c:	0801d47c 	.word	0x0801d47c
 8018410:	0801d490 	.word	0x0801d490
 8018414:	2000d0b0 	.word	0x2000d0b0
 8018418:	0801d4b0 	.word	0x0801d4b0

0801841c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b08a      	sub	sp, #40	; 0x28
 8018420:	af00      	add	r7, sp, #0
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018426:	2300      	movs	r3, #0
 8018428:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801842a:	2300      	movs	r3, #0
 801842c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801842e:	2300      	movs	r3, #0
 8018430:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018432:	2300      	movs	r3, #0
 8018434:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018436:	2300      	movs	r3, #0
 8018438:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801843a:	4b28      	ldr	r3, [pc, #160]	; (80184dc <ip_reass_remove_oldest_datagram+0xc0>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018440:	e030      	b.n	80184a4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018444:	695a      	ldr	r2, [r3, #20]
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	68db      	ldr	r3, [r3, #12]
 801844a:	429a      	cmp	r2, r3
 801844c:	d10c      	bne.n	8018468 <ip_reass_remove_oldest_datagram+0x4c>
 801844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018450:	699a      	ldr	r2, [r3, #24]
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	691b      	ldr	r3, [r3, #16]
 8018456:	429a      	cmp	r2, r3
 8018458:	d106      	bne.n	8018468 <ip_reass_remove_oldest_datagram+0x4c>
 801845a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801845c:	899a      	ldrh	r2, [r3, #12]
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	889b      	ldrh	r3, [r3, #4]
 8018462:	b29b      	uxth	r3, r3
 8018464:	429a      	cmp	r2, r3
 8018466:	d014      	beq.n	8018492 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018468:	693b      	ldr	r3, [r7, #16]
 801846a:	3301      	adds	r3, #1
 801846c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801846e:	6a3b      	ldr	r3, [r7, #32]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d104      	bne.n	801847e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018476:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018478:	69fb      	ldr	r3, [r7, #28]
 801847a:	61bb      	str	r3, [r7, #24]
 801847c:	e009      	b.n	8018492 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018480:	7fda      	ldrb	r2, [r3, #31]
 8018482:	6a3b      	ldr	r3, [r7, #32]
 8018484:	7fdb      	ldrb	r3, [r3, #31]
 8018486:	429a      	cmp	r2, r3
 8018488:	d803      	bhi.n	8018492 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801848a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801848c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801848e:	69fb      	ldr	r3, [r7, #28]
 8018490:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018494:	681b      	ldr	r3, [r3, #0]
 8018496:	2b00      	cmp	r3, #0
 8018498:	d001      	beq.n	801849e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801849a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801849c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801849e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80184a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d1cb      	bne.n	8018442 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80184aa:	6a3b      	ldr	r3, [r7, #32]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d008      	beq.n	80184c2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80184b0:	69b9      	ldr	r1, [r7, #24]
 80184b2:	6a38      	ldr	r0, [r7, #32]
 80184b4:	f7ff ff0e 	bl	80182d4 <ip_reass_free_complete_datagram>
 80184b8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80184ba:	697a      	ldr	r2, [r7, #20]
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	4413      	add	r3, r2
 80184c0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80184c2:	697a      	ldr	r2, [r7, #20]
 80184c4:	683b      	ldr	r3, [r7, #0]
 80184c6:	429a      	cmp	r2, r3
 80184c8:	da02      	bge.n	80184d0 <ip_reass_remove_oldest_datagram+0xb4>
 80184ca:	693b      	ldr	r3, [r7, #16]
 80184cc:	2b01      	cmp	r3, #1
 80184ce:	dcac      	bgt.n	801842a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80184d0:	697b      	ldr	r3, [r7, #20]
}
 80184d2:	4618      	mov	r0, r3
 80184d4:	3728      	adds	r7, #40	; 0x28
 80184d6:	46bd      	mov	sp, r7
 80184d8:	bd80      	pop	{r7, pc}
 80184da:	bf00      	nop
 80184dc:	2000d0ac 	.word	0x2000d0ac

080184e0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80184e0:	b580      	push	{r7, lr}
 80184e2:	b084      	sub	sp, #16
 80184e4:	af00      	add	r7, sp, #0
 80184e6:	6078      	str	r0, [r7, #4]
 80184e8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80184ea:	2004      	movs	r0, #4
 80184ec:	f7f4 fbfe 	bl	800ccec <memp_malloc>
 80184f0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d110      	bne.n	801851a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80184f8:	6839      	ldr	r1, [r7, #0]
 80184fa:	6878      	ldr	r0, [r7, #4]
 80184fc:	f7ff ff8e 	bl	801841c <ip_reass_remove_oldest_datagram>
 8018500:	4602      	mov	r2, r0
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	4293      	cmp	r3, r2
 8018506:	dc03      	bgt.n	8018510 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018508:	2004      	movs	r0, #4
 801850a:	f7f4 fbef 	bl	800ccec <memp_malloc>
 801850e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d101      	bne.n	801851a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018516:	2300      	movs	r3, #0
 8018518:	e016      	b.n	8018548 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801851a:	2220      	movs	r2, #32
 801851c:	2100      	movs	r1, #0
 801851e:	68f8      	ldr	r0, [r7, #12]
 8018520:	f001 f8b9 	bl	8019696 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	220f      	movs	r2, #15
 8018528:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801852a:	4b09      	ldr	r3, [pc, #36]	; (8018550 <ip_reass_enqueue_new_datagram+0x70>)
 801852c:	681a      	ldr	r2, [r3, #0]
 801852e:	68fb      	ldr	r3, [r7, #12]
 8018530:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018532:	4a07      	ldr	r2, [pc, #28]	; (8018550 <ip_reass_enqueue_new_datagram+0x70>)
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018538:	68fb      	ldr	r3, [r7, #12]
 801853a:	3308      	adds	r3, #8
 801853c:	2214      	movs	r2, #20
 801853e:	6879      	ldr	r1, [r7, #4]
 8018540:	4618      	mov	r0, r3
 8018542:	f001 f941 	bl	80197c8 <memcpy>
  return ipr;
 8018546:	68fb      	ldr	r3, [r7, #12]
}
 8018548:	4618      	mov	r0, r3
 801854a:	3710      	adds	r7, #16
 801854c:	46bd      	mov	sp, r7
 801854e:	bd80      	pop	{r7, pc}
 8018550:	2000d0ac 	.word	0x2000d0ac

08018554 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801855e:	4b10      	ldr	r3, [pc, #64]	; (80185a0 <ip_reass_dequeue_datagram+0x4c>)
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	687a      	ldr	r2, [r7, #4]
 8018564:	429a      	cmp	r2, r3
 8018566:	d104      	bne.n	8018572 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	4a0c      	ldr	r2, [pc, #48]	; (80185a0 <ip_reass_dequeue_datagram+0x4c>)
 801856e:	6013      	str	r3, [r2, #0]
 8018570:	e00d      	b.n	801858e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018572:	683b      	ldr	r3, [r7, #0]
 8018574:	2b00      	cmp	r3, #0
 8018576:	d106      	bne.n	8018586 <ip_reass_dequeue_datagram+0x32>
 8018578:	4b0a      	ldr	r3, [pc, #40]	; (80185a4 <ip_reass_dequeue_datagram+0x50>)
 801857a:	f240 1245 	movw	r2, #325	; 0x145
 801857e:	490a      	ldr	r1, [pc, #40]	; (80185a8 <ip_reass_dequeue_datagram+0x54>)
 8018580:	480a      	ldr	r0, [pc, #40]	; (80185ac <ip_reass_dequeue_datagram+0x58>)
 8018582:	f001 f823 	bl	80195cc <iprintf>
    prev->next = ipr->next;
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	681a      	ldr	r2, [r3, #0]
 801858a:	683b      	ldr	r3, [r7, #0]
 801858c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801858e:	6879      	ldr	r1, [r7, #4]
 8018590:	2004      	movs	r0, #4
 8018592:	f7f4 fc21 	bl	800cdd8 <memp_free>
}
 8018596:	bf00      	nop
 8018598:	3708      	adds	r7, #8
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}
 801859e:	bf00      	nop
 80185a0:	2000d0ac 	.word	0x2000d0ac
 80185a4:	0801d40c 	.word	0x0801d40c
 80185a8:	0801d4d4 	.word	0x0801d4d4
 80185ac:	0801d454 	.word	0x0801d454

080185b0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80185b0:	b580      	push	{r7, lr}
 80185b2:	b08c      	sub	sp, #48	; 0x30
 80185b4:	af00      	add	r7, sp, #0
 80185b6:	60f8      	str	r0, [r7, #12]
 80185b8:	60b9      	str	r1, [r7, #8]
 80185ba:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80185bc:	2300      	movs	r3, #0
 80185be:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80185c0:	2301      	movs	r3, #1
 80185c2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	685b      	ldr	r3, [r3, #4]
 80185c8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80185ca:	69fb      	ldr	r3, [r7, #28]
 80185cc:	885b      	ldrh	r3, [r3, #2]
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	4618      	mov	r0, r3
 80185d2:	f7f3 fe7d 	bl	800c2d0 <lwip_htons>
 80185d6:	4603      	mov	r3, r0
 80185d8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80185da:	69fb      	ldr	r3, [r7, #28]
 80185dc:	781b      	ldrb	r3, [r3, #0]
 80185de:	f003 030f 	and.w	r3, r3, #15
 80185e2:	b2db      	uxtb	r3, r3
 80185e4:	009b      	lsls	r3, r3, #2
 80185e6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80185e8:	7e7b      	ldrb	r3, [r7, #25]
 80185ea:	b29b      	uxth	r3, r3
 80185ec:	8b7a      	ldrh	r2, [r7, #26]
 80185ee:	429a      	cmp	r2, r3
 80185f0:	d202      	bcs.n	80185f8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80185f2:	f04f 33ff 	mov.w	r3, #4294967295
 80185f6:	e135      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80185f8:	7e7b      	ldrb	r3, [r7, #25]
 80185fa:	b29b      	uxth	r3, r3
 80185fc:	8b7a      	ldrh	r2, [r7, #26]
 80185fe:	1ad3      	subs	r3, r2, r3
 8018600:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018602:	69fb      	ldr	r3, [r7, #28]
 8018604:	88db      	ldrh	r3, [r3, #6]
 8018606:	b29b      	uxth	r3, r3
 8018608:	4618      	mov	r0, r3
 801860a:	f7f3 fe61 	bl	800c2d0 <lwip_htons>
 801860e:	4603      	mov	r3, r0
 8018610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018614:	b29b      	uxth	r3, r3
 8018616:	00db      	lsls	r3, r3, #3
 8018618:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801861a:	68bb      	ldr	r3, [r7, #8]
 801861c:	685b      	ldr	r3, [r3, #4]
 801861e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018622:	2200      	movs	r2, #0
 8018624:	701a      	strb	r2, [r3, #0]
 8018626:	2200      	movs	r2, #0
 8018628:	705a      	strb	r2, [r3, #1]
 801862a:	2200      	movs	r2, #0
 801862c:	709a      	strb	r2, [r3, #2]
 801862e:	2200      	movs	r2, #0
 8018630:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018634:	8afa      	ldrh	r2, [r7, #22]
 8018636:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018638:	8afa      	ldrh	r2, [r7, #22]
 801863a:	8b7b      	ldrh	r3, [r7, #26]
 801863c:	4413      	add	r3, r2
 801863e:	b29a      	uxth	r2, r3
 8018640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018642:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018646:	88db      	ldrh	r3, [r3, #6]
 8018648:	b29b      	uxth	r3, r3
 801864a:	8afa      	ldrh	r2, [r7, #22]
 801864c:	429a      	cmp	r2, r3
 801864e:	d902      	bls.n	8018656 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018650:	f04f 33ff 	mov.w	r3, #4294967295
 8018654:	e106      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	685b      	ldr	r3, [r3, #4]
 801865a:	627b      	str	r3, [r7, #36]	; 0x24
 801865c:	e068      	b.n	8018730 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018660:	685b      	ldr	r3, [r3, #4]
 8018662:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018666:	889b      	ldrh	r3, [r3, #4]
 8018668:	b29a      	uxth	r2, r3
 801866a:	693b      	ldr	r3, [r7, #16]
 801866c:	889b      	ldrh	r3, [r3, #4]
 801866e:	b29b      	uxth	r3, r3
 8018670:	429a      	cmp	r2, r3
 8018672:	d235      	bcs.n	80186e0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018678:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801867a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801867c:	2b00      	cmp	r3, #0
 801867e:	d020      	beq.n	80186c2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018682:	889b      	ldrh	r3, [r3, #4]
 8018684:	b29a      	uxth	r2, r3
 8018686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018688:	88db      	ldrh	r3, [r3, #6]
 801868a:	b29b      	uxth	r3, r3
 801868c:	429a      	cmp	r2, r3
 801868e:	d307      	bcc.n	80186a0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018692:	88db      	ldrh	r3, [r3, #6]
 8018694:	b29a      	uxth	r2, r3
 8018696:	693b      	ldr	r3, [r7, #16]
 8018698:	889b      	ldrh	r3, [r3, #4]
 801869a:	b29b      	uxth	r3, r3
 801869c:	429a      	cmp	r2, r3
 801869e:	d902      	bls.n	80186a6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186a0:	f04f 33ff 	mov.w	r3, #4294967295
 80186a4:	e0de      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80186a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186a8:	68ba      	ldr	r2, [r7, #8]
 80186aa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80186ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186ae:	88db      	ldrh	r3, [r3, #6]
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186b4:	889b      	ldrh	r3, [r3, #4]
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	429a      	cmp	r2, r3
 80186ba:	d03d      	beq.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80186bc:	2300      	movs	r3, #0
 80186be:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80186c0:	e03a      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80186c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186c4:	88db      	ldrh	r3, [r3, #6]
 80186c6:	b29a      	uxth	r2, r3
 80186c8:	693b      	ldr	r3, [r7, #16]
 80186ca:	889b      	ldrh	r3, [r3, #4]
 80186cc:	b29b      	uxth	r3, r3
 80186ce:	429a      	cmp	r2, r3
 80186d0:	d902      	bls.n	80186d8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186d2:	f04f 33ff 	mov.w	r3, #4294967295
 80186d6:	e0c5      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	68ba      	ldr	r2, [r7, #8]
 80186dc:	605a      	str	r2, [r3, #4]
      break;
 80186de:	e02b      	b.n	8018738 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80186e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186e2:	889b      	ldrh	r3, [r3, #4]
 80186e4:	b29a      	uxth	r2, r3
 80186e6:	693b      	ldr	r3, [r7, #16]
 80186e8:	889b      	ldrh	r3, [r3, #4]
 80186ea:	b29b      	uxth	r3, r3
 80186ec:	429a      	cmp	r2, r3
 80186ee:	d102      	bne.n	80186f6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80186f0:	f04f 33ff 	mov.w	r3, #4294967295
 80186f4:	e0b6      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80186f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80186f8:	889b      	ldrh	r3, [r3, #4]
 80186fa:	b29a      	uxth	r2, r3
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	88db      	ldrh	r3, [r3, #6]
 8018700:	b29b      	uxth	r3, r3
 8018702:	429a      	cmp	r2, r3
 8018704:	d202      	bcs.n	801870c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018706:	f04f 33ff 	mov.w	r3, #4294967295
 801870a:	e0ab      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801870e:	2b00      	cmp	r3, #0
 8018710:	d009      	beq.n	8018726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018714:	88db      	ldrh	r3, [r3, #6]
 8018716:	b29a      	uxth	r2, r3
 8018718:	693b      	ldr	r3, [r7, #16]
 801871a:	889b      	ldrh	r3, [r3, #4]
 801871c:	b29b      	uxth	r3, r3
 801871e:	429a      	cmp	r2, r3
 8018720:	d001      	beq.n	8018726 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018722:	2300      	movs	r3, #0
 8018724:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018726:	693b      	ldr	r3, [r7, #16]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018732:	2b00      	cmp	r3, #0
 8018734:	d193      	bne.n	801865e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018736:	e000      	b.n	801873a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018738:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801873c:	2b00      	cmp	r3, #0
 801873e:	d12d      	bne.n	801879c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018742:	2b00      	cmp	r3, #0
 8018744:	d01c      	beq.n	8018780 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018748:	88db      	ldrh	r3, [r3, #6]
 801874a:	b29a      	uxth	r2, r3
 801874c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801874e:	889b      	ldrh	r3, [r3, #4]
 8018750:	b29b      	uxth	r3, r3
 8018752:	429a      	cmp	r2, r3
 8018754:	d906      	bls.n	8018764 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018756:	4b45      	ldr	r3, [pc, #276]	; (801886c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018758:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801875c:	4944      	ldr	r1, [pc, #272]	; (8018870 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801875e:	4845      	ldr	r0, [pc, #276]	; (8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018760:	f000 ff34 	bl	80195cc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018766:	68ba      	ldr	r2, [r7, #8]
 8018768:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801876a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801876c:	88db      	ldrh	r3, [r3, #6]
 801876e:	b29a      	uxth	r2, r3
 8018770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018772:	889b      	ldrh	r3, [r3, #4]
 8018774:	b29b      	uxth	r3, r3
 8018776:	429a      	cmp	r2, r3
 8018778:	d010      	beq.n	801879c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801877a:	2300      	movs	r3, #0
 801877c:	623b      	str	r3, [r7, #32]
 801877e:	e00d      	b.n	801879c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	685b      	ldr	r3, [r3, #4]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d006      	beq.n	8018796 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018788:	4b38      	ldr	r3, [pc, #224]	; (801886c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801878a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801878e:	493a      	ldr	r1, [pc, #232]	; (8018878 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018790:	4838      	ldr	r0, [pc, #224]	; (8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018792:	f000 ff1b 	bl	80195cc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	68ba      	ldr	r2, [r7, #8]
 801879a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d105      	bne.n	80187ae <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	7f9b      	ldrb	r3, [r3, #30]
 80187a6:	f003 0301 	and.w	r3, r3, #1
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d059      	beq.n	8018862 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80187ae:	6a3b      	ldr	r3, [r7, #32]
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	d04f      	beq.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80187b4:	68fb      	ldr	r3, [r7, #12]
 80187b6:	685b      	ldr	r3, [r3, #4]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d006      	beq.n	80187ca <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	685b      	ldr	r3, [r3, #4]
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	889b      	ldrh	r3, [r3, #4]
 80187c4:	b29b      	uxth	r3, r3
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d002      	beq.n	80187d0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80187ca:	2300      	movs	r3, #0
 80187cc:	623b      	str	r3, [r7, #32]
 80187ce:	e041      	b.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80187d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80187d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80187da:	e012      	b.n	8018802 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80187dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187de:	685b      	ldr	r3, [r3, #4]
 80187e0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80187e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187e4:	88db      	ldrh	r3, [r3, #6]
 80187e6:	b29a      	uxth	r2, r3
 80187e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187ea:	889b      	ldrh	r3, [r3, #4]
 80187ec:	b29b      	uxth	r3, r3
 80187ee:	429a      	cmp	r2, r3
 80187f0:	d002      	beq.n	80187f8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80187f2:	2300      	movs	r3, #0
 80187f4:	623b      	str	r3, [r7, #32]
            break;
 80187f6:	e007      	b.n	8018808 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80187f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fa:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80187fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018804:	2b00      	cmp	r3, #0
 8018806:	d1e9      	bne.n	80187dc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018808:	6a3b      	ldr	r3, [r7, #32]
 801880a:	2b00      	cmp	r3, #0
 801880c:	d022      	beq.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801880e:	68fb      	ldr	r3, [r7, #12]
 8018810:	685b      	ldr	r3, [r3, #4]
 8018812:	2b00      	cmp	r3, #0
 8018814:	d106      	bne.n	8018824 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018816:	4b15      	ldr	r3, [pc, #84]	; (801886c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018818:	f240 12df 	movw	r2, #479	; 0x1df
 801881c:	4917      	ldr	r1, [pc, #92]	; (801887c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801881e:	4815      	ldr	r0, [pc, #84]	; (8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018820:	f000 fed4 	bl	80195cc <iprintf>
          LWIP_ASSERT("sanity check",
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	685b      	ldr	r3, [r3, #4]
 8018828:	685b      	ldr	r3, [r3, #4]
 801882a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801882c:	429a      	cmp	r2, r3
 801882e:	d106      	bne.n	801883e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018830:	4b0e      	ldr	r3, [pc, #56]	; (801886c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018832:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018836:	4911      	ldr	r1, [pc, #68]	; (801887c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018838:	480e      	ldr	r0, [pc, #56]	; (8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801883a:	f000 fec7 	bl	80195cc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801883e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	2b00      	cmp	r3, #0
 8018844:	d006      	beq.n	8018854 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018846:	4b09      	ldr	r3, [pc, #36]	; (801886c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018848:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801884c:	490c      	ldr	r1, [pc, #48]	; (8018880 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801884e:	4809      	ldr	r0, [pc, #36]	; (8018874 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018850:	f000 febc 	bl	80195cc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018854:	6a3b      	ldr	r3, [r7, #32]
 8018856:	2b00      	cmp	r3, #0
 8018858:	bf14      	ite	ne
 801885a:	2301      	movne	r3, #1
 801885c:	2300      	moveq	r3, #0
 801885e:	b2db      	uxtb	r3, r3
 8018860:	e000      	b.n	8018864 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018862:	2300      	movs	r3, #0
}
 8018864:	4618      	mov	r0, r3
 8018866:	3730      	adds	r7, #48	; 0x30
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}
 801886c:	0801d40c 	.word	0x0801d40c
 8018870:	0801d4f0 	.word	0x0801d4f0
 8018874:	0801d454 	.word	0x0801d454
 8018878:	0801d510 	.word	0x0801d510
 801887c:	0801d548 	.word	0x0801d548
 8018880:	0801d558 	.word	0x0801d558

08018884 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018884:	b580      	push	{r7, lr}
 8018886:	b08e      	sub	sp, #56	; 0x38
 8018888:	af00      	add	r7, sp, #0
 801888a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	685b      	ldr	r3, [r3, #4]
 8018890:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018894:	781b      	ldrb	r3, [r3, #0]
 8018896:	f003 030f 	and.w	r3, r3, #15
 801889a:	b2db      	uxtb	r3, r3
 801889c:	009b      	lsls	r3, r3, #2
 801889e:	b2db      	uxtb	r3, r3
 80188a0:	2b14      	cmp	r3, #20
 80188a2:	f040 8171 	bne.w	8018b88 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80188a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188a8:	88db      	ldrh	r3, [r3, #6]
 80188aa:	b29b      	uxth	r3, r3
 80188ac:	4618      	mov	r0, r3
 80188ae:	f7f3 fd0f 	bl	800c2d0 <lwip_htons>
 80188b2:	4603      	mov	r3, r0
 80188b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80188b8:	b29b      	uxth	r3, r3
 80188ba:	00db      	lsls	r3, r3, #3
 80188bc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80188be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188c0:	885b      	ldrh	r3, [r3, #2]
 80188c2:	b29b      	uxth	r3, r3
 80188c4:	4618      	mov	r0, r3
 80188c6:	f7f3 fd03 	bl	800c2d0 <lwip_htons>
 80188ca:	4603      	mov	r3, r0
 80188cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80188ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d0:	781b      	ldrb	r3, [r3, #0]
 80188d2:	f003 030f 	and.w	r3, r3, #15
 80188d6:	b2db      	uxtb	r3, r3
 80188d8:	009b      	lsls	r3, r3, #2
 80188da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80188de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80188e2:	b29b      	uxth	r3, r3
 80188e4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188e6:	429a      	cmp	r2, r3
 80188e8:	f0c0 8150 	bcc.w	8018b8c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80188ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80188f0:	b29b      	uxth	r3, r3
 80188f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80188f4:	1ad3      	subs	r3, r2, r3
 80188f6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80188f8:	6878      	ldr	r0, [r7, #4]
 80188fa:	f7f5 f9ab 	bl	800dc54 <pbuf_clen>
 80188fe:	4603      	mov	r3, r0
 8018900:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018902:	4b8c      	ldr	r3, [pc, #560]	; (8018b34 <ip4_reass+0x2b0>)
 8018904:	881b      	ldrh	r3, [r3, #0]
 8018906:	461a      	mov	r2, r3
 8018908:	8c3b      	ldrh	r3, [r7, #32]
 801890a:	4413      	add	r3, r2
 801890c:	2b0a      	cmp	r3, #10
 801890e:	dd10      	ble.n	8018932 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018910:	8c3b      	ldrh	r3, [r7, #32]
 8018912:	4619      	mov	r1, r3
 8018914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018916:	f7ff fd81 	bl	801841c <ip_reass_remove_oldest_datagram>
 801891a:	4603      	mov	r3, r0
 801891c:	2b00      	cmp	r3, #0
 801891e:	f000 8137 	beq.w	8018b90 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018922:	4b84      	ldr	r3, [pc, #528]	; (8018b34 <ip4_reass+0x2b0>)
 8018924:	881b      	ldrh	r3, [r3, #0]
 8018926:	461a      	mov	r2, r3
 8018928:	8c3b      	ldrh	r3, [r7, #32]
 801892a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801892c:	2b0a      	cmp	r3, #10
 801892e:	f300 812f 	bgt.w	8018b90 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018932:	4b81      	ldr	r3, [pc, #516]	; (8018b38 <ip4_reass+0x2b4>)
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	633b      	str	r3, [r7, #48]	; 0x30
 8018938:	e015      	b.n	8018966 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801893c:	695a      	ldr	r2, [r3, #20]
 801893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018940:	68db      	ldr	r3, [r3, #12]
 8018942:	429a      	cmp	r2, r3
 8018944:	d10c      	bne.n	8018960 <ip4_reass+0xdc>
 8018946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018948:	699a      	ldr	r2, [r3, #24]
 801894a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801894c:	691b      	ldr	r3, [r3, #16]
 801894e:	429a      	cmp	r2, r3
 8018950:	d106      	bne.n	8018960 <ip4_reass+0xdc>
 8018952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018954:	899a      	ldrh	r2, [r3, #12]
 8018956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018958:	889b      	ldrh	r3, [r3, #4]
 801895a:	b29b      	uxth	r3, r3
 801895c:	429a      	cmp	r2, r3
 801895e:	d006      	beq.n	801896e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018962:	681b      	ldr	r3, [r3, #0]
 8018964:	633b      	str	r3, [r7, #48]	; 0x30
 8018966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018968:	2b00      	cmp	r3, #0
 801896a:	d1e6      	bne.n	801893a <ip4_reass+0xb6>
 801896c:	e000      	b.n	8018970 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801896e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018972:	2b00      	cmp	r3, #0
 8018974:	d109      	bne.n	801898a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018976:	8c3b      	ldrh	r3, [r7, #32]
 8018978:	4619      	mov	r1, r3
 801897a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801897c:	f7ff fdb0 	bl	80184e0 <ip_reass_enqueue_new_datagram>
 8018980:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018984:	2b00      	cmp	r3, #0
 8018986:	d11c      	bne.n	80189c2 <ip4_reass+0x13e>
      goto nullreturn;
 8018988:	e105      	b.n	8018b96 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801898a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801898c:	88db      	ldrh	r3, [r3, #6]
 801898e:	b29b      	uxth	r3, r3
 8018990:	4618      	mov	r0, r3
 8018992:	f7f3 fc9d 	bl	800c2d0 <lwip_htons>
 8018996:	4603      	mov	r3, r0
 8018998:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801899c:	2b00      	cmp	r3, #0
 801899e:	d110      	bne.n	80189c2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80189a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189a2:	89db      	ldrh	r3, [r3, #14]
 80189a4:	4618      	mov	r0, r3
 80189a6:	f7f3 fc93 	bl	800c2d0 <lwip_htons>
 80189aa:	4603      	mov	r3, r0
 80189ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d006      	beq.n	80189c2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80189b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80189b6:	3308      	adds	r3, #8
 80189b8:	2214      	movs	r2, #20
 80189ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80189bc:	4618      	mov	r0, r3
 80189be:	f000 ff03 	bl	80197c8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80189c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189c4:	88db      	ldrh	r3, [r3, #6]
 80189c6:	b29b      	uxth	r3, r3
 80189c8:	f003 0320 	and.w	r3, r3, #32
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	bf0c      	ite	eq
 80189d0:	2301      	moveq	r3, #1
 80189d2:	2300      	movne	r3, #0
 80189d4:	b2db      	uxtb	r3, r3
 80189d6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80189d8:	69fb      	ldr	r3, [r7, #28]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d00e      	beq.n	80189fc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80189de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80189e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80189e2:	4413      	add	r3, r2
 80189e4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80189e6:	8b7a      	ldrh	r2, [r7, #26]
 80189e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80189ea:	429a      	cmp	r2, r3
 80189ec:	f0c0 80a0 	bcc.w	8018b30 <ip4_reass+0x2ac>
 80189f0:	8b7b      	ldrh	r3, [r7, #26]
 80189f2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80189f6:	4293      	cmp	r3, r2
 80189f8:	f200 809a 	bhi.w	8018b30 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80189fc:	69fa      	ldr	r2, [r7, #28]
 80189fe:	6879      	ldr	r1, [r7, #4]
 8018a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018a02:	f7ff fdd5 	bl	80185b0 <ip_reass_chain_frag_into_datagram_and_validate>
 8018a06:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018a08:	697b      	ldr	r3, [r7, #20]
 8018a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a0e:	f000 809b 	beq.w	8018b48 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018a12:	4b48      	ldr	r3, [pc, #288]	; (8018b34 <ip4_reass+0x2b0>)
 8018a14:	881a      	ldrh	r2, [r3, #0]
 8018a16:	8c3b      	ldrh	r3, [r7, #32]
 8018a18:	4413      	add	r3, r2
 8018a1a:	b29a      	uxth	r2, r3
 8018a1c:	4b45      	ldr	r3, [pc, #276]	; (8018b34 <ip4_reass+0x2b0>)
 8018a1e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018a20:	69fb      	ldr	r3, [r7, #28]
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d00d      	beq.n	8018a42 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018a26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018a28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018a2a:	4413      	add	r3, r2
 8018a2c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a30:	8a7a      	ldrh	r2, [r7, #18]
 8018a32:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a36:	7f9b      	ldrb	r3, [r3, #30]
 8018a38:	f043 0301 	orr.w	r3, r3, #1
 8018a3c:	b2da      	uxtb	r2, r3
 8018a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a40:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018a42:	697b      	ldr	r3, [r7, #20]
 8018a44:	2b01      	cmp	r3, #1
 8018a46:	d171      	bne.n	8018b2c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a4a:	8b9b      	ldrh	r3, [r3, #28]
 8018a4c:	3314      	adds	r3, #20
 8018a4e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	685b      	ldr	r3, [r3, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a5c:	685b      	ldr	r3, [r3, #4]
 8018a5e:	685b      	ldr	r3, [r3, #4]
 8018a60:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a64:	3308      	adds	r3, #8
 8018a66:	2214      	movs	r2, #20
 8018a68:	4619      	mov	r1, r3
 8018a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018a6c:	f000 feac 	bl	80197c8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018a70:	8a3b      	ldrh	r3, [r7, #16]
 8018a72:	4618      	mov	r0, r3
 8018a74:	f7f3 fc2c 	bl	800c2d0 <lwip_htons>
 8018a78:	4603      	mov	r3, r0
 8018a7a:	461a      	mov	r2, r3
 8018a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a7e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a82:	2200      	movs	r2, #0
 8018a84:	719a      	strb	r2, [r3, #6]
 8018a86:	2200      	movs	r2, #0
 8018a88:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	729a      	strb	r2, [r3, #10]
 8018a90:	2200      	movs	r2, #0
 8018a92:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018a96:	685b      	ldr	r3, [r3, #4]
 8018a98:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018a9a:	e00d      	b.n	8018ab8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a9e:	685b      	ldr	r3, [r3, #4]
 8018aa0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018aa2:	2114      	movs	r1, #20
 8018aa4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018aa6:	f7f4 ffc1 	bl	800da2c <pbuf_remove_header>
      pbuf_cat(p, r);
 8018aaa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018aac:	6878      	ldr	r0, [r7, #4]
 8018aae:	f7f5 f911 	bl	800dcd4 <pbuf_cat>
      r = iprh->next_pbuf;
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d1ee      	bne.n	8018a9c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018abe:	4b1e      	ldr	r3, [pc, #120]	; (8018b38 <ip4_reass+0x2b4>)
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	d102      	bne.n	8018ace <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018ac8:	2300      	movs	r3, #0
 8018aca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018acc:	e010      	b.n	8018af0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018ace:	4b1a      	ldr	r3, [pc, #104]	; (8018b38 <ip4_reass+0x2b4>)
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ad4:	e007      	b.n	8018ae6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ad8:	681b      	ldr	r3, [r3, #0]
 8018ada:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018adc:	429a      	cmp	r2, r3
 8018ade:	d006      	beq.n	8018aee <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ae2:	681b      	ldr	r3, [r3, #0]
 8018ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d1f4      	bne.n	8018ad6 <ip4_reass+0x252>
 8018aec:	e000      	b.n	8018af0 <ip4_reass+0x26c>
          break;
 8018aee:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018af0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018af2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018af4:	f7ff fd2e 	bl	8018554 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018af8:	6878      	ldr	r0, [r7, #4]
 8018afa:	f7f5 f8ab 	bl	800dc54 <pbuf_clen>
 8018afe:	4603      	mov	r3, r0
 8018b00:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018b02:	4b0c      	ldr	r3, [pc, #48]	; (8018b34 <ip4_reass+0x2b0>)
 8018b04:	881b      	ldrh	r3, [r3, #0]
 8018b06:	8c3a      	ldrh	r2, [r7, #32]
 8018b08:	429a      	cmp	r2, r3
 8018b0a:	d906      	bls.n	8018b1a <ip4_reass+0x296>
 8018b0c:	4b0b      	ldr	r3, [pc, #44]	; (8018b3c <ip4_reass+0x2b8>)
 8018b0e:	f240 229b 	movw	r2, #667	; 0x29b
 8018b12:	490b      	ldr	r1, [pc, #44]	; (8018b40 <ip4_reass+0x2bc>)
 8018b14:	480b      	ldr	r0, [pc, #44]	; (8018b44 <ip4_reass+0x2c0>)
 8018b16:	f000 fd59 	bl	80195cc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018b1a:	4b06      	ldr	r3, [pc, #24]	; (8018b34 <ip4_reass+0x2b0>)
 8018b1c:	881a      	ldrh	r2, [r3, #0]
 8018b1e:	8c3b      	ldrh	r3, [r7, #32]
 8018b20:	1ad3      	subs	r3, r2, r3
 8018b22:	b29a      	uxth	r2, r3
 8018b24:	4b03      	ldr	r3, [pc, #12]	; (8018b34 <ip4_reass+0x2b0>)
 8018b26:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	e038      	b.n	8018b9e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	e036      	b.n	8018b9e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018b30:	bf00      	nop
 8018b32:	e00a      	b.n	8018b4a <ip4_reass+0x2c6>
 8018b34:	2000d0b0 	.word	0x2000d0b0
 8018b38:	2000d0ac 	.word	0x2000d0ac
 8018b3c:	0801d40c 	.word	0x0801d40c
 8018b40:	0801d57c 	.word	0x0801d57c
 8018b44:	0801d454 	.word	0x0801d454
    goto nullreturn_ipr;
 8018b48:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	d106      	bne.n	8018b5e <ip4_reass+0x2da>
 8018b50:	4b15      	ldr	r3, [pc, #84]	; (8018ba8 <ip4_reass+0x324>)
 8018b52:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018b56:	4915      	ldr	r1, [pc, #84]	; (8018bac <ip4_reass+0x328>)
 8018b58:	4815      	ldr	r0, [pc, #84]	; (8018bb0 <ip4_reass+0x32c>)
 8018b5a:	f000 fd37 	bl	80195cc <iprintf>
  if (ipr->p == NULL) {
 8018b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b60:	685b      	ldr	r3, [r3, #4]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d116      	bne.n	8018b94 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018b66:	4b13      	ldr	r3, [pc, #76]	; (8018bb4 <ip4_reass+0x330>)
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018b6c:	429a      	cmp	r2, r3
 8018b6e:	d006      	beq.n	8018b7e <ip4_reass+0x2fa>
 8018b70:	4b0d      	ldr	r3, [pc, #52]	; (8018ba8 <ip4_reass+0x324>)
 8018b72:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018b76:	4910      	ldr	r1, [pc, #64]	; (8018bb8 <ip4_reass+0x334>)
 8018b78:	480d      	ldr	r0, [pc, #52]	; (8018bb0 <ip4_reass+0x32c>)
 8018b7a:	f000 fd27 	bl	80195cc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018b7e:	2100      	movs	r1, #0
 8018b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018b82:	f7ff fce7 	bl	8018554 <ip_reass_dequeue_datagram>
 8018b86:	e006      	b.n	8018b96 <ip4_reass+0x312>
    goto nullreturn;
 8018b88:	bf00      	nop
 8018b8a:	e004      	b.n	8018b96 <ip4_reass+0x312>
    goto nullreturn;
 8018b8c:	bf00      	nop
 8018b8e:	e002      	b.n	8018b96 <ip4_reass+0x312>
      goto nullreturn;
 8018b90:	bf00      	nop
 8018b92:	e000      	b.n	8018b96 <ip4_reass+0x312>
  }

nullreturn:
 8018b94:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018b96:	6878      	ldr	r0, [r7, #4]
 8018b98:	f7f4 ffce 	bl	800db38 <pbuf_free>
  return NULL;
 8018b9c:	2300      	movs	r3, #0
}
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	3738      	adds	r7, #56	; 0x38
 8018ba2:	46bd      	mov	sp, r7
 8018ba4:	bd80      	pop	{r7, pc}
 8018ba6:	bf00      	nop
 8018ba8:	0801d40c 	.word	0x0801d40c
 8018bac:	0801d598 	.word	0x0801d598
 8018bb0:	0801d454 	.word	0x0801d454
 8018bb4:	2000d0ac 	.word	0x2000d0ac
 8018bb8:	0801d5a4 	.word	0x0801d5a4

08018bbc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018bbc:	b580      	push	{r7, lr}
 8018bbe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018bc0:	2005      	movs	r0, #5
 8018bc2:	f7f4 f893 	bl	800ccec <memp_malloc>
 8018bc6:	4603      	mov	r3, r0
}
 8018bc8:	4618      	mov	r0, r3
 8018bca:	bd80      	pop	{r7, pc}

08018bcc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018bcc:	b580      	push	{r7, lr}
 8018bce:	b082      	sub	sp, #8
 8018bd0:	af00      	add	r7, sp, #0
 8018bd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d106      	bne.n	8018be8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018bda:	4b07      	ldr	r3, [pc, #28]	; (8018bf8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018bdc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018be0:	4906      	ldr	r1, [pc, #24]	; (8018bfc <ip_frag_free_pbuf_custom_ref+0x30>)
 8018be2:	4807      	ldr	r0, [pc, #28]	; (8018c00 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018be4:	f000 fcf2 	bl	80195cc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018be8:	6879      	ldr	r1, [r7, #4]
 8018bea:	2005      	movs	r0, #5
 8018bec:	f7f4 f8f4 	bl	800cdd8 <memp_free>
}
 8018bf0:	bf00      	nop
 8018bf2:	3708      	adds	r7, #8
 8018bf4:	46bd      	mov	sp, r7
 8018bf6:	bd80      	pop	{r7, pc}
 8018bf8:	0801d40c 	.word	0x0801d40c
 8018bfc:	0801d5c4 	.word	0x0801d5c4
 8018c00:	0801d454 	.word	0x0801d454

08018c04 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b084      	sub	sp, #16
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	2b00      	cmp	r3, #0
 8018c14:	d106      	bne.n	8018c24 <ipfrag_free_pbuf_custom+0x20>
 8018c16:	4b11      	ldr	r3, [pc, #68]	; (8018c5c <ipfrag_free_pbuf_custom+0x58>)
 8018c18:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018c1c:	4910      	ldr	r1, [pc, #64]	; (8018c60 <ipfrag_free_pbuf_custom+0x5c>)
 8018c1e:	4811      	ldr	r0, [pc, #68]	; (8018c64 <ipfrag_free_pbuf_custom+0x60>)
 8018c20:	f000 fcd4 	bl	80195cc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018c24:	68fa      	ldr	r2, [r7, #12]
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	429a      	cmp	r2, r3
 8018c2a:	d006      	beq.n	8018c3a <ipfrag_free_pbuf_custom+0x36>
 8018c2c:	4b0b      	ldr	r3, [pc, #44]	; (8018c5c <ipfrag_free_pbuf_custom+0x58>)
 8018c2e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018c32:	490d      	ldr	r1, [pc, #52]	; (8018c68 <ipfrag_free_pbuf_custom+0x64>)
 8018c34:	480b      	ldr	r0, [pc, #44]	; (8018c64 <ipfrag_free_pbuf_custom+0x60>)
 8018c36:	f000 fcc9 	bl	80195cc <iprintf>
  if (pcr->original != NULL) {
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	695b      	ldr	r3, [r3, #20]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	d004      	beq.n	8018c4c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018c42:	68fb      	ldr	r3, [r7, #12]
 8018c44:	695b      	ldr	r3, [r3, #20]
 8018c46:	4618      	mov	r0, r3
 8018c48:	f7f4 ff76 	bl	800db38 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8018c4c:	68f8      	ldr	r0, [r7, #12]
 8018c4e:	f7ff ffbd 	bl	8018bcc <ip_frag_free_pbuf_custom_ref>
}
 8018c52:	bf00      	nop
 8018c54:	3710      	adds	r7, #16
 8018c56:	46bd      	mov	sp, r7
 8018c58:	bd80      	pop	{r7, pc}
 8018c5a:	bf00      	nop
 8018c5c:	0801d40c 	.word	0x0801d40c
 8018c60:	0801d5d0 	.word	0x0801d5d0
 8018c64:	0801d454 	.word	0x0801d454
 8018c68:	0801d5dc 	.word	0x0801d5dc

08018c6c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b094      	sub	sp, #80	; 0x50
 8018c70:	af02      	add	r7, sp, #8
 8018c72:	60f8      	str	r0, [r7, #12]
 8018c74:	60b9      	str	r1, [r7, #8]
 8018c76:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018c78:	2300      	movs	r3, #0
 8018c7a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8018c7e:	68bb      	ldr	r3, [r7, #8]
 8018c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018c82:	3b14      	subs	r3, #20
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	da00      	bge.n	8018c8a <ip4_frag+0x1e>
 8018c88:	3307      	adds	r3, #7
 8018c8a:	10db      	asrs	r3, r3, #3
 8018c8c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8018c8e:	2314      	movs	r3, #20
 8018c90:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	685b      	ldr	r3, [r3, #4]
 8018c96:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018c9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8018c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	f003 030f 	and.w	r3, r3, #15
 8018ca4:	b2db      	uxtb	r3, r3
 8018ca6:	009b      	lsls	r3, r3, #2
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	2b14      	cmp	r3, #20
 8018cac:	d002      	beq.n	8018cb4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8018cae:	f06f 0305 	mvn.w	r3, #5
 8018cb2:	e110      	b.n	8018ed6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8018cb4:	68fb      	ldr	r3, [r7, #12]
 8018cb6:	895b      	ldrh	r3, [r3, #10]
 8018cb8:	2b13      	cmp	r3, #19
 8018cba:	d809      	bhi.n	8018cd0 <ip4_frag+0x64>
 8018cbc:	4b88      	ldr	r3, [pc, #544]	; (8018ee0 <ip4_frag+0x274>)
 8018cbe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8018cc2:	4988      	ldr	r1, [pc, #544]	; (8018ee4 <ip4_frag+0x278>)
 8018cc4:	4888      	ldr	r0, [pc, #544]	; (8018ee8 <ip4_frag+0x27c>)
 8018cc6:	f000 fc81 	bl	80195cc <iprintf>
 8018cca:	f06f 0305 	mvn.w	r3, #5
 8018cce:	e102      	b.n	8018ed6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8018cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018cd2:	88db      	ldrh	r3, [r3, #6]
 8018cd4:	b29b      	uxth	r3, r3
 8018cd6:	4618      	mov	r0, r3
 8018cd8:	f7f3 fafa 	bl	800c2d0 <lwip_htons>
 8018cdc:	4603      	mov	r3, r0
 8018cde:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8018ce0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018ce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018ce6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8018cea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018cf0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8018cf2:	68fb      	ldr	r3, [r7, #12]
 8018cf4:	891b      	ldrh	r3, [r3, #8]
 8018cf6:	3b14      	subs	r3, #20
 8018cf8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8018cfc:	e0e1      	b.n	8018ec2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8018cfe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018d00:	00db      	lsls	r3, r3, #3
 8018d02:	b29b      	uxth	r3, r3
 8018d04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018d08:	4293      	cmp	r3, r2
 8018d0a:	bf28      	it	cs
 8018d0c:	4613      	movcs	r3, r2
 8018d0e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018d10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018d14:	2114      	movs	r1, #20
 8018d16:	200e      	movs	r0, #14
 8018d18:	f7f4 fc2a 	bl	800d570 <pbuf_alloc>
 8018d1c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8018d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	f000 80d5 	beq.w	8018ed0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d28:	895b      	ldrh	r3, [r3, #10]
 8018d2a:	2b13      	cmp	r3, #19
 8018d2c:	d806      	bhi.n	8018d3c <ip4_frag+0xd0>
 8018d2e:	4b6c      	ldr	r3, [pc, #432]	; (8018ee0 <ip4_frag+0x274>)
 8018d30:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018d34:	496d      	ldr	r1, [pc, #436]	; (8018eec <ip4_frag+0x280>)
 8018d36:	486c      	ldr	r0, [pc, #432]	; (8018ee8 <ip4_frag+0x27c>)
 8018d38:	f000 fc48 	bl	80195cc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8018d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d3e:	685b      	ldr	r3, [r3, #4]
 8018d40:	2214      	movs	r2, #20
 8018d42:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018d44:	4618      	mov	r0, r3
 8018d46:	f000 fd3f 	bl	80197c8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8018d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018d4c:	685b      	ldr	r3, [r3, #4]
 8018d4e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018d50:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018d52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018d56:	e064      	b.n	8018e22 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	895a      	ldrh	r2, [r3, #10]
 8018d5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018d5e:	1ad3      	subs	r3, r2, r3
 8018d60:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	895b      	ldrh	r3, [r3, #10]
 8018d66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018d68:	429a      	cmp	r2, r3
 8018d6a:	d906      	bls.n	8018d7a <ip4_frag+0x10e>
 8018d6c:	4b5c      	ldr	r3, [pc, #368]	; (8018ee0 <ip4_frag+0x274>)
 8018d6e:	f240 322d 	movw	r2, #813	; 0x32d
 8018d72:	495f      	ldr	r1, [pc, #380]	; (8018ef0 <ip4_frag+0x284>)
 8018d74:	485c      	ldr	r0, [pc, #368]	; (8018ee8 <ip4_frag+0x27c>)
 8018d76:	f000 fc29 	bl	80195cc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8018d7a:	8bfa      	ldrh	r2, [r7, #30]
 8018d7c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018d80:	4293      	cmp	r3, r2
 8018d82:	bf28      	it	cs
 8018d84:	4613      	movcs	r3, r2
 8018d86:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8018d8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018d8e:	2b00      	cmp	r3, #0
 8018d90:	d105      	bne.n	8018d9e <ip4_frag+0x132>
        poff = 0;
 8018d92:	2300      	movs	r3, #0
 8018d94:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018d96:	68fb      	ldr	r3, [r7, #12]
 8018d98:	681b      	ldr	r3, [r3, #0]
 8018d9a:	60fb      	str	r3, [r7, #12]
        continue;
 8018d9c:	e041      	b.n	8018e22 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8018d9e:	f7ff ff0d 	bl	8018bbc <ip_frag_alloc_pbuf_custom_ref>
 8018da2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018da4:	69bb      	ldr	r3, [r7, #24]
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d103      	bne.n	8018db2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8018daa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018dac:	f7f4 fec4 	bl	800db38 <pbuf_free>
        goto memerr;
 8018db0:	e08f      	b.n	8018ed2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018db2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8018db8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018dba:	4413      	add	r3, r2
 8018dbc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8018dc0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8018dc4:	9201      	str	r2, [sp, #4]
 8018dc6:	9300      	str	r3, [sp, #0]
 8018dc8:	4603      	mov	r3, r0
 8018dca:	2241      	movs	r2, #65	; 0x41
 8018dcc:	2000      	movs	r0, #0
 8018dce:	f7f4 fcf9 	bl	800d7c4 <pbuf_alloced_custom>
 8018dd2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	2b00      	cmp	r3, #0
 8018dd8:	d106      	bne.n	8018de8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8018dda:	69b8      	ldr	r0, [r7, #24]
 8018ddc:	f7ff fef6 	bl	8018bcc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8018de0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018de2:	f7f4 fea9 	bl	800db38 <pbuf_free>
        goto memerr;
 8018de6:	e074      	b.n	8018ed2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8018de8:	68f8      	ldr	r0, [r7, #12]
 8018dea:	f7f4 ff4b 	bl	800dc84 <pbuf_ref>
      pcr->original = p;
 8018dee:	69bb      	ldr	r3, [r7, #24]
 8018df0:	68fa      	ldr	r2, [r7, #12]
 8018df2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8018df4:	69bb      	ldr	r3, [r7, #24]
 8018df6:	4a3f      	ldr	r2, [pc, #252]	; (8018ef4 <ip4_frag+0x288>)
 8018df8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8018dfa:	6979      	ldr	r1, [r7, #20]
 8018dfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018dfe:	f7f4 ff69 	bl	800dcd4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8018e02:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8018e06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e0a:	1ad3      	subs	r3, r2, r3
 8018e0c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018e10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d004      	beq.n	8018e22 <ip4_frag+0x1b6>
        poff = 0;
 8018e18:	2300      	movs	r3, #0
 8018e1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018e1c:	68fb      	ldr	r3, [r7, #12]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018e22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d196      	bne.n	8018d58 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8018e2a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018e2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018e30:	4413      	add	r3, r2
 8018e32:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018e34:	68bb      	ldr	r3, [r7, #8]
 8018e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018e38:	f1a3 0213 	sub.w	r2, r3, #19
 8018e3c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018e40:	429a      	cmp	r2, r3
 8018e42:	bfcc      	ite	gt
 8018e44:	2301      	movgt	r3, #1
 8018e46:	2300      	movle	r3, #0
 8018e48:	b2db      	uxtb	r3, r3
 8018e4a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8018e4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018e54:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018e56:	6a3b      	ldr	r3, [r7, #32]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d002      	beq.n	8018e62 <ip4_frag+0x1f6>
 8018e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d003      	beq.n	8018e6a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018e62:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018e68:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8018e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f7f3 fa2f 	bl	800c2d0 <lwip_htons>
 8018e72:	4603      	mov	r3, r0
 8018e74:	461a      	mov	r2, r3
 8018e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e78:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8018e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018e7c:	3314      	adds	r3, #20
 8018e7e:	b29b      	uxth	r3, r3
 8018e80:	4618      	mov	r0, r3
 8018e82:	f7f3 fa25 	bl	800c2d0 <lwip_htons>
 8018e86:	4603      	mov	r3, r0
 8018e88:	461a      	mov	r2, r3
 8018e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e8c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8018e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e90:	2200      	movs	r2, #0
 8018e92:	729a      	strb	r2, [r3, #10]
 8018e94:	2200      	movs	r2, #0
 8018e96:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018e98:	68bb      	ldr	r3, [r7, #8]
 8018e9a:	695b      	ldr	r3, [r3, #20]
 8018e9c:	687a      	ldr	r2, [r7, #4]
 8018e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018ea0:	68b8      	ldr	r0, [r7, #8]
 8018ea2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018ea4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018ea6:	f7f4 fe47 	bl	800db38 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8018eaa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018eb0:	1ad3      	subs	r3, r2, r3
 8018eb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8018eb6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018eba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018ebc:	4413      	add	r3, r2
 8018ebe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8018ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018ec6:	2b00      	cmp	r3, #0
 8018ec8:	f47f af19 	bne.w	8018cfe <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8018ecc:	2300      	movs	r3, #0
 8018ece:	e002      	b.n	8018ed6 <ip4_frag+0x26a>
      goto memerr;
 8018ed0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8018ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3748      	adds	r7, #72	; 0x48
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	0801d40c 	.word	0x0801d40c
 8018ee4:	0801d5e8 	.word	0x0801d5e8
 8018ee8:	0801d454 	.word	0x0801d454
 8018eec:	0801d604 	.word	0x0801d604
 8018ef0:	0801d624 	.word	0x0801d624
 8018ef4:	08018c05 	.word	0x08018c05

08018ef8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8018ef8:	b580      	push	{r7, lr}
 8018efa:	b086      	sub	sp, #24
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
 8018f00:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8018f02:	230e      	movs	r3, #14
 8018f04:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	895b      	ldrh	r3, [r3, #10]
 8018f0a:	2b0e      	cmp	r3, #14
 8018f0c:	d96e      	bls.n	8018fec <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8018f0e:	687b      	ldr	r3, [r7, #4]
 8018f10:	7bdb      	ldrb	r3, [r3, #15]
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d106      	bne.n	8018f24 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018f16:	683b      	ldr	r3, [r7, #0]
 8018f18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8018f1c:	3301      	adds	r3, #1
 8018f1e:	b2da      	uxtb	r2, r3
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	685b      	ldr	r3, [r3, #4]
 8018f28:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8018f2a:	693b      	ldr	r3, [r7, #16]
 8018f2c:	7b1a      	ldrb	r2, [r3, #12]
 8018f2e:	7b5b      	ldrb	r3, [r3, #13]
 8018f30:	021b      	lsls	r3, r3, #8
 8018f32:	4313      	orrs	r3, r2
 8018f34:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018f36:	693b      	ldr	r3, [r7, #16]
 8018f38:	781b      	ldrb	r3, [r3, #0]
 8018f3a:	f003 0301 	and.w	r3, r3, #1
 8018f3e:	2b00      	cmp	r3, #0
 8018f40:	d023      	beq.n	8018f8a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018f42:	693b      	ldr	r3, [r7, #16]
 8018f44:	781b      	ldrb	r3, [r3, #0]
 8018f46:	2b01      	cmp	r3, #1
 8018f48:	d10f      	bne.n	8018f6a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f4a:	693b      	ldr	r3, [r7, #16]
 8018f4c:	785b      	ldrb	r3, [r3, #1]
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d11b      	bne.n	8018f8a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018f52:	693b      	ldr	r3, [r7, #16]
 8018f54:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018f56:	2b5e      	cmp	r3, #94	; 0x5e
 8018f58:	d117      	bne.n	8018f8a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8018f5a:	687b      	ldr	r3, [r7, #4]
 8018f5c:	7b5b      	ldrb	r3, [r3, #13]
 8018f5e:	f043 0310 	orr.w	r3, r3, #16
 8018f62:	b2da      	uxtb	r2, r3
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	735a      	strb	r2, [r3, #13]
 8018f68:	e00f      	b.n	8018f8a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8018f6a:	693b      	ldr	r3, [r7, #16]
 8018f6c:	2206      	movs	r2, #6
 8018f6e:	4928      	ldr	r1, [pc, #160]	; (8019010 <ethernet_input+0x118>)
 8018f70:	4618      	mov	r0, r3
 8018f72:	f000 fb80 	bl	8019676 <memcmp>
 8018f76:	4603      	mov	r3, r0
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d106      	bne.n	8018f8a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	7b5b      	ldrb	r3, [r3, #13]
 8018f80:	f043 0308 	orr.w	r3, r3, #8
 8018f84:	b2da      	uxtb	r2, r3
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8018f8a:	89fb      	ldrh	r3, [r7, #14]
 8018f8c:	2b08      	cmp	r3, #8
 8018f8e:	d003      	beq.n	8018f98 <ethernet_input+0xa0>
 8018f90:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018f94:	d014      	beq.n	8018fc0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018f96:	e032      	b.n	8018ffe <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018f9e:	f003 0308 	and.w	r3, r3, #8
 8018fa2:	2b00      	cmp	r3, #0
 8018fa4:	d024      	beq.n	8018ff0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018fa6:	8afb      	ldrh	r3, [r7, #22]
 8018fa8:	4619      	mov	r1, r3
 8018faa:	6878      	ldr	r0, [r7, #4]
 8018fac:	f7f4 fd3e 	bl	800da2c <pbuf_remove_header>
 8018fb0:	4603      	mov	r3, r0
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d11e      	bne.n	8018ff4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018fb6:	6839      	ldr	r1, [r7, #0]
 8018fb8:	6878      	ldr	r0, [r7, #4]
 8018fba:	f7fe ff03 	bl	8017dc4 <ip4_input>
      break;
 8018fbe:	e013      	b.n	8018fe8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018fc0:	683b      	ldr	r3, [r7, #0]
 8018fc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018fc6:	f003 0308 	and.w	r3, r3, #8
 8018fca:	2b00      	cmp	r3, #0
 8018fcc:	d014      	beq.n	8018ff8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018fce:	8afb      	ldrh	r3, [r7, #22]
 8018fd0:	4619      	mov	r1, r3
 8018fd2:	6878      	ldr	r0, [r7, #4]
 8018fd4:	f7f4 fd2a 	bl	800da2c <pbuf_remove_header>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	2b00      	cmp	r3, #0
 8018fdc:	d10e      	bne.n	8018ffc <ethernet_input+0x104>
        etharp_input(p, netif);
 8018fde:	6839      	ldr	r1, [r7, #0]
 8018fe0:	6878      	ldr	r0, [r7, #4]
 8018fe2:	f7fe f89f 	bl	8017124 <etharp_input>
      break;
 8018fe6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018fe8:	2300      	movs	r3, #0
 8018fea:	e00c      	b.n	8019006 <ethernet_input+0x10e>
    goto free_and_return;
 8018fec:	bf00      	nop
 8018fee:	e006      	b.n	8018ffe <ethernet_input+0x106>
        goto free_and_return;
 8018ff0:	bf00      	nop
 8018ff2:	e004      	b.n	8018ffe <ethernet_input+0x106>
        goto free_and_return;
 8018ff4:	bf00      	nop
 8018ff6:	e002      	b.n	8018ffe <ethernet_input+0x106>
        goto free_and_return;
 8018ff8:	bf00      	nop
 8018ffa:	e000      	b.n	8018ffe <ethernet_input+0x106>
        goto free_and_return;
 8018ffc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8018ffe:	6878      	ldr	r0, [r7, #4]
 8019000:	f7f4 fd9a 	bl	800db38 <pbuf_free>
  return ERR_OK;
 8019004:	2300      	movs	r3, #0
}
 8019006:	4618      	mov	r0, r3
 8019008:	3718      	adds	r7, #24
 801900a:	46bd      	mov	sp, r7
 801900c:	bd80      	pop	{r7, pc}
 801900e:	bf00      	nop
 8019010:	0801fbb8 	.word	0x0801fbb8

08019014 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019014:	b580      	push	{r7, lr}
 8019016:	b086      	sub	sp, #24
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	607a      	str	r2, [r7, #4]
 8019020:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019022:	8c3b      	ldrh	r3, [r7, #32]
 8019024:	4618      	mov	r0, r3
 8019026:	f7f3 f953 	bl	800c2d0 <lwip_htons>
 801902a:	4603      	mov	r3, r0
 801902c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801902e:	210e      	movs	r1, #14
 8019030:	68b8      	ldr	r0, [r7, #8]
 8019032:	f7f4 fceb 	bl	800da0c <pbuf_add_header>
 8019036:	4603      	mov	r3, r0
 8019038:	2b00      	cmp	r3, #0
 801903a:	d125      	bne.n	8019088 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801903c:	68bb      	ldr	r3, [r7, #8]
 801903e:	685b      	ldr	r3, [r3, #4]
 8019040:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019042:	693b      	ldr	r3, [r7, #16]
 8019044:	8afa      	ldrh	r2, [r7, #22]
 8019046:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019048:	693b      	ldr	r3, [r7, #16]
 801904a:	2206      	movs	r2, #6
 801904c:	6839      	ldr	r1, [r7, #0]
 801904e:	4618      	mov	r0, r3
 8019050:	f000 fbba 	bl	80197c8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019054:	693b      	ldr	r3, [r7, #16]
 8019056:	3306      	adds	r3, #6
 8019058:	2206      	movs	r2, #6
 801905a:	6879      	ldr	r1, [r7, #4]
 801905c:	4618      	mov	r0, r3
 801905e:	f000 fbb3 	bl	80197c8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019068:	2b06      	cmp	r3, #6
 801906a:	d006      	beq.n	801907a <ethernet_output+0x66>
 801906c:	4b0a      	ldr	r3, [pc, #40]	; (8019098 <ethernet_output+0x84>)
 801906e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019072:	490a      	ldr	r1, [pc, #40]	; (801909c <ethernet_output+0x88>)
 8019074:	480a      	ldr	r0, [pc, #40]	; (80190a0 <ethernet_output+0x8c>)
 8019076:	f000 faa9 	bl	80195cc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	699b      	ldr	r3, [r3, #24]
 801907e:	68b9      	ldr	r1, [r7, #8]
 8019080:	68f8      	ldr	r0, [r7, #12]
 8019082:	4798      	blx	r3
 8019084:	4603      	mov	r3, r0
 8019086:	e002      	b.n	801908e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019088:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801908a:	f06f 0301 	mvn.w	r3, #1
}
 801908e:	4618      	mov	r0, r3
 8019090:	3718      	adds	r7, #24
 8019092:	46bd      	mov	sp, r7
 8019094:	bd80      	pop	{r7, pc}
 8019096:	bf00      	nop
 8019098:	0801d634 	.word	0x0801d634
 801909c:	0801d66c 	.word	0x0801d66c
 80190a0:	0801d6a0 	.word	0x0801d6a0

080190a4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b086      	sub	sp, #24
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
 80190ac:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	60bb      	str	r3, [r7, #8]
 80190b2:	2304      	movs	r3, #4
 80190b4:	60fb      	str	r3, [r7, #12]
 80190b6:	2300      	movs	r3, #0
 80190b8:	613b      	str	r3, [r7, #16]
 80190ba:	2300      	movs	r3, #0
 80190bc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80190be:	f107 0308 	add.w	r3, r7, #8
 80190c2:	2100      	movs	r1, #0
 80190c4:	4618      	mov	r0, r3
 80190c6:	f7ee fef7 	bl	8007eb8 <osMessageCreate>
 80190ca:	4602      	mov	r2, r0
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	d102      	bne.n	80190de <sys_mbox_new+0x3a>
    return ERR_MEM;
 80190d8:	f04f 33ff 	mov.w	r3, #4294967295
 80190dc:	e000      	b.n	80190e0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80190de:	2300      	movs	r3, #0
}
 80190e0:	4618      	mov	r0, r3
 80190e2:	3718      	adds	r7, #24
 80190e4:	46bd      	mov	sp, r7
 80190e6:	bd80      	pop	{r7, pc}

080190e8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80190e8:	b580      	push	{r7, lr}
 80190ea:	b084      	sub	sp, #16
 80190ec:	af00      	add	r7, sp, #0
 80190ee:	6078      	str	r0, [r7, #4]
 80190f0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	6839      	ldr	r1, [r7, #0]
 80190f8:	2200      	movs	r2, #0
 80190fa:	4618      	mov	r0, r3
 80190fc:	f7ee ff04 	bl	8007f08 <osMessagePut>
 8019100:	4603      	mov	r3, r0
 8019102:	2b00      	cmp	r3, #0
 8019104:	d102      	bne.n	801910c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019106:	2300      	movs	r3, #0
 8019108:	73fb      	strb	r3, [r7, #15]
 801910a:	e001      	b.n	8019110 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801910c:	23ff      	movs	r3, #255	; 0xff
 801910e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019110:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019114:	4618      	mov	r0, r3
 8019116:	3710      	adds	r7, #16
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}

0801911c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801911c:	b580      	push	{r7, lr}
 801911e:	b08c      	sub	sp, #48	; 0x30
 8019120:	af00      	add	r7, sp, #0
 8019122:	61f8      	str	r0, [r7, #28]
 8019124:	61b9      	str	r1, [r7, #24]
 8019126:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019128:	f7ee fd36 	bl	8007b98 <osKernelSysTick>
 801912c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801912e:	697b      	ldr	r3, [r7, #20]
 8019130:	2b00      	cmp	r3, #0
 8019132:	d017      	beq.n	8019164 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019134:	69fb      	ldr	r3, [r7, #28]
 8019136:	6819      	ldr	r1, [r3, #0]
 8019138:	f107 0320 	add.w	r3, r7, #32
 801913c:	697a      	ldr	r2, [r7, #20]
 801913e:	4618      	mov	r0, r3
 8019140:	f7ee ff22 	bl	8007f88 <osMessageGet>

    if(event.status == osEventMessage)
 8019144:	6a3b      	ldr	r3, [r7, #32]
 8019146:	2b10      	cmp	r3, #16
 8019148:	d109      	bne.n	801915e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801914c:	461a      	mov	r2, r3
 801914e:	69bb      	ldr	r3, [r7, #24]
 8019150:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019152:	f7ee fd21 	bl	8007b98 <osKernelSysTick>
 8019156:	4602      	mov	r2, r0
 8019158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801915a:	1ad3      	subs	r3, r2, r3
 801915c:	e019      	b.n	8019192 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801915e:	f04f 33ff 	mov.w	r3, #4294967295
 8019162:	e016      	b.n	8019192 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019164:	69fb      	ldr	r3, [r7, #28]
 8019166:	6819      	ldr	r1, [r3, #0]
 8019168:	463b      	mov	r3, r7
 801916a:	f04f 32ff 	mov.w	r2, #4294967295
 801916e:	4618      	mov	r0, r3
 8019170:	f7ee ff0a 	bl	8007f88 <osMessageGet>
 8019174:	f107 0320 	add.w	r3, r7, #32
 8019178:	463a      	mov	r2, r7
 801917a:	ca07      	ldmia	r2, {r0, r1, r2}
 801917c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019182:	461a      	mov	r2, r3
 8019184:	69bb      	ldr	r3, [r7, #24]
 8019186:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019188:	f7ee fd06 	bl	8007b98 <osKernelSysTick>
 801918c:	4602      	mov	r2, r0
 801918e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019190:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019192:	4618      	mov	r0, r3
 8019194:	3730      	adds	r7, #48	; 0x30
 8019196:	46bd      	mov	sp, r7
 8019198:	bd80      	pop	{r7, pc}

0801919a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801919a:	b480      	push	{r7}
 801919c:	b083      	sub	sp, #12
 801919e:	af00      	add	r7, sp, #0
 80191a0:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	2b00      	cmp	r3, #0
 80191a8:	d101      	bne.n	80191ae <sys_mbox_valid+0x14>
    return 0;
 80191aa:	2300      	movs	r3, #0
 80191ac:	e000      	b.n	80191b0 <sys_mbox_valid+0x16>
  else
    return 1;
 80191ae:	2301      	movs	r3, #1
}
 80191b0:	4618      	mov	r0, r3
 80191b2:	370c      	adds	r7, #12
 80191b4:	46bd      	mov	sp, r7
 80191b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ba:	4770      	bx	lr

080191bc <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80191bc:	b580      	push	{r7, lr}
 80191be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80191c0:	4803      	ldr	r0, [pc, #12]	; (80191d0 <sys_init+0x14>)
 80191c2:	f7ee fd59 	bl	8007c78 <osMutexCreate>
 80191c6:	4603      	mov	r3, r0
 80191c8:	4a02      	ldr	r2, [pc, #8]	; (80191d4 <sys_init+0x18>)
 80191ca:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80191cc:	bf00      	nop
 80191ce:	bd80      	pop	{r7, pc}
 80191d0:	0801fbc8 	.word	0x0801fbc8
 80191d4:	2000d0b8 	.word	0x2000d0b8

080191d8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80191d8:	b580      	push	{r7, lr}
 80191da:	b084      	sub	sp, #16
 80191dc:	af00      	add	r7, sp, #0
 80191de:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80191e0:	2300      	movs	r3, #0
 80191e2:	60bb      	str	r3, [r7, #8]
 80191e4:	2300      	movs	r3, #0
 80191e6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80191e8:	f107 0308 	add.w	r3, r7, #8
 80191ec:	4618      	mov	r0, r3
 80191ee:	f7ee fd43 	bl	8007c78 <osMutexCreate>
 80191f2:	4602      	mov	r2, r0
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	681b      	ldr	r3, [r3, #0]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d102      	bne.n	8019206 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8019200:	f04f 33ff 	mov.w	r3, #4294967295
 8019204:	e000      	b.n	8019208 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019206:	2300      	movs	r3, #0
}
 8019208:	4618      	mov	r0, r3
 801920a:	3710      	adds	r7, #16
 801920c:	46bd      	mov	sp, r7
 801920e:	bd80      	pop	{r7, pc}

08019210 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8019210:	b580      	push	{r7, lr}
 8019212:	b082      	sub	sp, #8
 8019214:	af00      	add	r7, sp, #0
 8019216:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	f04f 31ff 	mov.w	r1, #4294967295
 8019220:	4618      	mov	r0, r3
 8019222:	f7ee fd41 	bl	8007ca8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019226:	bf00      	nop
 8019228:	3708      	adds	r7, #8
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}

0801922e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801922e:	b580      	push	{r7, lr}
 8019230:	b082      	sub	sp, #8
 8019232:	af00      	add	r7, sp, #0
 8019234:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	4618      	mov	r0, r3
 801923c:	f7ee fd82 	bl	8007d44 <osMutexRelease>
}
 8019240:	bf00      	nop
 8019242:	3708      	adds	r7, #8
 8019244:	46bd      	mov	sp, r7
 8019246:	bd80      	pop	{r7, pc}

08019248 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b08c      	sub	sp, #48	; 0x30
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	607a      	str	r2, [r7, #4]
 8019254:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8019256:	f107 0314 	add.w	r3, r7, #20
 801925a:	2200      	movs	r2, #0
 801925c:	601a      	str	r2, [r3, #0]
 801925e:	605a      	str	r2, [r3, #4]
 8019260:	609a      	str	r2, [r3, #8]
 8019262:	60da      	str	r2, [r3, #12]
 8019264:	611a      	str	r2, [r3, #16]
 8019266:	615a      	str	r2, [r3, #20]
 8019268:	619a      	str	r2, [r3, #24]
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	617b      	str	r3, [r7, #20]
 801926e:	68bb      	ldr	r3, [r7, #8]
 8019270:	61bb      	str	r3, [r7, #24]
 8019272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019274:	b21b      	sxth	r3, r3
 8019276:	83bb      	strh	r3, [r7, #28]
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801927c:	f107 0314 	add.w	r3, r7, #20
 8019280:	6879      	ldr	r1, [r7, #4]
 8019282:	4618      	mov	r0, r3
 8019284:	f7ee fc98 	bl	8007bb8 <osThreadCreate>
 8019288:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801928a:	4618      	mov	r0, r3
 801928c:	3730      	adds	r7, #48	; 0x30
 801928e:	46bd      	mov	sp, r7
 8019290:	bd80      	pop	{r7, pc}
	...

08019294 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8019294:	b580      	push	{r7, lr}
 8019296:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8019298:	4b04      	ldr	r3, [pc, #16]	; (80192ac <sys_arch_protect+0x18>)
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	f04f 31ff 	mov.w	r1, #4294967295
 80192a0:	4618      	mov	r0, r3
 80192a2:	f7ee fd01 	bl	8007ca8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80192a6:	2301      	movs	r3, #1
}
 80192a8:	4618      	mov	r0, r3
 80192aa:	bd80      	pop	{r7, pc}
 80192ac:	2000d0b8 	.word	0x2000d0b8

080192b0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80192b0:	b580      	push	{r7, lr}
 80192b2:	b082      	sub	sp, #8
 80192b4:	af00      	add	r7, sp, #0
 80192b6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80192b8:	4b04      	ldr	r3, [pc, #16]	; (80192cc <sys_arch_unprotect+0x1c>)
 80192ba:	681b      	ldr	r3, [r3, #0]
 80192bc:	4618      	mov	r0, r3
 80192be:	f7ee fd41 	bl	8007d44 <osMutexRelease>
}
 80192c2:	bf00      	nop
 80192c4:	3708      	adds	r7, #8
 80192c6:	46bd      	mov	sp, r7
 80192c8:	bd80      	pop	{r7, pc}
 80192ca:	bf00      	nop
 80192cc:	2000d0b8 	.word	0x2000d0b8

080192d0 <atoi>:
 80192d0:	220a      	movs	r2, #10
 80192d2:	2100      	movs	r1, #0
 80192d4:	f000 b8c0 	b.w	8019458 <strtol>

080192d8 <rand>:
 80192d8:	4b16      	ldr	r3, [pc, #88]	; (8019334 <rand+0x5c>)
 80192da:	b510      	push	{r4, lr}
 80192dc:	681c      	ldr	r4, [r3, #0]
 80192de:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80192e0:	b9b3      	cbnz	r3, 8019310 <rand+0x38>
 80192e2:	2018      	movs	r0, #24
 80192e4:	f000 fa9c 	bl	8019820 <malloc>
 80192e8:	4602      	mov	r2, r0
 80192ea:	6320      	str	r0, [r4, #48]	; 0x30
 80192ec:	b920      	cbnz	r0, 80192f8 <rand+0x20>
 80192ee:	4b12      	ldr	r3, [pc, #72]	; (8019338 <rand+0x60>)
 80192f0:	4812      	ldr	r0, [pc, #72]	; (801933c <rand+0x64>)
 80192f2:	2152      	movs	r1, #82	; 0x52
 80192f4:	f000 fa76 	bl	80197e4 <__assert_func>
 80192f8:	4911      	ldr	r1, [pc, #68]	; (8019340 <rand+0x68>)
 80192fa:	4b12      	ldr	r3, [pc, #72]	; (8019344 <rand+0x6c>)
 80192fc:	e9c0 1300 	strd	r1, r3, [r0]
 8019300:	4b11      	ldr	r3, [pc, #68]	; (8019348 <rand+0x70>)
 8019302:	6083      	str	r3, [r0, #8]
 8019304:	230b      	movs	r3, #11
 8019306:	8183      	strh	r3, [r0, #12]
 8019308:	2100      	movs	r1, #0
 801930a:	2001      	movs	r0, #1
 801930c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019310:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8019312:	480e      	ldr	r0, [pc, #56]	; (801934c <rand+0x74>)
 8019314:	690b      	ldr	r3, [r1, #16]
 8019316:	694c      	ldr	r4, [r1, #20]
 8019318:	4a0d      	ldr	r2, [pc, #52]	; (8019350 <rand+0x78>)
 801931a:	4358      	muls	r0, r3
 801931c:	fb02 0004 	mla	r0, r2, r4, r0
 8019320:	fba3 3202 	umull	r3, r2, r3, r2
 8019324:	3301      	adds	r3, #1
 8019326:	eb40 0002 	adc.w	r0, r0, r2
 801932a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801932e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019332:	bd10      	pop	{r4, pc}
 8019334:	200000a4 	.word	0x200000a4
 8019338:	0801fbd0 	.word	0x0801fbd0
 801933c:	0801fbe7 	.word	0x0801fbe7
 8019340:	abcd330e 	.word	0xabcd330e
 8019344:	e66d1234 	.word	0xe66d1234
 8019348:	0005deec 	.word	0x0005deec
 801934c:	5851f42d 	.word	0x5851f42d
 8019350:	4c957f2d 	.word	0x4c957f2d

08019354 <_strtol_l.constprop.0>:
 8019354:	2b01      	cmp	r3, #1
 8019356:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801935a:	d001      	beq.n	8019360 <_strtol_l.constprop.0+0xc>
 801935c:	2b24      	cmp	r3, #36	; 0x24
 801935e:	d906      	bls.n	801936e <_strtol_l.constprop.0+0x1a>
 8019360:	f000 fa06 	bl	8019770 <__errno>
 8019364:	2316      	movs	r3, #22
 8019366:	6003      	str	r3, [r0, #0]
 8019368:	2000      	movs	r0, #0
 801936a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801936e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8019454 <_strtol_l.constprop.0+0x100>
 8019372:	460d      	mov	r5, r1
 8019374:	462e      	mov	r6, r5
 8019376:	f815 4b01 	ldrb.w	r4, [r5], #1
 801937a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 801937e:	f017 0708 	ands.w	r7, r7, #8
 8019382:	d1f7      	bne.n	8019374 <_strtol_l.constprop.0+0x20>
 8019384:	2c2d      	cmp	r4, #45	; 0x2d
 8019386:	d132      	bne.n	80193ee <_strtol_l.constprop.0+0x9a>
 8019388:	782c      	ldrb	r4, [r5, #0]
 801938a:	2701      	movs	r7, #1
 801938c:	1cb5      	adds	r5, r6, #2
 801938e:	2b00      	cmp	r3, #0
 8019390:	d05b      	beq.n	801944a <_strtol_l.constprop.0+0xf6>
 8019392:	2b10      	cmp	r3, #16
 8019394:	d109      	bne.n	80193aa <_strtol_l.constprop.0+0x56>
 8019396:	2c30      	cmp	r4, #48	; 0x30
 8019398:	d107      	bne.n	80193aa <_strtol_l.constprop.0+0x56>
 801939a:	782c      	ldrb	r4, [r5, #0]
 801939c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80193a0:	2c58      	cmp	r4, #88	; 0x58
 80193a2:	d14d      	bne.n	8019440 <_strtol_l.constprop.0+0xec>
 80193a4:	786c      	ldrb	r4, [r5, #1]
 80193a6:	2310      	movs	r3, #16
 80193a8:	3502      	adds	r5, #2
 80193aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80193ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80193b2:	f04f 0e00 	mov.w	lr, #0
 80193b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80193ba:	4676      	mov	r6, lr
 80193bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80193c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80193c4:	f1bc 0f09 	cmp.w	ip, #9
 80193c8:	d816      	bhi.n	80193f8 <_strtol_l.constprop.0+0xa4>
 80193ca:	4664      	mov	r4, ip
 80193cc:	42a3      	cmp	r3, r4
 80193ce:	dd24      	ble.n	801941a <_strtol_l.constprop.0+0xc6>
 80193d0:	f1be 3fff 	cmp.w	lr, #4294967295
 80193d4:	d008      	beq.n	80193e8 <_strtol_l.constprop.0+0x94>
 80193d6:	45b1      	cmp	r9, r6
 80193d8:	d31c      	bcc.n	8019414 <_strtol_l.constprop.0+0xc0>
 80193da:	d101      	bne.n	80193e0 <_strtol_l.constprop.0+0x8c>
 80193dc:	45a2      	cmp	sl, r4
 80193de:	db19      	blt.n	8019414 <_strtol_l.constprop.0+0xc0>
 80193e0:	fb06 4603 	mla	r6, r6, r3, r4
 80193e4:	f04f 0e01 	mov.w	lr, #1
 80193e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193ec:	e7e8      	b.n	80193c0 <_strtol_l.constprop.0+0x6c>
 80193ee:	2c2b      	cmp	r4, #43	; 0x2b
 80193f0:	bf04      	itt	eq
 80193f2:	782c      	ldrbeq	r4, [r5, #0]
 80193f4:	1cb5      	addeq	r5, r6, #2
 80193f6:	e7ca      	b.n	801938e <_strtol_l.constprop.0+0x3a>
 80193f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80193fc:	f1bc 0f19 	cmp.w	ip, #25
 8019400:	d801      	bhi.n	8019406 <_strtol_l.constprop.0+0xb2>
 8019402:	3c37      	subs	r4, #55	; 0x37
 8019404:	e7e2      	b.n	80193cc <_strtol_l.constprop.0+0x78>
 8019406:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801940a:	f1bc 0f19 	cmp.w	ip, #25
 801940e:	d804      	bhi.n	801941a <_strtol_l.constprop.0+0xc6>
 8019410:	3c57      	subs	r4, #87	; 0x57
 8019412:	e7db      	b.n	80193cc <_strtol_l.constprop.0+0x78>
 8019414:	f04f 3eff 	mov.w	lr, #4294967295
 8019418:	e7e6      	b.n	80193e8 <_strtol_l.constprop.0+0x94>
 801941a:	f1be 3fff 	cmp.w	lr, #4294967295
 801941e:	d105      	bne.n	801942c <_strtol_l.constprop.0+0xd8>
 8019420:	2322      	movs	r3, #34	; 0x22
 8019422:	6003      	str	r3, [r0, #0]
 8019424:	4646      	mov	r6, r8
 8019426:	b942      	cbnz	r2, 801943a <_strtol_l.constprop.0+0xe6>
 8019428:	4630      	mov	r0, r6
 801942a:	e79e      	b.n	801936a <_strtol_l.constprop.0+0x16>
 801942c:	b107      	cbz	r7, 8019430 <_strtol_l.constprop.0+0xdc>
 801942e:	4276      	negs	r6, r6
 8019430:	2a00      	cmp	r2, #0
 8019432:	d0f9      	beq.n	8019428 <_strtol_l.constprop.0+0xd4>
 8019434:	f1be 0f00 	cmp.w	lr, #0
 8019438:	d000      	beq.n	801943c <_strtol_l.constprop.0+0xe8>
 801943a:	1e69      	subs	r1, r5, #1
 801943c:	6011      	str	r1, [r2, #0]
 801943e:	e7f3      	b.n	8019428 <_strtol_l.constprop.0+0xd4>
 8019440:	2430      	movs	r4, #48	; 0x30
 8019442:	2b00      	cmp	r3, #0
 8019444:	d1b1      	bne.n	80193aa <_strtol_l.constprop.0+0x56>
 8019446:	2308      	movs	r3, #8
 8019448:	e7af      	b.n	80193aa <_strtol_l.constprop.0+0x56>
 801944a:	2c30      	cmp	r4, #48	; 0x30
 801944c:	d0a5      	beq.n	801939a <_strtol_l.constprop.0+0x46>
 801944e:	230a      	movs	r3, #10
 8019450:	e7ab      	b.n	80193aa <_strtol_l.constprop.0+0x56>
 8019452:	bf00      	nop
 8019454:	0801fc40 	.word	0x0801fc40

08019458 <strtol>:
 8019458:	4613      	mov	r3, r2
 801945a:	460a      	mov	r2, r1
 801945c:	4601      	mov	r1, r0
 801945e:	4802      	ldr	r0, [pc, #8]	; (8019468 <strtol+0x10>)
 8019460:	6800      	ldr	r0, [r0, #0]
 8019462:	f7ff bf77 	b.w	8019354 <_strtol_l.constprop.0>
 8019466:	bf00      	nop
 8019468:	200000a4 	.word	0x200000a4

0801946c <std>:
 801946c:	2300      	movs	r3, #0
 801946e:	b510      	push	{r4, lr}
 8019470:	4604      	mov	r4, r0
 8019472:	e9c0 3300 	strd	r3, r3, [r0]
 8019476:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801947a:	6083      	str	r3, [r0, #8]
 801947c:	8181      	strh	r1, [r0, #12]
 801947e:	6643      	str	r3, [r0, #100]	; 0x64
 8019480:	81c2      	strh	r2, [r0, #14]
 8019482:	6183      	str	r3, [r0, #24]
 8019484:	4619      	mov	r1, r3
 8019486:	2208      	movs	r2, #8
 8019488:	305c      	adds	r0, #92	; 0x5c
 801948a:	f000 f904 	bl	8019696 <memset>
 801948e:	4b05      	ldr	r3, [pc, #20]	; (80194a4 <std+0x38>)
 8019490:	6263      	str	r3, [r4, #36]	; 0x24
 8019492:	4b05      	ldr	r3, [pc, #20]	; (80194a8 <std+0x3c>)
 8019494:	62a3      	str	r3, [r4, #40]	; 0x28
 8019496:	4b05      	ldr	r3, [pc, #20]	; (80194ac <std+0x40>)
 8019498:	62e3      	str	r3, [r4, #44]	; 0x2c
 801949a:	4b05      	ldr	r3, [pc, #20]	; (80194b0 <std+0x44>)
 801949c:	6224      	str	r4, [r4, #32]
 801949e:	6323      	str	r3, [r4, #48]	; 0x30
 80194a0:	bd10      	pop	{r4, pc}
 80194a2:	bf00      	nop
 80194a4:	080195f1 	.word	0x080195f1
 80194a8:	08019613 	.word	0x08019613
 80194ac:	0801964b 	.word	0x0801964b
 80194b0:	0801966f 	.word	0x0801966f

080194b4 <stdio_exit_handler>:
 80194b4:	4a02      	ldr	r2, [pc, #8]	; (80194c0 <stdio_exit_handler+0xc>)
 80194b6:	4903      	ldr	r1, [pc, #12]	; (80194c4 <stdio_exit_handler+0x10>)
 80194b8:	4803      	ldr	r0, [pc, #12]	; (80194c8 <stdio_exit_handler+0x14>)
 80194ba:	f000 b869 	b.w	8019590 <_fwalk_sglue>
 80194be:	bf00      	nop
 80194c0:	2000004c 	.word	0x2000004c
 80194c4:	0801a03d 	.word	0x0801a03d
 80194c8:	20000058 	.word	0x20000058

080194cc <cleanup_stdio>:
 80194cc:	6841      	ldr	r1, [r0, #4]
 80194ce:	4b0c      	ldr	r3, [pc, #48]	; (8019500 <cleanup_stdio+0x34>)
 80194d0:	4299      	cmp	r1, r3
 80194d2:	b510      	push	{r4, lr}
 80194d4:	4604      	mov	r4, r0
 80194d6:	d001      	beq.n	80194dc <cleanup_stdio+0x10>
 80194d8:	f000 fdb0 	bl	801a03c <_fflush_r>
 80194dc:	68a1      	ldr	r1, [r4, #8]
 80194de:	4b09      	ldr	r3, [pc, #36]	; (8019504 <cleanup_stdio+0x38>)
 80194e0:	4299      	cmp	r1, r3
 80194e2:	d002      	beq.n	80194ea <cleanup_stdio+0x1e>
 80194e4:	4620      	mov	r0, r4
 80194e6:	f000 fda9 	bl	801a03c <_fflush_r>
 80194ea:	68e1      	ldr	r1, [r4, #12]
 80194ec:	4b06      	ldr	r3, [pc, #24]	; (8019508 <cleanup_stdio+0x3c>)
 80194ee:	4299      	cmp	r1, r3
 80194f0:	d004      	beq.n	80194fc <cleanup_stdio+0x30>
 80194f2:	4620      	mov	r0, r4
 80194f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80194f8:	f000 bda0 	b.w	801a03c <_fflush_r>
 80194fc:	bd10      	pop	{r4, pc}
 80194fe:	bf00      	nop
 8019500:	2000d0bc 	.word	0x2000d0bc
 8019504:	2000d124 	.word	0x2000d124
 8019508:	2000d18c 	.word	0x2000d18c

0801950c <global_stdio_init.part.0>:
 801950c:	b510      	push	{r4, lr}
 801950e:	4b0b      	ldr	r3, [pc, #44]	; (801953c <global_stdio_init.part.0+0x30>)
 8019510:	4c0b      	ldr	r4, [pc, #44]	; (8019540 <global_stdio_init.part.0+0x34>)
 8019512:	4a0c      	ldr	r2, [pc, #48]	; (8019544 <global_stdio_init.part.0+0x38>)
 8019514:	601a      	str	r2, [r3, #0]
 8019516:	4620      	mov	r0, r4
 8019518:	2200      	movs	r2, #0
 801951a:	2104      	movs	r1, #4
 801951c:	f7ff ffa6 	bl	801946c <std>
 8019520:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019524:	2201      	movs	r2, #1
 8019526:	2109      	movs	r1, #9
 8019528:	f7ff ffa0 	bl	801946c <std>
 801952c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019530:	2202      	movs	r2, #2
 8019532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019536:	2112      	movs	r1, #18
 8019538:	f7ff bf98 	b.w	801946c <std>
 801953c:	2000d1f4 	.word	0x2000d1f4
 8019540:	2000d0bc 	.word	0x2000d0bc
 8019544:	080194b5 	.word	0x080194b5

08019548 <__sfp_lock_acquire>:
 8019548:	4801      	ldr	r0, [pc, #4]	; (8019550 <__sfp_lock_acquire+0x8>)
 801954a:	f000 b93b 	b.w	80197c4 <__retarget_lock_acquire_recursive>
 801954e:	bf00      	nop
 8019550:	2000d1f9 	.word	0x2000d1f9

08019554 <__sfp_lock_release>:
 8019554:	4801      	ldr	r0, [pc, #4]	; (801955c <__sfp_lock_release+0x8>)
 8019556:	f000 b936 	b.w	80197c6 <__retarget_lock_release_recursive>
 801955a:	bf00      	nop
 801955c:	2000d1f9 	.word	0x2000d1f9

08019560 <__sinit>:
 8019560:	b510      	push	{r4, lr}
 8019562:	4604      	mov	r4, r0
 8019564:	f7ff fff0 	bl	8019548 <__sfp_lock_acquire>
 8019568:	6a23      	ldr	r3, [r4, #32]
 801956a:	b11b      	cbz	r3, 8019574 <__sinit+0x14>
 801956c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019570:	f7ff bff0 	b.w	8019554 <__sfp_lock_release>
 8019574:	4b04      	ldr	r3, [pc, #16]	; (8019588 <__sinit+0x28>)
 8019576:	6223      	str	r3, [r4, #32]
 8019578:	4b04      	ldr	r3, [pc, #16]	; (801958c <__sinit+0x2c>)
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	2b00      	cmp	r3, #0
 801957e:	d1f5      	bne.n	801956c <__sinit+0xc>
 8019580:	f7ff ffc4 	bl	801950c <global_stdio_init.part.0>
 8019584:	e7f2      	b.n	801956c <__sinit+0xc>
 8019586:	bf00      	nop
 8019588:	080194cd 	.word	0x080194cd
 801958c:	2000d1f4 	.word	0x2000d1f4

08019590 <_fwalk_sglue>:
 8019590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019594:	4607      	mov	r7, r0
 8019596:	4688      	mov	r8, r1
 8019598:	4614      	mov	r4, r2
 801959a:	2600      	movs	r6, #0
 801959c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80195a0:	f1b9 0901 	subs.w	r9, r9, #1
 80195a4:	d505      	bpl.n	80195b2 <_fwalk_sglue+0x22>
 80195a6:	6824      	ldr	r4, [r4, #0]
 80195a8:	2c00      	cmp	r4, #0
 80195aa:	d1f7      	bne.n	801959c <_fwalk_sglue+0xc>
 80195ac:	4630      	mov	r0, r6
 80195ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80195b2:	89ab      	ldrh	r3, [r5, #12]
 80195b4:	2b01      	cmp	r3, #1
 80195b6:	d907      	bls.n	80195c8 <_fwalk_sglue+0x38>
 80195b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80195bc:	3301      	adds	r3, #1
 80195be:	d003      	beq.n	80195c8 <_fwalk_sglue+0x38>
 80195c0:	4629      	mov	r1, r5
 80195c2:	4638      	mov	r0, r7
 80195c4:	47c0      	blx	r8
 80195c6:	4306      	orrs	r6, r0
 80195c8:	3568      	adds	r5, #104	; 0x68
 80195ca:	e7e9      	b.n	80195a0 <_fwalk_sglue+0x10>

080195cc <iprintf>:
 80195cc:	b40f      	push	{r0, r1, r2, r3}
 80195ce:	b507      	push	{r0, r1, r2, lr}
 80195d0:	4906      	ldr	r1, [pc, #24]	; (80195ec <iprintf+0x20>)
 80195d2:	ab04      	add	r3, sp, #16
 80195d4:	6808      	ldr	r0, [r1, #0]
 80195d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80195da:	6881      	ldr	r1, [r0, #8]
 80195dc:	9301      	str	r3, [sp, #4]
 80195de:	f000 f9fd 	bl	80199dc <_vfiprintf_r>
 80195e2:	b003      	add	sp, #12
 80195e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80195e8:	b004      	add	sp, #16
 80195ea:	4770      	bx	lr
 80195ec:	200000a4 	.word	0x200000a4

080195f0 <__sread>:
 80195f0:	b510      	push	{r4, lr}
 80195f2:	460c      	mov	r4, r1
 80195f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80195f8:	f000 f896 	bl	8019728 <_read_r>
 80195fc:	2800      	cmp	r0, #0
 80195fe:	bfab      	itete	ge
 8019600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019602:	89a3      	ldrhlt	r3, [r4, #12]
 8019604:	181b      	addge	r3, r3, r0
 8019606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801960a:	bfac      	ite	ge
 801960c:	6563      	strge	r3, [r4, #84]	; 0x54
 801960e:	81a3      	strhlt	r3, [r4, #12]
 8019610:	bd10      	pop	{r4, pc}

08019612 <__swrite>:
 8019612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019616:	461f      	mov	r7, r3
 8019618:	898b      	ldrh	r3, [r1, #12]
 801961a:	05db      	lsls	r3, r3, #23
 801961c:	4605      	mov	r5, r0
 801961e:	460c      	mov	r4, r1
 8019620:	4616      	mov	r6, r2
 8019622:	d505      	bpl.n	8019630 <__swrite+0x1e>
 8019624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019628:	2302      	movs	r3, #2
 801962a:	2200      	movs	r2, #0
 801962c:	f000 f86a 	bl	8019704 <_lseek_r>
 8019630:	89a3      	ldrh	r3, [r4, #12]
 8019632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801963a:	81a3      	strh	r3, [r4, #12]
 801963c:	4632      	mov	r2, r6
 801963e:	463b      	mov	r3, r7
 8019640:	4628      	mov	r0, r5
 8019642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019646:	f000 b881 	b.w	801974c <_write_r>

0801964a <__sseek>:
 801964a:	b510      	push	{r4, lr}
 801964c:	460c      	mov	r4, r1
 801964e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019652:	f000 f857 	bl	8019704 <_lseek_r>
 8019656:	1c43      	adds	r3, r0, #1
 8019658:	89a3      	ldrh	r3, [r4, #12]
 801965a:	bf15      	itete	ne
 801965c:	6560      	strne	r0, [r4, #84]	; 0x54
 801965e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019666:	81a3      	strheq	r3, [r4, #12]
 8019668:	bf18      	it	ne
 801966a:	81a3      	strhne	r3, [r4, #12]
 801966c:	bd10      	pop	{r4, pc}

0801966e <__sclose>:
 801966e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019672:	f000 b837 	b.w	80196e4 <_close_r>

08019676 <memcmp>:
 8019676:	b510      	push	{r4, lr}
 8019678:	3901      	subs	r1, #1
 801967a:	4402      	add	r2, r0
 801967c:	4290      	cmp	r0, r2
 801967e:	d101      	bne.n	8019684 <memcmp+0xe>
 8019680:	2000      	movs	r0, #0
 8019682:	e005      	b.n	8019690 <memcmp+0x1a>
 8019684:	7803      	ldrb	r3, [r0, #0]
 8019686:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801968a:	42a3      	cmp	r3, r4
 801968c:	d001      	beq.n	8019692 <memcmp+0x1c>
 801968e:	1b18      	subs	r0, r3, r4
 8019690:	bd10      	pop	{r4, pc}
 8019692:	3001      	adds	r0, #1
 8019694:	e7f2      	b.n	801967c <memcmp+0x6>

08019696 <memset>:
 8019696:	4402      	add	r2, r0
 8019698:	4603      	mov	r3, r0
 801969a:	4293      	cmp	r3, r2
 801969c:	d100      	bne.n	80196a0 <memset+0xa>
 801969e:	4770      	bx	lr
 80196a0:	f803 1b01 	strb.w	r1, [r3], #1
 80196a4:	e7f9      	b.n	801969a <memset+0x4>

080196a6 <strchr>:
 80196a6:	b2c9      	uxtb	r1, r1
 80196a8:	4603      	mov	r3, r0
 80196aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196ae:	b11a      	cbz	r2, 80196b8 <strchr+0x12>
 80196b0:	428a      	cmp	r2, r1
 80196b2:	d1f9      	bne.n	80196a8 <strchr+0x2>
 80196b4:	4618      	mov	r0, r3
 80196b6:	4770      	bx	lr
 80196b8:	2900      	cmp	r1, #0
 80196ba:	bf18      	it	ne
 80196bc:	2300      	movne	r3, #0
 80196be:	e7f9      	b.n	80196b4 <strchr+0xe>

080196c0 <strncmp>:
 80196c0:	b510      	push	{r4, lr}
 80196c2:	b16a      	cbz	r2, 80196e0 <strncmp+0x20>
 80196c4:	3901      	subs	r1, #1
 80196c6:	1884      	adds	r4, r0, r2
 80196c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196cc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80196d0:	429a      	cmp	r2, r3
 80196d2:	d103      	bne.n	80196dc <strncmp+0x1c>
 80196d4:	42a0      	cmp	r0, r4
 80196d6:	d001      	beq.n	80196dc <strncmp+0x1c>
 80196d8:	2a00      	cmp	r2, #0
 80196da:	d1f5      	bne.n	80196c8 <strncmp+0x8>
 80196dc:	1ad0      	subs	r0, r2, r3
 80196de:	bd10      	pop	{r4, pc}
 80196e0:	4610      	mov	r0, r2
 80196e2:	e7fc      	b.n	80196de <strncmp+0x1e>

080196e4 <_close_r>:
 80196e4:	b538      	push	{r3, r4, r5, lr}
 80196e6:	4d06      	ldr	r5, [pc, #24]	; (8019700 <_close_r+0x1c>)
 80196e8:	2300      	movs	r3, #0
 80196ea:	4604      	mov	r4, r0
 80196ec:	4608      	mov	r0, r1
 80196ee:	602b      	str	r3, [r5, #0]
 80196f0:	f7e7 ff9b 	bl	800162a <_close>
 80196f4:	1c43      	adds	r3, r0, #1
 80196f6:	d102      	bne.n	80196fe <_close_r+0x1a>
 80196f8:	682b      	ldr	r3, [r5, #0]
 80196fa:	b103      	cbz	r3, 80196fe <_close_r+0x1a>
 80196fc:	6023      	str	r3, [r4, #0]
 80196fe:	bd38      	pop	{r3, r4, r5, pc}
 8019700:	2000d0b4 	.word	0x2000d0b4

08019704 <_lseek_r>:
 8019704:	b538      	push	{r3, r4, r5, lr}
 8019706:	4d07      	ldr	r5, [pc, #28]	; (8019724 <_lseek_r+0x20>)
 8019708:	4604      	mov	r4, r0
 801970a:	4608      	mov	r0, r1
 801970c:	4611      	mov	r1, r2
 801970e:	2200      	movs	r2, #0
 8019710:	602a      	str	r2, [r5, #0]
 8019712:	461a      	mov	r2, r3
 8019714:	f7e7 ffb0 	bl	8001678 <_lseek>
 8019718:	1c43      	adds	r3, r0, #1
 801971a:	d102      	bne.n	8019722 <_lseek_r+0x1e>
 801971c:	682b      	ldr	r3, [r5, #0]
 801971e:	b103      	cbz	r3, 8019722 <_lseek_r+0x1e>
 8019720:	6023      	str	r3, [r4, #0]
 8019722:	bd38      	pop	{r3, r4, r5, pc}
 8019724:	2000d0b4 	.word	0x2000d0b4

08019728 <_read_r>:
 8019728:	b538      	push	{r3, r4, r5, lr}
 801972a:	4d07      	ldr	r5, [pc, #28]	; (8019748 <_read_r+0x20>)
 801972c:	4604      	mov	r4, r0
 801972e:	4608      	mov	r0, r1
 8019730:	4611      	mov	r1, r2
 8019732:	2200      	movs	r2, #0
 8019734:	602a      	str	r2, [r5, #0]
 8019736:	461a      	mov	r2, r3
 8019738:	f7e7 ff3e 	bl	80015b8 <_read>
 801973c:	1c43      	adds	r3, r0, #1
 801973e:	d102      	bne.n	8019746 <_read_r+0x1e>
 8019740:	682b      	ldr	r3, [r5, #0]
 8019742:	b103      	cbz	r3, 8019746 <_read_r+0x1e>
 8019744:	6023      	str	r3, [r4, #0]
 8019746:	bd38      	pop	{r3, r4, r5, pc}
 8019748:	2000d0b4 	.word	0x2000d0b4

0801974c <_write_r>:
 801974c:	b538      	push	{r3, r4, r5, lr}
 801974e:	4d07      	ldr	r5, [pc, #28]	; (801976c <_write_r+0x20>)
 8019750:	4604      	mov	r4, r0
 8019752:	4608      	mov	r0, r1
 8019754:	4611      	mov	r1, r2
 8019756:	2200      	movs	r2, #0
 8019758:	602a      	str	r2, [r5, #0]
 801975a:	461a      	mov	r2, r3
 801975c:	f7e7 ff49 	bl	80015f2 <_write>
 8019760:	1c43      	adds	r3, r0, #1
 8019762:	d102      	bne.n	801976a <_write_r+0x1e>
 8019764:	682b      	ldr	r3, [r5, #0]
 8019766:	b103      	cbz	r3, 801976a <_write_r+0x1e>
 8019768:	6023      	str	r3, [r4, #0]
 801976a:	bd38      	pop	{r3, r4, r5, pc}
 801976c:	2000d0b4 	.word	0x2000d0b4

08019770 <__errno>:
 8019770:	4b01      	ldr	r3, [pc, #4]	; (8019778 <__errno+0x8>)
 8019772:	6818      	ldr	r0, [r3, #0]
 8019774:	4770      	bx	lr
 8019776:	bf00      	nop
 8019778:	200000a4 	.word	0x200000a4

0801977c <__libc_init_array>:
 801977c:	b570      	push	{r4, r5, r6, lr}
 801977e:	4d0d      	ldr	r5, [pc, #52]	; (80197b4 <__libc_init_array+0x38>)
 8019780:	4c0d      	ldr	r4, [pc, #52]	; (80197b8 <__libc_init_array+0x3c>)
 8019782:	1b64      	subs	r4, r4, r5
 8019784:	10a4      	asrs	r4, r4, #2
 8019786:	2600      	movs	r6, #0
 8019788:	42a6      	cmp	r6, r4
 801978a:	d109      	bne.n	80197a0 <__libc_init_array+0x24>
 801978c:	4d0b      	ldr	r5, [pc, #44]	; (80197bc <__libc_init_array+0x40>)
 801978e:	4c0c      	ldr	r4, [pc, #48]	; (80197c0 <__libc_init_array+0x44>)
 8019790:	f000 fe50 	bl	801a434 <_init>
 8019794:	1b64      	subs	r4, r4, r5
 8019796:	10a4      	asrs	r4, r4, #2
 8019798:	2600      	movs	r6, #0
 801979a:	42a6      	cmp	r6, r4
 801979c:	d105      	bne.n	80197aa <__libc_init_array+0x2e>
 801979e:	bd70      	pop	{r4, r5, r6, pc}
 80197a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80197a4:	4798      	blx	r3
 80197a6:	3601      	adds	r6, #1
 80197a8:	e7ee      	b.n	8019788 <__libc_init_array+0xc>
 80197aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80197ae:	4798      	blx	r3
 80197b0:	3601      	adds	r6, #1
 80197b2:	e7f2      	b.n	801979a <__libc_init_array+0x1e>
 80197b4:	0801fdb8 	.word	0x0801fdb8
 80197b8:	0801fdb8 	.word	0x0801fdb8
 80197bc:	0801fdb8 	.word	0x0801fdb8
 80197c0:	0801fdbc 	.word	0x0801fdbc

080197c4 <__retarget_lock_acquire_recursive>:
 80197c4:	4770      	bx	lr

080197c6 <__retarget_lock_release_recursive>:
 80197c6:	4770      	bx	lr

080197c8 <memcpy>:
 80197c8:	440a      	add	r2, r1
 80197ca:	4291      	cmp	r1, r2
 80197cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80197d0:	d100      	bne.n	80197d4 <memcpy+0xc>
 80197d2:	4770      	bx	lr
 80197d4:	b510      	push	{r4, lr}
 80197d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80197de:	4291      	cmp	r1, r2
 80197e0:	d1f9      	bne.n	80197d6 <memcpy+0xe>
 80197e2:	bd10      	pop	{r4, pc}

080197e4 <__assert_func>:
 80197e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80197e6:	4614      	mov	r4, r2
 80197e8:	461a      	mov	r2, r3
 80197ea:	4b09      	ldr	r3, [pc, #36]	; (8019810 <__assert_func+0x2c>)
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	4605      	mov	r5, r0
 80197f0:	68d8      	ldr	r0, [r3, #12]
 80197f2:	b14c      	cbz	r4, 8019808 <__assert_func+0x24>
 80197f4:	4b07      	ldr	r3, [pc, #28]	; (8019814 <__assert_func+0x30>)
 80197f6:	9100      	str	r1, [sp, #0]
 80197f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80197fc:	4906      	ldr	r1, [pc, #24]	; (8019818 <__assert_func+0x34>)
 80197fe:	462b      	mov	r3, r5
 8019800:	f000 fc44 	bl	801a08c <fiprintf>
 8019804:	f000 fcfa 	bl	801a1fc <abort>
 8019808:	4b04      	ldr	r3, [pc, #16]	; (801981c <__assert_func+0x38>)
 801980a:	461c      	mov	r4, r3
 801980c:	e7f3      	b.n	80197f6 <__assert_func+0x12>
 801980e:	bf00      	nop
 8019810:	200000a4 	.word	0x200000a4
 8019814:	0801fd40 	.word	0x0801fd40
 8019818:	0801fd4d 	.word	0x0801fd4d
 801981c:	0801fd7b 	.word	0x0801fd7b

08019820 <malloc>:
 8019820:	4b02      	ldr	r3, [pc, #8]	; (801982c <malloc+0xc>)
 8019822:	4601      	mov	r1, r0
 8019824:	6818      	ldr	r0, [r3, #0]
 8019826:	f000 b823 	b.w	8019870 <_malloc_r>
 801982a:	bf00      	nop
 801982c:	200000a4 	.word	0x200000a4

08019830 <sbrk_aligned>:
 8019830:	b570      	push	{r4, r5, r6, lr}
 8019832:	4e0e      	ldr	r6, [pc, #56]	; (801986c <sbrk_aligned+0x3c>)
 8019834:	460c      	mov	r4, r1
 8019836:	6831      	ldr	r1, [r6, #0]
 8019838:	4605      	mov	r5, r0
 801983a:	b911      	cbnz	r1, 8019842 <sbrk_aligned+0x12>
 801983c:	f000 fcce 	bl	801a1dc <_sbrk_r>
 8019840:	6030      	str	r0, [r6, #0]
 8019842:	4621      	mov	r1, r4
 8019844:	4628      	mov	r0, r5
 8019846:	f000 fcc9 	bl	801a1dc <_sbrk_r>
 801984a:	1c43      	adds	r3, r0, #1
 801984c:	d00a      	beq.n	8019864 <sbrk_aligned+0x34>
 801984e:	1cc4      	adds	r4, r0, #3
 8019850:	f024 0403 	bic.w	r4, r4, #3
 8019854:	42a0      	cmp	r0, r4
 8019856:	d007      	beq.n	8019868 <sbrk_aligned+0x38>
 8019858:	1a21      	subs	r1, r4, r0
 801985a:	4628      	mov	r0, r5
 801985c:	f000 fcbe 	bl	801a1dc <_sbrk_r>
 8019860:	3001      	adds	r0, #1
 8019862:	d101      	bne.n	8019868 <sbrk_aligned+0x38>
 8019864:	f04f 34ff 	mov.w	r4, #4294967295
 8019868:	4620      	mov	r0, r4
 801986a:	bd70      	pop	{r4, r5, r6, pc}
 801986c:	2000d200 	.word	0x2000d200

08019870 <_malloc_r>:
 8019870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019874:	1ccd      	adds	r5, r1, #3
 8019876:	f025 0503 	bic.w	r5, r5, #3
 801987a:	3508      	adds	r5, #8
 801987c:	2d0c      	cmp	r5, #12
 801987e:	bf38      	it	cc
 8019880:	250c      	movcc	r5, #12
 8019882:	2d00      	cmp	r5, #0
 8019884:	4607      	mov	r7, r0
 8019886:	db01      	blt.n	801988c <_malloc_r+0x1c>
 8019888:	42a9      	cmp	r1, r5
 801988a:	d905      	bls.n	8019898 <_malloc_r+0x28>
 801988c:	230c      	movs	r3, #12
 801988e:	603b      	str	r3, [r7, #0]
 8019890:	2600      	movs	r6, #0
 8019892:	4630      	mov	r0, r6
 8019894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019898:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801996c <_malloc_r+0xfc>
 801989c:	f000 f868 	bl	8019970 <__malloc_lock>
 80198a0:	f8d8 3000 	ldr.w	r3, [r8]
 80198a4:	461c      	mov	r4, r3
 80198a6:	bb5c      	cbnz	r4, 8019900 <_malloc_r+0x90>
 80198a8:	4629      	mov	r1, r5
 80198aa:	4638      	mov	r0, r7
 80198ac:	f7ff ffc0 	bl	8019830 <sbrk_aligned>
 80198b0:	1c43      	adds	r3, r0, #1
 80198b2:	4604      	mov	r4, r0
 80198b4:	d155      	bne.n	8019962 <_malloc_r+0xf2>
 80198b6:	f8d8 4000 	ldr.w	r4, [r8]
 80198ba:	4626      	mov	r6, r4
 80198bc:	2e00      	cmp	r6, #0
 80198be:	d145      	bne.n	801994c <_malloc_r+0xdc>
 80198c0:	2c00      	cmp	r4, #0
 80198c2:	d048      	beq.n	8019956 <_malloc_r+0xe6>
 80198c4:	6823      	ldr	r3, [r4, #0]
 80198c6:	4631      	mov	r1, r6
 80198c8:	4638      	mov	r0, r7
 80198ca:	eb04 0903 	add.w	r9, r4, r3
 80198ce:	f000 fc85 	bl	801a1dc <_sbrk_r>
 80198d2:	4581      	cmp	r9, r0
 80198d4:	d13f      	bne.n	8019956 <_malloc_r+0xe6>
 80198d6:	6821      	ldr	r1, [r4, #0]
 80198d8:	1a6d      	subs	r5, r5, r1
 80198da:	4629      	mov	r1, r5
 80198dc:	4638      	mov	r0, r7
 80198de:	f7ff ffa7 	bl	8019830 <sbrk_aligned>
 80198e2:	3001      	adds	r0, #1
 80198e4:	d037      	beq.n	8019956 <_malloc_r+0xe6>
 80198e6:	6823      	ldr	r3, [r4, #0]
 80198e8:	442b      	add	r3, r5
 80198ea:	6023      	str	r3, [r4, #0]
 80198ec:	f8d8 3000 	ldr.w	r3, [r8]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d038      	beq.n	8019966 <_malloc_r+0xf6>
 80198f4:	685a      	ldr	r2, [r3, #4]
 80198f6:	42a2      	cmp	r2, r4
 80198f8:	d12b      	bne.n	8019952 <_malloc_r+0xe2>
 80198fa:	2200      	movs	r2, #0
 80198fc:	605a      	str	r2, [r3, #4]
 80198fe:	e00f      	b.n	8019920 <_malloc_r+0xb0>
 8019900:	6822      	ldr	r2, [r4, #0]
 8019902:	1b52      	subs	r2, r2, r5
 8019904:	d41f      	bmi.n	8019946 <_malloc_r+0xd6>
 8019906:	2a0b      	cmp	r2, #11
 8019908:	d917      	bls.n	801993a <_malloc_r+0xca>
 801990a:	1961      	adds	r1, r4, r5
 801990c:	42a3      	cmp	r3, r4
 801990e:	6025      	str	r5, [r4, #0]
 8019910:	bf18      	it	ne
 8019912:	6059      	strne	r1, [r3, #4]
 8019914:	6863      	ldr	r3, [r4, #4]
 8019916:	bf08      	it	eq
 8019918:	f8c8 1000 	streq.w	r1, [r8]
 801991c:	5162      	str	r2, [r4, r5]
 801991e:	604b      	str	r3, [r1, #4]
 8019920:	4638      	mov	r0, r7
 8019922:	f104 060b 	add.w	r6, r4, #11
 8019926:	f000 f829 	bl	801997c <__malloc_unlock>
 801992a:	f026 0607 	bic.w	r6, r6, #7
 801992e:	1d23      	adds	r3, r4, #4
 8019930:	1af2      	subs	r2, r6, r3
 8019932:	d0ae      	beq.n	8019892 <_malloc_r+0x22>
 8019934:	1b9b      	subs	r3, r3, r6
 8019936:	50a3      	str	r3, [r4, r2]
 8019938:	e7ab      	b.n	8019892 <_malloc_r+0x22>
 801993a:	42a3      	cmp	r3, r4
 801993c:	6862      	ldr	r2, [r4, #4]
 801993e:	d1dd      	bne.n	80198fc <_malloc_r+0x8c>
 8019940:	f8c8 2000 	str.w	r2, [r8]
 8019944:	e7ec      	b.n	8019920 <_malloc_r+0xb0>
 8019946:	4623      	mov	r3, r4
 8019948:	6864      	ldr	r4, [r4, #4]
 801994a:	e7ac      	b.n	80198a6 <_malloc_r+0x36>
 801994c:	4634      	mov	r4, r6
 801994e:	6876      	ldr	r6, [r6, #4]
 8019950:	e7b4      	b.n	80198bc <_malloc_r+0x4c>
 8019952:	4613      	mov	r3, r2
 8019954:	e7cc      	b.n	80198f0 <_malloc_r+0x80>
 8019956:	230c      	movs	r3, #12
 8019958:	603b      	str	r3, [r7, #0]
 801995a:	4638      	mov	r0, r7
 801995c:	f000 f80e 	bl	801997c <__malloc_unlock>
 8019960:	e797      	b.n	8019892 <_malloc_r+0x22>
 8019962:	6025      	str	r5, [r4, #0]
 8019964:	e7dc      	b.n	8019920 <_malloc_r+0xb0>
 8019966:	605b      	str	r3, [r3, #4]
 8019968:	deff      	udf	#255	; 0xff
 801996a:	bf00      	nop
 801996c:	2000d1fc 	.word	0x2000d1fc

08019970 <__malloc_lock>:
 8019970:	4801      	ldr	r0, [pc, #4]	; (8019978 <__malloc_lock+0x8>)
 8019972:	f7ff bf27 	b.w	80197c4 <__retarget_lock_acquire_recursive>
 8019976:	bf00      	nop
 8019978:	2000d1f8 	.word	0x2000d1f8

0801997c <__malloc_unlock>:
 801997c:	4801      	ldr	r0, [pc, #4]	; (8019984 <__malloc_unlock+0x8>)
 801997e:	f7ff bf22 	b.w	80197c6 <__retarget_lock_release_recursive>
 8019982:	bf00      	nop
 8019984:	2000d1f8 	.word	0x2000d1f8

08019988 <__sfputc_r>:
 8019988:	6893      	ldr	r3, [r2, #8]
 801998a:	3b01      	subs	r3, #1
 801998c:	2b00      	cmp	r3, #0
 801998e:	b410      	push	{r4}
 8019990:	6093      	str	r3, [r2, #8]
 8019992:	da08      	bge.n	80199a6 <__sfputc_r+0x1e>
 8019994:	6994      	ldr	r4, [r2, #24]
 8019996:	42a3      	cmp	r3, r4
 8019998:	db01      	blt.n	801999e <__sfputc_r+0x16>
 801999a:	290a      	cmp	r1, #10
 801999c:	d103      	bne.n	80199a6 <__sfputc_r+0x1e>
 801999e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199a2:	f000 bb85 	b.w	801a0b0 <__swbuf_r>
 80199a6:	6813      	ldr	r3, [r2, #0]
 80199a8:	1c58      	adds	r0, r3, #1
 80199aa:	6010      	str	r0, [r2, #0]
 80199ac:	7019      	strb	r1, [r3, #0]
 80199ae:	4608      	mov	r0, r1
 80199b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80199b4:	4770      	bx	lr

080199b6 <__sfputs_r>:
 80199b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b8:	4606      	mov	r6, r0
 80199ba:	460f      	mov	r7, r1
 80199bc:	4614      	mov	r4, r2
 80199be:	18d5      	adds	r5, r2, r3
 80199c0:	42ac      	cmp	r4, r5
 80199c2:	d101      	bne.n	80199c8 <__sfputs_r+0x12>
 80199c4:	2000      	movs	r0, #0
 80199c6:	e007      	b.n	80199d8 <__sfputs_r+0x22>
 80199c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80199cc:	463a      	mov	r2, r7
 80199ce:	4630      	mov	r0, r6
 80199d0:	f7ff ffda 	bl	8019988 <__sfputc_r>
 80199d4:	1c43      	adds	r3, r0, #1
 80199d6:	d1f3      	bne.n	80199c0 <__sfputs_r+0xa>
 80199d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080199dc <_vfiprintf_r>:
 80199dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199e0:	460d      	mov	r5, r1
 80199e2:	b09d      	sub	sp, #116	; 0x74
 80199e4:	4614      	mov	r4, r2
 80199e6:	4698      	mov	r8, r3
 80199e8:	4606      	mov	r6, r0
 80199ea:	b118      	cbz	r0, 80199f4 <_vfiprintf_r+0x18>
 80199ec:	6a03      	ldr	r3, [r0, #32]
 80199ee:	b90b      	cbnz	r3, 80199f4 <_vfiprintf_r+0x18>
 80199f0:	f7ff fdb6 	bl	8019560 <__sinit>
 80199f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199f6:	07d9      	lsls	r1, r3, #31
 80199f8:	d405      	bmi.n	8019a06 <_vfiprintf_r+0x2a>
 80199fa:	89ab      	ldrh	r3, [r5, #12]
 80199fc:	059a      	lsls	r2, r3, #22
 80199fe:	d402      	bmi.n	8019a06 <_vfiprintf_r+0x2a>
 8019a00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a02:	f7ff fedf 	bl	80197c4 <__retarget_lock_acquire_recursive>
 8019a06:	89ab      	ldrh	r3, [r5, #12]
 8019a08:	071b      	lsls	r3, r3, #28
 8019a0a:	d501      	bpl.n	8019a10 <_vfiprintf_r+0x34>
 8019a0c:	692b      	ldr	r3, [r5, #16]
 8019a0e:	b99b      	cbnz	r3, 8019a38 <_vfiprintf_r+0x5c>
 8019a10:	4629      	mov	r1, r5
 8019a12:	4630      	mov	r0, r6
 8019a14:	f000 fb8a 	bl	801a12c <__swsetup_r>
 8019a18:	b170      	cbz	r0, 8019a38 <_vfiprintf_r+0x5c>
 8019a1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019a1c:	07dc      	lsls	r4, r3, #31
 8019a1e:	d504      	bpl.n	8019a2a <_vfiprintf_r+0x4e>
 8019a20:	f04f 30ff 	mov.w	r0, #4294967295
 8019a24:	b01d      	add	sp, #116	; 0x74
 8019a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a2a:	89ab      	ldrh	r3, [r5, #12]
 8019a2c:	0598      	lsls	r0, r3, #22
 8019a2e:	d4f7      	bmi.n	8019a20 <_vfiprintf_r+0x44>
 8019a30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019a32:	f7ff fec8 	bl	80197c6 <__retarget_lock_release_recursive>
 8019a36:	e7f3      	b.n	8019a20 <_vfiprintf_r+0x44>
 8019a38:	2300      	movs	r3, #0
 8019a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8019a3c:	2320      	movs	r3, #32
 8019a3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019a42:	f8cd 800c 	str.w	r8, [sp, #12]
 8019a46:	2330      	movs	r3, #48	; 0x30
 8019a48:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019bfc <_vfiprintf_r+0x220>
 8019a4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019a50:	f04f 0901 	mov.w	r9, #1
 8019a54:	4623      	mov	r3, r4
 8019a56:	469a      	mov	sl, r3
 8019a58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019a5c:	b10a      	cbz	r2, 8019a62 <_vfiprintf_r+0x86>
 8019a5e:	2a25      	cmp	r2, #37	; 0x25
 8019a60:	d1f9      	bne.n	8019a56 <_vfiprintf_r+0x7a>
 8019a62:	ebba 0b04 	subs.w	fp, sl, r4
 8019a66:	d00b      	beq.n	8019a80 <_vfiprintf_r+0xa4>
 8019a68:	465b      	mov	r3, fp
 8019a6a:	4622      	mov	r2, r4
 8019a6c:	4629      	mov	r1, r5
 8019a6e:	4630      	mov	r0, r6
 8019a70:	f7ff ffa1 	bl	80199b6 <__sfputs_r>
 8019a74:	3001      	adds	r0, #1
 8019a76:	f000 80a9 	beq.w	8019bcc <_vfiprintf_r+0x1f0>
 8019a7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019a7c:	445a      	add	r2, fp
 8019a7e:	9209      	str	r2, [sp, #36]	; 0x24
 8019a80:	f89a 3000 	ldrb.w	r3, [sl]
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	f000 80a1 	beq.w	8019bcc <_vfiprintf_r+0x1f0>
 8019a8a:	2300      	movs	r3, #0
 8019a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8019a90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019a94:	f10a 0a01 	add.w	sl, sl, #1
 8019a98:	9304      	str	r3, [sp, #16]
 8019a9a:	9307      	str	r3, [sp, #28]
 8019a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8019aa2:	4654      	mov	r4, sl
 8019aa4:	2205      	movs	r2, #5
 8019aa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019aaa:	4854      	ldr	r0, [pc, #336]	; (8019bfc <_vfiprintf_r+0x220>)
 8019aac:	f7e6 fbc8 	bl	8000240 <memchr>
 8019ab0:	9a04      	ldr	r2, [sp, #16]
 8019ab2:	b9d8      	cbnz	r0, 8019aec <_vfiprintf_r+0x110>
 8019ab4:	06d1      	lsls	r1, r2, #27
 8019ab6:	bf44      	itt	mi
 8019ab8:	2320      	movmi	r3, #32
 8019aba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019abe:	0713      	lsls	r3, r2, #28
 8019ac0:	bf44      	itt	mi
 8019ac2:	232b      	movmi	r3, #43	; 0x2b
 8019ac4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ac8:	f89a 3000 	ldrb.w	r3, [sl]
 8019acc:	2b2a      	cmp	r3, #42	; 0x2a
 8019ace:	d015      	beq.n	8019afc <_vfiprintf_r+0x120>
 8019ad0:	9a07      	ldr	r2, [sp, #28]
 8019ad2:	4654      	mov	r4, sl
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	f04f 0c0a 	mov.w	ip, #10
 8019ada:	4621      	mov	r1, r4
 8019adc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ae0:	3b30      	subs	r3, #48	; 0x30
 8019ae2:	2b09      	cmp	r3, #9
 8019ae4:	d94d      	bls.n	8019b82 <_vfiprintf_r+0x1a6>
 8019ae6:	b1b0      	cbz	r0, 8019b16 <_vfiprintf_r+0x13a>
 8019ae8:	9207      	str	r2, [sp, #28]
 8019aea:	e014      	b.n	8019b16 <_vfiprintf_r+0x13a>
 8019aec:	eba0 0308 	sub.w	r3, r0, r8
 8019af0:	fa09 f303 	lsl.w	r3, r9, r3
 8019af4:	4313      	orrs	r3, r2
 8019af6:	9304      	str	r3, [sp, #16]
 8019af8:	46a2      	mov	sl, r4
 8019afa:	e7d2      	b.n	8019aa2 <_vfiprintf_r+0xc6>
 8019afc:	9b03      	ldr	r3, [sp, #12]
 8019afe:	1d19      	adds	r1, r3, #4
 8019b00:	681b      	ldr	r3, [r3, #0]
 8019b02:	9103      	str	r1, [sp, #12]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	bfbb      	ittet	lt
 8019b08:	425b      	neglt	r3, r3
 8019b0a:	f042 0202 	orrlt.w	r2, r2, #2
 8019b0e:	9307      	strge	r3, [sp, #28]
 8019b10:	9307      	strlt	r3, [sp, #28]
 8019b12:	bfb8      	it	lt
 8019b14:	9204      	strlt	r2, [sp, #16]
 8019b16:	7823      	ldrb	r3, [r4, #0]
 8019b18:	2b2e      	cmp	r3, #46	; 0x2e
 8019b1a:	d10c      	bne.n	8019b36 <_vfiprintf_r+0x15a>
 8019b1c:	7863      	ldrb	r3, [r4, #1]
 8019b1e:	2b2a      	cmp	r3, #42	; 0x2a
 8019b20:	d134      	bne.n	8019b8c <_vfiprintf_r+0x1b0>
 8019b22:	9b03      	ldr	r3, [sp, #12]
 8019b24:	1d1a      	adds	r2, r3, #4
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	9203      	str	r2, [sp, #12]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	bfb8      	it	lt
 8019b2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019b32:	3402      	adds	r4, #2
 8019b34:	9305      	str	r3, [sp, #20]
 8019b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019c0c <_vfiprintf_r+0x230>
 8019b3a:	7821      	ldrb	r1, [r4, #0]
 8019b3c:	2203      	movs	r2, #3
 8019b3e:	4650      	mov	r0, sl
 8019b40:	f7e6 fb7e 	bl	8000240 <memchr>
 8019b44:	b138      	cbz	r0, 8019b56 <_vfiprintf_r+0x17a>
 8019b46:	9b04      	ldr	r3, [sp, #16]
 8019b48:	eba0 000a 	sub.w	r0, r0, sl
 8019b4c:	2240      	movs	r2, #64	; 0x40
 8019b4e:	4082      	lsls	r2, r0
 8019b50:	4313      	orrs	r3, r2
 8019b52:	3401      	adds	r4, #1
 8019b54:	9304      	str	r3, [sp, #16]
 8019b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b5a:	4829      	ldr	r0, [pc, #164]	; (8019c00 <_vfiprintf_r+0x224>)
 8019b5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019b60:	2206      	movs	r2, #6
 8019b62:	f7e6 fb6d 	bl	8000240 <memchr>
 8019b66:	2800      	cmp	r0, #0
 8019b68:	d03f      	beq.n	8019bea <_vfiprintf_r+0x20e>
 8019b6a:	4b26      	ldr	r3, [pc, #152]	; (8019c04 <_vfiprintf_r+0x228>)
 8019b6c:	bb1b      	cbnz	r3, 8019bb6 <_vfiprintf_r+0x1da>
 8019b6e:	9b03      	ldr	r3, [sp, #12]
 8019b70:	3307      	adds	r3, #7
 8019b72:	f023 0307 	bic.w	r3, r3, #7
 8019b76:	3308      	adds	r3, #8
 8019b78:	9303      	str	r3, [sp, #12]
 8019b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b7c:	443b      	add	r3, r7
 8019b7e:	9309      	str	r3, [sp, #36]	; 0x24
 8019b80:	e768      	b.n	8019a54 <_vfiprintf_r+0x78>
 8019b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8019b86:	460c      	mov	r4, r1
 8019b88:	2001      	movs	r0, #1
 8019b8a:	e7a6      	b.n	8019ada <_vfiprintf_r+0xfe>
 8019b8c:	2300      	movs	r3, #0
 8019b8e:	3401      	adds	r4, #1
 8019b90:	9305      	str	r3, [sp, #20]
 8019b92:	4619      	mov	r1, r3
 8019b94:	f04f 0c0a 	mov.w	ip, #10
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019b9e:	3a30      	subs	r2, #48	; 0x30
 8019ba0:	2a09      	cmp	r2, #9
 8019ba2:	d903      	bls.n	8019bac <_vfiprintf_r+0x1d0>
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d0c6      	beq.n	8019b36 <_vfiprintf_r+0x15a>
 8019ba8:	9105      	str	r1, [sp, #20]
 8019baa:	e7c4      	b.n	8019b36 <_vfiprintf_r+0x15a>
 8019bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8019bb0:	4604      	mov	r4, r0
 8019bb2:	2301      	movs	r3, #1
 8019bb4:	e7f0      	b.n	8019b98 <_vfiprintf_r+0x1bc>
 8019bb6:	ab03      	add	r3, sp, #12
 8019bb8:	9300      	str	r3, [sp, #0]
 8019bba:	462a      	mov	r2, r5
 8019bbc:	4b12      	ldr	r3, [pc, #72]	; (8019c08 <_vfiprintf_r+0x22c>)
 8019bbe:	a904      	add	r1, sp, #16
 8019bc0:	4630      	mov	r0, r6
 8019bc2:	f3af 8000 	nop.w
 8019bc6:	4607      	mov	r7, r0
 8019bc8:	1c78      	adds	r0, r7, #1
 8019bca:	d1d6      	bne.n	8019b7a <_vfiprintf_r+0x19e>
 8019bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019bce:	07d9      	lsls	r1, r3, #31
 8019bd0:	d405      	bmi.n	8019bde <_vfiprintf_r+0x202>
 8019bd2:	89ab      	ldrh	r3, [r5, #12]
 8019bd4:	059a      	lsls	r2, r3, #22
 8019bd6:	d402      	bmi.n	8019bde <_vfiprintf_r+0x202>
 8019bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019bda:	f7ff fdf4 	bl	80197c6 <__retarget_lock_release_recursive>
 8019bde:	89ab      	ldrh	r3, [r5, #12]
 8019be0:	065b      	lsls	r3, r3, #25
 8019be2:	f53f af1d 	bmi.w	8019a20 <_vfiprintf_r+0x44>
 8019be6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019be8:	e71c      	b.n	8019a24 <_vfiprintf_r+0x48>
 8019bea:	ab03      	add	r3, sp, #12
 8019bec:	9300      	str	r3, [sp, #0]
 8019bee:	462a      	mov	r2, r5
 8019bf0:	4b05      	ldr	r3, [pc, #20]	; (8019c08 <_vfiprintf_r+0x22c>)
 8019bf2:	a904      	add	r1, sp, #16
 8019bf4:	4630      	mov	r0, r6
 8019bf6:	f000 f879 	bl	8019cec <_printf_i>
 8019bfa:	e7e4      	b.n	8019bc6 <_vfiprintf_r+0x1ea>
 8019bfc:	0801fd7c 	.word	0x0801fd7c
 8019c00:	0801fd86 	.word	0x0801fd86
 8019c04:	00000000 	.word	0x00000000
 8019c08:	080199b7 	.word	0x080199b7
 8019c0c:	0801fd82 	.word	0x0801fd82

08019c10 <_printf_common>:
 8019c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c14:	4616      	mov	r6, r2
 8019c16:	4699      	mov	r9, r3
 8019c18:	688a      	ldr	r2, [r1, #8]
 8019c1a:	690b      	ldr	r3, [r1, #16]
 8019c1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019c20:	4293      	cmp	r3, r2
 8019c22:	bfb8      	it	lt
 8019c24:	4613      	movlt	r3, r2
 8019c26:	6033      	str	r3, [r6, #0]
 8019c28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019c2c:	4607      	mov	r7, r0
 8019c2e:	460c      	mov	r4, r1
 8019c30:	b10a      	cbz	r2, 8019c36 <_printf_common+0x26>
 8019c32:	3301      	adds	r3, #1
 8019c34:	6033      	str	r3, [r6, #0]
 8019c36:	6823      	ldr	r3, [r4, #0]
 8019c38:	0699      	lsls	r1, r3, #26
 8019c3a:	bf42      	ittt	mi
 8019c3c:	6833      	ldrmi	r3, [r6, #0]
 8019c3e:	3302      	addmi	r3, #2
 8019c40:	6033      	strmi	r3, [r6, #0]
 8019c42:	6825      	ldr	r5, [r4, #0]
 8019c44:	f015 0506 	ands.w	r5, r5, #6
 8019c48:	d106      	bne.n	8019c58 <_printf_common+0x48>
 8019c4a:	f104 0a19 	add.w	sl, r4, #25
 8019c4e:	68e3      	ldr	r3, [r4, #12]
 8019c50:	6832      	ldr	r2, [r6, #0]
 8019c52:	1a9b      	subs	r3, r3, r2
 8019c54:	42ab      	cmp	r3, r5
 8019c56:	dc26      	bgt.n	8019ca6 <_printf_common+0x96>
 8019c58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019c5c:	1e13      	subs	r3, r2, #0
 8019c5e:	6822      	ldr	r2, [r4, #0]
 8019c60:	bf18      	it	ne
 8019c62:	2301      	movne	r3, #1
 8019c64:	0692      	lsls	r2, r2, #26
 8019c66:	d42b      	bmi.n	8019cc0 <_printf_common+0xb0>
 8019c68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019c6c:	4649      	mov	r1, r9
 8019c6e:	4638      	mov	r0, r7
 8019c70:	47c0      	blx	r8
 8019c72:	3001      	adds	r0, #1
 8019c74:	d01e      	beq.n	8019cb4 <_printf_common+0xa4>
 8019c76:	6823      	ldr	r3, [r4, #0]
 8019c78:	6922      	ldr	r2, [r4, #16]
 8019c7a:	f003 0306 	and.w	r3, r3, #6
 8019c7e:	2b04      	cmp	r3, #4
 8019c80:	bf02      	ittt	eq
 8019c82:	68e5      	ldreq	r5, [r4, #12]
 8019c84:	6833      	ldreq	r3, [r6, #0]
 8019c86:	1aed      	subeq	r5, r5, r3
 8019c88:	68a3      	ldr	r3, [r4, #8]
 8019c8a:	bf0c      	ite	eq
 8019c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019c90:	2500      	movne	r5, #0
 8019c92:	4293      	cmp	r3, r2
 8019c94:	bfc4      	itt	gt
 8019c96:	1a9b      	subgt	r3, r3, r2
 8019c98:	18ed      	addgt	r5, r5, r3
 8019c9a:	2600      	movs	r6, #0
 8019c9c:	341a      	adds	r4, #26
 8019c9e:	42b5      	cmp	r5, r6
 8019ca0:	d11a      	bne.n	8019cd8 <_printf_common+0xc8>
 8019ca2:	2000      	movs	r0, #0
 8019ca4:	e008      	b.n	8019cb8 <_printf_common+0xa8>
 8019ca6:	2301      	movs	r3, #1
 8019ca8:	4652      	mov	r2, sl
 8019caa:	4649      	mov	r1, r9
 8019cac:	4638      	mov	r0, r7
 8019cae:	47c0      	blx	r8
 8019cb0:	3001      	adds	r0, #1
 8019cb2:	d103      	bne.n	8019cbc <_printf_common+0xac>
 8019cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8019cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cbc:	3501      	adds	r5, #1
 8019cbe:	e7c6      	b.n	8019c4e <_printf_common+0x3e>
 8019cc0:	18e1      	adds	r1, r4, r3
 8019cc2:	1c5a      	adds	r2, r3, #1
 8019cc4:	2030      	movs	r0, #48	; 0x30
 8019cc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019cca:	4422      	add	r2, r4
 8019ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019cd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019cd4:	3302      	adds	r3, #2
 8019cd6:	e7c7      	b.n	8019c68 <_printf_common+0x58>
 8019cd8:	2301      	movs	r3, #1
 8019cda:	4622      	mov	r2, r4
 8019cdc:	4649      	mov	r1, r9
 8019cde:	4638      	mov	r0, r7
 8019ce0:	47c0      	blx	r8
 8019ce2:	3001      	adds	r0, #1
 8019ce4:	d0e6      	beq.n	8019cb4 <_printf_common+0xa4>
 8019ce6:	3601      	adds	r6, #1
 8019ce8:	e7d9      	b.n	8019c9e <_printf_common+0x8e>
	...

08019cec <_printf_i>:
 8019cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019cf0:	7e0f      	ldrb	r7, [r1, #24]
 8019cf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019cf4:	2f78      	cmp	r7, #120	; 0x78
 8019cf6:	4691      	mov	r9, r2
 8019cf8:	4680      	mov	r8, r0
 8019cfa:	460c      	mov	r4, r1
 8019cfc:	469a      	mov	sl, r3
 8019cfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019d02:	d807      	bhi.n	8019d14 <_printf_i+0x28>
 8019d04:	2f62      	cmp	r7, #98	; 0x62
 8019d06:	d80a      	bhi.n	8019d1e <_printf_i+0x32>
 8019d08:	2f00      	cmp	r7, #0
 8019d0a:	f000 80d4 	beq.w	8019eb6 <_printf_i+0x1ca>
 8019d0e:	2f58      	cmp	r7, #88	; 0x58
 8019d10:	f000 80c0 	beq.w	8019e94 <_printf_i+0x1a8>
 8019d14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019d1c:	e03a      	b.n	8019d94 <_printf_i+0xa8>
 8019d1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019d22:	2b15      	cmp	r3, #21
 8019d24:	d8f6      	bhi.n	8019d14 <_printf_i+0x28>
 8019d26:	a101      	add	r1, pc, #4	; (adr r1, 8019d2c <_printf_i+0x40>)
 8019d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019d2c:	08019d85 	.word	0x08019d85
 8019d30:	08019d99 	.word	0x08019d99
 8019d34:	08019d15 	.word	0x08019d15
 8019d38:	08019d15 	.word	0x08019d15
 8019d3c:	08019d15 	.word	0x08019d15
 8019d40:	08019d15 	.word	0x08019d15
 8019d44:	08019d99 	.word	0x08019d99
 8019d48:	08019d15 	.word	0x08019d15
 8019d4c:	08019d15 	.word	0x08019d15
 8019d50:	08019d15 	.word	0x08019d15
 8019d54:	08019d15 	.word	0x08019d15
 8019d58:	08019e9d 	.word	0x08019e9d
 8019d5c:	08019dc5 	.word	0x08019dc5
 8019d60:	08019e57 	.word	0x08019e57
 8019d64:	08019d15 	.word	0x08019d15
 8019d68:	08019d15 	.word	0x08019d15
 8019d6c:	08019ebf 	.word	0x08019ebf
 8019d70:	08019d15 	.word	0x08019d15
 8019d74:	08019dc5 	.word	0x08019dc5
 8019d78:	08019d15 	.word	0x08019d15
 8019d7c:	08019d15 	.word	0x08019d15
 8019d80:	08019e5f 	.word	0x08019e5f
 8019d84:	682b      	ldr	r3, [r5, #0]
 8019d86:	1d1a      	adds	r2, r3, #4
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	602a      	str	r2, [r5, #0]
 8019d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019d90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019d94:	2301      	movs	r3, #1
 8019d96:	e09f      	b.n	8019ed8 <_printf_i+0x1ec>
 8019d98:	6820      	ldr	r0, [r4, #0]
 8019d9a:	682b      	ldr	r3, [r5, #0]
 8019d9c:	0607      	lsls	r7, r0, #24
 8019d9e:	f103 0104 	add.w	r1, r3, #4
 8019da2:	6029      	str	r1, [r5, #0]
 8019da4:	d501      	bpl.n	8019daa <_printf_i+0xbe>
 8019da6:	681e      	ldr	r6, [r3, #0]
 8019da8:	e003      	b.n	8019db2 <_printf_i+0xc6>
 8019daa:	0646      	lsls	r6, r0, #25
 8019dac:	d5fb      	bpl.n	8019da6 <_printf_i+0xba>
 8019dae:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019db2:	2e00      	cmp	r6, #0
 8019db4:	da03      	bge.n	8019dbe <_printf_i+0xd2>
 8019db6:	232d      	movs	r3, #45	; 0x2d
 8019db8:	4276      	negs	r6, r6
 8019dba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019dbe:	485a      	ldr	r0, [pc, #360]	; (8019f28 <_printf_i+0x23c>)
 8019dc0:	230a      	movs	r3, #10
 8019dc2:	e012      	b.n	8019dea <_printf_i+0xfe>
 8019dc4:	682b      	ldr	r3, [r5, #0]
 8019dc6:	6820      	ldr	r0, [r4, #0]
 8019dc8:	1d19      	adds	r1, r3, #4
 8019dca:	6029      	str	r1, [r5, #0]
 8019dcc:	0605      	lsls	r5, r0, #24
 8019dce:	d501      	bpl.n	8019dd4 <_printf_i+0xe8>
 8019dd0:	681e      	ldr	r6, [r3, #0]
 8019dd2:	e002      	b.n	8019dda <_printf_i+0xee>
 8019dd4:	0641      	lsls	r1, r0, #25
 8019dd6:	d5fb      	bpl.n	8019dd0 <_printf_i+0xe4>
 8019dd8:	881e      	ldrh	r6, [r3, #0]
 8019dda:	4853      	ldr	r0, [pc, #332]	; (8019f28 <_printf_i+0x23c>)
 8019ddc:	2f6f      	cmp	r7, #111	; 0x6f
 8019dde:	bf0c      	ite	eq
 8019de0:	2308      	moveq	r3, #8
 8019de2:	230a      	movne	r3, #10
 8019de4:	2100      	movs	r1, #0
 8019de6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019dea:	6865      	ldr	r5, [r4, #4]
 8019dec:	60a5      	str	r5, [r4, #8]
 8019dee:	2d00      	cmp	r5, #0
 8019df0:	bfa2      	ittt	ge
 8019df2:	6821      	ldrge	r1, [r4, #0]
 8019df4:	f021 0104 	bicge.w	r1, r1, #4
 8019df8:	6021      	strge	r1, [r4, #0]
 8019dfa:	b90e      	cbnz	r6, 8019e00 <_printf_i+0x114>
 8019dfc:	2d00      	cmp	r5, #0
 8019dfe:	d04b      	beq.n	8019e98 <_printf_i+0x1ac>
 8019e00:	4615      	mov	r5, r2
 8019e02:	fbb6 f1f3 	udiv	r1, r6, r3
 8019e06:	fb03 6711 	mls	r7, r3, r1, r6
 8019e0a:	5dc7      	ldrb	r7, [r0, r7]
 8019e0c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019e10:	4637      	mov	r7, r6
 8019e12:	42bb      	cmp	r3, r7
 8019e14:	460e      	mov	r6, r1
 8019e16:	d9f4      	bls.n	8019e02 <_printf_i+0x116>
 8019e18:	2b08      	cmp	r3, #8
 8019e1a:	d10b      	bne.n	8019e34 <_printf_i+0x148>
 8019e1c:	6823      	ldr	r3, [r4, #0]
 8019e1e:	07de      	lsls	r6, r3, #31
 8019e20:	d508      	bpl.n	8019e34 <_printf_i+0x148>
 8019e22:	6923      	ldr	r3, [r4, #16]
 8019e24:	6861      	ldr	r1, [r4, #4]
 8019e26:	4299      	cmp	r1, r3
 8019e28:	bfde      	ittt	le
 8019e2a:	2330      	movle	r3, #48	; 0x30
 8019e2c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019e30:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019e34:	1b52      	subs	r2, r2, r5
 8019e36:	6122      	str	r2, [r4, #16]
 8019e38:	f8cd a000 	str.w	sl, [sp]
 8019e3c:	464b      	mov	r3, r9
 8019e3e:	aa03      	add	r2, sp, #12
 8019e40:	4621      	mov	r1, r4
 8019e42:	4640      	mov	r0, r8
 8019e44:	f7ff fee4 	bl	8019c10 <_printf_common>
 8019e48:	3001      	adds	r0, #1
 8019e4a:	d14a      	bne.n	8019ee2 <_printf_i+0x1f6>
 8019e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8019e50:	b004      	add	sp, #16
 8019e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019e56:	6823      	ldr	r3, [r4, #0]
 8019e58:	f043 0320 	orr.w	r3, r3, #32
 8019e5c:	6023      	str	r3, [r4, #0]
 8019e5e:	4833      	ldr	r0, [pc, #204]	; (8019f2c <_printf_i+0x240>)
 8019e60:	2778      	movs	r7, #120	; 0x78
 8019e62:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019e66:	6823      	ldr	r3, [r4, #0]
 8019e68:	6829      	ldr	r1, [r5, #0]
 8019e6a:	061f      	lsls	r7, r3, #24
 8019e6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019e70:	d402      	bmi.n	8019e78 <_printf_i+0x18c>
 8019e72:	065f      	lsls	r7, r3, #25
 8019e74:	bf48      	it	mi
 8019e76:	b2b6      	uxthmi	r6, r6
 8019e78:	07df      	lsls	r7, r3, #31
 8019e7a:	bf48      	it	mi
 8019e7c:	f043 0320 	orrmi.w	r3, r3, #32
 8019e80:	6029      	str	r1, [r5, #0]
 8019e82:	bf48      	it	mi
 8019e84:	6023      	strmi	r3, [r4, #0]
 8019e86:	b91e      	cbnz	r6, 8019e90 <_printf_i+0x1a4>
 8019e88:	6823      	ldr	r3, [r4, #0]
 8019e8a:	f023 0320 	bic.w	r3, r3, #32
 8019e8e:	6023      	str	r3, [r4, #0]
 8019e90:	2310      	movs	r3, #16
 8019e92:	e7a7      	b.n	8019de4 <_printf_i+0xf8>
 8019e94:	4824      	ldr	r0, [pc, #144]	; (8019f28 <_printf_i+0x23c>)
 8019e96:	e7e4      	b.n	8019e62 <_printf_i+0x176>
 8019e98:	4615      	mov	r5, r2
 8019e9a:	e7bd      	b.n	8019e18 <_printf_i+0x12c>
 8019e9c:	682b      	ldr	r3, [r5, #0]
 8019e9e:	6826      	ldr	r6, [r4, #0]
 8019ea0:	6961      	ldr	r1, [r4, #20]
 8019ea2:	1d18      	adds	r0, r3, #4
 8019ea4:	6028      	str	r0, [r5, #0]
 8019ea6:	0635      	lsls	r5, r6, #24
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	d501      	bpl.n	8019eb0 <_printf_i+0x1c4>
 8019eac:	6019      	str	r1, [r3, #0]
 8019eae:	e002      	b.n	8019eb6 <_printf_i+0x1ca>
 8019eb0:	0670      	lsls	r0, r6, #25
 8019eb2:	d5fb      	bpl.n	8019eac <_printf_i+0x1c0>
 8019eb4:	8019      	strh	r1, [r3, #0]
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	6123      	str	r3, [r4, #16]
 8019eba:	4615      	mov	r5, r2
 8019ebc:	e7bc      	b.n	8019e38 <_printf_i+0x14c>
 8019ebe:	682b      	ldr	r3, [r5, #0]
 8019ec0:	1d1a      	adds	r2, r3, #4
 8019ec2:	602a      	str	r2, [r5, #0]
 8019ec4:	681d      	ldr	r5, [r3, #0]
 8019ec6:	6862      	ldr	r2, [r4, #4]
 8019ec8:	2100      	movs	r1, #0
 8019eca:	4628      	mov	r0, r5
 8019ecc:	f7e6 f9b8 	bl	8000240 <memchr>
 8019ed0:	b108      	cbz	r0, 8019ed6 <_printf_i+0x1ea>
 8019ed2:	1b40      	subs	r0, r0, r5
 8019ed4:	6060      	str	r0, [r4, #4]
 8019ed6:	6863      	ldr	r3, [r4, #4]
 8019ed8:	6123      	str	r3, [r4, #16]
 8019eda:	2300      	movs	r3, #0
 8019edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ee0:	e7aa      	b.n	8019e38 <_printf_i+0x14c>
 8019ee2:	6923      	ldr	r3, [r4, #16]
 8019ee4:	462a      	mov	r2, r5
 8019ee6:	4649      	mov	r1, r9
 8019ee8:	4640      	mov	r0, r8
 8019eea:	47d0      	blx	sl
 8019eec:	3001      	adds	r0, #1
 8019eee:	d0ad      	beq.n	8019e4c <_printf_i+0x160>
 8019ef0:	6823      	ldr	r3, [r4, #0]
 8019ef2:	079b      	lsls	r3, r3, #30
 8019ef4:	d413      	bmi.n	8019f1e <_printf_i+0x232>
 8019ef6:	68e0      	ldr	r0, [r4, #12]
 8019ef8:	9b03      	ldr	r3, [sp, #12]
 8019efa:	4298      	cmp	r0, r3
 8019efc:	bfb8      	it	lt
 8019efe:	4618      	movlt	r0, r3
 8019f00:	e7a6      	b.n	8019e50 <_printf_i+0x164>
 8019f02:	2301      	movs	r3, #1
 8019f04:	4632      	mov	r2, r6
 8019f06:	4649      	mov	r1, r9
 8019f08:	4640      	mov	r0, r8
 8019f0a:	47d0      	blx	sl
 8019f0c:	3001      	adds	r0, #1
 8019f0e:	d09d      	beq.n	8019e4c <_printf_i+0x160>
 8019f10:	3501      	adds	r5, #1
 8019f12:	68e3      	ldr	r3, [r4, #12]
 8019f14:	9903      	ldr	r1, [sp, #12]
 8019f16:	1a5b      	subs	r3, r3, r1
 8019f18:	42ab      	cmp	r3, r5
 8019f1a:	dcf2      	bgt.n	8019f02 <_printf_i+0x216>
 8019f1c:	e7eb      	b.n	8019ef6 <_printf_i+0x20a>
 8019f1e:	2500      	movs	r5, #0
 8019f20:	f104 0619 	add.w	r6, r4, #25
 8019f24:	e7f5      	b.n	8019f12 <_printf_i+0x226>
 8019f26:	bf00      	nop
 8019f28:	0801fd8d 	.word	0x0801fd8d
 8019f2c:	0801fd9e 	.word	0x0801fd9e

08019f30 <__sflush_r>:
 8019f30:	898a      	ldrh	r2, [r1, #12]
 8019f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f36:	4605      	mov	r5, r0
 8019f38:	0710      	lsls	r0, r2, #28
 8019f3a:	460c      	mov	r4, r1
 8019f3c:	d458      	bmi.n	8019ff0 <__sflush_r+0xc0>
 8019f3e:	684b      	ldr	r3, [r1, #4]
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	dc05      	bgt.n	8019f50 <__sflush_r+0x20>
 8019f44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	dc02      	bgt.n	8019f50 <__sflush_r+0x20>
 8019f4a:	2000      	movs	r0, #0
 8019f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f52:	2e00      	cmp	r6, #0
 8019f54:	d0f9      	beq.n	8019f4a <__sflush_r+0x1a>
 8019f56:	2300      	movs	r3, #0
 8019f58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019f5c:	682f      	ldr	r7, [r5, #0]
 8019f5e:	6a21      	ldr	r1, [r4, #32]
 8019f60:	602b      	str	r3, [r5, #0]
 8019f62:	d032      	beq.n	8019fca <__sflush_r+0x9a>
 8019f64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019f66:	89a3      	ldrh	r3, [r4, #12]
 8019f68:	075a      	lsls	r2, r3, #29
 8019f6a:	d505      	bpl.n	8019f78 <__sflush_r+0x48>
 8019f6c:	6863      	ldr	r3, [r4, #4]
 8019f6e:	1ac0      	subs	r0, r0, r3
 8019f70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019f72:	b10b      	cbz	r3, 8019f78 <__sflush_r+0x48>
 8019f74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019f76:	1ac0      	subs	r0, r0, r3
 8019f78:	2300      	movs	r3, #0
 8019f7a:	4602      	mov	r2, r0
 8019f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f7e:	6a21      	ldr	r1, [r4, #32]
 8019f80:	4628      	mov	r0, r5
 8019f82:	47b0      	blx	r6
 8019f84:	1c43      	adds	r3, r0, #1
 8019f86:	89a3      	ldrh	r3, [r4, #12]
 8019f88:	d106      	bne.n	8019f98 <__sflush_r+0x68>
 8019f8a:	6829      	ldr	r1, [r5, #0]
 8019f8c:	291d      	cmp	r1, #29
 8019f8e:	d82b      	bhi.n	8019fe8 <__sflush_r+0xb8>
 8019f90:	4a29      	ldr	r2, [pc, #164]	; (801a038 <__sflush_r+0x108>)
 8019f92:	410a      	asrs	r2, r1
 8019f94:	07d6      	lsls	r6, r2, #31
 8019f96:	d427      	bmi.n	8019fe8 <__sflush_r+0xb8>
 8019f98:	2200      	movs	r2, #0
 8019f9a:	6062      	str	r2, [r4, #4]
 8019f9c:	04d9      	lsls	r1, r3, #19
 8019f9e:	6922      	ldr	r2, [r4, #16]
 8019fa0:	6022      	str	r2, [r4, #0]
 8019fa2:	d504      	bpl.n	8019fae <__sflush_r+0x7e>
 8019fa4:	1c42      	adds	r2, r0, #1
 8019fa6:	d101      	bne.n	8019fac <__sflush_r+0x7c>
 8019fa8:	682b      	ldr	r3, [r5, #0]
 8019faa:	b903      	cbnz	r3, 8019fae <__sflush_r+0x7e>
 8019fac:	6560      	str	r0, [r4, #84]	; 0x54
 8019fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fb0:	602f      	str	r7, [r5, #0]
 8019fb2:	2900      	cmp	r1, #0
 8019fb4:	d0c9      	beq.n	8019f4a <__sflush_r+0x1a>
 8019fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fba:	4299      	cmp	r1, r3
 8019fbc:	d002      	beq.n	8019fc4 <__sflush_r+0x94>
 8019fbe:	4628      	mov	r0, r5
 8019fc0:	f000 f924 	bl	801a20c <_free_r>
 8019fc4:	2000      	movs	r0, #0
 8019fc6:	6360      	str	r0, [r4, #52]	; 0x34
 8019fc8:	e7c0      	b.n	8019f4c <__sflush_r+0x1c>
 8019fca:	2301      	movs	r3, #1
 8019fcc:	4628      	mov	r0, r5
 8019fce:	47b0      	blx	r6
 8019fd0:	1c41      	adds	r1, r0, #1
 8019fd2:	d1c8      	bne.n	8019f66 <__sflush_r+0x36>
 8019fd4:	682b      	ldr	r3, [r5, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d0c5      	beq.n	8019f66 <__sflush_r+0x36>
 8019fda:	2b1d      	cmp	r3, #29
 8019fdc:	d001      	beq.n	8019fe2 <__sflush_r+0xb2>
 8019fde:	2b16      	cmp	r3, #22
 8019fe0:	d101      	bne.n	8019fe6 <__sflush_r+0xb6>
 8019fe2:	602f      	str	r7, [r5, #0]
 8019fe4:	e7b1      	b.n	8019f4a <__sflush_r+0x1a>
 8019fe6:	89a3      	ldrh	r3, [r4, #12]
 8019fe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019fec:	81a3      	strh	r3, [r4, #12]
 8019fee:	e7ad      	b.n	8019f4c <__sflush_r+0x1c>
 8019ff0:	690f      	ldr	r7, [r1, #16]
 8019ff2:	2f00      	cmp	r7, #0
 8019ff4:	d0a9      	beq.n	8019f4a <__sflush_r+0x1a>
 8019ff6:	0793      	lsls	r3, r2, #30
 8019ff8:	680e      	ldr	r6, [r1, #0]
 8019ffa:	bf08      	it	eq
 8019ffc:	694b      	ldreq	r3, [r1, #20]
 8019ffe:	600f      	str	r7, [r1, #0]
 801a000:	bf18      	it	ne
 801a002:	2300      	movne	r3, #0
 801a004:	eba6 0807 	sub.w	r8, r6, r7
 801a008:	608b      	str	r3, [r1, #8]
 801a00a:	f1b8 0f00 	cmp.w	r8, #0
 801a00e:	dd9c      	ble.n	8019f4a <__sflush_r+0x1a>
 801a010:	6a21      	ldr	r1, [r4, #32]
 801a012:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a014:	4643      	mov	r3, r8
 801a016:	463a      	mov	r2, r7
 801a018:	4628      	mov	r0, r5
 801a01a:	47b0      	blx	r6
 801a01c:	2800      	cmp	r0, #0
 801a01e:	dc06      	bgt.n	801a02e <__sflush_r+0xfe>
 801a020:	89a3      	ldrh	r3, [r4, #12]
 801a022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a026:	81a3      	strh	r3, [r4, #12]
 801a028:	f04f 30ff 	mov.w	r0, #4294967295
 801a02c:	e78e      	b.n	8019f4c <__sflush_r+0x1c>
 801a02e:	4407      	add	r7, r0
 801a030:	eba8 0800 	sub.w	r8, r8, r0
 801a034:	e7e9      	b.n	801a00a <__sflush_r+0xda>
 801a036:	bf00      	nop
 801a038:	dfbffffe 	.word	0xdfbffffe

0801a03c <_fflush_r>:
 801a03c:	b538      	push	{r3, r4, r5, lr}
 801a03e:	690b      	ldr	r3, [r1, #16]
 801a040:	4605      	mov	r5, r0
 801a042:	460c      	mov	r4, r1
 801a044:	b913      	cbnz	r3, 801a04c <_fflush_r+0x10>
 801a046:	2500      	movs	r5, #0
 801a048:	4628      	mov	r0, r5
 801a04a:	bd38      	pop	{r3, r4, r5, pc}
 801a04c:	b118      	cbz	r0, 801a056 <_fflush_r+0x1a>
 801a04e:	6a03      	ldr	r3, [r0, #32]
 801a050:	b90b      	cbnz	r3, 801a056 <_fflush_r+0x1a>
 801a052:	f7ff fa85 	bl	8019560 <__sinit>
 801a056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d0f3      	beq.n	801a046 <_fflush_r+0xa>
 801a05e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a060:	07d0      	lsls	r0, r2, #31
 801a062:	d404      	bmi.n	801a06e <_fflush_r+0x32>
 801a064:	0599      	lsls	r1, r3, #22
 801a066:	d402      	bmi.n	801a06e <_fflush_r+0x32>
 801a068:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a06a:	f7ff fbab 	bl	80197c4 <__retarget_lock_acquire_recursive>
 801a06e:	4628      	mov	r0, r5
 801a070:	4621      	mov	r1, r4
 801a072:	f7ff ff5d 	bl	8019f30 <__sflush_r>
 801a076:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a078:	07da      	lsls	r2, r3, #31
 801a07a:	4605      	mov	r5, r0
 801a07c:	d4e4      	bmi.n	801a048 <_fflush_r+0xc>
 801a07e:	89a3      	ldrh	r3, [r4, #12]
 801a080:	059b      	lsls	r3, r3, #22
 801a082:	d4e1      	bmi.n	801a048 <_fflush_r+0xc>
 801a084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a086:	f7ff fb9e 	bl	80197c6 <__retarget_lock_release_recursive>
 801a08a:	e7dd      	b.n	801a048 <_fflush_r+0xc>

0801a08c <fiprintf>:
 801a08c:	b40e      	push	{r1, r2, r3}
 801a08e:	b503      	push	{r0, r1, lr}
 801a090:	4601      	mov	r1, r0
 801a092:	ab03      	add	r3, sp, #12
 801a094:	4805      	ldr	r0, [pc, #20]	; (801a0ac <fiprintf+0x20>)
 801a096:	f853 2b04 	ldr.w	r2, [r3], #4
 801a09a:	6800      	ldr	r0, [r0, #0]
 801a09c:	9301      	str	r3, [sp, #4]
 801a09e:	f7ff fc9d 	bl	80199dc <_vfiprintf_r>
 801a0a2:	b002      	add	sp, #8
 801a0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a0a8:	b003      	add	sp, #12
 801a0aa:	4770      	bx	lr
 801a0ac:	200000a4 	.word	0x200000a4

0801a0b0 <__swbuf_r>:
 801a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0b2:	460e      	mov	r6, r1
 801a0b4:	4614      	mov	r4, r2
 801a0b6:	4605      	mov	r5, r0
 801a0b8:	b118      	cbz	r0, 801a0c2 <__swbuf_r+0x12>
 801a0ba:	6a03      	ldr	r3, [r0, #32]
 801a0bc:	b90b      	cbnz	r3, 801a0c2 <__swbuf_r+0x12>
 801a0be:	f7ff fa4f 	bl	8019560 <__sinit>
 801a0c2:	69a3      	ldr	r3, [r4, #24]
 801a0c4:	60a3      	str	r3, [r4, #8]
 801a0c6:	89a3      	ldrh	r3, [r4, #12]
 801a0c8:	071a      	lsls	r2, r3, #28
 801a0ca:	d525      	bpl.n	801a118 <__swbuf_r+0x68>
 801a0cc:	6923      	ldr	r3, [r4, #16]
 801a0ce:	b31b      	cbz	r3, 801a118 <__swbuf_r+0x68>
 801a0d0:	6823      	ldr	r3, [r4, #0]
 801a0d2:	6922      	ldr	r2, [r4, #16]
 801a0d4:	1a98      	subs	r0, r3, r2
 801a0d6:	6963      	ldr	r3, [r4, #20]
 801a0d8:	b2f6      	uxtb	r6, r6
 801a0da:	4283      	cmp	r3, r0
 801a0dc:	4637      	mov	r7, r6
 801a0de:	dc04      	bgt.n	801a0ea <__swbuf_r+0x3a>
 801a0e0:	4621      	mov	r1, r4
 801a0e2:	4628      	mov	r0, r5
 801a0e4:	f7ff ffaa 	bl	801a03c <_fflush_r>
 801a0e8:	b9e0      	cbnz	r0, 801a124 <__swbuf_r+0x74>
 801a0ea:	68a3      	ldr	r3, [r4, #8]
 801a0ec:	3b01      	subs	r3, #1
 801a0ee:	60a3      	str	r3, [r4, #8]
 801a0f0:	6823      	ldr	r3, [r4, #0]
 801a0f2:	1c5a      	adds	r2, r3, #1
 801a0f4:	6022      	str	r2, [r4, #0]
 801a0f6:	701e      	strb	r6, [r3, #0]
 801a0f8:	6962      	ldr	r2, [r4, #20]
 801a0fa:	1c43      	adds	r3, r0, #1
 801a0fc:	429a      	cmp	r2, r3
 801a0fe:	d004      	beq.n	801a10a <__swbuf_r+0x5a>
 801a100:	89a3      	ldrh	r3, [r4, #12]
 801a102:	07db      	lsls	r3, r3, #31
 801a104:	d506      	bpl.n	801a114 <__swbuf_r+0x64>
 801a106:	2e0a      	cmp	r6, #10
 801a108:	d104      	bne.n	801a114 <__swbuf_r+0x64>
 801a10a:	4621      	mov	r1, r4
 801a10c:	4628      	mov	r0, r5
 801a10e:	f7ff ff95 	bl	801a03c <_fflush_r>
 801a112:	b938      	cbnz	r0, 801a124 <__swbuf_r+0x74>
 801a114:	4638      	mov	r0, r7
 801a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a118:	4621      	mov	r1, r4
 801a11a:	4628      	mov	r0, r5
 801a11c:	f000 f806 	bl	801a12c <__swsetup_r>
 801a120:	2800      	cmp	r0, #0
 801a122:	d0d5      	beq.n	801a0d0 <__swbuf_r+0x20>
 801a124:	f04f 37ff 	mov.w	r7, #4294967295
 801a128:	e7f4      	b.n	801a114 <__swbuf_r+0x64>
	...

0801a12c <__swsetup_r>:
 801a12c:	b538      	push	{r3, r4, r5, lr}
 801a12e:	4b2a      	ldr	r3, [pc, #168]	; (801a1d8 <__swsetup_r+0xac>)
 801a130:	4605      	mov	r5, r0
 801a132:	6818      	ldr	r0, [r3, #0]
 801a134:	460c      	mov	r4, r1
 801a136:	b118      	cbz	r0, 801a140 <__swsetup_r+0x14>
 801a138:	6a03      	ldr	r3, [r0, #32]
 801a13a:	b90b      	cbnz	r3, 801a140 <__swsetup_r+0x14>
 801a13c:	f7ff fa10 	bl	8019560 <__sinit>
 801a140:	89a3      	ldrh	r3, [r4, #12]
 801a142:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a146:	0718      	lsls	r0, r3, #28
 801a148:	d422      	bmi.n	801a190 <__swsetup_r+0x64>
 801a14a:	06d9      	lsls	r1, r3, #27
 801a14c:	d407      	bmi.n	801a15e <__swsetup_r+0x32>
 801a14e:	2309      	movs	r3, #9
 801a150:	602b      	str	r3, [r5, #0]
 801a152:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a156:	81a3      	strh	r3, [r4, #12]
 801a158:	f04f 30ff 	mov.w	r0, #4294967295
 801a15c:	e034      	b.n	801a1c8 <__swsetup_r+0x9c>
 801a15e:	0758      	lsls	r0, r3, #29
 801a160:	d512      	bpl.n	801a188 <__swsetup_r+0x5c>
 801a162:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a164:	b141      	cbz	r1, 801a178 <__swsetup_r+0x4c>
 801a166:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a16a:	4299      	cmp	r1, r3
 801a16c:	d002      	beq.n	801a174 <__swsetup_r+0x48>
 801a16e:	4628      	mov	r0, r5
 801a170:	f000 f84c 	bl	801a20c <_free_r>
 801a174:	2300      	movs	r3, #0
 801a176:	6363      	str	r3, [r4, #52]	; 0x34
 801a178:	89a3      	ldrh	r3, [r4, #12]
 801a17a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a17e:	81a3      	strh	r3, [r4, #12]
 801a180:	2300      	movs	r3, #0
 801a182:	6063      	str	r3, [r4, #4]
 801a184:	6923      	ldr	r3, [r4, #16]
 801a186:	6023      	str	r3, [r4, #0]
 801a188:	89a3      	ldrh	r3, [r4, #12]
 801a18a:	f043 0308 	orr.w	r3, r3, #8
 801a18e:	81a3      	strh	r3, [r4, #12]
 801a190:	6923      	ldr	r3, [r4, #16]
 801a192:	b94b      	cbnz	r3, 801a1a8 <__swsetup_r+0x7c>
 801a194:	89a3      	ldrh	r3, [r4, #12]
 801a196:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a19a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a19e:	d003      	beq.n	801a1a8 <__swsetup_r+0x7c>
 801a1a0:	4621      	mov	r1, r4
 801a1a2:	4628      	mov	r0, r5
 801a1a4:	f000 f8a4 	bl	801a2f0 <__smakebuf_r>
 801a1a8:	89a0      	ldrh	r0, [r4, #12]
 801a1aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1ae:	f010 0301 	ands.w	r3, r0, #1
 801a1b2:	d00a      	beq.n	801a1ca <__swsetup_r+0x9e>
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	60a3      	str	r3, [r4, #8]
 801a1b8:	6963      	ldr	r3, [r4, #20]
 801a1ba:	425b      	negs	r3, r3
 801a1bc:	61a3      	str	r3, [r4, #24]
 801a1be:	6923      	ldr	r3, [r4, #16]
 801a1c0:	b943      	cbnz	r3, 801a1d4 <__swsetup_r+0xa8>
 801a1c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a1c6:	d1c4      	bne.n	801a152 <__swsetup_r+0x26>
 801a1c8:	bd38      	pop	{r3, r4, r5, pc}
 801a1ca:	0781      	lsls	r1, r0, #30
 801a1cc:	bf58      	it	pl
 801a1ce:	6963      	ldrpl	r3, [r4, #20]
 801a1d0:	60a3      	str	r3, [r4, #8]
 801a1d2:	e7f4      	b.n	801a1be <__swsetup_r+0x92>
 801a1d4:	2000      	movs	r0, #0
 801a1d6:	e7f7      	b.n	801a1c8 <__swsetup_r+0x9c>
 801a1d8:	200000a4 	.word	0x200000a4

0801a1dc <_sbrk_r>:
 801a1dc:	b538      	push	{r3, r4, r5, lr}
 801a1de:	4d06      	ldr	r5, [pc, #24]	; (801a1f8 <_sbrk_r+0x1c>)
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	4604      	mov	r4, r0
 801a1e4:	4608      	mov	r0, r1
 801a1e6:	602b      	str	r3, [r5, #0]
 801a1e8:	f7e7 fa54 	bl	8001694 <_sbrk>
 801a1ec:	1c43      	adds	r3, r0, #1
 801a1ee:	d102      	bne.n	801a1f6 <_sbrk_r+0x1a>
 801a1f0:	682b      	ldr	r3, [r5, #0]
 801a1f2:	b103      	cbz	r3, 801a1f6 <_sbrk_r+0x1a>
 801a1f4:	6023      	str	r3, [r4, #0]
 801a1f6:	bd38      	pop	{r3, r4, r5, pc}
 801a1f8:	2000d0b4 	.word	0x2000d0b4

0801a1fc <abort>:
 801a1fc:	b508      	push	{r3, lr}
 801a1fe:	2006      	movs	r0, #6
 801a200:	f000 f8da 	bl	801a3b8 <raise>
 801a204:	2001      	movs	r0, #1
 801a206:	f7e7 f9cd 	bl	80015a4 <_exit>
	...

0801a20c <_free_r>:
 801a20c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a20e:	2900      	cmp	r1, #0
 801a210:	d044      	beq.n	801a29c <_free_r+0x90>
 801a212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a216:	9001      	str	r0, [sp, #4]
 801a218:	2b00      	cmp	r3, #0
 801a21a:	f1a1 0404 	sub.w	r4, r1, #4
 801a21e:	bfb8      	it	lt
 801a220:	18e4      	addlt	r4, r4, r3
 801a222:	f7ff fba5 	bl	8019970 <__malloc_lock>
 801a226:	4a1e      	ldr	r2, [pc, #120]	; (801a2a0 <_free_r+0x94>)
 801a228:	9801      	ldr	r0, [sp, #4]
 801a22a:	6813      	ldr	r3, [r2, #0]
 801a22c:	b933      	cbnz	r3, 801a23c <_free_r+0x30>
 801a22e:	6063      	str	r3, [r4, #4]
 801a230:	6014      	str	r4, [r2, #0]
 801a232:	b003      	add	sp, #12
 801a234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a238:	f7ff bba0 	b.w	801997c <__malloc_unlock>
 801a23c:	42a3      	cmp	r3, r4
 801a23e:	d908      	bls.n	801a252 <_free_r+0x46>
 801a240:	6825      	ldr	r5, [r4, #0]
 801a242:	1961      	adds	r1, r4, r5
 801a244:	428b      	cmp	r3, r1
 801a246:	bf01      	itttt	eq
 801a248:	6819      	ldreq	r1, [r3, #0]
 801a24a:	685b      	ldreq	r3, [r3, #4]
 801a24c:	1949      	addeq	r1, r1, r5
 801a24e:	6021      	streq	r1, [r4, #0]
 801a250:	e7ed      	b.n	801a22e <_free_r+0x22>
 801a252:	461a      	mov	r2, r3
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	b10b      	cbz	r3, 801a25c <_free_r+0x50>
 801a258:	42a3      	cmp	r3, r4
 801a25a:	d9fa      	bls.n	801a252 <_free_r+0x46>
 801a25c:	6811      	ldr	r1, [r2, #0]
 801a25e:	1855      	adds	r5, r2, r1
 801a260:	42a5      	cmp	r5, r4
 801a262:	d10b      	bne.n	801a27c <_free_r+0x70>
 801a264:	6824      	ldr	r4, [r4, #0]
 801a266:	4421      	add	r1, r4
 801a268:	1854      	adds	r4, r2, r1
 801a26a:	42a3      	cmp	r3, r4
 801a26c:	6011      	str	r1, [r2, #0]
 801a26e:	d1e0      	bne.n	801a232 <_free_r+0x26>
 801a270:	681c      	ldr	r4, [r3, #0]
 801a272:	685b      	ldr	r3, [r3, #4]
 801a274:	6053      	str	r3, [r2, #4]
 801a276:	440c      	add	r4, r1
 801a278:	6014      	str	r4, [r2, #0]
 801a27a:	e7da      	b.n	801a232 <_free_r+0x26>
 801a27c:	d902      	bls.n	801a284 <_free_r+0x78>
 801a27e:	230c      	movs	r3, #12
 801a280:	6003      	str	r3, [r0, #0]
 801a282:	e7d6      	b.n	801a232 <_free_r+0x26>
 801a284:	6825      	ldr	r5, [r4, #0]
 801a286:	1961      	adds	r1, r4, r5
 801a288:	428b      	cmp	r3, r1
 801a28a:	bf04      	itt	eq
 801a28c:	6819      	ldreq	r1, [r3, #0]
 801a28e:	685b      	ldreq	r3, [r3, #4]
 801a290:	6063      	str	r3, [r4, #4]
 801a292:	bf04      	itt	eq
 801a294:	1949      	addeq	r1, r1, r5
 801a296:	6021      	streq	r1, [r4, #0]
 801a298:	6054      	str	r4, [r2, #4]
 801a29a:	e7ca      	b.n	801a232 <_free_r+0x26>
 801a29c:	b003      	add	sp, #12
 801a29e:	bd30      	pop	{r4, r5, pc}
 801a2a0:	2000d1fc 	.word	0x2000d1fc

0801a2a4 <__swhatbuf_r>:
 801a2a4:	b570      	push	{r4, r5, r6, lr}
 801a2a6:	460c      	mov	r4, r1
 801a2a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2ac:	2900      	cmp	r1, #0
 801a2ae:	b096      	sub	sp, #88	; 0x58
 801a2b0:	4615      	mov	r5, r2
 801a2b2:	461e      	mov	r6, r3
 801a2b4:	da0d      	bge.n	801a2d2 <__swhatbuf_r+0x2e>
 801a2b6:	89a3      	ldrh	r3, [r4, #12]
 801a2b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a2bc:	f04f 0100 	mov.w	r1, #0
 801a2c0:	bf0c      	ite	eq
 801a2c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a2c6:	2340      	movne	r3, #64	; 0x40
 801a2c8:	2000      	movs	r0, #0
 801a2ca:	6031      	str	r1, [r6, #0]
 801a2cc:	602b      	str	r3, [r5, #0]
 801a2ce:	b016      	add	sp, #88	; 0x58
 801a2d0:	bd70      	pop	{r4, r5, r6, pc}
 801a2d2:	466a      	mov	r2, sp
 801a2d4:	f000 f878 	bl	801a3c8 <_fstat_r>
 801a2d8:	2800      	cmp	r0, #0
 801a2da:	dbec      	blt.n	801a2b6 <__swhatbuf_r+0x12>
 801a2dc:	9901      	ldr	r1, [sp, #4]
 801a2de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a2e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a2e6:	4259      	negs	r1, r3
 801a2e8:	4159      	adcs	r1, r3
 801a2ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a2ee:	e7eb      	b.n	801a2c8 <__swhatbuf_r+0x24>

0801a2f0 <__smakebuf_r>:
 801a2f0:	898b      	ldrh	r3, [r1, #12]
 801a2f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a2f4:	079d      	lsls	r5, r3, #30
 801a2f6:	4606      	mov	r6, r0
 801a2f8:	460c      	mov	r4, r1
 801a2fa:	d507      	bpl.n	801a30c <__smakebuf_r+0x1c>
 801a2fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a300:	6023      	str	r3, [r4, #0]
 801a302:	6123      	str	r3, [r4, #16]
 801a304:	2301      	movs	r3, #1
 801a306:	6163      	str	r3, [r4, #20]
 801a308:	b002      	add	sp, #8
 801a30a:	bd70      	pop	{r4, r5, r6, pc}
 801a30c:	ab01      	add	r3, sp, #4
 801a30e:	466a      	mov	r2, sp
 801a310:	f7ff ffc8 	bl	801a2a4 <__swhatbuf_r>
 801a314:	9900      	ldr	r1, [sp, #0]
 801a316:	4605      	mov	r5, r0
 801a318:	4630      	mov	r0, r6
 801a31a:	f7ff faa9 	bl	8019870 <_malloc_r>
 801a31e:	b948      	cbnz	r0, 801a334 <__smakebuf_r+0x44>
 801a320:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a324:	059a      	lsls	r2, r3, #22
 801a326:	d4ef      	bmi.n	801a308 <__smakebuf_r+0x18>
 801a328:	f023 0303 	bic.w	r3, r3, #3
 801a32c:	f043 0302 	orr.w	r3, r3, #2
 801a330:	81a3      	strh	r3, [r4, #12]
 801a332:	e7e3      	b.n	801a2fc <__smakebuf_r+0xc>
 801a334:	89a3      	ldrh	r3, [r4, #12]
 801a336:	6020      	str	r0, [r4, #0]
 801a338:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a33c:	81a3      	strh	r3, [r4, #12]
 801a33e:	9b00      	ldr	r3, [sp, #0]
 801a340:	6163      	str	r3, [r4, #20]
 801a342:	9b01      	ldr	r3, [sp, #4]
 801a344:	6120      	str	r0, [r4, #16]
 801a346:	b15b      	cbz	r3, 801a360 <__smakebuf_r+0x70>
 801a348:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a34c:	4630      	mov	r0, r6
 801a34e:	f000 f84d 	bl	801a3ec <_isatty_r>
 801a352:	b128      	cbz	r0, 801a360 <__smakebuf_r+0x70>
 801a354:	89a3      	ldrh	r3, [r4, #12]
 801a356:	f023 0303 	bic.w	r3, r3, #3
 801a35a:	f043 0301 	orr.w	r3, r3, #1
 801a35e:	81a3      	strh	r3, [r4, #12]
 801a360:	89a3      	ldrh	r3, [r4, #12]
 801a362:	431d      	orrs	r5, r3
 801a364:	81a5      	strh	r5, [r4, #12]
 801a366:	e7cf      	b.n	801a308 <__smakebuf_r+0x18>

0801a368 <_raise_r>:
 801a368:	291f      	cmp	r1, #31
 801a36a:	b538      	push	{r3, r4, r5, lr}
 801a36c:	4604      	mov	r4, r0
 801a36e:	460d      	mov	r5, r1
 801a370:	d904      	bls.n	801a37c <_raise_r+0x14>
 801a372:	2316      	movs	r3, #22
 801a374:	6003      	str	r3, [r0, #0]
 801a376:	f04f 30ff 	mov.w	r0, #4294967295
 801a37a:	bd38      	pop	{r3, r4, r5, pc}
 801a37c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a37e:	b112      	cbz	r2, 801a386 <_raise_r+0x1e>
 801a380:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a384:	b94b      	cbnz	r3, 801a39a <_raise_r+0x32>
 801a386:	4620      	mov	r0, r4
 801a388:	f000 f852 	bl	801a430 <_getpid_r>
 801a38c:	462a      	mov	r2, r5
 801a38e:	4601      	mov	r1, r0
 801a390:	4620      	mov	r0, r4
 801a392:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a396:	f000 b839 	b.w	801a40c <_kill_r>
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d00a      	beq.n	801a3b4 <_raise_r+0x4c>
 801a39e:	1c59      	adds	r1, r3, #1
 801a3a0:	d103      	bne.n	801a3aa <_raise_r+0x42>
 801a3a2:	2316      	movs	r3, #22
 801a3a4:	6003      	str	r3, [r0, #0]
 801a3a6:	2001      	movs	r0, #1
 801a3a8:	e7e7      	b.n	801a37a <_raise_r+0x12>
 801a3aa:	2400      	movs	r4, #0
 801a3ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a3b0:	4628      	mov	r0, r5
 801a3b2:	4798      	blx	r3
 801a3b4:	2000      	movs	r0, #0
 801a3b6:	e7e0      	b.n	801a37a <_raise_r+0x12>

0801a3b8 <raise>:
 801a3b8:	4b02      	ldr	r3, [pc, #8]	; (801a3c4 <raise+0xc>)
 801a3ba:	4601      	mov	r1, r0
 801a3bc:	6818      	ldr	r0, [r3, #0]
 801a3be:	f7ff bfd3 	b.w	801a368 <_raise_r>
 801a3c2:	bf00      	nop
 801a3c4:	200000a4 	.word	0x200000a4

0801a3c8 <_fstat_r>:
 801a3c8:	b538      	push	{r3, r4, r5, lr}
 801a3ca:	4d07      	ldr	r5, [pc, #28]	; (801a3e8 <_fstat_r+0x20>)
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	4604      	mov	r4, r0
 801a3d0:	4608      	mov	r0, r1
 801a3d2:	4611      	mov	r1, r2
 801a3d4:	602b      	str	r3, [r5, #0]
 801a3d6:	f7e7 f934 	bl	8001642 <_fstat>
 801a3da:	1c43      	adds	r3, r0, #1
 801a3dc:	d102      	bne.n	801a3e4 <_fstat_r+0x1c>
 801a3de:	682b      	ldr	r3, [r5, #0]
 801a3e0:	b103      	cbz	r3, 801a3e4 <_fstat_r+0x1c>
 801a3e2:	6023      	str	r3, [r4, #0]
 801a3e4:	bd38      	pop	{r3, r4, r5, pc}
 801a3e6:	bf00      	nop
 801a3e8:	2000d0b4 	.word	0x2000d0b4

0801a3ec <_isatty_r>:
 801a3ec:	b538      	push	{r3, r4, r5, lr}
 801a3ee:	4d06      	ldr	r5, [pc, #24]	; (801a408 <_isatty_r+0x1c>)
 801a3f0:	2300      	movs	r3, #0
 801a3f2:	4604      	mov	r4, r0
 801a3f4:	4608      	mov	r0, r1
 801a3f6:	602b      	str	r3, [r5, #0]
 801a3f8:	f7e7 f933 	bl	8001662 <_isatty>
 801a3fc:	1c43      	adds	r3, r0, #1
 801a3fe:	d102      	bne.n	801a406 <_isatty_r+0x1a>
 801a400:	682b      	ldr	r3, [r5, #0]
 801a402:	b103      	cbz	r3, 801a406 <_isatty_r+0x1a>
 801a404:	6023      	str	r3, [r4, #0]
 801a406:	bd38      	pop	{r3, r4, r5, pc}
 801a408:	2000d0b4 	.word	0x2000d0b4

0801a40c <_kill_r>:
 801a40c:	b538      	push	{r3, r4, r5, lr}
 801a40e:	4d07      	ldr	r5, [pc, #28]	; (801a42c <_kill_r+0x20>)
 801a410:	2300      	movs	r3, #0
 801a412:	4604      	mov	r4, r0
 801a414:	4608      	mov	r0, r1
 801a416:	4611      	mov	r1, r2
 801a418:	602b      	str	r3, [r5, #0]
 801a41a:	f7e7 f8b1 	bl	8001580 <_kill>
 801a41e:	1c43      	adds	r3, r0, #1
 801a420:	d102      	bne.n	801a428 <_kill_r+0x1c>
 801a422:	682b      	ldr	r3, [r5, #0]
 801a424:	b103      	cbz	r3, 801a428 <_kill_r+0x1c>
 801a426:	6023      	str	r3, [r4, #0]
 801a428:	bd38      	pop	{r3, r4, r5, pc}
 801a42a:	bf00      	nop
 801a42c:	2000d0b4 	.word	0x2000d0b4

0801a430 <_getpid_r>:
 801a430:	f7e7 b89e 	b.w	8001570 <_getpid>

0801a434 <_init>:
 801a434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a436:	bf00      	nop
 801a438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a43a:	bc08      	pop	{r3}
 801a43c:	469e      	mov	lr, r3
 801a43e:	4770      	bx	lr

0801a440 <_fini>:
 801a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a442:	bf00      	nop
 801a444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a446:	bc08      	pop	{r3}
 801a448:	469e      	mov	lr, r3
 801a44a:	4770      	bx	lr
