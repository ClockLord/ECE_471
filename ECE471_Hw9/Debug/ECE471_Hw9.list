
ECE471_Hw9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005988  08019e3c  08019e3c  00029e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f7c4  0801f7c4  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801f7c4  0801f7c4  0002f7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f7cc  0801f7cc  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f7cc  0801f7cc  0002f7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f7d0  0801f7d0  0002f7d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0801f7d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a8  0801f87c  000300a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000148  0801f91c  00030148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000cfd4  200001e8  0801f9bc  000301e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000d1bc  0801f9bc  0003d1bc  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 15 .debug_info   00033ee7  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000081db  00000000  00000000  00064142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002768  00000000  00000000  0006c320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001f20  00000000  00000000  0006ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00038da4  00000000  00000000  000709a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003e09f  00000000  00000000  000a974c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011be89  00000000  00000000  000e77eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000ad80  00000000  00000000  00203674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0020e3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08019e24 	.word	0x08019e24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08019e24 	.word	0x08019e24

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	20000204 	.word	0x20000204
 800060c:	20000258 	.word	0x20000258

08000610 <setPWM>:
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//function sets PWM to a desired value from 0 - 11
void setPWM(enum led led, int value){
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	6039      	str	r1, [r7, #0]
 800061a:	71fb      	strb	r3, [r7, #7]

	int dutyCycle = 0;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]

		switch(value){	//set the duty cycle
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	2b0a      	cmp	r3, #10
 8000624:	f200 808e 	bhi.w	8000744 <setPWM+0x134>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <setPWM+0x20>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	0800065d 	.word	0x0800065d
 8000634:	08000663 	.word	0x08000663
 8000638:	08000677 	.word	0x08000677
 800063c:	0800068d 	.word	0x0800068d
 8000640:	080006a7 	.word	0x080006a7
 8000644:	080006bd 	.word	0x080006bd
 8000648:	080006d7 	.word	0x080006d7
 800064c:	080006f3 	.word	0x080006f3
 8000650:	0800070d 	.word	0x0800070d
 8000654:	08000723 	.word	0x08000723
 8000658:	0800073d 	.word	0x0800073d
			case 0:
				dutyCycle =0;
 800065c:	2300      	movs	r3, #0
 800065e:	60fb      	str	r3, [r7, #12]
				break;
 8000660:	e072      	b.n	8000748 <setPWM+0x138>
			case 1:
				dutyCycle =(max/10);
 8000662:	4b43      	ldr	r3, [pc, #268]	; (8000770 <setPWM+0x160>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a43      	ldr	r2, [pc, #268]	; (8000774 <setPWM+0x164>)
 8000668:	fb82 1203 	smull	r1, r2, r2, r3
 800066c:	1092      	asrs	r2, r2, #2
 800066e:	17db      	asrs	r3, r3, #31
 8000670:	1ad3      	subs	r3, r2, r3
 8000672:	60fb      	str	r3, [r7, #12]
				break;
 8000674:	e068      	b.n	8000748 <setPWM+0x138>
			case 2:
				dutyCycle =2*(max/10);
 8000676:	4b3e      	ldr	r3, [pc, #248]	; (8000770 <setPWM+0x160>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a3e      	ldr	r2, [pc, #248]	; (8000774 <setPWM+0x164>)
 800067c:	fb82 1203 	smull	r1, r2, r2, r3
 8000680:	1092      	asrs	r2, r2, #2
 8000682:	17db      	asrs	r3, r3, #31
 8000684:	1ad3      	subs	r3, r2, r3
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
				break;
 800068a:	e05d      	b.n	8000748 <setPWM+0x138>
			case 3:
				dutyCycle =3*(max/10);
 800068c:	4b38      	ldr	r3, [pc, #224]	; (8000770 <setPWM+0x160>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a38      	ldr	r2, [pc, #224]	; (8000774 <setPWM+0x164>)
 8000692:	fb82 1203 	smull	r1, r2, r2, r3
 8000696:	1092      	asrs	r2, r2, #2
 8000698:	17db      	asrs	r3, r3, #31
 800069a:	1ad2      	subs	r2, r2, r3
 800069c:	4613      	mov	r3, r2
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	4413      	add	r3, r2
 80006a2:	60fb      	str	r3, [r7, #12]
				break;
 80006a4:	e050      	b.n	8000748 <setPWM+0x138>
			case 4:
				dutyCycle =4*(max/10);
 80006a6:	4b32      	ldr	r3, [pc, #200]	; (8000770 <setPWM+0x160>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a32      	ldr	r2, [pc, #200]	; (8000774 <setPWM+0x164>)
 80006ac:	fb82 1203 	smull	r1, r2, r2, r3
 80006b0:	1092      	asrs	r2, r2, #2
 80006b2:	17db      	asrs	r3, r3, #31
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
				break;
 80006ba:	e045      	b.n	8000748 <setPWM+0x138>
			case 5:
				dutyCycle =5*(max/10);
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <setPWM+0x160>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a2c      	ldr	r2, [pc, #176]	; (8000774 <setPWM+0x164>)
 80006c2:	fb82 1203 	smull	r1, r2, r2, r3
 80006c6:	1092      	asrs	r2, r2, #2
 80006c8:	17db      	asrs	r3, r3, #31
 80006ca:	1ad2      	subs	r2, r2, r3
 80006cc:	4613      	mov	r3, r2
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	4413      	add	r3, r2
 80006d2:	60fb      	str	r3, [r7, #12]
				break;
 80006d4:	e038      	b.n	8000748 <setPWM+0x138>
			case 6:
				dutyCycle =6*(max/10);
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <setPWM+0x160>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <setPWM+0x164>)
 80006dc:	fb82 1203 	smull	r1, r2, r2, r3
 80006e0:	1092      	asrs	r2, r2, #2
 80006e2:	17db      	asrs	r3, r3, #31
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	60fb      	str	r3, [r7, #12]
				break;
 80006f0:	e02a      	b.n	8000748 <setPWM+0x138>
			case 7:
				dutyCycle =7*(max/10);
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <setPWM+0x160>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <setPWM+0x164>)
 80006f8:	fb82 1203 	smull	r1, r2, r2, r3
 80006fc:	1092      	asrs	r2, r2, #2
 80006fe:	17db      	asrs	r3, r3, #31
 8000700:	1ad2      	subs	r2, r2, r3
 8000702:	4613      	mov	r3, r2
 8000704:	00db      	lsls	r3, r3, #3
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	60fb      	str	r3, [r7, #12]
				break;
 800070a:	e01d      	b.n	8000748 <setPWM+0x138>
			case 8:
				dutyCycle =8*(max/10);
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <setPWM+0x160>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a18      	ldr	r2, [pc, #96]	; (8000774 <setPWM+0x164>)
 8000712:	fb82 1203 	smull	r1, r2, r2, r3
 8000716:	1092      	asrs	r2, r2, #2
 8000718:	17db      	asrs	r3, r3, #31
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	00db      	lsls	r3, r3, #3
 800071e:	60fb      	str	r3, [r7, #12]
				break;
 8000720:	e012      	b.n	8000748 <setPWM+0x138>
			case 9:
				dutyCycle =9*(max/10);
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <setPWM+0x160>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a13      	ldr	r2, [pc, #76]	; (8000774 <setPWM+0x164>)
 8000728:	fb82 1203 	smull	r1, r2, r2, r3
 800072c:	1092      	asrs	r2, r2, #2
 800072e:	17db      	asrs	r3, r3, #31
 8000730:	1ad2      	subs	r2, r2, r3
 8000732:	4613      	mov	r3, r2
 8000734:	00db      	lsls	r3, r3, #3
 8000736:	4413      	add	r3, r2
 8000738:	60fb      	str	r3, [r7, #12]
				break;
 800073a:	e005      	b.n	8000748 <setPWM+0x138>
			case 10:
				dutyCycle = max;
 800073c:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <setPWM+0x160>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	60fb      	str	r3, [r7, #12]
				break;
 8000742:	e001      	b.n	8000748 <setPWM+0x138>
			default:
				dutyCycle = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
		}

		if(led == green){
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d103      	bne.n	8000756 <setPWM+0x146>
			TIM3->CCR3 = dutyCycle;
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <setPWM+0x168>)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	63d3      	str	r3, [r2, #60]	; 0x3c
		}

		else if (led == red){
			TIM12->CCR1 = dutyCycle;
		}
}
 8000754:	e005      	b.n	8000762 <setPWM+0x152>
		else if (led == red){
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d102      	bne.n	8000762 <setPWM+0x152>
			TIM12->CCR1 = dutyCycle;
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <setPWM+0x16c>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20000004 	.word	0x20000004
 8000774:	66666667 	.word	0x66666667
 8000778:	40000400 	.word	0x40000400
 800077c:	40001800 	.word	0x40001800

08000780 <custom_SSI_handler>:
/* USER CODE BEGIN 0 */
#define custom_SSI_tag_num 4
const char* custom_SSI_tags[custom_SSI_tag_num] = {"lred", "lgreen", "lblue", "buser"};

uint16_t custom_SSI_handler(const char* ssi_tag_name, char *pcInsert, int iInsertLen)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	60f8      	str	r0, [r7, #12]
 8000788:	60b9      	str	r1, [r7, #8]
 800078a:	607a      	str	r2, [r7, #4]
  if ( iInsertLen < 10 ) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b09      	cmp	r3, #9
 8000790:	dc02      	bgt.n	8000798 <custom_SSI_handler+0x18>
      // if the buffer size is smaller than the longest response then indicate an error
      return(-1);
 8000792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000796:	e093      	b.n	80008c0 <custom_SSI_handler+0x140>
  }

  if (strcmp(ssi_tag_name, custom_SSI_tags[0])==0) {
 8000798:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <custom_SSI_handler+0x148>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f7ff fd36 	bl	8000210 <strcmp>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d11a      	bne.n	80007e0 <custom_SSI_handler+0x60>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) {
 80007aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ae:	4847      	ldr	r0, [pc, #284]	; (80008cc <custom_SSI_handler+0x14c>)
 80007b0:	f002 fe02 	bl	80033b8 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d006      	beq.n	80007c8 <custom_SSI_handler+0x48>
          strcpy(pcInsert, "1");
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	4944      	ldr	r1, [pc, #272]	; (80008d0 <custom_SSI_handler+0x150>)
 80007be:	461a      	mov	r2, r3
 80007c0:	460b      	mov	r3, r1
 80007c2:	881b      	ldrh	r3, [r3, #0]
 80007c4:	8013      	strh	r3, [r2, #0]
 80007c6:	e005      	b.n	80007d4 <custom_SSI_handler+0x54>
      } else {
          strcpy(pcInsert, "0");
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	4942      	ldr	r1, [pc, #264]	; (80008d4 <custom_SSI_handler+0x154>)
 80007cc:	461a      	mov	r2, r3
 80007ce:	460b      	mov	r3, r1
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 80007d4:	68b8      	ldr	r0, [r7, #8]
 80007d6:	f7ff fd25 	bl	8000224 <strlen>
 80007da:	4603      	mov	r3, r0
 80007dc:	b29b      	uxth	r3, r3
 80007de:	e06f      	b.n	80008c0 <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[1])==0) {
 80007e0:	4b39      	ldr	r3, [pc, #228]	; (80008c8 <custom_SSI_handler+0x148>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	4619      	mov	r1, r3
 80007e6:	68f8      	ldr	r0, [r7, #12]
 80007e8:	f7ff fd12 	bl	8000210 <strcmp>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d119      	bne.n	8000826 <custom_SSI_handler+0xa6>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 80007f2:	2101      	movs	r1, #1
 80007f4:	4835      	ldr	r0, [pc, #212]	; (80008cc <custom_SSI_handler+0x14c>)
 80007f6:	f002 fddf 	bl	80033b8 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d006      	beq.n	800080e <custom_SSI_handler+0x8e>
          strcpy(pcInsert, "1");
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	4933      	ldr	r1, [pc, #204]	; (80008d0 <custom_SSI_handler+0x150>)
 8000804:	461a      	mov	r2, r3
 8000806:	460b      	mov	r3, r1
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	8013      	strh	r3, [r2, #0]
 800080c:	e005      	b.n	800081a <custom_SSI_handler+0x9a>
      } else {
          strcpy(pcInsert, "0");
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	4930      	ldr	r1, [pc, #192]	; (80008d4 <custom_SSI_handler+0x154>)
 8000812:	461a      	mov	r2, r3
 8000814:	460b      	mov	r3, r1
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 800081a:	68b8      	ldr	r0, [r7, #8]
 800081c:	f7ff fd02 	bl	8000224 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29b      	uxth	r3, r3
 8000824:	e04c      	b.n	80008c0 <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[2])==0) {
 8000826:	4b28      	ldr	r3, [pc, #160]	; (80008c8 <custom_SSI_handler+0x148>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4619      	mov	r1, r3
 800082c:	68f8      	ldr	r0, [r7, #12]
 800082e:	f7ff fcef 	bl	8000210 <strcmp>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d119      	bne.n	800086c <custom_SSI_handler+0xec>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 8000838:	2180      	movs	r1, #128	; 0x80
 800083a:	4824      	ldr	r0, [pc, #144]	; (80008cc <custom_SSI_handler+0x14c>)
 800083c:	f002 fdbc 	bl	80033b8 <HAL_GPIO_ReadPin>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d006      	beq.n	8000854 <custom_SSI_handler+0xd4>
          strcpy(pcInsert, "1");
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	4921      	ldr	r1, [pc, #132]	; (80008d0 <custom_SSI_handler+0x150>)
 800084a:	461a      	mov	r2, r3
 800084c:	460b      	mov	r3, r1
 800084e:	881b      	ldrh	r3, [r3, #0]
 8000850:	8013      	strh	r3, [r2, #0]
 8000852:	e005      	b.n	8000860 <custom_SSI_handler+0xe0>
      } else {
          strcpy(pcInsert, "0");
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	491f      	ldr	r1, [pc, #124]	; (80008d4 <custom_SSI_handler+0x154>)
 8000858:	461a      	mov	r2, r3
 800085a:	460b      	mov	r3, r1
 800085c:	881b      	ldrh	r3, [r3, #0]
 800085e:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 8000860:	68b8      	ldr	r0, [r7, #8]
 8000862:	f7ff fcdf 	bl	8000224 <strlen>
 8000866:	4603      	mov	r3, r0
 8000868:	b29b      	uxth	r3, r3
 800086a:	e029      	b.n	80008c0 <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[3])==0) {
 800086c:	4b16      	ldr	r3, [pc, #88]	; (80008c8 <custom_SSI_handler+0x148>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4619      	mov	r1, r3
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f7ff fccc 	bl	8000210 <strcmp>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d11e      	bne.n	80008bc <custom_SSI_handler+0x13c>
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800087e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000882:	4815      	ldr	r0, [pc, #84]	; (80008d8 <custom_SSI_handler+0x158>)
 8000884:	f002 fd98 	bl	80033b8 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d007      	beq.n	800089e <custom_SSI_handler+0x11e>
          strcpy(pcInsert, "pressed");
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	4912      	ldr	r1, [pc, #72]	; (80008dc <custom_SSI_handler+0x15c>)
 8000892:	461a      	mov	r2, r3
 8000894:	460b      	mov	r3, r1
 8000896:	cb03      	ldmia	r3!, {r0, r1}
 8000898:	6010      	str	r0, [r2, #0]
 800089a:	6051      	str	r1, [r2, #4]
 800089c:	e008      	b.n	80008b0 <custom_SSI_handler+0x130>
      } else {
          strcpy(pcInsert, "released");
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	490f      	ldr	r1, [pc, #60]	; (80008e0 <custom_SSI_handler+0x160>)
 80008a2:	461a      	mov	r2, r3
 80008a4:	460b      	mov	r3, r1
 80008a6:	cb03      	ldmia	r3!, {r0, r1}
 80008a8:	6010      	str	r0, [r2, #0]
 80008aa:	6051      	str	r1, [r2, #4]
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	7213      	strb	r3, [r2, #8]
      }
      return(strlen(pcInsert));
 80008b0:	68b8      	ldr	r0, [r7, #8]
 80008b2:	f7ff fcb7 	bl	8000224 <strlen>
 80008b6:	4603      	mov	r3, r0
 80008b8:	b29b      	uxth	r3, r3
 80008ba:	e001      	b.n	80008c0 <custom_SSI_handler+0x140>
  } else {
      // otherwise, return unrecognized tag error
    return(-1);
 80008bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  }

}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000008 	.word	0x20000008
 80008cc:	40020400 	.word	0x40020400
 80008d0:	08019e5c 	.word	0x08019e5c
 80008d4:	08019e60 	.word	0x08019e60
 80008d8:	40020800 	.word	0x40020800
 80008dc:	08019e64 	.word	0x08019e64
 80008e0:	08019e6c 	.word	0x08019e6c

080008e4 <setRED>:
 * request being ignored.
 *
 */

const char * setRED(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	603b      	str	r3, [r7, #0]

	  if (iNumParams==1) {
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d10c      	bne.n	8000912 <setRED+0x2e>
	        setPWM(redLed, atoi(pcValue[0]));
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <setRED+0x44>)
 80008fa:	781c      	ldrb	r4, [r3, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4618      	mov	r0, r3
 8000902:	f018 f9dd 	bl	8018cc0 <atoi>
 8000906:	4603      	mov	r3, r0
 8000908:	4619      	mov	r1, r3
 800090a:	4620      	mov	r0, r4
 800090c:	f7ff fe80 	bl	8000610 <setPWM>
 8000910:	e005      	b.n	800091e <setRED+0x3a>
		}
	  else{
		  setPWM(redLed,3);
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <setRED+0x44>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2103      	movs	r1, #3
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe79 	bl	8000610 <setPWM>
	  }
    return("/index.shtml");
 800091e:	4b03      	ldr	r3, [pc, #12]	; (800092c <setRED+0x48>)
}
 8000920:	4618      	mov	r0, r3
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	bd90      	pop	{r4, r7, pc}
 8000928:	20000458 	.word	0x20000458
 800092c:	08019e78 	.word	0x08019e78

08000930 <setGRN>:

const char * setGRN(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
 800093c:	603b      	str	r3, [r7, #0]

    if (iNumParams==1) {
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d10c      	bne.n	800095e <setGRN+0x2e>
        setPWM(greenLed, atoi(pcValue[0]));
 8000944:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <setGRN+0x44>)
 8000946:	781c      	ldrb	r4, [r3, #0]
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4618      	mov	r0, r3
 800094e:	f018 f9b7 	bl	8018cc0 <atoi>
 8000952:	4603      	mov	r3, r0
 8000954:	4619      	mov	r1, r3
 8000956:	4620      	mov	r0, r4
 8000958:	f7ff fe5a 	bl	8000610 <setPWM>
 800095c:	e005      	b.n	800096a <setGRN+0x3a>
	}else{
		setPWM(greenLed, 3);
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <setGRN+0x44>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2103      	movs	r1, #3
 8000964:	4618      	mov	r0, r3
 8000966:	f7ff fe53 	bl	8000610 <setPWM>
	}

    return("/index.shtml");
 800096a:	4b03      	ldr	r3, [pc, #12]	; (8000978 <setGRN+0x48>)
}
 800096c:	4618      	mov	r0, r3
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	08019e78 	.word	0x08019e78

0800097c <setBLU>:

const char * setBLU(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]
    if (iNumParams==1) {
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d11a      	bne.n	80009c6 <setBLU+0x4a>
        if (atoi(pcValue[0])==1) {
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4618      	mov	r0, r3
 8000996:	f018 f993 	bl	8018cc0 <atoi>
 800099a:	4603      	mov	r3, r0
 800099c:	2b01      	cmp	r3, #1
 800099e:	d10c      	bne.n	80009ba <setBLU+0x3e>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009a6:	480a      	ldr	r0, [pc, #40]	; (80009d0 <setBLU+0x54>)
 80009a8:	f002 fd1e 	bl	80033e8 <HAL_GPIO_WritePin>
            setPWM(redLed, 6);
 80009ac:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <setBLU+0x58>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2106      	movs	r1, #6
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe2c 	bl	8000610 <setPWM>
 80009b8:	e005      	b.n	80009c6 <setBLU+0x4a>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c0:	4803      	ldr	r0, [pc, #12]	; (80009d0 <setBLU+0x54>)
 80009c2:	f002 fd11 	bl	80033e8 <HAL_GPIO_WritePin>
        }
    }
    return("/index.shtml");
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <setBLU+0x5c>)
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	40020400 	.word	0x40020400
 80009d4:	20000458 	.word	0x20000458
 80009d8:	08019e78 	.word	0x08019e78

080009dc <setALL>:

const char * setALL(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b087      	sub	sp, #28
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
 80009e8:	603b      	str	r3, [r7, #0]
    // Warning: use atoi_r instead of atoi in case you also use this function inside a RTOS task
    for (int i=0; i<iNumParams; i++) {
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	e05c      	b.n	8000aaa <setALL+0xce>
        if (strcmp(pcParam[i],"red")==0) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	4413      	add	r3, r2
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4930      	ldr	r1, [pc, #192]	; (8000abc <setALL+0xe0>)
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc07 	bl	8000210 <strcmp>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10f      	bne.n	8000a28 <setALL+0x4c>

        	setPWM(redLed, atoi(pcValue[i]));
 8000a08:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <setALL+0xe4>)
 8000a0a:	781c      	ldrb	r4, [r3, #0]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	683a      	ldr	r2, [r7, #0]
 8000a12:	4413      	add	r3, r2
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4618      	mov	r0, r3
 8000a18:	f018 f952 	bl	8018cc0 <atoi>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4620      	mov	r0, r4
 8000a22:	f7ff fdf5 	bl	8000610 <setPWM>
 8000a26:	e03d      	b.n	8000aa4 <setALL+0xc8>

        } else if (strcmp(pcParam[i],"green")==0) {
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4924      	ldr	r1, [pc, #144]	; (8000ac4 <setALL+0xe8>)
 8000a34:	4618      	mov	r0, r3
 8000a36:	f7ff fbeb 	bl	8000210 <strcmp>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d10f      	bne.n	8000a60 <setALL+0x84>

			setPWM(greenLed, atoi(pcValue[i]));
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <setALL+0xec>)
 8000a42:	781c      	ldrb	r4, [r3, #0]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	683a      	ldr	r2, [r7, #0]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f018 f936 	bl	8018cc0 <atoi>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4619      	mov	r1, r3
 8000a58:	4620      	mov	r0, r4
 8000a5a:	f7ff fdd9 	bl	8000610 <setPWM>
 8000a5e:	e021      	b.n	8000aa4 <setALL+0xc8>


        } else if (strcmp(pcParam[i],"blue")==0) {
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	4413      	add	r3, r2
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4918      	ldr	r1, [pc, #96]	; (8000acc <setALL+0xf0>)
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fbcf 	bl	8000210 <strcmp>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d115      	bne.n	8000aa4 <setALL+0xc8>
            if (atoi(pcValue[i])==1) {
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f018 f91c 	bl	8018cc0 <atoi>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d105      	bne.n	8000a9a <setALL+0xbe>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2180      	movs	r1, #128	; 0x80
 8000a92:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <setALL+0xf4>)
 8000a94:	f002 fca8 	bl	80033e8 <HAL_GPIO_WritePin>
 8000a98:	e004      	b.n	8000aa4 <setALL+0xc8>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	2180      	movs	r1, #128	; 0x80
 8000a9e:	480c      	ldr	r0, [pc, #48]	; (8000ad0 <setALL+0xf4>)
 8000aa0:	f002 fca2 	bl	80033e8 <HAL_GPIO_WritePin>
    for (int i=0; i<iNumParams; i++) {
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	697a      	ldr	r2, [r7, #20]
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	429a      	cmp	r2, r3
 8000ab0:	db9e      	blt.n	80009f0 <setALL+0x14>
            }
        } // else invalid parameters are simply ignored in this example
    }
    // we return the status page as confirmation in this example
    return("/index.shtml");
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <setALL+0xf8>)
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd90      	pop	{r4, r7, pc}
 8000abc:	08019e88 	.word	0x08019e88
 8000ac0:	20000458 	.word	0x20000458
 8000ac4:	08019e8c 	.word	0x08019e8c
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	08019e94 	.word	0x08019e94
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	08019e78 	.word	0x08019e78

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b5b0      	push	{r4, r5, r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f000 ff3d 	bl	800195c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 f81f 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f000 f9bd 	bl	8000e64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000aea:	f000 f95d 	bl	8000da8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000aee:	f000 f98b 	bl	8000e08 <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 8000af2:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <main+0x44>)
 8000af4:	1d3c      	adds	r4, r7, #4
 8000af6:	461d      	mov	r5, r3
 8000af8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000afc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f006 fd51 	bl	80075b0 <osThreadCreate>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a03      	ldr	r2, [pc, #12]	; (8000b20 <main+0x48>)
 8000b12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b14:	f006 fd35 	bl	8007582 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <main+0x40>
 8000b1a:	bf00      	nop
 8000b1c:	08019ee0 	.word	0x08019ee0
 8000b20:	20000a84 	.word	0x20000a84

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f018 faa7 	bl	8019086 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b48:	f002 fdb0 	bl	80036ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4c:	4b27      	ldr	r3, [pc, #156]	; (8000bec <SystemClock_Config+0xc8>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a26      	ldr	r2, [pc, #152]	; (8000bec <SystemClock_Config+0xc8>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b24      	ldr	r3, [pc, #144]	; (8000bec <SystemClock_Config+0xc8>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b64:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b6c:	4a20      	ldr	r2, [pc, #128]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1e      	ldr	r3, [pc, #120]	; (8000bf0 <SystemClock_Config+0xcc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b94:	2304      	movs	r3, #4
 8000b96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b98:	2348      	movs	r3, #72	; 0x48
 8000b9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba4:	f107 0320 	add.w	r3, r7, #32
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f002 fd8f 	bl	80036cc <HAL_RCC_OscConfig>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bb4:	f000 fa31 	bl	800101a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb8:	230f      	movs	r3, #15
 8000bba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 f81d 	bl	8003c14 <HAL_RCC_ClockConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000be0:	f000 fa1b 	bl	800101a <Error_Handler>
  }
}
 8000be4:	bf00      	nop
 8000be6:	3750      	adds	r7, #80	; 0x50
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40007000 	.word	0x40007000

08000bf4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c26:	4b2d      	ldr	r3, [pc, #180]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c28:	4a2d      	ldr	r2, [pc, #180]	; (8000ce0 <MX_TIM3_Init+0xec>)
 8000c2a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c2c:	4b2b      	ldr	r3, [pc, #172]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b2a      	ldr	r3, [pc, #168]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000c38:	4b28      	ldr	r3, [pc, #160]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c3e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b26      	ldr	r3, [pc, #152]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c46:	4b25      	ldr	r3, [pc, #148]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c4c:	4823      	ldr	r0, [pc, #140]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c4e:	f003 fe29 	bl	80048a4 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000c58:	f000 f9df 	bl	800101a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c66:	4619      	mov	r1, r3
 8000c68:	481c      	ldr	r0, [pc, #112]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c6a:	f004 fa7b 	bl	8005164 <HAL_TIM_ConfigClockSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000c74:	f000 f9d1 	bl	800101a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c78:	4818      	ldr	r0, [pc, #96]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c7a:	f003 fee3 	bl	8004a44 <HAL_TIM_PWM_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000c84:	f000 f9c9 	bl	800101a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	4811      	ldr	r0, [pc, #68]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000c98:	f004 ff14 	bl	8005ac4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000ca2:	f000 f9ba 	bl	800101a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca6:	2360      	movs	r3, #96	; 0x60
 8000ca8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2208      	movs	r2, #8
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4807      	ldr	r0, [pc, #28]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000cbe:	f004 f93d 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000cc8:	f000 f9a7 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ccc:	4803      	ldr	r0, [pc, #12]	; (8000cdc <MX_TIM3_Init+0xe8>)
 8000cce:	f000 fa05 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000cd2:	bf00      	nop
 8000cd4:	3738      	adds	r7, #56	; 0x38
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000045c 	.word	0x2000045c
 8000ce0:	40000400 	.word	0x40000400

08000ce4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0320 	add.w	r3, r7, #32
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	611a      	str	r2, [r3, #16]
 8000d06:	615a      	str	r2, [r3, #20]
 8000d08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000d0a:	4b25      	ldr	r3, [pc, #148]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d0c:	4a25      	ldr	r2, [pc, #148]	; (8000da4 <MX_TIM12_Init+0xc0>)
 8000d0e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d16:	4b22      	ldr	r3, [pc, #136]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d22:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d24:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000d30:	481b      	ldr	r0, [pc, #108]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d32:	f003 fdb7 	bl	80048a4 <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000d3c:	f000 f96d 	bl	800101a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000d46:	f107 0320 	add.w	r3, r7, #32
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4814      	ldr	r0, [pc, #80]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d4e:	f004 fa09 	bl	8005164 <HAL_TIM_ConfigClockSource>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000d58:	f000 f95f 	bl	800101a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d5e:	f003 fe71 	bl	8004a44 <HAL_TIM_PWM_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000d68:	f000 f957 	bl	800101a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d6c:	2360      	movs	r3, #96	; 0x60
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	2200      	movs	r2, #0
 8000d80:	4619      	mov	r1, r3
 8000d82:	4807      	ldr	r0, [pc, #28]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d84:	f004 f8da 	bl	8004f3c <HAL_TIM_PWM_ConfigChannel>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000d8e:	f000 f944 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000d92:	4803      	ldr	r0, [pc, #12]	; (8000da0 <MX_TIM12_Init+0xbc>)
 8000d94:	f000 f9a2 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000d98:	bf00      	nop
 8000d9a:	3730      	adds	r7, #48	; 0x30
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	200004a8 	.word	0x200004a8
 8000da4:	40001800 	.word	0x40001800

08000da8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dae:	4a15      	ldr	r2, [pc, #84]	; (8000e04 <MX_USART3_UART_Init+0x5c>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000db2:	4b13      	ldr	r3, [pc, #76]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USART3_UART_Init+0x58>)
 8000dec:	f004 ff16 	bl	8005c1c <HAL_UART_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000df6:	f000 f910 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200004f4 	.word	0x200004f4
 8000e04:	40004800 	.word	0x40004800

08000e08 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e0e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e16:	2206      	movs	r2, #6
 8000e18:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e28:	2202      	movs	r2, #2
 8000e2a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000e38:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000e4c:	f002 fae5 	bl	800341a <HAL_PCD_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000e56:	f000 f8e0 	bl	800101a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	2000057c 	.word	0x2000057c

08000e64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08c      	sub	sp, #48	; 0x30
 8000e68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7a:	4b46      	ldr	r3, [pc, #280]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000e80:	f043 0304 	orr.w	r3, r3, #4
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	4a3f      	ldr	r2, [pc, #252]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000e98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a39      	ldr	r2, [pc, #228]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	4a33      	ldr	r2, [pc, #204]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a2d      	ldr	r2, [pc, #180]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ee0:	f043 0308 	orr.w	r3, r3, #8
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <MX_GPIO_Init+0x130>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2140      	movs	r1, #64	; 0x40
 8000f0e:	4822      	ldr	r0, [pc, #136]	; (8000f98 <MX_GPIO_Init+0x134>)
 8000f10:	f002 fa6a 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	4820      	ldr	r0, [pc, #128]	; (8000f9c <MX_GPIO_Init+0x138>)
 8000f1a:	f002 fa65 	bl	80033e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f2e:	f107 031c 	add.w	r3, r7, #28
 8000f32:	4619      	mov	r1, r3
 8000f34:	481a      	ldr	r0, [pc, #104]	; (8000fa0 <MX_GPIO_Init+0x13c>)
 8000f36:	f002 f893 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_GPIO_Init+0x134>)
 8000f52:	f002 f885 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <MX_GPIO_Init+0x134>)
 8000f6a:	f002 f879 	bl	8003060 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	f107 031c 	add.w	r3, r7, #28
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_GPIO_Init+0x138>)
 8000f86:	f002 f86b 	bl	8003060 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3730      	adds	r7, #48	; 0x30
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40020800 	.word	0x40020800

08000fa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000fac:	f005 fd7c 	bl	8006aa8 <MX_LWIP_Init>
  MX_TIM3_Init();
 8000fb0:	f7ff fe20 	bl	8000bf4 <MX_TIM3_Init>
  MX_TIM12_Init();
 8000fb4:	f7ff fe96 	bl	8000ce4 <MX_TIM12_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fb8:	2108      	movs	r1, #8
 8000fba:	480b      	ldr	r0, [pc, #44]	; (8000fe8 <StartDefaultTask+0x44>)
 8000fbc:	f003 fda4 	bl	8004b08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	480a      	ldr	r0, [pc, #40]	; (8000fec <StartDefaultTask+0x48>)
 8000fc4:	f003 fda0 	bl	8004b08 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 5 */
  //set up the web server
  http_set_ssi_handler(custom_SSI_handler, custom_SSI_tags, custom_SSI_tag_num);
 8000fc8:	2204      	movs	r2, #4
 8000fca:	4909      	ldr	r1, [pc, #36]	; (8000ff0 <StartDefaultTask+0x4c>)
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <StartDefaultTask+0x50>)
 8000fce:	f00a fe27 	bl	800bc20 <http_set_ssi_handler>
  http_set_cgi_handlers(custom_CGI_handlers, custon_CGI_handler_num);
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	4808      	ldr	r0, [pc, #32]	; (8000ff8 <StartDefaultTask+0x54>)
 8000fd6:	f00a fe43 	bl	800bc60 <http_set_cgi_handlers>
  //start the web server after MX_LWIP_Init() is called
  httpd_init();
 8000fda:	f00a fe01 	bl	800bbe0 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f006 fb32 	bl	8007648 <osDelay>
 8000fe4:	e7fb      	b.n	8000fde <StartDefaultTask+0x3a>
 8000fe6:	bf00      	nop
 8000fe8:	2000045c 	.word	0x2000045c
 8000fec:	200004a8 	.word	0x200004a8
 8000ff0:	20000008 	.word	0x20000008
 8000ff4:	08000781 	.word	0x08000781
 8000ff8:	0801d0b8 	.word	0x0801d0b8

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fcb3 	bl	8001978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800101e:	b672      	cpsid	i
}
 8001020:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001022:	e7fe      	b.n	8001022 <Error_Handler+0x8>

08001024 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_MspInit+0x4c>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_MspInit+0x4c>)
 8001030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001034:	6413      	str	r3, [r2, #64]	; 0x40
 8001036:	4b0e      	ldr	r3, [pc, #56]	; (8001070 <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_MspInit+0x4c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001046:	4a0a      	ldr	r2, [pc, #40]	; (8001070 <HAL_MspInit+0x4c>)
 8001048:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104c:	6453      	str	r3, [r2, #68]	; 0x44
 800104e:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_MspInit+0x4c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	210f      	movs	r1, #15
 800105e:	f06f 0001 	mvn.w	r0, #1
 8001062:	f000 fd85 	bl	8001b70 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_TIM_Base_MspInit+0x5c>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d10c      	bne.n	80010a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800109e:	e010      	b.n	80010c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM12)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <HAL_TIM_Base_MspInit+0x64>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10b      	bne.n	80010c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 80010b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <HAL_TIM_Base_MspInit+0x60>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40000400 	.word	0x40000400
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40001800 	.word	0x40001800

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a22      	ldr	r2, [pc, #136]	; (8001184 <HAL_TIM_MspPostInit+0xa8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d11c      	bne.n	8001138 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b22      	ldr	r3, [pc, #136]	; (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a21      	ldr	r2, [pc, #132]	; (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001104:	f043 0302 	orr.w	r3, r3, #2
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_TIM_MspPostInit+0xac>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001122:	2300      	movs	r3, #0
 8001124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001126:	2302      	movs	r3, #2
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4816      	ldr	r0, [pc, #88]	; (800118c <HAL_TIM_MspPostInit+0xb0>)
 8001132:	f001 ff95 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001136:	e021      	b.n	800117c <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM12)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <HAL_TIM_MspPostInit+0xb4>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d11c      	bne.n	800117c <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001142:	4b11      	ldr	r3, [pc, #68]	; (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001148:	f043 0302 	orr.w	r3, r3, #2
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_TIM_MspPostInit+0xac>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800115a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800115e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001160:	2302      	movs	r3, #2
 8001162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800116c:	2309      	movs	r3, #9
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <HAL_TIM_MspPostInit+0xb0>)
 8001178:	f001 ff72 	bl	8003060 <HAL_GPIO_Init>
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40000400 	.word	0x40000400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400
 8001190:	40001800 	.word	0x40001800

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b0aa      	sub	sp, #168	; 0xa8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2284      	movs	r2, #132	; 0x84
 80011b2:	2100      	movs	r1, #0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f017 ff66 	bl	8019086 <memset>
  if(huart->Instance==USART3)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a22      	ldr	r2, [pc, #136]	; (8001248 <HAL_UART_MspInit+0xb4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d13c      	bne.n	800123e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80011c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4618      	mov	r0, r3
 80011d4:	f002 ff76 	bl	80040c4 <HAL_RCCEx_PeriphCLKConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011de:	f7ff ff1c 	bl	800101a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80011e2:	4b1a      	ldr	r3, [pc, #104]	; (800124c <HAL_UART_MspInit+0xb8>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a19      	ldr	r2, [pc, #100]	; (800124c <HAL_UART_MspInit+0xb8>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_UART_MspInit+0xb8>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_UART_MspInit+0xb8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <HAL_UART_MspInit+0xb8>)
 8001200:	f043 0308 	orr.w	r3, r3, #8
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_UART_MspInit+0xb8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0308 	and.w	r3, r3, #8
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001212:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001216:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800122c:	2307      	movs	r3, #7
 800122e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001232:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001236:	4619      	mov	r1, r3
 8001238:	4805      	ldr	r0, [pc, #20]	; (8001250 <HAL_UART_MspInit+0xbc>)
 800123a:	f001 ff11 	bl	8003060 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800123e:	bf00      	nop
 8001240:	37a8      	adds	r7, #168	; 0xa8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40004800 	.word	0x40004800
 800124c:	40023800 	.word	0x40023800
 8001250:	40020c00 	.word	0x40020c00

08001254 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b0ac      	sub	sp, #176	; 0xb0
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800125c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]
 800126a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	2284      	movs	r2, #132	; 0x84
 8001272:	2100      	movs	r1, #0
 8001274:	4618      	mov	r0, r3
 8001276:	f017 ff06 	bl	8019086 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001282:	d159      	bne.n	8001338 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001284:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001288:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800128a:	2300      	movs	r3, #0
 800128c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	4618      	mov	r0, r3
 8001296:	f002 ff15 	bl	80040c4 <HAL_RCCEx_PeriphCLKConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80012a0:	f7ff febb 	bl	800101a <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b26      	ldr	r3, [pc, #152]	; (8001340 <HAL_PCD_MspInit+0xec>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	4a25      	ldr	r2, [pc, #148]	; (8001340 <HAL_PCD_MspInit+0xec>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6313      	str	r3, [r2, #48]	; 0x30
 80012b0:	4b23      	ldr	r3, [pc, #140]	; (8001340 <HAL_PCD_MspInit+0xec>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
 80012ba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80012bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80012c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80012d6:	230a      	movs	r3, #10
 80012d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4818      	ldr	r0, [pc, #96]	; (8001344 <HAL_PCD_MspInit+0xf0>)
 80012e4:	f001 febc 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80012e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f6:	2300      	movs	r3, #0
 80012f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001300:	4619      	mov	r1, r3
 8001302:	4810      	ldr	r0, [pc, #64]	; (8001344 <HAL_PCD_MspInit+0xf0>)
 8001304:	f001 feac 	bl	8003060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001308:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <HAL_PCD_MspInit+0xec>)
 800130a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800130c:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <HAL_PCD_MspInit+0xec>)
 800130e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001312:	6353      	str	r3, [r2, #52]	; 0x34
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_PCD_MspInit+0xec>)
 8001316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001318:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <HAL_PCD_MspInit+0xec>)
 8001322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <HAL_PCD_MspInit+0xec>)
 8001326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800132a:	6453      	str	r3, [r2, #68]	; 0x44
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_PCD_MspInit+0xec>)
 800132e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001338:	bf00      	nop
 800133a:	37b0      	adds	r7, #176	; 0xb0
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000

08001348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08e      	sub	sp, #56	; 0x38
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <HAL_InitTick+0xe4>)
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	4a33      	ldr	r2, [pc, #204]	; (800142c <HAL_InitTick+0xe4>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	6413      	str	r3, [r2, #64]	; 0x40
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_InitTick+0xe4>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001370:	f107 0210 	add.w	r2, r7, #16
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f002 fe70 	bl	8004060 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001386:	2b00      	cmp	r3, #0
 8001388:	d103      	bne.n	8001392 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800138a:	f002 fe41 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 800138e:	6378      	str	r0, [r7, #52]	; 0x34
 8001390:	e004      	b.n	800139c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001392:	f002 fe3d 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8001396:	4603      	mov	r3, r0
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800139c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_InitTick+0xe8>)
 80013a0:	fba2 2303 	umull	r2, r3, r2, r3
 80013a4:	0c9b      	lsrs	r3, r3, #18
 80013a6:	3b01      	subs	r3, #1
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <HAL_InitTick+0xec>)
 80013ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <HAL_InitTick+0xec>)
 80013b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80013ba:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <HAL_InitTick+0xec>)
 80013bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013be:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_InitTick+0xec>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c6:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <HAL_InitTick+0xec>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b19      	ldr	r3, [pc, #100]	; (8001434 <HAL_InitTick+0xec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80013d2:	4818      	ldr	r0, [pc, #96]	; (8001434 <HAL_InitTick+0xec>)
 80013d4:	f003 fa66 	bl	80048a4 <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80013de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d11b      	bne.n	800141e <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80013e6:	4813      	ldr	r0, [pc, #76]	; (8001434 <HAL_InitTick+0xec>)
 80013e8:	f003 fab4 	bl	8004954 <HAL_TIM_Base_Start_IT>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80013f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d111      	bne.n	800141e <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013fa:	201c      	movs	r0, #28
 80013fc:	f000 fbd4 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b0f      	cmp	r3, #15
 8001404:	d808      	bhi.n	8001418 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001406:	2200      	movs	r2, #0
 8001408:	6879      	ldr	r1, [r7, #4]
 800140a:	201c      	movs	r0, #28
 800140c:	f000 fbb0 	bl	8001b70 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001410:	4a09      	ldr	r2, [pc, #36]	; (8001438 <HAL_InitTick+0xf0>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e002      	b.n	800141e <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800141e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001422:	4618      	mov	r0, r3
 8001424:	3738      	adds	r7, #56	; 0x38
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	431bde83 	.word	0x431bde83
 8001434:	20000a88 	.word	0x20000a88
 8001438:	2000001c 	.word	0x2000001c

0800143c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <NMI_Handler+0x4>

08001442 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001446:	e7fe      	b.n	8001446 <HardFault_Handler+0x4>

08001448 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800144c:	e7fe      	b.n	800144c <MemManage_Handler+0x4>

0800144e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <BusFault_Handler+0x4>

08001454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <UsageFault_Handler+0x4>

0800145a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <TIM2_IRQHandler+0x10>)
 800146e:	f003 fc45 	bl	8004cfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000a88 	.word	0x20000a88

0800147c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <ETH_IRQHandler+0x10>)
 8001482:	f000 ff19 	bl	80022b8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200054b4 	.word	0x200054b4

08001490 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return 1;
 8001494:	2301      	movs	r3, #1
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <_kill>:

int _kill(int pid, int sig)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014aa:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <_kill+0x20>)
 80014ac:	2216      	movs	r2, #22
 80014ae:	601a      	str	r2, [r3, #0]
  return -1;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	2000d06c 	.word	0x2000d06c

080014c4 <_exit>:

void _exit (int status)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014cc:	f04f 31ff 	mov.w	r1, #4294967295
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff ffe5 	bl	80014a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014d6:	e7fe      	b.n	80014d6 <_exit+0x12>

080014d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014ea:	f3af 8000 	nop.w
 80014ee:	4601      	mov	r1, r0
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	1c5a      	adds	r2, r3, #1
 80014f4:	60ba      	str	r2, [r7, #8]
 80014f6:	b2ca      	uxtb	r2, r1
 80014f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	429a      	cmp	r2, r3
 8001506:	dbf0      	blt.n	80014ea <_read+0x12>
  }

  return len;
 8001508:	687b      	ldr	r3, [r7, #4]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3718      	adds	r7, #24
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b086      	sub	sp, #24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e009      	b.n	8001538 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	60ba      	str	r2, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbf1      	blt.n	8001524 <_write+0x12>
  }
  return len;
 8001540:	687b      	ldr	r3, [r7, #4]
}
 8001542:	4618      	mov	r0, r3
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <_close>:

int _close(int file)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001556:	4618      	mov	r0, r3
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
 800156a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001572:	605a      	str	r2, [r3, #4]
  return 0;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_isatty>:

int _isatty(int file)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d205      	bcs.n	80015f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <_sbrk+0x6c>)
 80015e6:	220c      	movs	r2, #12
 80015e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
 80015ee:	e009      	b.n	8001604 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f0:	4b09      	ldr	r3, [pc, #36]	; (8001618 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	4a06      	ldr	r2, [pc, #24]	; (8001618 <_sbrk+0x64>)
 8001600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001602:	68fb      	ldr	r3, [r7, #12]
}
 8001604:	4618      	mov	r0, r3
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	20050000 	.word	0x20050000
 8001614:	00000400 	.word	0x00000400
 8001618:	20000ad4 	.word	0x20000ad4
 800161c:	2000d1c0 	.word	0x2000d1c0
 8001620:	2000d06c 	.word	0x2000d06c

08001624 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <SystemInit+0x20>)
 800162a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162e:	4a05      	ldr	r2, [pc, #20]	; (8001644 <SystemInit+0x20>)
 8001630:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001634:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000ed00 	.word	0xe000ed00

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800164c:	480d      	ldr	r0, [pc, #52]	; (8001684 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164e:	490e      	ldr	r1, [pc, #56]	; (8001688 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001650:	4a0e      	ldr	r2, [pc, #56]	; (800168c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001664:	4c0b      	ldr	r4, [pc, #44]	; (8001694 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001672:	f7ff ffd7 	bl	8001624 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f017 fd79 	bl	801916c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7ff fa2d 	bl	8000ad8 <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001688:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 800168c:	0801f7d4 	.word	0x0801f7d4
  ldr r2, =_sbss
 8001690:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001694:	2000d1bc 	.word	0x2000d1bc

08001698 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC_IRQHandler>

0800169a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00b      	beq.n	80016c2 <LAN8742_RegisterBusIO+0x28>
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <LAN8742_RegisterBusIO+0x28>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <LAN8742_RegisterBusIO+0x28>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	691b      	ldr	r3, [r3, #16]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d102      	bne.n	80016c8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e014      	b.n	80016f2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	689a      	ldr	r2, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	2300      	movs	r3, #0
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	2300      	movs	r3, #0
 8001710:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d17c      	bne.n	8001818 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d002      	beq.n	800172c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2220      	movs	r2, #32
 8001730:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]
 8001736:	e01c      	b.n	8001772 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	f107 0208 	add.w	r2, r7, #8
 8001740:	2112      	movs	r1, #18
 8001742:	6978      	ldr	r0, [r7, #20]
 8001744:	4798      	blx	r3
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	da03      	bge.n	8001754 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800174c:	f06f 0304 	mvn.w	r3, #4
 8001750:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001752:	e00b      	b.n	800176c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f003 031f 	and.w	r3, r3, #31
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	429a      	cmp	r2, r3
 800175e:	d105      	bne.n	800176c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
         break;
 800176a:	e005      	b.n	8001778 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3301      	adds	r3, #1
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2b1f      	cmp	r3, #31
 8001776:	d9df      	bls.n	8001738 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b1f      	cmp	r3, #31
 800177e:	d902      	bls.n	8001786 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001780:	f06f 0302 	mvn.w	r3, #2
 8001784:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d145      	bne.n	8001818 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6810      	ldr	r0, [r2, #0]
 8001794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001798:	2100      	movs	r1, #0
 800179a:	4798      	blx	r3
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	db37      	blt.n	8001812 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6810      	ldr	r0, [r2, #0]
 80017aa:	f107 0208 	add.w	r2, r7, #8
 80017ae:	2100      	movs	r1, #0
 80017b0:	4798      	blx	r3
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	db28      	blt.n	800180a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4798      	blx	r3
 80017be:	4603      	mov	r3, r0
 80017c0:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017c2:	e01c      	b.n	80017fe <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4798      	blx	r3
 80017ca:	4603      	mov	r3, r0
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017d6:	d80e      	bhi.n	80017f6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6810      	ldr	r0, [r2, #0]
 80017e0:	f107 0208 	add.w	r2, r7, #8
 80017e4:	2100      	movs	r1, #0
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da07      	bge.n	80017fe <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80017ee:	f06f 0304 	mvn.w	r3, #4
 80017f2:	613b      	str	r3, [r7, #16]
                 break;
 80017f4:	e010      	b.n	8001818 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80017f6:	f06f 0301 	mvn.w	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
               break;
 80017fc:	e00c      	b.n	8001818 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1dd      	bne.n	80017c4 <LAN8742_Init+0xc6>
 8001808:	e006      	b.n	8001818 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800180a:	f06f 0304 	mvn.w	r3, #4
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	e002      	b.n	8001818 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001812:	f06f 0303 	mvn.w	r3, #3
 8001816:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d112      	bne.n	8001844 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4798      	blx	r3
 8001824:	4603      	mov	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001828:	bf00      	nop
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	4798      	blx	r3
 8001830:	4603      	mov	r3, r0
 8001832:	461a      	mov	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800183c:	d9f5      	bls.n	800182a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001844:	693b      	ldr	r3, [r7, #16]
 }
 8001846:	4618      	mov	r0, r3
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}

0800184e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6810      	ldr	r0, [r2, #0]
 8001862:	f107 020c 	add.w	r2, r7, #12
 8001866:	2101      	movs	r1, #1
 8001868:	4798      	blx	r3
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	da02      	bge.n	8001876 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001870:	f06f 0304 	mvn.w	r3, #4
 8001874:	e06e      	b.n	8001954 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	6810      	ldr	r0, [r2, #0]
 800187e:	f107 020c 	add.w	r2, r7, #12
 8001882:	2101      	movs	r1, #1
 8001884:	4798      	blx	r3
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	da02      	bge.n	8001892 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800188c:	f06f 0304 	mvn.w	r3, #4
 8001890:	e060      	b.n	8001954 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800189c:	2301      	movs	r3, #1
 800189e:	e059      	b.n	8001954 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	6810      	ldr	r0, [r2, #0]
 80018a8:	f107 020c 	add.w	r2, r7, #12
 80018ac:	2100      	movs	r1, #0
 80018ae:	4798      	blx	r3
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da02      	bge.n	80018bc <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018b6:	f06f 0304 	mvn.w	r3, #4
 80018ba:	e04b      	b.n	8001954 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d11b      	bne.n	80018fe <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d006      	beq.n	80018de <LAN8742_GetLinkState+0x90>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80018da:	2302      	movs	r3, #2
 80018dc:	e03a      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e033      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80018f6:	2304      	movs	r3, #4
 80018f8:	e02c      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80018fa:	2305      	movs	r3, #5
 80018fc:	e02a      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6810      	ldr	r0, [r2, #0]
 8001906:	f107 020c 	add.w	r2, r7, #12
 800190a:	211f      	movs	r1, #31
 800190c:	4798      	blx	r3
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	da02      	bge.n	800191a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001914:	f06f 0304 	mvn.w	r3, #4
 8001918:	e01c      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001924:	2306      	movs	r3, #6
 8001926:	e015      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 031c 	and.w	r3, r3, #28
 800192e:	2b18      	cmp	r3, #24
 8001930:	d101      	bne.n	8001936 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001932:	2302      	movs	r3, #2
 8001934:	e00e      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f003 031c 	and.w	r3, r3, #28
 800193c:	2b08      	cmp	r3, #8
 800193e:	d101      	bne.n	8001944 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001940:	2303      	movs	r3, #3
 8001942:	e007      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 031c 	and.w	r3, r3, #28
 800194a:	2b14      	cmp	r3, #20
 800194c:	d101      	bne.n	8001952 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800194e:	2304      	movs	r3, #4
 8001950:	e000      	b.n	8001954 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001952:	2305      	movs	r3, #5
    }				
  }
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001960:	2003      	movs	r0, #3
 8001962:	f000 f8fa 	bl	8001b5a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001966:	200f      	movs	r0, #15
 8001968:	f7ff fcee 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800196c:	f7ff fb5a 	bl	8001024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <HAL_IncTick+0x20>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b06      	ldr	r3, [pc, #24]	; (800199c <HAL_IncTick+0x24>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a04      	ldr	r2, [pc, #16]	; (800199c <HAL_IncTick+0x24>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	20000020 	.word	0x20000020
 800199c:	20000ad8 	.word	0x20000ad8

080019a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return uwTick;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_GetTick+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000ad8 	.word	0x20000ad8

080019b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff ffee 	bl	80019a0 <HAL_GetTick>
 80019c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019d0:	d005      	beq.n	80019de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_Delay+0x44>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	bf00      	nop
 80019e0:	f7ff ffde 	bl	80019a0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d8f7      	bhi.n	80019e0 <HAL_Delay+0x28>
  {
  }
}
 80019f0:	bf00      	nop
 80019f2:	bf00      	nop
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000020 	.word	0x20000020

08001a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a10:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <__NVIC_SetPriorityGrouping+0x40>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <__NVIC_SetPriorityGrouping+0x40>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000ed00 	.word	0xe000ed00
 8001a44:	05fa0000 	.word	0x05fa0000

08001a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a4c:	4b04      	ldr	r3, [pc, #16]	; (8001a60 <__NVIC_GetPriorityGrouping+0x18>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	0a1b      	lsrs	r3, r3, #8
 8001a52:	f003 0307 	and.w	r3, r3, #7
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	f003 021f 	and.w	r2, r3, #31
 8001a7c:	4907      	ldr	r1, [pc, #28]	; (8001a9c <__NVIC_EnableIRQ+0x38>)
 8001a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a82:	095b      	lsrs	r3, r3, #5
 8001a84:	2001      	movs	r0, #1
 8001a86:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	e000e100 	.word	0xe000e100

08001aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	6039      	str	r1, [r7, #0]
 8001aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0a      	blt.n	8001aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	490c      	ldr	r1, [pc, #48]	; (8001aec <__NVIC_SetPriority+0x4c>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	0112      	lsls	r2, r2, #4
 8001ac0:	b2d2      	uxtb	r2, r2
 8001ac2:	440b      	add	r3, r1
 8001ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac8:	e00a      	b.n	8001ae0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4908      	ldr	r1, [pc, #32]	; (8001af0 <__NVIC_SetPriority+0x50>)
 8001ad0:	79fb      	ldrb	r3, [r7, #7]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	3b04      	subs	r3, #4
 8001ad8:	0112      	lsls	r2, r2, #4
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	440b      	add	r3, r1
 8001ade:	761a      	strb	r2, [r3, #24]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000e100 	.word	0xe000e100
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f1c3 0307 	rsb	r3, r3, #7
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	bf28      	it	cs
 8001b12:	2304      	movcs	r3, #4
 8001b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3304      	adds	r3, #4
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d902      	bls.n	8001b24 <NVIC_EncodePriority+0x30>
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3b03      	subs	r3, #3
 8001b22:	e000      	b.n	8001b26 <NVIC_EncodePriority+0x32>
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b28:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b32:	43da      	mvns	r2, r3
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	401a      	ands	r2, r3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa01 f303 	lsl.w	r3, r1, r3
 8001b46:	43d9      	mvns	r1, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b4c:	4313      	orrs	r3, r2
         );
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ff4c 	bl	8001a00 <__NVIC_SetPriorityGrouping>
}
 8001b68:	bf00      	nop
 8001b6a:	3708      	adds	r7, #8
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
 8001b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b82:	f7ff ff61 	bl	8001a48 <__NVIC_GetPriorityGrouping>
 8001b86:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	6978      	ldr	r0, [r7, #20]
 8001b8e:	f7ff ffb1 	bl	8001af4 <NVIC_EncodePriority>
 8001b92:	4602      	mov	r2, r0
 8001b94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b98:	4611      	mov	r1, r2
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff80 	bl	8001aa0 <__NVIC_SetPriority>
}
 8001ba0:	bf00      	nop
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff54 	bl	8001a64 <__NVIC_EnableIRQ>
}
 8001bbc:	bf00      	nop
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06a      	b.n	8001cac <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d106      	bne.n	8001bee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2223      	movs	r2, #35	; 0x23
 8001be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f005 fa87 	bl	80070fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_ETH_Init+0xf0>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	4a30      	ldr	r2, [pc, #192]	; (8001cb4 <HAL_ETH_Init+0xf0>)
 8001bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfa:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_ETH_Init+0xf0>)
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001c06:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_ETH_Init+0xf4>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <HAL_ETH_Init+0xf4>)
 8001c0c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001c10:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001c12:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_ETH_Init+0xf4>)
 8001c14:	685a      	ldr	r2, [r3, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4927      	ldr	r1, [pc, #156]	; (8001cb8 <HAL_ETH_Init+0xf4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001c20:	4b25      	ldr	r3, [pc, #148]	; (8001cb8 <HAL_ETH_Init+0xf4>)
 8001c22:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c3a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c3c:	f7ff feb0 	bl	80019a0 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c42:	e011      	b.n	8001c68 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001c44:	f7ff feac 	bl	80019a0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c52:	d909      	bls.n	8001c68 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2204      	movs	r2, #4
 8001c58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	22e0      	movs	r2, #224	; 0xe0
 8001c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e021      	b.n	8001cac <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e4      	bne.n	8001c44 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 ff4c 	bl	8002b18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 fff3 	bl	8002c6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f001 f849 	bl	8002d1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	461a      	mov	r2, r3
 8001c92:	2100      	movs	r1, #0
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 ffb1 	bl	8002bfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40013800 	.word	0x40013800

08001cbc <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	d17b      	bne.n	8001dc6 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2223      	movs	r2, #35	; 0x23
 8001cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001cea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	4b35      	ldr	r3, [pc, #212]	; (8001dd0 <HAL_ETH_Start_IT+0x114>)
 8001cfa:	430b      	orrs	r3, r1
 8001cfc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001d10:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2204      	movs	r2, #4
 8001d18:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f9fc 	bl	8002118 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f042 0208 	orr.w	r2, r2, #8
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f7ff fe3d 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68fa      	ldr	r2, [r7, #12]
 8001d44:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0204 	orr.w	r2, r2, #4
 8001d54:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff fe2a 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fd74 	bl	800285a <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d88:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001da0:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	69d9      	ldr	r1, [r3, #28]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <HAL_ETH_Start_IT+0x118>)
 8001db2:	430b      	orrs	r3, r1
 8001db4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001db8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2223      	movs	r2, #35	; 0x23
 8001dbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	e000      	b.n	8001dc8 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
  }
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	00020060 	.word	0x00020060
 8001dd4:	0001a0c1 	.word	0x0001a0c1

08001dd8 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001de6:	2b23      	cmp	r3, #35	; 0x23
 8001de8:	d16e      	bne.n	8001ec8 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2223      	movs	r2, #35	; 0x23
 8001dee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	69d9      	ldr	r1, [r3, #28]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <HAL_ETH_Stop_IT+0xfc>)
 8001e02:	400b      	ands	r3, r1
 8001e04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e08:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001e1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e20:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	f023 0302 	bic.w	r3, r3, #2
 8001e34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001e38:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0204 	bic.w	r2, r2, #4
 8001e48:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e52:	2001      	movs	r0, #1
 8001e54:	f7ff fdb0 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 fcfa 	bl	800285a <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0208 	bic.w	r2, r2, #8
 8001e74:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e7e:	2001      	movs	r0, #1
 8001e80:	f7ff fd9a 	bl	80019b8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00e      	b.n	8001eb0 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	3212      	adds	r2, #18
 8001e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d9ed      	bls.n	8001e92 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2210      	movs	r2, #16
 8001ec0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e000      	b.n	8001eca <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001ec8:	2301      	movs	r3, #1
  }
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3718      	adds	r7, #24
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	fffe5f3e 	.word	0xfffe5f3e

08001ed8 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e045      	b.n	8001f88 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f02:	2b23      	cmp	r3, #35	; 0x23
 8001f04:	d13f      	bne.n	8001f86 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	6839      	ldr	r1, [r7, #0]
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 ff70 	bl	8002df8 <ETH_Prepare_Tx_Descriptors>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d009      	beq.n	8001f32 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f24:	f043 0202 	orr.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e02a      	b.n	8001f88 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
}
 8001f36:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	1c5a      	adds	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	629a      	str	r2, [r3, #40]	; 0x28
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d904      	bls.n	8001f54 <HAL_ETH_Transmit_IT+0x7c>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	1f1a      	subs	r2, r3, #4
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00d      	beq.n	8001f82 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2304      	movs	r3, #4
 8001f72:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2300      	movs	r3, #0
 8001f80:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b088      	sub	sp, #32
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	f043 0201 	orr.w	r2, r3, #1
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0a8      	b.n	800210e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fc2:	2b23      	cmp	r3, #35	; 0x23
 8001fc4:	d001      	beq.n	8001fca <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0a1      	b.n	800210e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fce:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	3212      	adds	r2, #18
 8001fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fda:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe0:	f1c3 0304 	rsb	r3, r3, #4
 8001fe4:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001fe6:	e06a      	b.n	80020be <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d007      	beq.n	8002004 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	699a      	ldr	r2, [r3, #24]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	69da      	ldr	r2, [r3, #28]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800200c:	2b00      	cmp	r3, #0
 800200e:	d103      	bne.n	8002018 <HAL_ETH_ReadData+0x88>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002014:	2b00      	cmp	r3, #0
 8002016:	d040      	beq.n	800209a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00c      	beq.n	800205c <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	0c1b      	lsrs	r3, r3, #16
 8002048:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800204c:	3b04      	subs	r3, #4
 800204e:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002074:	461a      	mov	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	b29b      	uxth	r3, r3
 800207a:	f005 fa0b 	bl	8007494 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	441a      	add	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	2200      	movs	r2, #0
 8002098:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d902      	bls.n	80020ac <HAL_ETH_ReadData+0x11c>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b04      	subs	r3, #4
 80020aa:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	3212      	adds	r2, #18
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	3301      	adds	r3, #1
 80020bc:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	db06      	blt.n	80020d4 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d202      	bcs.n	80020d4 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d089      	beq.n	8001fe8 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	441a      	add	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f815 	bl	8002118 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d108      	bne.n	800210c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
}
 800210e:	4618      	mov	r0, r3
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002120:	2300      	movs	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8002124:	2301      	movs	r3, #1
 8002126:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800212c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	3212      	adds	r2, #18
 8002134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002138:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002140:	e040      	b.n	80021c4 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d112      	bne.n	8002170 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800214a:	f107 030c 	add.w	r3, r7, #12
 800214e:	4618      	mov	r0, r3
 8002150:	f005 f970 	bl	8007434 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	74fb      	strb	r3, [r7, #19]
 800215e:	e007      	b.n	8002170 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	461a      	mov	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	461a      	mov	r2, r3
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002170:	7cfb      	ldrb	r3, [r7, #19]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d026      	beq.n	80021c4 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	2b00      	cmp	r3, #0
 800217c:	d103      	bne.n	8002186 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	4a1e      	ldr	r2, [pc, #120]	; (80021fc <ETH_UpdateDescriptor+0xe4>)
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	e003      	b.n	800218e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800218c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800218e:	f3bf 8f5f 	dmb	sy
}
 8002192:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61fb      	str	r3, [r7, #28]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d902      	bls.n	80021b2 <ETH_UpdateDescriptor+0x9a>
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	3b04      	subs	r3, #4
 80021b0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	3212      	adds	r2, #18
 80021b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021bc:	617b      	str	r3, [r7, #20]
      desccount--;
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3b01      	subs	r3, #1
 80021c2:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <ETH_UpdateDescriptor+0xb8>
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1b8      	bne.n	8002142 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d00c      	beq.n	80021f4 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021e2:	461a      	mov	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80021f4:	bf00      	nop
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	80004600 	.word	0x80004600

08002200 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3318      	adds	r3, #24
 800220c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002212:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800221e:	e03f      	b.n	80022a0 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002220:	2301      	movs	r3, #1
 8002222:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	3b01      	subs	r3, #1
 8002228:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	3304      	adds	r3, #4
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	3301      	adds	r3, #1
 800223e:	f003 0303 	and.w	r3, r3, #3
 8002242:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002248:	7bbb      	ldrb	r3, [r7, #14]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d028      	beq.n	80022a0 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68d9      	ldr	r1, [r3, #12]
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	00db      	lsls	r3, r3, #3
 800225c:	440b      	add	r3, r1
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db1b      	blt.n	800229c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002264:	68ba      	ldr	r2, [r7, #8]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	3304      	adds	r3, #4
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4618      	mov	r0, r3
 8002272:	f005 f951 	bl	8007518 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	3304      	adds	r3, #4
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	2200      	movs	r2, #0
 8002282:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	3301      	adds	r3, #1
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	62da      	str	r2, [r3, #44]	; 0x2c
 800229a:	e001      	b.n	80022a0 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <HAL_ETH_ReleaseTxPacket+0xac>
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1b9      	bne.n	8002220 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ce:	2b40      	cmp	r3, #64	; 0x40
 80022d0:	d112      	bne.n	80022f8 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d109      	bne.n	80022f8 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_ETH_IRQHandler+0x178>)
 80022f0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f004 fc66 	bl	8006bc4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d113      	bne.n	8002332 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b01      	cmp	r3, #1
 800231a:	d10a      	bne.n	8002332 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002324:	461a      	mov	r2, r3
 8002326:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800232a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f004 fc59 	bl	8006be4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233a:	695b      	ldr	r3, [r3, #20]
 800233c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002340:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002344:	d14c      	bne.n	80023e0 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002358:	d142      	bne.n	80023e0 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f043 0208 	orr.w	r2, r3, #8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800237c:	d11a      	bne.n	80023b4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002386:	695a      	ldr	r2, [r3, #20]
 8002388:	4b2a      	ldr	r3, [pc, #168]	; (8002434 <HAL_ETH_IRQHandler+0x17c>)
 800238a:	4013      	ands	r3, r2
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80023a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023a8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	22e0      	movs	r2, #224	; 0xe0
 80023ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80023b2:	e012      	b.n	80023da <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023bc:	695a      	ldr	r2, [r3, #20]
 80023be:	f248 6380 	movw	r3, #34432	; 0x8680
 80023c2:	4013      	ands	r3, r2
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023d2:	461a      	mov	r2, r3
 80023d4:	f248 6380 	movw	r3, #34432	; 0x8680
 80023d8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f004 fc12 	bl	8006c04 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d10e      	bne.n	800240c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f81c 	bl	800243c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_ETH_IRQHandler+0x180>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002418:	4b07      	ldr	r3, [pc, #28]	; (8002438 <HAL_ETH_IRQHandler+0x180>)
 800241a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800241e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f815 	bl	8002450 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	00010040 	.word	0x00010040
 8002434:	007e2000 	.word	0x007e2000
 8002438:	40013c00 	.word	0x40013c00

0800243c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	607a      	str	r2, [r7, #4]
 8002470:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	f003 031c 	and.w	r3, r3, #28
 8002480:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	02db      	lsls	r3, r3, #11
 8002486:	b29b      	uxth	r3, r3
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4313      	orrs	r3, r2
 800248c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 0302 	bic.w	r3, r3, #2
 80024a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80024b4:	f7ff fa74 	bl	80019a0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024ba:	e00d      	b.n	80024d8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80024bc:	f7ff fa70 	bl	80019a0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ca:	d301      	bcc.n	80024d0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e010      	b.n	80024f2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1ec      	bne.n	80024bc <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	461a      	mov	r2, r3
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 031c 	and.w	r3, r3, #28
 8002516:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	02db      	lsls	r3, r3, #11
 800251c:	b29b      	uxth	r3, r3
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4313      	orrs	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	019b      	lsls	r3, r3, #6
 8002528:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	4313      	orrs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002554:	f7ff fa24 	bl	80019a0 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800255a:	e00d      	b.n	8002578 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800255c:	f7ff fa20 	bl	80019a0 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800256a:	d301      	bcc.n	8002570 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e009      	b.n	8002584 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1ec      	bne.n	800255c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0d9      	b.n	8002754 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0310 	and.w	r3, r3, #16
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	bf14      	ite	ne
 80025ae:	2301      	movne	r3, #1
 80025b0:	2300      	moveq	r3, #0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	461a      	mov	r2, r3
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	461a      	mov	r2, r3
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260a:	2b00      	cmp	r3, #0
 800260c:	bf0c      	ite	eq
 800260e:	2301      	moveq	r3, #1
 8002610:	2300      	movne	r3, #0
 8002612:	b2db      	uxtb	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002624:	2b00      	cmp	r3, #0
 8002626:	bf14      	ite	ne
 8002628:	2301      	movne	r3, #1
 800262a:	2300      	moveq	r3, #0
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268e:	2b00      	cmp	r3, #0
 8002690:	bf14      	ite	ne
 8002692:	2301      	movne	r3, #1
 8002694:	2300      	moveq	r3, #0
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	bf14      	ite	ne
 80026ba:	2301      	movne	r3, #1
 80026bc:	2300      	moveq	r3, #0
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	699b      	ldr	r3, [r3, #24]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bf14      	ite	ne
 80026d4:	2301      	movne	r3, #1
 80026d6:	2300      	moveq	r3, #0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	bf0c      	ite	eq
 80026f0:	2301      	moveq	r3, #1
 80026f2:	2300      	movne	r3, #0
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	461a      	mov	r2, r3
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	0c1b      	lsrs	r3, r3, #16
 8002714:	b29a      	uxth	r2, r3
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b00      	cmp	r3, #0
 8002726:	bf14      	ite	ne
 8002728:	2301      	movne	r3, #1
 800272a:	2300      	moveq	r3, #0
 800272c:	b2db      	uxtb	r3, r3
 800272e:	461a      	mov	r2, r3
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d101      	bne.n	8002774 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e00b      	b.n	800278c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277a:	2b10      	cmp	r3, #16
 800277c:	d105      	bne.n	800278a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800277e:	6839      	ldr	r1, [r7, #0]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f88f 	bl	80028a4 <ETH_SetMACConfig>

    return HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	e000      	b.n	800278c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
  }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 031c 	bic.w	r3, r3, #28
 80027aa:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80027ac:	f001 fc24 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 80027b0:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	4a1d      	ldr	r2, [pc, #116]	; (800282c <HAL_ETH_SetMDIOClockRange+0x98>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d908      	bls.n	80027cc <HAL_ETH_SetMDIOClockRange+0x38>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d804      	bhi.n	80027cc <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f043 0308 	orr.w	r3, r3, #8
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e027      	b.n	800281c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d908      	bls.n	80027e6 <HAL_ETH_SetMDIOClockRange+0x52>
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	4a17      	ldr	r2, [pc, #92]	; (8002834 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d204      	bcs.n	80027e6 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f043 030c 	orr.w	r3, r3, #12
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e01a      	b.n	800281c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d303      	bcc.n	80027f6 <HAL_ETH_SetMDIOClockRange+0x62>
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d911      	bls.n	800281a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d908      	bls.n	8002810 <HAL_ETH_SetMDIOClockRange+0x7c>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d804      	bhi.n	8002810 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f043 0304 	orr.w	r3, r3, #4
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	e005      	b.n	800281c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	e000      	b.n	800281c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800281a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	611a      	str	r2, [r3, #16]
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	01312cff 	.word	0x01312cff
 8002830:	02160ebf 	.word	0x02160ebf
 8002834:	03938700 	.word	0x03938700
 8002838:	05f5e0ff 	.word	0x05f5e0ff
 800283c:	08f0d17f 	.word	0x08f0d17f

08002840 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002862:	2300      	movs	r3, #0
 8002864:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800288a:	2001      	movs	r0, #1
 800288c:	f7ff f894 	bl	80019b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800289a:	6193      	str	r3, [r2, #24]
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <ETH_SetMACConfig+0x15c>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	7c1b      	ldrb	r3, [r3, #16]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d102      	bne.n	80028cc <ETH_SetMACConfig+0x28>
 80028c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028ca:	e000      	b.n	80028ce <ETH_SetMACConfig+0x2a>
 80028cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	7c5b      	ldrb	r3, [r3, #17]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <ETH_SetMACConfig+0x38>
 80028d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028da:	e000      	b.n	80028de <ETH_SetMACConfig+0x3a>
 80028dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	7fdb      	ldrb	r3, [r3, #31]
 80028ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80028ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80028f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	7f92      	ldrb	r2, [r2, #30]
 80028f8:	2a00      	cmp	r2, #0
 80028fa:	d102      	bne.n	8002902 <ETH_SetMACConfig+0x5e>
 80028fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002900:	e000      	b.n	8002904 <ETH_SetMACConfig+0x60>
 8002902:	2200      	movs	r2, #0
                        macconf->Speed |
 8002904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	7f1b      	ldrb	r3, [r3, #28]
 800290a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800290c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	791b      	ldrb	r3, [r3, #4]
 8002918:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800291a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002922:	2a00      	cmp	r2, #0
 8002924:	d102      	bne.n	800292c <ETH_SetMACConfig+0x88>
 8002926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292a:	e000      	b.n	800292e <ETH_SetMACConfig+0x8a>
 800292c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800292e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	7bdb      	ldrb	r3, [r3, #15]
 8002934:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002936:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800293c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002944:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002946:	4313      	orrs	r3, r2
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4313      	orrs	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800295e:	2001      	movs	r0, #1
 8002960:	f7ff f82a 	bl	80019b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	f64f 7341 	movw	r3, #65345	; 0xff41
 800297a:	4013      	ands	r3, r2
 800297c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002982:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800298a:	2a00      	cmp	r2, #0
 800298c:	d101      	bne.n	8002992 <ETH_SetMACConfig+0xee>
 800298e:	2280      	movs	r2, #128	; 0x80
 8002990:	e000      	b.n	8002994 <ETH_SetMACConfig+0xf0>
 8002992:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002994:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800299a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800299c:	683a      	ldr	r2, [r7, #0]
 800299e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029a2:	2a01      	cmp	r2, #1
 80029a4:	d101      	bne.n	80029aa <ETH_SetMACConfig+0x106>
 80029a6:	2208      	movs	r2, #8
 80029a8:	e000      	b.n	80029ac <ETH_SetMACConfig+0x108>
 80029aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029b4:	2a01      	cmp	r2, #1
 80029b6:	d101      	bne.n	80029bc <ETH_SetMACConfig+0x118>
 80029b8:	2204      	movs	r2, #4
 80029ba:	e000      	b.n	80029be <ETH_SetMACConfig+0x11a>
 80029bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80029c6:	2a01      	cmp	r2, #1
 80029c8:	d101      	bne.n	80029ce <ETH_SetMACConfig+0x12a>
 80029ca:	2202      	movs	r2, #2
 80029cc:	e000      	b.n	80029d0 <ETH_SetMACConfig+0x12c>
 80029ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029d0:	4313      	orrs	r3, r2
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68fa      	ldr	r2, [r7, #12]
 80029de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80029e8:	2001      	movs	r0, #1
 80029ea:	f7fe ffe5 	bl	80019b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	619a      	str	r2, [r3, #24]
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	ff20810f 	.word	0xff20810f

08002a04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <ETH_SetDMAConfig+0x110>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	7b1b      	ldrb	r3, [r3, #12]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d102      	bne.n	8002a30 <ETH_SetDMAConfig+0x2c>
 8002a2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a2e:	e000      	b.n	8002a32 <ETH_SetDMAConfig+0x2e>
 8002a30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	7b5b      	ldrb	r3, [r3, #13]
 8002a36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	7f52      	ldrb	r2, [r2, #29]
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	d102      	bne.n	8002a48 <ETH_SetDMAConfig+0x44>
 8002a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a46:	e000      	b.n	8002a4a <ETH_SetDMAConfig+0x46>
 8002a48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	7b9b      	ldrb	r3, [r3, #14]
 8002a50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	7f1b      	ldrb	r3, [r3, #28]
 8002a5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	7f9b      	ldrb	r3, [r3, #30]
 8002a66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a9a:	2001      	movs	r0, #1
 8002a9c:	f7fe ff8c 	bl	80019b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	791b      	ldrb	r3, [r3, #4]
 8002ab2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ab8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002abe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ac4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002acc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ace:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ad6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002adc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6812      	ldr	r2, [r2, #0]
 8002ae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002aea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002af8:	2001      	movs	r0, #1
 8002afa:	f7fe ff5d 	bl	80019b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b06:	461a      	mov	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	f8de3f23 	.word	0xf8de3f23

08002b18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a6      	sub	sp, #152	; 0x98
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b54:	2300      	movs	r3, #0
 8002b56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b62:	2300      	movs	r3, #0
 8002b64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b90:	4619      	mov	r1, r3
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fe86 	bl	80028a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bcc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002be8:	f107 0308 	add.w	r3, r7, #8
 8002bec:	4619      	mov	r1, r3
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ff08 	bl	8002a04 <ETH_SetDMAConfig>
}
 8002bf4:	bf00      	nop
 8002bf6:	3798      	adds	r7, #152	; 0x98
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b087      	sub	sp, #28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3305      	adds	r3, #5
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	3204      	adds	r2, #4
 8002c14:	7812      	ldrb	r2, [r2, #0]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <ETH_MACAddressConfig+0x68>)
 8002c1e:	4413      	add	r3, r2
 8002c20:	461a      	mov	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3303      	adds	r3, #3
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	061a      	lsls	r2, r3, #24
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3302      	adds	r3, #2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	041b      	lsls	r3, r3, #16
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	021b      	lsls	r3, r3, #8
 8002c40:	4313      	orrs	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	7812      	ldrb	r2, [r2, #0]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <ETH_MACAddressConfig+0x6c>)
 8002c4e:	4413      	add	r3, r2
 8002c50:	461a      	mov	r2, r3
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6013      	str	r3, [r2, #0]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	40028040 	.word	0x40028040
 8002c68:	40028044 	.word	0x40028044

08002c6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	e03e      	b.n	8002cf8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	4613      	mov	r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	4413      	add	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	440b      	add	r3, r1
 8002c8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	3206      	adds	r2, #6
 8002cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d80c      	bhi.n	8002cdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68d9      	ldr	r1, [r3, #12]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
 8002cda:	e004      	b.n	8002ce6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b03      	cmp	r3, #3
 8002cfc:	d9bd      	bls.n	8002c7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d10:	611a      	str	r2, [r3, #16]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b085      	sub	sp, #20
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	e046      	b.n	8002dba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6919      	ldr	r1, [r3, #16]
 8002d30:	68fa      	ldr	r2, [r7, #12]
 8002d32:	4613      	mov	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	440b      	add	r3, r1
 8002d3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	2200      	movs	r2, #0
 8002d48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002d70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	3212      	adds	r2, #18
 8002d86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d80c      	bhi.n	8002daa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6919      	ldr	r1, [r3, #16]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	461a      	mov	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	60da      	str	r2, [r3, #12]
 8002da8:	e004      	b.n	8002db4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60fb      	str	r3, [r7, #12]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d9b5      	bls.n	8002d2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dea:	60da      	str	r2, [r3, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b08d      	sub	sp, #52	; 0x34
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3318      	adds	r3, #24
 8002e08:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e22:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e3a:	d007      	beq.n	8002e4c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e40:	3304      	adds	r3, #4
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e0ff      	b.n	8003050 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	3301      	adds	r3, #1
 8002e54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	4b7d      	ldr	r3, [pc, #500]	; (800305c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002e66:	4013      	ands	r3, r2
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	6852      	ldr	r2, [r2, #4]
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	431a      	orrs	r2, r3
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d005      	beq.n	8002ec6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ec6:	6a3b      	ldr	r3, [r7, #32]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002ed2:	f3bf 8f5f 	dmb	sy
}
 8002ed6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002ee4:	e082      	b.n	8002fec <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	e005      	b.n	8002f12 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	3301      	adds	r3, #1
 8002f16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d902      	bls.n	8002f24 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	3b04      	subs	r3, #4
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f2c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f46:	d007      	beq.n	8002f58 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d029      	beq.n	8002fac <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f64:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f6a:	e019      	b.n	8002fa0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002f6c:	f3bf 8f5f 	dmb	sy
}
 8002f70:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	3301      	adds	r3, #1
 8002f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d902      	bls.n	8002f90 <ETH_Prepare_Tx_Descriptors+0x198>
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	3b04      	subs	r3, #4
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f98:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d3e1      	bcc.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e051      	b.n	8003050 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	3301      	adds	r3, #1
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	6a3b      	ldr	r3, [r7, #32]
 8002fc0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002fc2:	6a3b      	ldr	r3, [r7, #32]
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4b25      	ldr	r3, [pc, #148]	; (800305c <ETH_Prepare_Tx_Descriptors+0x264>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	6852      	ldr	r2, [r2, #4]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	6a3b      	ldr	r3, [r7, #32]
 8002fd2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002fda:	f3bf 8f5f 	dmb	sy
}
 8002fde:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fe0:	6a3b      	ldr	r3, [r7, #32]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fe8:	6a3b      	ldr	r3, [r7, #32]
 8002fea:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f47f af78 	bne.w	8002ee6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ffc:	6a3b      	ldr	r3, [r7, #32]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003004:	6a3b      	ldr	r3, [r7, #32]
 8003006:	601a      	str	r2, [r3, #0]
 8003008:	e005      	b.n	8003016 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003026:	6979      	ldr	r1, [r7, #20]
 8003028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302a:	3304      	adds	r3, #4
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003036:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003038:	b672      	cpsid	i
}
 800303a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	4413      	add	r3, r2
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800304a:	b662      	cpsie	i
}
 800304c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3734      	adds	r7, #52	; 0x34
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	ffffe000 	.word	0xffffe000

08003060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	; 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800306e:	2300      	movs	r3, #0
 8003070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003072:	2300      	movs	r3, #0
 8003074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	e175      	b.n	800336c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003080:	2201      	movs	r2, #1
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4013      	ands	r3, r2
 8003092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	429a      	cmp	r2, r3
 800309a:	f040 8164 	bne.w	8003366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d005      	beq.n	80030b6 <HAL_GPIO_Init+0x56>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d130      	bne.n	8003118 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	2203      	movs	r2, #3
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030ec:	2201      	movs	r2, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	091b      	lsrs	r3, r3, #4
 8003102:	f003 0201 	and.w	r2, r3, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b03      	cmp	r3, #3
 8003122:	d017      	beq.n	8003154 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	005b      	lsls	r3, r3, #1
 800312e:	2203      	movs	r2, #3
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d123      	bne.n	80031a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	08da      	lsrs	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3208      	adds	r2, #8
 8003168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69ba      	ldr	r2, [r7, #24]
 8003180:	4013      	ands	r3, r2
 8003182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691a      	ldr	r2, [r3, #16]
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f003 0307 	and.w	r3, r3, #7
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	08da      	lsrs	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3208      	adds	r2, #8
 80031a2:	69b9      	ldr	r1, [r7, #24]
 80031a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f003 0203 	and.w	r2, r3, #3
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	005b      	lsls	r3, r3, #1
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 80be 	beq.w	8003366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ea:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_GPIO_Init+0x324>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_GPIO_Init+0x324>)
 80031f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f4:	6453      	str	r3, [r2, #68]	; 0x44
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_GPIO_Init+0x324>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003202:	4a61      	ldr	r2, [pc, #388]	; (8003388 <HAL_GPIO_Init+0x328>)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	089b      	lsrs	r3, r3, #2
 8003208:	3302      	adds	r3, #2
 800320a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	220f      	movs	r2, #15
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_GPIO_Init+0x32c>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d037      	beq.n	800329e <HAL_GPIO_Init+0x23e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a57      	ldr	r2, [pc, #348]	; (8003390 <HAL_GPIO_Init+0x330>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d031      	beq.n	800329a <HAL_GPIO_Init+0x23a>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a56      	ldr	r2, [pc, #344]	; (8003394 <HAL_GPIO_Init+0x334>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d02b      	beq.n	8003296 <HAL_GPIO_Init+0x236>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a55      	ldr	r2, [pc, #340]	; (8003398 <HAL_GPIO_Init+0x338>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d025      	beq.n	8003292 <HAL_GPIO_Init+0x232>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a54      	ldr	r2, [pc, #336]	; (800339c <HAL_GPIO_Init+0x33c>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d01f      	beq.n	800328e <HAL_GPIO_Init+0x22e>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a53      	ldr	r2, [pc, #332]	; (80033a0 <HAL_GPIO_Init+0x340>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d019      	beq.n	800328a <HAL_GPIO_Init+0x22a>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a52      	ldr	r2, [pc, #328]	; (80033a4 <HAL_GPIO_Init+0x344>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d013      	beq.n	8003286 <HAL_GPIO_Init+0x226>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a51      	ldr	r2, [pc, #324]	; (80033a8 <HAL_GPIO_Init+0x348>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d00d      	beq.n	8003282 <HAL_GPIO_Init+0x222>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a50      	ldr	r2, [pc, #320]	; (80033ac <HAL_GPIO_Init+0x34c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d007      	beq.n	800327e <HAL_GPIO_Init+0x21e>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a4f      	ldr	r2, [pc, #316]	; (80033b0 <HAL_GPIO_Init+0x350>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d101      	bne.n	800327a <HAL_GPIO_Init+0x21a>
 8003276:	2309      	movs	r3, #9
 8003278:	e012      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800327a:	230a      	movs	r3, #10
 800327c:	e010      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800327e:	2308      	movs	r3, #8
 8003280:	e00e      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003282:	2307      	movs	r3, #7
 8003284:	e00c      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003286:	2306      	movs	r3, #6
 8003288:	e00a      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800328a:	2305      	movs	r3, #5
 800328c:	e008      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800328e:	2304      	movs	r3, #4
 8003290:	e006      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003292:	2303      	movs	r3, #3
 8003294:	e004      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 8003296:	2302      	movs	r3, #2
 8003298:	e002      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800329a:	2301      	movs	r3, #1
 800329c:	e000      	b.n	80032a0 <HAL_GPIO_Init+0x240>
 800329e:	2300      	movs	r3, #0
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	f002 0203 	and.w	r2, r2, #3
 80032a6:	0092      	lsls	r2, r2, #2
 80032a8:	4093      	lsls	r3, r2
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032b0:	4935      	ldr	r1, [pc, #212]	; (8003388 <HAL_GPIO_Init+0x328>)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	089b      	lsrs	r3, r3, #2
 80032b6:	3302      	adds	r3, #2
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <HAL_GPIO_Init+0x354>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	43db      	mvns	r3, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4013      	ands	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4313      	orrs	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e2:	4a34      	ldr	r2, [pc, #208]	; (80033b4 <HAL_GPIO_Init+0x354>)
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_GPIO_Init+0x354>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <HAL_GPIO_Init+0x354>)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003312:	4b28      	ldr	r3, [pc, #160]	; (80033b4 <HAL_GPIO_Init+0x354>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003336:	4a1f      	ldr	r2, [pc, #124]	; (80033b4 <HAL_GPIO_Init+0x354>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333c:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <HAL_GPIO_Init+0x354>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003360:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <HAL_GPIO_Init+0x354>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	3301      	adds	r3, #1
 800336a:	61fb      	str	r3, [r7, #28]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b0f      	cmp	r3, #15
 8003370:	f67f ae86 	bls.w	8003080 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	3724      	adds	r7, #36	; 0x24
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800
 8003388:	40013800 	.word	0x40013800
 800338c:	40020000 	.word	0x40020000
 8003390:	40020400 	.word	0x40020400
 8003394:	40020800 	.word	0x40020800
 8003398:	40020c00 	.word	0x40020c00
 800339c:	40021000 	.word	0x40021000
 80033a0:	40021400 	.word	0x40021400
 80033a4:	40021800 	.word	0x40021800
 80033a8:	40021c00 	.word	0x40021c00
 80033ac:	40022000 	.word	0x40022000
 80033b0:	40022400 	.word	0x40022400
 80033b4:	40013c00 	.word	0x40013c00

080033b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	887b      	ldrh	r3, [r7, #2]
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
 80033d4:	e001      	b.n	80033da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	460b      	mov	r3, r1
 80033f2:	807b      	strh	r3, [r7, #2]
 80033f4:	4613      	mov	r3, r2
 80033f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033f8:	787b      	ldrb	r3, [r7, #1]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033fe:	887a      	ldrh	r2, [r7, #2]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003404:	e003      	b.n	800340e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003406:	887b      	ldrh	r3, [r7, #2]
 8003408:	041a      	lsls	r2, r3, #16
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	619a      	str	r2, [r3, #24]
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800341a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800341c:	b08f      	sub	sp, #60	; 0x3c
 800341e:	af0a      	add	r7, sp, #40	; 0x28
 8003420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e116      	b.n	800365a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d106      	bne.n	800344c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f7fd ff04 	bl	8001254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2203      	movs	r2, #3
 8003450:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4618      	mov	r0, r3
 800346c:	f003 f880 	bl	8006570 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	687e      	ldr	r6, [r7, #4]
 8003478:	466d      	mov	r5, sp
 800347a:	f106 0410 	add.w	r4, r6, #16
 800347e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003480:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003482:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003484:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003486:	e894 0003 	ldmia.w	r4, {r0, r1}
 800348a:	e885 0003 	stmia.w	r5, {r0, r1}
 800348e:	1d33      	adds	r3, r6, #4
 8003490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003492:	6838      	ldr	r0, [r7, #0]
 8003494:	f003 f814 	bl	80064c0 <USB_CoreInit>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2202      	movs	r2, #2
 80034a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e0d7      	b.n	800365a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2100      	movs	r1, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 f86e 	bl	8006592 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	73fb      	strb	r3, [r7, #15]
 80034ba:	e04a      	b.n	8003552 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034bc:	7bfa      	ldrb	r2, [r7, #15]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	333d      	adds	r3, #61	; 0x3d
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	6879      	ldr	r1, [r7, #4]
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4413      	add	r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	440b      	add	r3, r1
 80034de:	333c      	adds	r3, #60	; 0x3c
 80034e0:	7bfa      	ldrb	r2, [r7, #15]
 80034e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034e4:	7bfa      	ldrb	r2, [r7, #15]
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	b298      	uxth	r0, r3
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4413      	add	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3344      	adds	r3, #68	; 0x44
 80034f8:	4602      	mov	r2, r0
 80034fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034fc:	7bfa      	ldrb	r2, [r7, #15]
 80034fe:	6879      	ldr	r1, [r7, #4]
 8003500:	4613      	mov	r3, r2
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	440b      	add	r3, r1
 800350a:	3340      	adds	r3, #64	; 0x40
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	00db      	lsls	r3, r3, #3
 8003518:	4413      	add	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	3348      	adds	r3, #72	; 0x48
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003524:	7bfa      	ldrb	r2, [r7, #15]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334c      	adds	r3, #76	; 0x4c
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003538:	7bfa      	ldrb	r2, [r7, #15]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	3354      	adds	r3, #84	; 0x54
 8003548:	2200      	movs	r2, #0
 800354a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	3301      	adds	r3, #1
 8003550:	73fb      	strb	r3, [r7, #15]
 8003552:	7bfa      	ldrb	r2, [r7, #15]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d3af      	bcc.n	80034bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355c:	2300      	movs	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e044      	b.n	80035ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003562:	7bfa      	ldrb	r2, [r7, #15]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003574:	2200      	movs	r2, #0
 8003576:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003578:	7bfa      	ldrb	r2, [r7, #15]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800358a:	7bfa      	ldrb	r2, [r7, #15]
 800358c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800358e:	7bfa      	ldrb	r2, [r7, #15]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	00db      	lsls	r3, r3, #3
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035a4:	7bfa      	ldrb	r2, [r7, #15]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035ba:	7bfa      	ldrb	r2, [r7, #15]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035d0:	7bfa      	ldrb	r2, [r7, #15]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4413      	add	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035e2:	2200      	movs	r2, #0
 80035e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e6:	7bfb      	ldrb	r3, [r7, #15]
 80035e8:	3301      	adds	r3, #1
 80035ea:	73fb      	strb	r3, [r7, #15]
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3b5      	bcc.n	8003562 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	687e      	ldr	r6, [r7, #4]
 80035fe:	466d      	mov	r5, sp
 8003600:	f106 0410 	add.w	r4, r6, #16
 8003604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800360a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800360c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003610:	e885 0003 	stmia.w	r5, {r0, r1}
 8003614:	1d33      	adds	r3, r6, #4
 8003616:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003618:	6838      	ldr	r0, [r7, #0]
 800361a:	f003 f807 	bl	800662c <USB_DevInit>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e014      	b.n	800365a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	2b01      	cmp	r3, #1
 8003646:	d102      	bne.n	800364e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f80b 	bl	8003664 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f003 f9c5 	bl	80069e2 <USB_DevDisconnect>

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003664 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2201      	movs	r2, #1
 8003676:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003694:	4313      	orrs	r3, r2
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3714      	adds	r7, #20
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr
 80036a8:	10000003 	.word	0x10000003

080036ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036b0:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	6013      	str	r3, [r2, #0]
}
 80036bc:	bf00      	nop
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40007000 	.word	0x40007000

080036cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80036d4:	2300      	movs	r3, #0
 80036d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e291      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8087 	beq.w	80037fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036f0:	4b96      	ldr	r3, [pc, #600]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d00c      	beq.n	8003716 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036fc:	4b93      	ldr	r3, [pc, #588]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d112      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
 8003708:	4b90      	ldr	r3, [pc, #576]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003714:	d10b      	bne.n	800372e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003716:	4b8d      	ldr	r3, [pc, #564]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d06c      	beq.n	80037fc <HAL_RCC_OscConfig+0x130>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d168      	bne.n	80037fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e26b      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003736:	d106      	bne.n	8003746 <HAL_RCC_OscConfig+0x7a>
 8003738:	4b84      	ldr	r3, [pc, #528]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a83      	ldr	r2, [pc, #524]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800373e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	e02e      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10c      	bne.n	8003768 <HAL_RCC_OscConfig+0x9c>
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	4b7c      	ldr	r3, [pc, #496]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a7b      	ldr	r2, [pc, #492]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003760:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	e01d      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003770:	d10c      	bne.n	800378c <HAL_RCC_OscConfig+0xc0>
 8003772:	4b76      	ldr	r3, [pc, #472]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	4b73      	ldr	r3, [pc, #460]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a72      	ldr	r2, [pc, #456]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003788:	6013      	str	r3, [r2, #0]
 800378a:	e00b      	b.n	80037a4 <HAL_RCC_OscConfig+0xd8>
 800378c:	4b6f      	ldr	r3, [pc, #444]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a6e      	ldr	r2, [pc, #440]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a6b      	ldr	r2, [pc, #428]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fe f8f8 	bl	80019a0 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fe f8f4 	bl	80019a0 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e21f      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0xe8>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fe f8e4 	bl	80019a0 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fe f8e0 	bl	80019a0 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e20b      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ee:	4b57      	ldr	r3, [pc, #348]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x110>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d069      	beq.n	80038de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800380a:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b4d      	ldr	r3, [pc, #308]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 030c 	and.w	r3, r3, #12
 800381e:	2b08      	cmp	r3, #8
 8003820:	d11c      	bne.n	800385c <HAL_RCC_OscConfig+0x190>
 8003822:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d116      	bne.n	800385c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 0302 	and.w	r3, r3, #2
 8003836:	2b00      	cmp	r3, #0
 8003838:	d005      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d001      	beq.n	8003846 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e1df      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003846:	4b41      	ldr	r3, [pc, #260]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	493d      	ldr	r1, [pc, #244]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003856:	4313      	orrs	r3, r2
 8003858:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800385a:	e040      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d023      	beq.n	80038ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003864:	4b39      	ldr	r3, [pc, #228]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a38      	ldr	r2, [pc, #224]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800386a:	f043 0301 	orr.w	r3, r3, #1
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe f896 	bl	80019a0 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe f892 	bl	80019a0 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e1bd      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388a:	4b30      	ldr	r3, [pc, #192]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003896:	4b2d      	ldr	r3, [pc, #180]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	00db      	lsls	r3, r3, #3
 80038a4:	4929      	ldr	r1, [pc, #164]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	600b      	str	r3, [r1, #0]
 80038aa:	e018      	b.n	80038de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ac:	4b27      	ldr	r3, [pc, #156]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a26      	ldr	r2, [pc, #152]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7fe f872 	bl	80019a0 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c0:	f7fe f86e 	bl	80019a0 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e199      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d2:	4b1e      	ldr	r3, [pc, #120]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f0      	bne.n	80038c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d038      	beq.n	800395c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d019      	beq.n	8003926 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f2:	4b16      	ldr	r3, [pc, #88]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x280>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fe:	f7fe f84f 	bl	80019a0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003906:	f7fe f84b 	bl	80019a0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e176      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800391a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x23a>
 8003924:	e01a      	b.n	800395c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x280>)
 8003928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCC_OscConfig+0x280>)
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe f835 	bl	80019a0 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800393a:	f7fe f831 	bl	80019a0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d903      	bls.n	8003950 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e15c      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
 800394c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b91      	ldr	r3, [pc, #580]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ee      	bne.n	800393a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a4 	beq.w	8003ab2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396a:	4b8b      	ldr	r3, [pc, #556]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10d      	bne.n	8003992 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003976:	4b88      	ldr	r3, [pc, #544]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a87      	ldr	r2, [pc, #540]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b85      	ldr	r3, [pc, #532]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003992:	4b82      	ldr	r3, [pc, #520]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800399e:	4b7f      	ldr	r3, [pc, #508]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a7e      	ldr	r2, [pc, #504]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fd fff9 	bl	80019a0 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fd fff5 	bl	80019a0 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b64      	cmp	r3, #100	; 0x64
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e120      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039c4:	4b75      	ldr	r3, [pc, #468]	; (8003b9c <HAL_RCC_OscConfig+0x4d0>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x31a>
 80039d8:	4b6f      	ldr	r3, [pc, #444]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a6e      	ldr	r2, [pc, #440]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e02d      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x33c>
 80039ee:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a69      	ldr	r2, [pc, #420]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039f4:	f023 0301 	bic.w	r3, r3, #1
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a66      	ldr	r2, [pc, #408]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a00:	f023 0304 	bic.w	r3, r3, #4
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e01c      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	2b05      	cmp	r3, #5
 8003a0e:	d10c      	bne.n	8003a2a <HAL_RCC_OscConfig+0x35e>
 8003a10:	4b61      	ldr	r3, [pc, #388]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a60      	ldr	r2, [pc, #384]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a16:	f043 0304 	orr.w	r3, r3, #4
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b5e      	ldr	r3, [pc, #376]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a5d      	ldr	r2, [pc, #372]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a22:	f043 0301 	orr.w	r3, r3, #1
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
 8003a28:	e00b      	b.n	8003a42 <HAL_RCC_OscConfig+0x376>
 8003a2a:	4b5b      	ldr	r3, [pc, #364]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2e:	4a5a      	ldr	r2, [pc, #360]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a30:	f023 0301 	bic.w	r3, r3, #1
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70
 8003a36:	4b58      	ldr	r3, [pc, #352]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	4a57      	ldr	r2, [pc, #348]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a3c:	f023 0304 	bic.w	r3, r3, #4
 8003a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4a:	f7fd ffa9 	bl	80019a0 <HAL_GetTick>
 8003a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a50:	e00a      	b.n	8003a68 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd ffa5 	bl	80019a0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d901      	bls.n	8003a68 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e0ce      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a68:	4b4b      	ldr	r3, [pc, #300]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0ee      	beq.n	8003a52 <HAL_RCC_OscConfig+0x386>
 8003a74:	e014      	b.n	8003aa0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a76:	f7fd ff93 	bl	80019a0 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7c:	e00a      	b.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a7e:	f7fd ff8f 	bl	80019a0 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d901      	bls.n	8003a94 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a94:	4b40      	ldr	r3, [pc, #256]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1ee      	bne.n	8003a7e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003aa0:	7dfb      	ldrb	r3, [r7, #23]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa6:	4b3c      	ldr	r3, [pc, #240]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	4a3b      	ldr	r2, [pc, #236]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	699b      	ldr	r3, [r3, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	f000 80a4 	beq.w	8003c04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	f003 030c 	and.w	r3, r3, #12
 8003ac4:	2b08      	cmp	r3, #8
 8003ac6:	d06b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d149      	bne.n	8003b64 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad0:	4b31      	ldr	r3, [pc, #196]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a30      	ldr	r2, [pc, #192]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003ad6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003adc:	f7fd ff60 	bl	80019a0 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae2:	e008      	b.n	8003af6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ae4:	f7fd ff5c 	bl	80019a0 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d901      	bls.n	8003af6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e087      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af6:	4b28      	ldr	r3, [pc, #160]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f0      	bne.n	8003ae4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69da      	ldr	r2, [r3, #28]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a1b      	ldr	r3, [r3, #32]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	019b      	lsls	r3, r3, #6
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	4313      	orrs	r3, r2
 8003b28:	4a1b      	ldr	r2, [pc, #108]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b2e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a18      	ldr	r2, [pc, #96]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fd ff30 	bl	80019a0 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fd ff2c 	bl	80019a0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e057      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x478>
 8003b62:	e04f      	b.n	8003c04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0b      	ldr	r2, [pc, #44]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd ff16 	bl	80019a0 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b78:	f7fd ff12 	bl	80019a0 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e03d      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b8a:	4b03      	ldr	r3, [pc, #12]	; (8003b98 <HAL_RCC_OscConfig+0x4cc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1f0      	bne.n	8003b78 <HAL_RCC_OscConfig+0x4ac>
 8003b96:	e035      	b.n	8003c04 <HAL_RCC_OscConfig+0x538>
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ba0:	4b1b      	ldr	r3, [pc, #108]	; (8003c10 <HAL_RCC_OscConfig+0x544>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d028      	beq.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d121      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d11a      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	687a      	ldr	r2, [r7, #4]
 8003bd4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bd6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d111      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	3b01      	subs	r3, #1
 8003bea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d107      	bne.n	8003c00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e0d0      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c2c:	4b6a      	ldr	r3, [pc, #424]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d910      	bls.n	8003c5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3a:	4b67      	ldr	r3, [pc, #412]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 020f 	bic.w	r2, r3, #15
 8003c42:	4965      	ldr	r1, [pc, #404]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c4a:	4b63      	ldr	r3, [pc, #396]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	683a      	ldr	r2, [r7, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0b8      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d020      	beq.n	8003caa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d005      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c74:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	4a58      	ldr	r2, [pc, #352]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0308 	and.w	r3, r3, #8
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c8c:	4b53      	ldr	r3, [pc, #332]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c98:	4b50      	ldr	r3, [pc, #320]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	494d      	ldr	r1, [pc, #308]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d040      	beq.n	8003d38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d107      	bne.n	8003cce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cbe:	4b47      	ldr	r3, [pc, #284]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d115      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e07f      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d107      	bne.n	8003ce6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd6:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d109      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e073      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce6:	4b3d      	ldr	r3, [pc, #244]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e06b      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cf6:	4b39      	ldr	r3, [pc, #228]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f023 0203 	bic.w	r2, r3, #3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	4936      	ldr	r1, [pc, #216]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d08:	f7fd fe4a 	bl	80019a0 <HAL_GetTick>
 8003d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d0e:	e00a      	b.n	8003d26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d10:	f7fd fe46 	bl	80019a0 <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d901      	bls.n	8003d26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e053      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d26:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f003 020c 	and.w	r2, r3, #12
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d1eb      	bne.n	8003d10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d38:	4b27      	ldr	r3, [pc, #156]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 030f 	and.w	r3, r3, #15
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d210      	bcs.n	8003d68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b24      	ldr	r3, [pc, #144]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f023 020f 	bic.w	r2, r3, #15
 8003d4e:	4922      	ldr	r1, [pc, #136]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d56:	4b20      	ldr	r3, [pc, #128]	; (8003dd8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 030f 	and.w	r3, r3, #15
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d001      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e032      	b.n	8003dce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d008      	beq.n	8003d86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d74:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	4916      	ldr	r1, [pc, #88]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0308 	and.w	r3, r3, #8
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d009      	beq.n	8003da6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d92:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	490e      	ldr	r1, [pc, #56]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003da6:	f000 f821 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8003daa:	4602      	mov	r2, r0
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	091b      	lsrs	r3, r3, #4
 8003db2:	f003 030f 	and.w	r3, r3, #15
 8003db6:	490a      	ldr	r1, [pc, #40]	; (8003de0 <HAL_RCC_ClockConfig+0x1cc>)
 8003db8:	5ccb      	ldrb	r3, [r1, r3]
 8003dba:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbe:	4a09      	ldr	r2, [pc, #36]	; (8003de4 <HAL_RCC_ClockConfig+0x1d0>)
 8003dc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003dc2:	4b09      	ldr	r3, [pc, #36]	; (8003de8 <HAL_RCC_ClockConfig+0x1d4>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd fabe 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023c00 	.word	0x40023c00
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	0801d0d8 	.word	0x0801d0d8
 8003de4:	20000018 	.word	0x20000018
 8003de8:	2000001c 	.word	0x2000001c

08003dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003df0:	b094      	sub	sp, #80	; 0x50
 8003df2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003df4:	2300      	movs	r3, #0
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	2300      	movs	r3, #0
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e04:	4b79      	ldr	r3, [pc, #484]	; (8003fec <HAL_RCC_GetSysClockFreq+0x200>)
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f003 030c 	and.w	r3, r3, #12
 8003e0c:	2b08      	cmp	r3, #8
 8003e0e:	d00d      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x40>
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	f200 80e1 	bhi.w	8003fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d002      	beq.n	8003e20 <HAL_RCC_GetSysClockFreq+0x34>
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e1e:	e0db      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e20:	4b73      	ldr	r3, [pc, #460]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e24:	e0db      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e26:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e2a:	e0d8      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e2c:	4b6f      	ldr	r3, [pc, #444]	; (8003fec <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003e36:	4b6d      	ldr	r3, [pc, #436]	; (8003fec <HAL_RCC_GetSysClockFreq+0x200>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d063      	beq.n	8003f0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e42:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <HAL_RCC_GetSysClockFreq+0x200>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	2200      	movs	r2, #0
 8003e4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e54:	633b      	str	r3, [r7, #48]	; 0x30
 8003e56:	2300      	movs	r3, #0
 8003e58:	637b      	str	r3, [r7, #52]	; 0x34
 8003e5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e5e:	4622      	mov	r2, r4
 8003e60:	462b      	mov	r3, r5
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	0159      	lsls	r1, r3, #5
 8003e6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e70:	0150      	lsls	r0, r2, #5
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4621      	mov	r1, r4
 8003e78:	1a51      	subs	r1, r2, r1
 8003e7a:	6139      	str	r1, [r7, #16]
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	f04f 0200 	mov.w	r2, #0
 8003e88:	f04f 0300 	mov.w	r3, #0
 8003e8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e90:	4659      	mov	r1, fp
 8003e92:	018b      	lsls	r3, r1, #6
 8003e94:	4651      	mov	r1, sl
 8003e96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	018a      	lsls	r2, r1, #6
 8003e9e:	4651      	mov	r1, sl
 8003ea0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ea4:	4659      	mov	r1, fp
 8003ea6:	eb63 0901 	sbc.w	r9, r3, r1
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003eb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003eba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ebe:	4690      	mov	r8, r2
 8003ec0:	4699      	mov	r9, r3
 8003ec2:	4623      	mov	r3, r4
 8003ec4:	eb18 0303 	adds.w	r3, r8, r3
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	462b      	mov	r3, r5
 8003ecc:	eb49 0303 	adc.w	r3, r9, r3
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	024b      	lsls	r3, r1, #9
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ee8:	4621      	mov	r1, r4
 8003eea:	024a      	lsls	r2, r1, #9
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ef6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ef8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003efc:	f7fc f9f0 	bl	80002e0 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f08:	e058      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f0a:	4b38      	ldr	r3, [pc, #224]	; (8003fec <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	099b      	lsrs	r3, r3, #6
 8003f10:	2200      	movs	r2, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	4611      	mov	r1, r2
 8003f16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f1a:	623b      	str	r3, [r7, #32]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003f24:	4642      	mov	r2, r8
 8003f26:	464b      	mov	r3, r9
 8003f28:	f04f 0000 	mov.w	r0, #0
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	0159      	lsls	r1, r3, #5
 8003f32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f36:	0150      	lsls	r0, r2, #5
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f42:	4649      	mov	r1, r9
 8003f44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003f60:	eb63 050b 	sbc.w	r5, r3, fp
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	00eb      	lsls	r3, r5, #3
 8003f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f72:	00e2      	lsls	r2, r4, #3
 8003f74:	4614      	mov	r4, r2
 8003f76:	461d      	mov	r5, r3
 8003f78:	4643      	mov	r3, r8
 8003f7a:	18e3      	adds	r3, r4, r3
 8003f7c:	603b      	str	r3, [r7, #0]
 8003f7e:	464b      	mov	r3, r9
 8003f80:	eb45 0303 	adc.w	r3, r5, r3
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f92:	4629      	mov	r1, r5
 8003f94:	028b      	lsls	r3, r1, #10
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	028a      	lsls	r2, r1, #10
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	61fa      	str	r2, [r7, #28]
 8003fac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fb0:	f7fc f996 	bl	80002e0 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4613      	mov	r3, r2
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	; (8003fec <HAL_RCC_GetSysClockFreq+0x200>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003fcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3750      	adds	r7, #80	; 0x50
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	007a1200 	.word	0x007a1200

08003ff8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000018 	.word	0x20000018

08004010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004014:	f7ff fff0 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	; (8004030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0a9b      	lsrs	r3, r3, #10
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	; (8004034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	0801d0e8 	.word	0x0801d0e8

08004038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800403c:	f7ff ffdc 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	; (8004058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0b5b      	lsrs	r3, r3, #13
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	; (800405c <HAL_RCC_GetPCLK2Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	0801d0e8 	.word	0x0801d0e8

08004060 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	220f      	movs	r2, #15
 800406e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004070:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 0203 	and.w	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800407c:	4b0f      	ldr	r3, [pc, #60]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004088:	4b0c      	ldr	r3, [pc, #48]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_GetClockConfig+0x5c>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80040a2:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_RCC_GetClockConfig+0x60>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f003 020f 	and.w	r2, r3, #15
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	601a      	str	r2, [r3, #0]
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40023800 	.word	0x40023800
 80040c0:	40023c00 	.word	0x40023c00

080040c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80040d0:	2300      	movs	r3, #0
 80040d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80040d4:	2300      	movs	r3, #0
 80040d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80040dc:	2300      	movs	r3, #0
 80040de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d012      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80040ec:	4b69      	ldr	r3, [pc, #420]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a68      	ldr	r2, [pc, #416]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80040f6:	6093      	str	r3, [r2, #8]
 80040f8:	4b66      	ldr	r3, [pc, #408]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004100:	4964      	ldr	r1, [pc, #400]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800410e:	2301      	movs	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d017      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411e:	4b5d      	ldr	r3, [pc, #372]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004124:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412c:	4959      	ldr	r1, [pc, #356]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413c:	d101      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800414a:	2301      	movs	r3, #1
 800414c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800415a:	4b4e      	ldr	r3, [pc, #312]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	494a      	ldr	r1, [pc, #296]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004178:	d101      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800417a:	2301      	movs	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d101      	bne.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004196:	2301      	movs	r3, #1
 8004198:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0320 	and.w	r3, r3, #32
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 808b 	beq.w	80042be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80041a8:	4b3a      	ldr	r3, [pc, #232]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	4a39      	ldr	r2, [pc, #228]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b2:	6413      	str	r3, [r2, #64]	; 0x40
 80041b4:	4b37      	ldr	r3, [pc, #220]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041bc:	60bb      	str	r3, [r7, #8]
 80041be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80041c0:	4b35      	ldr	r3, [pc, #212]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a34      	ldr	r2, [pc, #208]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041cc:	f7fd fbe8 	bl	80019a0 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d4:	f7fd fbe4 	bl	80019a0 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e357      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80041e6:	4b2c      	ldr	r3, [pc, #176]	; (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d0f0      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041f2:	4b28      	ldr	r3, [pc, #160]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d035      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800420a:	693a      	ldr	r2, [r7, #16]
 800420c:	429a      	cmp	r2, r3
 800420e:	d02e      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004210:	4b20      	ldr	r3, [pc, #128]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004218:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800421a:	4b1e      	ldr	r3, [pc, #120]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	4a1d      	ldr	r2, [pc, #116]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004226:	4b1b      	ldr	r3, [pc, #108]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422a:	4a1a      	ldr	r2, [pc, #104]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800422c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004230:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004238:	4b16      	ldr	r3, [pc, #88]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b01      	cmp	r3, #1
 8004242:	d114      	bne.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004244:	f7fd fbac 	bl	80019a0 <HAL_GetTick>
 8004248:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fd fba8 	bl	80019a0 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e319      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	4b0c      	ldr	r3, [pc, #48]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ee      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427a:	d111      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004288:	4b04      	ldr	r3, [pc, #16]	; (800429c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800428a:	400b      	ands	r3, r1
 800428c:	4901      	ldr	r1, [pc, #4]	; (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800428e:	4313      	orrs	r3, r2
 8004290:	608b      	str	r3, [r1, #8]
 8004292:	e00b      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004294:	40023800 	.word	0x40023800
 8004298:	40007000 	.word	0x40007000
 800429c:	0ffffcff 	.word	0x0ffffcff
 80042a0:	4baa      	ldr	r3, [pc, #680]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	4aa9      	ldr	r2, [pc, #676]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80042aa:	6093      	str	r3, [r2, #8]
 80042ac:	4ba7      	ldr	r3, [pc, #668]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042b8:	49a4      	ldr	r1, [pc, #656]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0310 	and.w	r3, r3, #16
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d010      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042ca:	4ba0      	ldr	r3, [pc, #640]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d0:	4a9e      	ldr	r2, [pc, #632]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80042da:	4b9c      	ldr	r3, [pc, #624]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e4:	4999      	ldr	r1, [pc, #612]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d00a      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042f8:	4b94      	ldr	r3, [pc, #592]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	4991      	ldr	r1, [pc, #580]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004308:	4313      	orrs	r3, r2
 800430a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00a      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800431a:	4b8c      	ldr	r3, [pc, #560]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004328:	4988      	ldr	r1, [pc, #544]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800433c:	4b83      	ldr	r3, [pc, #524]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434a:	4980      	ldr	r1, [pc, #512]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800434c:	4313      	orrs	r3, r2
 800434e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00a      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800435e:	4b7b      	ldr	r3, [pc, #492]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436c:	4977      	ldr	r1, [pc, #476]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800436e:	4313      	orrs	r3, r2
 8004370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004380:	4b72      	ldr	r3, [pc, #456]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f023 0203 	bic.w	r2, r3, #3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	496f      	ldr	r1, [pc, #444]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004390:	4313      	orrs	r3, r2
 8004392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00a      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80043a2:	4b6a      	ldr	r3, [pc, #424]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043a8:	f023 020c 	bic.w	r2, r3, #12
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043b0:	4966      	ldr	r1, [pc, #408]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00a      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043c4:	4b61      	ldr	r3, [pc, #388]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d2:	495e      	ldr	r1, [pc, #376]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00a      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043e6:	4b59      	ldr	r3, [pc, #356]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	4955      	ldr	r1, [pc, #340]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00a      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004408:	4b50      	ldr	r3, [pc, #320]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800440a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800440e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	494d      	ldr	r1, [pc, #308]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004418:	4313      	orrs	r3, r2
 800441a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800442a:	4b48      	ldr	r3, [pc, #288]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800442c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004430:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004438:	4944      	ldr	r1, [pc, #272]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00a      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800444c:	4b3f      	ldr	r3, [pc, #252]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800444e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004452:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	493c      	ldr	r1, [pc, #240]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00a      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800446e:	4b37      	ldr	r3, [pc, #220]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004474:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	4933      	ldr	r1, [pc, #204]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	4313      	orrs	r3, r2
 8004480:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004490:	4b2e      	ldr	r3, [pc, #184]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004496:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800449e:	492b      	ldr	r1, [pc, #172]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d011      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044c0:	4922      	ldr	r1, [pc, #136]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044d0:	d101      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80044d2:	2301      	movs	r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80044e2:	2301      	movs	r3, #1
 80044e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004500:	4912      	ldr	r1, [pc, #72]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004514:	4b0d      	ldr	r3, [pc, #52]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004524:	4909      	ldr	r1, [pc, #36]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d006      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	f000 80d9 	beq.w	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a01      	ldr	r2, [pc, #4]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454a:	e001      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800454c:	40023800 	.word	0x40023800
 8004550:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004552:	f7fd fa25 	bl	80019a0 <HAL_GetTick>
 8004556:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004558:	e008      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800455a:	f7fd fa21 	bl	80019a0 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b64      	cmp	r3, #100	; 0x64
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e194      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800456c:	4b6c      	ldr	r3, [pc, #432]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1f0      	bne.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d021      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004588:	2b00      	cmp	r3, #0
 800458a:	d11d      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800458c:	4b64      	ldr	r3, [pc, #400]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800458e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	f003 0303 	and.w	r3, r3, #3
 8004598:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800459a:	4b61      	ldr	r3, [pc, #388]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800459c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a0:	0e1b      	lsrs	r3, r3, #24
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	019a      	lsls	r2, r3, #6
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	041b      	lsls	r3, r3, #16
 80045b2:	431a      	orrs	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	071b      	lsls	r3, r3, #28
 80045c0:	4957      	ldr	r1, [pc, #348]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d004      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045dc:	d00a      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045f2:	d129      	bne.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80045f4:	4b4a      	ldr	r3, [pc, #296]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	f003 0303 	and.w	r3, r3, #3
 8004600:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004602:	4b47      	ldr	r3, [pc, #284]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004604:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004608:	0f1b      	lsrs	r3, r3, #28
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	019a      	lsls	r2, r3, #6
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	431a      	orrs	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	431a      	orrs	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	071b      	lsls	r3, r3, #28
 8004628:	493d      	ldr	r1, [pc, #244]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004630:	4b3b      	ldr	r3, [pc, #236]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004636:	f023 021f 	bic.w	r2, r3, #31
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	3b01      	subs	r3, #1
 8004640:	4937      	ldr	r1, [pc, #220]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004642:	4313      	orrs	r3, r2
 8004644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01d      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004654:	4b32      	ldr	r3, [pc, #200]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800465a:	0e1b      	lsrs	r3, r3, #24
 800465c:	f003 030f 	and.w	r3, r3, #15
 8004660:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004662:	4b2f      	ldr	r3, [pc, #188]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004668:	0f1b      	lsrs	r3, r3, #28
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	019a      	lsls	r2, r3, #6
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	041b      	lsls	r3, r3, #16
 800467c:	431a      	orrs	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	061b      	lsls	r3, r3, #24
 8004682:	431a      	orrs	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	071b      	lsls	r3, r3, #28
 8004688:	4925      	ldr	r1, [pc, #148]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800468a:	4313      	orrs	r3, r2
 800468c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d011      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	019a      	lsls	r2, r3, #6
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	041b      	lsls	r3, r3, #16
 80046a8:	431a      	orrs	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	061b      	lsls	r3, r3, #24
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	071b      	lsls	r3, r3, #28
 80046b8:	4919      	ldr	r1, [pc, #100]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046c0:	4b17      	ldr	r3, [pc, #92]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a16      	ldr	r2, [pc, #88]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fd f968 	bl	80019a0 <HAL_GetTick>
 80046d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046d4:	f7fd f964 	bl	80019a0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b64      	cmp	r3, #100	; 0x64
 80046e0:	d901      	bls.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e0d7      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e6:	4b0e      	ldr	r3, [pc, #56]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	f040 80cd 	bne.w	8004894 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80046fa:	4b09      	ldr	r3, [pc, #36]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a08      	ldr	r2, [pc, #32]	; (8004720 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004704:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004706:	f7fd f94b 	bl	80019a0 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800470e:	f7fd f947 	bl	80019a0 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b64      	cmp	r3, #100	; 0x64
 800471a:	d903      	bls.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e0ba      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004720:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004724:	4b5e      	ldr	r3, [pc, #376]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800472c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004730:	d0ed      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d009      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800474e:	2b00      	cmp	r3, #0
 8004750:	d02e      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d12a      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800475a:	4b51      	ldr	r3, [pc, #324]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800475c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004760:	0c1b      	lsrs	r3, r3, #16
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004768:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800476a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476e:	0f1b      	lsrs	r3, r3, #28
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	019a      	lsls	r2, r3, #6
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	041b      	lsls	r3, r3, #16
 8004780:	431a      	orrs	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	061b      	lsls	r3, r3, #24
 8004788:	431a      	orrs	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	071b      	lsls	r3, r3, #28
 800478e:	4944      	ldr	r1, [pc, #272]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004796:	4b42      	ldr	r3, [pc, #264]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800479c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	3b01      	subs	r3, #1
 80047a6:	021b      	lsls	r3, r3, #8
 80047a8:	493d      	ldr	r1, [pc, #244]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047c4:	d11d      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047c6:	4b36      	ldr	r3, [pc, #216]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	0e1b      	lsrs	r3, r3, #24
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	0f1b      	lsrs	r3, r3, #28
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	019a      	lsls	r2, r3, #6
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	431a      	orrs	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	071b      	lsls	r3, r3, #28
 80047fa:	4929      	ldr	r1, [pc, #164]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0308 	and.w	r3, r3, #8
 800480a:	2b00      	cmp	r3, #0
 800480c:	d028      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800480e:	4b24      	ldr	r3, [pc, #144]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004814:	0e1b      	lsrs	r3, r3, #24
 8004816:	f003 030f 	and.w	r3, r3, #15
 800481a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800481c:	4b20      	ldr	r3, [pc, #128]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800481e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004822:	0c1b      	lsrs	r3, r3, #16
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	019a      	lsls	r2, r3, #6
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	041b      	lsls	r3, r3, #16
 8004834:	431a      	orrs	r2, r3
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	071b      	lsls	r3, r3, #28
 8004842:	4917      	ldr	r1, [pc, #92]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800484a:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800484c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	4911      	ldr	r1, [pc, #68]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800485a:	4313      	orrs	r3, r2
 800485c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004866:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800486c:	f7fd f898 	bl	80019a0 <HAL_GetTick>
 8004870:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004874:	f7fd f894 	bl	80019a0 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	; 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e007      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004886:	4b06      	ldr	r3, [pc, #24]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800488e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004892:	d1ef      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3720      	adds	r7, #32
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40023800 	.word	0x40023800

080048a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e049      	b.n	800494a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fc fbd2 	bl	8001074 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f000 fd30 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	d001      	beq.n	800496c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e054      	b.n	8004a16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	68da      	ldr	r2, [r3, #12]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0201 	orr.w	r2, r2, #1
 8004982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a26      	ldr	r2, [pc, #152]	; (8004a24 <HAL_TIM_Base_Start_IT+0xd0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d022      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004996:	d01d      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a22      	ldr	r2, [pc, #136]	; (8004a28 <HAL_TIM_Base_Start_IT+0xd4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d018      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a21      	ldr	r2, [pc, #132]	; (8004a2c <HAL_TIM_Base_Start_IT+0xd8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <HAL_TIM_Base_Start_IT+0xdc>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d00e      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1e      	ldr	r2, [pc, #120]	; (8004a34 <HAL_TIM_Base_Start_IT+0xe0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d009      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <HAL_TIM_Base_Start_IT+0xe4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d004      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x80>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1b      	ldr	r2, [pc, #108]	; (8004a3c <HAL_TIM_Base_Start_IT+0xe8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d115      	bne.n	8004a00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <HAL_TIM_Base_Start_IT+0xec>)
 80049dc:	4013      	ands	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b06      	cmp	r3, #6
 80049e4:	d015      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0xbe>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ec:	d011      	beq.n	8004a12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fe:	e008      	b.n	8004a12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	e000      	b.n	8004a14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a14:	2300      	movs	r3, #0
}
 8004a16:	4618      	mov	r0, r3
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40010400 	.word	0x40010400
 8004a38:	40014000 	.word	0x40014000
 8004a3c:	40001800 	.word	0x40001800
 8004a40:	00010007 	.word	0x00010007

08004a44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e049      	b.n	8004aea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f841 	bl	8004af2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 fc60 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
	...

08004b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d109      	bne.n	8004b2c <HAL_TIM_PWM_Start+0x24>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e03c      	b.n	8004ba6 <HAL_TIM_PWM_Start+0x9e>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d109      	bne.n	8004b46 <HAL_TIM_PWM_Start+0x3e>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	bf14      	ite	ne
 8004b3e:	2301      	movne	r3, #1
 8004b40:	2300      	moveq	r3, #0
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	e02f      	b.n	8004ba6 <HAL_TIM_PWM_Start+0x9e>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d109      	bne.n	8004b60 <HAL_TIM_PWM_Start+0x58>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	bf14      	ite	ne
 8004b58:	2301      	movne	r3, #1
 8004b5a:	2300      	moveq	r3, #0
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e022      	b.n	8004ba6 <HAL_TIM_PWM_Start+0x9e>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b0c      	cmp	r3, #12
 8004b64:	d109      	bne.n	8004b7a <HAL_TIM_PWM_Start+0x72>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	bf14      	ite	ne
 8004b72:	2301      	movne	r3, #1
 8004b74:	2300      	moveq	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	e015      	b.n	8004ba6 <HAL_TIM_PWM_Start+0x9e>
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d109      	bne.n	8004b94 <HAL_TIM_PWM_Start+0x8c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b86:	b2db      	uxtb	r3, r3
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	bf14      	ite	ne
 8004b8c:	2301      	movne	r3, #1
 8004b8e:	2300      	moveq	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e008      	b.n	8004ba6 <HAL_TIM_PWM_Start+0x9e>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	bf14      	ite	ne
 8004ba0:	2301      	movne	r3, #1
 8004ba2:	2300      	moveq	r3, #0
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d001      	beq.n	8004bae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e092      	b.n	8004cd4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d104      	bne.n	8004bbe <HAL_TIM_PWM_Start+0xb6>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bbc:	e023      	b.n	8004c06 <HAL_TIM_PWM_Start+0xfe>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b04      	cmp	r3, #4
 8004bc2:	d104      	bne.n	8004bce <HAL_TIM_PWM_Start+0xc6>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bcc:	e01b      	b.n	8004c06 <HAL_TIM_PWM_Start+0xfe>
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d104      	bne.n	8004bde <HAL_TIM_PWM_Start+0xd6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bdc:	e013      	b.n	8004c06 <HAL_TIM_PWM_Start+0xfe>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b0c      	cmp	r3, #12
 8004be2:	d104      	bne.n	8004bee <HAL_TIM_PWM_Start+0xe6>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2202      	movs	r2, #2
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bec:	e00b      	b.n	8004c06 <HAL_TIM_PWM_Start+0xfe>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d104      	bne.n	8004bfe <HAL_TIM_PWM_Start+0xf6>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bfc:	e003      	b.n	8004c06 <HAL_TIM_PWM_Start+0xfe>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 ff32 	bl	8005a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a30      	ldr	r2, [pc, #192]	; (8004cdc <HAL_TIM_PWM_Start+0x1d4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d004      	beq.n	8004c28 <HAL_TIM_PWM_Start+0x120>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a2f      	ldr	r2, [pc, #188]	; (8004ce0 <HAL_TIM_PWM_Start+0x1d8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d101      	bne.n	8004c2c <HAL_TIM_PWM_Start+0x124>
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_TIM_PWM_Start+0x126>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d007      	beq.n	8004c42 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <HAL_TIM_PWM_Start+0x1d4>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d022      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c54:	d01d      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a22      	ldr	r2, [pc, #136]	; (8004ce4 <HAL_TIM_PWM_Start+0x1dc>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a20      	ldr	r2, [pc, #128]	; (8004ce8 <HAL_TIM_PWM_Start+0x1e0>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1f      	ldr	r2, [pc, #124]	; (8004cec <HAL_TIM_PWM_Start+0x1e4>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a19      	ldr	r2, [pc, #100]	; (8004ce0 <HAL_TIM_PWM_Start+0x1d8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_TIM_PWM_Start+0x1e8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_TIM_PWM_Start+0x18a>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <HAL_TIM_PWM_Start+0x1ec>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d115      	bne.n	8004cbe <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <HAL_TIM_PWM_Start+0x1f0>)
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2b06      	cmp	r3, #6
 8004ca2:	d015      	beq.n	8004cd0 <HAL_TIM_PWM_Start+0x1c8>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004caa:	d011      	beq.n	8004cd0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	e008      	b.n	8004cd0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e000      	b.n	8004cd2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}
 8004cdc:	40010000 	.word	0x40010000
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	40001800 	.word	0x40001800
 8004cf8:	00010007 	.word	0x00010007

08004cfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d122      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d11b      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f06f 0202 	mvn.w	r2, #2
 8004d28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 fae4 	bl	800530c <HAL_TIM_IC_CaptureCallback>
 8004d44:	e005      	b.n	8004d52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fad6 	bl	80052f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fae7 	bl	8005320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d122      	bne.n	8004dac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d11b      	bne.n	8004dac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0204 	mvn.w	r2, #4
 8004d7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 faba 	bl	800530c <HAL_TIM_IC_CaptureCallback>
 8004d98:	e005      	b.n	8004da6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 faac 	bl	80052f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fabd 	bl	8005320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d122      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d11b      	bne.n	8004e00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0208 	mvn.w	r2, #8
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa90 	bl	800530c <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fa82 	bl	80052f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fa93 	bl	8005320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	f003 0310 	and.w	r3, r3, #16
 8004e0a:	2b10      	cmp	r3, #16
 8004e0c:	d122      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d11b      	bne.n	8004e54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f06f 0210 	mvn.w	r2, #16
 8004e24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2208      	movs	r2, #8
 8004e2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa66 	bl	800530c <HAL_TIM_IC_CaptureCallback>
 8004e40:	e005      	b.n	8004e4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fa58 	bl	80052f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 fa69 	bl	8005320 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d10e      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f06f 0201 	mvn.w	r2, #1
 8004e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fc f8be 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8a:	2b80      	cmp	r3, #128	; 0x80
 8004e8c:	d10e      	bne.n	8004eac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b80      	cmp	r3, #128	; 0x80
 8004e9a:	d107      	bne.n	8004eac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ea4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fea4 	bl	8005bf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eba:	d10e      	bne.n	8004eda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b80      	cmp	r3, #128	; 0x80
 8004ec8:	d107      	bne.n	8004eda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fe97 	bl	8005c08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee4:	2b40      	cmp	r3, #64	; 0x40
 8004ee6:	d10e      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d107      	bne.n	8004f06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 fa17 	bl	8005334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	f003 0320 	and.w	r3, r3, #32
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d10e      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f003 0320 	and.w	r3, r3, #32
 8004f1e:	2b20      	cmp	r3, #32
 8004f20:	d107      	bne.n	8004f32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0220 	mvn.w	r2, #32
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 fe57 	bl	8005be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f32:	bf00      	nop
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e0ff      	b.n	800515a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b14      	cmp	r3, #20
 8004f66:	f200 80f0 	bhi.w	800514a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f6a:	a201      	add	r2, pc, #4	; (adr r2, 8004f70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	0800514b 	.word	0x0800514b
 8004f78:	0800514b 	.word	0x0800514b
 8004f7c:	0800514b 	.word	0x0800514b
 8004f80:	08005005 	.word	0x08005005
 8004f84:	0800514b 	.word	0x0800514b
 8004f88:	0800514b 	.word	0x0800514b
 8004f8c:	0800514b 	.word	0x0800514b
 8004f90:	08005047 	.word	0x08005047
 8004f94:	0800514b 	.word	0x0800514b
 8004f98:	0800514b 	.word	0x0800514b
 8004f9c:	0800514b 	.word	0x0800514b
 8004fa0:	08005087 	.word	0x08005087
 8004fa4:	0800514b 	.word	0x0800514b
 8004fa8:	0800514b 	.word	0x0800514b
 8004fac:	0800514b 	.word	0x0800514b
 8004fb0:	080050c9 	.word	0x080050c9
 8004fb4:	0800514b 	.word	0x0800514b
 8004fb8:	0800514b 	.word	0x0800514b
 8004fbc:	0800514b 	.word	0x0800514b
 8004fc0:	08005109 	.word	0x08005109
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68b9      	ldr	r1, [r7, #8]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f000 fa5c 	bl	8005488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699a      	ldr	r2, [r3, #24]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f042 0208 	orr.w	r2, r2, #8
 8004fde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0204 	bic.w	r2, r2, #4
 8004fee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6999      	ldr	r1, [r3, #24]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	691a      	ldr	r2, [r3, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	619a      	str	r2, [r3, #24]
      break;
 8005002:	e0a5      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	4618      	mov	r0, r3
 800500c:	f000 faae 	bl	800556c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699a      	ldr	r2, [r3, #24]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800502e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6999      	ldr	r1, [r3, #24]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	021a      	lsls	r2, r3, #8
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	619a      	str	r2, [r3, #24]
      break;
 8005044:	e084      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	4618      	mov	r0, r3
 800504e:	f000 fb05 	bl	800565c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	69da      	ldr	r2, [r3, #28]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0208 	orr.w	r2, r2, #8
 8005060:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69da      	ldr	r2, [r3, #28]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0204 	bic.w	r2, r2, #4
 8005070:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	69d9      	ldr	r1, [r3, #28]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	61da      	str	r2, [r3, #28]
      break;
 8005084:	e064      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68b9      	ldr	r1, [r7, #8]
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fb5b 	bl	8005748 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69da      	ldr	r2, [r3, #28]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	69da      	ldr	r2, [r3, #28]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	69d9      	ldr	r1, [r3, #28]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	021a      	lsls	r2, r3, #8
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	61da      	str	r2, [r3, #28]
      break;
 80050c6:	e043      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fb92 	bl	80057f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f042 0208 	orr.w	r2, r2, #8
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0204 	bic.w	r2, r2, #4
 80050f2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	691a      	ldr	r2, [r3, #16]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005106:	e023      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fbc4 	bl	800589c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005122:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	021a      	lsls	r2, r3, #8
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005148:	e002      	b.n	8005150 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	75fb      	strb	r3, [r7, #23]
      break;
 800514e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop

08005164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005178:	2b01      	cmp	r3, #1
 800517a:	d101      	bne.n	8005180 <HAL_TIM_ConfigClockSource+0x1c>
 800517c:	2302      	movs	r3, #2
 800517e:	e0b4      	b.n	80052ea <HAL_TIM_ConfigClockSource+0x186>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <HAL_TIM_ConfigClockSource+0x190>)
 800519c:	4013      	ands	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b8:	d03e      	beq.n	8005238 <HAL_TIM_ConfigClockSource+0xd4>
 80051ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051be:	f200 8087 	bhi.w	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051c6:	f000 8086 	beq.w	80052d6 <HAL_TIM_ConfigClockSource+0x172>
 80051ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ce:	d87f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d01a      	beq.n	800520a <HAL_TIM_ConfigClockSource+0xa6>
 80051d4:	2b70      	cmp	r3, #112	; 0x70
 80051d6:	d87b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d050      	beq.n	800527e <HAL_TIM_ConfigClockSource+0x11a>
 80051dc:	2b60      	cmp	r3, #96	; 0x60
 80051de:	d877      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e0:	2b50      	cmp	r3, #80	; 0x50
 80051e2:	d03c      	beq.n	800525e <HAL_TIM_ConfigClockSource+0xfa>
 80051e4:	2b50      	cmp	r3, #80	; 0x50
 80051e6:	d873      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051e8:	2b40      	cmp	r3, #64	; 0x40
 80051ea:	d058      	beq.n	800529e <HAL_TIM_ConfigClockSource+0x13a>
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d86f      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f0:	2b30      	cmp	r3, #48	; 0x30
 80051f2:	d064      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 80051f4:	2b30      	cmp	r3, #48	; 0x30
 80051f6:	d86b      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d060      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d867      	bhi.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005200:	2b00      	cmp	r3, #0
 8005202:	d05c      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	2b10      	cmp	r3, #16
 8005206:	d05a      	beq.n	80052be <HAL_TIM_ConfigClockSource+0x15a>
 8005208:	e062      	b.n	80052d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800521a:	f000 fc0d 	bl	8005a38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800522c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68ba      	ldr	r2, [r7, #8]
 8005234:	609a      	str	r2, [r3, #8]
      break;
 8005236:	e04f      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005248:	f000 fbf6 	bl	8005a38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689a      	ldr	r2, [r3, #8]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525a:	609a      	str	r2, [r3, #8]
      break;
 800525c:	e03c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800526a:	461a      	mov	r2, r3
 800526c:	f000 fb6a 	bl	8005944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2150      	movs	r1, #80	; 0x50
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fbc3 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 800527c:	e02c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800528a:	461a      	mov	r2, r3
 800528c:	f000 fb89 	bl	80059a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2160      	movs	r1, #96	; 0x60
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fbb3 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 800529c:	e01c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	461a      	mov	r2, r3
 80052ac:	f000 fb4a 	bl	8005944 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2140      	movs	r1, #64	; 0x40
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fba3 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 80052bc:	e00c      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4619      	mov	r1, r3
 80052c8:	4610      	mov	r0, r2
 80052ca:	f000 fb9a 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 80052ce:	e003      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e000      	b.n	80052d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	fffeff88 	.word	0xfffeff88

080052f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr

0800530c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a40      	ldr	r2, [pc, #256]	; (800545c <TIM_Base_SetConfig+0x114>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d013      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d00f      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a3d      	ldr	r2, [pc, #244]	; (8005460 <TIM_Base_SetConfig+0x118>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d00b      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a3c      	ldr	r2, [pc, #240]	; (8005464 <TIM_Base_SetConfig+0x11c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d007      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a3b      	ldr	r2, [pc, #236]	; (8005468 <TIM_Base_SetConfig+0x120>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d003      	beq.n	8005388 <TIM_Base_SetConfig+0x40>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a3a      	ldr	r2, [pc, #232]	; (800546c <TIM_Base_SetConfig+0x124>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d108      	bne.n	800539a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	4313      	orrs	r3, r2
 8005398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2f      	ldr	r2, [pc, #188]	; (800545c <TIM_Base_SetConfig+0x114>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d02b      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a8:	d027      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a2c      	ldr	r2, [pc, #176]	; (8005460 <TIM_Base_SetConfig+0x118>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d023      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a2b      	ldr	r2, [pc, #172]	; (8005464 <TIM_Base_SetConfig+0x11c>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01f      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <TIM_Base_SetConfig+0x120>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d01b      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a29      	ldr	r2, [pc, #164]	; (800546c <TIM_Base_SetConfig+0x124>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d017      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a28      	ldr	r2, [pc, #160]	; (8005470 <TIM_Base_SetConfig+0x128>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d013      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a27      	ldr	r2, [pc, #156]	; (8005474 <TIM_Base_SetConfig+0x12c>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d00f      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	4a26      	ldr	r2, [pc, #152]	; (8005478 <TIM_Base_SetConfig+0x130>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d00b      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	4a25      	ldr	r2, [pc, #148]	; (800547c <TIM_Base_SetConfig+0x134>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d007      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a24      	ldr	r2, [pc, #144]	; (8005480 <TIM_Base_SetConfig+0x138>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_Base_SetConfig+0xb2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a23      	ldr	r2, [pc, #140]	; (8005484 <TIM_Base_SetConfig+0x13c>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d108      	bne.n	800540c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	689a      	ldr	r2, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a0a      	ldr	r2, [pc, #40]	; (800545c <TIM_Base_SetConfig+0x114>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d003      	beq.n	8005440 <TIM_Base_SetConfig+0xf8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <TIM_Base_SetConfig+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d103      	bne.n	8005448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	615a      	str	r2, [r3, #20]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	40010000 	.word	0x40010000
 8005460:	40000400 	.word	0x40000400
 8005464:	40000800 	.word	0x40000800
 8005468:	40000c00 	.word	0x40000c00
 800546c:	40010400 	.word	0x40010400
 8005470:	40014000 	.word	0x40014000
 8005474:	40014400 	.word	0x40014400
 8005478:	40014800 	.word	0x40014800
 800547c:	40001800 	.word	0x40001800
 8005480:	40001c00 	.word	0x40001c00
 8005484:	40002000 	.word	0x40002000

08005488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	f023 0201 	bic.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	4b2b      	ldr	r3, [pc, #172]	; (8005560 <TIM_OC1_SetConfig+0xd8>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f023 0303 	bic.w	r3, r3, #3
 80054be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f023 0302 	bic.w	r3, r3, #2
 80054d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	4313      	orrs	r3, r2
 80054da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a21      	ldr	r2, [pc, #132]	; (8005564 <TIM_OC1_SetConfig+0xdc>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d003      	beq.n	80054ec <TIM_OC1_SetConfig+0x64>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a20      	ldr	r2, [pc, #128]	; (8005568 <TIM_OC1_SetConfig+0xe0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d10c      	bne.n	8005506 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0308 	bic.w	r3, r3, #8
 80054f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	697a      	ldr	r2, [r7, #20]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a16      	ldr	r2, [pc, #88]	; (8005564 <TIM_OC1_SetConfig+0xdc>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC1_SetConfig+0x8e>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a15      	ldr	r2, [pc, #84]	; (8005568 <TIM_OC1_SetConfig+0xe0>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d111      	bne.n	800553a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800551c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	695b      	ldr	r3, [r3, #20]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4313      	orrs	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	621a      	str	r2, [r3, #32]
}
 8005554:	bf00      	nop
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	fffeff8f 	.word	0xfffeff8f
 8005564:	40010000 	.word	0x40010000
 8005568:	40010400 	.word	0x40010400

0800556c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	f023 0210 	bic.w	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	699b      	ldr	r3, [r3, #24]
 8005592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4b2e      	ldr	r3, [pc, #184]	; (8005650 <TIM_OC2_SetConfig+0xe4>)
 8005598:	4013      	ands	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	021b      	lsls	r3, r3, #8
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 0320 	bic.w	r3, r3, #32
 80055b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	697a      	ldr	r2, [r7, #20]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a23      	ldr	r2, [pc, #140]	; (8005654 <TIM_OC2_SetConfig+0xe8>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d003      	beq.n	80055d4 <TIM_OC2_SetConfig+0x68>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a22      	ldr	r2, [pc, #136]	; (8005658 <TIM_OC2_SetConfig+0xec>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d10d      	bne.n	80055f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	697a      	ldr	r2, [r7, #20]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a18      	ldr	r2, [pc, #96]	; (8005654 <TIM_OC2_SetConfig+0xe8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC2_SetConfig+0x94>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a17      	ldr	r2, [pc, #92]	; (8005658 <TIM_OC2_SetConfig+0xec>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d113      	bne.n	8005628 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005606:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800560e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	621a      	str	r2, [r3, #32]
}
 8005642:	bf00      	nop
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	feff8fff 	.word	0xfeff8fff
 8005654:	40010000 	.word	0x40010000
 8005658:	40010400 	.word	0x40010400

0800565c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4b2d      	ldr	r3, [pc, #180]	; (800573c <TIM_OC3_SetConfig+0xe0>)
 8005688:	4013      	ands	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0303 	bic.w	r3, r3, #3
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	021b      	lsls	r3, r3, #8
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a22      	ldr	r2, [pc, #136]	; (8005740 <TIM_OC3_SetConfig+0xe4>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d003      	beq.n	80056c2 <TIM_OC3_SetConfig+0x66>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a21      	ldr	r2, [pc, #132]	; (8005744 <TIM_OC3_SetConfig+0xe8>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d10d      	bne.n	80056de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a17      	ldr	r2, [pc, #92]	; (8005740 <TIM_OC3_SetConfig+0xe4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC3_SetConfig+0x92>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a16      	ldr	r2, [pc, #88]	; (8005744 <TIM_OC3_SetConfig+0xe8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d113      	bne.n	8005716 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	693a      	ldr	r2, [r7, #16]
 8005706:	4313      	orrs	r3, r2
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68fa      	ldr	r2, [r7, #12]
 8005720:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	697a      	ldr	r2, [r7, #20]
 800572e:	621a      	str	r2, [r3, #32]
}
 8005730:	bf00      	nop
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	fffeff8f 	.word	0xfffeff8f
 8005740:	40010000 	.word	0x40010000
 8005744:	40010400 	.word	0x40010400

08005748 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4b1e      	ldr	r3, [pc, #120]	; (80057ec <TIM_OC4_SetConfig+0xa4>)
 8005774:	4013      	ands	r3, r2
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800577e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	021b      	lsls	r3, r3, #8
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4313      	orrs	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005792:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	031b      	lsls	r3, r3, #12
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <TIM_OC4_SetConfig+0xa8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_OC4_SetConfig+0x68>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a12      	ldr	r2, [pc, #72]	; (80057f4 <TIM_OC4_SetConfig+0xac>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d109      	bne.n	80057c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	695b      	ldr	r3, [r3, #20]
 80057bc:	019b      	lsls	r3, r3, #6
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	feff8fff 	.word	0xfeff8fff
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400

080057f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <TIM_OC5_SetConfig+0x98>)
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4313      	orrs	r3, r2
 8005844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a12      	ldr	r2, [pc, #72]	; (8005894 <TIM_OC5_SetConfig+0x9c>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d003      	beq.n	8005856 <TIM_OC5_SetConfig+0x5e>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a11      	ldr	r2, [pc, #68]	; (8005898 <TIM_OC5_SetConfig+0xa0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d109      	bne.n	800586a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	621a      	str	r2, [r3, #32]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	fffeff8f 	.word	0xfffeff8f
 8005894:	40010000 	.word	0x40010000
 8005898:	40010400 	.word	0x40010400

0800589c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800589c:	b480      	push	{r7}
 800589e:	b087      	sub	sp, #28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <TIM_OC6_SetConfig+0x9c>)
 80058c8:	4013      	ands	r3, r2
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	68fa      	ldr	r2, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	051b      	lsls	r3, r3, #20
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a13      	ldr	r2, [pc, #76]	; (800593c <TIM_OC6_SetConfig+0xa0>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d003      	beq.n	80058fc <TIM_OC6_SetConfig+0x60>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a12      	ldr	r2, [pc, #72]	; (8005940 <TIM_OC6_SetConfig+0xa4>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d109      	bne.n	8005910 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005902:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	029b      	lsls	r3, r3, #10
 800590a:	697a      	ldr	r2, [r7, #20]
 800590c:	4313      	orrs	r3, r2
 800590e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	621a      	str	r2, [r3, #32]
}
 800592a:	bf00      	nop
 800592c:	371c      	adds	r7, #28
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	feff8fff 	.word	0xfeff8fff
 800593c:	40010000 	.word	0x40010000
 8005940:	40010400 	.word	0x40010400

08005944 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	f023 0201 	bic.w	r2, r3, #1
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800596e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	4313      	orrs	r3, r2
 8005978:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f023 030a 	bic.w	r3, r3, #10
 8005980:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	621a      	str	r2, [r3, #32]
}
 8005996:	bf00      	nop
 8005998:	371c      	adds	r7, #28
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b087      	sub	sp, #28
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f023 0210 	bic.w	r2, r3, #16
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	031b      	lsls	r3, r3, #12
 80059d2:	697a      	ldr	r2, [r7, #20]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f043 0307 	orr.w	r3, r3, #7
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d101      	bne.n	8005adc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	e06d      	b.n	8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2202      	movs	r2, #2
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a30      	ldr	r2, [pc, #192]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a2f      	ldr	r2, [pc, #188]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a20      	ldr	r2, [pc, #128]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d022      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b4e:	d01d      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a1d      	ldr	r2, [pc, #116]	; (8005bcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d018      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a1a      	ldr	r2, [pc, #104]	; (8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00e      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a16      	ldr	r2, [pc, #88]	; (8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d004      	beq.n	8005b8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a15      	ldr	r2, [pc, #84]	; (8005bdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40010400 	.word	0x40010400
 8005bcc:	40000400 	.word	0x40000400
 8005bd0:	40000800 	.word	0x40000800
 8005bd4:	40000c00 	.word	0x40000c00
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40001800 	.word	0x40001800

08005be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e040      	b.n	8005cb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7fb faa8 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2224      	movs	r2, #36	; 0x24
 8005c48:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f022 0201 	bic.w	r2, r2, #1
 8005c58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f82c 	bl	8005cb8 <UART_SetConfig>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d101      	bne.n	8005c6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e022      	b.n	8005cb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d002      	beq.n	8005c78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f000 fa84 	bl	8006180 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fb0b 	bl	80062c4 <UART_CheckIdleState>
 8005cae:	4603      	mov	r3, r0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69db      	ldr	r3, [r3, #28]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4ba6      	ldr	r3, [pc, #664]	; (8005f7c <UART_SetConfig+0x2c4>)
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	6979      	ldr	r1, [r7, #20]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	699b      	ldr	r3, [r3, #24]
 8005d0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	697a      	ldr	r2, [r7, #20]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a94      	ldr	r2, [pc, #592]	; (8005f80 <UART_SetConfig+0x2c8>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d120      	bne.n	8005d76 <UART_SetConfig+0xbe>
 8005d34:	4b93      	ldr	r3, [pc, #588]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f003 0303 	and.w	r3, r3, #3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d816      	bhi.n	8005d70 <UART_SetConfig+0xb8>
 8005d42:	a201      	add	r2, pc, #4	; (adr r2, 8005d48 <UART_SetConfig+0x90>)
 8005d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d48:	08005d59 	.word	0x08005d59
 8005d4c:	08005d65 	.word	0x08005d65
 8005d50:	08005d5f 	.word	0x08005d5f
 8005d54:	08005d6b 	.word	0x08005d6b
 8005d58:	2301      	movs	r3, #1
 8005d5a:	77fb      	strb	r3, [r7, #31]
 8005d5c:	e150      	b.n	8006000 <UART_SetConfig+0x348>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	77fb      	strb	r3, [r7, #31]
 8005d62:	e14d      	b.n	8006000 <UART_SetConfig+0x348>
 8005d64:	2304      	movs	r3, #4
 8005d66:	77fb      	strb	r3, [r7, #31]
 8005d68:	e14a      	b.n	8006000 <UART_SetConfig+0x348>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	77fb      	strb	r3, [r7, #31]
 8005d6e:	e147      	b.n	8006000 <UART_SetConfig+0x348>
 8005d70:	2310      	movs	r3, #16
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e144      	b.n	8006000 <UART_SetConfig+0x348>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a83      	ldr	r2, [pc, #524]	; (8005f88 <UART_SetConfig+0x2d0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d132      	bne.n	8005de6 <UART_SetConfig+0x12e>
 8005d80:	4b80      	ldr	r3, [pc, #512]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d86:	f003 030c 	and.w	r3, r3, #12
 8005d8a:	2b0c      	cmp	r3, #12
 8005d8c:	d828      	bhi.n	8005de0 <UART_SetConfig+0x128>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0xdc>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005dc9 	.word	0x08005dc9
 8005d98:	08005de1 	.word	0x08005de1
 8005d9c:	08005de1 	.word	0x08005de1
 8005da0:	08005de1 	.word	0x08005de1
 8005da4:	08005dd5 	.word	0x08005dd5
 8005da8:	08005de1 	.word	0x08005de1
 8005dac:	08005de1 	.word	0x08005de1
 8005db0:	08005de1 	.word	0x08005de1
 8005db4:	08005dcf 	.word	0x08005dcf
 8005db8:	08005de1 	.word	0x08005de1
 8005dbc:	08005de1 	.word	0x08005de1
 8005dc0:	08005de1 	.word	0x08005de1
 8005dc4:	08005ddb 	.word	0x08005ddb
 8005dc8:	2300      	movs	r3, #0
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e118      	b.n	8006000 <UART_SetConfig+0x348>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	77fb      	strb	r3, [r7, #31]
 8005dd2:	e115      	b.n	8006000 <UART_SetConfig+0x348>
 8005dd4:	2304      	movs	r3, #4
 8005dd6:	77fb      	strb	r3, [r7, #31]
 8005dd8:	e112      	b.n	8006000 <UART_SetConfig+0x348>
 8005dda:	2308      	movs	r3, #8
 8005ddc:	77fb      	strb	r3, [r7, #31]
 8005dde:	e10f      	b.n	8006000 <UART_SetConfig+0x348>
 8005de0:	2310      	movs	r3, #16
 8005de2:	77fb      	strb	r3, [r7, #31]
 8005de4:	e10c      	b.n	8006000 <UART_SetConfig+0x348>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a68      	ldr	r2, [pc, #416]	; (8005f8c <UART_SetConfig+0x2d4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d120      	bne.n	8005e32 <UART_SetConfig+0x17a>
 8005df0:	4b64      	ldr	r3, [pc, #400]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dfa:	2b30      	cmp	r3, #48	; 0x30
 8005dfc:	d013      	beq.n	8005e26 <UART_SetConfig+0x16e>
 8005dfe:	2b30      	cmp	r3, #48	; 0x30
 8005e00:	d814      	bhi.n	8005e2c <UART_SetConfig+0x174>
 8005e02:	2b20      	cmp	r3, #32
 8005e04:	d009      	beq.n	8005e1a <UART_SetConfig+0x162>
 8005e06:	2b20      	cmp	r3, #32
 8005e08:	d810      	bhi.n	8005e2c <UART_SetConfig+0x174>
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <UART_SetConfig+0x15c>
 8005e0e:	2b10      	cmp	r3, #16
 8005e10:	d006      	beq.n	8005e20 <UART_SetConfig+0x168>
 8005e12:	e00b      	b.n	8005e2c <UART_SetConfig+0x174>
 8005e14:	2300      	movs	r3, #0
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e0f2      	b.n	8006000 <UART_SetConfig+0x348>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e0ef      	b.n	8006000 <UART_SetConfig+0x348>
 8005e20:	2304      	movs	r3, #4
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e0ec      	b.n	8006000 <UART_SetConfig+0x348>
 8005e26:	2308      	movs	r3, #8
 8005e28:	77fb      	strb	r3, [r7, #31]
 8005e2a:	e0e9      	b.n	8006000 <UART_SetConfig+0x348>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	77fb      	strb	r3, [r7, #31]
 8005e30:	e0e6      	b.n	8006000 <UART_SetConfig+0x348>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a56      	ldr	r2, [pc, #344]	; (8005f90 <UART_SetConfig+0x2d8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d120      	bne.n	8005e7e <UART_SetConfig+0x1c6>
 8005e3c:	4b51      	ldr	r3, [pc, #324]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e46:	2bc0      	cmp	r3, #192	; 0xc0
 8005e48:	d013      	beq.n	8005e72 <UART_SetConfig+0x1ba>
 8005e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e4c:	d814      	bhi.n	8005e78 <UART_SetConfig+0x1c0>
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d009      	beq.n	8005e66 <UART_SetConfig+0x1ae>
 8005e52:	2b80      	cmp	r3, #128	; 0x80
 8005e54:	d810      	bhi.n	8005e78 <UART_SetConfig+0x1c0>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <UART_SetConfig+0x1a8>
 8005e5a:	2b40      	cmp	r3, #64	; 0x40
 8005e5c:	d006      	beq.n	8005e6c <UART_SetConfig+0x1b4>
 8005e5e:	e00b      	b.n	8005e78 <UART_SetConfig+0x1c0>
 8005e60:	2300      	movs	r3, #0
 8005e62:	77fb      	strb	r3, [r7, #31]
 8005e64:	e0cc      	b.n	8006000 <UART_SetConfig+0x348>
 8005e66:	2302      	movs	r3, #2
 8005e68:	77fb      	strb	r3, [r7, #31]
 8005e6a:	e0c9      	b.n	8006000 <UART_SetConfig+0x348>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e0c6      	b.n	8006000 <UART_SetConfig+0x348>
 8005e72:	2308      	movs	r3, #8
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e0c3      	b.n	8006000 <UART_SetConfig+0x348>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e0c0      	b.n	8006000 <UART_SetConfig+0x348>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a44      	ldr	r2, [pc, #272]	; (8005f94 <UART_SetConfig+0x2dc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d125      	bne.n	8005ed4 <UART_SetConfig+0x21c>
 8005e88:	4b3e      	ldr	r3, [pc, #248]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e96:	d017      	beq.n	8005ec8 <UART_SetConfig+0x210>
 8005e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e9c:	d817      	bhi.n	8005ece <UART_SetConfig+0x216>
 8005e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea2:	d00b      	beq.n	8005ebc <UART_SetConfig+0x204>
 8005ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ea8:	d811      	bhi.n	8005ece <UART_SetConfig+0x216>
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <UART_SetConfig+0x1fe>
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eb2:	d006      	beq.n	8005ec2 <UART_SetConfig+0x20a>
 8005eb4:	e00b      	b.n	8005ece <UART_SetConfig+0x216>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	77fb      	strb	r3, [r7, #31]
 8005eba:	e0a1      	b.n	8006000 <UART_SetConfig+0x348>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	77fb      	strb	r3, [r7, #31]
 8005ec0:	e09e      	b.n	8006000 <UART_SetConfig+0x348>
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	77fb      	strb	r3, [r7, #31]
 8005ec6:	e09b      	b.n	8006000 <UART_SetConfig+0x348>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	77fb      	strb	r3, [r7, #31]
 8005ecc:	e098      	b.n	8006000 <UART_SetConfig+0x348>
 8005ece:	2310      	movs	r3, #16
 8005ed0:	77fb      	strb	r3, [r7, #31]
 8005ed2:	e095      	b.n	8006000 <UART_SetConfig+0x348>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a2f      	ldr	r2, [pc, #188]	; (8005f98 <UART_SetConfig+0x2e0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d125      	bne.n	8005f2a <UART_SetConfig+0x272>
 8005ede:	4b29      	ldr	r3, [pc, #164]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ee8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005eec:	d017      	beq.n	8005f1e <UART_SetConfig+0x266>
 8005eee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ef2:	d817      	bhi.n	8005f24 <UART_SetConfig+0x26c>
 8005ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ef8:	d00b      	beq.n	8005f12 <UART_SetConfig+0x25a>
 8005efa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005efe:	d811      	bhi.n	8005f24 <UART_SetConfig+0x26c>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <UART_SetConfig+0x254>
 8005f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f08:	d006      	beq.n	8005f18 <UART_SetConfig+0x260>
 8005f0a:	e00b      	b.n	8005f24 <UART_SetConfig+0x26c>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	77fb      	strb	r3, [r7, #31]
 8005f10:	e076      	b.n	8006000 <UART_SetConfig+0x348>
 8005f12:	2302      	movs	r3, #2
 8005f14:	77fb      	strb	r3, [r7, #31]
 8005f16:	e073      	b.n	8006000 <UART_SetConfig+0x348>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	77fb      	strb	r3, [r7, #31]
 8005f1c:	e070      	b.n	8006000 <UART_SetConfig+0x348>
 8005f1e:	2308      	movs	r3, #8
 8005f20:	77fb      	strb	r3, [r7, #31]
 8005f22:	e06d      	b.n	8006000 <UART_SetConfig+0x348>
 8005f24:	2310      	movs	r3, #16
 8005f26:	77fb      	strb	r3, [r7, #31]
 8005f28:	e06a      	b.n	8006000 <UART_SetConfig+0x348>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <UART_SetConfig+0x2e4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d138      	bne.n	8005fa6 <UART_SetConfig+0x2ee>
 8005f34:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <UART_SetConfig+0x2cc>)
 8005f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005f3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f42:	d017      	beq.n	8005f74 <UART_SetConfig+0x2bc>
 8005f44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005f48:	d82a      	bhi.n	8005fa0 <UART_SetConfig+0x2e8>
 8005f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f4e:	d00b      	beq.n	8005f68 <UART_SetConfig+0x2b0>
 8005f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f54:	d824      	bhi.n	8005fa0 <UART_SetConfig+0x2e8>
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <UART_SetConfig+0x2aa>
 8005f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f5e:	d006      	beq.n	8005f6e <UART_SetConfig+0x2b6>
 8005f60:	e01e      	b.n	8005fa0 <UART_SetConfig+0x2e8>
 8005f62:	2300      	movs	r3, #0
 8005f64:	77fb      	strb	r3, [r7, #31]
 8005f66:	e04b      	b.n	8006000 <UART_SetConfig+0x348>
 8005f68:	2302      	movs	r3, #2
 8005f6a:	77fb      	strb	r3, [r7, #31]
 8005f6c:	e048      	b.n	8006000 <UART_SetConfig+0x348>
 8005f6e:	2304      	movs	r3, #4
 8005f70:	77fb      	strb	r3, [r7, #31]
 8005f72:	e045      	b.n	8006000 <UART_SetConfig+0x348>
 8005f74:	2308      	movs	r3, #8
 8005f76:	77fb      	strb	r3, [r7, #31]
 8005f78:	e042      	b.n	8006000 <UART_SetConfig+0x348>
 8005f7a:	bf00      	nop
 8005f7c:	efff69f3 	.word	0xefff69f3
 8005f80:	40011000 	.word	0x40011000
 8005f84:	40023800 	.word	0x40023800
 8005f88:	40004400 	.word	0x40004400
 8005f8c:	40004800 	.word	0x40004800
 8005f90:	40004c00 	.word	0x40004c00
 8005f94:	40005000 	.word	0x40005000
 8005f98:	40011400 	.word	0x40011400
 8005f9c:	40007800 	.word	0x40007800
 8005fa0:	2310      	movs	r3, #16
 8005fa2:	77fb      	strb	r3, [r7, #31]
 8005fa4:	e02c      	b.n	8006000 <UART_SetConfig+0x348>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a72      	ldr	r2, [pc, #456]	; (8006174 <UART_SetConfig+0x4bc>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d125      	bne.n	8005ffc <UART_SetConfig+0x344>
 8005fb0:	4b71      	ldr	r3, [pc, #452]	; (8006178 <UART_SetConfig+0x4c0>)
 8005fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fbe:	d017      	beq.n	8005ff0 <UART_SetConfig+0x338>
 8005fc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005fc4:	d817      	bhi.n	8005ff6 <UART_SetConfig+0x33e>
 8005fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fca:	d00b      	beq.n	8005fe4 <UART_SetConfig+0x32c>
 8005fcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fd0:	d811      	bhi.n	8005ff6 <UART_SetConfig+0x33e>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <UART_SetConfig+0x326>
 8005fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005fda:	d006      	beq.n	8005fea <UART_SetConfig+0x332>
 8005fdc:	e00b      	b.n	8005ff6 <UART_SetConfig+0x33e>
 8005fde:	2300      	movs	r3, #0
 8005fe0:	77fb      	strb	r3, [r7, #31]
 8005fe2:	e00d      	b.n	8006000 <UART_SetConfig+0x348>
 8005fe4:	2302      	movs	r3, #2
 8005fe6:	77fb      	strb	r3, [r7, #31]
 8005fe8:	e00a      	b.n	8006000 <UART_SetConfig+0x348>
 8005fea:	2304      	movs	r3, #4
 8005fec:	77fb      	strb	r3, [r7, #31]
 8005fee:	e007      	b.n	8006000 <UART_SetConfig+0x348>
 8005ff0:	2308      	movs	r3, #8
 8005ff2:	77fb      	strb	r3, [r7, #31]
 8005ff4:	e004      	b.n	8006000 <UART_SetConfig+0x348>
 8005ff6:	2310      	movs	r3, #16
 8005ff8:	77fb      	strb	r3, [r7, #31]
 8005ffa:	e001      	b.n	8006000 <UART_SetConfig+0x348>
 8005ffc:	2310      	movs	r3, #16
 8005ffe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	69db      	ldr	r3, [r3, #28]
 8006004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006008:	d15b      	bne.n	80060c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d828      	bhi.n	8006062 <UART_SetConfig+0x3aa>
 8006010:	a201      	add	r2, pc, #4	; (adr r2, 8006018 <UART_SetConfig+0x360>)
 8006012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006016:	bf00      	nop
 8006018:	0800603d 	.word	0x0800603d
 800601c:	08006045 	.word	0x08006045
 8006020:	0800604d 	.word	0x0800604d
 8006024:	08006063 	.word	0x08006063
 8006028:	08006053 	.word	0x08006053
 800602c:	08006063 	.word	0x08006063
 8006030:	08006063 	.word	0x08006063
 8006034:	08006063 	.word	0x08006063
 8006038:	0800605b 	.word	0x0800605b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800603c:	f7fd ffe8 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8006040:	61b8      	str	r0, [r7, #24]
        break;
 8006042:	e013      	b.n	800606c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006044:	f7fd fff8 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 8006048:	61b8      	str	r0, [r7, #24]
        break;
 800604a:	e00f      	b.n	800606c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800604c:	4b4b      	ldr	r3, [pc, #300]	; (800617c <UART_SetConfig+0x4c4>)
 800604e:	61bb      	str	r3, [r7, #24]
        break;
 8006050:	e00c      	b.n	800606c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006052:	f7fd fecb 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 8006056:	61b8      	str	r0, [r7, #24]
        break;
 8006058:	e008      	b.n	800606c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800605a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800605e:	61bb      	str	r3, [r7, #24]
        break;
 8006060:	e004      	b.n	800606c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	77bb      	strb	r3, [r7, #30]
        break;
 800606a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d074      	beq.n	800615c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	005a      	lsls	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	085b      	lsrs	r3, r3, #1
 800607c:	441a      	add	r2, r3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	fbb2 f3f3 	udiv	r3, r2, r3
 8006086:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b0f      	cmp	r3, #15
 800608c:	d916      	bls.n	80060bc <UART_SetConfig+0x404>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006094:	d212      	bcs.n	80060bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f023 030f 	bic.w	r3, r3, #15
 800609e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	085b      	lsrs	r3, r3, #1
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	89fb      	ldrh	r3, [r7, #14]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	89fa      	ldrh	r2, [r7, #14]
 80060b8:	60da      	str	r2, [r3, #12]
 80060ba:	e04f      	b.n	800615c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	77bb      	strb	r3, [r7, #30]
 80060c0:	e04c      	b.n	800615c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060c2:	7ffb      	ldrb	r3, [r7, #31]
 80060c4:	2b08      	cmp	r3, #8
 80060c6:	d828      	bhi.n	800611a <UART_SetConfig+0x462>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <UART_SetConfig+0x418>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060fd 	.word	0x080060fd
 80060d8:	08006105 	.word	0x08006105
 80060dc:	0800611b 	.word	0x0800611b
 80060e0:	0800610b 	.word	0x0800610b
 80060e4:	0800611b 	.word	0x0800611b
 80060e8:	0800611b 	.word	0x0800611b
 80060ec:	0800611b 	.word	0x0800611b
 80060f0:	08006113 	.word	0x08006113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f4:	f7fd ff8c 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 80060f8:	61b8      	str	r0, [r7, #24]
        break;
 80060fa:	e013      	b.n	8006124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fc:	f7fd ff9c 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 8006100:	61b8      	str	r0, [r7, #24]
        break;
 8006102:	e00f      	b.n	8006124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006104:	4b1d      	ldr	r3, [pc, #116]	; (800617c <UART_SetConfig+0x4c4>)
 8006106:	61bb      	str	r3, [r7, #24]
        break;
 8006108:	e00c      	b.n	8006124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800610a:	f7fd fe6f 	bl	8003dec <HAL_RCC_GetSysClockFreq>
 800610e:	61b8      	str	r0, [r7, #24]
        break;
 8006110:	e008      	b.n	8006124 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006116:	61bb      	str	r3, [r7, #24]
        break;
 8006118:	e004      	b.n	8006124 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	77bb      	strb	r3, [r7, #30]
        break;
 8006122:	bf00      	nop
    }

    if (pclk != 0U)
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	085a      	lsrs	r2, r3, #1
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	441a      	add	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d909      	bls.n	8006158 <UART_SetConfig+0x4a0>
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614a:	d205      	bcs.n	8006158 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	b29a      	uxth	r2, r3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	60da      	str	r2, [r3, #12]
 8006156:	e001      	b.n	800615c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006168:	7fbb      	ldrb	r3, [r7, #30]
}
 800616a:	4618      	mov	r0, r3
 800616c:	3720      	adds	r7, #32
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40007c00 	.word	0x40007c00
 8006178:	40023800 	.word	0x40023800
 800617c:	00f42400 	.word	0x00f42400

08006180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d00a      	beq.n	80061aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	430a      	orrs	r2, r1
 80061a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	f003 0302 	and.w	r3, r3, #2
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00a      	beq.n	80061cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	430a      	orrs	r2, r1
 80061ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00a      	beq.n	80061ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	f003 0308 	and.w	r3, r3, #8
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00a      	beq.n	8006210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	430a      	orrs	r2, r1
 800620e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	f003 0320 	and.w	r3, r3, #32
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	430a      	orrs	r2, r1
 8006252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800625c:	2b00      	cmp	r3, #0
 800625e:	d01a      	beq.n	8006296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800627e:	d10a      	bne.n	8006296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00a      	beq.n	80062b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	430a      	orrs	r2, r1
 80062b6:	605a      	str	r2, [r3, #4]
  }
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062d4:	f7fb fb64 	bl	80019a0 <HAL_GetTick>
 80062d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0308 	and.w	r3, r3, #8
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d10e      	bne.n	8006306 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f81b 	bl	8006332 <UART_WaitOnFlagUntilTimeout>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e011      	b.n	800632a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2220      	movs	r2, #32
 800630a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2220      	movs	r2, #32
 8006310:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3710      	adds	r7, #16
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b09c      	sub	sp, #112	; 0x70
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	603b      	str	r3, [r7, #0]
 800633e:	4613      	mov	r3, r2
 8006340:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006342:	e0a7      	b.n	8006494 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634a:	f000 80a3 	beq.w	8006494 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634e:	f7fb fb27 	bl	80019a0 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <UART_WaitOnFlagUntilTimeout+0x32>
 800635e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006360:	2b00      	cmp	r3, #0
 8006362:	d13f      	bne.n	80063e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006378:	667b      	str	r3, [r7, #100]	; 0x64
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006382:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006384:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006388:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006390:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e6      	bne.n	8006364 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3308      	adds	r3, #8
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a8:	f023 0301 	bic.w	r3, r3, #1
 80063ac:	663b      	str	r3, [r7, #96]	; 0x60
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3308      	adds	r3, #8
 80063b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80063b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e068      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f003 0304 	and.w	r3, r3, #4
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d050      	beq.n	8006494 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006400:	d148      	bne.n	8006494 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800640a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	e853 3f00 	ldrex	r3, [r3]
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006420:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	461a      	mov	r2, r3
 8006428:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800642a:	637b      	str	r3, [r7, #52]	; 0x34
 800642c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e6      	bne.n	800640c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	613b      	str	r3, [r7, #16]
   return(result);
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f023 0301 	bic.w	r3, r3, #1
 8006454:	66bb      	str	r3, [r7, #104]	; 0x68
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	3308      	adds	r3, #8
 800645c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800645e:	623a      	str	r2, [r7, #32]
 8006460:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	69f9      	ldr	r1, [r7, #28]
 8006464:	6a3a      	ldr	r2, [r7, #32]
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	61bb      	str	r3, [r7, #24]
   return(result);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e5      	bne.n	800643e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2220      	movs	r2, #32
 8006476:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2200      	movs	r2, #0
 800648c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e010      	b.n	80064b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69da      	ldr	r2, [r3, #28]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	4013      	ands	r3, r2
 800649e:	68ba      	ldr	r2, [r7, #8]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	f43f af48 	beq.w	8006344 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3770      	adds	r7, #112	; 0x70
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
	...

080064c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064c0:	b084      	sub	sp, #16
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b084      	sub	sp, #16
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	f107 001c 	add.w	r0, r7, #28
 80064ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80064d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d120      	bne.n	800651a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	4b20      	ldr	r3, [pc, #128]	; (800656c <USB_CoreInit+0xac>)
 80064ea:	4013      	ands	r3, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80064fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d105      	bne.n	800650e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa96 	bl	8006a40 <USB_CoreReset>
 8006514:	4603      	mov	r3, r0
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	e010      	b.n	800653c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68db      	ldr	r3, [r3, #12]
 800651e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fa8a 	bl	8006a40 <USB_CoreReset>
 800652c:	4603      	mov	r3, r0
 800652e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006534:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	2b01      	cmp	r3, #1
 8006540:	d10b      	bne.n	800655a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f043 0206 	orr.w	r2, r3, #6
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f043 0220 	orr.w	r2, r3, #32
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800655a:	7bfb      	ldrb	r3, [r7, #15]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006566:	b004      	add	sp, #16
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	ffbdffbf 	.word	0xffbdffbf

08006570 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	689b      	ldr	r3, [r3, #8]
 800657c:	f023 0201 	bic.w	r2, r3, #1
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d115      	bne.n	80065e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065c0:	2001      	movs	r0, #1
 80065c2:	f7fb f9f9 	bl	80019b8 <HAL_Delay>
      ms++;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3301      	adds	r3, #1
 80065ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f000 fa29 	bl	8006a24 <USB_GetMode>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d01e      	beq.n	8006616 <USB_SetCurrentMode+0x84>
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2b31      	cmp	r3, #49	; 0x31
 80065dc:	d9f0      	bls.n	80065c0 <USB_SetCurrentMode+0x2e>
 80065de:	e01a      	b.n	8006616 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065e0:	78fb      	ldrb	r3, [r7, #3]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d115      	bne.n	8006612 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80065f2:	2001      	movs	r0, #1
 80065f4:	f7fb f9e0 	bl	80019b8 <HAL_Delay>
      ms++;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3301      	adds	r3, #1
 80065fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa10 	bl	8006a24 <USB_GetMode>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <USB_SetCurrentMode+0x84>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b31      	cmp	r3, #49	; 0x31
 800660e:	d9f0      	bls.n	80065f2 <USB_SetCurrentMode+0x60>
 8006610:	e001      	b.n	8006616 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e005      	b.n	8006622 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b32      	cmp	r3, #50	; 0x32
 800661a:	d101      	bne.n	8006620 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
	...

0800662c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800662c:	b084      	sub	sp, #16
 800662e:	b580      	push	{r7, lr}
 8006630:	b086      	sub	sp, #24
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
 8006636:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800663a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	e009      	b.n	8006660 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	3340      	adds	r3, #64	; 0x40
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	2200      	movs	r2, #0
 8006658:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	3301      	adds	r3, #1
 800665e:	613b      	str	r3, [r7, #16]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	2b0e      	cmp	r3, #14
 8006664:	d9f2      	bls.n	800664c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11c      	bne.n	80066a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800667a:	f043 0302 	orr.w	r3, r3, #2
 800667e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006684:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	e005      	b.n	80066b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	4619      	mov	r1, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	461a      	mov	r2, r3
 80066ce:	680b      	ldr	r3, [r1, #0]
 80066d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d10c      	bne.n	80066f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d104      	bne.n	80066e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066de:	2100      	movs	r1, #0
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f000 f965 	bl	80069b0 <USB_SetDevSpeed>
 80066e6:	e008      	b.n	80066fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066e8:	2101      	movs	r1, #1
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f960 	bl	80069b0 <USB_SetDevSpeed>
 80066f0:	e003      	b.n	80066fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066f2:	2103      	movs	r1, #3
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 f95b 	bl	80069b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066fa:	2110      	movs	r1, #16
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f8f3 	bl	80068e8 <USB_FlushTxFifo>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f91f 	bl	8006950 <USB_FlushRxFifo>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006722:	461a      	mov	r2, r3
 8006724:	2300      	movs	r3, #0
 8006726:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672e:	461a      	mov	r2, r3
 8006730:	2300      	movs	r3, #0
 8006732:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	461a      	mov	r2, r3
 800673c:	2300      	movs	r3, #0
 800673e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006740:	2300      	movs	r3, #0
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	e043      	b.n	80067ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4413      	add	r3, r2
 800674e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006758:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800675c:	d118      	bne.n	8006790 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10a      	bne.n	800677a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006770:	461a      	mov	r2, r3
 8006772:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	e013      	b.n	80067a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	461a      	mov	r2, r3
 8006788:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800678c:	6013      	str	r3, [r2, #0]
 800678e:	e008      	b.n	80067a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	461a      	mov	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ae:	461a      	mov	r2, r3
 80067b0:	2300      	movs	r3, #0
 80067b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	461a      	mov	r2, r3
 80067c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80067c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	3301      	adds	r3, #1
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d3b7      	bcc.n	8006746 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067d6:	2300      	movs	r3, #0
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	e043      	b.n	8006864 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067f2:	d118      	bne.n	8006826 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10a      	bne.n	8006810 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006806:	461a      	mov	r2, r3
 8006808:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800680c:	6013      	str	r3, [r2, #0]
 800680e:	e013      	b.n	8006838 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4413      	add	r3, r2
 8006818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800681c:	461a      	mov	r2, r3
 800681e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	e008      	b.n	8006838 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006826:	693b      	ldr	r3, [r7, #16]
 8006828:	015a      	lsls	r2, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	4413      	add	r3, r2
 800682e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006832:	461a      	mov	r2, r3
 8006834:	2300      	movs	r3, #0
 8006836:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006844:	461a      	mov	r2, r3
 8006846:	2300      	movs	r3, #0
 8006848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	4413      	add	r3, r2
 8006852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006856:	461a      	mov	r2, r3
 8006858:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800685c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	3301      	adds	r3, #1
 8006862:	613b      	str	r3, [r7, #16]
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	429a      	cmp	r2, r3
 800686a:	d3b7      	bcc.n	80067dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800687a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800687e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800688c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	2b00      	cmp	r3, #0
 8006892:	d105      	bne.n	80068a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	699b      	ldr	r3, [r3, #24]
 8006898:	f043 0210 	orr.w	r2, r3, #16
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699a      	ldr	r2, [r3, #24]
 80068a4:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <USB_DevInit+0x2b4>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d005      	beq.n	80068be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	f043 0208 	orr.w	r2, r3, #8
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d105      	bne.n	80068d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	699a      	ldr	r2, [r3, #24]
 80068c8:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <USB_DevInit+0x2b8>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	803c3800 	.word	0x803c3800
 80068e4:	40000004 	.word	0x40000004

080068e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3301      	adds	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	4a13      	ldr	r2, [pc, #76]	; (800694c <USB_FlushTxFifo+0x64>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d901      	bls.n	8006908 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e01b      	b.n	8006940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	691b      	ldr	r3, [r3, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	daf2      	bge.n	80068f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006910:	2300      	movs	r3, #0
 8006912:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	019b      	lsls	r3, r3, #6
 8006918:	f043 0220 	orr.w	r2, r3, #32
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	4a08      	ldr	r2, [pc, #32]	; (800694c <USB_FlushTxFifo+0x64>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d901      	bls.n	8006932 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e006      	b.n	8006940 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b20      	cmp	r3, #32
 800693c:	d0f0      	beq.n	8006920 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	00030d40 	.word	0x00030d40

08006950 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006958:	2300      	movs	r3, #0
 800695a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	4a11      	ldr	r2, [pc, #68]	; (80069ac <USB_FlushRxFifo+0x5c>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d901      	bls.n	800696e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e018      	b.n	80069a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	daf2      	bge.n	800695c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2210      	movs	r2, #16
 800697e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a08      	ldr	r2, [pc, #32]	; (80069ac <USB_FlushRxFifo+0x5c>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d901      	bls.n	8006992 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e006      	b.n	80069a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	f003 0310 	and.w	r3, r3, #16
 800699a:	2b10      	cmp	r3, #16
 800699c:	d0f0      	beq.n	8006980 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	00030d40 	.word	0x00030d40

080069b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	460b      	mov	r3, r1
 80069ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	78fb      	ldrb	r3, [r7, #3]
 80069ca:	68f9      	ldr	r1, [r7, #12]
 80069cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069d0:	4313      	orrs	r3, r2
 80069d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069d4:	2300      	movs	r3, #0
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3714      	adds	r7, #20
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069e2:	b480      	push	{r7}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a10:	f043 0302 	orr.w	r3, r3, #2
 8006a14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3714      	adds	r7, #20
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	695b      	ldr	r3, [r3, #20]
 8006a30:	f003 0301 	and.w	r3, r3, #1
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	4a13      	ldr	r2, [pc, #76]	; (8006aa4 <USB_CoreReset+0x64>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d901      	bls.n	8006a5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e01b      	b.n	8006a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	daf2      	bge.n	8006a4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	691b      	ldr	r3, [r3, #16]
 8006a6e:	f043 0201 	orr.w	r2, r3, #1
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4a09      	ldr	r2, [pc, #36]	; (8006aa4 <USB_CoreReset+0x64>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d901      	bls.n	8006a88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e006      	b.n	8006a96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	f003 0301 	and.w	r3, r3, #1
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d0f0      	beq.n	8006a76 <USB_CoreReset+0x36>

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	00030d40 	.word	0x00030d40

08006aa8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006aa8:	b5b0      	push	{r4, r5, r7, lr}
 8006aaa:	b08c      	sub	sp, #48	; 0x30
 8006aac:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006aae:	2100      	movs	r1, #0
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	f003 fdc3 	bl	800a63c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006ab6:	4b20      	ldr	r3, [pc, #128]	; (8006b38 <MX_LWIP_Init+0x90>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006abc:	4b1f      	ldr	r3, [pc, #124]	; (8006b3c <MX_LWIP_Init+0x94>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006ac2:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <MX_LWIP_Init+0x98>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <MX_LWIP_Init+0x9c>)
 8006aca:	9302      	str	r3, [sp, #8]
 8006acc:	4b1e      	ldr	r3, [pc, #120]	; (8006b48 <MX_LWIP_Init+0xa0>)
 8006ace:	9301      	str	r3, [sp, #4]
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <MX_LWIP_Init+0x98>)
 8006ad6:	4a19      	ldr	r2, [pc, #100]	; (8006b3c <MX_LWIP_Init+0x94>)
 8006ad8:	4917      	ldr	r1, [pc, #92]	; (8006b38 <MX_LWIP_Init+0x90>)
 8006ada:	481c      	ldr	r0, [pc, #112]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006adc:	f005 fea6 	bl	800c82c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006ae0:	481a      	ldr	r0, [pc, #104]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006ae2:	f006 f85d 	bl	800cba0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8006ae6:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006ae8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006aec:	089b      	lsrs	r3, r3, #2
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8006af8:	4814      	ldr	r0, [pc, #80]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006afa:	f006 f861 	bl	800cbc0 <netif_set_up>
 8006afe:	e002      	b.n	8006b06 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006b00:	4812      	ldr	r0, [pc, #72]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006b02:	f006 f8c9 	bl	800cc98 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006b06:	4912      	ldr	r1, [pc, #72]	; (8006b50 <MX_LWIP_Init+0xa8>)
 8006b08:	4810      	ldr	r0, [pc, #64]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006b0a:	f006 f95f 	bl	800cdcc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 8006b0e:	4b11      	ldr	r3, [pc, #68]	; (8006b54 <MX_LWIP_Init+0xac>)
 8006b10:	1d3c      	adds	r4, r7, #4
 8006b12:	461d      	mov	r5, r3
 8006b14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b18:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006b1c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8006b20:	1d3b      	adds	r3, r7, #4
 8006b22:	490a      	ldr	r1, [pc, #40]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006b24:	4618      	mov	r0, r3
 8006b26:	f000 fd43 	bl	80075b0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006b2a:	4808      	ldr	r0, [pc, #32]	; (8006b4c <MX_LWIP_Init+0xa4>)
 8006b2c:	f00e f9b4 	bl	8014e98 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006b30:	bf00      	nop
 8006b32:	3720      	adds	r7, #32
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bdb0      	pop	{r4, r5, r7, pc}
 8006b38:	20000b14 	.word	0x20000b14
 8006b3c:	20000b18 	.word	0x20000b18
 8006b40:	20000b1c 	.word	0x20000b1c
 8006b44:	0800a579 	.word	0x0800a579
 8006b48:	08007051 	.word	0x08007051
 8006b4c:	20000adc 	.word	0x20000adc
 8006b50:	08006b59 	.word	0x08006b59
 8006b54:	08019f04 	.word	0x08019f04

08006b58 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8006b7e:	2320      	movs	r3, #32
 8006b80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006b82:	f3bf 8f4f 	dsb	sy
}
 8006b86:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8006b88:	e00b      	b.n	8006ba2 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	; (8006bc0 <SCB_InvalidateDCache_by_Addr+0x54>)
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4413      	add	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	dcf0      	bgt.n	8006b8a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8006ba8:	f3bf 8f4f 	dsb	sy
}
 8006bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006bae:	f3bf 8f6f 	isb	sy
}
 8006bb2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8006bb4:	bf00      	nop
 8006bb6:	371c      	adds	r7, #28
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr
 8006bc0:	e000ed00 	.word	0xe000ed00

08006bc4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006bcc:	4b04      	ldr	r3, [pc, #16]	; (8006be0 <HAL_ETH_RxCpltCallback+0x1c>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f000 fe37 	bl	8007844 <osSemaphoreRelease>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	200054ac 	.word	0x200054ac

08006be4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006bec:	4b04      	ldr	r3, [pc, #16]	; (8006c00 <HAL_ETH_TxCpltCallback+0x1c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f000 fe27 	bl	8007844 <osSemaphoreRelease>
}
 8006bf6:	bf00      	nop
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}
 8006bfe:	bf00      	nop
 8006c00:	200054b0 	.word	0x200054b0

08006c04 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fb fe17 	bl	8002840 <HAL_ETH_GetDMAError>
 8006c12:	4603      	mov	r3, r0
 8006c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c18:	2b80      	cmp	r3, #128	; 0x80
 8006c1a:	d104      	bne.n	8006c26 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8006c1c:	4b04      	ldr	r3, [pc, #16]	; (8006c30 <HAL_ETH_ErrorCallback+0x2c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fe0f 	bl	8007844 <osSemaphoreRelease>
  }
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200054ac 	.word	0x200054ac

08006c34 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8006c34:	b5b0      	push	{r4, r5, r7, lr}
 8006c36:	b0a8      	sub	sp, #160	; 0xa0
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8006c42:	2300      	movs	r3, #0
 8006c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8006c4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c52:	2264      	movs	r2, #100	; 0x64
 8006c54:	2100      	movs	r1, #0
 8006c56:	4618      	mov	r0, r3
 8006c58:	f012 fa15 	bl	8019086 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006c5c:	4b85      	ldr	r3, [pc, #532]	; (8006e74 <low_level_init+0x240>)
 8006c5e:	4a86      	ldr	r2, [pc, #536]	; (8006e78 <low_level_init+0x244>)
 8006c60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8006c62:	2300      	movs	r3, #0
 8006c64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8006c68:	2380      	movs	r3, #128	; 0x80
 8006c6a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8006c6e:	23e1      	movs	r3, #225	; 0xe1
 8006c70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8006c74:	2300      	movs	r3, #0
 8006c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8006c86:	4a7b      	ldr	r2, [pc, #492]	; (8006e74 <low_level_init+0x240>)
 8006c88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c8c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006c8e:	4b79      	ldr	r3, [pc, #484]	; (8006e74 <low_level_init+0x240>)
 8006c90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006c94:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006c96:	4b77      	ldr	r3, [pc, #476]	; (8006e74 <low_level_init+0x240>)
 8006c98:	4a78      	ldr	r2, [pc, #480]	; (8006e7c <low_level_init+0x248>)
 8006c9a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006c9c:	4b75      	ldr	r3, [pc, #468]	; (8006e74 <low_level_init+0x240>)
 8006c9e:	4a78      	ldr	r2, [pc, #480]	; (8006e80 <low_level_init+0x24c>)
 8006ca0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006ca2:	4b74      	ldr	r3, [pc, #464]	; (8006e74 <low_level_init+0x240>)
 8006ca4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006ca8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006caa:	4872      	ldr	r0, [pc, #456]	; (8006e74 <low_level_init+0x240>)
 8006cac:	f7fa ff8a 	bl	8001bc4 <HAL_ETH_Init>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006cb6:	2238      	movs	r2, #56	; 0x38
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4872      	ldr	r0, [pc, #456]	; (8006e84 <low_level_init+0x250>)
 8006cbc:	f012 f9e3 	bl	8019086 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006cc0:	4b70      	ldr	r3, [pc, #448]	; (8006e84 <low_level_init+0x250>)
 8006cc2:	2221      	movs	r2, #33	; 0x21
 8006cc4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006cc6:	4b6f      	ldr	r3, [pc, #444]	; (8006e84 <low_level_init+0x250>)
 8006cc8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006ccc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006cce:	4b6d      	ldr	r3, [pc, #436]	; (8006e84 <low_level_init+0x250>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8006cd4:	486c      	ldr	r0, [pc, #432]	; (8006e88 <low_level_init+0x254>)
 8006cd6:	f005 fc63 	bl	800c5a0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2206      	movs	r2, #6
 8006cde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006ce2:	4b64      	ldr	r3, [pc, #400]	; (8006e74 <low_level_init+0x240>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006cee:	4b61      	ldr	r3, [pc, #388]	; (8006e74 <low_level_init+0x240>)
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	785a      	ldrb	r2, [r3, #1]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006cfa:	4b5e      	ldr	r3, [pc, #376]	; (8006e74 <low_level_init+0x240>)
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	789a      	ldrb	r2, [r3, #2]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006d06:	4b5b      	ldr	r3, [pc, #364]	; (8006e74 <low_level_init+0x240>)
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	78da      	ldrb	r2, [r3, #3]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006d12:	4b58      	ldr	r3, [pc, #352]	; (8006e74 <low_level_init+0x240>)
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	791a      	ldrb	r2, [r3, #4]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006d1e:	4b55      	ldr	r3, [pc, #340]	; (8006e74 <low_level_init+0x240>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	795a      	ldrb	r2, [r3, #5]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006d30:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006d38:	f043 030a 	orr.w	r3, r3, #10
 8006d3c:	b2da      	uxtb	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8006d44:	2203      	movs	r2, #3
 8006d46:	2100      	movs	r1, #0
 8006d48:	2001      	movs	r0, #1
 8006d4a:	f001 f82d 	bl	8007da8 <xQueueGenericCreate>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	4a4e      	ldr	r2, [pc, #312]	; (8006e8c <low_level_init+0x258>)
 8006d52:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8006d54:	2203      	movs	r2, #3
 8006d56:	2100      	movs	r1, #0
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f001 f825 	bl	8007da8 <xQueueGenericCreate>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	4a4b      	ldr	r2, [pc, #300]	; (8006e90 <low_level_init+0x25c>)
 8006d62:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006d64:	4b4b      	ldr	r3, [pc, #300]	; (8006e94 <low_level_init+0x260>)
 8006d66:	f107 0408 	add.w	r4, r7, #8
 8006d6a:	461d      	mov	r5, r3
 8006d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8006d78:	f107 0308 	add.w	r3, r7, #8
 8006d7c:	6879      	ldr	r1, [r7, #4]
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fc16 	bl	80075b0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006d84:	4944      	ldr	r1, [pc, #272]	; (8006e98 <low_level_init+0x264>)
 8006d86:	4845      	ldr	r0, [pc, #276]	; (8006e9c <low_level_init+0x268>)
 8006d88:	f7fa fc87 	bl	800169a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8006d8c:	4843      	ldr	r0, [pc, #268]	; (8006e9c <low_level_init+0x268>)
 8006d8e:	f7fa fcb6 	bl	80016fe <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8006d92:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d165      	bne.n	8006e66 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006d9a:	4840      	ldr	r0, [pc, #256]	; (8006e9c <low_level_init+0x268>)
 8006d9c:	f7fa fd57 	bl	800184e <LAN8742_GetLinkState>
 8006da0:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8006da4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	dc06      	bgt.n	8006dba <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f005 ffdd 	bl	800cd6c <netif_set_link_down>
      netif_set_down(netif);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f005 ff70 	bl	800cc98 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8006db8:	e057      	b.n	8006e6a <low_level_init+0x236>
      switch (PHYLinkState)
 8006dba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006dbe:	3b02      	subs	r3, #2
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d82b      	bhi.n	8006e1c <low_level_init+0x1e8>
 8006dc4:	a201      	add	r2, pc, #4	; (adr r2, 8006dcc <low_level_init+0x198>)
 8006dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dca:	bf00      	nop
 8006dcc:	08006ddd 	.word	0x08006ddd
 8006dd0:	08006def 	.word	0x08006def
 8006dd4:	08006dff 	.word	0x08006dff
 8006dd8:	08006e0f 	.word	0x08006e0f
        duplex = ETH_FULLDUPLEX_MODE;
 8006ddc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006dec:	e01f      	b.n	8006e2e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006dfc:	e017      	b.n	8006e2e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006dfe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006e06:	2300      	movs	r3, #0
 8006e08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006e0c:	e00f      	b.n	8006e2e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8006e14:	2300      	movs	r3, #0
 8006e16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006e1a:	e008      	b.n	8006e2e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8006e1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8006e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8006e2c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006e2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e32:	4619      	mov	r1, r3
 8006e34:	480f      	ldr	r0, [pc, #60]	; (8006e74 <low_level_init+0x240>)
 8006e36:	f7fb fba9 	bl	800258c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8006e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e3e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8006e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e44:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006e46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4809      	ldr	r0, [pc, #36]	; (8006e74 <low_level_init+0x240>)
 8006e4e:	f7fb fc87 	bl	8002760 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006e52:	4808      	ldr	r0, [pc, #32]	; (8006e74 <low_level_init+0x240>)
 8006e54:	f7fa ff32 	bl	8001cbc <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f005 feb1 	bl	800cbc0 <netif_set_up>
    netif_set_link_up(netif);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f005 ff4c 	bl	800ccfc <netif_set_link_up>
}
 8006e64:	e001      	b.n	8006e6a <low_level_init+0x236>
    Error_Handler();
 8006e66:	f7fa f8d8 	bl	800101a <Error_Handler>
}
 8006e6a:	bf00      	nop
 8006e6c:	37a0      	adds	r7, #160	; 0xa0
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bdb0      	pop	{r4, r5, r7, pc}
 8006e72:	bf00      	nop
 8006e74:	200054b4 	.word	0x200054b4
 8006e78:	40028000 	.word	0x40028000
 8006e7c:	20000148 	.word	0x20000148
 8006e80:	200000a8 	.word	0x200000a8
 8006e84:	20005564 	.word	0x20005564
 8006e88:	0801d0f0 	.word	0x0801d0f0
 8006e8c:	200054ac 	.word	0x200054ac
 8006e90:	200054b0 	.word	0x200054b0
 8006e94:	08019f28 	.word	0x08019f28
 8006e98:	20000024 	.word	0x20000024
 8006e9c:	2000559c 	.word	0x2000559c

08006ea0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b092      	sub	sp, #72	; 0x48
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006eb8:	f107 030c 	add.w	r3, r7, #12
 8006ebc:	2230      	movs	r2, #48	; 0x30
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f012 f8e0 	bl	8019086 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006ec6:	f107 030c 	add.w	r3, r7, #12
 8006eca:	2230      	movs	r2, #48	; 0x30
 8006ecc:	2100      	movs	r1, #0
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f012 f8d9 	bl	8019086 <memset>

  for(q = p; q != NULL; q = q->next)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed8:	e045      	b.n	8006f66 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8006eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006edc:	2b03      	cmp	r3, #3
 8006ede:	d902      	bls.n	8006ee6 <low_level_output+0x46>
      return ERR_IF;
 8006ee0:	f06f 030b 	mvn.w	r3, #11
 8006ee4:	e065      	b.n	8006fb2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee8:	6859      	ldr	r1, [r3, #4]
 8006eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eec:	4613      	mov	r3, r2
 8006eee:	005b      	lsls	r3, r3, #1
 8006ef0:	4413      	add	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	3348      	adds	r3, #72	; 0x48
 8006ef6:	443b      	add	r3, r7
 8006ef8:	3b3c      	subs	r3, #60	; 0x3c
 8006efa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8006efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006efe:	895b      	ldrh	r3, [r3, #10]
 8006f00:	4619      	mov	r1, r3
 8006f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f04:	4613      	mov	r3, r2
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	3348      	adds	r3, #72	; 0x48
 8006f0e:	443b      	add	r3, r7
 8006f10:	3b38      	subs	r3, #56	; 0x38
 8006f12:	6019      	str	r1, [r3, #0]

    if(i>0)
 8006f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d011      	beq.n	8006f3e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8006f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	f107 000c 	add.w	r0, r7, #12
 8006f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006f24:	460b      	mov	r3, r1
 8006f26:	005b      	lsls	r3, r3, #1
 8006f28:	440b      	add	r3, r1
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	18c1      	adds	r1, r0, r3
 8006f2e:	4613      	mov	r3, r2
 8006f30:	005b      	lsls	r3, r3, #1
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	3348      	adds	r3, #72	; 0x48
 8006f38:	443b      	add	r3, r7
 8006f3a:	3b34      	subs	r3, #52	; 0x34
 8006f3c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d109      	bne.n	8006f5a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	3348      	adds	r3, #72	; 0x48
 8006f52:	443b      	add	r3, r7
 8006f54:	3b34      	subs	r3, #52	; 0x34
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f5c:	3301      	adds	r3, #1
 8006f5e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	643b      	str	r3, [r7, #64]	; 0x40
 8006f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1b6      	bne.n	8006eda <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	891b      	ldrh	r3, [r3, #8]
 8006f70:	461a      	mov	r2, r3
 8006f72:	4b12      	ldr	r3, [pc, #72]	; (8006fbc <low_level_output+0x11c>)
 8006f74:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006f76:	4a11      	ldr	r2, [pc, #68]	; (8006fbc <low_level_output+0x11c>)
 8006f78:	f107 030c 	add.w	r3, r7, #12
 8006f7c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006f7e:	4a0f      	ldr	r2, [pc, #60]	; (8006fbc <low_level_output+0x11c>)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006f84:	6838      	ldr	r0, [r7, #0]
 8006f86:	f006 fb75 	bl	800d674 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8006f8a:	490c      	ldr	r1, [pc, #48]	; (8006fbc <low_level_output+0x11c>)
 8006f8c:	480c      	ldr	r0, [pc, #48]	; (8006fc0 <low_level_output+0x120>)
 8006f8e:	f7fa ffa3 	bl	8001ed8 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8006f92:	bf00      	nop
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <low_level_output+0x124>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f04f 31ff 	mov.w	r1, #4294967295
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fc03 	bl	80077a8 <osSemaphoreWait>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1f5      	bne.n	8006f94 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8006fa8:	4805      	ldr	r0, [pc, #20]	; (8006fc0 <low_level_output+0x120>)
 8006faa:	f7fb f929 	bl	8002200 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8006fae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3748      	adds	r7, #72	; 0x48
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20005564 	.word	0x20005564
 8006fc0:	200054b4 	.word	0x200054b4
 8006fc4:	200054b0 	.word	0x200054b0

08006fc8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8006fd4:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <low_level_input+0x2c>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d105      	bne.n	8006fe8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8006fdc:	f107 030c 	add.w	r3, r7, #12
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4805      	ldr	r0, [pc, #20]	; (8006ff8 <low_level_input+0x30>)
 8006fe4:	f7fa ffd4 	bl	8001f90 <HAL_ETH_ReadData>
  }

  return p;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	200054a8 	.word	0x200054a8
 8006ff8:	200054b4 	.word	0x200054b4

08006ffc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b084      	sub	sp, #16
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8007004:	2300      	movs	r3, #0
 8007006:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800700c:	4b0f      	ldr	r3, [pc, #60]	; (800704c <ethernetif_input+0x50>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f04f 31ff 	mov.w	r1, #4294967295
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fbc7 	bl	80077a8 <osSemaphoreWait>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d1f5      	bne.n	800700c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8007020:	68b8      	ldr	r0, [r7, #8]
 8007022:	f7ff ffd1 	bl	8006fc8 <low_level_input>
 8007026:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	68b9      	ldr	r1, [r7, #8]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	4798      	blx	r3
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f006 fa72 	bl	800d528 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d1ea      	bne.n	8007020 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800704a:	e7df      	b.n	800700c <ethernetif_input+0x10>
 800704c:	200054ac 	.word	0x200054ac

08007050 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <ethernetif_init+0x1c>
 800705e:	4b0e      	ldr	r3, [pc, #56]	; (8007098 <ethernetif_init+0x48>)
 8007060:	f240 12ef 	movw	r2, #495	; 0x1ef
 8007064:	490d      	ldr	r1, [pc, #52]	; (800709c <ethernetif_init+0x4c>)
 8007066:	480e      	ldr	r0, [pc, #56]	; (80070a0 <ethernetif_init+0x50>)
 8007068:	f011 ffa8 	bl	8018fbc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2273      	movs	r2, #115	; 0x73
 8007070:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2274      	movs	r2, #116	; 0x74
 8007078:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a09      	ldr	r2, [pc, #36]	; (80070a4 <ethernetif_init+0x54>)
 8007080:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a08      	ldr	r2, [pc, #32]	; (80070a8 <ethernetif_init+0x58>)
 8007086:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fdd3 	bl	8006c34 <low_level_init>

  return ERR_OK;
 800708e:	2300      	movs	r3, #0
}
 8007090:	4618      	mov	r0, r3
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}
 8007098:	08019f44 	.word	0x08019f44
 800709c:	08019f60 	.word	0x08019f60
 80070a0:	08019f70 	.word	0x08019f70
 80070a4:	08016d65 	.word	0x08016d65
 80070a8:	08006ea1 	.word	0x08006ea1

080070ac <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80070b8:	68f9      	ldr	r1, [r7, #12]
 80070ba:	4809      	ldr	r0, [pc, #36]	; (80070e0 <pbuf_free_custom+0x34>)
 80070bc:	f005 fb60 	bl	800c780 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80070c0:	4b08      	ldr	r3, [pc, #32]	; (80070e4 <pbuf_free_custom+0x38>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d107      	bne.n	80070d8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80070c8:	4b06      	ldr	r3, [pc, #24]	; (80070e4 <pbuf_free_custom+0x38>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80070ce:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <pbuf_free_custom+0x3c>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f000 fbb6 	bl	8007844 <osSemaphoreRelease>
  }
}
 80070d8:	bf00      	nop
 80070da:	3710      	adds	r7, #16
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	0801d0f0 	.word	0x0801d0f0
 80070e4:	200054a8 	.word	0x200054a8
 80070e8:	200054ac 	.word	0x200054ac

080070ec <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80070f0:	f7fa fc56 	bl	80019a0 <HAL_GetTick>
 80070f4:	4603      	mov	r3, r0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08e      	sub	sp, #56	; 0x38
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007108:	2200      	movs	r2, #0
 800710a:	601a      	str	r2, [r3, #0]
 800710c:	605a      	str	r2, [r3, #4]
 800710e:	609a      	str	r2, [r3, #8]
 8007110:	60da      	str	r2, [r3, #12]
 8007112:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a52      	ldr	r2, [pc, #328]	; (8007264 <HAL_ETH_MspInit+0x168>)
 800711a:	4293      	cmp	r3, r2
 800711c:	f040 809e 	bne.w	800725c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007120:	4b51      	ldr	r3, [pc, #324]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007124:	4a50      	ldr	r2, [pc, #320]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007126:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800712a:	6313      	str	r3, [r2, #48]	; 0x30
 800712c:	4b4e      	ldr	r3, [pc, #312]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800712e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007134:	623b      	str	r3, [r7, #32]
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	4b4b      	ldr	r3, [pc, #300]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800713a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713c:	4a4a      	ldr	r2, [pc, #296]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800713e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007142:	6313      	str	r3, [r2, #48]	; 0x30
 8007144:	4b48      	ldr	r3, [pc, #288]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800714c:	61fb      	str	r3, [r7, #28]
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	4b45      	ldr	r3, [pc, #276]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	4a44      	ldr	r2, [pc, #272]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007156:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800715a:	6313      	str	r3, [r2, #48]	; 0x30
 800715c:	4b42      	ldr	r3, [pc, #264]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800715e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007164:	61bb      	str	r3, [r7, #24]
 8007166:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007168:	4b3f      	ldr	r3, [pc, #252]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	4a3e      	ldr	r2, [pc, #248]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800716e:	f043 0304 	orr.w	r3, r3, #4
 8007172:	6313      	str	r3, [r2, #48]	; 0x30
 8007174:	4b3c      	ldr	r3, [pc, #240]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	f003 0304 	and.w	r3, r3, #4
 800717c:	617b      	str	r3, [r7, #20]
 800717e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007180:	4b39      	ldr	r3, [pc, #228]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	4a38      	ldr	r2, [pc, #224]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 8007186:	f043 0301 	orr.w	r3, r3, #1
 800718a:	6313      	str	r3, [r2, #48]	; 0x30
 800718c:	4b36      	ldr	r3, [pc, #216]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800718e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007198:	4b33      	ldr	r3, [pc, #204]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800719c:	4a32      	ldr	r2, [pc, #200]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 800719e:	f043 0302 	orr.w	r3, r3, #2
 80071a2:	6313      	str	r3, [r2, #48]	; 0x30
 80071a4:	4b30      	ldr	r3, [pc, #192]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 80071a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a8:	f003 0302 	and.w	r3, r3, #2
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80071b0:	4b2d      	ldr	r3, [pc, #180]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 80071b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b4:	4a2c      	ldr	r2, [pc, #176]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 80071b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ba:	6313      	str	r3, [r2, #48]	; 0x30
 80071bc:	4b2a      	ldr	r3, [pc, #168]	; (8007268 <HAL_ETH_MspInit+0x16c>)
 80071be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80071c8:	2332      	movs	r3, #50	; 0x32
 80071ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071cc:	2302      	movs	r3, #2
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071d4:	2303      	movs	r3, #3
 80071d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071d8:	230b      	movs	r3, #11
 80071da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071e0:	4619      	mov	r1, r3
 80071e2:	4822      	ldr	r0, [pc, #136]	; (800726c <HAL_ETH_MspInit+0x170>)
 80071e4:	f7fb ff3c 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80071e8:	2386      	movs	r3, #134	; 0x86
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071ec:	2302      	movs	r3, #2
 80071ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071f4:	2303      	movs	r3, #3
 80071f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80071f8:	230b      	movs	r3, #11
 80071fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007200:	4619      	mov	r1, r3
 8007202:	481b      	ldr	r0, [pc, #108]	; (8007270 <HAL_ETH_MspInit+0x174>)
 8007204:	f7fb ff2c 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007208:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800720e:	2302      	movs	r3, #2
 8007210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007212:	2300      	movs	r3, #0
 8007214:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007216:	2303      	movs	r3, #3
 8007218:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800721a:	230b      	movs	r3, #11
 800721c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800721e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007222:	4619      	mov	r1, r3
 8007224:	4813      	ldr	r0, [pc, #76]	; (8007274 <HAL_ETH_MspInit+0x178>)
 8007226:	f7fb ff1b 	bl	8003060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800722a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800722e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007230:	2302      	movs	r3, #2
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007234:	2300      	movs	r3, #0
 8007236:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007238:	2303      	movs	r3, #3
 800723a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800723c:	230b      	movs	r3, #11
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007240:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007244:	4619      	mov	r1, r3
 8007246:	480c      	ldr	r0, [pc, #48]	; (8007278 <HAL_ETH_MspInit+0x17c>)
 8007248:	f7fb ff0a 	bl	8003060 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800724c:	2200      	movs	r2, #0
 800724e:	2105      	movs	r1, #5
 8007250:	203d      	movs	r0, #61	; 0x3d
 8007252:	f7fa fc8d 	bl	8001b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007256:	203d      	movs	r0, #61	; 0x3d
 8007258:	f7fa fca6 	bl	8001ba8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800725c:	bf00      	nop
 800725e:	3738      	adds	r7, #56	; 0x38
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	40028000 	.word	0x40028000
 8007268:	40023800 	.word	0x40023800
 800726c:	40020800 	.word	0x40020800
 8007270:	40020000 	.word	0x40020000
 8007274:	40020400 	.word	0x40020400
 8007278:	40021800 	.word	0x40021800

0800727c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <ETH_PHY_IO_Init+0x10>)
 8007282:	f7fb fa87 	bl	8002794 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8007286:	2300      	movs	r3, #0
}
 8007288:	4618      	mov	r0, r3
 800728a:	bd80      	pop	{r7, pc}
 800728c:	200054b4 	.word	0x200054b4

08007290 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  return 0;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	68f9      	ldr	r1, [r7, #12]
 80072b2:	4807      	ldr	r0, [pc, #28]	; (80072d0 <ETH_PHY_IO_ReadReg+0x30>)
 80072b4:	f7fb f8d6 	bl	8002464 <HAL_ETH_ReadPHYRegister>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	e000      	b.n	80072c6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	200054b4 	.word	0x200054b4

080072d4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	68f9      	ldr	r1, [r7, #12]
 80072e6:	4807      	ldr	r0, [pc, #28]	; (8007304 <ETH_PHY_IO_WriteReg+0x30>)
 80072e8:	f7fb f907 	bl	80024fa <HAL_ETH_WritePHYRegister>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d002      	beq.n	80072f8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80072f2:	f04f 33ff 	mov.w	r3, #4294967295
 80072f6:	e000      	b.n	80072fa <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200054b4 	.word	0x200054b4

08007308 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800730c:	f7fa fb48 	bl	80019a0 <HAL_GetTick>
 8007310:	4603      	mov	r3, r0
}
 8007312:	4618      	mov	r0, r3
 8007314:	bd80      	pop	{r7, pc}
	...

08007318 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b0a0      	sub	sp, #128	; 0x80
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8007320:	f107 0308 	add.w	r3, r7, #8
 8007324:	2264      	movs	r2, #100	; 0x64
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f011 feac 	bl	8019086 <memset>
  int32_t PHYLinkState = 0;
 800732e:	2300      	movs	r3, #0
 8007330:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007336:	2300      	movs	r3, #0
 8007338:	67bb      	str	r3, [r7, #120]	; 0x78
 800733a:	2300      	movs	r3, #0
 800733c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007342:	483a      	ldr	r0, [pc, #232]	; (800742c <ethernet_link_thread+0x114>)
 8007344:	f7fa fa83 	bl	800184e <LAN8742_GetLinkState>
 8007348:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800734a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800734c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007350:	089b      	lsrs	r3, r3, #2
 8007352:	f003 0301 	and.w	r3, r3, #1
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <ethernet_link_thread+0x5e>
 800735c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800735e:	2b01      	cmp	r3, #1
 8007360:	dc09      	bgt.n	8007376 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8007362:	4833      	ldr	r0, [pc, #204]	; (8007430 <ethernet_link_thread+0x118>)
 8007364:	f7fa fd38 	bl	8001dd8 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007368:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800736a:	f005 fc95 	bl	800cc98 <netif_set_down>
    netif_set_link_down(netif);
 800736e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007370:	f005 fcfc 	bl	800cd6c <netif_set_link_down>
 8007374:	e055      	b.n	8007422 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8007376:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007378:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800737c:	f003 0304 	and.w	r3, r3, #4
 8007380:	2b00      	cmp	r3, #0
 8007382:	d14e      	bne.n	8007422 <ethernet_link_thread+0x10a>
 8007384:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007386:	2b01      	cmp	r3, #1
 8007388:	dd4b      	ble.n	8007422 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800738a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800738c:	3b02      	subs	r3, #2
 800738e:	2b03      	cmp	r3, #3
 8007390:	d82a      	bhi.n	80073e8 <ethernet_link_thread+0xd0>
 8007392:	a201      	add	r2, pc, #4	; (adr r2, 8007398 <ethernet_link_thread+0x80>)
 8007394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007398:	080073a9 	.word	0x080073a9
 800739c:	080073bb 	.word	0x080073bb
 80073a0:	080073cb 	.word	0x080073cb
 80073a4:	080073db 	.word	0x080073db
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80073a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80073ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073b4:	2301      	movs	r3, #1
 80073b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073b8:	e017      	b.n	80073ea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80073be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073c4:	2301      	movs	r3, #1
 80073c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073c8:	e00f      	b.n	80073ea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80073ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80073ce:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80073d0:	2300      	movs	r3, #0
 80073d2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073d4:	2301      	movs	r3, #1
 80073d6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073d8:	e007      	b.n	80073ea <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80073da:	2300      	movs	r3, #0
 80073dc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80073de:	2300      	movs	r3, #0
 80073e0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80073e2:	2301      	movs	r3, #1
 80073e4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80073e6:	e000      	b.n	80073ea <ethernet_link_thread+0xd2>
    default:
      break;
 80073e8:	bf00      	nop
    }

    if(linkchanged)
 80073ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d018      	beq.n	8007422 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80073f0:	f107 0308 	add.w	r3, r7, #8
 80073f4:	4619      	mov	r1, r3
 80073f6:	480e      	ldr	r0, [pc, #56]	; (8007430 <ethernet_link_thread+0x118>)
 80073f8:	f7fb f8c8 	bl	800258c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80073fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073fe:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8007400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007402:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8007404:	f107 0308 	add.w	r3, r7, #8
 8007408:	4619      	mov	r1, r3
 800740a:	4809      	ldr	r0, [pc, #36]	; (8007430 <ethernet_link_thread+0x118>)
 800740c:	f7fb f9a8 	bl	8002760 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8007410:	4807      	ldr	r0, [pc, #28]	; (8007430 <ethernet_link_thread+0x118>)
 8007412:	f7fa fc53 	bl	8001cbc <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8007416:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007418:	f005 fbd2 	bl	800cbc0 <netif_set_up>
      netif_set_link_up(netif);
 800741c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800741e:	f005 fc6d 	bl	800ccfc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8007422:	2064      	movs	r0, #100	; 0x64
 8007424:	f000 f910 	bl	8007648 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8007428:	e78b      	b.n	8007342 <ethernet_link_thread+0x2a>
 800742a:	bf00      	nop
 800742c:	2000559c 	.word	0x2000559c
 8007430:	200054b4 	.word	0x200054b4

08007434 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af02      	add	r7, sp, #8
 800743a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800743c:	4812      	ldr	r0, [pc, #72]	; (8007488 <HAL_ETH_RxAllocateCallback+0x54>)
 800743e:	f005 f92b 	bl	800c698 <memp_malloc_pool>
 8007442:	60f8      	str	r0, [r7, #12]
  if (p)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d014      	beq.n	8007474 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f103 0220 	add.w	r2, r3, #32
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4a0d      	ldr	r2, [pc, #52]	; (800748c <HAL_ETH_RxAllocateCallback+0x58>)
 8007458:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9300      	str	r3, [sp, #0]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2241      	movs	r2, #65	; 0x41
 800746a:	2100      	movs	r1, #0
 800746c:	2000      	movs	r0, #0
 800746e:	f005 fea1 	bl	800d1b4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8007472:	e005      	b.n	8007480 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8007474:	4b06      	ldr	r3, [pc, #24]	; (8007490 <HAL_ETH_RxAllocateCallback+0x5c>)
 8007476:	2201      	movs	r2, #1
 8007478:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	601a      	str	r2, [r3, #0]
}
 8007480:	bf00      	nop
 8007482:	3710      	adds	r7, #16
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}
 8007488:	0801d0f0 	.word	0x0801d0f0
 800748c:	080070ad 	.word	0x080070ad
 8007490:	200054a8 	.word	0x200054a8

08007494 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b088      	sub	sp, #32
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	3b20      	subs	r3, #32
 80074b2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80074ba:	69fb      	ldr	r3, [r7, #28]
 80074bc:	2200      	movs	r2, #0
 80074be:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80074c0:	69fb      	ldr	r3, [r7, #28]
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d103      	bne.n	80074d6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	69fa      	ldr	r2, [r7, #28]
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e003      	b.n	80074de <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	69fa      	ldr	r2, [r7, #28]
 80074e2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	e009      	b.n	8007500 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	891a      	ldrh	r2, [r3, #8]
 80074f0:	887b      	ldrh	r3, [r7, #2]
 80074f2:	4413      	add	r3, r2
 80074f4:	b29a      	uxth	r2, r3
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	61fb      	str	r3, [r7, #28]
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f2      	bne.n	80074ec <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8007506:	887b      	ldrh	r3, [r7, #2]
 8007508:	4619      	mov	r1, r3
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f7ff fb2e 	bl	8006b6c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8007510:	bf00      	nop
 8007512:	3720      	adds	r7, #32
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f006 f801 	bl	800d528 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8007526:	bf00      	nop
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800752e:	b480      	push	{r7}
 8007530:	b085      	sub	sp, #20
 8007532:	af00      	add	r7, sp, #0
 8007534:	4603      	mov	r3, r0
 8007536:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007538:	2300      	movs	r3, #0
 800753a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800753c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007540:	2b84      	cmp	r3, #132	; 0x84
 8007542:	d005      	beq.n	8007550 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007544:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	3303      	adds	r3, #3
 800754e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007550:	68fb      	ldr	r3, [r7, #12]
}
 8007552:	4618      	mov	r0, r3
 8007554:	3714      	adds	r7, #20
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr

0800755e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800755e:	b480      	push	{r7}
 8007560:	b083      	sub	sp, #12
 8007562:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007564:	f3ef 8305 	mrs	r3, IPSR
 8007568:	607b      	str	r3, [r7, #4]
  return(result);
 800756a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf14      	ite	ne
 8007570:	2301      	movne	r3, #1
 8007572:	2300      	moveq	r3, #0
 8007574:	b2db      	uxtb	r3, r3
}
 8007576:	4618      	mov	r0, r3
 8007578:	370c      	adds	r7, #12
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007582:	b580      	push	{r7, lr}
 8007584:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007586:	f001 fc73 	bl	8008e70 <vTaskStartScheduler>
  
  return osOK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	bd80      	pop	{r7, pc}

08007590 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007594:	f7ff ffe3 	bl	800755e <inHandlerMode>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d003      	beq.n	80075a6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800759e:	f001 fd87 	bl	80090b0 <xTaskGetTickCountFromISR>
 80075a2:	4603      	mov	r3, r0
 80075a4:	e002      	b.n	80075ac <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80075a6:	f001 fd73 	bl	8009090 <xTaskGetTickCount>
 80075aa:	4603      	mov	r3, r0
  }
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	bd80      	pop	{r7, pc}

080075b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075b2:	b089      	sub	sp, #36	; 0x24
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	6078      	str	r0, [r7, #4]
 80075b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695b      	ldr	r3, [r3, #20]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d020      	beq.n	8007604 <osThreadCreate+0x54>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01c      	beq.n	8007604 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685c      	ldr	r4, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	691e      	ldr	r6, [r3, #16]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075dc:	4618      	mov	r0, r3
 80075de:	f7ff ffa6 	bl	800752e <makeFreeRtosPriority>
 80075e2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075ec:	9202      	str	r2, [sp, #8]
 80075ee:	9301      	str	r3, [sp, #4]
 80075f0:	9100      	str	r1, [sp, #0]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	4632      	mov	r2, r6
 80075f6:	4629      	mov	r1, r5
 80075f8:	4620      	mov	r0, r4
 80075fa:	f001 fa67 	bl	8008acc <xTaskCreateStatic>
 80075fe:	4603      	mov	r3, r0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	e01c      	b.n	800763e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685c      	ldr	r4, [r3, #4]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007610:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007618:	4618      	mov	r0, r3
 800761a:	f7ff ff88 	bl	800752e <makeFreeRtosPriority>
 800761e:	4602      	mov	r2, r0
 8007620:	f107 030c 	add.w	r3, r7, #12
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	9200      	str	r2, [sp, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	4632      	mov	r2, r6
 800762c:	4629      	mov	r1, r5
 800762e:	4620      	mov	r0, r4
 8007630:	f001 faaf 	bl	8008b92 <xTaskCreate>
 8007634:	4603      	mov	r3, r0
 8007636:	2b01      	cmp	r3, #1
 8007638:	d001      	beq.n	800763e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	e000      	b.n	8007640 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800763e:	68fb      	ldr	r3, [r7, #12]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007648 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <osDelay+0x16>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	e000      	b.n	8007660 <osDelay+0x18>
 800765e:	2301      	movs	r3, #1
 8007660:	4618      	mov	r0, r3
 8007662:	f001 fbcf 	bl	8008e04 <vTaskDelay>
  
  return osOK;
 8007666:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007668:	4618      	mov	r0, r3
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d007      	beq.n	8007690 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	4619      	mov	r1, r3
 8007686:	2001      	movs	r0, #1
 8007688:	f000 fc21 	bl	8007ece <xQueueCreateMutexStatic>
 800768c:	4603      	mov	r3, r0
 800768e:	e003      	b.n	8007698 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8007690:	2001      	movs	r0, #1
 8007692:	f000 fc04 	bl	8007e9e <xQueueCreateMutex>
 8007696:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8007698:	4618      	mov	r0, r3
 800769a:	3708      	adds	r7, #8
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80076aa:	2300      	movs	r3, #0
 80076ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <osMutexWait+0x18>
    return osErrorParameter;
 80076b4:	2380      	movs	r3, #128	; 0x80
 80076b6:	e03a      	b.n	800772e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c2:	d103      	bne.n	80076cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80076c4:	f04f 33ff 	mov.w	r3, #4294967295
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e009      	b.n	80076e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d006      	beq.n	80076e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <osMutexWait+0x40>
      ticks = 1;
 80076dc:	2301      	movs	r3, #1
 80076de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80076e0:	f7ff ff3d 	bl	800755e <inHandlerMode>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d017      	beq.n	800771a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80076ea:	f107 0308 	add.w	r3, r7, #8
 80076ee:	461a      	mov	r2, r3
 80076f0:	2100      	movs	r1, #0
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 f83c 	bl	8008770 <xQueueReceiveFromISR>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d001      	beq.n	8007702 <osMutexWait+0x62>
      return osErrorOS;
 80076fe:	23ff      	movs	r3, #255	; 0xff
 8007700:	e015      	b.n	800772e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d011      	beq.n	800772c <osMutexWait+0x8c>
 8007708:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <osMutexWait+0x98>)
 800770a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	e008      	b.n	800772c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800771a:	68f9      	ldr	r1, [r7, #12]
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 ff13 	bl	8008548 <xQueueSemaphoreTake>
 8007722:	4603      	mov	r3, r0
 8007724:	2b01      	cmp	r3, #1
 8007726:	d001      	beq.n	800772c <osMutexWait+0x8c>
    return osErrorOS;
 8007728:	23ff      	movs	r3, #255	; 0xff
 800772a:	e000      	b.n	800772e <osMutexWait+0x8e>
  }
  
  return osOK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007744:	2300      	movs	r3, #0
 8007746:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007748:	2300      	movs	r3, #0
 800774a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800774c:	f7ff ff07 	bl	800755e <inHandlerMode>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d016      	beq.n	8007784 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007756:	f107 0308 	add.w	r3, r7, #8
 800775a:	4619      	mov	r1, r3
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fd77 	bl	8008250 <xQueueGiveFromISR>
 8007762:	4603      	mov	r3, r0
 8007764:	2b01      	cmp	r3, #1
 8007766:	d001      	beq.n	800776c <osMutexRelease+0x30>
      return osErrorOS;
 8007768:	23ff      	movs	r3, #255	; 0xff
 800776a:	e017      	b.n	800779c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d013      	beq.n	800779a <osMutexRelease+0x5e>
 8007772:	4b0c      	ldr	r3, [pc, #48]	; (80077a4 <osMutexRelease+0x68>)
 8007774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	f3bf 8f6f 	isb	sy
 8007782:	e00a      	b.n	800779a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007784:	2300      	movs	r3, #0
 8007786:	2200      	movs	r2, #0
 8007788:	2100      	movs	r1, #0
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fbba 	bl	8007f04 <xQueueGenericSend>
 8007790:	4603      	mov	r3, r0
 8007792:	2b01      	cmp	r3, #1
 8007794:	d001      	beq.n	800779a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007796:	23ff      	movs	r3, #255	; 0xff
 8007798:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800779a:	68fb      	ldr	r3, [r7, #12]
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	e000ed04 	.word	0xe000ed04

080077a8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80077b2:	2300      	movs	r3, #0
 80077b4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80077bc:	2380      	movs	r3, #128	; 0x80
 80077be:	e03a      	b.n	8007836 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80077c0:	2300      	movs	r3, #0
 80077c2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d103      	bne.n	80077d4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80077cc:	f04f 33ff 	mov.w	r3, #4294967295
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e009      	b.n	80077e8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d006      	beq.n	80077e8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <osSemaphoreWait+0x40>
      ticks = 1;
 80077e4:	2301      	movs	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80077e8:	f7ff feb9 	bl	800755e <inHandlerMode>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d017      	beq.n	8007822 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80077f2:	f107 0308 	add.w	r3, r7, #8
 80077f6:	461a      	mov	r2, r3
 80077f8:	2100      	movs	r1, #0
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 ffb8 	bl	8008770 <xQueueReceiveFromISR>
 8007800:	4603      	mov	r3, r0
 8007802:	2b01      	cmp	r3, #1
 8007804:	d001      	beq.n	800780a <osSemaphoreWait+0x62>
      return osErrorOS;
 8007806:	23ff      	movs	r3, #255	; 0xff
 8007808:	e015      	b.n	8007836 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d011      	beq.n	8007834 <osSemaphoreWait+0x8c>
 8007810:	4b0b      	ldr	r3, [pc, #44]	; (8007840 <osSemaphoreWait+0x98>)
 8007812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007816:	601a      	str	r2, [r3, #0]
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	e008      	b.n	8007834 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fe8f 	bl	8008548 <xQueueSemaphoreTake>
 800782a:	4603      	mov	r3, r0
 800782c:	2b01      	cmp	r3, #1
 800782e:	d001      	beq.n	8007834 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007830:	23ff      	movs	r3, #255	; 0xff
 8007832:	e000      	b.n	8007836 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	e000ed04 	.word	0xe000ed04

08007844 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800784c:	2300      	movs	r3, #0
 800784e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007850:	2300      	movs	r3, #0
 8007852:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007854:	f7ff fe83 	bl	800755e <inHandlerMode>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d016      	beq.n	800788c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800785e:	f107 0308 	add.w	r3, r7, #8
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 fcf3 	bl	8008250 <xQueueGiveFromISR>
 800786a:	4603      	mov	r3, r0
 800786c:	2b01      	cmp	r3, #1
 800786e:	d001      	beq.n	8007874 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007870:	23ff      	movs	r3, #255	; 0xff
 8007872:	e017      	b.n	80078a4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d013      	beq.n	80078a2 <osSemaphoreRelease+0x5e>
 800787a:	4b0c      	ldr	r3, [pc, #48]	; (80078ac <osSemaphoreRelease+0x68>)
 800787c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007880:	601a      	str	r2, [r3, #0]
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	e00a      	b.n	80078a2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800788c:	2300      	movs	r3, #0
 800788e:	2200      	movs	r2, #0
 8007890:	2100      	movs	r1, #0
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fb36 	bl	8007f04 <xQueueGenericSend>
 8007898:	4603      	mov	r3, r0
 800789a:	2b01      	cmp	r3, #1
 800789c:	d001      	beq.n	80078a2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800789e:	23ff      	movs	r3, #255	; 0xff
 80078a0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	e000ed04 	.word	0xe000ed04

080078b0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80078b0:	b590      	push	{r4, r7, lr}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d011      	beq.n	80078e6 <osMessageCreate+0x36>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d00d      	beq.n	80078e6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6818      	ldr	r0, [r3, #0]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6859      	ldr	r1, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	689a      	ldr	r2, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	2400      	movs	r4, #0
 80078dc:	9400      	str	r4, [sp, #0]
 80078de:	f000 f9e1 	bl	8007ca4 <xQueueGenericCreateStatic>
 80078e2:	4603      	mov	r3, r0
 80078e4:	e008      	b.n	80078f8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6818      	ldr	r0, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2200      	movs	r2, #0
 80078f0:	4619      	mov	r1, r3
 80078f2:	f000 fa59 	bl	8007da8 <xQueueGenericCreate>
 80078f6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd90      	pop	{r4, r7, pc}

08007900 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800790c:	2300      	movs	r3, #0
 800790e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d101      	bne.n	800791e <osMessagePut+0x1e>
    ticks = 1;
 800791a:	2301      	movs	r3, #1
 800791c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800791e:	f7ff fe1e 	bl	800755e <inHandlerMode>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d018      	beq.n	800795a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007928:	f107 0210 	add.w	r2, r7, #16
 800792c:	f107 0108 	add.w	r1, r7, #8
 8007930:	2300      	movs	r3, #0
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fbec 	bl	8008110 <xQueueGenericSendFromISR>
 8007938:	4603      	mov	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d001      	beq.n	8007942 <osMessagePut+0x42>
      return osErrorOS;
 800793e:	23ff      	movs	r3, #255	; 0xff
 8007940:	e018      	b.n	8007974 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d014      	beq.n	8007972 <osMessagePut+0x72>
 8007948:	4b0c      	ldr	r3, [pc, #48]	; (800797c <osMessagePut+0x7c>)
 800794a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800794e:	601a      	str	r2, [r3, #0]
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	e00b      	b.n	8007972 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800795a:	f107 0108 	add.w	r1, r7, #8
 800795e:	2300      	movs	r3, #0
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 face 	bl	8007f04 <xQueueGenericSend>
 8007968:	4603      	mov	r3, r0
 800796a:	2b01      	cmp	r3, #1
 800796c:	d001      	beq.n	8007972 <osMessagePut+0x72>
      return osErrorOS;
 800796e:	23ff      	movs	r3, #255	; 0xff
 8007970:	e000      	b.n	8007974 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3718      	adds	r7, #24
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}
 800797c:	e000ed04 	.word	0xe000ed04

08007980 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007980:	b590      	push	{r4, r7, lr}
 8007982:	b08b      	sub	sp, #44	; 0x2c
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800799a:	2380      	movs	r3, #128	; 0x80
 800799c:	617b      	str	r3, [r7, #20]
    return event;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	461c      	mov	r4, r3
 80079a2:	f107 0314 	add.w	r3, r7, #20
 80079a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80079aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80079ae:	e054      	b.n	8007a5a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80079b0:	2300      	movs	r3, #0
 80079b2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80079b4:	2300      	movs	r3, #0
 80079b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80079c0:	f04f 33ff 	mov.w	r3, #4294967295
 80079c4:	627b      	str	r3, [r7, #36]	; 0x24
 80079c6:	e009      	b.n	80079dc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d006      	beq.n	80079dc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <osMessageGet+0x5c>
      ticks = 1;
 80079d8:	2301      	movs	r3, #1
 80079da:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80079dc:	f7ff fdbf 	bl	800755e <inHandlerMode>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d01c      	beq.n	8007a20 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80079e6:	f107 0220 	add.w	r2, r7, #32
 80079ea:	f107 0314 	add.w	r3, r7, #20
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	68b8      	ldr	r0, [r7, #8]
 80079f4:	f000 febc 	bl	8008770 <xQueueReceiveFromISR>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d102      	bne.n	8007a04 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80079fe:	2310      	movs	r3, #16
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	e001      	b.n	8007a08 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d01d      	beq.n	8007a4a <osMessageGet+0xca>
 8007a0e:	4b15      	ldr	r3, [pc, #84]	; (8007a64 <osMessageGet+0xe4>)
 8007a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a14:	601a      	str	r2, [r3, #0]
 8007a16:	f3bf 8f4f 	dsb	sy
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	e014      	b.n	8007a4a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007a20:	f107 0314 	add.w	r3, r7, #20
 8007a24:	3304      	adds	r3, #4
 8007a26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a28:	4619      	mov	r1, r3
 8007a2a:	68b8      	ldr	r0, [r7, #8]
 8007a2c:	f000 fca6 	bl	800837c <xQueueReceive>
 8007a30:	4603      	mov	r3, r0
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d102      	bne.n	8007a3c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007a36:	2310      	movs	r3, #16
 8007a38:	617b      	str	r3, [r7, #20]
 8007a3a:	e006      	b.n	8007a4a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <osMessageGet+0xc6>
 8007a42:	2300      	movs	r3, #0
 8007a44:	e000      	b.n	8007a48 <osMessageGet+0xc8>
 8007a46:	2340      	movs	r3, #64	; 0x40
 8007a48:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	461c      	mov	r4, r3
 8007a4e:	f107 0314 	add.w	r3, r7, #20
 8007a52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007a5a:	68f8      	ldr	r0, [r7, #12]
 8007a5c:	372c      	adds	r7, #44	; 0x2c
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd90      	pop	{r4, r7, pc}
 8007a62:	bf00      	nop
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f103 0208 	add.w	r2, r3, #8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a80:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f103 0208 	add.w	r2, r3, #8
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f103 0208 	add.w	r2, r3, #8
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007ab6:	bf00      	nop
 8007ab8:	370c      	adds	r7, #12
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	bf00      	nop
 8007b00:	3714      	adds	r7, #20
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b085      	sub	sp, #20
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b20:	d103      	bne.n	8007b2a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e00c      	b.n	8007b44 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	3308      	adds	r3, #8
 8007b2e:	60fb      	str	r3, [r7, #12]
 8007b30:	e002      	b.n	8007b38 <vListInsert+0x2e>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	60fb      	str	r3, [r7, #12]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d2f6      	bcs.n	8007b32 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685a      	ldr	r2, [r3, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	601a      	str	r2, [r3, #0]
}
 8007b70:	bf00      	nop
 8007b72:	3714      	adds	r7, #20
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr

08007b7c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6892      	ldr	r2, [r2, #8]
 8007b92:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6852      	ldr	r2, [r2, #4]
 8007b9c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d103      	bne.n	8007bb0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	1e5a      	subs	r2, r3, #1
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d10c      	bne.n	8007bfe <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be8:	b672      	cpsid	i
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	b662      	cpsie	i
 8007bf8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007bfa:	bf00      	nop
 8007bfc:	e7fe      	b.n	8007bfc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007bfe:	f002 f8b5 	bl	8009d6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681a      	ldr	r2, [r3, #0]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0a:	68f9      	ldr	r1, [r7, #12]
 8007c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c0e:	fb01 f303 	mul.w	r3, r1, r3
 8007c12:	441a      	add	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681a      	ldr	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007c34:	fb01 f303 	mul.w	r3, r1, r3
 8007c38:	441a      	add	r2, r3
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	22ff      	movs	r2, #255	; 0xff
 8007c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	22ff      	movs	r2, #255	; 0xff
 8007c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d114      	bne.n	8007c7e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d01a      	beq.n	8007c92 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	3310      	adds	r3, #16
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 fb75 	bl	8009350 <xTaskRemoveFromEventList>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d012      	beq.n	8007c92 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007c6c:	4b0c      	ldr	r3, [pc, #48]	; (8007ca0 <xQueueGenericReset+0xd0>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f3bf 8f4f 	dsb	sy
 8007c78:	f3bf 8f6f 	isb	sy
 8007c7c:	e009      	b.n	8007c92 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3310      	adds	r3, #16
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7ff fef0 	bl	8007a68 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	3324      	adds	r3, #36	; 0x24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff feeb 	bl	8007a68 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007c92:	f002 f89f 	bl	8009dd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007c96:	2301      	movs	r3, #1
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	e000ed04 	.word	0xe000ed04

08007ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08e      	sub	sp, #56	; 0x38
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	607a      	str	r2, [r7, #4]
 8007cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10c      	bne.n	8007cd2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbc:	b672      	cpsid	i
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	b662      	cpsie	i
 8007ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007cce:	bf00      	nop
 8007cd0:	e7fe      	b.n	8007cd0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10c      	bne.n	8007cf2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	b672      	cpsid	i
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	b662      	cpsie	i
 8007cec:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007cee:	bf00      	nop
 8007cf0:	e7fe      	b.n	8007cf0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <xQueueGenericCreateStatic+0x5a>
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <xQueueGenericCreateStatic+0x5e>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e000      	b.n	8007d04 <xQueueGenericCreateStatic+0x60>
 8007d02:	2300      	movs	r3, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d10c      	bne.n	8007d22 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	b672      	cpsid	i
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	b662      	cpsie	i
 8007d1c:	623b      	str	r3, [r7, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	e7fe      	b.n	8007d20 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d102      	bne.n	8007d2e <xQueueGenericCreateStatic+0x8a>
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d101      	bne.n	8007d32 <xQueueGenericCreateStatic+0x8e>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e000      	b.n	8007d34 <xQueueGenericCreateStatic+0x90>
 8007d32:	2300      	movs	r3, #0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d10c      	bne.n	8007d52 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3c:	b672      	cpsid	i
 8007d3e:	f383 8811 	msr	BASEPRI, r3
 8007d42:	f3bf 8f6f 	isb	sy
 8007d46:	f3bf 8f4f 	dsb	sy
 8007d4a:	b662      	cpsie	i
 8007d4c:	61fb      	str	r3, [r7, #28]
}
 8007d4e:	bf00      	nop
 8007d50:	e7fe      	b.n	8007d50 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007d52:	2348      	movs	r3, #72	; 0x48
 8007d54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	2b48      	cmp	r3, #72	; 0x48
 8007d5a:	d00c      	beq.n	8007d76 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	b672      	cpsid	i
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	b662      	cpsie	i
 8007d70:	61bb      	str	r3, [r7, #24]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007d76:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00d      	beq.n	8007d9e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d84:	2201      	movs	r2, #1
 8007d86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007d8a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d90:	9300      	str	r3, [sp, #0]
 8007d92:	4613      	mov	r3, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	68b9      	ldr	r1, [r7, #8]
 8007d98:	68f8      	ldr	r0, [r7, #12]
 8007d9a:	f000 f847 	bl	8007e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3730      	adds	r7, #48	; 0x30
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b08a      	sub	sp, #40	; 0x28
 8007dac:	af02      	add	r7, sp, #8
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10c      	bne.n	8007dd6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8007dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc0:	b672      	cpsid	i
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	b662      	cpsie	i
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
 8007dd4:	e7fe      	b.n	8007dd4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	61fb      	str	r3, [r7, #28]
 8007de0:	e004      	b.n	8007dec <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	fb02 f303 	mul.w	r3, r2, r3
 8007dea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007dec:	69fb      	ldr	r3, [r7, #28]
 8007dee:	3348      	adds	r3, #72	; 0x48
 8007df0:	4618      	mov	r0, r3
 8007df2:	f002 f8e7 	bl	8009fc4 <pvPortMalloc>
 8007df6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d011      	beq.n	8007e22 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007dfe:	69bb      	ldr	r3, [r7, #24]
 8007e00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	3348      	adds	r3, #72	; 0x48
 8007e06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007e08:	69bb      	ldr	r3, [r7, #24]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e10:	79fa      	ldrb	r2, [r7, #7]
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	9300      	str	r3, [sp, #0]
 8007e16:	4613      	mov	r3, r2
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	68b9      	ldr	r1, [r7, #8]
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 f805 	bl	8007e2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e22:	69bb      	ldr	r3, [r7, #24]
	}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3720      	adds	r7, #32
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b084      	sub	sp, #16
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
 8007e38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	e002      	b.n	8007e4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	68ba      	ldr	r2, [r7, #8]
 8007e58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	69b8      	ldr	r0, [r7, #24]
 8007e5e:	f7ff feb7 	bl	8007bd0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e62:	bf00      	nop
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b082      	sub	sp, #8
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00e      	beq.n	8007e96 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 f837 	bl	8007f04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007e96:	bf00      	nop
 8007e98:	3708      	adds	r7, #8
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b086      	sub	sp, #24
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	617b      	str	r3, [r7, #20]
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6939      	ldr	r1, [r7, #16]
 8007eb6:	6978      	ldr	r0, [r7, #20]
 8007eb8:	f7ff ff76 	bl	8007da8 <xQueueGenericCreate>
 8007ebc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ebe:	68f8      	ldr	r0, [r7, #12]
 8007ec0:	f7ff ffd3 	bl	8007e6a <prvInitialiseMutex>

		return xNewQueue;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
	}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af02      	add	r7, sp, #8
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	6039      	str	r1, [r7, #0]
 8007ed8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007eda:	2301      	movs	r3, #1
 8007edc:	617b      	str	r3, [r7, #20]
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	6939      	ldr	r1, [r7, #16]
 8007eec:	6978      	ldr	r0, [r7, #20]
 8007eee:	f7ff fed9 	bl	8007ca4 <xQueueGenericCreateStatic>
 8007ef2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f7ff ffb8 	bl	8007e6a <prvInitialiseMutex>

		return xNewQueue;
 8007efa:	68fb      	ldr	r3, [r7, #12]
	}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b08e      	sub	sp, #56	; 0x38
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007f12:	2300      	movs	r3, #0
 8007f14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10c      	bne.n	8007f3a <xQueueGenericSend+0x36>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	b672      	cpsid	i
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	b662      	cpsie	i
 8007f34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f36:	bf00      	nop
 8007f38:	e7fe      	b.n	8007f38 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d103      	bne.n	8007f48 <xQueueGenericSend+0x44>
 8007f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <xQueueGenericSend+0x48>
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e000      	b.n	8007f4e <xQueueGenericSend+0x4a>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d10c      	bne.n	8007f6c <xQueueGenericSend+0x68>
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f56:	b672      	cpsid	i
 8007f58:	f383 8811 	msr	BASEPRI, r3
 8007f5c:	f3bf 8f6f 	isb	sy
 8007f60:	f3bf 8f4f 	dsb	sy
 8007f64:	b662      	cpsie	i
 8007f66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d103      	bne.n	8007f7a <xQueueGenericSend+0x76>
 8007f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d101      	bne.n	8007f7e <xQueueGenericSend+0x7a>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <xQueueGenericSend+0x7c>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d10c      	bne.n	8007f9e <xQueueGenericSend+0x9a>
	__asm volatile
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	b672      	cpsid	i
 8007f8a:	f383 8811 	msr	BASEPRI, r3
 8007f8e:	f3bf 8f6f 	isb	sy
 8007f92:	f3bf 8f4f 	dsb	sy
 8007f96:	b662      	cpsie	i
 8007f98:	623b      	str	r3, [r7, #32]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f9e:	f001 fb9b 	bl	80096d8 <xTaskGetSchedulerState>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d102      	bne.n	8007fae <xQueueGenericSend+0xaa>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <xQueueGenericSend+0xae>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <xQueueGenericSend+0xb0>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d10c      	bne.n	8007fd2 <xQueueGenericSend+0xce>
	__asm volatile
 8007fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbc:	b672      	cpsid	i
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	b662      	cpsie	i
 8007fcc:	61fb      	str	r3, [r7, #28]
}
 8007fce:	bf00      	nop
 8007fd0:	e7fe      	b.n	8007fd0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007fd2:	f001 fecb 	bl	8009d6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d302      	bcc.n	8007fe8 <xQueueGenericSend+0xe4>
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	2b02      	cmp	r3, #2
 8007fe6:	d129      	bne.n	800803c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	68b9      	ldr	r1, [r7, #8]
 8007fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007fee:	f000 fc5d 	bl	80088ac <prvCopyDataToQueue>
 8007ff2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d010      	beq.n	800801e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	4618      	mov	r0, r3
 8008002:	f001 f9a5 	bl	8009350 <xTaskRemoveFromEventList>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d013      	beq.n	8008034 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800800c:	4b3f      	ldr	r3, [pc, #252]	; (800810c <xQueueGenericSend+0x208>)
 800800e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	f3bf 8f4f 	dsb	sy
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	e00a      	b.n	8008034 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800801e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d007      	beq.n	8008034 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008024:	4b39      	ldr	r3, [pc, #228]	; (800810c <xQueueGenericSend+0x208>)
 8008026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008034:	f001 fece 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8008038:	2301      	movs	r3, #1
 800803a:	e063      	b.n	8008104 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d103      	bne.n	800804a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008042:	f001 fec7 	bl	8009dd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008046:	2300      	movs	r3, #0
 8008048:	e05c      	b.n	8008104 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800804a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804c:	2b00      	cmp	r3, #0
 800804e:	d106      	bne.n	800805e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008050:	f107 0314 	add.w	r3, r7, #20
 8008054:	4618      	mov	r0, r3
 8008056:	f001 f9df 	bl	8009418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800805a:	2301      	movs	r3, #1
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800805e:	f001 feb9 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008062:	f000 ff69 	bl	8008f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008066:	f001 fe81 	bl	8009d6c <vPortEnterCritical>
 800806a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800806c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008070:	b25b      	sxtb	r3, r3
 8008072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008076:	d103      	bne.n	8008080 <xQueueGenericSend+0x17c>
 8008078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008086:	b25b      	sxtb	r3, r3
 8008088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800808c:	d103      	bne.n	8008096 <xQueueGenericSend+0x192>
 800808e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008090:	2200      	movs	r2, #0
 8008092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008096:	f001 fe9d 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800809a:	1d3a      	adds	r2, r7, #4
 800809c:	f107 0314 	add.w	r3, r7, #20
 80080a0:	4611      	mov	r1, r2
 80080a2:	4618      	mov	r0, r3
 80080a4:	f001 f9ce 	bl	8009444 <xTaskCheckForTimeOut>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d124      	bne.n	80080f8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80080ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080b0:	f000 fcf4 	bl	8008a9c <prvIsQueueFull>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d018      	beq.n	80080ec <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	3310      	adds	r3, #16
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4611      	mov	r1, r2
 80080c2:	4618      	mov	r0, r3
 80080c4:	f001 f91e 	bl	8009304 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80080c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ca:	f000 fc7f 	bl	80089cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80080ce:	f000 ff41 	bl	8008f54 <xTaskResumeAll>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f47f af7c 	bne.w	8007fd2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80080da:	4b0c      	ldr	r3, [pc, #48]	; (800810c <xQueueGenericSend+0x208>)
 80080dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080e0:	601a      	str	r2, [r3, #0]
 80080e2:	f3bf 8f4f 	dsb	sy
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	e772      	b.n	8007fd2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80080ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080ee:	f000 fc6d 	bl	80089cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080f2:	f000 ff2f 	bl	8008f54 <xTaskResumeAll>
 80080f6:	e76c      	b.n	8007fd2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80080f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080fa:	f000 fc67 	bl	80089cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080fe:	f000 ff29 	bl	8008f54 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008104:	4618      	mov	r0, r3
 8008106:	3738      	adds	r7, #56	; 0x38
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	e000ed04 	.word	0xe000ed04

08008110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b08e      	sub	sp, #56	; 0x38
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
 800811c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008124:	2b00      	cmp	r3, #0
 8008126:	d10c      	bne.n	8008142 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8008128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812c:	b672      	cpsid	i
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	b662      	cpsie	i
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <xQueueGenericSendFromISR+0x40>
 8008148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <xQueueGenericSendFromISR+0x44>
 8008150:	2301      	movs	r3, #1
 8008152:	e000      	b.n	8008156 <xQueueGenericSendFromISR+0x46>
 8008154:	2300      	movs	r3, #0
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10c      	bne.n	8008174 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	b672      	cpsid	i
 8008160:	f383 8811 	msr	BASEPRI, r3
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	f3bf 8f4f 	dsb	sy
 800816c:	b662      	cpsie	i
 800816e:	623b      	str	r3, [r7, #32]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d103      	bne.n	8008182 <xQueueGenericSendFromISR+0x72>
 800817a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800817e:	2b01      	cmp	r3, #1
 8008180:	d101      	bne.n	8008186 <xQueueGenericSendFromISR+0x76>
 8008182:	2301      	movs	r3, #1
 8008184:	e000      	b.n	8008188 <xQueueGenericSendFromISR+0x78>
 8008186:	2300      	movs	r3, #0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d10c      	bne.n	80081a6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800818c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008190:	b672      	cpsid	i
 8008192:	f383 8811 	msr	BASEPRI, r3
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	f3bf 8f4f 	dsb	sy
 800819e:	b662      	cpsie	i
 80081a0:	61fb      	str	r3, [r7, #28]
}
 80081a2:	bf00      	nop
 80081a4:	e7fe      	b.n	80081a4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80081a6:	f001 fec9 	bl	8009f3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80081aa:	f3ef 8211 	mrs	r2, BASEPRI
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	b672      	cpsid	i
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	b662      	cpsie	i
 80081c2:	61ba      	str	r2, [r7, #24]
 80081c4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80081c6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80081c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d302      	bcc.n	80081dc <xQueueGenericSendFromISR+0xcc>
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d12c      	bne.n	8008236 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80081dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	68b9      	ldr	r1, [r7, #8]
 80081ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80081ec:	f000 fb5e 	bl	80088ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80081f0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d112      	bne.n	8008220 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	3324      	adds	r3, #36	; 0x24
 8008206:	4618      	mov	r0, r3
 8008208:	f001 f8a2 	bl	8009350 <xTaskRemoveFromEventList>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00e      	beq.n	8008230 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d00b      	beq.n	8008230 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2201      	movs	r2, #1
 800821c:	601a      	str	r2, [r3, #0]
 800821e:	e007      	b.n	8008230 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008224:	3301      	adds	r3, #1
 8008226:	b2db      	uxtb	r3, r3
 8008228:	b25a      	sxtb	r2, r3
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008230:	2301      	movs	r3, #1
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008234:	e001      	b.n	800823a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
 800823a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008244:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008248:	4618      	mov	r0, r3
 800824a:	3738      	adds	r7, #56	; 0x38
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b08e      	sub	sp, #56	; 0x38
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10c      	bne.n	800827e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	b672      	cpsid	i
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	b662      	cpsie	i
 8008278:	623b      	str	r3, [r7, #32]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800827e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	2b00      	cmp	r3, #0
 8008284:	d00c      	beq.n	80082a0 <xQueueGiveFromISR+0x50>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	b672      	cpsid	i
 800828c:	f383 8811 	msr	BASEPRI, r3
 8008290:	f3bf 8f6f 	isb	sy
 8008294:	f3bf 8f4f 	dsb	sy
 8008298:	b662      	cpsie	i
 800829a:	61fb      	str	r3, [r7, #28]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <xQueueGiveFromISR+0x60>
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <xQueueGiveFromISR+0x64>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <xQueueGiveFromISR+0x66>
 80082b4:	2300      	movs	r3, #0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10c      	bne.n	80082d4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082be:	b672      	cpsid	i
 80082c0:	f383 8811 	msr	BASEPRI, r3
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	f3bf 8f4f 	dsb	sy
 80082cc:	b662      	cpsie	i
 80082ce:	61bb      	str	r3, [r7, #24]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80082d4:	f001 fe32 	bl	8009f3c <vPortValidateInterruptPriority>
	__asm volatile
 80082d8:	f3ef 8211 	mrs	r2, BASEPRI
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	b672      	cpsid	i
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	b662      	cpsie	i
 80082f0:	617a      	str	r2, [r7, #20]
 80082f2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80082f4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80082f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80082fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008302:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008304:	429a      	cmp	r2, r3
 8008306:	d22b      	bcs.n	8008360 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800830a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800830e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008318:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800831a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d112      	bne.n	800834a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008328:	2b00      	cmp	r3, #0
 800832a:	d016      	beq.n	800835a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800832c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800832e:	3324      	adds	r3, #36	; 0x24
 8008330:	4618      	mov	r0, r3
 8008332:	f001 f80d 	bl	8009350 <xTaskRemoveFromEventList>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00e      	beq.n	800835a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	2201      	movs	r2, #1
 8008346:	601a      	str	r2, [r3, #0]
 8008348:	e007      	b.n	800835a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800834a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800834e:	3301      	adds	r3, #1
 8008350:	b2db      	uxtb	r3, r3
 8008352:	b25a      	sxtb	r2, r3
 8008354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800835a:	2301      	movs	r3, #1
 800835c:	637b      	str	r3, [r7, #52]	; 0x34
 800835e:	e001      	b.n	8008364 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008360:	2300      	movs	r3, #0
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
 8008364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008366:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f383 8811 	msr	BASEPRI, r3
}
 800836e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008372:	4618      	mov	r0, r3
 8008374:	3738      	adds	r7, #56	; 0x38
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
	...

0800837c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08c      	sub	sp, #48	; 0x30
 8008380:	af00      	add	r7, sp, #0
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008388:	2300      	movs	r3, #0
 800838a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	2b00      	cmp	r3, #0
 8008394:	d10c      	bne.n	80083b0 <xQueueReceive+0x34>
	__asm volatile
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	b672      	cpsid	i
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	b662      	cpsie	i
 80083aa:	623b      	str	r3, [r7, #32]
}
 80083ac:	bf00      	nop
 80083ae:	e7fe      	b.n	80083ae <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d103      	bne.n	80083be <xQueueReceive+0x42>
 80083b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d101      	bne.n	80083c2 <xQueueReceive+0x46>
 80083be:	2301      	movs	r3, #1
 80083c0:	e000      	b.n	80083c4 <xQueueReceive+0x48>
 80083c2:	2300      	movs	r3, #0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d10c      	bne.n	80083e2 <xQueueReceive+0x66>
	__asm volatile
 80083c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083cc:	b672      	cpsid	i
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	b662      	cpsie	i
 80083dc:	61fb      	str	r3, [r7, #28]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80083e2:	f001 f979 	bl	80096d8 <xTaskGetSchedulerState>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d102      	bne.n	80083f2 <xQueueReceive+0x76>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d101      	bne.n	80083f6 <xQueueReceive+0x7a>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <xQueueReceive+0x7c>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10c      	bne.n	8008416 <xQueueReceive+0x9a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	b672      	cpsid	i
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	b662      	cpsie	i
 8008410:	61bb      	str	r3, [r7, #24]
}
 8008412:	bf00      	nop
 8008414:	e7fe      	b.n	8008414 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008416:	f001 fca9 	bl	8009d6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	2b00      	cmp	r3, #0
 8008424:	d01f      	beq.n	8008466 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008426:	68b9      	ldr	r1, [r7, #8]
 8008428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800842a:	f000 faa9 	bl	8008980 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	1e5a      	subs	r2, r3, #1
 8008432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008434:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00f      	beq.n	800845e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008440:	3310      	adds	r3, #16
 8008442:	4618      	mov	r0, r3
 8008444:	f000 ff84 	bl	8009350 <xTaskRemoveFromEventList>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d007      	beq.n	800845e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800844e:	4b3d      	ldr	r3, [pc, #244]	; (8008544 <xQueueReceive+0x1c8>)
 8008450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	f3bf 8f4f 	dsb	sy
 800845a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800845e:	f001 fcb9 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 8008462:	2301      	movs	r3, #1
 8008464:	e069      	b.n	800853a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d103      	bne.n	8008474 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800846c:	f001 fcb2 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008470:	2300      	movs	r3, #0
 8008472:	e062      	b.n	800853a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d106      	bne.n	8008488 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800847a:	f107 0310 	add.w	r3, r7, #16
 800847e:	4618      	mov	r0, r3
 8008480:	f000 ffca 	bl	8009418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008484:	2301      	movs	r3, #1
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008488:	f001 fca4 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800848c:	f000 fd54 	bl	8008f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008490:	f001 fc6c 	bl	8009d6c <vPortEnterCritical>
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800849a:	b25b      	sxtb	r3, r3
 800849c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084a0:	d103      	bne.n	80084aa <xQueueReceive+0x12e>
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084b0:	b25b      	sxtb	r3, r3
 80084b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b6:	d103      	bne.n	80084c0 <xQueueReceive+0x144>
 80084b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084c0:	f001 fc88 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084c4:	1d3a      	adds	r2, r7, #4
 80084c6:	f107 0310 	add.w	r3, r7, #16
 80084ca:	4611      	mov	r1, r2
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 ffb9 	bl	8009444 <xTaskCheckForTimeOut>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d123      	bne.n	8008520 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084da:	f000 fac9 	bl	8008a70 <prvIsQueueEmpty>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d017      	beq.n	8008514 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	3324      	adds	r3, #36	; 0x24
 80084e8:	687a      	ldr	r2, [r7, #4]
 80084ea:	4611      	mov	r1, r2
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 ff09 	bl	8009304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80084f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80084f4:	f000 fa6a 	bl	80089cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80084f8:	f000 fd2c 	bl	8008f54 <xTaskResumeAll>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d189      	bne.n	8008416 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8008502:	4b10      	ldr	r3, [pc, #64]	; (8008544 <xQueueReceive+0x1c8>)
 8008504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008508:	601a      	str	r2, [r3, #0]
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	e780      	b.n	8008416 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008516:	f000 fa59 	bl	80089cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800851a:	f000 fd1b 	bl	8008f54 <xTaskResumeAll>
 800851e:	e77a      	b.n	8008416 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008522:	f000 fa53 	bl	80089cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008526:	f000 fd15 	bl	8008f54 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800852a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800852c:	f000 faa0 	bl	8008a70 <prvIsQueueEmpty>
 8008530:	4603      	mov	r3, r0
 8008532:	2b00      	cmp	r3, #0
 8008534:	f43f af6f 	beq.w	8008416 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008538:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800853a:	4618      	mov	r0, r3
 800853c:	3730      	adds	r7, #48	; 0x30
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	e000ed04 	.word	0xe000ed04

08008548 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b08e      	sub	sp, #56	; 0x38
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008552:	2300      	movs	r3, #0
 8008554:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800855a:	2300      	movs	r3, #0
 800855c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800855e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10c      	bne.n	800857e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	b672      	cpsid	i
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	b662      	cpsie	i
 8008578:	623b      	str	r3, [r7, #32]
}
 800857a:	bf00      	nop
 800857c:	e7fe      	b.n	800857c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800857e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00c      	beq.n	80085a0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8008586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858a:	b672      	cpsid	i
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	b662      	cpsie	i
 800859a:	61fb      	str	r3, [r7, #28]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80085a0:	f001 f89a 	bl	80096d8 <xTaskGetSchedulerState>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d102      	bne.n	80085b0 <xQueueSemaphoreTake+0x68>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d101      	bne.n	80085b4 <xQueueSemaphoreTake+0x6c>
 80085b0:	2301      	movs	r3, #1
 80085b2:	e000      	b.n	80085b6 <xQueueSemaphoreTake+0x6e>
 80085b4:	2300      	movs	r3, #0
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10c      	bne.n	80085d4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	b672      	cpsid	i
 80085c0:	f383 8811 	msr	BASEPRI, r3
 80085c4:	f3bf 8f6f 	isb	sy
 80085c8:	f3bf 8f4f 	dsb	sy
 80085cc:	b662      	cpsie	i
 80085ce:	61bb      	str	r3, [r7, #24]
}
 80085d0:	bf00      	nop
 80085d2:	e7fe      	b.n	80085d2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80085d4:	f001 fbca 	bl	8009d6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80085de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d024      	beq.n	800862e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	1e5a      	subs	r2, r3, #1
 80085e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80085f4:	f001 fa36 	bl	8009a64 <pvTaskIncrementMutexHeldCount>
 80085f8:	4602      	mov	r2, r0
 80085fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00f      	beq.n	8008626 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	3310      	adds	r3, #16
 800860a:	4618      	mov	r0, r3
 800860c:	f000 fea0 	bl	8009350 <xTaskRemoveFromEventList>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d007      	beq.n	8008626 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008616:	4b55      	ldr	r3, [pc, #340]	; (800876c <xQueueSemaphoreTake+0x224>)
 8008618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861c:	601a      	str	r2, [r3, #0]
 800861e:	f3bf 8f4f 	dsb	sy
 8008622:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008626:	f001 fbd5 	bl	8009dd4 <vPortExitCritical>
				return pdPASS;
 800862a:	2301      	movs	r3, #1
 800862c:	e099      	b.n	8008762 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d113      	bne.n	800865c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00c      	beq.n	8008654 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863e:	b672      	cpsid	i
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	b662      	cpsie	i
 800864e:	617b      	str	r3, [r7, #20]
}
 8008650:	bf00      	nop
 8008652:	e7fe      	b.n	8008652 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008654:	f001 fbbe 	bl	8009dd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008658:	2300      	movs	r3, #0
 800865a:	e082      	b.n	8008762 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800865c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865e:	2b00      	cmp	r3, #0
 8008660:	d106      	bne.n	8008670 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fed6 	bl	8009418 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008670:	f001 fbb0 	bl	8009dd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008674:	f000 fc60 	bl	8008f38 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008678:	f001 fb78 	bl	8009d6c <vPortEnterCritical>
 800867c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008682:	b25b      	sxtb	r3, r3
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d103      	bne.n	8008692 <xQueueSemaphoreTake+0x14a>
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008694:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008698:	b25b      	sxtb	r3, r3
 800869a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869e:	d103      	bne.n	80086a8 <xQueueSemaphoreTake+0x160>
 80086a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80086a8:	f001 fb94 	bl	8009dd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80086ac:	463a      	mov	r2, r7
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	4611      	mov	r1, r2
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fec5 	bl	8009444 <xTaskCheckForTimeOut>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d132      	bne.n	8008726 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086c2:	f000 f9d5 	bl	8008a70 <prvIsQueueEmpty>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d026      	beq.n	800871a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80086cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80086d4:	f001 fb4a 	bl	8009d6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	4618      	mov	r0, r3
 80086de:	f001 f819 	bl	8009714 <xTaskPriorityInherit>
 80086e2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80086e4:	f001 fb76 	bl	8009dd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	3324      	adds	r3, #36	; 0x24
 80086ec:	683a      	ldr	r2, [r7, #0]
 80086ee:	4611      	mov	r1, r2
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 fe07 	bl	8009304 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80086f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086f8:	f000 f968 	bl	80089cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80086fc:	f000 fc2a 	bl	8008f54 <xTaskResumeAll>
 8008700:	4603      	mov	r3, r0
 8008702:	2b00      	cmp	r3, #0
 8008704:	f47f af66 	bne.w	80085d4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8008708:	4b18      	ldr	r3, [pc, #96]	; (800876c <xQueueSemaphoreTake+0x224>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
 8008718:	e75c      	b.n	80085d4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800871a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800871c:	f000 f956 	bl	80089cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008720:	f000 fc18 	bl	8008f54 <xTaskResumeAll>
 8008724:	e756      	b.n	80085d4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008726:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008728:	f000 f950 	bl	80089cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800872c:	f000 fc12 	bl	8008f54 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008730:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008732:	f000 f99d 	bl	8008a70 <prvIsQueueEmpty>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f43f af4b 	beq.w	80085d4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	2b00      	cmp	r3, #0
 8008742:	d00d      	beq.n	8008760 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8008744:	f001 fb12 	bl	8009d6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800874a:	f000 f897 	bl	800887c <prvGetDisinheritPriorityAfterTimeout>
 800874e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f8e6 	bl	8009928 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800875c:	f001 fb3a 	bl	8009dd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008760:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008762:	4618      	mov	r0, r3
 8008764:	3738      	adds	r7, #56	; 0x38
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	e000ed04 	.word	0xe000ed04

08008770 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08e      	sub	sp, #56	; 0x38
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10c      	bne.n	80087a0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	b672      	cpsid	i
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	b662      	cpsie	i
 800879a:	623b      	str	r3, [r7, #32]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d103      	bne.n	80087ae <xQueueReceiveFromISR+0x3e>
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <xQueueReceiveFromISR+0x42>
 80087ae:	2301      	movs	r3, #1
 80087b0:	e000      	b.n	80087b4 <xQueueReceiveFromISR+0x44>
 80087b2:	2300      	movs	r3, #0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087bc:	b672      	cpsid	i
 80087be:	f383 8811 	msr	BASEPRI, r3
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	f3bf 8f4f 	dsb	sy
 80087ca:	b662      	cpsie	i
 80087cc:	61fb      	str	r3, [r7, #28]
}
 80087ce:	bf00      	nop
 80087d0:	e7fe      	b.n	80087d0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087d2:	f001 fbb3 	bl	8009f3c <vPortValidateInterruptPriority>
	__asm volatile
 80087d6:	f3ef 8211 	mrs	r2, BASEPRI
 80087da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087de:	b672      	cpsid	i
 80087e0:	f383 8811 	msr	BASEPRI, r3
 80087e4:	f3bf 8f6f 	isb	sy
 80087e8:	f3bf 8f4f 	dsb	sy
 80087ec:	b662      	cpsie	i
 80087ee:	61ba      	str	r2, [r7, #24]
 80087f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80087f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d02f      	beq.n	8008862 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008804:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800880c:	68b9      	ldr	r1, [r7, #8]
 800880e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008810:	f000 f8b6 	bl	8008980 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	1e5a      	subs	r2, r3, #1
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800881c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008824:	d112      	bne.n	800884c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d016      	beq.n	800885c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800882e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008830:	3310      	adds	r3, #16
 8008832:	4618      	mov	r0, r3
 8008834:	f000 fd8c 	bl	8009350 <xTaskRemoveFromEventList>
 8008838:	4603      	mov	r3, r0
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00e      	beq.n	800885c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00b      	beq.n	800885c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	601a      	str	r2, [r3, #0]
 800884a:	e007      	b.n	800885c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800884c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008850:	3301      	adds	r3, #1
 8008852:	b2db      	uxtb	r3, r3
 8008854:	b25a      	sxtb	r2, r3
 8008856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800885c:	2301      	movs	r3, #1
 800885e:	637b      	str	r3, [r7, #52]	; 0x34
 8008860:	e001      	b.n	8008866 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8008862:	2300      	movs	r3, #0
 8008864:	637b      	str	r3, [r7, #52]	; 0x34
 8008866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008868:	613b      	str	r3, [r7, #16]
	__asm volatile
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	f383 8811 	msr	BASEPRI, r3
}
 8008870:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008874:	4618      	mov	r0, r3
 8008876:	3738      	adds	r7, #56	; 0x38
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	2b00      	cmp	r3, #0
 800888a:	d006      	beq.n	800889a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f1c3 0307 	rsb	r3, r3, #7
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	e001      	b.n	800889e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800889e:	68fb      	ldr	r3, [r7, #12]
	}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10d      	bne.n	80088e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d14d      	bne.n	800896e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	4618      	mov	r0, r3
 80088d8:	f000 ff9c 	bl	8009814 <xTaskPriorityDisinherit>
 80088dc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	e043      	b.n	800896e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d119      	bne.n	8008920 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6858      	ldr	r0, [r3, #4]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f4:	461a      	mov	r2, r3
 80088f6:	68b9      	ldr	r1, [r7, #8]
 80088f8:	f010 fc5e 	bl	80191b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	685a      	ldr	r2, [r3, #4]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	429a      	cmp	r2, r3
 8008914:	d32b      	bcc.n	800896e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	605a      	str	r2, [r3, #4]
 800891e:	e026      	b.n	800896e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68d8      	ldr	r0, [r3, #12]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	461a      	mov	r2, r3
 800892a:	68b9      	ldr	r1, [r7, #8]
 800892c:	f010 fc44 	bl	80191b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	425b      	negs	r3, r3
 800893a:	441a      	add	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	68da      	ldr	r2, [r3, #12]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d207      	bcs.n	800895c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	689a      	ldr	r2, [r3, #8]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008954:	425b      	negs	r3, r3
 8008956:	441a      	add	r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2b02      	cmp	r3, #2
 8008960:	d105      	bne.n	800896e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	3b01      	subs	r3, #1
 800896c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008976:	697b      	ldr	r3, [r7, #20]
}
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	2b00      	cmp	r3, #0
 8008990:	d018      	beq.n	80089c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	68da      	ldr	r2, [r3, #12]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	441a      	add	r2, r3
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68da      	ldr	r2, [r3, #12]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	429a      	cmp	r2, r3
 80089aa:	d303      	bcc.n	80089b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	68d9      	ldr	r1, [r3, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089bc:	461a      	mov	r2, r3
 80089be:	6838      	ldr	r0, [r7, #0]
 80089c0:	f010 fbfa 	bl	80191b8 <memcpy>
	}
}
 80089c4:	bf00      	nop
 80089c6:	3708      	adds	r7, #8
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80089d4:	f001 f9ca 	bl	8009d6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089e0:	e011      	b.n	8008a06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d012      	beq.n	8008a10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	3324      	adds	r3, #36	; 0x24
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fcae 	bl	8009350 <xTaskRemoveFromEventList>
 80089f4:	4603      	mov	r3, r0
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089fa:	f000 fd89 	bl	8009510 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089fe:	7bfb      	ldrb	r3, [r7, #15]
 8008a00:	3b01      	subs	r3, #1
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	dce9      	bgt.n	80089e2 <prvUnlockQueue+0x16>
 8008a0e:	e000      	b.n	8008a12 <prvUnlockQueue+0x46>
					break;
 8008a10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	22ff      	movs	r2, #255	; 0xff
 8008a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008a1a:	f001 f9db 	bl	8009dd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a1e:	f001 f9a5 	bl	8009d6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a2a:	e011      	b.n	8008a50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d012      	beq.n	8008a5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3310      	adds	r3, #16
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fc89 	bl	8009350 <xTaskRemoveFromEventList>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d001      	beq.n	8008a48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a44:	f000 fd64 	bl	8009510 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a48:	7bbb      	ldrb	r3, [r7, #14]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dce9      	bgt.n	8008a2c <prvUnlockQueue+0x60>
 8008a58:	e000      	b.n	8008a5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	22ff      	movs	r2, #255	; 0xff
 8008a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008a64:	f001 f9b6 	bl	8009dd4 <vPortExitCritical>
}
 8008a68:	bf00      	nop
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a78:	f001 f978 	bl	8009d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d102      	bne.n	8008a8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	e001      	b.n	8008a8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a8e:	f001 f9a1 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008a92:	68fb      	ldr	r3, [r7, #12]
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aa4:	f001 f962 	bl	8009d6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	d102      	bne.n	8008aba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e001      	b.n	8008abe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008abe:	f001 f989 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b08e      	sub	sp, #56	; 0x38
 8008ad0:	af04      	add	r7, sp, #16
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
 8008ad8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d10c      	bne.n	8008afa <xTaskCreateStatic+0x2e>
	__asm volatile
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	b672      	cpsid	i
 8008ae6:	f383 8811 	msr	BASEPRI, r3
 8008aea:	f3bf 8f6f 	isb	sy
 8008aee:	f3bf 8f4f 	dsb	sy
 8008af2:	b662      	cpsie	i
 8008af4:	623b      	str	r3, [r7, #32]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10c      	bne.n	8008b1a <xTaskCreateStatic+0x4e>
	__asm volatile
 8008b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b04:	b672      	cpsid	i
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	b662      	cpsie	i
 8008b14:	61fb      	str	r3, [r7, #28]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b1a:	2354      	movs	r3, #84	; 0x54
 8008b1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	2b54      	cmp	r3, #84	; 0x54
 8008b22:	d00c      	beq.n	8008b3e <xTaskCreateStatic+0x72>
	__asm volatile
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	b672      	cpsid	i
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	b662      	cpsie	i
 8008b38:	61bb      	str	r3, [r7, #24]
}
 8008b3a:	bf00      	nop
 8008b3c:	e7fe      	b.n	8008b3c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008b3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d01e      	beq.n	8008b84 <xTaskCreateStatic+0xb8>
 8008b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01b      	beq.n	8008b84 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b54:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b58:	2202      	movs	r2, #2
 8008b5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b5e:	2300      	movs	r3, #0
 8008b60:	9303      	str	r3, [sp, #12]
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	9302      	str	r3, [sp, #8]
 8008b66:	f107 0314 	add.w	r3, r7, #20
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	68b9      	ldr	r1, [r7, #8]
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f000 f850 	bl	8008c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b7e:	f000 f8d7 	bl	8008d30 <prvAddNewTaskToReadyList>
 8008b82:	e001      	b.n	8008b88 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008b84:	2300      	movs	r3, #0
 8008b86:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b88:	697b      	ldr	r3, [r7, #20]
	}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3728      	adds	r7, #40	; 0x28
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b08c      	sub	sp, #48	; 0x30
 8008b96:	af04      	add	r7, sp, #16
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	60b9      	str	r1, [r7, #8]
 8008b9c:	603b      	str	r3, [r7, #0]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	f001 fa0c 	bl	8009fc4 <pvPortMalloc>
 8008bac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00e      	beq.n	8008bd2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008bb4:	2054      	movs	r0, #84	; 0x54
 8008bb6:	f001 fa05 	bl	8009fc4 <pvPortMalloc>
 8008bba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008bc2:	69fb      	ldr	r3, [r7, #28]
 8008bc4:	697a      	ldr	r2, [r7, #20]
 8008bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8008bc8:	e005      	b.n	8008bd6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008bca:	6978      	ldr	r0, [r7, #20]
 8008bcc:	f001 fac4 	bl	800a158 <vPortFree>
 8008bd0:	e001      	b.n	8008bd6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d017      	beq.n	8008c0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008be4:	88fa      	ldrh	r2, [r7, #6]
 8008be6:	2300      	movs	r3, #0
 8008be8:	9303      	str	r3, [sp, #12]
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	9302      	str	r3, [sp, #8]
 8008bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf0:	9301      	str	r3, [sp, #4]
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	68b9      	ldr	r1, [r7, #8]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f80e 	bl	8008c1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c00:	69f8      	ldr	r0, [r7, #28]
 8008c02:	f000 f895 	bl	8008d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c06:	2301      	movs	r3, #1
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	e002      	b.n	8008c12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8008c10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c12:	69bb      	ldr	r3, [r7, #24]
	}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3720      	adds	r7, #32
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	607a      	str	r2, [r7, #4]
 8008c28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c2e:	6879      	ldr	r1, [r7, #4]
 8008c30:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008c34:	440b      	add	r3, r1
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	f023 0307 	bic.w	r3, r3, #7
 8008c42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	f003 0307 	and.w	r3, r3, #7
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00c      	beq.n	8008c68 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8008c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c52:	b672      	cpsid	i
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	b662      	cpsie	i
 8008c62:	617b      	str	r3, [r7, #20]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d01f      	beq.n	8008cae <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c6e:	2300      	movs	r3, #0
 8008c70:	61fb      	str	r3, [r7, #28]
 8008c72:	e012      	b.n	8008c9a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c74:	68ba      	ldr	r2, [r7, #8]
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4413      	add	r3, r2
 8008c7a:	7819      	ldrb	r1, [r3, #0]
 8008c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	3334      	adds	r3, #52	; 0x34
 8008c84:	460a      	mov	r2, r1
 8008c86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008c88:	68ba      	ldr	r2, [r7, #8]
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d006      	beq.n	8008ca2 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c94:	69fb      	ldr	r3, [r7, #28]
 8008c96:	3301      	adds	r3, #1
 8008c98:	61fb      	str	r3, [r7, #28]
 8008c9a:	69fb      	ldr	r3, [r7, #28]
 8008c9c:	2b0f      	cmp	r3, #15
 8008c9e:	d9e9      	bls.n	8008c74 <prvInitialiseNewTask+0x58>
 8008ca0:	e000      	b.n	8008ca4 <prvInitialiseNewTask+0x88>
			{
				break;
 8008ca2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008cac:	e003      	b.n	8008cb6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cb8:	2b06      	cmp	r3, #6
 8008cba:	d901      	bls.n	8008cc0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008cbc:	2306      	movs	r3, #6
 8008cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cce:	2200      	movs	r2, #0
 8008cd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7fe fee6 	bl	8007aa8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cde:	3318      	adds	r3, #24
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7fe fee1 	bl	8007aa8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	f1c3 0207 	rsb	r2, r3, #7
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfe:	2200      	movs	r2, #0
 8008d00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	68f9      	ldr	r1, [r7, #12]
 8008d0e:	69b8      	ldr	r0, [r7, #24]
 8008d10:	f000 ff22 	bl	8009b58 <pxPortInitialiseStack>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d002      	beq.n	8008d26 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d26:	bf00      	nop
 8008d28:	3720      	adds	r7, #32
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
	...

08008d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b082      	sub	sp, #8
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008d38:	f001 f818 	bl	8009d6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008d3c:	4b2a      	ldr	r3, [pc, #168]	; (8008de8 <prvAddNewTaskToReadyList+0xb8>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3301      	adds	r3, #1
 8008d42:	4a29      	ldr	r2, [pc, #164]	; (8008de8 <prvAddNewTaskToReadyList+0xb8>)
 8008d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008d46:	4b29      	ldr	r3, [pc, #164]	; (8008dec <prvAddNewTaskToReadyList+0xbc>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d109      	bne.n	8008d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008d4e:	4a27      	ldr	r2, [pc, #156]	; (8008dec <prvAddNewTaskToReadyList+0xbc>)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008d54:	4b24      	ldr	r3, [pc, #144]	; (8008de8 <prvAddNewTaskToReadyList+0xb8>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d110      	bne.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008d5c:	f000 fbfc 	bl	8009558 <prvInitialiseTaskLists>
 8008d60:	e00d      	b.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008d62:	4b23      	ldr	r3, [pc, #140]	; (8008df0 <prvAddNewTaskToReadyList+0xc0>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d6a:	4b20      	ldr	r3, [pc, #128]	; (8008dec <prvAddNewTaskToReadyList+0xbc>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d802      	bhi.n	8008d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d78:	4a1c      	ldr	r2, [pc, #112]	; (8008dec <prvAddNewTaskToReadyList+0xbc>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d7e:	4b1d      	ldr	r3, [pc, #116]	; (8008df4 <prvAddNewTaskToReadyList+0xc4>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	3301      	adds	r3, #1
 8008d84:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <prvAddNewTaskToReadyList+0xc4>)
 8008d86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	409a      	lsls	r2, r3
 8008d90:	4b19      	ldr	r3, [pc, #100]	; (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	4a18      	ldr	r2, [pc, #96]	; (8008df8 <prvAddNewTaskToReadyList+0xc8>)
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	4a15      	ldr	r2, [pc, #84]	; (8008dfc <prvAddNewTaskToReadyList+0xcc>)
 8008da8:	441a      	add	r2, r3
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	3304      	adds	r3, #4
 8008dae:	4619      	mov	r1, r3
 8008db0:	4610      	mov	r0, r2
 8008db2:	f7fe fe86 	bl	8007ac2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008db6:	f001 f80d 	bl	8009dd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008dba:	4b0d      	ldr	r3, [pc, #52]	; (8008df0 <prvAddNewTaskToReadyList+0xc0>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00e      	beq.n	8008de0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <prvAddNewTaskToReadyList+0xbc>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d207      	bcs.n	8008de0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <prvAddNewTaskToReadyList+0xd0>)
 8008dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dd6:	601a      	str	r2, [r3, #0]
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008de0:	bf00      	nop
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	200056bc 	.word	0x200056bc
 8008dec:	200055bc 	.word	0x200055bc
 8008df0:	200056c8 	.word	0x200056c8
 8008df4:	200056d8 	.word	0x200056d8
 8008df8:	200056c4 	.word	0x200056c4
 8008dfc:	200055c0 	.word	0x200055c0
 8008e00:	e000ed04 	.word	0xe000ed04

08008e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d019      	beq.n	8008e4a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e16:	4b14      	ldr	r3, [pc, #80]	; (8008e68 <vTaskDelay+0x64>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d00c      	beq.n	8008e38 <vTaskDelay+0x34>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	b672      	cpsid	i
 8008e24:	f383 8811 	msr	BASEPRI, r3
 8008e28:	f3bf 8f6f 	isb	sy
 8008e2c:	f3bf 8f4f 	dsb	sy
 8008e30:	b662      	cpsie	i
 8008e32:	60bb      	str	r3, [r7, #8]
}
 8008e34:	bf00      	nop
 8008e36:	e7fe      	b.n	8008e36 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8008e38:	f000 f87e 	bl	8008f38 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fe24 	bl	8009a8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e44:	f000 f886 	bl	8008f54 <xTaskResumeAll>
 8008e48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d107      	bne.n	8008e60 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <vTaskDelay+0x68>)
 8008e52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	200056e4 	.word	0x200056e4
 8008e6c:	e000ed04 	.word	0xe000ed04

08008e70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b08a      	sub	sp, #40	; 0x28
 8008e74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008e7e:	463a      	mov	r2, r7
 8008e80:	1d39      	adds	r1, r7, #4
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7f7 fba8 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	68ba      	ldr	r2, [r7, #8]
 8008e92:	9202      	str	r2, [sp, #8]
 8008e94:	9301      	str	r3, [sp, #4]
 8008e96:	2300      	movs	r3, #0
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	460a      	mov	r2, r1
 8008e9e:	4920      	ldr	r1, [pc, #128]	; (8008f20 <vTaskStartScheduler+0xb0>)
 8008ea0:	4820      	ldr	r0, [pc, #128]	; (8008f24 <vTaskStartScheduler+0xb4>)
 8008ea2:	f7ff fe13 	bl	8008acc <xTaskCreateStatic>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4a1f      	ldr	r2, [pc, #124]	; (8008f28 <vTaskStartScheduler+0xb8>)
 8008eaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008eac:	4b1e      	ldr	r3, [pc, #120]	; (8008f28 <vTaskStartScheduler+0xb8>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d002      	beq.n	8008eba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	617b      	str	r3, [r7, #20]
 8008eb8:	e001      	b.n	8008ebe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d118      	bne.n	8008ef6 <vTaskStartScheduler+0x86>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	b672      	cpsid	i
 8008eca:	f383 8811 	msr	BASEPRI, r3
 8008ece:	f3bf 8f6f 	isb	sy
 8008ed2:	f3bf 8f4f 	dsb	sy
 8008ed6:	b662      	cpsie	i
 8008ed8:	613b      	str	r3, [r7, #16]
}
 8008eda:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008edc:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <vTaskStartScheduler+0xbc>)
 8008ede:	f04f 32ff 	mov.w	r2, #4294967295
 8008ee2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ee4:	4b12      	ldr	r3, [pc, #72]	; (8008f30 <vTaskStartScheduler+0xc0>)
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008eea:	4b12      	ldr	r3, [pc, #72]	; (8008f34 <vTaskStartScheduler+0xc4>)
 8008eec:	2200      	movs	r2, #0
 8008eee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ef0:	f000 febe 	bl	8009c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ef4:	e010      	b.n	8008f18 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008efc:	d10c      	bne.n	8008f18 <vTaskStartScheduler+0xa8>
	__asm volatile
 8008efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f02:	b672      	cpsid	i
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	b662      	cpsie	i
 8008f12:	60fb      	str	r3, [r7, #12]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <vTaskStartScheduler+0xa6>
}
 8008f18:	bf00      	nop
 8008f1a:	3718      	adds	r7, #24
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}
 8008f20:	08019f98 	.word	0x08019f98
 8008f24:	08009529 	.word	0x08009529
 8008f28:	200056e0 	.word	0x200056e0
 8008f2c:	200056dc 	.word	0x200056dc
 8008f30:	200056c8 	.word	0x200056c8
 8008f34:	200056c0 	.word	0x200056c0

08008f38 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f38:	b480      	push	{r7}
 8008f3a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008f3c:	4b04      	ldr	r3, [pc, #16]	; (8008f50 <vTaskSuspendAll+0x18>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	3301      	adds	r3, #1
 8008f42:	4a03      	ldr	r2, [pc, #12]	; (8008f50 <vTaskSuspendAll+0x18>)
 8008f44:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008f46:	bf00      	nop
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	200056e4 	.word	0x200056e4

08008f54 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f62:	4b42      	ldr	r3, [pc, #264]	; (800906c <xTaskResumeAll+0x118>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d10c      	bne.n	8008f84 <xTaskResumeAll+0x30>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	b672      	cpsid	i
 8008f70:	f383 8811 	msr	BASEPRI, r3
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	f3bf 8f4f 	dsb	sy
 8008f7c:	b662      	cpsie	i
 8008f7e:	603b      	str	r3, [r7, #0]
}
 8008f80:	bf00      	nop
 8008f82:	e7fe      	b.n	8008f82 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f84:	f000 fef2 	bl	8009d6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f88:	4b38      	ldr	r3, [pc, #224]	; (800906c <xTaskResumeAll+0x118>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	4a37      	ldr	r2, [pc, #220]	; (800906c <xTaskResumeAll+0x118>)
 8008f90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f92:	4b36      	ldr	r3, [pc, #216]	; (800906c <xTaskResumeAll+0x118>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d161      	bne.n	800905e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f9a:	4b35      	ldr	r3, [pc, #212]	; (8009070 <xTaskResumeAll+0x11c>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d05d      	beq.n	800905e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fa2:	e02e      	b.n	8009002 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fa4:	4b33      	ldr	r3, [pc, #204]	; (8009074 <xTaskResumeAll+0x120>)
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	3318      	adds	r3, #24
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7fe fde3 	bl	8007b7c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3304      	adds	r3, #4
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe fdde 	bl	8007b7c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	409a      	lsls	r2, r3
 8008fc8:	4b2b      	ldr	r3, [pc, #172]	; (8009078 <xTaskResumeAll+0x124>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	4a2a      	ldr	r2, [pc, #168]	; (8009078 <xTaskResumeAll+0x124>)
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4a27      	ldr	r2, [pc, #156]	; (800907c <xTaskResumeAll+0x128>)
 8008fe0:	441a      	add	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fe fd6a 	bl	8007ac2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff2:	4b23      	ldr	r3, [pc, #140]	; (8009080 <xTaskResumeAll+0x12c>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d302      	bcc.n	8009002 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008ffc:	4b21      	ldr	r3, [pc, #132]	; (8009084 <xTaskResumeAll+0x130>)
 8008ffe:	2201      	movs	r2, #1
 8009000:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <xTaskResumeAll+0x120>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d1cc      	bne.n	8008fa4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d001      	beq.n	8009014 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009010:	f000 fb42 	bl	8009698 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009014:	4b1c      	ldr	r3, [pc, #112]	; (8009088 <xTaskResumeAll+0x134>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d010      	beq.n	8009042 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009020:	f000 f858 	bl	80090d4 <xTaskIncrementTick>
 8009024:	4603      	mov	r3, r0
 8009026:	2b00      	cmp	r3, #0
 8009028:	d002      	beq.n	8009030 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800902a:	4b16      	ldr	r3, [pc, #88]	; (8009084 <xTaskResumeAll+0x130>)
 800902c:	2201      	movs	r2, #1
 800902e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3b01      	subs	r3, #1
 8009034:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d1f1      	bne.n	8009020 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800903c:	4b12      	ldr	r3, [pc, #72]	; (8009088 <xTaskResumeAll+0x134>)
 800903e:	2200      	movs	r2, #0
 8009040:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009042:	4b10      	ldr	r3, [pc, #64]	; (8009084 <xTaskResumeAll+0x130>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d009      	beq.n	800905e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800904e:	4b0f      	ldr	r3, [pc, #60]	; (800908c <xTaskResumeAll+0x138>)
 8009050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800905e:	f000 feb9 	bl	8009dd4 <vPortExitCritical>

	return xAlreadyYielded;
 8009062:	68bb      	ldr	r3, [r7, #8]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	200056e4 	.word	0x200056e4
 8009070:	200056bc 	.word	0x200056bc
 8009074:	2000567c 	.word	0x2000567c
 8009078:	200056c4 	.word	0x200056c4
 800907c:	200055c0 	.word	0x200055c0
 8009080:	200055bc 	.word	0x200055bc
 8009084:	200056d0 	.word	0x200056d0
 8009088:	200056cc 	.word	0x200056cc
 800908c:	e000ed04 	.word	0xe000ed04

08009090 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <xTaskGetTickCount+0x1c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800909c:	687b      	ldr	r3, [r7, #4]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	200056c0 	.word	0x200056c0

080090b0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b082      	sub	sp, #8
 80090b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090b6:	f000 ff41 	bl	8009f3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80090be:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <xTaskGetTickCountFromISR+0x20>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090c4:	683b      	ldr	r3, [r7, #0]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3708      	adds	r7, #8
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	200056c0 	.word	0x200056c0

080090d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80090da:	2300      	movs	r3, #0
 80090dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80090de:	4b4f      	ldr	r3, [pc, #316]	; (800921c <xTaskIncrementTick+0x148>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f040 808a 	bne.w	80091fc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80090e8:	4b4d      	ldr	r3, [pc, #308]	; (8009220 <xTaskIncrementTick+0x14c>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80090f0:	4a4b      	ldr	r2, [pc, #300]	; (8009220 <xTaskIncrementTick+0x14c>)
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d122      	bne.n	8009142 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80090fc:	4b49      	ldr	r3, [pc, #292]	; (8009224 <xTaskIncrementTick+0x150>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00c      	beq.n	8009120 <xTaskIncrementTick+0x4c>
	__asm volatile
 8009106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800910a:	b672      	cpsid	i
 800910c:	f383 8811 	msr	BASEPRI, r3
 8009110:	f3bf 8f6f 	isb	sy
 8009114:	f3bf 8f4f 	dsb	sy
 8009118:	b662      	cpsie	i
 800911a:	603b      	str	r3, [r7, #0]
}
 800911c:	bf00      	nop
 800911e:	e7fe      	b.n	800911e <xTaskIncrementTick+0x4a>
 8009120:	4b40      	ldr	r3, [pc, #256]	; (8009224 <xTaskIncrementTick+0x150>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	60fb      	str	r3, [r7, #12]
 8009126:	4b40      	ldr	r3, [pc, #256]	; (8009228 <xTaskIncrementTick+0x154>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a3e      	ldr	r2, [pc, #248]	; (8009224 <xTaskIncrementTick+0x150>)
 800912c:	6013      	str	r3, [r2, #0]
 800912e:	4a3e      	ldr	r2, [pc, #248]	; (8009228 <xTaskIncrementTick+0x154>)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6013      	str	r3, [r2, #0]
 8009134:	4b3d      	ldr	r3, [pc, #244]	; (800922c <xTaskIncrementTick+0x158>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3301      	adds	r3, #1
 800913a:	4a3c      	ldr	r2, [pc, #240]	; (800922c <xTaskIncrementTick+0x158>)
 800913c:	6013      	str	r3, [r2, #0]
 800913e:	f000 faab 	bl	8009698 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009142:	4b3b      	ldr	r3, [pc, #236]	; (8009230 <xTaskIncrementTick+0x15c>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	693a      	ldr	r2, [r7, #16]
 8009148:	429a      	cmp	r2, r3
 800914a:	d348      	bcc.n	80091de <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800914c:	4b35      	ldr	r3, [pc, #212]	; (8009224 <xTaskIncrementTick+0x150>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d104      	bne.n	8009160 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009156:	4b36      	ldr	r3, [pc, #216]	; (8009230 <xTaskIncrementTick+0x15c>)
 8009158:	f04f 32ff 	mov.w	r2, #4294967295
 800915c:	601a      	str	r2, [r3, #0]
					break;
 800915e:	e03e      	b.n	80091de <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009160:	4b30      	ldr	r3, [pc, #192]	; (8009224 <xTaskIncrementTick+0x150>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	685b      	ldr	r3, [r3, #4]
 800916e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009170:	693a      	ldr	r2, [r7, #16]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	429a      	cmp	r2, r3
 8009176:	d203      	bcs.n	8009180 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009178:	4a2d      	ldr	r2, [pc, #180]	; (8009230 <xTaskIncrementTick+0x15c>)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800917e:	e02e      	b.n	80091de <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	3304      	adds	r3, #4
 8009184:	4618      	mov	r0, r3
 8009186:	f7fe fcf9 	bl	8007b7c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918e:	2b00      	cmp	r3, #0
 8009190:	d004      	beq.n	800919c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	3318      	adds	r3, #24
 8009196:	4618      	mov	r0, r3
 8009198:	f7fe fcf0 	bl	8007b7c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a0:	2201      	movs	r2, #1
 80091a2:	409a      	lsls	r2, r3
 80091a4:	4b23      	ldr	r3, [pc, #140]	; (8009234 <xTaskIncrementTick+0x160>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	4a22      	ldr	r2, [pc, #136]	; (8009234 <xTaskIncrementTick+0x160>)
 80091ac:	6013      	str	r3, [r2, #0]
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	4613      	mov	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	4413      	add	r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4a1f      	ldr	r2, [pc, #124]	; (8009238 <xTaskIncrementTick+0x164>)
 80091bc:	441a      	add	r2, r3
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4619      	mov	r1, r3
 80091c4:	4610      	mov	r0, r2
 80091c6:	f7fe fc7c 	bl	8007ac2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	4b1b      	ldr	r3, [pc, #108]	; (800923c <xTaskIncrementTick+0x168>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d3b9      	bcc.n	800914c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80091d8:	2301      	movs	r3, #1
 80091da:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091dc:	e7b6      	b.n	800914c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80091de:	4b17      	ldr	r3, [pc, #92]	; (800923c <xTaskIncrementTick+0x168>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e4:	4914      	ldr	r1, [pc, #80]	; (8009238 <xTaskIncrementTick+0x164>)
 80091e6:	4613      	mov	r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4413      	add	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	440b      	add	r3, r1
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d907      	bls.n	8009206 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80091f6:	2301      	movs	r3, #1
 80091f8:	617b      	str	r3, [r7, #20]
 80091fa:	e004      	b.n	8009206 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80091fc:	4b10      	ldr	r3, [pc, #64]	; (8009240 <xTaskIncrementTick+0x16c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3301      	adds	r3, #1
 8009202:	4a0f      	ldr	r2, [pc, #60]	; (8009240 <xTaskIncrementTick+0x16c>)
 8009204:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009206:	4b0f      	ldr	r3, [pc, #60]	; (8009244 <xTaskIncrementTick+0x170>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d001      	beq.n	8009212 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800920e:	2301      	movs	r3, #1
 8009210:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009212:	697b      	ldr	r3, [r7, #20]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	200056e4 	.word	0x200056e4
 8009220:	200056c0 	.word	0x200056c0
 8009224:	20005674 	.word	0x20005674
 8009228:	20005678 	.word	0x20005678
 800922c:	200056d4 	.word	0x200056d4
 8009230:	200056dc 	.word	0x200056dc
 8009234:	200056c4 	.word	0x200056c4
 8009238:	200055c0 	.word	0x200055c0
 800923c:	200055bc 	.word	0x200055bc
 8009240:	200056cc 	.word	0x200056cc
 8009244:	200056d0 	.word	0x200056d0

08009248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800924e:	4b28      	ldr	r3, [pc, #160]	; (80092f0 <vTaskSwitchContext+0xa8>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d003      	beq.n	800925e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009256:	4b27      	ldr	r3, [pc, #156]	; (80092f4 <vTaskSwitchContext+0xac>)
 8009258:	2201      	movs	r2, #1
 800925a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800925c:	e041      	b.n	80092e2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800925e:	4b25      	ldr	r3, [pc, #148]	; (80092f4 <vTaskSwitchContext+0xac>)
 8009260:	2200      	movs	r2, #0
 8009262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009264:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <vTaskSwitchContext+0xb0>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	fab3 f383 	clz	r3, r3
 8009270:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	f1c3 031f 	rsb	r3, r3, #31
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	4920      	ldr	r1, [pc, #128]	; (80092fc <vTaskSwitchContext+0xb4>)
 800927c:	697a      	ldr	r2, [r7, #20]
 800927e:	4613      	mov	r3, r2
 8009280:	009b      	lsls	r3, r3, #2
 8009282:	4413      	add	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	440b      	add	r3, r1
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d10c      	bne.n	80092a8 <vTaskSwitchContext+0x60>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	b672      	cpsid	i
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	b662      	cpsie	i
 80092a2:	607b      	str	r3, [r7, #4]
}
 80092a4:	bf00      	nop
 80092a6:	e7fe      	b.n	80092a6 <vTaskSwitchContext+0x5e>
 80092a8:	697a      	ldr	r2, [r7, #20]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	4a12      	ldr	r2, [pc, #72]	; (80092fc <vTaskSwitchContext+0xb4>)
 80092b4:	4413      	add	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	605a      	str	r2, [r3, #4]
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	685a      	ldr	r2, [r3, #4]
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	3308      	adds	r3, #8
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d104      	bne.n	80092d8 <vTaskSwitchContext+0x90>
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	685b      	ldr	r3, [r3, #4]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	605a      	str	r2, [r3, #4]
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	4a08      	ldr	r2, [pc, #32]	; (8009300 <vTaskSwitchContext+0xb8>)
 80092e0:	6013      	str	r3, [r2, #0]
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	200056e4 	.word	0x200056e4
 80092f4:	200056d0 	.word	0x200056d0
 80092f8:	200056c4 	.word	0x200056c4
 80092fc:	200055c0 	.word	0x200055c0
 8009300:	200055bc 	.word	0x200055bc

08009304 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d10c      	bne.n	800932e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	b672      	cpsid	i
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	b662      	cpsie	i
 8009328:	60fb      	str	r3, [r7, #12]
}
 800932a:	bf00      	nop
 800932c:	e7fe      	b.n	800932c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800932e:	4b07      	ldr	r3, [pc, #28]	; (800934c <vTaskPlaceOnEventList+0x48>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	3318      	adds	r3, #24
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f7fe fbe7 	bl	8007b0a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800933c:	2101      	movs	r1, #1
 800933e:	6838      	ldr	r0, [r7, #0]
 8009340:	f000 fba4 	bl	8009a8c <prvAddCurrentTaskToDelayedList>
}
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	200055bc 	.word	0x200055bc

08009350 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b086      	sub	sp, #24
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10c      	bne.n	8009380 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8009366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800936a:	b672      	cpsid	i
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	b662      	cpsie	i
 800937a:	60fb      	str	r3, [r7, #12]
}
 800937c:	bf00      	nop
 800937e:	e7fe      	b.n	800937e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	3318      	adds	r3, #24
 8009384:	4618      	mov	r0, r3
 8009386:	f7fe fbf9 	bl	8007b7c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800938a:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <xTaskRemoveFromEventList+0xb0>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d11c      	bne.n	80093cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	3304      	adds	r3, #4
 8009396:	4618      	mov	r0, r3
 8009398:	f7fe fbf0 	bl	8007b7c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a0:	2201      	movs	r2, #1
 80093a2:	409a      	lsls	r2, r3
 80093a4:	4b17      	ldr	r3, [pc, #92]	; (8009404 <xTaskRemoveFromEventList+0xb4>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4313      	orrs	r3, r2
 80093aa:	4a16      	ldr	r2, [pc, #88]	; (8009404 <xTaskRemoveFromEventList+0xb4>)
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b2:	4613      	mov	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	4413      	add	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4a13      	ldr	r2, [pc, #76]	; (8009408 <xTaskRemoveFromEventList+0xb8>)
 80093bc:	441a      	add	r2, r3
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	3304      	adds	r3, #4
 80093c2:	4619      	mov	r1, r3
 80093c4:	4610      	mov	r0, r2
 80093c6:	f7fe fb7c 	bl	8007ac2 <vListInsertEnd>
 80093ca:	e005      	b.n	80093d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	3318      	adds	r3, #24
 80093d0:	4619      	mov	r1, r3
 80093d2:	480e      	ldr	r0, [pc, #56]	; (800940c <xTaskRemoveFromEventList+0xbc>)
 80093d4:	f7fe fb75 	bl	8007ac2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093dc:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <xTaskRemoveFromEventList+0xc0>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d905      	bls.n	80093f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80093e6:	2301      	movs	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80093ea:	4b0a      	ldr	r3, [pc, #40]	; (8009414 <xTaskRemoveFromEventList+0xc4>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
 80093f0:	e001      	b.n	80093f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80093f2:	2300      	movs	r3, #0
 80093f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80093f6:	697b      	ldr	r3, [r7, #20]
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	200056e4 	.word	0x200056e4
 8009404:	200056c4 	.word	0x200056c4
 8009408:	200055c0 	.word	0x200055c0
 800940c:	2000567c 	.word	0x2000567c
 8009410:	200055bc 	.word	0x200055bc
 8009414:	200056d0 	.word	0x200056d0

08009418 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009420:	4b06      	ldr	r3, [pc, #24]	; (800943c <vTaskInternalSetTimeOutState+0x24>)
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009428:	4b05      	ldr	r3, [pc, #20]	; (8009440 <vTaskInternalSetTimeOutState+0x28>)
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	605a      	str	r2, [r3, #4]
}
 8009430:	bf00      	nop
 8009432:	370c      	adds	r7, #12
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	200056d4 	.word	0x200056d4
 8009440:	200056c0 	.word	0x200056c0

08009444 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b088      	sub	sp, #32
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d10c      	bne.n	800946e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8009454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009458:	b672      	cpsid	i
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	b662      	cpsie	i
 8009468:	613b      	str	r3, [r7, #16]
}
 800946a:	bf00      	nop
 800946c:	e7fe      	b.n	800946c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d10c      	bne.n	800948e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	b672      	cpsid	i
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	b662      	cpsie	i
 8009488:	60fb      	str	r3, [r7, #12]
}
 800948a:	bf00      	nop
 800948c:	e7fe      	b.n	800948c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800948e:	f000 fc6d 	bl	8009d6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009492:	4b1d      	ldr	r3, [pc, #116]	; (8009508 <xTaskCheckForTimeOut+0xc4>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	69ba      	ldr	r2, [r7, #24]
 800949e:	1ad3      	subs	r3, r2, r3
 80094a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094aa:	d102      	bne.n	80094b2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80094ac:	2300      	movs	r3, #0
 80094ae:	61fb      	str	r3, [r7, #28]
 80094b0:	e023      	b.n	80094fa <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	4b15      	ldr	r3, [pc, #84]	; (800950c <xTaskCheckForTimeOut+0xc8>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d007      	beq.n	80094ce <xTaskCheckForTimeOut+0x8a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	69ba      	ldr	r2, [r7, #24]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d302      	bcc.n	80094ce <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80094c8:	2301      	movs	r3, #1
 80094ca:	61fb      	str	r3, [r7, #28]
 80094cc:	e015      	b.n	80094fa <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d20b      	bcs.n	80094f0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	1ad2      	subs	r2, r2, r3
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f7ff ff97 	bl	8009418 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80094ea:	2300      	movs	r3, #0
 80094ec:	61fb      	str	r3, [r7, #28]
 80094ee:	e004      	b.n	80094fa <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	2200      	movs	r2, #0
 80094f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80094f6:	2301      	movs	r3, #1
 80094f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80094fa:	f000 fc6b 	bl	8009dd4 <vPortExitCritical>

	return xReturn;
 80094fe:	69fb      	ldr	r3, [r7, #28]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3720      	adds	r7, #32
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	200056c0 	.word	0x200056c0
 800950c:	200056d4 	.word	0x200056d4

08009510 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009510:	b480      	push	{r7}
 8009512:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009514:	4b03      	ldr	r3, [pc, #12]	; (8009524 <vTaskMissedYield+0x14>)
 8009516:	2201      	movs	r2, #1
 8009518:	601a      	str	r2, [r3, #0]
}
 800951a:	bf00      	nop
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	200056d0 	.word	0x200056d0

08009528 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b082      	sub	sp, #8
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009530:	f000 f852 	bl	80095d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009534:	4b06      	ldr	r3, [pc, #24]	; (8009550 <prvIdleTask+0x28>)
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d9f9      	bls.n	8009530 <prvIdleTask+0x8>
			{
				taskYIELD();
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <prvIdleTask+0x2c>)
 800953e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009542:	601a      	str	r2, [r3, #0]
 8009544:	f3bf 8f4f 	dsb	sy
 8009548:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800954c:	e7f0      	b.n	8009530 <prvIdleTask+0x8>
 800954e:	bf00      	nop
 8009550:	200055c0 	.word	0x200055c0
 8009554:	e000ed04 	.word	0xe000ed04

08009558 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800955e:	2300      	movs	r3, #0
 8009560:	607b      	str	r3, [r7, #4]
 8009562:	e00c      	b.n	800957e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009564:	687a      	ldr	r2, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	4a12      	ldr	r2, [pc, #72]	; (80095b8 <prvInitialiseTaskLists+0x60>)
 8009570:	4413      	add	r3, r2
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe fa78 	bl	8007a68 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	3301      	adds	r3, #1
 800957c:	607b      	str	r3, [r7, #4]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b06      	cmp	r3, #6
 8009582:	d9ef      	bls.n	8009564 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009584:	480d      	ldr	r0, [pc, #52]	; (80095bc <prvInitialiseTaskLists+0x64>)
 8009586:	f7fe fa6f 	bl	8007a68 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800958a:	480d      	ldr	r0, [pc, #52]	; (80095c0 <prvInitialiseTaskLists+0x68>)
 800958c:	f7fe fa6c 	bl	8007a68 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009590:	480c      	ldr	r0, [pc, #48]	; (80095c4 <prvInitialiseTaskLists+0x6c>)
 8009592:	f7fe fa69 	bl	8007a68 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009596:	480c      	ldr	r0, [pc, #48]	; (80095c8 <prvInitialiseTaskLists+0x70>)
 8009598:	f7fe fa66 	bl	8007a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800959c:	480b      	ldr	r0, [pc, #44]	; (80095cc <prvInitialiseTaskLists+0x74>)
 800959e:	f7fe fa63 	bl	8007a68 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80095a2:	4b0b      	ldr	r3, [pc, #44]	; (80095d0 <prvInitialiseTaskLists+0x78>)
 80095a4:	4a05      	ldr	r2, [pc, #20]	; (80095bc <prvInitialiseTaskLists+0x64>)
 80095a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	; (80095d4 <prvInitialiseTaskLists+0x7c>)
 80095aa:	4a05      	ldr	r2, [pc, #20]	; (80095c0 <prvInitialiseTaskLists+0x68>)
 80095ac:	601a      	str	r2, [r3, #0]
}
 80095ae:	bf00      	nop
 80095b0:	3708      	adds	r7, #8
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	200055c0 	.word	0x200055c0
 80095bc:	2000564c 	.word	0x2000564c
 80095c0:	20005660 	.word	0x20005660
 80095c4:	2000567c 	.word	0x2000567c
 80095c8:	20005690 	.word	0x20005690
 80095cc:	200056a8 	.word	0x200056a8
 80095d0:	20005674 	.word	0x20005674
 80095d4:	20005678 	.word	0x20005678

080095d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80095de:	e019      	b.n	8009614 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80095e0:	f000 fbc4 	bl	8009d6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095e4:	4b10      	ldr	r3, [pc, #64]	; (8009628 <prvCheckTasksWaitingTermination+0x50>)
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	68db      	ldr	r3, [r3, #12]
 80095ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	3304      	adds	r3, #4
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fac3 	bl	8007b7c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80095f6:	4b0d      	ldr	r3, [pc, #52]	; (800962c <prvCheckTasksWaitingTermination+0x54>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	3b01      	subs	r3, #1
 80095fc:	4a0b      	ldr	r2, [pc, #44]	; (800962c <prvCheckTasksWaitingTermination+0x54>)
 80095fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009600:	4b0b      	ldr	r3, [pc, #44]	; (8009630 <prvCheckTasksWaitingTermination+0x58>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3b01      	subs	r3, #1
 8009606:	4a0a      	ldr	r2, [pc, #40]	; (8009630 <prvCheckTasksWaitingTermination+0x58>)
 8009608:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800960a:	f000 fbe3 	bl	8009dd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f000 f810 	bl	8009634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009614:	4b06      	ldr	r3, [pc, #24]	; (8009630 <prvCheckTasksWaitingTermination+0x58>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e1      	bne.n	80095e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800961c:	bf00      	nop
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	20005690 	.word	0x20005690
 800962c:	200056bc 	.word	0x200056bc
 8009630:	200056a4 	.word	0x200056a4

08009634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009642:	2b00      	cmp	r3, #0
 8009644:	d108      	bne.n	8009658 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fd84 	bl	800a158 <vPortFree>
				vPortFree( pxTCB );
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fd81 	bl	800a158 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009656:	e01a      	b.n	800968e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800965e:	2b01      	cmp	r3, #1
 8009660:	d103      	bne.n	800966a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fd78 	bl	800a158 <vPortFree>
	}
 8009668:	e011      	b.n	800968e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009670:	2b02      	cmp	r3, #2
 8009672:	d00c      	beq.n	800968e <prvDeleteTCB+0x5a>
	__asm volatile
 8009674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009678:	b672      	cpsid	i
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	b662      	cpsie	i
 8009688:	60fb      	str	r3, [r7, #12]
}
 800968a:	bf00      	nop
 800968c:	e7fe      	b.n	800968c <prvDeleteTCB+0x58>
	}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800969e:	4b0c      	ldr	r3, [pc, #48]	; (80096d0 <prvResetNextTaskUnblockTime+0x38>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d104      	bne.n	80096b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80096a8:	4b0a      	ldr	r3, [pc, #40]	; (80096d4 <prvResetNextTaskUnblockTime+0x3c>)
 80096aa:	f04f 32ff 	mov.w	r2, #4294967295
 80096ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80096b0:	e008      	b.n	80096c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b2:	4b07      	ldr	r3, [pc, #28]	; (80096d0 <prvResetNextTaskUnblockTime+0x38>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	4a04      	ldr	r2, [pc, #16]	; (80096d4 <prvResetNextTaskUnblockTime+0x3c>)
 80096c2:	6013      	str	r3, [r2, #0]
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	20005674 	.word	0x20005674
 80096d4:	200056dc 	.word	0x200056dc

080096d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80096de:	4b0b      	ldr	r3, [pc, #44]	; (800970c <xTaskGetSchedulerState+0x34>)
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d102      	bne.n	80096ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096e6:	2301      	movs	r3, #1
 80096e8:	607b      	str	r3, [r7, #4]
 80096ea:	e008      	b.n	80096fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096ec:	4b08      	ldr	r3, [pc, #32]	; (8009710 <xTaskGetSchedulerState+0x38>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80096f4:	2302      	movs	r3, #2
 80096f6:	607b      	str	r3, [r7, #4]
 80096f8:	e001      	b.n	80096fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80096fa:	2300      	movs	r3, #0
 80096fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80096fe:	687b      	ldr	r3, [r7, #4]
	}
 8009700:	4618      	mov	r0, r3
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr
 800970c:	200056c8 	.word	0x200056c8
 8009710:	200056e4 	.word	0x200056e4

08009714 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009720:	2300      	movs	r3, #0
 8009722:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d069      	beq.n	80097fe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972e:	4b36      	ldr	r3, [pc, #216]	; (8009808 <xTaskPriorityInherit+0xf4>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009734:	429a      	cmp	r2, r3
 8009736:	d259      	bcs.n	80097ec <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	db06      	blt.n	800974e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009740:	4b31      	ldr	r3, [pc, #196]	; (8009808 <xTaskPriorityInherit+0xf4>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	f1c3 0207 	rsb	r2, r3, #7
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	6959      	ldr	r1, [r3, #20]
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4a2b      	ldr	r2, [pc, #172]	; (800980c <xTaskPriorityInherit+0xf8>)
 8009760:	4413      	add	r3, r2
 8009762:	4299      	cmp	r1, r3
 8009764:	d13a      	bne.n	80097dc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	3304      	adds	r3, #4
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe fa06 	bl	8007b7c <uxListRemove>
 8009770:	4603      	mov	r3, r0
 8009772:	2b00      	cmp	r3, #0
 8009774:	d115      	bne.n	80097a2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800977a:	4924      	ldr	r1, [pc, #144]	; (800980c <xTaskPriorityInherit+0xf8>)
 800977c:	4613      	mov	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	440b      	add	r3, r1
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d10a      	bne.n	80097a2 <xTaskPriorityInherit+0x8e>
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009790:	2201      	movs	r2, #1
 8009792:	fa02 f303 	lsl.w	r3, r2, r3
 8009796:	43da      	mvns	r2, r3
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <xTaskPriorityInherit+0xfc>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4013      	ands	r3, r2
 800979e:	4a1c      	ldr	r2, [pc, #112]	; (8009810 <xTaskPriorityInherit+0xfc>)
 80097a0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097a2:	4b19      	ldr	r3, [pc, #100]	; (8009808 <xTaskPriorityInherit+0xf4>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b0:	2201      	movs	r2, #1
 80097b2:	409a      	lsls	r2, r3
 80097b4:	4b16      	ldr	r3, [pc, #88]	; (8009810 <xTaskPriorityInherit+0xfc>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	4a15      	ldr	r2, [pc, #84]	; (8009810 <xTaskPriorityInherit+0xfc>)
 80097bc:	6013      	str	r3, [r2, #0]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097c2:	4613      	mov	r3, r2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4a10      	ldr	r2, [pc, #64]	; (800980c <xTaskPriorityInherit+0xf8>)
 80097cc:	441a      	add	r2, r3
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	3304      	adds	r3, #4
 80097d2:	4619      	mov	r1, r3
 80097d4:	4610      	mov	r0, r2
 80097d6:	f7fe f974 	bl	8007ac2 <vListInsertEnd>
 80097da:	e004      	b.n	80097e6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80097dc:	4b0a      	ldr	r3, [pc, #40]	; (8009808 <xTaskPriorityInherit+0xf4>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80097e6:	2301      	movs	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e008      	b.n	80097fe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097f0:	4b05      	ldr	r3, [pc, #20]	; (8009808 <xTaskPriorityInherit+0xf4>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d201      	bcs.n	80097fe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80097fa:	2301      	movs	r3, #1
 80097fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80097fe:	68fb      	ldr	r3, [r7, #12]
	}
 8009800:	4618      	mov	r0, r3
 8009802:	3710      	adds	r7, #16
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	200055bc 	.word	0x200055bc
 800980c:	200055c0 	.word	0x200055c0
 8009810:	200056c4 	.word	0x200056c4

08009814 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009820:	2300      	movs	r3, #0
 8009822:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d072      	beq.n	8009910 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800982a:	4b3c      	ldr	r3, [pc, #240]	; (800991c <xTaskPriorityDisinherit+0x108>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	693a      	ldr	r2, [r7, #16]
 8009830:	429a      	cmp	r2, r3
 8009832:	d00c      	beq.n	800984e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009838:	b672      	cpsid	i
 800983a:	f383 8811 	msr	BASEPRI, r3
 800983e:	f3bf 8f6f 	isb	sy
 8009842:	f3bf 8f4f 	dsb	sy
 8009846:	b662      	cpsie	i
 8009848:	60fb      	str	r3, [r7, #12]
}
 800984a:	bf00      	nop
 800984c:	e7fe      	b.n	800984c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10c      	bne.n	8009870 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800985a:	b672      	cpsid	i
 800985c:	f383 8811 	msr	BASEPRI, r3
 8009860:	f3bf 8f6f 	isb	sy
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	b662      	cpsie	i
 800986a:	60bb      	str	r3, [r7, #8]
}
 800986c:	bf00      	nop
 800986e:	e7fe      	b.n	800986e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009874:	1e5a      	subs	r2, r3, #1
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009882:	429a      	cmp	r2, r3
 8009884:	d044      	beq.n	8009910 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800988a:	2b00      	cmp	r3, #0
 800988c:	d140      	bne.n	8009910 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	3304      	adds	r3, #4
 8009892:	4618      	mov	r0, r3
 8009894:	f7fe f972 	bl	8007b7c <uxListRemove>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	d115      	bne.n	80098ca <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a2:	491f      	ldr	r1, [pc, #124]	; (8009920 <xTaskPriorityDisinherit+0x10c>)
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10a      	bne.n	80098ca <xTaskPriorityDisinherit+0xb6>
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b8:	2201      	movs	r2, #1
 80098ba:	fa02 f303 	lsl.w	r3, r2, r3
 80098be:	43da      	mvns	r2, r3
 80098c0:	4b18      	ldr	r3, [pc, #96]	; (8009924 <xTaskPriorityDisinherit+0x110>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4013      	ands	r3, r2
 80098c6:	4a17      	ldr	r2, [pc, #92]	; (8009924 <xTaskPriorityDisinherit+0x110>)
 80098c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098ca:	693b      	ldr	r3, [r7, #16]
 80098cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d6:	f1c3 0207 	rsb	r2, r3, #7
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098e2:	2201      	movs	r2, #1
 80098e4:	409a      	lsls	r2, r3
 80098e6:	4b0f      	ldr	r3, [pc, #60]	; (8009924 <xTaskPriorityDisinherit+0x110>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	4a0d      	ldr	r2, [pc, #52]	; (8009924 <xTaskPriorityDisinherit+0x110>)
 80098ee:	6013      	str	r3, [r2, #0]
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098f4:	4613      	mov	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4a08      	ldr	r2, [pc, #32]	; (8009920 <xTaskPriorityDisinherit+0x10c>)
 80098fe:	441a      	add	r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	3304      	adds	r3, #4
 8009904:	4619      	mov	r1, r3
 8009906:	4610      	mov	r0, r2
 8009908:	f7fe f8db 	bl	8007ac2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800990c:	2301      	movs	r3, #1
 800990e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009910:	697b      	ldr	r3, [r7, #20]
	}
 8009912:	4618      	mov	r0, r3
 8009914:	3718      	adds	r7, #24
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	200055bc 	.word	0x200055bc
 8009920:	200055c0 	.word	0x200055c0
 8009924:	200056c4 	.word	0x200056c4

08009928 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009928:	b580      	push	{r7, lr}
 800992a:	b088      	sub	sp, #32
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009936:	2301      	movs	r3, #1
 8009938:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 8087 	beq.w	8009a50 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009942:	69bb      	ldr	r3, [r7, #24]
 8009944:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009946:	2b00      	cmp	r3, #0
 8009948:	d10c      	bne.n	8009964 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994e:	b672      	cpsid	i
 8009950:	f383 8811 	msr	BASEPRI, r3
 8009954:	f3bf 8f6f 	isb	sy
 8009958:	f3bf 8f4f 	dsb	sy
 800995c:	b662      	cpsie	i
 800995e:	60fb      	str	r3, [r7, #12]
}
 8009960:	bf00      	nop
 8009962:	e7fe      	b.n	8009962 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009968:	683a      	ldr	r2, [r7, #0]
 800996a:	429a      	cmp	r2, r3
 800996c:	d902      	bls.n	8009974 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	61fb      	str	r3, [r7, #28]
 8009972:	e002      	b.n	800997a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009978:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800997e:	69fa      	ldr	r2, [r7, #28]
 8009980:	429a      	cmp	r2, r3
 8009982:	d065      	beq.n	8009a50 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009984:	69bb      	ldr	r3, [r7, #24]
 8009986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	429a      	cmp	r2, r3
 800998c:	d160      	bne.n	8009a50 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800998e:	4b32      	ldr	r3, [pc, #200]	; (8009a58 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	429a      	cmp	r2, r3
 8009996:	d10c      	bne.n	80099b2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8009998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800999c:	b672      	cpsid	i
 800999e:	f383 8811 	msr	BASEPRI, r3
 80099a2:	f3bf 8f6f 	isb	sy
 80099a6:	f3bf 8f4f 	dsb	sy
 80099aa:	b662      	cpsie	i
 80099ac:	60bb      	str	r3, [r7, #8]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	db04      	blt.n	80099d0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099c6:	69fb      	ldr	r3, [r7, #28]
 80099c8:	f1c3 0207 	rsb	r2, r3, #7
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	6959      	ldr	r1, [r3, #20]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	4613      	mov	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4413      	add	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4a1f      	ldr	r2, [pc, #124]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80099e0:	4413      	add	r3, r2
 80099e2:	4299      	cmp	r1, r3
 80099e4:	d134      	bne.n	8009a50 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099e6:	69bb      	ldr	r3, [r7, #24]
 80099e8:	3304      	adds	r3, #4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7fe f8c6 	bl	8007b7c <uxListRemove>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d115      	bne.n	8009a22 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fa:	4918      	ldr	r1, [pc, #96]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80099fc:	4613      	mov	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a10:	2201      	movs	r2, #1
 8009a12:	fa02 f303 	lsl.w	r3, r2, r3
 8009a16:	43da      	mvns	r2, r3
 8009a18:	4b11      	ldr	r3, [pc, #68]	; (8009a60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4013      	ands	r3, r2
 8009a1e:	4a10      	ldr	r2, [pc, #64]	; (8009a60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009a20:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009a22:	69bb      	ldr	r3, [r7, #24]
 8009a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a26:	2201      	movs	r2, #1
 8009a28:	409a      	lsls	r2, r3
 8009a2a:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	4a0b      	ldr	r2, [pc, #44]	; (8009a60 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a06      	ldr	r2, [pc, #24]	; (8009a5c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8009a42:	441a      	add	r2, r3
 8009a44:	69bb      	ldr	r3, [r7, #24]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fe f839 	bl	8007ac2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a50:	bf00      	nop
 8009a52:	3720      	adds	r7, #32
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	200055bc 	.word	0x200055bc
 8009a5c:	200055c0 	.word	0x200055c0
 8009a60:	200056c4 	.word	0x200056c4

08009a64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009a64:	b480      	push	{r7}
 8009a66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009a68:	4b07      	ldr	r3, [pc, #28]	; (8009a88 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d004      	beq.n	8009a7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009a70:	4b05      	ldr	r3, [pc, #20]	; (8009a88 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009a76:	3201      	adds	r2, #1
 8009a78:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009a7a:	4b03      	ldr	r3, [pc, #12]	; (8009a88 <pvTaskIncrementMutexHeldCount+0x24>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
	}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	200055bc 	.word	0x200055bc

08009a8c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a96:	4b29      	ldr	r3, [pc, #164]	; (8009b3c <prvAddCurrentTaskToDelayedList+0xb0>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a9c:	4b28      	ldr	r3, [pc, #160]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3304      	adds	r3, #4
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7fe f86a 	bl	8007b7c <uxListRemove>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d10b      	bne.n	8009ac6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009aae:	4b24      	ldr	r3, [pc, #144]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aba:	43da      	mvns	r2, r3
 8009abc:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	4a20      	ldr	r2, [pc, #128]	; (8009b44 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009ac4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009acc:	d10a      	bne.n	8009ae4 <prvAddCurrentTaskToDelayedList+0x58>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d007      	beq.n	8009ae4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad4:	4b1a      	ldr	r3, [pc, #104]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3304      	adds	r3, #4
 8009ada:	4619      	mov	r1, r3
 8009adc:	481a      	ldr	r0, [pc, #104]	; (8009b48 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ade:	f7fd fff0 	bl	8007ac2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009ae2:	e026      	b.n	8009b32 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4413      	add	r3, r2
 8009aea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aec:	4b14      	ldr	r3, [pc, #80]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d209      	bcs.n	8009b10 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009afc:	4b13      	ldr	r3, [pc, #76]	; (8009b4c <prvAddCurrentTaskToDelayedList+0xc0>)
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	4b0f      	ldr	r3, [pc, #60]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7fd fffe 	bl	8007b0a <vListInsert>
}
 8009b0e:	e010      	b.n	8009b32 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009b10:	4b0f      	ldr	r3, [pc, #60]	; (8009b50 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	4b0a      	ldr	r3, [pc, #40]	; (8009b40 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f7fd fff4 	bl	8007b0a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009b22:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	68ba      	ldr	r2, [r7, #8]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d202      	bcs.n	8009b32 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009b2c:	4a09      	ldr	r2, [pc, #36]	; (8009b54 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	6013      	str	r3, [r2, #0]
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	200056c0 	.word	0x200056c0
 8009b40:	200055bc 	.word	0x200055bc
 8009b44:	200056c4 	.word	0x200056c4
 8009b48:	200056a8 	.word	0x200056a8
 8009b4c:	20005678 	.word	0x20005678
 8009b50:	20005674 	.word	0x20005674
 8009b54:	200056dc 	.word	0x200056dc

08009b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b085      	sub	sp, #20
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60f8      	str	r0, [r7, #12]
 8009b60:	60b9      	str	r1, [r7, #8]
 8009b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	3b04      	subs	r3, #4
 8009b68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	3b04      	subs	r3, #4
 8009b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	f023 0201 	bic.w	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	3b04      	subs	r3, #4
 8009b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009b88:	4a0c      	ldr	r2, [pc, #48]	; (8009bbc <pxPortInitialiseStack+0x64>)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	3b14      	subs	r3, #20
 8009b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b94:	687a      	ldr	r2, [r7, #4]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	3b04      	subs	r3, #4
 8009b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f06f 0202 	mvn.w	r2, #2
 8009ba6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	3b20      	subs	r3, #32
 8009bac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009bae:	68fb      	ldr	r3, [r7, #12]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	08009bc1 	.word	0x08009bc1

08009bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009bca:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <prvTaskExitError+0x5c>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bd2:	d00c      	beq.n	8009bee <prvTaskExitError+0x2e>
	__asm volatile
 8009bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd8:	b672      	cpsid	i
 8009bda:	f383 8811 	msr	BASEPRI, r3
 8009bde:	f3bf 8f6f 	isb	sy
 8009be2:	f3bf 8f4f 	dsb	sy
 8009be6:	b662      	cpsie	i
 8009be8:	60fb      	str	r3, [r7, #12]
}
 8009bea:	bf00      	nop
 8009bec:	e7fe      	b.n	8009bec <prvTaskExitError+0x2c>
	__asm volatile
 8009bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf2:	b672      	cpsid	i
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	b662      	cpsie	i
 8009c02:	60bb      	str	r3, [r7, #8]
}
 8009c04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c06:	bf00      	nop
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0fc      	beq.n	8009c08 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c0e:	bf00      	nop
 8009c10:	bf00      	nop
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	20000038 	.word	0x20000038

08009c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009c20:	4b07      	ldr	r3, [pc, #28]	; (8009c40 <pxCurrentTCBConst2>)
 8009c22:	6819      	ldr	r1, [r3, #0]
 8009c24:	6808      	ldr	r0, [r1, #0]
 8009c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	f380 8809 	msr	PSP, r0
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f04f 0000 	mov.w	r0, #0
 8009c36:	f380 8811 	msr	BASEPRI, r0
 8009c3a:	4770      	bx	lr
 8009c3c:	f3af 8000 	nop.w

08009c40 <pxCurrentTCBConst2>:
 8009c40:	200055bc 	.word	0x200055bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009c44:	bf00      	nop
 8009c46:	bf00      	nop

08009c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009c48:	4808      	ldr	r0, [pc, #32]	; (8009c6c <prvPortStartFirstTask+0x24>)
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	6800      	ldr	r0, [r0, #0]
 8009c4e:	f380 8808 	msr	MSP, r0
 8009c52:	f04f 0000 	mov.w	r0, #0
 8009c56:	f380 8814 	msr	CONTROL, r0
 8009c5a:	b662      	cpsie	i
 8009c5c:	b661      	cpsie	f
 8009c5e:	f3bf 8f4f 	dsb	sy
 8009c62:	f3bf 8f6f 	isb	sy
 8009c66:	df00      	svc	0
 8009c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009c6a:	bf00      	nop
 8009c6c:	e000ed08 	.word	0xe000ed08

08009c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c76:	4b37      	ldr	r3, [pc, #220]	; (8009d54 <xPortStartScheduler+0xe4>)
 8009c78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	781b      	ldrb	r3, [r3, #0]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	22ff      	movs	r2, #255	; 0xff
 8009c86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	4b2f      	ldr	r3, [pc, #188]	; (8009d58 <xPortStartScheduler+0xe8>)
 8009c9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c9e:	4b2f      	ldr	r3, [pc, #188]	; (8009d5c <xPortStartScheduler+0xec>)
 8009ca0:	2207      	movs	r2, #7
 8009ca2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ca4:	e009      	b.n	8009cba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009ca6:	4b2d      	ldr	r3, [pc, #180]	; (8009d5c <xPortStartScheduler+0xec>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4a2b      	ldr	r2, [pc, #172]	; (8009d5c <xPortStartScheduler+0xec>)
 8009cae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009cb0:	78fb      	ldrb	r3, [r7, #3]
 8009cb2:	b2db      	uxtb	r3, r3
 8009cb4:	005b      	lsls	r3, r3, #1
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009cba:	78fb      	ldrb	r3, [r7, #3]
 8009cbc:	b2db      	uxtb	r3, r3
 8009cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cc2:	2b80      	cmp	r3, #128	; 0x80
 8009cc4:	d0ef      	beq.n	8009ca6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009cc6:	4b25      	ldr	r3, [pc, #148]	; (8009d5c <xPortStartScheduler+0xec>)
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1c3 0307 	rsb	r3, r3, #7
 8009cce:	2b04      	cmp	r3, #4
 8009cd0:	d00c      	beq.n	8009cec <xPortStartScheduler+0x7c>
	__asm volatile
 8009cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd6:	b672      	cpsid	i
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	b662      	cpsie	i
 8009ce6:	60bb      	str	r3, [r7, #8]
}
 8009ce8:	bf00      	nop
 8009cea:	e7fe      	b.n	8009cea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cec:	4b1b      	ldr	r3, [pc, #108]	; (8009d5c <xPortStartScheduler+0xec>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	021b      	lsls	r3, r3, #8
 8009cf2:	4a1a      	ldr	r2, [pc, #104]	; (8009d5c <xPortStartScheduler+0xec>)
 8009cf4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cf6:	4b19      	ldr	r3, [pc, #100]	; (8009d5c <xPortStartScheduler+0xec>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009cfe:	4a17      	ldr	r2, [pc, #92]	; (8009d5c <xPortStartScheduler+0xec>)
 8009d00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	b2da      	uxtb	r2, r3
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009d0a:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <xPortStartScheduler+0xf0>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a14      	ldr	r2, [pc, #80]	; (8009d60 <xPortStartScheduler+0xf0>)
 8009d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009d16:	4b12      	ldr	r3, [pc, #72]	; (8009d60 <xPortStartScheduler+0xf0>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a11      	ldr	r2, [pc, #68]	; (8009d60 <xPortStartScheduler+0xf0>)
 8009d1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009d20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009d22:	f000 f8dd 	bl	8009ee0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009d26:	4b0f      	ldr	r3, [pc, #60]	; (8009d64 <xPortStartScheduler+0xf4>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009d2c:	f000 f8fc 	bl	8009f28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009d30:	4b0d      	ldr	r3, [pc, #52]	; (8009d68 <xPortStartScheduler+0xf8>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a0c      	ldr	r2, [pc, #48]	; (8009d68 <xPortStartScheduler+0xf8>)
 8009d36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009d3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009d3c:	f7ff ff84 	bl	8009c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009d40:	f7ff fa82 	bl	8009248 <vTaskSwitchContext>
	prvTaskExitError();
 8009d44:	f7ff ff3c 	bl	8009bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009d48:	2300      	movs	r3, #0
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}
 8009d52:	bf00      	nop
 8009d54:	e000e400 	.word	0xe000e400
 8009d58:	200056e8 	.word	0x200056e8
 8009d5c:	200056ec 	.word	0x200056ec
 8009d60:	e000ed20 	.word	0xe000ed20
 8009d64:	20000038 	.word	0x20000038
 8009d68:	e000ef34 	.word	0xe000ef34

08009d6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	b672      	cpsid	i
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	b662      	cpsie	i
 8009d86:	607b      	str	r3, [r7, #4]
}
 8009d88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d8a:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <vPortEnterCritical+0x60>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	4a0e      	ldr	r2, [pc, #56]	; (8009dcc <vPortEnterCritical+0x60>)
 8009d92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d94:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <vPortEnterCritical+0x60>)
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d111      	bne.n	8009dc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d9c:	4b0c      	ldr	r3, [pc, #48]	; (8009dd0 <vPortEnterCritical+0x64>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	b2db      	uxtb	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00c      	beq.n	8009dc0 <vPortEnterCritical+0x54>
	__asm volatile
 8009da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009daa:	b672      	cpsid	i
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	b662      	cpsie	i
 8009dba:	603b      	str	r3, [r7, #0]
}
 8009dbc:	bf00      	nop
 8009dbe:	e7fe      	b.n	8009dbe <vPortEnterCritical+0x52>
	}
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr
 8009dcc:	20000038 	.word	0x20000038
 8009dd0:	e000ed04 	.word	0xe000ed04

08009dd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dda:	4b13      	ldr	r3, [pc, #76]	; (8009e28 <vPortExitCritical+0x54>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10c      	bne.n	8009dfc <vPortExitCritical+0x28>
	__asm volatile
 8009de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de6:	b672      	cpsid	i
 8009de8:	f383 8811 	msr	BASEPRI, r3
 8009dec:	f3bf 8f6f 	isb	sy
 8009df0:	f3bf 8f4f 	dsb	sy
 8009df4:	b662      	cpsie	i
 8009df6:	607b      	str	r3, [r7, #4]
}
 8009df8:	bf00      	nop
 8009dfa:	e7fe      	b.n	8009dfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <vPortExitCritical+0x54>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <vPortExitCritical+0x54>)
 8009e04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e06:	4b08      	ldr	r3, [pc, #32]	; (8009e28 <vPortExitCritical+0x54>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d105      	bne.n	8009e1a <vPortExitCritical+0x46>
 8009e0e:	2300      	movs	r3, #0
 8009e10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	f383 8811 	msr	BASEPRI, r3
}
 8009e18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e1a:	bf00      	nop
 8009e1c:	370c      	adds	r7, #12
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	20000038 	.word	0x20000038
 8009e2c:	00000000 	.word	0x00000000

08009e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e30:	f3ef 8009 	mrs	r0, PSP
 8009e34:	f3bf 8f6f 	isb	sy
 8009e38:	4b15      	ldr	r3, [pc, #84]	; (8009e90 <pxCurrentTCBConst>)
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	f01e 0f10 	tst.w	lr, #16
 8009e40:	bf08      	it	eq
 8009e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4a:	6010      	str	r0, [r2, #0]
 8009e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e54:	b672      	cpsid	i
 8009e56:	f380 8811 	msr	BASEPRI, r0
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	f3bf 8f6f 	isb	sy
 8009e62:	b662      	cpsie	i
 8009e64:	f7ff f9f0 	bl	8009248 <vTaskSwitchContext>
 8009e68:	f04f 0000 	mov.w	r0, #0
 8009e6c:	f380 8811 	msr	BASEPRI, r0
 8009e70:	bc09      	pop	{r0, r3}
 8009e72:	6819      	ldr	r1, [r3, #0]
 8009e74:	6808      	ldr	r0, [r1, #0]
 8009e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7a:	f01e 0f10 	tst.w	lr, #16
 8009e7e:	bf08      	it	eq
 8009e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e84:	f380 8809 	msr	PSP, r0
 8009e88:	f3bf 8f6f 	isb	sy
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <pxCurrentTCBConst>:
 8009e90:	200055bc 	.word	0x200055bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e94:	bf00      	nop
 8009e96:	bf00      	nop

08009e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea2:	b672      	cpsid	i
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	b662      	cpsie	i
 8009eb2:	607b      	str	r3, [r7, #4]
}
 8009eb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009eb6:	f7ff f90d 	bl	80090d4 <xTaskIncrementTick>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009ec0:	4b06      	ldr	r3, [pc, #24]	; (8009edc <SysTick_Handler+0x44>)
 8009ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	f383 8811 	msr	BASEPRI, r3
}
 8009ed2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}
 8009edc:	e000ed04 	.word	0xe000ed04

08009ee0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ee4:	4b0b      	ldr	r3, [pc, #44]	; (8009f14 <vPortSetupTimerInterrupt+0x34>)
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <vPortSetupTimerInterrupt+0x38>)
 8009eec:	2200      	movs	r2, #0
 8009eee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <vPortSetupTimerInterrupt+0x3c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	4a0a      	ldr	r2, [pc, #40]	; (8009f20 <vPortSetupTimerInterrupt+0x40>)
 8009ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8009efa:	099b      	lsrs	r3, r3, #6
 8009efc:	4a09      	ldr	r2, [pc, #36]	; (8009f24 <vPortSetupTimerInterrupt+0x44>)
 8009efe:	3b01      	subs	r3, #1
 8009f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f02:	4b04      	ldr	r3, [pc, #16]	; (8009f14 <vPortSetupTimerInterrupt+0x34>)
 8009f04:	2207      	movs	r2, #7
 8009f06:	601a      	str	r2, [r3, #0]
}
 8009f08:	bf00      	nop
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	e000e010 	.word	0xe000e010
 8009f18:	e000e018 	.word	0xe000e018
 8009f1c:	20000018 	.word	0x20000018
 8009f20:	10624dd3 	.word	0x10624dd3
 8009f24:	e000e014 	.word	0xe000e014

08009f28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009f28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009f38 <vPortEnableVFP+0x10>
 8009f2c:	6801      	ldr	r1, [r0, #0]
 8009f2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009f32:	6001      	str	r1, [r0, #0]
 8009f34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009f36:	bf00      	nop
 8009f38:	e000ed88 	.word	0xe000ed88

08009f3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009f42:	f3ef 8305 	mrs	r3, IPSR
 8009f46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	2b0f      	cmp	r3, #15
 8009f4c:	d916      	bls.n	8009f7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f4e:	4a19      	ldr	r2, [pc, #100]	; (8009fb4 <vPortValidateInterruptPriority+0x78>)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	4413      	add	r3, r2
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f58:	4b17      	ldr	r3, [pc, #92]	; (8009fb8 <vPortValidateInterruptPriority+0x7c>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	7afa      	ldrb	r2, [r7, #11]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d20c      	bcs.n	8009f7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	b672      	cpsid	i
 8009f68:	f383 8811 	msr	BASEPRI, r3
 8009f6c:	f3bf 8f6f 	isb	sy
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	b662      	cpsie	i
 8009f76:	607b      	str	r3, [r7, #4]
}
 8009f78:	bf00      	nop
 8009f7a:	e7fe      	b.n	8009f7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f7c:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <vPortValidateInterruptPriority+0x80>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009f84:	4b0e      	ldr	r3, [pc, #56]	; (8009fc0 <vPortValidateInterruptPriority+0x84>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d90c      	bls.n	8009fa6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f90:	b672      	cpsid	i
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	b662      	cpsie	i
 8009fa0:	603b      	str	r3, [r7, #0]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <vPortValidateInterruptPriority+0x68>
	}
 8009fa6:	bf00      	nop
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	e000e3f0 	.word	0xe000e3f0
 8009fb8:	200056e8 	.word	0x200056e8
 8009fbc:	e000ed0c 	.word	0xe000ed0c
 8009fc0:	200056ec 	.word	0x200056ec

08009fc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08a      	sub	sp, #40	; 0x28
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009fd0:	f7fe ffb2 	bl	8008f38 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009fd4:	4b5b      	ldr	r3, [pc, #364]	; (800a144 <pvPortMalloc+0x180>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009fdc:	f000 f91a 	bl	800a214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009fe0:	4b59      	ldr	r3, [pc, #356]	; (800a148 <pvPortMalloc+0x184>)
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f040 8092 	bne.w	800a112 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d01f      	beq.n	800a034 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009ff4:	2208      	movs	r2, #8
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f003 0307 	and.w	r3, r3, #7
 800a002:	2b00      	cmp	r3, #0
 800a004:	d016      	beq.n	800a034 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f023 0307 	bic.w	r3, r3, #7
 800a00c:	3308      	adds	r3, #8
 800a00e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	f003 0307 	and.w	r3, r3, #7
 800a016:	2b00      	cmp	r3, #0
 800a018:	d00c      	beq.n	800a034 <pvPortMalloc+0x70>
	__asm volatile
 800a01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a01e:	b672      	cpsid	i
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	b662      	cpsie	i
 800a02e:	617b      	str	r3, [r7, #20]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d06b      	beq.n	800a112 <pvPortMalloc+0x14e>
 800a03a:	4b44      	ldr	r3, [pc, #272]	; (800a14c <pvPortMalloc+0x188>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	429a      	cmp	r2, r3
 800a042:	d866      	bhi.n	800a112 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a044:	4b42      	ldr	r3, [pc, #264]	; (800a150 <pvPortMalloc+0x18c>)
 800a046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a048:	4b41      	ldr	r3, [pc, #260]	; (800a150 <pvPortMalloc+0x18c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a04e:	e004      	b.n	800a05a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	d903      	bls.n	800a06c <pvPortMalloc+0xa8>
 800a064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d1f1      	bne.n	800a050 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a06c:	4b35      	ldr	r3, [pc, #212]	; (800a144 <pvPortMalloc+0x180>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a072:	429a      	cmp	r2, r3
 800a074:	d04d      	beq.n	800a112 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a076:	6a3b      	ldr	r3, [r7, #32]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2208      	movs	r2, #8
 800a07c:	4413      	add	r3, r2
 800a07e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	1ad2      	subs	r2, r2, r3
 800a090:	2308      	movs	r3, #8
 800a092:	005b      	lsls	r3, r3, #1
 800a094:	429a      	cmp	r2, r3
 800a096:	d921      	bls.n	800a0dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4413      	add	r3, r2
 800a09e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f003 0307 	and.w	r3, r3, #7
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00c      	beq.n	800a0c4 <pvPortMalloc+0x100>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	b672      	cpsid	i
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	b662      	cpsie	i
 800a0be:	613b      	str	r3, [r7, #16]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	1ad2      	subs	r2, r2, r3
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a0d6:	69b8      	ldr	r0, [r7, #24]
 800a0d8:	f000 f8fe 	bl	800a2d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a0dc:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <pvPortMalloc+0x188>)
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	1ad3      	subs	r3, r2, r3
 800a0e6:	4a19      	ldr	r2, [pc, #100]	; (800a14c <pvPortMalloc+0x188>)
 800a0e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a0ea:	4b18      	ldr	r3, [pc, #96]	; (800a14c <pvPortMalloc+0x188>)
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	4b19      	ldr	r3, [pc, #100]	; (800a154 <pvPortMalloc+0x190>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d203      	bcs.n	800a0fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a0f6:	4b15      	ldr	r3, [pc, #84]	; (800a14c <pvPortMalloc+0x188>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4a16      	ldr	r2, [pc, #88]	; (800a154 <pvPortMalloc+0x190>)
 800a0fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	4b11      	ldr	r3, [pc, #68]	; (800a148 <pvPortMalloc+0x184>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	431a      	orrs	r2, r3
 800a108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	2200      	movs	r2, #0
 800a110:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a112:	f7fe ff1f 	bl	8008f54 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	f003 0307 	and.w	r3, r3, #7
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00c      	beq.n	800a13a <pvPortMalloc+0x176>
	__asm volatile
 800a120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a124:	b672      	cpsid	i
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	b662      	cpsie	i
 800a134:	60fb      	str	r3, [r7, #12]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <pvPortMalloc+0x174>
	return pvReturn;
 800a13a:	69fb      	ldr	r3, [r7, #28]
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3728      	adds	r7, #40	; 0x28
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	200092f8 	.word	0x200092f8
 800a148:	20009304 	.word	0x20009304
 800a14c:	200092fc 	.word	0x200092fc
 800a150:	200092f0 	.word	0x200092f0
 800a154:	20009300 	.word	0x20009300

0800a158 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d04c      	beq.n	800a204 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a16a:	2308      	movs	r3, #8
 800a16c:	425b      	negs	r3, r3
 800a16e:	697a      	ldr	r2, [r7, #20]
 800a170:	4413      	add	r3, r2
 800a172:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	4b23      	ldr	r3, [pc, #140]	; (800a20c <vPortFree+0xb4>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4013      	ands	r3, r2
 800a182:	2b00      	cmp	r3, #0
 800a184:	d10c      	bne.n	800a1a0 <vPortFree+0x48>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18a:	b672      	cpsid	i
 800a18c:	f383 8811 	msr	BASEPRI, r3
 800a190:	f3bf 8f6f 	isb	sy
 800a194:	f3bf 8f4f 	dsb	sy
 800a198:	b662      	cpsie	i
 800a19a:	60fb      	str	r3, [r7, #12]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d00c      	beq.n	800a1c2 <vPortFree+0x6a>
	__asm volatile
 800a1a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ac:	b672      	cpsid	i
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	b662      	cpsie	i
 800a1bc:	60bb      	str	r3, [r7, #8]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	4b11      	ldr	r3, [pc, #68]	; (800a20c <vPortFree+0xb4>)
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4013      	ands	r3, r2
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d019      	beq.n	800a204 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d115      	bne.n	800a204 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	685a      	ldr	r2, [r3, #4]
 800a1dc:	4b0b      	ldr	r3, [pc, #44]	; (800a20c <vPortFree+0xb4>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	43db      	mvns	r3, r3
 800a1e2:	401a      	ands	r2, r3
 800a1e4:	693b      	ldr	r3, [r7, #16]
 800a1e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a1e8:	f7fe fea6 	bl	8008f38 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	685a      	ldr	r2, [r3, #4]
 800a1f0:	4b07      	ldr	r3, [pc, #28]	; (800a210 <vPortFree+0xb8>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	4a06      	ldr	r2, [pc, #24]	; (800a210 <vPortFree+0xb8>)
 800a1f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1fa:	6938      	ldr	r0, [r7, #16]
 800a1fc:	f000 f86c 	bl	800a2d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a200:	f7fe fea8 	bl	8008f54 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a204:	bf00      	nop
 800a206:	3718      	adds	r7, #24
 800a208:	46bd      	mov	sp, r7
 800a20a:	bd80      	pop	{r7, pc}
 800a20c:	20009304 	.word	0x20009304
 800a210:	200092fc 	.word	0x200092fc

0800a214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a21a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a21e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a220:	4b27      	ldr	r3, [pc, #156]	; (800a2c0 <prvHeapInit+0xac>)
 800a222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00c      	beq.n	800a248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	3307      	adds	r3, #7
 800a232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0307 	bic.w	r3, r3, #7
 800a23a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	4a1f      	ldr	r2, [pc, #124]	; (800a2c0 <prvHeapInit+0xac>)
 800a244:	4413      	add	r3, r2
 800a246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a24c:	4a1d      	ldr	r2, [pc, #116]	; (800a2c4 <prvHeapInit+0xb0>)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a252:	4b1c      	ldr	r3, [pc, #112]	; (800a2c4 <prvHeapInit+0xb0>)
 800a254:	2200      	movs	r2, #0
 800a256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	4413      	add	r3, r2
 800a25e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a260:	2208      	movs	r2, #8
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	1a9b      	subs	r3, r3, r2
 800a266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f023 0307 	bic.w	r3, r3, #7
 800a26e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <prvHeapInit+0xb4>)
 800a274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a276:	4b14      	ldr	r3, [pc, #80]	; (800a2c8 <prvHeapInit+0xb4>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	2200      	movs	r2, #0
 800a27c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a27e:	4b12      	ldr	r3, [pc, #72]	; (800a2c8 <prvHeapInit+0xb4>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2200      	movs	r2, #0
 800a284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	1ad2      	subs	r2, r2, r3
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a294:	4b0c      	ldr	r3, [pc, #48]	; (800a2c8 <prvHeapInit+0xb4>)
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	4a0a      	ldr	r2, [pc, #40]	; (800a2cc <prvHeapInit+0xb8>)
 800a2a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <prvHeapInit+0xbc>)
 800a2aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2ac:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <prvHeapInit+0xc0>)
 800a2ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	200056f0 	.word	0x200056f0
 800a2c4:	200092f0 	.word	0x200092f0
 800a2c8:	200092f8 	.word	0x200092f8
 800a2cc:	20009300 	.word	0x20009300
 800a2d0:	200092fc 	.word	0x200092fc
 800a2d4:	20009304 	.word	0x20009304

0800a2d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b085      	sub	sp, #20
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a2e0:	4b28      	ldr	r3, [pc, #160]	; (800a384 <prvInsertBlockIntoFreeList+0xac>)
 800a2e2:	60fb      	str	r3, [r7, #12]
 800a2e4:	e002      	b.n	800a2ec <prvInsertBlockIntoFreeList+0x14>
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	60fb      	str	r3, [r7, #12]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d8f7      	bhi.n	800a2e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	4413      	add	r3, r2
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	429a      	cmp	r2, r3
 800a306:	d108      	bne.n	800a31a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	441a      	add	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	68ba      	ldr	r2, [r7, #8]
 800a324:	441a      	add	r2, r3
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d118      	bne.n	800a360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	4b15      	ldr	r3, [pc, #84]	; (800a388 <prvInsertBlockIntoFreeList+0xb0>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d00d      	beq.n	800a356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685a      	ldr	r2, [r3, #4]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	441a      	add	r2, r3
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	601a      	str	r2, [r3, #0]
 800a354:	e008      	b.n	800a368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a356:	4b0c      	ldr	r3, [pc, #48]	; (800a388 <prvInsertBlockIntoFreeList+0xb0>)
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	601a      	str	r2, [r3, #0]
 800a35e:	e003      	b.n	800a368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d002      	beq.n	800a376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a376:	bf00      	nop
 800a378:	3714      	adds	r7, #20
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	200092f0 	.word	0x200092f0
 800a388:	200092f8 	.word	0x200092f8

0800a38c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a396:	f009 fd0d 	bl	8013db4 <sys_timeouts_sleeptime>
 800a39a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a2:	d10b      	bne.n	800a3bc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a3a4:	4813      	ldr	r0, [pc, #76]	; (800a3f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3a6:	f00e fc3a 	bl	8018c1e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	6839      	ldr	r1, [r7, #0]
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f00e fbac 	bl	8018b0c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a3b4:	480f      	ldr	r0, [pc, #60]	; (800a3f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3b6:	f00e fc23 	bl	8018c00 <sys_mutex_lock>
    return;
 800a3ba:	e018      	b.n	800a3ee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d102      	bne.n	800a3c8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a3c2:	f009 fcbd 	bl	8013d40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a3c6:	e7e6      	b.n	800a396 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a3c8:	480a      	ldr	r0, [pc, #40]	; (800a3f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3ca:	f00e fc28 	bl	8018c1e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f00e fb9a 	bl	8018b0c <sys_arch_mbox_fetch>
 800a3d8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a3da:	4806      	ldr	r0, [pc, #24]	; (800a3f4 <tcpip_timeouts_mbox_fetch+0x68>)
 800a3dc:	f00e fc10 	bl	8018c00 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e6:	d102      	bne.n	800a3ee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a3e8:	f009 fcaa 	bl	8013d40 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a3ec:	e7d3      	b.n	800a396 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}
 800a3f4:	20009314 	.word	0x20009314

0800a3f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a400:	4810      	ldr	r0, [pc, #64]	; (800a444 <tcpip_thread+0x4c>)
 800a402:	f00e fbfd 	bl	8018c00 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a406:	4b10      	ldr	r3, [pc, #64]	; (800a448 <tcpip_thread+0x50>)
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d005      	beq.n	800a41a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a40e:	4b0e      	ldr	r3, [pc, #56]	; (800a448 <tcpip_thread+0x50>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a0e      	ldr	r2, [pc, #56]	; (800a44c <tcpip_thread+0x54>)
 800a414:	6812      	ldr	r2, [r2, #0]
 800a416:	4610      	mov	r0, r2
 800a418:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a41a:	f107 030c 	add.w	r3, r7, #12
 800a41e:	4619      	mov	r1, r3
 800a420:	480b      	ldr	r0, [pc, #44]	; (800a450 <tcpip_thread+0x58>)
 800a422:	f7ff ffb3 	bl	800a38c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d106      	bne.n	800a43a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <tcpip_thread+0x5c>)
 800a42e:	2291      	movs	r2, #145	; 0x91
 800a430:	4909      	ldr	r1, [pc, #36]	; (800a458 <tcpip_thread+0x60>)
 800a432:	480a      	ldr	r0, [pc, #40]	; (800a45c <tcpip_thread+0x64>)
 800a434:	f00e fdc2 	bl	8018fbc <iprintf>
      continue;
 800a438:	e003      	b.n	800a442 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	4618      	mov	r0, r3
 800a43e:	f000 f80f 	bl	800a460 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a442:	e7ea      	b.n	800a41a <tcpip_thread+0x22>
 800a444:	20009314 	.word	0x20009314
 800a448:	20009308 	.word	0x20009308
 800a44c:	2000930c 	.word	0x2000930c
 800a450:	20009310 	.word	0x20009310
 800a454:	08019fa0 	.word	0x08019fa0
 800a458:	08019fd0 	.word	0x08019fd0
 800a45c:	08019ff0 	.word	0x08019ff0

0800a460 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	d026      	beq.n	800a4be <tcpip_thread_handle_msg+0x5e>
 800a470:	2b02      	cmp	r3, #2
 800a472:	dc2b      	bgt.n	800a4cc <tcpip_thread_handle_msg+0x6c>
 800a474:	2b00      	cmp	r3, #0
 800a476:	d002      	beq.n	800a47e <tcpip_thread_handle_msg+0x1e>
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d015      	beq.n	800a4a8 <tcpip_thread_handle_msg+0x48>
 800a47c:	e026      	b.n	800a4cc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6850      	ldr	r0, [r2, #4]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6892      	ldr	r2, [r2, #8]
 800a48a:	4611      	mov	r1, r2
 800a48c:	4798      	blx	r3
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d004      	beq.n	800a49e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	4618      	mov	r0, r3
 800a49a:	f003 f845 	bl	800d528 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a49e:	6879      	ldr	r1, [r7, #4]
 800a4a0:	2009      	movs	r0, #9
 800a4a2:	f002 f991 	bl	800c7c8 <memp_free>
      break;
 800a4a6:	e018      	b.n	800a4da <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	6892      	ldr	r2, [r2, #8]
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a4b4:	6879      	ldr	r1, [r7, #4]
 800a4b6:	2008      	movs	r0, #8
 800a4b8:	f002 f986 	bl	800c7c8 <memp_free>
      break;
 800a4bc:	e00d      	b.n	800a4da <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	6892      	ldr	r2, [r2, #8]
 800a4c6:	4610      	mov	r0, r2
 800a4c8:	4798      	blx	r3
      break;
 800a4ca:	e006      	b.n	800a4da <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a4cc:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <tcpip_thread_handle_msg+0x84>)
 800a4ce:	22cf      	movs	r2, #207	; 0xcf
 800a4d0:	4905      	ldr	r1, [pc, #20]	; (800a4e8 <tcpip_thread_handle_msg+0x88>)
 800a4d2:	4806      	ldr	r0, [pc, #24]	; (800a4ec <tcpip_thread_handle_msg+0x8c>)
 800a4d4:	f00e fd72 	bl	8018fbc <iprintf>
      break;
 800a4d8:	bf00      	nop
  }
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	08019fa0 	.word	0x08019fa0
 800a4e8:	08019fd0 	.word	0x08019fd0
 800a4ec:	08019ff0 	.word	0x08019ff0

0800a4f0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	b086      	sub	sp, #24
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a4fc:	481a      	ldr	r0, [pc, #104]	; (800a568 <tcpip_inpkt+0x78>)
 800a4fe:	f00e fb44 	bl	8018b8a <sys_mbox_valid>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	d105      	bne.n	800a514 <tcpip_inpkt+0x24>
 800a508:	4b18      	ldr	r3, [pc, #96]	; (800a56c <tcpip_inpkt+0x7c>)
 800a50a:	22fc      	movs	r2, #252	; 0xfc
 800a50c:	4918      	ldr	r1, [pc, #96]	; (800a570 <tcpip_inpkt+0x80>)
 800a50e:	4819      	ldr	r0, [pc, #100]	; (800a574 <tcpip_inpkt+0x84>)
 800a510:	f00e fd54 	bl	8018fbc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a514:	2009      	movs	r0, #9
 800a516:	f002 f8e1 	bl	800c6dc <memp_malloc>
 800a51a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a522:	f04f 33ff 	mov.w	r3, #4294967295
 800a526:	e01a      	b.n	800a55e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	2200      	movs	r2, #0
 800a52c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	68fa      	ldr	r2, [r7, #12]
 800a532:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a540:	6979      	ldr	r1, [r7, #20]
 800a542:	4809      	ldr	r0, [pc, #36]	; (800a568 <tcpip_inpkt+0x78>)
 800a544:	f00e fac8 	bl	8018ad8 <sys_mbox_trypost>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d006      	beq.n	800a55c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a54e:	6979      	ldr	r1, [r7, #20]
 800a550:	2009      	movs	r0, #9
 800a552:	f002 f939 	bl	800c7c8 <memp_free>
    return ERR_MEM;
 800a556:	f04f 33ff 	mov.w	r3, #4294967295
 800a55a:	e000      	b.n	800a55e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a55c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3718      	adds	r7, #24
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	20009310 	.word	0x20009310
 800a56c:	08019fa0 	.word	0x08019fa0
 800a570:	0801a018 	.word	0x0801a018
 800a574:	08019ff0 	.word	0x08019ff0

0800a578 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
 800a580:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a588:	f003 0318 	and.w	r3, r3, #24
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d006      	beq.n	800a59e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a590:	4a08      	ldr	r2, [pc, #32]	; (800a5b4 <tcpip_input+0x3c>)
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff ffab 	bl	800a4f0 <tcpip_inpkt>
 800a59a:	4603      	mov	r3, r0
 800a59c:	e005      	b.n	800a5aa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a59e:	4a06      	ldr	r2, [pc, #24]	; (800a5b8 <tcpip_input+0x40>)
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff ffa4 	bl	800a4f0 <tcpip_inpkt>
 800a5a8:	4603      	mov	r3, r0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	080188e9 	.word	0x080188e9
 800a5b8:	080177b5 	.word	0x080177b5

0800a5bc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a5c6:	4819      	ldr	r0, [pc, #100]	; (800a62c <tcpip_try_callback+0x70>)
 800a5c8:	f00e fadf 	bl	8018b8a <sys_mbox_valid>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d106      	bne.n	800a5e0 <tcpip_try_callback+0x24>
 800a5d2:	4b17      	ldr	r3, [pc, #92]	; (800a630 <tcpip_try_callback+0x74>)
 800a5d4:	f240 125d 	movw	r2, #349	; 0x15d
 800a5d8:	4916      	ldr	r1, [pc, #88]	; (800a634 <tcpip_try_callback+0x78>)
 800a5da:	4817      	ldr	r0, [pc, #92]	; (800a638 <tcpip_try_callback+0x7c>)
 800a5dc:	f00e fcee 	bl	8018fbc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a5e0:	2008      	movs	r0, #8
 800a5e2:	f002 f87b 	bl	800c6dc <memp_malloc>
 800a5e6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d102      	bne.n	800a5f4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f2:	e017      	b.n	800a624 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2201      	movs	r2, #1
 800a5f8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	687a      	ldr	r2, [r7, #4]
 800a5fe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	4808      	ldr	r0, [pc, #32]	; (800a62c <tcpip_try_callback+0x70>)
 800a60a:	f00e fa65 	bl	8018ad8 <sys_mbox_trypost>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d006      	beq.n	800a622 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a614:	68f9      	ldr	r1, [r7, #12]
 800a616:	2008      	movs	r0, #8
 800a618:	f002 f8d6 	bl	800c7c8 <memp_free>
    return ERR_MEM;
 800a61c:	f04f 33ff 	mov.w	r3, #4294967295
 800a620:	e000      	b.n	800a624 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a622:	2300      	movs	r3, #0
}
 800a624:	4618      	mov	r0, r3
 800a626:	3710      	adds	r7, #16
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	20009310 	.word	0x20009310
 800a630:	08019fa0 	.word	0x08019fa0
 800a634:	0801a018 	.word	0x0801a018
 800a638:	08019ff0 	.word	0x08019ff0

0800a63c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af02      	add	r7, sp, #8
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a646:	f001 fb9f 	bl	800bd88 <lwip_init>

  tcpip_init_done = initfunc;
 800a64a:	4a17      	ldr	r2, [pc, #92]	; (800a6a8 <tcpip_init+0x6c>)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a650:	4a16      	ldr	r2, [pc, #88]	; (800a6ac <tcpip_init+0x70>)
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a656:	2106      	movs	r1, #6
 800a658:	4815      	ldr	r0, [pc, #84]	; (800a6b0 <tcpip_init+0x74>)
 800a65a:	f00e fa1b 	bl	8018a94 <sys_mbox_new>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d006      	beq.n	800a672 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a664:	4b13      	ldr	r3, [pc, #76]	; (800a6b4 <tcpip_init+0x78>)
 800a666:	f240 2261 	movw	r2, #609	; 0x261
 800a66a:	4913      	ldr	r1, [pc, #76]	; (800a6b8 <tcpip_init+0x7c>)
 800a66c:	4813      	ldr	r0, [pc, #76]	; (800a6bc <tcpip_init+0x80>)
 800a66e:	f00e fca5 	bl	8018fbc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a672:	4813      	ldr	r0, [pc, #76]	; (800a6c0 <tcpip_init+0x84>)
 800a674:	f00e faa8 	bl	8018bc8 <sys_mutex_new>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a67e:	4b0d      	ldr	r3, [pc, #52]	; (800a6b4 <tcpip_init+0x78>)
 800a680:	f240 2265 	movw	r2, #613	; 0x265
 800a684:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <tcpip_init+0x88>)
 800a686:	480d      	ldr	r0, [pc, #52]	; (800a6bc <tcpip_init+0x80>)
 800a688:	f00e fc98 	bl	8018fbc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a68c:	2300      	movs	r3, #0
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a694:	2200      	movs	r2, #0
 800a696:	490c      	ldr	r1, [pc, #48]	; (800a6c8 <tcpip_init+0x8c>)
 800a698:	480c      	ldr	r0, [pc, #48]	; (800a6cc <tcpip_init+0x90>)
 800a69a:	f00e facd 	bl	8018c38 <sys_thread_new>
}
 800a69e:	bf00      	nop
 800a6a0:	3708      	adds	r7, #8
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20009308 	.word	0x20009308
 800a6ac:	2000930c 	.word	0x2000930c
 800a6b0:	20009310 	.word	0x20009310
 800a6b4:	08019fa0 	.word	0x08019fa0
 800a6b8:	0801a028 	.word	0x0801a028
 800a6bc:	08019ff0 	.word	0x08019ff0
 800a6c0:	20009314 	.word	0x20009314
 800a6c4:	0801a04c 	.word	0x0801a04c
 800a6c8:	0800a3f9 	.word	0x0800a3f9
 800a6cc:	0801a070 	.word	0x0801a070

0800a6d0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b084      	sub	sp, #16
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d002      	beq.n	800a6e6 <fs_open+0x16>
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d102      	bne.n	800a6ec <fs_open+0x1c>
    return ERR_ARG;
 800a6e6:	f06f 030f 	mvn.w	r3, #15
 800a6ea:	e028      	b.n	800a73e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a6ec:	4b16      	ldr	r3, [pc, #88]	; (800a748 <fs_open+0x78>)
 800a6ee:	60fb      	str	r3, [r7, #12]
 800a6f0:	e020      	b.n	800a734 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	685b      	ldr	r3, [r3, #4]
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	6838      	ldr	r0, [r7, #0]
 800a6fa:	f7f5 fd89 	bl	8000210 <strcmp>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d114      	bne.n	800a72e <fs_open+0x5e>
      file->data = (const char *)f->data;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68da      	ldr	r2, [r3, #12]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	7c1a      	ldrb	r2, [r3, #16]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	e007      	b.n	800a73e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	60fb      	str	r3, [r7, #12]
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d1db      	bne.n	800a6f2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800a73a:	f06f 0305 	mvn.w	r3, #5
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3710      	adds	r7, #16
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	0801f458 	.word	0x0801f458

0800a74c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	1ad3      	subs	r3, r2, r3
}
 800a772:	4618      	mov	r0, r3
 800a774:	370c      	adds	r7, #12
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b082      	sub	sp, #8
 800a782:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 800a784:	20e0      	movs	r0, #224	; 0xe0
 800a786:	f001 fe05 	bl	800c394 <mem_malloc>
 800a78a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d004      	beq.n	800a79c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 800a792:	22e0      	movs	r2, #224	; 0xe0
 800a794:	2100      	movs	r1, #0
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f00e fc75 	bl	8019086 <memset>
  }
  return ret;
 800a79c:	687b      	ldr	r3, [r7, #4]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3708      	adds	r7, #8
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d002      	beq.n	800a7ba <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f001 fc53 	bl	800c060 <mem_free>
  }
}
 800a7ba:	bf00      	nop
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 800a7ca:	22b0      	movs	r2, #176	; 0xb0
 800a7cc:	2100      	movs	r1, #0
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f00e fc59 	bl	8019086 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 800a7d4:	bf00      	nop
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b082      	sub	sp, #8
 800a7e0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 800a7e2:	20b0      	movs	r0, #176	; 0xb0
 800a7e4:	f001 fdd6 	bl	800c394 <mem_malloc>
 800a7e8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <http_state_alloc+0x1a>
    http_state_init(ret);
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f7ff ffe6 	bl	800a7c2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 800a7f6:	687b      	ldr	r3, [r7, #4]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3708      	adds	r7, #8
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}

0800a800 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	695b      	ldr	r3, [r3, #20]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff ff99 	bl	800a74c <fs_close>
    hs->handle = NULL;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a824:	2b00      	cmp	r3, #0
 800a826:	d007      	beq.n	800a838 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7ff ffba 	bl	800a7a6 <http_ssi_state_free>
    hs->ssi = NULL;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d007      	beq.n	800a850 <http_state_eof+0x50>
    pbuf_free(hs->req);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	6a1b      	ldr	r3, [r3, #32]
 800a844:	4618      	mov	r0, r3
 800a846:	f002 fe6f 	bl	800d528 <pbuf_free>
    hs->req = NULL;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 800a850:	bf00      	nop
 800a852:	3708      	adds	r7, #8
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d005      	beq.n	800a872 <http_state_free+0x1a>
    http_state_eof(hs);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7ff ffca 	bl	800a800 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f001 fbf7 	bl	800c060 <mem_free>
  }
}
 800a872:	bf00      	nop
 800a874:	3708      	adds	r7, #8
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
	...

0800a87c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800a87c:	b580      	push	{r7, lr}
 800a87e:	b086      	sub	sp, #24
 800a880:	af00      	add	r7, sp, #0
 800a882:	60f8      	str	r0, [r7, #12]
 800a884:	60b9      	str	r1, [r7, #8]
 800a886:	607a      	str	r2, [r7, #4]
 800a888:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <http_write+0x22>
 800a890:	4b2c      	ldr	r3, [pc, #176]	; (800a944 <http_write+0xc8>)
 800a892:	f240 2219 	movw	r2, #537	; 0x219
 800a896:	492c      	ldr	r1, [pc, #176]	; (800a948 <http_write+0xcc>)
 800a898:	482c      	ldr	r0, [pc, #176]	; (800a94c <http_write+0xd0>)
 800a89a:	f00e fb8f 	bl	8018fbc <iprintf>
  len = *length;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 800a8a4:	8afb      	ldrh	r3, [r7, #22]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d101      	bne.n	800a8ae <http_write+0x32>
    return ERR_OK;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	e045      	b.n	800a93a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8b4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 800a8b6:	8aba      	ldrh	r2, [r7, #20]
 800a8b8:	8afb      	ldrh	r3, [r7, #22]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d201      	bcs.n	800a8c2 <http_write+0x46>
    len = max_len;
 800a8be:	8abb      	ldrh	r3, [r7, #20]
 800a8c0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a8c6:	005b      	lsls	r3, r3, #1
 800a8c8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 800a8ca:	8afa      	ldrh	r2, [r7, #22]
 800a8cc:	8abb      	ldrh	r3, [r7, #20]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	d901      	bls.n	800a8d6 <http_write+0x5a>
    len = max_len;
 800a8d2:	8abb      	ldrh	r3, [r7, #20]
 800a8d4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 800a8d6:	78fb      	ldrb	r3, [r7, #3]
 800a8d8:	8afa      	ldrh	r2, [r7, #22]
 800a8da:	68b9      	ldr	r1, [r7, #8]
 800a8dc:	68f8      	ldr	r0, [r7, #12]
 800a8de:	f007 fbc7 	bl	8012070 <tcp_write>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 800a8e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ee:	d10f      	bne.n	800a910 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d004      	beq.n	800a904 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 800a900:	2b08      	cmp	r3, #8
 800a902:	d902      	bls.n	800a90a <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 800a904:	2301      	movs	r3, #1
 800a906:	82fb      	strh	r3, [r7, #22]
 800a908:	e002      	b.n	800a910 <http_write+0x94>
      } else {
        len /= 2;
 800a90a:	8afb      	ldrh	r3, [r7, #22]
 800a90c:	085b      	lsrs	r3, r3, #1
 800a90e:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 800a910:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a918:	d102      	bne.n	800a920 <http_write+0xa4>
 800a91a:	8afb      	ldrh	r3, [r7, #22]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d8da      	bhi.n	800a8d6 <http_write+0x5a>

  if (err == ERR_OK) {
 800a920:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d103      	bne.n	800a930 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	8afa      	ldrh	r2, [r7, #22]
 800a92c:	801a      	strh	r2, [r3, #0]
 800a92e:	e002      	b.n	800a936 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2200      	movs	r2, #0
 800a934:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 800a936:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	0801a0fc 	.word	0x0801a0fc
 800a948:	0801a134 	.word	0x0801a134
 800a94c:	0801a144 	.word	0x0801a144

0800a950 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800a95e:	2100      	movs	r1, #0
 800a960:	68f8      	ldr	r0, [r7, #12]
 800a962:	f004 fc43 	bl	800f1ec <tcp_arg>
  altcp_recv(pcb, NULL);
 800a966:	2100      	movs	r1, #0
 800a968:	68f8      	ldr	r0, [r7, #12]
 800a96a:	f004 fc51 	bl	800f210 <tcp_recv>
  altcp_err(pcb, NULL);
 800a96e:	2100      	movs	r1, #0
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f004 fc91 	bl	800f298 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 800a976:	2200      	movs	r2, #0
 800a978:	2100      	movs	r1, #0
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f004 fcc6 	bl	800f30c <tcp_poll>
  altcp_sent(pcb, NULL);
 800a980:	2100      	movs	r1, #0
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f004 fc66 	bl	800f254 <tcp_sent>
  if (hs != NULL) {
 800a988:	68bb      	ldr	r3, [r7, #8]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d002      	beq.n	800a994 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800a98e:	68b8      	ldr	r0, [r7, #8]
 800a990:	f7ff ff62 	bl	800a858 <http_state_free>
  }

  if (abort_conn) {
 800a994:	79fb      	ldrb	r3, [r7, #7]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d004      	beq.n	800a9a4 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800a99a:	68f8      	ldr	r0, [r7, #12]
 800a99c:	f003 fb68 	bl	800e070 <tcp_abort>
    return ERR_OK;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	e00f      	b.n	800a9c4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f003 fa79 	bl	800de9c <tcp_close>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800a9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a9b6:	2204      	movs	r2, #4
 800a9b8:	4904      	ldr	r1, [pc, #16]	; (800a9cc <http_close_or_abort_conn+0x7c>)
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f004 fca6 	bl	800f30c <tcp_poll>
  }
  return err;
 800a9c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	0800b953 	.word	0x0800b953

0800a9d0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 800a9da:	2200      	movs	r2, #0
 800a9dc:	6839      	ldr	r1, [r7, #0]
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff ffb6 	bl	800a950 <http_close_or_abort_conn>
 800a9e4:	4603      	mov	r3, r0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3708      	adds	r7, #8
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b082      	sub	sp, #8
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 800a9f8:	6839      	ldr	r1, [r7, #0]
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f7ff ffe8 	bl	800a9d0 <http_close_conn>
  }
}
 800aa00:	bf00      	nop
 800aa02:	3708      	adds	r7, #8
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b086      	sub	sp, #24
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d003      	beq.n	800aa20 <extract_uri_parameters+0x18>
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d101      	bne.n	800aa24 <extract_uri_parameters+0x1c>
    return (0);
 800aa20:	2300      	movs	r3, #0
 800aa22:	e04b      	b.n	800aabc <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aa28:	2300      	movs	r3, #0
 800aa2a:	613b      	str	r3, [r7, #16]
 800aa2c:	e03f      	b.n	800aaae <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	693a      	ldr	r2, [r7, #16]
 800aa32:	320c      	adds	r2, #12
 800aa34:	6979      	ldr	r1, [r7, #20]
 800aa36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800aa3a:	697b      	ldr	r3, [r7, #20]
 800aa3c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800aa3e:	2126      	movs	r1, #38	; 0x26
 800aa40:	6978      	ldr	r0, [r7, #20]
 800aa42:	f00e fb28 	bl	8019096 <strchr>
 800aa46:	6178      	str	r0, [r7, #20]
    if (pair) {
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d006      	beq.n	800aa5c <extract_uri_parameters+0x54>
      *pair = '\0';
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	2200      	movs	r2, #0
 800aa52:	701a      	strb	r2, [r3, #0]
      pair++;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	3301      	adds	r3, #1
 800aa58:	617b      	str	r3, [r7, #20]
 800aa5a:	e00c      	b.n	800aa76 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800aa5c:	2120      	movs	r1, #32
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f00e fb19 	bl	8019096 <strchr>
 800aa64:	6178      	str	r0, [r7, #20]
      if (pair) {
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d002      	beq.n	800aa72 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 800aa72:	2300      	movs	r3, #0
 800aa74:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 800aa76:	213d      	movs	r1, #61	; 0x3d
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f00e fb0c 	bl	8019096 <strchr>
 800aa7e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00a      	beq.n	800aa9c <extract_uri_parameters+0x94>
      *equals = '\0';
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	1c59      	adds	r1, r3, #1
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	321c      	adds	r2, #28
 800aa96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800aa9a:	e005      	b.n	800aaa8 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	693a      	ldr	r2, [r7, #16]
 800aaa0:	321c      	adds	r2, #28
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	2b0f      	cmp	r3, #15
 800aab2:	dc02      	bgt.n	800aaba <extract_uri_parameters+0xb2>
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1b9      	bne.n	800aa2e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 800aaba:	693b      	ldr	r3, [r7, #16]
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3718      	adds	r7, #24
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b086      	sub	sp, #24
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d106      	bne.n	800aae0 <get_tag_insert+0x1c>
 800aad2:	4b45      	ldr	r3, [pc, #276]	; (800abe8 <get_tag_insert+0x124>)
 800aad4:	f44f 7241 	mov.w	r2, #772	; 0x304
 800aad8:	4944      	ldr	r1, [pc, #272]	; (800abec <get_tag_insert+0x128>)
 800aada:	4845      	ldr	r0, [pc, #276]	; (800abf0 <get_tag_insert+0x12c>)
 800aadc:	f00e fa6e 	bl	8018fbc <iprintf>
  ssi = hs->ssi;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800aae6:	697b      	ldr	r3, [r7, #20]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d106      	bne.n	800aafa <get_tag_insert+0x36>
 800aaec:	4b3e      	ldr	r3, [pc, #248]	; (800abe8 <get_tag_insert+0x124>)
 800aaee:	f240 3206 	movw	r2, #774	; 0x306
 800aaf2:	4940      	ldr	r1, [pc, #256]	; (800abf4 <get_tag_insert+0x130>)
 800aaf4:	483e      	ldr	r0, [pc, #248]	; (800abf0 <get_tag_insert+0x12c>)
 800aaf6:	f00e fa61 	bl	8018fbc <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	3312      	adds	r3, #18
 800aafe:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 800ab00:	4b3d      	ldr	r3, [pc, #244]	; (800abf8 <get_tag_insert+0x134>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d011      	beq.n	800ab2c <get_tag_insert+0x68>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 800ab08:	4b3b      	ldr	r3, [pc, #236]	; (800abf8 <get_tag_insert+0x134>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	f102 011b 	add.w	r1, r2, #27
 800ab12:	22c0      	movs	r2, #192	; 0xc0
 800ab14:	6938      	ldr	r0, [r7, #16]
 800ab16:	4798      	blx	r3
 800ab18:	4603      	mov	r3, r0
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	89db      	ldrh	r3, [r3, #14]
 800ab24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d159      	bne.n	800abe0 <get_tag_insert+0x11c>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	3312      	adds	r3, #18
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7f5 fb77 	bl	8000224 <strlen>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2ba6      	cmp	r3, #166	; 0xa6
 800ab3a:	d818      	bhi.n	800ab6e <get_tag_insert+0xaa>
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	3312      	adds	r3, #18
 800ab40:	4618      	mov	r0, r3
 800ab42:	f7f5 fb6f 	bl	8000224 <strlen>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b09      	cmp	r3, #9
 800ab4a:	d810      	bhi.n	800ab6e <get_tag_insert+0xaa>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	3312      	adds	r3, #18
 800ab50:	4618      	mov	r0, r3
 800ab52:	f7f5 fb67 	bl	8000224 <strlen>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2ba6      	cmp	r3, #166	; 0xa6
 800ab5a:	d806      	bhi.n	800ab6a <get_tag_insert+0xa6>
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	3312      	adds	r3, #18
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7f5 fb5f 	bl	8000224 <strlen>
 800ab66:	4603      	mov	r3, r0
 800ab68:	e002      	b.n	800ab70 <get_tag_insert+0xac>
 800ab6a:	23a7      	movs	r3, #167	; 0xa7
 800ab6c:	e000      	b.n	800ab70 <get_tag_insert+0xac>
 800ab6e:	2309      	movs	r3, #9
 800ab70:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	331b      	adds	r3, #27
 800ab76:	2212      	movs	r2, #18
 800ab78:	4920      	ldr	r1, [pc, #128]	; (800abfc <get_tag_insert+0x138>)
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f00e fb1c 	bl	80191b8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	3312      	adds	r3, #18
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	f00e fb13 	bl	80191b8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	3312      	adds	r3, #18
 800ab96:	3318      	adds	r3, #24
 800ab98:	697a      	ldr	r2, [r7, #20]
 800ab9a:	4413      	add	r3, r2
 800ab9c:	3303      	adds	r3, #3
 800ab9e:	2207      	movs	r2, #7
 800aba0:	4917      	ldr	r1, [pc, #92]	; (800ac00 <get_tag_insert+0x13c>)
 800aba2:	4618      	mov	r0, r3
 800aba4:	f00e fb08 	bl	80191b8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	3319      	adds	r3, #25
 800abac:	697a      	ldr	r2, [r7, #20]
 800abae:	4413      	add	r3, r2
 800abb0:	2200      	movs	r2, #0
 800abb2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	331b      	adds	r3, #27
 800abb8:	4618      	mov	r0, r3
 800abba:	f7f5 fb33 	bl	8000224 <strlen>
 800abbe:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abc6:	d306      	bcc.n	800abd6 <get_tag_insert+0x112>
 800abc8:	4b07      	ldr	r3, [pc, #28]	; (800abe8 <get_tag_insert+0x124>)
 800abca:	f240 323f 	movw	r2, #831	; 0x33f
 800abce:	490d      	ldr	r1, [pc, #52]	; (800ac04 <get_tag_insert+0x140>)
 800abd0:	4807      	ldr	r0, [pc, #28]	; (800abf0 <get_tag_insert+0x12c>)
 800abd2:	f00e f9f3 	bl	8018fbc <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	b29a      	uxth	r2, r3
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	81da      	strh	r2, [r3, #14]
 800abde:	e000      	b.n	800abe2 <get_tag_insert+0x11e>
          return;
 800abe0:	bf00      	nop
}
 800abe2:	3718      	adds	r7, #24
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}
 800abe8:	0801a0fc 	.word	0x0801a0fc
 800abec:	0801a16c 	.word	0x0801a16c
 800abf0:	0801a144 	.word	0x0801a144
 800abf4:	0801a178 	.word	0x0801a178
 800abf8:	20009758 	.word	0x20009758
 800abfc:	0801a184 	.word	0x0801a184
 800ac00:	0801a198 	.word	0x0801a198
 800ac04:	0801a1a0 	.word	0x0801a1a0

0800ac08 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	695b      	ldr	r3, [r3, #20]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d105      	bne.n	800ac26 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 800ac1a:	6839      	ldr	r1, [r7, #0]
 800ac1c:	6878      	ldr	r0, [r7, #4]
 800ac1e:	f7ff fee6 	bl	800a9ee <http_eof>
    return 0;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e016      	b.n	800ac54 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	695b      	ldr	r3, [r3, #20]
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7ff fd98 	bl	800a760 <fs_bytes_left>
 800ac30:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	dc05      	bgt.n	800ac44 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800ac38:	6839      	ldr	r1, [r7, #0]
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7ff fed7 	bl	800a9ee <http_eof>
    return 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	e007      	b.n	800ac54 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 800ac44:	4b05      	ldr	r3, [pc, #20]	; (800ac5c <http_check_eof+0x54>)
 800ac46:	f240 429d 	movw	r2, #1181	; 0x49d
 800ac4a:	4905      	ldr	r1, [pc, #20]	; (800ac60 <http_check_eof+0x58>)
 800ac4c:	4805      	ldr	r0, [pc, #20]	; (800ac64 <http_check_eof+0x5c>)
 800ac4e:	f00e f9b5 	bl	8018fbc <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 800ac52:	2301      	movs	r3, #1
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	0801a0fc 	.word	0x0801a0fc
 800ac60:	0801a1b0 	.word	0x0801a1b0
 800ac64:	0801a144 	.word	0x0801a144

0800ac68 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
 800ac70:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d803      	bhi.n	800ac8a <http_send_data_nonssi+0x22>
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	e001      	b.n	800ac8e <http_send_data_nonssi+0x26>
 800ac8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac8e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	6999      	ldr	r1, [r3, #24]
 800ac94:	f107 020c 	add.w	r2, r7, #12
 800ac98:	2300      	movs	r3, #0
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f7ff fdee 	bl	800a87c <http_write>
 800aca0:	4603      	mov	r3, r0
 800aca2:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 800aca4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d10d      	bne.n	800acc8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 800acac:	2301      	movs	r3, #1
 800acae:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	89ba      	ldrh	r2, [r7, #12]
 800acb6:	441a      	add	r2, r3
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc0:	89ba      	ldrh	r2, [r7, #12]
 800acc2:	1a9a      	subs	r2, r3, r2
 800acc4:	683b      	ldr	r3, [r7, #0]
 800acc6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 800acc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3710      	adds	r7, #16
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b086      	sub	sp, #24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 800acde:	2300      	movs	r3, #0
 800ace0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acea:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d106      	bne.n	800ad00 <http_send_data_ssi+0x2c>
 800acf2:	4b87      	ldr	r3, [pc, #540]	; (800af10 <http_send_data_ssi+0x23c>)
 800acf4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800acf8:	4986      	ldr	r1, [pc, #536]	; (800af14 <http_send_data_ssi+0x240>)
 800acfa:	4887      	ldr	r0, [pc, #540]	; (800af18 <http_send_data_ssi+0x244>)
 800acfc:	f00e f95e 	bl	8018fbc <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad06:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	681a      	ldr	r2, [r3, #0]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	f240 826f 	bls.w	800b1f4 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	683b      	ldr	r3, [r7, #0]
 800ad1c:	699b      	ldr	r3, [r3, #24]
 800ad1e:	1ad3      	subs	r3, r2, r3
 800ad20:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ad24:	4293      	cmp	r3, r2
 800ad26:	dc06      	bgt.n	800ad36 <http_send_data_ssi+0x62>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	699b      	ldr	r3, [r3, #24]
 800ad30:	1ad3      	subs	r3, r2, r3
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	e001      	b.n	800ad3a <http_send_data_ssi+0x66>
 800ad36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad3a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	6999      	ldr	r1, [r3, #24]
 800ad40:	f107 020e 	add.w	r2, r7, #14
 800ad44:	2300      	movs	r3, #0
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff fd98 	bl	800a87c <http_write>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800ad50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d10d      	bne.n	800ad74 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	89fa      	ldrh	r2, [r7, #14]
 800ad62:	441a      	add	r2, r3
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad6c:	89fa      	ldrh	r2, [r7, #14]
 800ad6e:	1a9a      	subs	r2, r3, r2
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f040 823a 	bne.w	800b1f4 <http_send_data_ssi+0x520>
      return data_to_send;
 800ad80:	7dbb      	ldrb	r3, [r7, #22]
 800ad82:	e280      	b.n	800b286 <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 800ad84:	89fb      	ldrh	r3, [r7, #14]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d101      	bne.n	800ad8e <http_send_data_ssi+0xba>
      return data_to_send;
 800ad8a:	7dbb      	ldrb	r3, [r7, #22]
 800ad8c:	e27b      	b.n	800b286 <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 800ad8e:	693b      	ldr	r3, [r7, #16]
 800ad90:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800ad94:	2b04      	cmp	r3, #4
 800ad96:	f200 822c 	bhi.w	800b1f2 <http_send_data_ssi+0x51e>
 800ad9a:	a201      	add	r2, pc, #4	; (adr r2, 800ada0 <http_send_data_ssi+0xcc>)
 800ad9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ada0:	0800adb5 	.word	0x0800adb5
 800ada4:	0800ae07 	.word	0x0800ae07
 800ada8:	0800ae79 	.word	0x0800ae79
 800adac:	0800afc1 	.word	0x0800afc1
 800adb0:	0800b109 	.word	0x0800b109
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800adb4:	2300      	movs	r3, #0
 800adb6:	757b      	strb	r3, [r7, #21]
 800adb8:	e017      	b.n	800adea <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	781a      	ldrb	r2, [r3, #0]
 800adc0:	7d7b      	ldrb	r3, [r7, #21]
 800adc2:	4956      	ldr	r1, [pc, #344]	; (800af1c <http_send_data_ssi+0x248>)
 800adc4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d10a      	bne.n	800ade4 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	7d7a      	ldrb	r2, [r7, #21]
 800add2:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	2201      	movs	r2, #1
 800add8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 800addc:	693b      	ldr	r3, [r7, #16]
 800adde:	2201      	movs	r2, #1
 800ade0:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 800ade2:	e005      	b.n	800adf0 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 800ade4:	7d7b      	ldrb	r3, [r7, #21]
 800ade6:	3301      	adds	r3, #1
 800ade8:	757b      	strb	r3, [r7, #21]
 800adea:	7d7b      	ldrb	r3, [r7, #21]
 800adec:	2b01      	cmp	r3, #1
 800adee:	d9e4      	bls.n	800adba <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	1e5a      	subs	r2, r3, #1
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	1c5a      	adds	r2, r3, #1
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	601a      	str	r2, [r3, #0]
        break;
 800ae04:	e1f6      	b.n	800b1f4 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	7c1b      	ldrb	r3, [r3, #16]
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	4b43      	ldr	r3, [pc, #268]	; (800af1c <http_send_data_ssi+0x248>)
 800ae0e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	8992      	ldrh	r2, [r2, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d107      	bne.n	800ae2e <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2200      	movs	r2, #0
 800ae22:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	2202      	movs	r2, #2
 800ae28:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800ae2c:	e1e2      	b.n	800b1f4 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	781a      	ldrb	r2, [r3, #0]
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	7c1b      	ldrb	r3, [r3, #16]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	4b38      	ldr	r3, [pc, #224]	; (800af1c <http_send_data_ssi+0x248>)
 800ae3c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 800ae40:	6939      	ldr	r1, [r7, #16]
 800ae42:	8989      	ldrh	r1, [r1, #12]
 800ae44:	440b      	add	r3, r1
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d106      	bne.n	800ae5a <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	899b      	ldrh	r3, [r3, #12]
 800ae50:	3301      	adds	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	819a      	strh	r2, [r3, #12]
 800ae58:	e003      	b.n	800ae62 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	2200      	movs	r2, #0
 800ae5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	1e5a      	subs	r2, r3, #1
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	1c5a      	adds	r2, r3, #1
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	601a      	str	r2, [r3, #0]
        }
        break;
 800ae76:	e1bd      	b.n	800b1f4 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800ae78:	693b      	ldr	r3, [r7, #16]
 800ae7a:	899b      	ldrh	r3, [r3, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d11e      	bne.n	800aebe <http_send_data_ssi+0x1ea>
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	2b20      	cmp	r3, #32
 800ae88:	d00e      	beq.n	800aea8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ae8a:	693b      	ldr	r3, [r7, #16]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800ae90:	2b09      	cmp	r3, #9
 800ae92:	d009      	beq.n	800aea8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	2b0a      	cmp	r3, #10
 800ae9c:	d004      	beq.n	800aea8 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800aea4:	2b0d      	cmp	r3, #13
 800aea6:	d10a      	bne.n	800aebe <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	689b      	ldr	r3, [r3, #8]
 800aeac:	1e5a      	subs	r2, r3, #1
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	1c5a      	adds	r2, r3, #1
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	601a      	str	r2, [r3, #0]
          break;
 800aebc:	e19a      	b.n	800b1f4 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	781a      	ldrb	r2, [r3, #0]
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	7c1b      	ldrb	r3, [r3, #16]
 800aec8:	4914      	ldr	r1, [pc, #80]	; (800af1c <http_send_data_ssi+0x248>)
 800aeca:	00db      	lsls	r3, r3, #3
 800aecc:	440b      	add	r3, r1
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	429a      	cmp	r2, r3
 800aed4:	d013      	beq.n	800aefe <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 800aedc:	2b20      	cmp	r3, #32
 800aede:	d00e      	beq.n	800aefe <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800aee0:	693b      	ldr	r3, [r7, #16]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b09      	cmp	r3, #9
 800aee8:	d009      	beq.n	800aefe <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800aeea:	693b      	ldr	r3, [r7, #16]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 800aef0:	2b0a      	cmp	r3, #10
 800aef2:	d004      	beq.n	800aefe <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 800aef4:	693b      	ldr	r3, [r7, #16]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b0d      	cmp	r3, #13
 800aefc:	d13f      	bne.n	800af7e <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	899b      	ldrh	r3, [r3, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d10c      	bne.n	800af20 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 800af0e:	e04c      	b.n	800afaa <http_send_data_ssi+0x2d6>
 800af10:	0801a0fc 	.word	0x0801a0fc
 800af14:	0801a178 	.word	0x0801a178
 800af18:	0801a144 	.word	0x0801a144
 800af1c:	0801f494 	.word	0x0801f494
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	2203      	movs	r2, #3
 800af24:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	899b      	ldrh	r3, [r3, #12]
 800af2c:	2bff      	cmp	r3, #255	; 0xff
 800af2e:	d906      	bls.n	800af3e <http_send_data_ssi+0x26a>
 800af30:	4b93      	ldr	r3, [pc, #588]	; (800b180 <http_send_data_ssi+0x4ac>)
 800af32:	f240 523a 	movw	r2, #1338	; 0x53a
 800af36:	4993      	ldr	r1, [pc, #588]	; (800b184 <http_send_data_ssi+0x4b0>)
 800af38:	4893      	ldr	r0, [pc, #588]	; (800b188 <http_send_data_ssi+0x4b4>)
 800af3a:	f00e f83f 	bl	8018fbc <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 800af3e:	693b      	ldr	r3, [r7, #16]
 800af40:	899b      	ldrh	r3, [r3, #12]
 800af42:	b2da      	uxtb	r2, r3
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	899b      	ldrh	r3, [r3, #12]
 800af4c:	461a      	mov	r2, r3
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	4413      	add	r3, r2
 800af52:	2200      	movs	r2, #0
 800af54:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	781a      	ldrb	r2, [r3, #0]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	7c1b      	ldrb	r3, [r3, #16]
 800af60:	498a      	ldr	r1, [pc, #552]	; (800b18c <http_send_data_ssi+0x4b8>)
 800af62:	00db      	lsls	r3, r3, #3
 800af64:	440b      	add	r3, r1
 800af66:	685b      	ldr	r3, [r3, #4]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d103      	bne.n	800af76 <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	2201      	movs	r2, #1
 800af72:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800af74:	e019      	b.n	800afaa <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	2200      	movs	r2, #0
 800af7a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 800af7c:	e015      	b.n	800afaa <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	899b      	ldrh	r3, [r3, #12]
 800af82:	2b07      	cmp	r3, #7
 800af84:	d80d      	bhi.n	800afa2 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	899b      	ldrh	r3, [r3, #12]
 800af8e:	1c59      	adds	r1, r3, #1
 800af90:	b288      	uxth	r0, r1
 800af92:	6939      	ldr	r1, [r7, #16]
 800af94:	8188      	strh	r0, [r1, #12]
 800af96:	4619      	mov	r1, r3
 800af98:	7812      	ldrb	r2, [r2, #0]
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	440b      	add	r3, r1
 800af9e:	749a      	strb	r2, [r3, #18]
 800afa0:	e003      	b.n	800afaa <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	2200      	movs	r2, #0
 800afa6:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	1e5a      	subs	r2, r3, #1
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	1c5a      	adds	r2, r3, #1
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	601a      	str	r2, [r3, #0]

        break;
 800afbe:	e119      	b.n	800b1f4 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	899b      	ldrh	r3, [r3, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d11e      	bne.n	800b006 <http_send_data_ssi+0x332>
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	2b20      	cmp	r3, #32
 800afd0:	d00e      	beq.n	800aff0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800afd2:	693b      	ldr	r3, [r7, #16]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 800afd8:	2b09      	cmp	r3, #9
 800afda:	d009      	beq.n	800aff0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	781b      	ldrb	r3, [r3, #0]
 800afe2:	2b0a      	cmp	r3, #10
 800afe4:	d004      	beq.n	800aff0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 800afec:	2b0d      	cmp	r3, #13
 800afee:	d10a      	bne.n	800b006 <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	1e5a      	subs	r2, r3, #1
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	1c5a      	adds	r2, r3, #1
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	601a      	str	r2, [r3, #0]
          break;
 800b004:	e0f6      	b.n	800b1f4 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	7c1b      	ldrb	r3, [r3, #16]
 800b010:	495e      	ldr	r1, [pc, #376]	; (800b18c <http_send_data_ssi+0x4b8>)
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	440b      	add	r3, r1
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	6939      	ldr	r1, [r7, #16]
 800b01a:	8989      	ldrh	r1, [r1, #12]
 800b01c:	440b      	add	r3, r1
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	429a      	cmp	r2, r3
 800b022:	d162      	bne.n	800b0ea <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	1e5a      	subs	r2, r3, #1
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	1c5a      	adds	r2, r3, #1
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	899b      	ldrh	r3, [r3, #12]
 800b03c:	3301      	adds	r3, #1
 800b03e:	b29a      	uxth	r2, r3
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	7c1b      	ldrb	r3, [r3, #16]
 800b048:	4a50      	ldr	r2, [pc, #320]	; (800b18c <http_send_data_ssi+0x4b8>)
 800b04a:	00db      	lsls	r3, r3, #3
 800b04c:	4413      	add	r3, r2
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	8992      	ldrh	r2, [r2, #12]
 800b054:	4413      	add	r3, r2
 800b056:	781b      	ldrb	r3, [r3, #0]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	f040 80cb 	bne.w	800b1f4 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 800b05e:	6838      	ldr	r0, [r7, #0]
 800b060:	f7ff fd30 	bl	800aac4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	2200      	movs	r2, #0
 800b068:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	2204      	movs	r2, #4
 800b06e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	693b      	ldr	r3, [r7, #16]
 800b078:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	429a      	cmp	r2, r3
 800b084:	f240 80b6 	bls.w	800b1f4 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	685a      	ldr	r2, [r3, #4]
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	699b      	ldr	r3, [r3, #24]
 800b090:	1ad3      	subs	r3, r2, r3
 800b092:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b096:	4293      	cmp	r3, r2
 800b098:	dc06      	bgt.n	800b0a8 <http_send_data_ssi+0x3d4>
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	685a      	ldr	r2, [r3, #4]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	699b      	ldr	r3, [r3, #24]
 800b0a2:	1ad3      	subs	r3, r2, r3
 800b0a4:	b29b      	uxth	r3, r3
 800b0a6:	e001      	b.n	800b0ac <http_send_data_ssi+0x3d8>
 800b0a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b0ac:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6999      	ldr	r1, [r3, #24]
 800b0b2:	f107 020e 	add.w	r2, r7, #14
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7ff fbdf 	bl	800a87c <http_write>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 800b0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	f040 8094 	bne.w	800b1f4 <http_send_data_ssi+0x520>
                data_to_send = 1;
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	699b      	ldr	r3, [r3, #24]
 800b0d4:	89fa      	ldrh	r2, [r7, #14]
 800b0d6:	441a      	add	r2, r3
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e0:	89fa      	ldrh	r2, [r7, #14]
 800b0e2:	1a9a      	subs	r2, r3, r2
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	625a      	str	r2, [r3, #36]	; 0x24
 800b0e8:	e084      	b.n	800b1f4 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	689b      	ldr	r3, [r3, #8]
 800b0ee:	1e5a      	subs	r2, r3, #1
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	1c5a      	adds	r2, r3, #1
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 800b106:	e075      	b.n	800b1f4 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	699b      	ldr	r3, [r3, #24]
 800b110:	429a      	cmp	r2, r3
 800b112:	d93d      	bls.n	800b190 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	685a      	ldr	r2, [r3, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	699b      	ldr	r3, [r3, #24]
 800b11c:	1ad3      	subs	r3, r2, r3
 800b11e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b122:	4293      	cmp	r3, r2
 800b124:	dc06      	bgt.n	800b134 <http_send_data_ssi+0x460>
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	685a      	ldr	r2, [r3, #4]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	699b      	ldr	r3, [r3, #24]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	b29b      	uxth	r3, r3
 800b132:	e001      	b.n	800b138 <http_send_data_ssi+0x464>
 800b134:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b138:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 800b13a:	89fb      	ldrh	r3, [r7, #14]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00a      	beq.n	800b156 <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	6999      	ldr	r1, [r3, #24]
 800b144:	f107 020e 	add.w	r2, r7, #14
 800b148:	2300      	movs	r3, #0
 800b14a:	6878      	ldr	r0, [r7, #4]
 800b14c:	f7ff fb96 	bl	800a87c <http_write>
 800b150:	4603      	mov	r3, r0
 800b152:	75fb      	strb	r3, [r7, #23]
 800b154:	e001      	b.n	800b15a <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 800b15a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d148      	bne.n	800b1f4 <http_send_data_ssi+0x520>
            data_to_send = 1;
 800b162:	2301      	movs	r3, #1
 800b164:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	89fa      	ldrh	r2, [r7, #14]
 800b16c:	441a      	add	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	89fa      	ldrh	r2, [r7, #14]
 800b178:	1a9a      	subs	r2, r3, r2
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	625a      	str	r2, [r3, #36]	; 0x24
 800b17e:	e039      	b.n	800b1f4 <http_send_data_ssi+0x520>
 800b180:	0801a0fc 	.word	0x0801a0fc
 800b184:	0801a1e8 	.word	0x0801a1e8
 800b188:	0801a144 	.word	0x0801a144
 800b18c:	0801f494 	.word	0x0801f494
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	899a      	ldrh	r2, [r3, #12]
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	89db      	ldrh	r3, [r3, #14]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d222      	bcs.n	800b1e2 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	89da      	ldrh	r2, [r3, #14]
 800b1a0:	693b      	ldr	r3, [r7, #16]
 800b1a2:	899b      	ldrh	r3, [r3, #12]
 800b1a4:	1ad3      	subs	r3, r2, r3
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	899b      	ldrh	r3, [r3, #12]
 800b1ae:	3318      	adds	r3, #24
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	1cd9      	adds	r1, r3, #3
 800b1b6:	f107 020e 	add.w	r2, r7, #14
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f7ff fb5d 	bl	800a87c <http_write>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 800b1c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d112      	bne.n	800b1f4 <http_send_data_ssi+0x520>
              data_to_send = 1;
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 800b1d2:	693b      	ldr	r3, [r7, #16]
 800b1d4:	899a      	ldrh	r2, [r3, #12]
 800b1d6:	89fb      	ldrh	r3, [r7, #14]
 800b1d8:	4413      	add	r3, r2
 800b1da:	b29a      	uxth	r2, r3
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	819a      	strh	r2, [r3, #12]
 800b1e0:	e008      	b.n	800b1f4 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 800b1e8:	693b      	ldr	r3, [r7, #16]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 800b1f0:	e000      	b.n	800b1f4 <http_send_data_ssi+0x520>
        default:
          break;
 800b1f2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b1fa:	2b04      	cmp	r3, #4
 800b1fc:	d003      	beq.n	800b206 <http_send_data_ssi+0x532>
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d004      	beq.n	800b210 <http_send_data_ssi+0x53c>
 800b206:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	f43f adba 	beq.w	800ad84 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800b216:	2b04      	cmp	r3, #4
 800b218:	d034      	beq.n	800b284 <http_send_data_ssi+0x5b0>
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	699b      	ldr	r3, [r3, #24]
 800b222:	429a      	cmp	r2, r3
 800b224:	d92e      	bls.n	800b284 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	699b      	ldr	r3, [r3, #24]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b234:	4293      	cmp	r3, r2
 800b236:	dc06      	bgt.n	800b246 <http_send_data_ssi+0x572>
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	b29b      	uxth	r3, r3
 800b244:	e001      	b.n	800b24a <http_send_data_ssi+0x576>
 800b246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b24a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	6999      	ldr	r1, [r3, #24]
 800b250:	f107 020e 	add.w	r2, r7, #14
 800b254:	2300      	movs	r3, #0
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f7ff fb10 	bl	800a87c <http_write>
 800b25c:	4603      	mov	r3, r0
 800b25e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800b260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10d      	bne.n	800b284 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 800b268:	2301      	movs	r3, #1
 800b26a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	699b      	ldr	r3, [r3, #24]
 800b270:	89fa      	ldrh	r2, [r7, #14]
 800b272:	441a      	add	r2, r3
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27c:	89fa      	ldrh	r2, [r7, #14]
 800b27e:	1a9a      	subs	r2, r3, r2
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800b284:	7dbb      	ldrb	r3, [r7, #22]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop

0800b290 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b084      	sub	sp, #16
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800b29a:	2300      	movs	r3, #0
 800b29c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <http_send+0x18>
    return 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e030      	b.n	800b30a <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d108      	bne.n	800b2c2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800b2b0:	6839      	ldr	r1, [r7, #0]
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f7ff fca8 	bl	800ac08 <http_check_eof>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <http_send+0x32>
      return 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	e023      	b.n	800b30a <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d006      	beq.n	800b2d8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800b2ca:	6839      	ldr	r1, [r7, #0]
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f7ff fd01 	bl	800acd4 <http_send_data_ssi>
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	73fb      	strb	r3, [r7, #15]
 800b2d6:	e005      	b.n	800b2e4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800b2d8:	6839      	ldr	r1, [r7, #0]
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff fcc4 	bl	800ac68 <http_send_data_nonssi>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10d      	bne.n	800b308 <http_send+0x78>
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	695b      	ldr	r3, [r3, #20]
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7ff fa35 	bl	800a760 <fs_bytes_left>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dc05      	bgt.n	800b308 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800b2fc:	6839      	ldr	r1, [r7, #0]
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff fb75 	bl	800a9ee <http_eof>
    return 0;
 800b304:	2300      	movs	r3, #0
 800b306:	e000      	b.n	800b30a <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800b308:	7bfb      	ldrb	r3, [r7, #15]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
	...

0800b314 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	4a1c      	ldr	r2, [pc, #112]	; (800b394 <http_get_404_file+0x80>)
 800b322:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800b324:	687a      	ldr	r2, [r7, #4]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7ff f9cf 	bl	800a6d0 <fs_open>
 800b332:	4603      	mov	r3, r0
 800b334:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d024      	beq.n	800b388 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	4a15      	ldr	r2, [pc, #84]	; (800b398 <http_get_404_file+0x84>)
 800b342:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800b344:	687a      	ldr	r2, [r7, #4]
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f7ff f9bf 	bl	800a6d0 <fs_open>
 800b352:	4603      	mov	r3, r0
 800b354:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800b356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d014      	beq.n	800b388 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800b35e:	683b      	ldr	r3, [r7, #0]
 800b360:	4a0e      	ldr	r2, [pc, #56]	; (800b39c <http_get_404_file+0x88>)
 800b362:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800b364:	687a      	ldr	r2, [r7, #4]
 800b366:	683b      	ldr	r3, [r7, #0]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4619      	mov	r1, r3
 800b36c:	4610      	mov	r0, r2
 800b36e:	f7ff f9af 	bl	800a6d0 <fs_open>
 800b372:	4603      	mov	r3, r0
 800b374:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800b376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d004      	beq.n	800b388 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	2200      	movs	r2, #0
 800b382:	601a      	str	r2, [r3, #0]
        return NULL;
 800b384:	2300      	movs	r3, #0
 800b386:	e000      	b.n	800b38a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800b388:	687b      	ldr	r3, [r7, #4]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3710      	adds	r7, #16
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	0801a200 	.word	0x0801a200
 800b398:	0801a20c 	.word	0x0801a20c
 800b39c:	0801a218 	.word	0x0801a218

0800b3a0 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08e      	sub	sp, #56	; 0x38
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <http_parse_request+0x24>
 800b3b6:	4b65      	ldr	r3, [pc, #404]	; (800b54c <http_parse_request+0x1ac>)
 800b3b8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800b3bc:	4964      	ldr	r1, [pc, #400]	; (800b550 <http_parse_request+0x1b0>)
 800b3be:	4865      	ldr	r0, [pc, #404]	; (800b554 <http_parse_request+0x1b4>)
 800b3c0:	f00d fdfc 	bl	8018fbc <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d106      	bne.n	800b3d8 <http_parse_request+0x38>
 800b3ca:	4b60      	ldr	r3, [pc, #384]	; (800b54c <http_parse_request+0x1ac>)
 800b3cc:	f240 72af 	movw	r2, #1967	; 0x7af
 800b3d0:	4961      	ldr	r1, [pc, #388]	; (800b558 <http_parse_request+0x1b8>)
 800b3d2:	4860      	ldr	r0, [pc, #384]	; (800b554 <http_parse_request+0x1b4>)
 800b3d4:	f00d fdf2 	bl	8018fbc <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d103      	bne.n	800b3e8 <http_parse_request+0x48>
 800b3e0:	68bb      	ldr	r3, [r7, #8]
 800b3e2:	699b      	ldr	r3, [r3, #24]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d002      	beq.n	800b3ee <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800b3e8:	f06f 0307 	mvn.w	r3, #7
 800b3ec:	e0a9      	b.n	800b542 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d103      	bne.n	800b3fe <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	621a      	str	r2, [r3, #32]
 800b3fc:	e005      	b.n	800b40a <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	6a1b      	ldr	r3, [r3, #32]
 800b402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b404:	4618      	mov	r0, r3
 800b406:	f002 f95d 	bl	800d6c4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800b40a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b40c:	f002 f932 	bl	800d674 <pbuf_ref>

  if (hs->req->next != NULL) {
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d012      	beq.n	800b440 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	891b      	ldrh	r3, [r3, #8]
 800b420:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800b424:	4293      	cmp	r3, r2
 800b426:	bf28      	it	cs
 800b428:	4613      	movcs	r3, r2
 800b42a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	6a18      	ldr	r0, [r3, #32]
 800b430:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b432:	2300      	movs	r3, #0
 800b434:	4949      	ldr	r1, [pc, #292]	; (800b55c <http_parse_request+0x1bc>)
 800b436:	f002 fa7d 	bl	800d934 <pbuf_copy_partial>
    data = httpd_req_buf;
 800b43a:	4b48      	ldr	r3, [pc, #288]	; (800b55c <http_parse_request+0x1bc>)
 800b43c:	637b      	str	r3, [r7, #52]	; 0x34
 800b43e:	e005      	b.n	800b44c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	895b      	ldrh	r3, [r3, #10]
 800b44a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800b44c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b44e:	2b06      	cmp	r3, #6
 800b450:	d962      	bls.n	800b518 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800b452:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b454:	461a      	mov	r2, r3
 800b456:	4942      	ldr	r1, [pc, #264]	; (800b560 <http_parse_request+0x1c0>)
 800b458:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b45a:	f000 fc5f 	bl	800bd1c <lwip_strnstr>
 800b45e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d058      	beq.n	800b518 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800b46a:	2204      	movs	r2, #4
 800b46c:	493d      	ldr	r1, [pc, #244]	; (800b564 <http_parse_request+0x1c4>)
 800b46e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b470:	f00d fe1e 	bl	80190b0 <strncmp>
 800b474:	4603      	mov	r3, r0
 800b476:	2b00      	cmp	r3, #0
 800b478:	d116      	bne.n	800b4a8 <http_parse_request+0x108>
        sp1 = data + 3;
 800b47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b47c:	3303      	adds	r3, #3
 800b47e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800b480:	69fb      	ldr	r3, [r7, #28]
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	b29b      	uxth	r3, r3
 800b48a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b48c:	1ad3      	subs	r3, r2, r3
 800b48e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	3301      	adds	r3, #1
 800b494:	8b7a      	ldrh	r2, [r7, #26]
 800b496:	4934      	ldr	r1, [pc, #208]	; (800b568 <http_parse_request+0x1c8>)
 800b498:	4618      	mov	r0, r3
 800b49a:	f000 fc3f 	bl	800bd1c <lwip_strnstr>
 800b49e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d111      	bne.n	800b4ca <http_parse_request+0x12a>
 800b4a6:	e006      	b.n	800b4b6 <http_parse_request+0x116>
        data[4] = 0;
 800b4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800b4b0:	f06f 030f 	mvn.w	r3, #15
 800b4b4:	e045      	b.n	800b542 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800b4b6:	69fb      	ldr	r3, [r7, #28]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	8b7a      	ldrh	r2, [r7, #26]
 800b4bc:	4928      	ldr	r1, [pc, #160]	; (800b560 <http_parse_request+0x1c0>)
 800b4be:	4618      	mov	r0, r3
 800b4c0:	f000 fc2c 	bl	800bd1c <lwip_strnstr>
 800b4c4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d01e      	beq.n	800b518 <http_parse_request+0x178>
 800b4da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d91a      	bls.n	800b518 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800b4e2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b4e4:	461a      	mov	r2, r3
 800b4e6:	4921      	ldr	r1, [pc, #132]	; (800b56c <http_parse_request+0x1cc>)
 800b4e8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b4ea:	f000 fc17 	bl	800bd1c <lwip_strnstr>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d011      	beq.n	800b518 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800b500:	8b3b      	ldrh	r3, [r7, #24]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	4413      	add	r3, r2
 800b506:	2200      	movs	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800b50a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b50c:	6979      	ldr	r1, [r7, #20]
 800b50e:	68b8      	ldr	r0, [r7, #8]
 800b510:	f000 f82e 	bl	800b570 <http_find_file>
 800b514:	4603      	mov	r3, r0
 800b516:	e014      	b.n	800b542 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	6a1b      	ldr	r3, [r3, #32]
 800b51c:	4618      	mov	r0, r3
 800b51e:	f002 f891 	bl	800d644 <pbuf_clen>
 800b522:	4603      	mov	r3, r0
 800b524:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	6a1b      	ldr	r3, [r3, #32]
 800b52a:	891b      	ldrh	r3, [r3, #8]
 800b52c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b530:	d205      	bcs.n	800b53e <http_parse_request+0x19e>
 800b532:	8a7b      	ldrh	r3, [r7, #18]
 800b534:	2b05      	cmp	r3, #5
 800b536:	d802      	bhi.n	800b53e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800b538:	f06f 0304 	mvn.w	r3, #4
 800b53c:	e001      	b.n	800b542 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800b53e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800b542:	4618      	mov	r0, r3
 800b544:	3738      	adds	r7, #56	; 0x38
 800b546:	46bd      	mov	sp, r7
 800b548:	bd80      	pop	{r7, pc}
 800b54a:	bf00      	nop
 800b54c:	0801a0fc 	.word	0x0801a0fc
 800b550:	0801a224 	.word	0x0801a224
 800b554:	0801a144 	.word	0x0801a144
 800b558:	0801a16c 	.word	0x0801a16c
 800b55c:	20009318 	.word	0x20009318
 800b560:	0801a230 	.word	0x0801a230
 800b564:	0801a234 	.word	0x0801a234
 800b568:	0801a23c 	.word	0x0801a23c
 800b56c:	0801a240 	.word	0x0801a240

0800b570 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800b570:	b590      	push	{r4, r7, lr}
 800b572:	b093      	sub	sp, #76	; 0x4c
 800b574:	af02      	add	r7, sp, #8
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800b57c:	2300      	movs	r3, #0
 800b57e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800b580:	2300      	movs	r3, #0
 800b582:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800b584:	2300      	movs	r3, #0
 800b586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	4618      	mov	r0, r3
 800b58e:	f7f4 fe49 	bl	8000224 <strlen>
 800b592:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b596:	2b00      	cmp	r3, #0
 800b598:	d072      	beq.n	800b680 <http_find_file+0x110>
 800b59a:	68ba      	ldr	r2, [r7, #8]
 800b59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b59e:	3b01      	subs	r3, #1
 800b5a0:	4413      	add	r3, r2
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	2b2f      	cmp	r3, #47	; 0x2f
 800b5a6:	d16b      	bne.n	800b680 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b5a8:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800b5aa:	4a7b      	ldr	r2, [pc, #492]	; (800b798 <http_find_file+0x228>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d102      	bne.n	800b5b6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800b5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d164      	bne.n	800b680 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	2b3f      	cmp	r3, #63	; 0x3f
 800b5bc:	bf28      	it	cs
 800b5be:	233f      	movcs	r3, #63	; 0x3f
 800b5c0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800b5c2:	6a3b      	ldr	r3, [r7, #32]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d00a      	beq.n	800b5de <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	6a3a      	ldr	r2, [r7, #32]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	4872      	ldr	r0, [pc, #456]	; (800b798 <http_find_file+0x228>)
 800b5d0:	f00d fdf2 	bl	80191b8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800b5d4:	4a70      	ldr	r2, [pc, #448]	; (800b798 <http_find_file+0x228>)
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	4413      	add	r3, r2
 800b5da:	2200      	movs	r2, #0
 800b5dc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b5de:	2300      	movs	r3, #0
 800b5e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5e2:	e04a      	b.n	800b67a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d028      	beq.n	800b63c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800b5ea:	6a3b      	ldr	r3, [r7, #32]
 800b5ec:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800b5f0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d01e      	beq.n	800b636 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800b5f8:	4a68      	ldr	r2, [pc, #416]	; (800b79c <http_find_file+0x22c>)
 800b5fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b600:	4618      	mov	r0, r3
 800b602:	f7f4 fe0f 	bl	8000224 <strlen>
 800b606:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800b608:	69ba      	ldr	r2, [r7, #24]
 800b60a:	69fb      	ldr	r3, [r7, #28]
 800b60c:	4293      	cmp	r3, r2
 800b60e:	bf28      	it	cs
 800b610:	4613      	movcs	r3, r2
 800b612:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	4a60      	ldr	r2, [pc, #384]	; (800b798 <http_find_file+0x228>)
 800b618:	1898      	adds	r0, r3, r2
 800b61a:	4a60      	ldr	r2, [pc, #384]	; (800b79c <http_find_file+0x22c>)
 800b61c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b61e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b622:	697a      	ldr	r2, [r7, #20]
 800b624:	4619      	mov	r1, r3
 800b626:	f00d fdc7 	bl	80191b8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800b62a:	6a3a      	ldr	r2, [r7, #32]
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	4413      	add	r3, r2
 800b630:	4a59      	ldr	r2, [pc, #356]	; (800b798 <http_find_file+0x228>)
 800b632:	2100      	movs	r1, #0
 800b634:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800b636:	4b58      	ldr	r3, [pc, #352]	; (800b798 <http_find_file+0x228>)
 800b638:	62bb      	str	r3, [r7, #40]	; 0x28
 800b63a:	e004      	b.n	800b646 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800b63c:	4a57      	ldr	r2, [pc, #348]	; (800b79c <http_find_file+0x22c>)
 800b63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b640:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b644:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b64a:	4618      	mov	r0, r3
 800b64c:	f7ff f840 	bl	800a6d0 <fs_open>
 800b650:	4603      	mov	r3, r0
 800b652:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800b654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <http_find_file+0x104>
        uri = file_name;
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800b664:	4a4d      	ldr	r2, [pc, #308]	; (800b79c <http_find_file+0x22c>)
 800b666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b668:	00db      	lsls	r3, r3, #3
 800b66a:	4413      	add	r3, r2
 800b66c:	791b      	ldrb	r3, [r3, #4]
 800b66e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800b672:	e005      	b.n	800b680 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800b674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b676:	3301      	adds	r3, #1
 800b678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67c:	2b04      	cmp	r3, #4
 800b67e:	d9b1      	bls.n	800b5e4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800b680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b682:	2b00      	cmp	r3, #0
 800b684:	d16d      	bne.n	800b762 <http_find_file+0x1f2>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	213f      	movs	r1, #63	; 0x3f
 800b68a:	4618      	mov	r0, r3
 800b68c:	f00d fd03 	bl	8019096 <strchr>
 800b690:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b694:	2b00      	cmp	r3, #0
 800b696:	d005      	beq.n	800b6a4 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800b698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69a:	2200      	movs	r2, #0
 800b69c:	701a      	strb	r2, [r3, #0]
      params++;
 800b69e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800b6a4:	4b3e      	ldr	r3, [pc, #248]	; (800b7a0 <http_find_file+0x230>)
 800b6a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b6aa:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800b6ac:	4b3d      	ldr	r3, [pc, #244]	; (800b7a4 <http_find_file+0x234>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d034      	beq.n	800b71e <http_find_file+0x1ae>
 800b6b4:	4b3c      	ldr	r3, [pc, #240]	; (800b7a8 <http_find_file+0x238>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d030      	beq.n	800b71e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b6bc:	2300      	movs	r3, #0
 800b6be:	633b      	str	r3, [r7, #48]	; 0x30
 800b6c0:	e028      	b.n	800b714 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800b6c2:	68b8      	ldr	r0, [r7, #8]
 800b6c4:	4b38      	ldr	r3, [pc, #224]	; (800b7a8 <http_find_file+0x238>)
 800b6c6:	681a      	ldr	r2, [r3, #0]
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	00db      	lsls	r3, r3, #3
 800b6cc:	4413      	add	r3, r2
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	f7f4 fd9d 	bl	8000210 <strcmp>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d118      	bne.n	800b70e <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800b6dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6de:	68f8      	ldr	r0, [r7, #12]
 800b6e0:	f7ff f992 	bl	800aa08 <extract_uri_parameters>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	4a2e      	ldr	r2, [pc, #184]	; (800b7a0 <http_find_file+0x230>)
 800b6e8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b6ea:	4b2f      	ldr	r3, [pc, #188]	; (800b7a8 <http_find_file+0x238>)
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f0:	00db      	lsls	r3, r3, #3
 800b6f2:	4413      	add	r3, r2
 800b6f4:	685c      	ldr	r4, [r3, #4]
 800b6f6:	4b2a      	ldr	r3, [pc, #168]	; (800b7a0 <http_find_file+0x230>)
 800b6f8:	6819      	ldr	r1, [r3, #0]
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800b704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b706:	47a0      	blx	r4
 800b708:	4603      	mov	r3, r0
 800b70a:	60bb      	str	r3, [r7, #8]
          break;
 800b70c:	e007      	b.n	800b71e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800b70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b710:	3301      	adds	r3, #1
 800b712:	633b      	str	r3, [r7, #48]	; 0x30
 800b714:	4b23      	ldr	r3, [pc, #140]	; (800b7a4 <http_find_file+0x234>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b71a:	429a      	cmp	r2, r3
 800b71c:	dbd1      	blt.n	800b6c2 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	4611      	mov	r1, r2
 800b724:	4618      	mov	r0, r3
 800b726:	f7fe ffd3 	bl	800a6d0 <fs_open>
 800b72a:	4603      	mov	r3, r0
 800b72c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800b72e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d102      	bne.n	800b73c <http_find_file+0x1cc>
      file = &hs->file_handle;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	63bb      	str	r3, [r7, #56]	; 0x38
 800b73a:	e006      	b.n	800b74a <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800b73c:	f107 0308 	add.w	r3, r7, #8
 800b740:	4619      	mov	r1, r3
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f7ff fde6 	bl	800b314 <http_get_404_file>
 800b748:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800b74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d008      	beq.n	800b762 <http_find_file+0x1f2>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800b750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b752:	7c1b      	ldrb	r3, [r3, #16]
 800b754:	f003 0308 	and.w	r3, r3, #8
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d002      	beq.n	800b762 <http_find_file+0x1f2>
        tag_check = 1;
 800b75c:	2301      	movs	r3, #1
 800b75e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800b762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b764:	2b00      	cmp	r3, #0
 800b766:	d106      	bne.n	800b776 <http_find_file+0x206>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800b768:	f107 0308 	add.w	r3, r7, #8
 800b76c:	4619      	mov	r1, r3
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f7ff fdd0 	bl	800b314 <http_get_404_file>
 800b774:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b77a:	9301      	str	r3, [sp, #4]
 800b77c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	4613      	mov	r3, r2
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 f80f 	bl	800b7ac <http_init_file>
 800b78e:	4603      	mov	r3, r0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3744      	adds	r7, #68	; 0x44
 800b794:	46bd      	mov	sp, r7
 800b796:	bd90      	pop	{r4, r7, pc}
 800b798:	20009718 	.word	0x20009718
 800b79c:	0801f46c 	.word	0x0801f46c
 800b7a0:	20009764 	.word	0x20009764
 800b7a4:	20009760 	.word	0x20009760
 800b7a8:	2000975c 	.word	0x2000975c

0800b7ac <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b088      	sub	sp, #32
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	60f8      	str	r0, [r7, #12]
 800b7b4:	60b9      	str	r1, [r7, #8]
 800b7b6:	607a      	str	r2, [r7, #4]
 800b7b8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d07d      	beq.n	800b8bc <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d106      	bne.n	800b7d6 <http_init_file+0x2a>
 800b7c8:	4b45      	ldr	r3, [pc, #276]	; (800b8e0 <http_init_file+0x134>)
 800b7ca:	f640 120b 	movw	r2, #2315	; 0x90b
 800b7ce:	4945      	ldr	r1, [pc, #276]	; (800b8e4 <http_init_file+0x138>)
 800b7d0:	4845      	ldr	r0, [pc, #276]	; (800b8e8 <http_init_file+0x13c>)
 800b7d2:	f00d fbf3 	bl	8018fbc <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800b7d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d01c      	beq.n	800b818 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800b7de:	f7fe ffce 	bl	800a77e <http_ssi_state_alloc>
 800b7e2:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d016      	beq.n	800b818 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800b7f0:	69fb      	ldr	r3, [r7, #28]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	69fb      	ldr	r3, [r7, #28]
 800b7fe:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	461a      	mov	r2, r3
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800b80a:	68bb      	ldr	r3, [r7, #8]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	69fa      	ldr	r2, [r7, #28]
 800b816:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	68ba      	ldr	r2, [r7, #8]
 800b81c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800b81e:	68bb      	ldr	r3, [r7, #8]
 800b820:	681a      	ldr	r2, [r3, #0]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	da06      	bge.n	800b83c <http_init_file+0x90>
 800b82e:	4b2c      	ldr	r3, [pc, #176]	; (800b8e0 <http_init_file+0x134>)
 800b830:	f640 1234 	movw	r2, #2356	; 0x934
 800b834:	492d      	ldr	r1, [pc, #180]	; (800b8ec <http_init_file+0x140>)
 800b836:	482c      	ldr	r0, [pc, #176]	; (800b8e8 <http_init_file+0x13c>)
 800b838:	f00d fbc0 	bl	8018fbc <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	461a      	mov	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	7c1b      	ldrb	r3, [r3, #16]
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d106      	bne.n	800b86a <http_init_file+0xbe>
 800b85c:	4b20      	ldr	r3, [pc, #128]	; (800b8e0 <http_init_file+0x134>)
 800b85e:	f640 1243 	movw	r2, #2371	; 0x943
 800b862:	4923      	ldr	r1, [pc, #140]	; (800b8f0 <http_init_file+0x144>)
 800b864:	4820      	ldr	r0, [pc, #128]	; (800b8e8 <http_init_file+0x13c>)
 800b866:	f00d fba9 	bl	8018fbc <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d032      	beq.n	800b8d6 <http_init_file+0x12a>
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	695b      	ldr	r3, [r3, #20]
 800b874:	7c1b      	ldrb	r3, [r3, #16]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d02b      	beq.n	800b8d6 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	6998      	ldr	r0, [r3, #24]
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	461a      	mov	r2, r3
 800b888:	491a      	ldr	r1, [pc, #104]	; (800b8f4 <http_init_file+0x148>)
 800b88a:	f000 fa47 	bl	800bd1c <lwip_strnstr>
 800b88e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800b890:	69bb      	ldr	r3, [r7, #24]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01f      	beq.n	800b8d6 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 800b896:	69bb      	ldr	r3, [r7, #24]
 800b898:	1d1a      	adds	r2, r3, #4
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	699a      	ldr	r2, [r3, #24]
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	441a      	add	r2, r3
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	1ad2      	subs	r2, r2, r3
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	625a      	str	r2, [r3, #36]	; 0x24
 800b8ba:	e00c      	b.n	800b8d6 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3720      	adds	r7, #32
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	0801a0fc 	.word	0x0801a0fc
 800b8e4:	0801a248 	.word	0x0801a248
 800b8e8:	0801a144 	.word	0x0801a144
 800b8ec:	0801a25c 	.word	0x0801a25c
 800b8f0:	0801a27c 	.word	0x0801a27c
 800b8f4:	0801a240 	.word	0x0801a240

0800b8f8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
 800b900:	460b      	mov	r3, r1
 800b902:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d002      	beq.n	800b914 <http_err+0x1c>
    http_state_free(hs);
 800b90e:	68f8      	ldr	r0, [r7, #12]
 800b910:	f7fe ffa2 	bl	800a858 <http_state_free>
  }
}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4613      	mov	r3, r2
 800b928:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d101      	bne.n	800b938 <http_sent+0x1c>
    return ERR_OK;
 800b934:	2300      	movs	r3, #0
 800b936:	e008      	b.n	800b94a <http_sent+0x2e>
  }

  hs->retries = 0;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800b940:	6979      	ldr	r1, [r7, #20]
 800b942:	68b8      	ldr	r0, [r7, #8]
 800b944:	f7ff fca4 	bl	800b290 <http_send>

  return ERR_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	6078      	str	r0, [r7, #4]
 800b95a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d107      	bne.n	800b976 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800b966:	2100      	movs	r1, #0
 800b968:	6838      	ldr	r0, [r7, #0]
 800b96a:	f7ff f831 	bl	800a9d0 <http_close_conn>
 800b96e:	4603      	mov	r3, r0
 800b970:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800b972:	2300      	movs	r3, #0
 800b974:	e021      	b.n	800b9ba <http_poll+0x68>
  } else {
    hs->retries++;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b97c:	3301      	adds	r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b98c:	2b04      	cmp	r3, #4
 800b98e:	d105      	bne.n	800b99c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800b990:	68f9      	ldr	r1, [r7, #12]
 800b992:	6838      	ldr	r0, [r7, #0]
 800b994:	f7ff f81c 	bl	800a9d0 <http_close_conn>
      return ERR_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	e00e      	b.n	800b9ba <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d009      	beq.n	800b9b8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800b9a4:	68f9      	ldr	r1, [r7, #12]
 800b9a6:	6838      	ldr	r0, [r7, #0]
 800b9a8:	f7ff fc72 	bl	800b290 <http_send>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d002      	beq.n	800b9b8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800b9b2:	6838      	ldr	r0, [r7, #0]
 800b9b4:	f007 f946 	bl	8012c44 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
	...

0800b9c4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b086      	sub	sp, #24
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
 800b9d0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800b9d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d105      	bne.n	800b9ea <http_recv+0x26>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d002      	beq.n	800b9ea <http_recv+0x26>
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d111      	bne.n	800ba0e <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	891b      	ldrh	r3, [r3, #8]
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	68b8      	ldr	r0, [r7, #8]
 800b9f8:	f002 fd14 	bl	800e424 <tcp_recved>
      pbuf_free(p);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f001 fd93 	bl	800d528 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800ba02:	6979      	ldr	r1, [r7, #20]
 800ba04:	68b8      	ldr	r0, [r7, #8]
 800ba06:	f7fe ffe3 	bl	800a9d0 <http_close_conn>
    return ERR_OK;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e055      	b.n	800baba <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	891b      	ldrh	r3, [r3, #8]
 800ba12:	4619      	mov	r1, r3
 800ba14:	68b8      	ldr	r0, [r7, #8]
 800ba16:	f002 fd05 	bl	800e424 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d147      	bne.n	800bab2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	6979      	ldr	r1, [r7, #20]
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f7ff fcba 	bl	800b3a0 <http_parse_request>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800ba30:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d015      	beq.n	800ba64 <http_recv+0xa0>
 800ba38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba3c:	f113 0f05 	cmn.w	r3, #5
 800ba40:	d010      	beq.n	800ba64 <http_recv+0xa0>
 800ba42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba46:	f113 0f10 	cmn.w	r3, #16
 800ba4a:	d00b      	beq.n	800ba64 <http_recv+0xa0>
 800ba4c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba50:	f113 0f08 	cmn.w	r3, #8
 800ba54:	d006      	beq.n	800ba64 <http_recv+0xa0>
 800ba56:	4b1b      	ldr	r3, [pc, #108]	; (800bac4 <http_recv+0x100>)
 800ba58:	f640 2204 	movw	r2, #2564	; 0xa04
 800ba5c:	491a      	ldr	r1, [pc, #104]	; (800bac8 <http_recv+0x104>)
 800ba5e:	481b      	ldr	r0, [pc, #108]	; (800bacc <http_recv+0x108>)
 800ba60:	f00d faac 	bl	8018fbc <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800ba64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba68:	f113 0f05 	cmn.w	r3, #5
 800ba6c:	d00b      	beq.n	800ba86 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d007      	beq.n	800ba86 <http_recv+0xc2>
          pbuf_free(hs->req);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f001 fd54 	bl	800d528 <pbuf_free>
          hs->req = NULL;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2200      	movs	r2, #0
 800ba84:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f001 fd4e 	bl	800d528 <pbuf_free>
      if (parsed == ERR_OK) {
 800ba8c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d104      	bne.n	800ba9e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800ba94:	6979      	ldr	r1, [r7, #20]
 800ba96:	68b8      	ldr	r0, [r7, #8]
 800ba98:	f7ff fbfa 	bl	800b290 <http_send>
 800ba9c:	e00c      	b.n	800bab8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800ba9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800baa2:	f113 0f10 	cmn.w	r3, #16
 800baa6:	d107      	bne.n	800bab8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800baa8:	6979      	ldr	r1, [r7, #20]
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	f7fe ff90 	bl	800a9d0 <http_close_conn>
 800bab0:	e002      	b.n	800bab8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f001 fd38 	bl	800d528 <pbuf_free>
    }
  }
  return ERR_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3718      	adds	r7, #24
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	0801a0fc 	.word	0x0801a0fc
 800bac8:	0801a2a8 	.word	0x0801a2a8
 800bacc:	0801a144 	.word	0x0801a144

0800bad0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b086      	sub	sp, #24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	60f8      	str	r0, [r7, #12]
 800bad8:	60b9      	str	r1, [r7, #8]
 800bada:	4613      	mov	r3, r2
 800badc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800bade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <http_accept+0x1c>
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d102      	bne.n	800baf2 <http_accept+0x22>
    return ERR_VAL;
 800baec:	f06f 0305 	mvn.w	r3, #5
 800baf0:	e025      	b.n	800bb3e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800baf2:	2101      	movs	r1, #1
 800baf4:	68b8      	ldr	r0, [r7, #8]
 800baf6:	f003 f979 	bl	800edec <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800bafa:	f7fe fe6f 	bl	800a7dc <http_state_alloc>
 800bafe:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d102      	bne.n	800bb0c <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800bb06:	f04f 33ff 	mov.w	r3, #4294967295
 800bb0a:	e018      	b.n	800bb3e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800bb12:	6979      	ldr	r1, [r7, #20]
 800bb14:	68b8      	ldr	r0, [r7, #8]
 800bb16:	f003 fb69 	bl	800f1ec <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800bb1a:	490b      	ldr	r1, [pc, #44]	; (800bb48 <http_accept+0x78>)
 800bb1c:	68b8      	ldr	r0, [r7, #8]
 800bb1e:	f003 fb77 	bl	800f210 <tcp_recv>
  altcp_err(pcb, http_err);
 800bb22:	490a      	ldr	r1, [pc, #40]	; (800bb4c <http_accept+0x7c>)
 800bb24:	68b8      	ldr	r0, [r7, #8]
 800bb26:	f003 fbb7 	bl	800f298 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	4908      	ldr	r1, [pc, #32]	; (800bb50 <http_accept+0x80>)
 800bb2e:	68b8      	ldr	r0, [r7, #8]
 800bb30:	f003 fbec 	bl	800f30c <tcp_poll>
  altcp_sent(pcb, http_sent);
 800bb34:	4907      	ldr	r1, [pc, #28]	; (800bb54 <http_accept+0x84>)
 800bb36:	68b8      	ldr	r0, [r7, #8]
 800bb38:	f003 fb8c 	bl	800f254 <tcp_sent>

  return ERR_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	0800b9c5 	.word	0x0800b9c5
 800bb4c:	0800b8f9 	.word	0x0800b8f9
 800bb50:	0800b953 	.word	0x0800b953
 800bb54:	0800b91d 	.word	0x0800b91d

0800bb58 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b084      	sub	sp, #16
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
 800bb60:	460b      	mov	r3, r1
 800bb62:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d029      	beq.n	800bbbe <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800bb6a:	2101      	movs	r1, #1
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f003 f93d 	bl	800edec <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800bb72:	887b      	ldrh	r3, [r7, #2]
 800bb74:	461a      	mov	r2, r3
 800bb76:	4914      	ldr	r1, [pc, #80]	; (800bbc8 <httpd_init_pcb+0x70>)
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f002 fa85 	bl	800e088 <tcp_bind>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800bb82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d006      	beq.n	800bb98 <httpd_init_pcb+0x40>
 800bb8a:	4b10      	ldr	r3, [pc, #64]	; (800bbcc <httpd_init_pcb+0x74>)
 800bb8c:	f640 2257 	movw	r2, #2647	; 0xa57
 800bb90:	490f      	ldr	r1, [pc, #60]	; (800bbd0 <httpd_init_pcb+0x78>)
 800bb92:	4810      	ldr	r0, [pc, #64]	; (800bbd4 <httpd_init_pcb+0x7c>)
 800bb94:	f00d fa12 	bl	8018fbc <iprintf>
    pcb = altcp_listen(pcb);
 800bb98:	21ff      	movs	r1, #255	; 0xff
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f002 fb2c 	bl	800e1f8 <tcp_listen_with_backlog>
 800bba0:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d106      	bne.n	800bbb6 <httpd_init_pcb+0x5e>
 800bba8:	4b08      	ldr	r3, [pc, #32]	; (800bbcc <httpd_init_pcb+0x74>)
 800bbaa:	f640 2259 	movw	r2, #2649	; 0xa59
 800bbae:	490a      	ldr	r1, [pc, #40]	; (800bbd8 <httpd_init_pcb+0x80>)
 800bbb0:	4808      	ldr	r0, [pc, #32]	; (800bbd4 <httpd_init_pcb+0x7c>)
 800bbb2:	f00d fa03 	bl	8018fbc <iprintf>
    altcp_accept(pcb, http_accept);
 800bbb6:	4909      	ldr	r1, [pc, #36]	; (800bbdc <httpd_init_pcb+0x84>)
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f003 fb8f 	bl	800f2dc <tcp_accept>
  }
}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	0801f5c4 	.word	0x0801f5c4
 800bbcc:	0801a0fc 	.word	0x0801a0fc
 800bbd0:	0801a2d4 	.word	0x0801a2d4
 800bbd4:	0801a144 	.word	0x0801a144
 800bbd8:	0801a2f0 	.word	0x0801a2f0
 800bbdc:	0800bad1 	.word	0x0800bad1

0800bbe0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800bbe6:	202e      	movs	r0, #46	; 0x2e
 800bbe8:	f003 faf2 	bl	800f1d0 <tcp_new_ip_type>
 800bbec:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d106      	bne.n	800bc02 <httpd_init+0x22>
 800bbf4:	4b07      	ldr	r3, [pc, #28]	; (800bc14 <httpd_init+0x34>)
 800bbf6:	f640 2272 	movw	r2, #2674	; 0xa72
 800bbfa:	4907      	ldr	r1, [pc, #28]	; (800bc18 <httpd_init+0x38>)
 800bbfc:	4807      	ldr	r0, [pc, #28]	; (800bc1c <httpd_init+0x3c>)
 800bbfe:	f00d f9dd 	bl	8018fbc <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800bc02:	2150      	movs	r1, #80	; 0x50
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f7ff ffa7 	bl	800bb58 <httpd_init_pcb>
}
 800bc0a:	bf00      	nop
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	0801a0fc 	.word	0x0801a0fc
 800bc18:	0801a310 	.word	0x0801a310
 800bc1c:	0801a144 	.word	0x0801a144

0800bc20 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	60f8      	str	r0, [r7, #12]
 800bc28:	60b9      	str	r1, [r7, #8]
 800bc2a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <http_set_ssi_handler+0x20>
 800bc32:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <http_set_ssi_handler+0x30>)
 800bc34:	f640 2297 	movw	r2, #2711	; 0xa97
 800bc38:	4906      	ldr	r1, [pc, #24]	; (800bc54 <http_set_ssi_handler+0x34>)
 800bc3a:	4807      	ldr	r0, [pc, #28]	; (800bc58 <http_set_ssi_handler+0x38>)
 800bc3c:	f00d f9be 	bl	8018fbc <iprintf>
  httpd_ssi_handler = ssi_handler;
 800bc40:	4a06      	ldr	r2, [pc, #24]	; (800bc5c <http_set_ssi_handler+0x3c>)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  httpd_tags = tags;
  httpd_num_tags = num_tags;
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800bc46:	bf00      	nop
 800bc48:	3710      	adds	r7, #16
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	0801a0fc 	.word	0x0801a0fc
 800bc54:	0801a32c 	.word	0x0801a32c
 800bc58:	0801a144 	.word	0x0801a144
 800bc5c:	20009758 	.word	0x20009758

0800bc60 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d106      	bne.n	800bc7e <http_set_cgi_handlers+0x1e>
 800bc70:	4b0d      	ldr	r3, [pc, #52]	; (800bca8 <http_set_cgi_handlers+0x48>)
 800bc72:	f640 22b2 	movw	r2, #2738	; 0xab2
 800bc76:	490d      	ldr	r1, [pc, #52]	; (800bcac <http_set_cgi_handlers+0x4c>)
 800bc78:	480d      	ldr	r0, [pc, #52]	; (800bcb0 <http_set_cgi_handlers+0x50>)
 800bc7a:	f00d f99f 	bl	8018fbc <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	dc06      	bgt.n	800bc92 <http_set_cgi_handlers+0x32>
 800bc84:	4b08      	ldr	r3, [pc, #32]	; (800bca8 <http_set_cgi_handlers+0x48>)
 800bc86:	f640 22b3 	movw	r2, #2739	; 0xab3
 800bc8a:	490a      	ldr	r1, [pc, #40]	; (800bcb4 <http_set_cgi_handlers+0x54>)
 800bc8c:	4808      	ldr	r0, [pc, #32]	; (800bcb0 <http_set_cgi_handlers+0x50>)
 800bc8e:	f00d f995 	bl	8018fbc <iprintf>

  httpd_cgis = cgis;
 800bc92:	4a09      	ldr	r2, [pc, #36]	; (800bcb8 <http_set_cgi_handlers+0x58>)
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800bc98:	4a08      	ldr	r2, [pc, #32]	; (800bcbc <http_set_cgi_handlers+0x5c>)
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	6013      	str	r3, [r2, #0]
}
 800bc9e:	bf00      	nop
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	0801a0fc 	.word	0x0801a0fc
 800bcac:	0801a344 	.word	0x0801a344
 800bcb0:	0801a144 	.word	0x0801a144
 800bcb4:	0801a354 	.word	0x0801a354
 800bcb8:	2000975c 	.word	0x2000975c
 800bcbc:	20009760 	.word	0x20009760

0800bcc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800bcca:	88fb      	ldrh	r3, [r7, #6]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	b21a      	sxth	r2, r3
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	0a1b      	lsrs	r3, r3, #8
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	b21b      	sxth	r3, r3
 800bcd8:	4313      	orrs	r3, r2
 800bcda:	b21b      	sxth	r3, r3
 800bcdc:	b29b      	uxth	r3, r3
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	370c      	adds	r7, #12
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr

0800bcea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bcea:	b480      	push	{r7}
 800bcec:	b083      	sub	sp, #12
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	061a      	lsls	r2, r3, #24
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	021b      	lsls	r3, r3, #8
 800bcfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcfe:	431a      	orrs	r2, r3
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	0a1b      	lsrs	r3, r3, #8
 800bd04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd08:	431a      	orrs	r2, r3
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	0e1b      	lsrs	r3, r3, #24
 800bd0e:	4313      	orrs	r3, r2
}
 800bd10:	4618      	mov	r0, r3
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1a:	4770      	bx	lr

0800bd1c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800bd1c:	b580      	push	{r7, lr}
 800bd1e:	b086      	sub	sp, #24
 800bd20:	af00      	add	r7, sp, #0
 800bd22:	60f8      	str	r0, [r7, #12]
 800bd24:	60b9      	str	r1, [r7, #8]
 800bd26:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800bd28:	68b8      	ldr	r0, [r7, #8]
 800bd2a:	f7f4 fa7b 	bl	8000224 <strlen>
 800bd2e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d101      	bne.n	800bd3a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	e022      	b.n	800bd80 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	617b      	str	r3, [r7, #20]
 800bd3e:	e012      	b.n	800bd66 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	781a      	ldrb	r2, [r3, #0]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	429a      	cmp	r2, r3
 800bd4a:	d109      	bne.n	800bd60 <lwip_strnstr+0x44>
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	6978      	ldr	r0, [r7, #20]
 800bd52:	f00d f9ad 	bl	80190b0 <strncmp>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d101      	bne.n	800bd60 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	e00f      	b.n	800bd80 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	3301      	adds	r3, #1
 800bd64:	617b      	str	r3, [r7, #20]
 800bd66:	697b      	ldr	r3, [r7, #20]
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d007      	beq.n	800bd7e <lwip_strnstr+0x62>
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	441a      	add	r2, r3
 800bd74:	68f9      	ldr	r1, [r7, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	440b      	add	r3, r1
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d9e0      	bls.n	800bd40 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800bd92:	f00c ff0b 	bl	8018bac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800bd96:	f000 f8d5 	bl	800bf44 <mem_init>
  memp_init();
 800bd9a:	f000 fc31 	bl	800c600 <memp_init>
  pbuf_init();
  netif_init();
 800bd9e:	f000 fd3d 	bl	800c81c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bda2:	f008 f83f 	bl	8013e24 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bda6:	f001 fe69 	bl	800da7c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bdaa:	f007 ff81 	bl	8013cb0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bdae:	bf00      	nop
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
	...

0800bdb8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	b083      	sub	sp, #12
 800bdbc:	af00      	add	r7, sp, #0
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bdc2:	4b05      	ldr	r3, [pc, #20]	; (800bdd8 <ptr_to_mem+0x20>)
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	88fb      	ldrh	r3, [r7, #6]
 800bdc8:	4413      	add	r3, r2
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	370c      	adds	r7, #12
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	20009dd4 	.word	0x20009dd4

0800bddc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b083      	sub	sp, #12
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bde4:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <mem_to_ptr+0x20>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	b29b      	uxth	r3, r3
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	370c      	adds	r7, #12
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop
 800bdfc:	20009dd4 	.word	0x20009dd4

0800be00 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800be00:	b590      	push	{r4, r7, lr}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800be08:	4b45      	ldr	r3, [pc, #276]	; (800bf20 <plug_holes+0x120>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d206      	bcs.n	800be20 <plug_holes+0x20>
 800be12:	4b44      	ldr	r3, [pc, #272]	; (800bf24 <plug_holes+0x124>)
 800be14:	f240 12df 	movw	r2, #479	; 0x1df
 800be18:	4943      	ldr	r1, [pc, #268]	; (800bf28 <plug_holes+0x128>)
 800be1a:	4844      	ldr	r0, [pc, #272]	; (800bf2c <plug_holes+0x12c>)
 800be1c:	f00d f8ce 	bl	8018fbc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800be20:	4b43      	ldr	r3, [pc, #268]	; (800bf30 <plug_holes+0x130>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	429a      	cmp	r2, r3
 800be28:	d306      	bcc.n	800be38 <plug_holes+0x38>
 800be2a:	4b3e      	ldr	r3, [pc, #248]	; (800bf24 <plug_holes+0x124>)
 800be2c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800be30:	4940      	ldr	r1, [pc, #256]	; (800bf34 <plug_holes+0x134>)
 800be32:	483e      	ldr	r0, [pc, #248]	; (800bf2c <plug_holes+0x12c>)
 800be34:	f00d f8c2 	bl	8018fbc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	791b      	ldrb	r3, [r3, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d006      	beq.n	800be4e <plug_holes+0x4e>
 800be40:	4b38      	ldr	r3, [pc, #224]	; (800bf24 <plug_holes+0x124>)
 800be42:	f240 12e1 	movw	r2, #481	; 0x1e1
 800be46:	493c      	ldr	r1, [pc, #240]	; (800bf38 <plug_holes+0x138>)
 800be48:	4838      	ldr	r0, [pc, #224]	; (800bf2c <plug_holes+0x12c>)
 800be4a:	f00d f8b7 	bl	8018fbc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	881b      	ldrh	r3, [r3, #0]
 800be52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800be56:	d906      	bls.n	800be66 <plug_holes+0x66>
 800be58:	4b32      	ldr	r3, [pc, #200]	; (800bf24 <plug_holes+0x124>)
 800be5a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800be5e:	4937      	ldr	r1, [pc, #220]	; (800bf3c <plug_holes+0x13c>)
 800be60:	4832      	ldr	r0, [pc, #200]	; (800bf2c <plug_holes+0x12c>)
 800be62:	f00d f8ab 	bl	8018fbc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7ff ffa4 	bl	800bdb8 <ptr_to_mem>
 800be70:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800be72:	687a      	ldr	r2, [r7, #4]
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	429a      	cmp	r2, r3
 800be78:	d024      	beq.n	800bec4 <plug_holes+0xc4>
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	791b      	ldrb	r3, [r3, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d120      	bne.n	800bec4 <plug_holes+0xc4>
 800be82:	4b2b      	ldr	r3, [pc, #172]	; (800bf30 <plug_holes+0x130>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	429a      	cmp	r2, r3
 800be8a:	d01b      	beq.n	800bec4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800be8c:	4b2c      	ldr	r3, [pc, #176]	; (800bf40 <plug_holes+0x140>)
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	429a      	cmp	r2, r3
 800be94:	d102      	bne.n	800be9c <plug_holes+0x9c>
      lfree = mem;
 800be96:	4a2a      	ldr	r2, [pc, #168]	; (800bf40 <plug_holes+0x140>)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	881a      	ldrh	r2, [r3, #0]
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800beac:	d00a      	beq.n	800bec4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	881b      	ldrh	r3, [r3, #0]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff ff80 	bl	800bdb8 <ptr_to_mem>
 800beb8:	4604      	mov	r4, r0
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f7ff ff8e 	bl	800bddc <mem_to_ptr>
 800bec0:	4603      	mov	r3, r0
 800bec2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	885b      	ldrh	r3, [r3, #2]
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff ff75 	bl	800bdb8 <ptr_to_mem>
 800bece:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d01f      	beq.n	800bf18 <plug_holes+0x118>
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	791b      	ldrb	r3, [r3, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d11b      	bne.n	800bf18 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bee0:	4b17      	ldr	r3, [pc, #92]	; (800bf40 <plug_holes+0x140>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d102      	bne.n	800bef0 <plug_holes+0xf0>
      lfree = pmem;
 800beea:	4a15      	ldr	r2, [pc, #84]	; (800bf40 <plug_holes+0x140>)
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	881a      	ldrh	r2, [r3, #0]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800bf00:	d00a      	beq.n	800bf18 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	881b      	ldrh	r3, [r3, #0]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f7ff ff56 	bl	800bdb8 <ptr_to_mem>
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	68b8      	ldr	r0, [r7, #8]
 800bf10:	f7ff ff64 	bl	800bddc <mem_to_ptr>
 800bf14:	4603      	mov	r3, r0
 800bf16:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bf18:	bf00      	nop
 800bf1a:	3714      	adds	r7, #20
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd90      	pop	{r4, r7, pc}
 800bf20:	20009dd4 	.word	0x20009dd4
 800bf24:	0801a370 	.word	0x0801a370
 800bf28:	0801a3a0 	.word	0x0801a3a0
 800bf2c:	0801a3b8 	.word	0x0801a3b8
 800bf30:	20009dd8 	.word	0x20009dd8
 800bf34:	0801a3e0 	.word	0x0801a3e0
 800bf38:	0801a3fc 	.word	0x0801a3fc
 800bf3c:	0801a418 	.word	0x0801a418
 800bf40:	20009de0 	.word	0x20009de0

0800bf44 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bf4a:	4b1f      	ldr	r3, [pc, #124]	; (800bfc8 <mem_init+0x84>)
 800bf4c:	3303      	adds	r3, #3
 800bf4e:	f023 0303 	bic.w	r3, r3, #3
 800bf52:	461a      	mov	r2, r3
 800bf54:	4b1d      	ldr	r3, [pc, #116]	; (800bfcc <mem_init+0x88>)
 800bf56:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bf58:	4b1c      	ldr	r3, [pc, #112]	; (800bfcc <mem_init+0x88>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf64:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bf72:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800bf76:	f7ff ff1f 	bl	800bdb8 <ptr_to_mem>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	4a14      	ldr	r2, [pc, #80]	; (800bfd0 <mem_init+0x8c>)
 800bf7e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bf80:	4b13      	ldr	r3, [pc, #76]	; (800bfd0 <mem_init+0x8c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	2201      	movs	r2, #1
 800bf86:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bf88:	4b11      	ldr	r3, [pc, #68]	; (800bfd0 <mem_init+0x8c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf90:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bf92:	4b0f      	ldr	r3, [pc, #60]	; (800bfd0 <mem_init+0x8c>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800bf9a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bf9c:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <mem_init+0x88>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a0c      	ldr	r2, [pc, #48]	; (800bfd4 <mem_init+0x90>)
 800bfa2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bfa4:	480c      	ldr	r0, [pc, #48]	; (800bfd8 <mem_init+0x94>)
 800bfa6:	f00c fe0f 	bl	8018bc8 <sys_mutex_new>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d006      	beq.n	800bfbe <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <mem_init+0x98>)
 800bfb2:	f240 221f 	movw	r2, #543	; 0x21f
 800bfb6:	490a      	ldr	r1, [pc, #40]	; (800bfe0 <mem_init+0x9c>)
 800bfb8:	480a      	ldr	r0, [pc, #40]	; (800bfe4 <mem_init+0xa0>)
 800bfba:	f00c ffff 	bl	8018fbc <iprintf>
  }
}
 800bfbe:	bf00      	nop
 800bfc0:	3708      	adds	r7, #8
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20009780 	.word	0x20009780
 800bfcc:	20009dd4 	.word	0x20009dd4
 800bfd0:	20009dd8 	.word	0x20009dd8
 800bfd4:	20009de0 	.word	0x20009de0
 800bfd8:	20009ddc 	.word	0x20009ddc
 800bfdc:	0801a370 	.word	0x0801a370
 800bfe0:	0801a444 	.word	0x0801a444
 800bfe4:	0801a3b8 	.word	0x0801a3b8

0800bfe8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b086      	sub	sp, #24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f7ff fef3 	bl	800bddc <mem_to_ptr>
 800bff6:	4603      	mov	r3, r0
 800bff8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	4618      	mov	r0, r3
 800c000:	f7ff feda 	bl	800bdb8 <ptr_to_mem>
 800c004:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	885b      	ldrh	r3, [r3, #2]
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7ff fed4 	bl	800bdb8 <ptr_to_mem>
 800c010:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	881b      	ldrh	r3, [r3, #0]
 800c016:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c01a:	d818      	bhi.n	800c04e <mem_link_valid+0x66>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	885b      	ldrh	r3, [r3, #2]
 800c020:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c024:	d813      	bhi.n	800c04e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c02a:	8afa      	ldrh	r2, [r7, #22]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d004      	beq.n	800c03a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	8afa      	ldrh	r2, [r7, #22]
 800c036:	429a      	cmp	r2, r3
 800c038:	d109      	bne.n	800c04e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c03a:	4b08      	ldr	r3, [pc, #32]	; (800c05c <mem_link_valid+0x74>)
 800c03c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	429a      	cmp	r2, r3
 800c042:	d006      	beq.n	800c052 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	885b      	ldrh	r3, [r3, #2]
 800c048:	8afa      	ldrh	r2, [r7, #22]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d001      	beq.n	800c052 <mem_link_valid+0x6a>
    return 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	e000      	b.n	800c054 <mem_link_valid+0x6c>
  }
  return 1;
 800c052:	2301      	movs	r3, #1
}
 800c054:	4618      	mov	r0, r3
 800c056:	3718      	adds	r7, #24
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	20009dd8 	.word	0x20009dd8

0800c060 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b088      	sub	sp, #32
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d070      	beq.n	800c150 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f003 0303 	and.w	r3, r3, #3
 800c074:	2b00      	cmp	r3, #0
 800c076:	d00d      	beq.n	800c094 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c078:	4b37      	ldr	r3, [pc, #220]	; (800c158 <mem_free+0xf8>)
 800c07a:	f240 2273 	movw	r2, #627	; 0x273
 800c07e:	4937      	ldr	r1, [pc, #220]	; (800c15c <mem_free+0xfc>)
 800c080:	4837      	ldr	r0, [pc, #220]	; (800c160 <mem_free+0x100>)
 800c082:	f00c ff9b 	bl	8018fbc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c086:	f00c fdfd 	bl	8018c84 <sys_arch_protect>
 800c08a:	60f8      	str	r0, [r7, #12]
 800c08c:	68f8      	ldr	r0, [r7, #12]
 800c08e:	f00c fe07 	bl	8018ca0 <sys_arch_unprotect>
    return;
 800c092:	e05e      	b.n	800c152 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	3b08      	subs	r3, #8
 800c098:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c09a:	4b32      	ldr	r3, [pc, #200]	; (800c164 <mem_free+0x104>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	69fa      	ldr	r2, [r7, #28]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d306      	bcc.n	800c0b2 <mem_free+0x52>
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f103 020c 	add.w	r2, r3, #12
 800c0aa:	4b2f      	ldr	r3, [pc, #188]	; (800c168 <mem_free+0x108>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d90d      	bls.n	800c0ce <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c0b2:	4b29      	ldr	r3, [pc, #164]	; (800c158 <mem_free+0xf8>)
 800c0b4:	f240 227f 	movw	r2, #639	; 0x27f
 800c0b8:	492c      	ldr	r1, [pc, #176]	; (800c16c <mem_free+0x10c>)
 800c0ba:	4829      	ldr	r0, [pc, #164]	; (800c160 <mem_free+0x100>)
 800c0bc:	f00c ff7e 	bl	8018fbc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0c0:	f00c fde0 	bl	8018c84 <sys_arch_protect>
 800c0c4:	6138      	str	r0, [r7, #16]
 800c0c6:	6938      	ldr	r0, [r7, #16]
 800c0c8:	f00c fdea 	bl	8018ca0 <sys_arch_unprotect>
    return;
 800c0cc:	e041      	b.n	800c152 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c0ce:	4828      	ldr	r0, [pc, #160]	; (800c170 <mem_free+0x110>)
 800c0d0:	f00c fd96 	bl	8018c00 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c0d4:	69fb      	ldr	r3, [r7, #28]
 800c0d6:	791b      	ldrb	r3, [r3, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d110      	bne.n	800c0fe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c0dc:	4b1e      	ldr	r3, [pc, #120]	; (800c158 <mem_free+0xf8>)
 800c0de:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c0e2:	4924      	ldr	r1, [pc, #144]	; (800c174 <mem_free+0x114>)
 800c0e4:	481e      	ldr	r0, [pc, #120]	; (800c160 <mem_free+0x100>)
 800c0e6:	f00c ff69 	bl	8018fbc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c0ea:	4821      	ldr	r0, [pc, #132]	; (800c170 <mem_free+0x110>)
 800c0ec:	f00c fd97 	bl	8018c1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c0f0:	f00c fdc8 	bl	8018c84 <sys_arch_protect>
 800c0f4:	6178      	str	r0, [r7, #20]
 800c0f6:	6978      	ldr	r0, [r7, #20]
 800c0f8:	f00c fdd2 	bl	8018ca0 <sys_arch_unprotect>
    return;
 800c0fc:	e029      	b.n	800c152 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c0fe:	69f8      	ldr	r0, [r7, #28]
 800c100:	f7ff ff72 	bl	800bfe8 <mem_link_valid>
 800c104:	4603      	mov	r3, r0
 800c106:	2b00      	cmp	r3, #0
 800c108:	d110      	bne.n	800c12c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c10a:	4b13      	ldr	r3, [pc, #76]	; (800c158 <mem_free+0xf8>)
 800c10c:	f240 2295 	movw	r2, #661	; 0x295
 800c110:	4919      	ldr	r1, [pc, #100]	; (800c178 <mem_free+0x118>)
 800c112:	4813      	ldr	r0, [pc, #76]	; (800c160 <mem_free+0x100>)
 800c114:	f00c ff52 	bl	8018fbc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c118:	4815      	ldr	r0, [pc, #84]	; (800c170 <mem_free+0x110>)
 800c11a:	f00c fd80 	bl	8018c1e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c11e:	f00c fdb1 	bl	8018c84 <sys_arch_protect>
 800c122:	61b8      	str	r0, [r7, #24]
 800c124:	69b8      	ldr	r0, [r7, #24]
 800c126:	f00c fdbb 	bl	8018ca0 <sys_arch_unprotect>
    return;
 800c12a:	e012      	b.n	800c152 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c12c:	69fb      	ldr	r3, [r7, #28]
 800c12e:	2200      	movs	r2, #0
 800c130:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c132:	4b12      	ldr	r3, [pc, #72]	; (800c17c <mem_free+0x11c>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69fa      	ldr	r2, [r7, #28]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d202      	bcs.n	800c142 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c13c:	4a0f      	ldr	r2, [pc, #60]	; (800c17c <mem_free+0x11c>)
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c142:	69f8      	ldr	r0, [r7, #28]
 800c144:	f7ff fe5c 	bl	800be00 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c148:	4809      	ldr	r0, [pc, #36]	; (800c170 <mem_free+0x110>)
 800c14a:	f00c fd68 	bl	8018c1e <sys_mutex_unlock>
 800c14e:	e000      	b.n	800c152 <mem_free+0xf2>
    return;
 800c150:	bf00      	nop
}
 800c152:	3720      	adds	r7, #32
 800c154:	46bd      	mov	sp, r7
 800c156:	bd80      	pop	{r7, pc}
 800c158:	0801a370 	.word	0x0801a370
 800c15c:	0801a460 	.word	0x0801a460
 800c160:	0801a3b8 	.word	0x0801a3b8
 800c164:	20009dd4 	.word	0x20009dd4
 800c168:	20009dd8 	.word	0x20009dd8
 800c16c:	0801a484 	.word	0x0801a484
 800c170:	20009ddc 	.word	0x20009ddc
 800c174:	0801a4a0 	.word	0x0801a4a0
 800c178:	0801a4c8 	.word	0x0801a4c8
 800c17c:	20009de0 	.word	0x20009de0

0800c180 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b088      	sub	sp, #32
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	460b      	mov	r3, r1
 800c18a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c18c:	887b      	ldrh	r3, [r7, #2]
 800c18e:	3303      	adds	r3, #3
 800c190:	b29b      	uxth	r3, r3
 800c192:	f023 0303 	bic.w	r3, r3, #3
 800c196:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c198:	8bfb      	ldrh	r3, [r7, #30]
 800c19a:	2b0b      	cmp	r3, #11
 800c19c:	d801      	bhi.n	800c1a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c19e:	230c      	movs	r3, #12
 800c1a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c1a2:	8bfb      	ldrh	r3, [r7, #30]
 800c1a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1a8:	d803      	bhi.n	800c1b2 <mem_trim+0x32>
 800c1aa:	8bfa      	ldrh	r2, [r7, #30]
 800c1ac:	887b      	ldrh	r3, [r7, #2]
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d201      	bcs.n	800c1b6 <mem_trim+0x36>
    return NULL;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e0d8      	b.n	800c368 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c1b6:	4b6e      	ldr	r3, [pc, #440]	; (800c370 <mem_trim+0x1f0>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d304      	bcc.n	800c1ca <mem_trim+0x4a>
 800c1c0:	4b6c      	ldr	r3, [pc, #432]	; (800c374 <mem_trim+0x1f4>)
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	687a      	ldr	r2, [r7, #4]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d306      	bcc.n	800c1d8 <mem_trim+0x58>
 800c1ca:	4b6b      	ldr	r3, [pc, #428]	; (800c378 <mem_trim+0x1f8>)
 800c1cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c1d0:	496a      	ldr	r1, [pc, #424]	; (800c37c <mem_trim+0x1fc>)
 800c1d2:	486b      	ldr	r0, [pc, #428]	; (800c380 <mem_trim+0x200>)
 800c1d4:	f00c fef2 	bl	8018fbc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c1d8:	4b65      	ldr	r3, [pc, #404]	; (800c370 <mem_trim+0x1f0>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	687a      	ldr	r2, [r7, #4]
 800c1de:	429a      	cmp	r2, r3
 800c1e0:	d304      	bcc.n	800c1ec <mem_trim+0x6c>
 800c1e2:	4b64      	ldr	r3, [pc, #400]	; (800c374 <mem_trim+0x1f4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	687a      	ldr	r2, [r7, #4]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d307      	bcc.n	800c1fc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c1ec:	f00c fd4a 	bl	8018c84 <sys_arch_protect>
 800c1f0:	60b8      	str	r0, [r7, #8]
 800c1f2:	68b8      	ldr	r0, [r7, #8]
 800c1f4:	f00c fd54 	bl	8018ca0 <sys_arch_unprotect>
    return rmem;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	e0b5      	b.n	800c368 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3b08      	subs	r3, #8
 800c200:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c202:	69b8      	ldr	r0, [r7, #24]
 800c204:	f7ff fdea 	bl	800bddc <mem_to_ptr>
 800c208:	4603      	mov	r3, r0
 800c20a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c20c:	69bb      	ldr	r3, [r7, #24]
 800c20e:	881a      	ldrh	r2, [r3, #0]
 800c210:	8afb      	ldrh	r3, [r7, #22]
 800c212:	1ad3      	subs	r3, r2, r3
 800c214:	b29b      	uxth	r3, r3
 800c216:	3b08      	subs	r3, #8
 800c218:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c21a:	8bfa      	ldrh	r2, [r7, #30]
 800c21c:	8abb      	ldrh	r3, [r7, #20]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d906      	bls.n	800c230 <mem_trim+0xb0>
 800c222:	4b55      	ldr	r3, [pc, #340]	; (800c378 <mem_trim+0x1f8>)
 800c224:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c228:	4956      	ldr	r1, [pc, #344]	; (800c384 <mem_trim+0x204>)
 800c22a:	4855      	ldr	r0, [pc, #340]	; (800c380 <mem_trim+0x200>)
 800c22c:	f00c fec6 	bl	8018fbc <iprintf>
  if (newsize > size) {
 800c230:	8bfa      	ldrh	r2, [r7, #30]
 800c232:	8abb      	ldrh	r3, [r7, #20]
 800c234:	429a      	cmp	r2, r3
 800c236:	d901      	bls.n	800c23c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c238:	2300      	movs	r3, #0
 800c23a:	e095      	b.n	800c368 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c23c:	8bfa      	ldrh	r2, [r7, #30]
 800c23e:	8abb      	ldrh	r3, [r7, #20]
 800c240:	429a      	cmp	r2, r3
 800c242:	d101      	bne.n	800c248 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	e08f      	b.n	800c368 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c248:	484f      	ldr	r0, [pc, #316]	; (800c388 <mem_trim+0x208>)
 800c24a:	f00c fcd9 	bl	8018c00 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	4618      	mov	r0, r3
 800c254:	f7ff fdb0 	bl	800bdb8 <ptr_to_mem>
 800c258:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	791b      	ldrb	r3, [r3, #4]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d13f      	bne.n	800c2e2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c26a:	d106      	bne.n	800c27a <mem_trim+0xfa>
 800c26c:	4b42      	ldr	r3, [pc, #264]	; (800c378 <mem_trim+0x1f8>)
 800c26e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c272:	4946      	ldr	r1, [pc, #280]	; (800c38c <mem_trim+0x20c>)
 800c274:	4842      	ldr	r0, [pc, #264]	; (800c380 <mem_trim+0x200>)
 800c276:	f00c fea1 	bl	8018fbc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c27a:	693b      	ldr	r3, [r7, #16]
 800c27c:	881b      	ldrh	r3, [r3, #0]
 800c27e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c280:	8afa      	ldrh	r2, [r7, #22]
 800c282:	8bfb      	ldrh	r3, [r7, #30]
 800c284:	4413      	add	r3, r2
 800c286:	b29b      	uxth	r3, r3
 800c288:	3308      	adds	r3, #8
 800c28a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c28c:	4b40      	ldr	r3, [pc, #256]	; (800c390 <mem_trim+0x210>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	429a      	cmp	r2, r3
 800c294:	d106      	bne.n	800c2a4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c296:	89fb      	ldrh	r3, [r7, #14]
 800c298:	4618      	mov	r0, r3
 800c29a:	f7ff fd8d 	bl	800bdb8 <ptr_to_mem>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	4a3b      	ldr	r2, [pc, #236]	; (800c390 <mem_trim+0x210>)
 800c2a2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c2a4:	89fb      	ldrh	r3, [r7, #14]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7ff fd86 	bl	800bdb8 <ptr_to_mem>
 800c2ac:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	89ba      	ldrh	r2, [r7, #12]
 800c2b8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	8afa      	ldrh	r2, [r7, #22]
 800c2be:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	89fa      	ldrh	r2, [r7, #14]
 800c2c4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	881b      	ldrh	r3, [r3, #0]
 800c2ca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2ce:	d047      	beq.n	800c360 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	881b      	ldrh	r3, [r3, #0]
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	f7ff fd6f 	bl	800bdb8 <ptr_to_mem>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	89fb      	ldrh	r3, [r7, #14]
 800c2de:	8053      	strh	r3, [r2, #2]
 800c2e0:	e03e      	b.n	800c360 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c2e2:	8bfb      	ldrh	r3, [r7, #30]
 800c2e4:	f103 0214 	add.w	r2, r3, #20
 800c2e8:	8abb      	ldrh	r3, [r7, #20]
 800c2ea:	429a      	cmp	r2, r3
 800c2ec:	d838      	bhi.n	800c360 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c2ee:	8afa      	ldrh	r2, [r7, #22]
 800c2f0:	8bfb      	ldrh	r3, [r7, #30]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	b29b      	uxth	r3, r3
 800c2f6:	3308      	adds	r3, #8
 800c2f8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c2fa:	69bb      	ldr	r3, [r7, #24]
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c302:	d106      	bne.n	800c312 <mem_trim+0x192>
 800c304:	4b1c      	ldr	r3, [pc, #112]	; (800c378 <mem_trim+0x1f8>)
 800c306:	f240 3216 	movw	r2, #790	; 0x316
 800c30a:	4920      	ldr	r1, [pc, #128]	; (800c38c <mem_trim+0x20c>)
 800c30c:	481c      	ldr	r0, [pc, #112]	; (800c380 <mem_trim+0x200>)
 800c30e:	f00c fe55 	bl	8018fbc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c312:	89fb      	ldrh	r3, [r7, #14]
 800c314:	4618      	mov	r0, r3
 800c316:	f7ff fd4f 	bl	800bdb8 <ptr_to_mem>
 800c31a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c31c:	4b1c      	ldr	r3, [pc, #112]	; (800c390 <mem_trim+0x210>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	429a      	cmp	r2, r3
 800c324:	d202      	bcs.n	800c32c <mem_trim+0x1ac>
      lfree = mem2;
 800c326:	4a1a      	ldr	r2, [pc, #104]	; (800c390 <mem_trim+0x210>)
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c32c:	693b      	ldr	r3, [r7, #16]
 800c32e:	2200      	movs	r2, #0
 800c330:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c332:	69bb      	ldr	r3, [r7, #24]
 800c334:	881a      	ldrh	r2, [r3, #0]
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	8afa      	ldrh	r2, [r7, #22]
 800c33e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c340:	69bb      	ldr	r3, [r7, #24]
 800c342:	89fa      	ldrh	r2, [r7, #14]
 800c344:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	881b      	ldrh	r3, [r3, #0]
 800c34a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c34e:	d007      	beq.n	800c360 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c350:	693b      	ldr	r3, [r7, #16]
 800c352:	881b      	ldrh	r3, [r3, #0]
 800c354:	4618      	mov	r0, r3
 800c356:	f7ff fd2f 	bl	800bdb8 <ptr_to_mem>
 800c35a:	4602      	mov	r2, r0
 800c35c:	89fb      	ldrh	r3, [r7, #14]
 800c35e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c360:	4809      	ldr	r0, [pc, #36]	; (800c388 <mem_trim+0x208>)
 800c362:	f00c fc5c 	bl	8018c1e <sys_mutex_unlock>
  return rmem;
 800c366:	687b      	ldr	r3, [r7, #4]
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3720      	adds	r7, #32
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20009dd4 	.word	0x20009dd4
 800c374:	20009dd8 	.word	0x20009dd8
 800c378:	0801a370 	.word	0x0801a370
 800c37c:	0801a4fc 	.word	0x0801a4fc
 800c380:	0801a3b8 	.word	0x0801a3b8
 800c384:	0801a514 	.word	0x0801a514
 800c388:	20009ddc 	.word	0x20009ddc
 800c38c:	0801a534 	.word	0x0801a534
 800c390:	20009de0 	.word	0x20009de0

0800c394 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b088      	sub	sp, #32
 800c398:	af00      	add	r7, sp, #0
 800c39a:	4603      	mov	r3, r0
 800c39c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c39e:	88fb      	ldrh	r3, [r7, #6]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <mem_malloc+0x14>
    return NULL;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e0e2      	b.n	800c56e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c3a8:	88fb      	ldrh	r3, [r7, #6]
 800c3aa:	3303      	adds	r3, #3
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	f023 0303 	bic.w	r3, r3, #3
 800c3b2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c3b4:	8bbb      	ldrh	r3, [r7, #28]
 800c3b6:	2b0b      	cmp	r3, #11
 800c3b8:	d801      	bhi.n	800c3be <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c3ba:	230c      	movs	r3, #12
 800c3bc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c3be:	8bbb      	ldrh	r3, [r7, #28]
 800c3c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c3c4:	d803      	bhi.n	800c3ce <mem_malloc+0x3a>
 800c3c6:	8bba      	ldrh	r2, [r7, #28]
 800c3c8:	88fb      	ldrh	r3, [r7, #6]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d201      	bcs.n	800c3d2 <mem_malloc+0x3e>
    return NULL;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	e0cd      	b.n	800c56e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c3d2:	4869      	ldr	r0, [pc, #420]	; (800c578 <mem_malloc+0x1e4>)
 800c3d4:	f00c fc14 	bl	8018c00 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c3d8:	4b68      	ldr	r3, [pc, #416]	; (800c57c <mem_malloc+0x1e8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	4618      	mov	r0, r3
 800c3de:	f7ff fcfd 	bl	800bddc <mem_to_ptr>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	83fb      	strh	r3, [r7, #30]
 800c3e6:	e0b7      	b.n	800c558 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c3e8:	8bfb      	ldrh	r3, [r7, #30]
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f7ff fce4 	bl	800bdb8 <ptr_to_mem>
 800c3f0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	791b      	ldrb	r3, [r3, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f040 80a7 	bne.w	800c54a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	461a      	mov	r2, r3
 800c402:	8bfb      	ldrh	r3, [r7, #30]
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	f1a3 0208 	sub.w	r2, r3, #8
 800c40a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c40c:	429a      	cmp	r2, r3
 800c40e:	f0c0 809c 	bcc.w	800c54a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	8bfb      	ldrh	r3, [r7, #30]
 800c41a:	1ad3      	subs	r3, r2, r3
 800c41c:	f1a3 0208 	sub.w	r2, r3, #8
 800c420:	8bbb      	ldrh	r3, [r7, #28]
 800c422:	3314      	adds	r3, #20
 800c424:	429a      	cmp	r2, r3
 800c426:	d333      	bcc.n	800c490 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c428:	8bfa      	ldrh	r2, [r7, #30]
 800c42a:	8bbb      	ldrh	r3, [r7, #28]
 800c42c:	4413      	add	r3, r2
 800c42e:	b29b      	uxth	r3, r3
 800c430:	3308      	adds	r3, #8
 800c432:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c434:	8a7b      	ldrh	r3, [r7, #18]
 800c436:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c43a:	d106      	bne.n	800c44a <mem_malloc+0xb6>
 800c43c:	4b50      	ldr	r3, [pc, #320]	; (800c580 <mem_malloc+0x1ec>)
 800c43e:	f240 3287 	movw	r2, #903	; 0x387
 800c442:	4950      	ldr	r1, [pc, #320]	; (800c584 <mem_malloc+0x1f0>)
 800c444:	4850      	ldr	r0, [pc, #320]	; (800c588 <mem_malloc+0x1f4>)
 800c446:	f00c fdb9 	bl	8018fbc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c44a:	8a7b      	ldrh	r3, [r7, #18]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7ff fcb3 	bl	800bdb8 <ptr_to_mem>
 800c452:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	881a      	ldrh	r2, [r3, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	8bfa      	ldrh	r2, [r7, #30]
 800c466:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	8a7a      	ldrh	r2, [r7, #18]
 800c46c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	2201      	movs	r2, #1
 800c472:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	881b      	ldrh	r3, [r3, #0]
 800c478:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c47c:	d00b      	beq.n	800c496 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	4618      	mov	r0, r3
 800c484:	f7ff fc98 	bl	800bdb8 <ptr_to_mem>
 800c488:	4602      	mov	r2, r0
 800c48a:	8a7b      	ldrh	r3, [r7, #18]
 800c48c:	8053      	strh	r3, [r2, #2]
 800c48e:	e002      	b.n	800c496 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c490:	697b      	ldr	r3, [r7, #20]
 800c492:	2201      	movs	r2, #1
 800c494:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c496:	4b39      	ldr	r3, [pc, #228]	; (800c57c <mem_malloc+0x1e8>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d127      	bne.n	800c4f0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c4a0:	4b36      	ldr	r3, [pc, #216]	; (800c57c <mem_malloc+0x1e8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c4a6:	e005      	b.n	800c4b4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7ff fc83 	bl	800bdb8 <ptr_to_mem>
 800c4b2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	791b      	ldrb	r3, [r3, #4]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d004      	beq.n	800c4c6 <mem_malloc+0x132>
 800c4bc:	4b33      	ldr	r3, [pc, #204]	; (800c58c <mem_malloc+0x1f8>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d1f0      	bne.n	800c4a8 <mem_malloc+0x114>
          }
          lfree = cur;
 800c4c6:	4a2d      	ldr	r2, [pc, #180]	; (800c57c <mem_malloc+0x1e8>)
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c4cc:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <mem_malloc+0x1e8>)
 800c4ce:	681a      	ldr	r2, [r3, #0]
 800c4d0:	4b2e      	ldr	r3, [pc, #184]	; (800c58c <mem_malloc+0x1f8>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	d00b      	beq.n	800c4f0 <mem_malloc+0x15c>
 800c4d8:	4b28      	ldr	r3, [pc, #160]	; (800c57c <mem_malloc+0x1e8>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	791b      	ldrb	r3, [r3, #4]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d006      	beq.n	800c4f0 <mem_malloc+0x15c>
 800c4e2:	4b27      	ldr	r3, [pc, #156]	; (800c580 <mem_malloc+0x1ec>)
 800c4e4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c4e8:	4929      	ldr	r1, [pc, #164]	; (800c590 <mem_malloc+0x1fc>)
 800c4ea:	4827      	ldr	r0, [pc, #156]	; (800c588 <mem_malloc+0x1f4>)
 800c4ec:	f00c fd66 	bl	8018fbc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c4f0:	4821      	ldr	r0, [pc, #132]	; (800c578 <mem_malloc+0x1e4>)
 800c4f2:	f00c fb94 	bl	8018c1e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c4f6:	8bba      	ldrh	r2, [r7, #28]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	4413      	add	r3, r2
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	4a23      	ldr	r2, [pc, #140]	; (800c58c <mem_malloc+0x1f8>)
 800c500:	6812      	ldr	r2, [r2, #0]
 800c502:	4293      	cmp	r3, r2
 800c504:	d906      	bls.n	800c514 <mem_malloc+0x180>
 800c506:	4b1e      	ldr	r3, [pc, #120]	; (800c580 <mem_malloc+0x1ec>)
 800c508:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c50c:	4921      	ldr	r1, [pc, #132]	; (800c594 <mem_malloc+0x200>)
 800c50e:	481e      	ldr	r0, [pc, #120]	; (800c588 <mem_malloc+0x1f4>)
 800c510:	f00c fd54 	bl	8018fbc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	f003 0303 	and.w	r3, r3, #3
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d006      	beq.n	800c52c <mem_malloc+0x198>
 800c51e:	4b18      	ldr	r3, [pc, #96]	; (800c580 <mem_malloc+0x1ec>)
 800c520:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c524:	491c      	ldr	r1, [pc, #112]	; (800c598 <mem_malloc+0x204>)
 800c526:	4818      	ldr	r0, [pc, #96]	; (800c588 <mem_malloc+0x1f4>)
 800c528:	f00c fd48 	bl	8018fbc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	f003 0303 	and.w	r3, r3, #3
 800c532:	2b00      	cmp	r3, #0
 800c534:	d006      	beq.n	800c544 <mem_malloc+0x1b0>
 800c536:	4b12      	ldr	r3, [pc, #72]	; (800c580 <mem_malloc+0x1ec>)
 800c538:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c53c:	4917      	ldr	r1, [pc, #92]	; (800c59c <mem_malloc+0x208>)
 800c53e:	4812      	ldr	r0, [pc, #72]	; (800c588 <mem_malloc+0x1f4>)
 800c540:	f00c fd3c 	bl	8018fbc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	3308      	adds	r3, #8
 800c548:	e011      	b.n	800c56e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c54a:	8bfb      	ldrh	r3, [r7, #30]
 800c54c:	4618      	mov	r0, r3
 800c54e:	f7ff fc33 	bl	800bdb8 <ptr_to_mem>
 800c552:	4603      	mov	r3, r0
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c558:	8bfa      	ldrh	r2, [r7, #30]
 800c55a:	8bbb      	ldrh	r3, [r7, #28]
 800c55c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c560:	429a      	cmp	r2, r3
 800c562:	f4ff af41 	bcc.w	800c3e8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c566:	4804      	ldr	r0, [pc, #16]	; (800c578 <mem_malloc+0x1e4>)
 800c568:	f00c fb59 	bl	8018c1e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c56c:	2300      	movs	r3, #0
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3720      	adds	r7, #32
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20009ddc 	.word	0x20009ddc
 800c57c:	20009de0 	.word	0x20009de0
 800c580:	0801a370 	.word	0x0801a370
 800c584:	0801a534 	.word	0x0801a534
 800c588:	0801a3b8 	.word	0x0801a3b8
 800c58c:	20009dd8 	.word	0x20009dd8
 800c590:	0801a548 	.word	0x0801a548
 800c594:	0801a564 	.word	0x0801a564
 800c598:	0801a594 	.word	0x0801a594
 800c59c:	0801a5c4 	.word	0x0801a5c4

0800c5a0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	685b      	ldr	r3, [r3, #4]
 800c5b4:	3303      	adds	r3, #3
 800c5b6:	f023 0303 	bic.w	r3, r3, #3
 800c5ba:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c5bc:	2300      	movs	r3, #0
 800c5be:	60fb      	str	r3, [r7, #12]
 800c5c0:	e011      	b.n	800c5e6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	681a      	ldr	r2, [r3, #0]
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	68ba      	ldr	r2, [r7, #8]
 800c5d2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	881b      	ldrh	r3, [r3, #0]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	4413      	add	r3, r2
 800c5de:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	885b      	ldrh	r3, [r3, #2]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	4293      	cmp	r3, r2
 800c5f0:	dbe7      	blt.n	800c5c2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b082      	sub	sp, #8
 800c604:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c606:	2300      	movs	r3, #0
 800c608:	80fb      	strh	r3, [r7, #6]
 800c60a:	e009      	b.n	800c620 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c60c:	88fb      	ldrh	r3, [r7, #6]
 800c60e:	4a08      	ldr	r2, [pc, #32]	; (800c630 <memp_init+0x30>)
 800c610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ffc3 	bl	800c5a0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c61a:	88fb      	ldrh	r3, [r7, #6]
 800c61c:	3301      	adds	r3, #1
 800c61e:	80fb      	strh	r3, [r7, #6]
 800c620:	88fb      	ldrh	r3, [r7, #6]
 800c622:	2b0c      	cmp	r3, #12
 800c624:	d9f2      	bls.n	800c60c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c626:	bf00      	nop
 800c628:	bf00      	nop
 800c62a:	3708      	adds	r7, #8
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	0801f540 	.word	0x0801f540

0800c634 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c634:	b580      	push	{r7, lr}
 800c636:	b084      	sub	sp, #16
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c63c:	f00c fb22 	bl	8018c84 <sys_arch_protect>
 800c640:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	689b      	ldr	r3, [r3, #8]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c64a:	68bb      	ldr	r3, [r7, #8]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d015      	beq.n	800c67c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	6812      	ldr	r2, [r2, #0]
 800c658:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	f003 0303 	and.w	r3, r3, #3
 800c660:	2b00      	cmp	r3, #0
 800c662:	d006      	beq.n	800c672 <do_memp_malloc_pool+0x3e>
 800c664:	4b09      	ldr	r3, [pc, #36]	; (800c68c <do_memp_malloc_pool+0x58>)
 800c666:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c66a:	4909      	ldr	r1, [pc, #36]	; (800c690 <do_memp_malloc_pool+0x5c>)
 800c66c:	4809      	ldr	r0, [pc, #36]	; (800c694 <do_memp_malloc_pool+0x60>)
 800c66e:	f00c fca5 	bl	8018fbc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c672:	68f8      	ldr	r0, [r7, #12]
 800c674:	f00c fb14 	bl	8018ca0 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	e003      	b.n	800c684 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f00c fb0f 	bl	8018ca0 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c682:	2300      	movs	r3, #0
}
 800c684:	4618      	mov	r0, r3
 800c686:	3710      	adds	r7, #16
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	0801a5e8 	.word	0x0801a5e8
 800c690:	0801a618 	.word	0x0801a618
 800c694:	0801a63c 	.word	0x0801a63c

0800c698 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b082      	sub	sp, #8
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d106      	bne.n	800c6b4 <memp_malloc_pool+0x1c>
 800c6a6:	4b0a      	ldr	r3, [pc, #40]	; (800c6d0 <memp_malloc_pool+0x38>)
 800c6a8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c6ac:	4909      	ldr	r1, [pc, #36]	; (800c6d4 <memp_malloc_pool+0x3c>)
 800c6ae:	480a      	ldr	r0, [pc, #40]	; (800c6d8 <memp_malloc_pool+0x40>)
 800c6b0:	f00c fc84 	bl	8018fbc <iprintf>
  if (desc == NULL) {
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <memp_malloc_pool+0x26>
    return NULL;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	e003      	b.n	800c6c6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff ffb8 	bl	800c634 <do_memp_malloc_pool>
 800c6c4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3708      	adds	r7, #8
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	0801a5e8 	.word	0x0801a5e8
 800c6d4:	0801a664 	.word	0x0801a664
 800c6d8:	0801a63c 	.word	0x0801a63c

0800c6dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c6e6:	79fb      	ldrb	r3, [r7, #7]
 800c6e8:	2b0c      	cmp	r3, #12
 800c6ea:	d908      	bls.n	800c6fe <memp_malloc+0x22>
 800c6ec:	4b0a      	ldr	r3, [pc, #40]	; (800c718 <memp_malloc+0x3c>)
 800c6ee:	f240 1257 	movw	r2, #343	; 0x157
 800c6f2:	490a      	ldr	r1, [pc, #40]	; (800c71c <memp_malloc+0x40>)
 800c6f4:	480a      	ldr	r0, [pc, #40]	; (800c720 <memp_malloc+0x44>)
 800c6f6:	f00c fc61 	bl	8018fbc <iprintf>
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	e008      	b.n	800c710 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c6fe:	79fb      	ldrb	r3, [r7, #7]
 800c700:	4a08      	ldr	r2, [pc, #32]	; (800c724 <memp_malloc+0x48>)
 800c702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c706:	4618      	mov	r0, r3
 800c708:	f7ff ff94 	bl	800c634 <do_memp_malloc_pool>
 800c70c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c70e:	68fb      	ldr	r3, [r7, #12]
}
 800c710:	4618      	mov	r0, r3
 800c712:	3710      	adds	r7, #16
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	0801a5e8 	.word	0x0801a5e8
 800c71c:	0801a678 	.word	0x0801a678
 800c720:	0801a63c 	.word	0x0801a63c
 800c724:	0801f540 	.word	0x0801f540

0800c728 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b084      	sub	sp, #16
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	f003 0303 	and.w	r3, r3, #3
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d006      	beq.n	800c74a <do_memp_free_pool+0x22>
 800c73c:	4b0d      	ldr	r3, [pc, #52]	; (800c774 <do_memp_free_pool+0x4c>)
 800c73e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c742:	490d      	ldr	r1, [pc, #52]	; (800c778 <do_memp_free_pool+0x50>)
 800c744:	480d      	ldr	r0, [pc, #52]	; (800c77c <do_memp_free_pool+0x54>)
 800c746:	f00c fc39 	bl	8018fbc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c74e:	f00c fa99 	bl	8018c84 <sys_arch_protect>
 800c752:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	68fa      	ldr	r2, [r7, #12]
 800c764:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c766:	68b8      	ldr	r0, [r7, #8]
 800c768:	f00c fa9a 	bl	8018ca0 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c76c:	bf00      	nop
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}
 800c774:	0801a5e8 	.word	0x0801a5e8
 800c778:	0801a698 	.word	0x0801a698
 800c77c:	0801a63c 	.word	0x0801a63c

0800c780 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d106      	bne.n	800c79e <memp_free_pool+0x1e>
 800c790:	4b0a      	ldr	r3, [pc, #40]	; (800c7bc <memp_free_pool+0x3c>)
 800c792:	f240 1295 	movw	r2, #405	; 0x195
 800c796:	490a      	ldr	r1, [pc, #40]	; (800c7c0 <memp_free_pool+0x40>)
 800c798:	480a      	ldr	r0, [pc, #40]	; (800c7c4 <memp_free_pool+0x44>)
 800c79a:	f00c fc0f 	bl	8018fbc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d007      	beq.n	800c7b4 <memp_free_pool+0x34>
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d004      	beq.n	800c7b4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c7aa:	6839      	ldr	r1, [r7, #0]
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f7ff ffbb 	bl	800c728 <do_memp_free_pool>
 800c7b2:	e000      	b.n	800c7b6 <memp_free_pool+0x36>
    return;
 800c7b4:	bf00      	nop
}
 800c7b6:	3708      	adds	r7, #8
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	0801a5e8 	.word	0x0801a5e8
 800c7c0:	0801a664 	.word	0x0801a664
 800c7c4:	0801a63c 	.word	0x0801a63c

0800c7c8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	6039      	str	r1, [r7, #0]
 800c7d2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c7d4:	79fb      	ldrb	r3, [r7, #7]
 800c7d6:	2b0c      	cmp	r3, #12
 800c7d8:	d907      	bls.n	800c7ea <memp_free+0x22>
 800c7da:	4b0c      	ldr	r3, [pc, #48]	; (800c80c <memp_free+0x44>)
 800c7dc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c7e0:	490b      	ldr	r1, [pc, #44]	; (800c810 <memp_free+0x48>)
 800c7e2:	480c      	ldr	r0, [pc, #48]	; (800c814 <memp_free+0x4c>)
 800c7e4:	f00c fbea 	bl	8018fbc <iprintf>
 800c7e8:	e00c      	b.n	800c804 <memp_free+0x3c>

  if (mem == NULL) {
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d008      	beq.n	800c802 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c7f0:	79fb      	ldrb	r3, [r7, #7]
 800c7f2:	4a09      	ldr	r2, [pc, #36]	; (800c818 <memp_free+0x50>)
 800c7f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	f7ff ff94 	bl	800c728 <do_memp_free_pool>
 800c800:	e000      	b.n	800c804 <memp_free+0x3c>
    return;
 800c802:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	0801a5e8 	.word	0x0801a5e8
 800c810:	0801a6b8 	.word	0x0801a6b8
 800c814:	0801a63c 	.word	0x0801a63c
 800c818:	0801f540 	.word	0x0801f540

0800c81c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c81c:	b480      	push	{r7}
 800c81e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c820:	bf00      	nop
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
	...

0800c82c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b086      	sub	sp, #24
 800c830:	af00      	add	r7, sp, #0
 800c832:	60f8      	str	r0, [r7, #12]
 800c834:	60b9      	str	r1, [r7, #8]
 800c836:	607a      	str	r2, [r7, #4]
 800c838:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d108      	bne.n	800c852 <netif_add+0x26>
 800c840:	4b5b      	ldr	r3, [pc, #364]	; (800c9b0 <netif_add+0x184>)
 800c842:	f240 1227 	movw	r2, #295	; 0x127
 800c846:	495b      	ldr	r1, [pc, #364]	; (800c9b4 <netif_add+0x188>)
 800c848:	485b      	ldr	r0, [pc, #364]	; (800c9b8 <netif_add+0x18c>)
 800c84a:	f00c fbb7 	bl	8018fbc <iprintf>
 800c84e:	2300      	movs	r3, #0
 800c850:	e0a9      	b.n	800c9a6 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c854:	2b00      	cmp	r3, #0
 800c856:	d108      	bne.n	800c86a <netif_add+0x3e>
 800c858:	4b55      	ldr	r3, [pc, #340]	; (800c9b0 <netif_add+0x184>)
 800c85a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c85e:	4957      	ldr	r1, [pc, #348]	; (800c9bc <netif_add+0x190>)
 800c860:	4855      	ldr	r0, [pc, #340]	; (800c9b8 <netif_add+0x18c>)
 800c862:	f00c fbab 	bl	8018fbc <iprintf>
 800c866:	2300      	movs	r3, #0
 800c868:	e09d      	b.n	800c9a6 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c870:	4b53      	ldr	r3, [pc, #332]	; (800c9c0 <netif_add+0x194>)
 800c872:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d101      	bne.n	800c87e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c87a:	4b51      	ldr	r3, [pc, #324]	; (800c9c0 <netif_add+0x194>)
 800c87c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d101      	bne.n	800c888 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c884:	4b4e      	ldr	r3, [pc, #312]	; (800c9c0 <netif_add+0x194>)
 800c886:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2200      	movs	r2, #0
 800c898:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	4a49      	ldr	r2, [pc, #292]	; (800c9c4 <netif_add+0x198>)
 800c89e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	3324      	adds	r3, #36	; 0x24
 800c8b2:	2204      	movs	r2, #4
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f00c fbe5 	bl	8019086 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a3a      	ldr	r2, [r7, #32]
 800c8c6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c8c8:	4b3f      	ldr	r3, [pc, #252]	; (800c9c8 <netif_add+0x19c>)
 800c8ca:	781a      	ldrb	r2, [r3, #0]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8d6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	68b9      	ldr	r1, [r7, #8]
 800c8de:	68f8      	ldr	r0, [r7, #12]
 800c8e0:	f000 f914 	bl	800cb0c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	68f8      	ldr	r0, [r7, #12]
 800c8e8:	4798      	blx	r3
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d001      	beq.n	800c8f4 <netif_add+0xc8>
    return NULL;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	e058      	b.n	800c9a6 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c8fa:	2bff      	cmp	r3, #255	; 0xff
 800c8fc:	d103      	bne.n	800c906 <netif_add+0xda>
        netif->num = 0;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2200      	movs	r2, #0
 800c902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800c906:	2300      	movs	r3, #0
 800c908:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c90a:	4b30      	ldr	r3, [pc, #192]	; (800c9cc <netif_add+0x1a0>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	617b      	str	r3, [r7, #20]
 800c910:	e02b      	b.n	800c96a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c912:	697a      	ldr	r2, [r7, #20]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	429a      	cmp	r2, r3
 800c918:	d106      	bne.n	800c928 <netif_add+0xfc>
 800c91a:	4b25      	ldr	r3, [pc, #148]	; (800c9b0 <netif_add+0x184>)
 800c91c:	f240 128b 	movw	r2, #395	; 0x18b
 800c920:	492b      	ldr	r1, [pc, #172]	; (800c9d0 <netif_add+0x1a4>)
 800c922:	4825      	ldr	r0, [pc, #148]	; (800c9b8 <netif_add+0x18c>)
 800c924:	f00c fb4a 	bl	8018fbc <iprintf>
        num_netifs++;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	3301      	adds	r3, #1
 800c92c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	2bff      	cmp	r3, #255	; 0xff
 800c932:	dd06      	ble.n	800c942 <netif_add+0x116>
 800c934:	4b1e      	ldr	r3, [pc, #120]	; (800c9b0 <netif_add+0x184>)
 800c936:	f240 128d 	movw	r2, #397	; 0x18d
 800c93a:	4926      	ldr	r1, [pc, #152]	; (800c9d4 <netif_add+0x1a8>)
 800c93c:	481e      	ldr	r0, [pc, #120]	; (800c9b8 <netif_add+0x18c>)
 800c93e:	f00c fb3d 	bl	8018fbc <iprintf>
        if (netif2->num == netif->num) {
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c94e:	429a      	cmp	r2, r3
 800c950:	d108      	bne.n	800c964 <netif_add+0x138>
          netif->num++;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c958:	3301      	adds	r3, #1
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800c962:	e005      	b.n	800c970 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	617b      	str	r3, [r7, #20]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1d0      	bne.n	800c912 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1be      	bne.n	800c8f4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c97c:	2bfe      	cmp	r3, #254	; 0xfe
 800c97e:	d103      	bne.n	800c988 <netif_add+0x15c>
    netif_num = 0;
 800c980:	4b11      	ldr	r3, [pc, #68]	; (800c9c8 <netif_add+0x19c>)
 800c982:	2200      	movs	r2, #0
 800c984:	701a      	strb	r2, [r3, #0]
 800c986:	e006      	b.n	800c996 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c98e:	3301      	adds	r3, #1
 800c990:	b2da      	uxtb	r2, r3
 800c992:	4b0d      	ldr	r3, [pc, #52]	; (800c9c8 <netif_add+0x19c>)
 800c994:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c996:	4b0d      	ldr	r3, [pc, #52]	; (800c9cc <netif_add+0x1a0>)
 800c998:	681a      	ldr	r2, [r3, #0]
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c99e:	4a0b      	ldr	r2, [pc, #44]	; (800c9cc <netif_add+0x1a0>)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3718      	adds	r7, #24
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	0801a6d4 	.word	0x0801a6d4
 800c9b4:	0801a768 	.word	0x0801a768
 800c9b8:	0801a724 	.word	0x0801a724
 800c9bc:	0801a784 	.word	0x0801a784
 800c9c0:	0801f5c4 	.word	0x0801f5c4
 800c9c4:	0800cdef 	.word	0x0800cdef
 800c9c8:	2000ced8 	.word	0x2000ced8
 800c9cc:	2000ced0 	.word	0x2000ced0
 800c9d0:	0801a7a8 	.word	0x0801a7a8
 800c9d4:	0801a7bc 	.word	0x0801a7bc

0800c9d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b082      	sub	sp, #8
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f002 fe37 	bl	800f658 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f007 fea5 	bl	801473c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c9f2:	bf00      	nop
 800c9f4:	3708      	adds	r7, #8
 800c9f6:	46bd      	mov	sp, r7
 800c9f8:	bd80      	pop	{r7, pc}
	...

0800c9fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b086      	sub	sp, #24
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	60f8      	str	r0, [r7, #12]
 800ca04:	60b9      	str	r1, [r7, #8]
 800ca06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d106      	bne.n	800ca1c <netif_do_set_ipaddr+0x20>
 800ca0e:	4b1d      	ldr	r3, [pc, #116]	; (800ca84 <netif_do_set_ipaddr+0x88>)
 800ca10:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ca14:	491c      	ldr	r1, [pc, #112]	; (800ca88 <netif_do_set_ipaddr+0x8c>)
 800ca16:	481d      	ldr	r0, [pc, #116]	; (800ca8c <netif_do_set_ipaddr+0x90>)
 800ca18:	f00c fad0 	bl	8018fbc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d106      	bne.n	800ca30 <netif_do_set_ipaddr+0x34>
 800ca22:	4b18      	ldr	r3, [pc, #96]	; (800ca84 <netif_do_set_ipaddr+0x88>)
 800ca24:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ca28:	4917      	ldr	r1, [pc, #92]	; (800ca88 <netif_do_set_ipaddr+0x8c>)
 800ca2a:	4818      	ldr	r0, [pc, #96]	; (800ca8c <netif_do_set_ipaddr+0x90>)
 800ca2c:	f00c fac6 	bl	8018fbc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	681a      	ldr	r2, [r3, #0]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	3304      	adds	r3, #4
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d01c      	beq.n	800ca78 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3304      	adds	r3, #4
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800ca4e:	f107 0314 	add.w	r3, r7, #20
 800ca52:	4619      	mov	r1, r3
 800ca54:	6878      	ldr	r0, [r7, #4]
 800ca56:	f7ff ffbf 	bl	800c9d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <netif_do_set_ipaddr+0x6a>
 800ca60:	68bb      	ldr	r3, [r7, #8]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	e000      	b.n	800ca68 <netif_do_set_ipaddr+0x6c>
 800ca66:	2300      	movs	r3, #0
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ca6c:	2101      	movs	r1, #1
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f000 f8d2 	bl	800cc18 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ca74:	2301      	movs	r3, #1
 800ca76:	e000      	b.n	800ca7a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3718      	adds	r7, #24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	0801a6d4 	.word	0x0801a6d4
 800ca88:	0801a7ec 	.word	0x0801a7ec
 800ca8c:	0801a724 	.word	0x0801a724

0800ca90 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60f8      	str	r0, [r7, #12]
 800ca98:	60b9      	str	r1, [r7, #8]
 800ca9a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	681a      	ldr	r2, [r3, #0]
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	3308      	adds	r3, #8
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d00a      	beq.n	800cac0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800caaa:	68bb      	ldr	r3, [r7, #8]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <netif_do_set_netmask+0x26>
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	e000      	b.n	800cab8 <netif_do_set_netmask+0x28>
 800cab6:	2300      	movs	r3, #0
 800cab8:	68fa      	ldr	r2, [r7, #12]
 800caba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cabc:	2301      	movs	r3, #1
 800cabe:	e000      	b.n	800cac2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3714      	adds	r7, #20
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cace:	b480      	push	{r7}
 800cad0:	b085      	sub	sp, #20
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	60f8      	str	r0, [r7, #12]
 800cad6:	60b9      	str	r1, [r7, #8]
 800cad8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cada:	68bb      	ldr	r3, [r7, #8]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	330c      	adds	r3, #12
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	429a      	cmp	r2, r3
 800cae6:	d00a      	beq.n	800cafe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d002      	beq.n	800caf4 <netif_do_set_gw+0x26>
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	e000      	b.n	800caf6 <netif_do_set_gw+0x28>
 800caf4:	2300      	movs	r3, #0
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cafa:	2301      	movs	r3, #1
 800cafc:	e000      	b.n	800cb00 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cb1e:	2300      	movs	r3, #0
 800cb20:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cb22:	68bb      	ldr	r3, [r7, #8]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d101      	bne.n	800cb2c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cb28:	4b1c      	ldr	r3, [pc, #112]	; (800cb9c <netif_set_addr+0x90>)
 800cb2a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d101      	bne.n	800cb36 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cb32:	4b1a      	ldr	r3, [pc, #104]	; (800cb9c <netif_set_addr+0x90>)
 800cb34:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cb36:	683b      	ldr	r3, [r7, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d101      	bne.n	800cb40 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cb3c:	4b17      	ldr	r3, [pc, #92]	; (800cb9c <netif_set_addr+0x90>)
 800cb3e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d003      	beq.n	800cb4e <netif_set_addr+0x42>
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d101      	bne.n	800cb52 <netif_set_addr+0x46>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	e000      	b.n	800cb54 <netif_set_addr+0x48>
 800cb52:	2300      	movs	r3, #0
 800cb54:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cb56:	697b      	ldr	r3, [r7, #20]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d006      	beq.n	800cb6a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cb5c:	f107 0310 	add.w	r3, r7, #16
 800cb60:	461a      	mov	r2, r3
 800cb62:	68b9      	ldr	r1, [r7, #8]
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f7ff ff49 	bl	800c9fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	6879      	ldr	r1, [r7, #4]
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f7ff ff8e 	bl	800ca90 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cb74:	69ba      	ldr	r2, [r7, #24]
 800cb76:	6839      	ldr	r1, [r7, #0]
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f7ff ffa8 	bl	800cace <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cb7e:	697b      	ldr	r3, [r7, #20]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d106      	bne.n	800cb92 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cb84:	f107 0310 	add.w	r3, r7, #16
 800cb88:	461a      	mov	r2, r3
 800cb8a:	68b9      	ldr	r1, [r7, #8]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f7ff ff35 	bl	800c9fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cb92:	bf00      	nop
 800cb94:	3720      	adds	r7, #32
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	0801f5c4 	.word	0x0801f5c4

0800cba0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b083      	sub	sp, #12
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cba8:	4a04      	ldr	r2, [pc, #16]	; (800cbbc <netif_set_default+0x1c>)
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cbae:	bf00      	nop
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr
 800cbba:	bf00      	nop
 800cbbc:	2000ced4 	.word	0x2000ced4

0800cbc0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b082      	sub	sp, #8
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d107      	bne.n	800cbde <netif_set_up+0x1e>
 800cbce:	4b0f      	ldr	r3, [pc, #60]	; (800cc0c <netif_set_up+0x4c>)
 800cbd0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800cbd4:	490e      	ldr	r1, [pc, #56]	; (800cc10 <netif_set_up+0x50>)
 800cbd6:	480f      	ldr	r0, [pc, #60]	; (800cc14 <netif_set_up+0x54>)
 800cbd8:	f00c f9f0 	bl	8018fbc <iprintf>
 800cbdc:	e013      	b.n	800cc06 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d10c      	bne.n	800cc06 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cbf2:	f043 0301 	orr.w	r3, r3, #1
 800cbf6:	b2da      	uxtb	r2, r3
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cbfe:	2103      	movs	r1, #3
 800cc00:	6878      	ldr	r0, [r7, #4]
 800cc02:	f000 f809 	bl	800cc18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	0801a6d4 	.word	0x0801a6d4
 800cc10:	0801a85c 	.word	0x0801a85c
 800cc14:	0801a724 	.word	0x0801a724

0800cc18 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d106      	bne.n	800cc38 <netif_issue_reports+0x20>
 800cc2a:	4b18      	ldr	r3, [pc, #96]	; (800cc8c <netif_issue_reports+0x74>)
 800cc2c:	f240 326d 	movw	r2, #877	; 0x36d
 800cc30:	4917      	ldr	r1, [pc, #92]	; (800cc90 <netif_issue_reports+0x78>)
 800cc32:	4818      	ldr	r0, [pc, #96]	; (800cc94 <netif_issue_reports+0x7c>)
 800cc34:	f00c f9c2 	bl	8018fbc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc3e:	f003 0304 	and.w	r3, r3, #4
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d01e      	beq.n	800cc84 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc4c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d017      	beq.n	800cc84 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc54:	78fb      	ldrb	r3, [r7, #3]
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d013      	beq.n	800cc86 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	3304      	adds	r3, #4
 800cc62:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00e      	beq.n	800cc86 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cc6e:	f003 0308 	and.w	r3, r3, #8
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d007      	beq.n	800cc86 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3304      	adds	r3, #4
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f00a fb5f 	bl	8017340 <etharp_request>
 800cc82:	e000      	b.n	800cc86 <netif_issue_reports+0x6e>
    return;
 800cc84:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	0801a6d4 	.word	0x0801a6d4
 800cc90:	0801a878 	.word	0x0801a878
 800cc94:	0801a724 	.word	0x0801a724

0800cc98 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b082      	sub	sp, #8
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d107      	bne.n	800ccb6 <netif_set_down+0x1e>
 800cca6:	4b12      	ldr	r3, [pc, #72]	; (800ccf0 <netif_set_down+0x58>)
 800cca8:	f240 329b 	movw	r2, #923	; 0x39b
 800ccac:	4911      	ldr	r1, [pc, #68]	; (800ccf4 <netif_set_down+0x5c>)
 800ccae:	4812      	ldr	r0, [pc, #72]	; (800ccf8 <netif_set_down+0x60>)
 800ccb0:	f00c f984 	bl	8018fbc <iprintf>
 800ccb4:	e019      	b.n	800ccea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccbc:	f003 0301 	and.w	r3, r3, #1
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d012      	beq.n	800ccea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccca:	f023 0301 	bic.w	r3, r3, #1
 800ccce:	b2da      	uxtb	r2, r3
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ccdc:	f003 0308 	and.w	r3, r3, #8
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d002      	beq.n	800ccea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f009 fee5 	bl	8016ab4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	0801a6d4 	.word	0x0801a6d4
 800ccf4:	0801a89c 	.word	0x0801a89c
 800ccf8:	0801a724 	.word	0x0801a724

0800ccfc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b082      	sub	sp, #8
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d107      	bne.n	800cd1a <netif_set_link_up+0x1e>
 800cd0a:	4b15      	ldr	r3, [pc, #84]	; (800cd60 <netif_set_link_up+0x64>)
 800cd0c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cd10:	4914      	ldr	r1, [pc, #80]	; (800cd64 <netif_set_link_up+0x68>)
 800cd12:	4815      	ldr	r0, [pc, #84]	; (800cd68 <netif_set_link_up+0x6c>)
 800cd14:	f00c f952 	bl	8018fbc <iprintf>
 800cd18:	e01e      	b.n	800cd58 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd20:	f003 0304 	and.w	r3, r3, #4
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d117      	bne.n	800cd58 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd2e:	f043 0304 	orr.w	r3, r3, #4
 800cd32:	b2da      	uxtb	r2, r3
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f008 f92a 	bl	8014f94 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cd40:	2103      	movs	r1, #3
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f7ff ff68 	bl	800cc18 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	69db      	ldr	r3, [r3, #28]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d003      	beq.n	800cd58 <netif_set_link_up+0x5c>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	69db      	ldr	r3, [r3, #28]
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cd58:	3708      	adds	r7, #8
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	0801a6d4 	.word	0x0801a6d4
 800cd64:	0801a8bc 	.word	0x0801a8bc
 800cd68:	0801a724 	.word	0x0801a724

0800cd6c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b082      	sub	sp, #8
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d107      	bne.n	800cd8a <netif_set_link_down+0x1e>
 800cd7a:	4b11      	ldr	r3, [pc, #68]	; (800cdc0 <netif_set_link_down+0x54>)
 800cd7c:	f240 4206 	movw	r2, #1030	; 0x406
 800cd80:	4910      	ldr	r1, [pc, #64]	; (800cdc4 <netif_set_link_down+0x58>)
 800cd82:	4811      	ldr	r0, [pc, #68]	; (800cdc8 <netif_set_link_down+0x5c>)
 800cd84:	f00c f91a 	bl	8018fbc <iprintf>
 800cd88:	e017      	b.n	800cdba <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd90:	f003 0304 	and.w	r3, r3, #4
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d010      	beq.n	800cdba <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cd9e:	f023 0304 	bic.w	r3, r3, #4
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	69db      	ldr	r3, [r3, #28]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d003      	beq.n	800cdba <netif_set_link_down+0x4e>
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cdba:	3708      	adds	r7, #8
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	0801a6d4 	.word	0x0801a6d4
 800cdc4:	0801a8e0 	.word	0x0801a8e0
 800cdc8:	0801a724 	.word	0x0801a724

0800cdcc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cdcc:	b480      	push	{r7}
 800cdce:	b083      	sub	sp, #12
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	61da      	str	r2, [r3, #28]
  }
}
 800cde2:	bf00      	nop
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b085      	sub	sp, #20
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cdfa:	f06f 030b 	mvn.w	r3, #11
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3714      	adds	r7, #20
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
	...

0800ce0c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d013      	beq.n	800ce44 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ce1c:	4b0d      	ldr	r3, [pc, #52]	; (800ce54 <netif_get_by_index+0x48>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	e00c      	b.n	800ce3e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b2db      	uxtb	r3, r3
 800ce2e:	79fa      	ldrb	r2, [r7, #7]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d101      	bne.n	800ce38 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	e006      	b.n	800ce46 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1ef      	bne.n	800ce24 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3714      	adds	r7, #20
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr
 800ce52:	bf00      	nop
 800ce54:	2000ced0 	.word	0x2000ced0

0800ce58 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ce5e:	f00b ff11 	bl	8018c84 <sys_arch_protect>
 800ce62:	6038      	str	r0, [r7, #0]
 800ce64:	4b0d      	ldr	r3, [pc, #52]	; (800ce9c <pbuf_free_ooseq+0x44>)
 800ce66:	2200      	movs	r2, #0
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	6838      	ldr	r0, [r7, #0]
 800ce6c:	f00b ff18 	bl	8018ca0 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce70:	4b0b      	ldr	r3, [pc, #44]	; (800cea0 <pbuf_free_ooseq+0x48>)
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	607b      	str	r3, [r7, #4]
 800ce76:	e00a      	b.n	800ce8e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d003      	beq.n	800ce88 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f002 fc27 	bl	800f6d4 <tcp_free_ooseq>
      return;
 800ce86:	e005      	b.n	800ce94 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	607b      	str	r3, [r7, #4]
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d1f1      	bne.n	800ce78 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ce94:	3708      	adds	r7, #8
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	2000ced9 	.word	0x2000ced9
 800cea0:	2000cee8 	.word	0x2000cee8

0800cea4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b082      	sub	sp, #8
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ceac:	f7ff ffd4 	bl	800ce58 <pbuf_free_ooseq>
}
 800ceb0:	bf00      	nop
 800ceb2:	3708      	adds	r7, #8
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b082      	sub	sp, #8
 800cebc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cebe:	f00b fee1 	bl	8018c84 <sys_arch_protect>
 800cec2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cec4:	4b0f      	ldr	r3, [pc, #60]	; (800cf04 <pbuf_pool_is_empty+0x4c>)
 800cec6:	781b      	ldrb	r3, [r3, #0]
 800cec8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800ceca:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <pbuf_pool_is_empty+0x4c>)
 800cecc:	2201      	movs	r2, #1
 800cece:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f00b fee5 	bl	8018ca0 <sys_arch_unprotect>

  if (!queued) {
 800ced6:	78fb      	ldrb	r3, [r7, #3]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d10f      	bne.n	800cefc <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cedc:	2100      	movs	r1, #0
 800cede:	480a      	ldr	r0, [pc, #40]	; (800cf08 <pbuf_pool_is_empty+0x50>)
 800cee0:	f7fd fb6c 	bl	800a5bc <tcpip_try_callback>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d008      	beq.n	800cefc <pbuf_pool_is_empty+0x44>
 800ceea:	f00b fecb 	bl	8018c84 <sys_arch_protect>
 800ceee:	6078      	str	r0, [r7, #4]
 800cef0:	4b04      	ldr	r3, [pc, #16]	; (800cf04 <pbuf_pool_is_empty+0x4c>)
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f00b fed2 	bl	8018ca0 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cefc:	bf00      	nop
 800cefe:	3708      	adds	r7, #8
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	2000ced9 	.word	0x2000ced9
 800cf08:	0800cea5 	.word	0x0800cea5

0800cf0c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	60b9      	str	r1, [r7, #8]
 800cf16:	4611      	mov	r1, r2
 800cf18:	461a      	mov	r2, r3
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	80fb      	strh	r3, [r7, #6]
 800cf1e:	4613      	mov	r3, r2
 800cf20:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	2200      	movs	r2, #0
 800cf26:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	88fa      	ldrh	r2, [r7, #6]
 800cf32:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	88ba      	ldrh	r2, [r7, #4]
 800cf38:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cf3a:	8b3b      	ldrh	r3, [r7, #24]
 800cf3c:	b2da      	uxtb	r2, r3
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	7f3a      	ldrb	r2, [r7, #28]
 800cf46:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	2201      	movs	r2, #1
 800cf4c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	2200      	movs	r2, #0
 800cf52:	73da      	strb	r2, [r3, #15]
}
 800cf54:	bf00      	nop
 800cf56:	3714      	adds	r7, #20
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5e:	4770      	bx	lr

0800cf60 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b08c      	sub	sp, #48	; 0x30
 800cf64:	af02      	add	r7, sp, #8
 800cf66:	4603      	mov	r3, r0
 800cf68:	71fb      	strb	r3, [r7, #7]
 800cf6a:	460b      	mov	r3, r1
 800cf6c:	80bb      	strh	r3, [r7, #4]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800cf76:	887b      	ldrh	r3, [r7, #2]
 800cf78:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cf7c:	d07f      	beq.n	800d07e <pbuf_alloc+0x11e>
 800cf7e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800cf82:	f300 80c8 	bgt.w	800d116 <pbuf_alloc+0x1b6>
 800cf86:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cf8a:	d010      	beq.n	800cfae <pbuf_alloc+0x4e>
 800cf8c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800cf90:	f300 80c1 	bgt.w	800d116 <pbuf_alloc+0x1b6>
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	d002      	beq.n	800cf9e <pbuf_alloc+0x3e>
 800cf98:	2b41      	cmp	r3, #65	; 0x41
 800cf9a:	f040 80bc 	bne.w	800d116 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cf9e:	887a      	ldrh	r2, [r7, #2]
 800cfa0:	88bb      	ldrh	r3, [r7, #4]
 800cfa2:	4619      	mov	r1, r3
 800cfa4:	2000      	movs	r0, #0
 800cfa6:	f000 f8d1 	bl	800d14c <pbuf_alloc_reference>
 800cfaa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800cfac:	e0bd      	b.n	800d12a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800cfb6:	88bb      	ldrh	r3, [r7, #4]
 800cfb8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cfba:	200c      	movs	r0, #12
 800cfbc:	f7ff fb8e 	bl	800c6dc <memp_malloc>
 800cfc0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d109      	bne.n	800cfdc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cfc8:	f7ff ff76 	bl	800ceb8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d002      	beq.n	800cfd8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cfd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cfd4:	f000 faa8 	bl	800d528 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	e0a7      	b.n	800d12c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cfdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfde:	3303      	adds	r3, #3
 800cfe0:	b29b      	uxth	r3, r3
 800cfe2:	f023 0303 	bic.w	r3, r3, #3
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	8b7a      	ldrh	r2, [r7, #26]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	bf28      	it	cs
 800cff4:	4613      	movcs	r3, r2
 800cff6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cff8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cffa:	3310      	adds	r3, #16
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	4413      	add	r3, r2
 800d000:	3303      	adds	r3, #3
 800d002:	f023 0303 	bic.w	r3, r3, #3
 800d006:	4618      	mov	r0, r3
 800d008:	89f9      	ldrh	r1, [r7, #14]
 800d00a:	8b7a      	ldrh	r2, [r7, #26]
 800d00c:	2300      	movs	r3, #0
 800d00e:	9301      	str	r3, [sp, #4]
 800d010:	887b      	ldrh	r3, [r7, #2]
 800d012:	9300      	str	r3, [sp, #0]
 800d014:	460b      	mov	r3, r1
 800d016:	4601      	mov	r1, r0
 800d018:	6938      	ldr	r0, [r7, #16]
 800d01a:	f7ff ff77 	bl	800cf0c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	685b      	ldr	r3, [r3, #4]
 800d022:	f003 0303 	and.w	r3, r3, #3
 800d026:	2b00      	cmp	r3, #0
 800d028:	d006      	beq.n	800d038 <pbuf_alloc+0xd8>
 800d02a:	4b42      	ldr	r3, [pc, #264]	; (800d134 <pbuf_alloc+0x1d4>)
 800d02c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d030:	4941      	ldr	r1, [pc, #260]	; (800d138 <pbuf_alloc+0x1d8>)
 800d032:	4842      	ldr	r0, [pc, #264]	; (800d13c <pbuf_alloc+0x1dc>)
 800d034:	f00b ffc2 	bl	8018fbc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d038:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d03a:	3303      	adds	r3, #3
 800d03c:	f023 0303 	bic.w	r3, r3, #3
 800d040:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d044:	d106      	bne.n	800d054 <pbuf_alloc+0xf4>
 800d046:	4b3b      	ldr	r3, [pc, #236]	; (800d134 <pbuf_alloc+0x1d4>)
 800d048:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d04c:	493c      	ldr	r1, [pc, #240]	; (800d140 <pbuf_alloc+0x1e0>)
 800d04e:	483b      	ldr	r0, [pc, #236]	; (800d13c <pbuf_alloc+0x1dc>)
 800d050:	f00b ffb4 	bl	8018fbc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d056:	2b00      	cmp	r3, #0
 800d058:	d102      	bne.n	800d060 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	627b      	str	r3, [r7, #36]	; 0x24
 800d05e:	e002      	b.n	800d066 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d060:	69fb      	ldr	r3, [r7, #28]
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d06a:	8b7a      	ldrh	r2, [r7, #26]
 800d06c:	89fb      	ldrh	r3, [r7, #14]
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d076:	8b7b      	ldrh	r3, [r7, #26]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d19e      	bne.n	800cfba <pbuf_alloc+0x5a>
      break;
 800d07c:	e055      	b.n	800d12a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d07e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d080:	3303      	adds	r3, #3
 800d082:	b29b      	uxth	r3, r3
 800d084:	f023 0303 	bic.w	r3, r3, #3
 800d088:	b29a      	uxth	r2, r3
 800d08a:	88bb      	ldrh	r3, [r7, #4]
 800d08c:	3303      	adds	r3, #3
 800d08e:	b29b      	uxth	r3, r3
 800d090:	f023 0303 	bic.w	r3, r3, #3
 800d094:	b29b      	uxth	r3, r3
 800d096:	4413      	add	r3, r2
 800d098:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d09a:	8b3b      	ldrh	r3, [r7, #24]
 800d09c:	3310      	adds	r3, #16
 800d09e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d0a0:	8b3a      	ldrh	r2, [r7, #24]
 800d0a2:	88bb      	ldrh	r3, [r7, #4]
 800d0a4:	3303      	adds	r3, #3
 800d0a6:	f023 0303 	bic.w	r3, r3, #3
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d306      	bcc.n	800d0bc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d0ae:	8afa      	ldrh	r2, [r7, #22]
 800d0b0:	88bb      	ldrh	r3, [r7, #4]
 800d0b2:	3303      	adds	r3, #3
 800d0b4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d201      	bcs.n	800d0c0 <pbuf_alloc+0x160>
        return NULL;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e035      	b.n	800d12c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d0c0:	8afb      	ldrh	r3, [r7, #22]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff f966 	bl	800c394 <mem_malloc>
 800d0c8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d101      	bne.n	800d0d4 <pbuf_alloc+0x174>
        return NULL;
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	e02b      	b.n	800d12c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d0d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d0d6:	3310      	adds	r3, #16
 800d0d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0da:	4413      	add	r3, r2
 800d0dc:	3303      	adds	r3, #3
 800d0de:	f023 0303 	bic.w	r3, r3, #3
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	88b9      	ldrh	r1, [r7, #4]
 800d0e6:	88ba      	ldrh	r2, [r7, #4]
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	9301      	str	r3, [sp, #4]
 800d0ec:	887b      	ldrh	r3, [r7, #2]
 800d0ee:	9300      	str	r3, [sp, #0]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	4601      	mov	r1, r0
 800d0f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d0f6:	f7ff ff09 	bl	800cf0c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	f003 0303 	and.w	r3, r3, #3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d010      	beq.n	800d128 <pbuf_alloc+0x1c8>
 800d106:	4b0b      	ldr	r3, [pc, #44]	; (800d134 <pbuf_alloc+0x1d4>)
 800d108:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d10c:	490d      	ldr	r1, [pc, #52]	; (800d144 <pbuf_alloc+0x1e4>)
 800d10e:	480b      	ldr	r0, [pc, #44]	; (800d13c <pbuf_alloc+0x1dc>)
 800d110:	f00b ff54 	bl	8018fbc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d114:	e008      	b.n	800d128 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d116:	4b07      	ldr	r3, [pc, #28]	; (800d134 <pbuf_alloc+0x1d4>)
 800d118:	f240 1227 	movw	r2, #295	; 0x127
 800d11c:	490a      	ldr	r1, [pc, #40]	; (800d148 <pbuf_alloc+0x1e8>)
 800d11e:	4807      	ldr	r0, [pc, #28]	; (800d13c <pbuf_alloc+0x1dc>)
 800d120:	f00b ff4c 	bl	8018fbc <iprintf>
      return NULL;
 800d124:	2300      	movs	r3, #0
 800d126:	e001      	b.n	800d12c <pbuf_alloc+0x1cc>
      break;
 800d128:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3728      	adds	r7, #40	; 0x28
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	0801a904 	.word	0x0801a904
 800d138:	0801a934 	.word	0x0801a934
 800d13c:	0801a964 	.word	0x0801a964
 800d140:	0801a98c 	.word	0x0801a98c
 800d144:	0801a9c0 	.word	0x0801a9c0
 800d148:	0801a9ec 	.word	0x0801a9ec

0800d14c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af02      	add	r7, sp, #8
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	807b      	strh	r3, [r7, #2]
 800d158:	4613      	mov	r3, r2
 800d15a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d15c:	883b      	ldrh	r3, [r7, #0]
 800d15e:	2b41      	cmp	r3, #65	; 0x41
 800d160:	d009      	beq.n	800d176 <pbuf_alloc_reference+0x2a>
 800d162:	883b      	ldrh	r3, [r7, #0]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d006      	beq.n	800d176 <pbuf_alloc_reference+0x2a>
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <pbuf_alloc_reference+0x5c>)
 800d16a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d16e:	490f      	ldr	r1, [pc, #60]	; (800d1ac <pbuf_alloc_reference+0x60>)
 800d170:	480f      	ldr	r0, [pc, #60]	; (800d1b0 <pbuf_alloc_reference+0x64>)
 800d172:	f00b ff23 	bl	8018fbc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d176:	200b      	movs	r0, #11
 800d178:	f7ff fab0 	bl	800c6dc <memp_malloc>
 800d17c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d101      	bne.n	800d188 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d184:	2300      	movs	r3, #0
 800d186:	e00b      	b.n	800d1a0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d188:	8879      	ldrh	r1, [r7, #2]
 800d18a:	887a      	ldrh	r2, [r7, #2]
 800d18c:	2300      	movs	r3, #0
 800d18e:	9301      	str	r3, [sp, #4]
 800d190:	883b      	ldrh	r3, [r7, #0]
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	460b      	mov	r3, r1
 800d196:	6879      	ldr	r1, [r7, #4]
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f7ff feb7 	bl	800cf0c <pbuf_init_alloced_pbuf>
  return p;
 800d19e:	68fb      	ldr	r3, [r7, #12]
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3710      	adds	r7, #16
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	0801a904 	.word	0x0801a904
 800d1ac:	0801aa08 	.word	0x0801aa08
 800d1b0:	0801a964 	.word	0x0801a964

0800d1b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b088      	sub	sp, #32
 800d1b8:	af02      	add	r7, sp, #8
 800d1ba:	607b      	str	r3, [r7, #4]
 800d1bc:	4603      	mov	r3, r0
 800d1be:	73fb      	strb	r3, [r7, #15]
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	81bb      	strh	r3, [r7, #12]
 800d1c4:	4613      	mov	r3, r2
 800d1c6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d1cc:	8a7b      	ldrh	r3, [r7, #18]
 800d1ce:	3303      	adds	r3, #3
 800d1d0:	f023 0203 	bic.w	r2, r3, #3
 800d1d4:	89bb      	ldrh	r3, [r7, #12]
 800d1d6:	441a      	add	r2, r3
 800d1d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d1da:	429a      	cmp	r2, r3
 800d1dc:	d901      	bls.n	800d1e2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	e018      	b.n	800d214 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d1e2:	6a3b      	ldr	r3, [r7, #32]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d007      	beq.n	800d1f8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d1e8:	8a7b      	ldrh	r3, [r7, #18]
 800d1ea:	3303      	adds	r3, #3
 800d1ec:	f023 0303 	bic.w	r3, r3, #3
 800d1f0:	6a3a      	ldr	r2, [r7, #32]
 800d1f2:	4413      	add	r3, r2
 800d1f4:	617b      	str	r3, [r7, #20]
 800d1f6:	e001      	b.n	800d1fc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	89b9      	ldrh	r1, [r7, #12]
 800d200:	89ba      	ldrh	r2, [r7, #12]
 800d202:	2302      	movs	r3, #2
 800d204:	9301      	str	r3, [sp, #4]
 800d206:	897b      	ldrh	r3, [r7, #10]
 800d208:	9300      	str	r3, [sp, #0]
 800d20a:	460b      	mov	r3, r1
 800d20c:	6979      	ldr	r1, [r7, #20]
 800d20e:	f7ff fe7d 	bl	800cf0c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d212:	687b      	ldr	r3, [r7, #4]
}
 800d214:	4618      	mov	r0, r3
 800d216:	3718      	adds	r7, #24
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b084      	sub	sp, #16
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
 800d224:	460b      	mov	r3, r1
 800d226:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d106      	bne.n	800d23c <pbuf_realloc+0x20>
 800d22e:	4b3a      	ldr	r3, [pc, #232]	; (800d318 <pbuf_realloc+0xfc>)
 800d230:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d234:	4939      	ldr	r1, [pc, #228]	; (800d31c <pbuf_realloc+0x100>)
 800d236:	483a      	ldr	r0, [pc, #232]	; (800d320 <pbuf_realloc+0x104>)
 800d238:	f00b fec0 	bl	8018fbc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	891b      	ldrh	r3, [r3, #8]
 800d240:	887a      	ldrh	r2, [r7, #2]
 800d242:	429a      	cmp	r2, r3
 800d244:	d263      	bcs.n	800d30e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	891a      	ldrh	r2, [r3, #8]
 800d24a:	887b      	ldrh	r3, [r7, #2]
 800d24c:	1ad3      	subs	r3, r2, r3
 800d24e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d250:	887b      	ldrh	r3, [r7, #2]
 800d252:	817b      	strh	r3, [r7, #10]
  q = p;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d258:	e018      	b.n	800d28c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	895b      	ldrh	r3, [r3, #10]
 800d25e:	897a      	ldrh	r2, [r7, #10]
 800d260:	1ad3      	subs	r3, r2, r3
 800d262:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	891a      	ldrh	r2, [r3, #8]
 800d268:	893b      	ldrh	r3, [r7, #8]
 800d26a:	1ad3      	subs	r3, r2, r3
 800d26c:	b29a      	uxth	r2, r3
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d106      	bne.n	800d28c <pbuf_realloc+0x70>
 800d27e:	4b26      	ldr	r3, [pc, #152]	; (800d318 <pbuf_realloc+0xfc>)
 800d280:	f240 12af 	movw	r2, #431	; 0x1af
 800d284:	4927      	ldr	r1, [pc, #156]	; (800d324 <pbuf_realloc+0x108>)
 800d286:	4826      	ldr	r0, [pc, #152]	; (800d320 <pbuf_realloc+0x104>)
 800d288:	f00b fe98 	bl	8018fbc <iprintf>
  while (rem_len > q->len) {
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	895b      	ldrh	r3, [r3, #10]
 800d290:	897a      	ldrh	r2, [r7, #10]
 800d292:	429a      	cmp	r2, r3
 800d294:	d8e1      	bhi.n	800d25a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	7b1b      	ldrb	r3, [r3, #12]
 800d29a:	f003 030f 	and.w	r3, r3, #15
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d121      	bne.n	800d2e6 <pbuf_realloc+0xca>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	895b      	ldrh	r3, [r3, #10]
 800d2a6:	897a      	ldrh	r2, [r7, #10]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d01c      	beq.n	800d2e6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	7b5b      	ldrb	r3, [r3, #13]
 800d2b0:	f003 0302 	and.w	r3, r3, #2
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d116      	bne.n	800d2e6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	685a      	ldr	r2, [r3, #4]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	1ad3      	subs	r3, r2, r3
 800d2c0:	b29a      	uxth	r2, r3
 800d2c2:	897b      	ldrh	r3, [r7, #10]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	4619      	mov	r1, r3
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f7fe ff58 	bl	800c180 <mem_trim>
 800d2d0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d106      	bne.n	800d2e6 <pbuf_realloc+0xca>
 800d2d8:	4b0f      	ldr	r3, [pc, #60]	; (800d318 <pbuf_realloc+0xfc>)
 800d2da:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d2de:	4912      	ldr	r1, [pc, #72]	; (800d328 <pbuf_realloc+0x10c>)
 800d2e0:	480f      	ldr	r0, [pc, #60]	; (800d320 <pbuf_realloc+0x104>)
 800d2e2:	f00b fe6b 	bl	8018fbc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	897a      	ldrh	r2, [r7, #10]
 800d2ea:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	895a      	ldrh	r2, [r3, #10]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d004      	beq.n	800d306 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4618      	mov	r0, r3
 800d302:	f000 f911 	bl	800d528 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2200      	movs	r2, #0
 800d30a:	601a      	str	r2, [r3, #0]
 800d30c:	e000      	b.n	800d310 <pbuf_realloc+0xf4>
    return;
 800d30e:	bf00      	nop

}
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	0801a904 	.word	0x0801a904
 800d31c:	0801aa1c 	.word	0x0801aa1c
 800d320:	0801a964 	.word	0x0801a964
 800d324:	0801aa34 	.word	0x0801aa34
 800d328:	0801aa4c 	.word	0x0801aa4c

0800d32c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	4613      	mov	r3, r2
 800d338:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d106      	bne.n	800d34e <pbuf_add_header_impl+0x22>
 800d340:	4b2b      	ldr	r3, [pc, #172]	; (800d3f0 <pbuf_add_header_impl+0xc4>)
 800d342:	f240 12df 	movw	r2, #479	; 0x1df
 800d346:	492b      	ldr	r1, [pc, #172]	; (800d3f4 <pbuf_add_header_impl+0xc8>)
 800d348:	482b      	ldr	r0, [pc, #172]	; (800d3f8 <pbuf_add_header_impl+0xcc>)
 800d34a:	f00b fe37 	bl	8018fbc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d003      	beq.n	800d35c <pbuf_add_header_impl+0x30>
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d35a:	d301      	bcc.n	800d360 <pbuf_add_header_impl+0x34>
    return 1;
 800d35c:	2301      	movs	r3, #1
 800d35e:	e043      	b.n	800d3e8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d101      	bne.n	800d36a <pbuf_add_header_impl+0x3e>
    return 0;
 800d366:	2300      	movs	r3, #0
 800d368:	e03e      	b.n	800d3e8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	891a      	ldrh	r2, [r3, #8]
 800d372:	8a7b      	ldrh	r3, [r7, #18]
 800d374:	4413      	add	r3, r2
 800d376:	b29b      	uxth	r3, r3
 800d378:	8a7a      	ldrh	r2, [r7, #18]
 800d37a:	429a      	cmp	r2, r3
 800d37c:	d901      	bls.n	800d382 <pbuf_add_header_impl+0x56>
    return 1;
 800d37e:	2301      	movs	r3, #1
 800d380:	e032      	b.n	800d3e8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	7b1b      	ldrb	r3, [r3, #12]
 800d386:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d388:	8a3b      	ldrh	r3, [r7, #16]
 800d38a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00c      	beq.n	800d3ac <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	425b      	negs	r3, r3
 800d39a:	4413      	add	r3, r2
 800d39c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	3310      	adds	r3, #16
 800d3a2:	697a      	ldr	r2, [r7, #20]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d20d      	bcs.n	800d3c4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d3a8:	2301      	movs	r3, #1
 800d3aa:	e01d      	b.n	800d3e8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d3ac:	79fb      	ldrb	r3, [r7, #7]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d006      	beq.n	800d3c0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	685a      	ldr	r2, [r3, #4]
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	425b      	negs	r3, r3
 800d3ba:	4413      	add	r3, r2
 800d3bc:	617b      	str	r3, [r7, #20]
 800d3be:	e001      	b.n	800d3c4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e011      	b.n	800d3e8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	895a      	ldrh	r2, [r3, #10]
 800d3ce:	8a7b      	ldrh	r3, [r7, #18]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	b29a      	uxth	r2, r3
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	891a      	ldrh	r2, [r3, #8]
 800d3dc:	8a7b      	ldrh	r3, [r7, #18]
 800d3de:	4413      	add	r3, r2
 800d3e0:	b29a      	uxth	r2, r3
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	811a      	strh	r2, [r3, #8]


  return 0;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3718      	adds	r7, #24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	0801a904 	.word	0x0801a904
 800d3f4:	0801aa68 	.word	0x0801aa68
 800d3f8:	0801a964 	.word	0x0801a964

0800d3fc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d406:	2200      	movs	r2, #0
 800d408:	6839      	ldr	r1, [r7, #0]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7ff ff8e 	bl	800d32c <pbuf_add_header_impl>
 800d410:	4603      	mov	r3, r0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
	...

0800d41c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	b084      	sub	sp, #16
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d106      	bne.n	800d43a <pbuf_remove_header+0x1e>
 800d42c:	4b20      	ldr	r3, [pc, #128]	; (800d4b0 <pbuf_remove_header+0x94>)
 800d42e:	f240 224b 	movw	r2, #587	; 0x24b
 800d432:	4920      	ldr	r1, [pc, #128]	; (800d4b4 <pbuf_remove_header+0x98>)
 800d434:	4820      	ldr	r0, [pc, #128]	; (800d4b8 <pbuf_remove_header+0x9c>)
 800d436:	f00b fdc1 	bl	8018fbc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d003      	beq.n	800d448 <pbuf_remove_header+0x2c>
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d446:	d301      	bcc.n	800d44c <pbuf_remove_header+0x30>
    return 1;
 800d448:	2301      	movs	r3, #1
 800d44a:	e02c      	b.n	800d4a6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <pbuf_remove_header+0x3a>
    return 0;
 800d452:	2300      	movs	r3, #0
 800d454:	e027      	b.n	800d4a6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	895b      	ldrh	r3, [r3, #10]
 800d45e:	89fa      	ldrh	r2, [r7, #14]
 800d460:	429a      	cmp	r2, r3
 800d462:	d908      	bls.n	800d476 <pbuf_remove_header+0x5a>
 800d464:	4b12      	ldr	r3, [pc, #72]	; (800d4b0 <pbuf_remove_header+0x94>)
 800d466:	f240 2255 	movw	r2, #597	; 0x255
 800d46a:	4914      	ldr	r1, [pc, #80]	; (800d4bc <pbuf_remove_header+0xa0>)
 800d46c:	4812      	ldr	r0, [pc, #72]	; (800d4b8 <pbuf_remove_header+0x9c>)
 800d46e:	f00b fda5 	bl	8018fbc <iprintf>
 800d472:	2301      	movs	r3, #1
 800d474:	e017      	b.n	800d4a6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	685b      	ldr	r3, [r3, #4]
 800d47a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	685a      	ldr	r2, [r3, #4]
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	441a      	add	r2, r3
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	895a      	ldrh	r2, [r3, #10]
 800d48c:	89fb      	ldrh	r3, [r7, #14]
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	b29a      	uxth	r2, r3
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	891a      	ldrh	r2, [r3, #8]
 800d49a:	89fb      	ldrh	r3, [r7, #14]
 800d49c:	1ad3      	subs	r3, r2, r3
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d4a4:	2300      	movs	r3, #0
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}
 800d4ae:	bf00      	nop
 800d4b0:	0801a904 	.word	0x0801a904
 800d4b4:	0801aa68 	.word	0x0801aa68
 800d4b8:	0801a964 	.word	0x0801a964
 800d4bc:	0801aa74 	.word	0x0801aa74

0800d4c0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b082      	sub	sp, #8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	807b      	strh	r3, [r7, #2]
 800d4cc:	4613      	mov	r3, r2
 800d4ce:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d4d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	da08      	bge.n	800d4ea <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d4d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4dc:	425b      	negs	r3, r3
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7ff ff9b 	bl	800d41c <pbuf_remove_header>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	e007      	b.n	800d4fa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d4ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d4ee:	787a      	ldrb	r2, [r7, #1]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff ff1a 	bl	800d32c <pbuf_add_header_impl>
 800d4f8:	4603      	mov	r3, r0
  }
}
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	3708      	adds	r7, #8
 800d4fe:	46bd      	mov	sp, r7
 800d500:	bd80      	pop	{r7, pc}

0800d502 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
 800d50a:	460b      	mov	r3, r1
 800d50c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d50e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d512:	2201      	movs	r2, #1
 800d514:	4619      	mov	r1, r3
 800d516:	6878      	ldr	r0, [r7, #4]
 800d518:	f7ff ffd2 	bl	800d4c0 <pbuf_header_impl>
 800d51c:	4603      	mov	r3, r0
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3708      	adds	r7, #8
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}
	...

0800d528 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b088      	sub	sp, #32
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d10b      	bne.n	800d54e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <pbuf_free+0x22>
 800d53c:	4b3b      	ldr	r3, [pc, #236]	; (800d62c <pbuf_free+0x104>)
 800d53e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d542:	493b      	ldr	r1, [pc, #236]	; (800d630 <pbuf_free+0x108>)
 800d544:	483b      	ldr	r0, [pc, #236]	; (800d634 <pbuf_free+0x10c>)
 800d546:	f00b fd39 	bl	8018fbc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	e069      	b.n	800d622 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d54e:	2300      	movs	r3, #0
 800d550:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d552:	e062      	b.n	800d61a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d554:	f00b fb96 	bl	8018c84 <sys_arch_protect>
 800d558:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7b9b      	ldrb	r3, [r3, #14]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d106      	bne.n	800d570 <pbuf_free+0x48>
 800d562:	4b32      	ldr	r3, [pc, #200]	; (800d62c <pbuf_free+0x104>)
 800d564:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d568:	4933      	ldr	r1, [pc, #204]	; (800d638 <pbuf_free+0x110>)
 800d56a:	4832      	ldr	r0, [pc, #200]	; (800d634 <pbuf_free+0x10c>)
 800d56c:	f00b fd26 	bl	8018fbc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	7b9b      	ldrb	r3, [r3, #14]
 800d574:	3b01      	subs	r3, #1
 800d576:	b2da      	uxtb	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	739a      	strb	r2, [r3, #14]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	7b9b      	ldrb	r3, [r3, #14]
 800d580:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d582:	69b8      	ldr	r0, [r7, #24]
 800d584:	f00b fb8c 	bl	8018ca0 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d588:	7dfb      	ldrb	r3, [r7, #23]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d143      	bne.n	800d616 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	7b1b      	ldrb	r3, [r3, #12]
 800d598:	f003 030f 	and.w	r3, r3, #15
 800d59c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	7b5b      	ldrb	r3, [r3, #13]
 800d5a2:	f003 0302 	and.w	r3, r3, #2
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d011      	beq.n	800d5ce <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <pbuf_free+0x9c>
 800d5b6:	4b1d      	ldr	r3, [pc, #116]	; (800d62c <pbuf_free+0x104>)
 800d5b8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d5bc:	491f      	ldr	r1, [pc, #124]	; (800d63c <pbuf_free+0x114>)
 800d5be:	481d      	ldr	r0, [pc, #116]	; (800d634 <pbuf_free+0x10c>)
 800d5c0:	f00b fcfc 	bl	8018fbc <iprintf>
        pc->custom_free_function(p);
 800d5c4:	68bb      	ldr	r3, [r7, #8]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	4798      	blx	r3
 800d5cc:	e01d      	b.n	800d60a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d104      	bne.n	800d5de <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d5d4:	6879      	ldr	r1, [r7, #4]
 800d5d6:	200c      	movs	r0, #12
 800d5d8:	f7ff f8f6 	bl	800c7c8 <memp_free>
 800d5dc:	e015      	b.n	800d60a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d5de:	7bfb      	ldrb	r3, [r7, #15]
 800d5e0:	2b01      	cmp	r3, #1
 800d5e2:	d104      	bne.n	800d5ee <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d5e4:	6879      	ldr	r1, [r7, #4]
 800d5e6:	200b      	movs	r0, #11
 800d5e8:	f7ff f8ee 	bl	800c7c8 <memp_free>
 800d5ec:	e00d      	b.n	800d60a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d5ee:	7bfb      	ldrb	r3, [r7, #15]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d103      	bne.n	800d5fc <pbuf_free+0xd4>
          mem_free(p);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f7fe fd33 	bl	800c060 <mem_free>
 800d5fa:	e006      	b.n	800d60a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d5fc:	4b0b      	ldr	r3, [pc, #44]	; (800d62c <pbuf_free+0x104>)
 800d5fe:	f240 320f 	movw	r2, #783	; 0x30f
 800d602:	490f      	ldr	r1, [pc, #60]	; (800d640 <pbuf_free+0x118>)
 800d604:	480b      	ldr	r0, [pc, #44]	; (800d634 <pbuf_free+0x10c>)
 800d606:	f00b fcd9 	bl	8018fbc <iprintf>
        }
      }
      count++;
 800d60a:	7ffb      	ldrb	r3, [r7, #31]
 800d60c:	3301      	adds	r3, #1
 800d60e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	607b      	str	r3, [r7, #4]
 800d614:	e001      	b.n	800d61a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d616:	2300      	movs	r3, #0
 800d618:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d199      	bne.n	800d554 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d620:	7ffb      	ldrb	r3, [r7, #31]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3720      	adds	r7, #32
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}
 800d62a:	bf00      	nop
 800d62c:	0801a904 	.word	0x0801a904
 800d630:	0801aa68 	.word	0x0801aa68
 800d634:	0801a964 	.word	0x0801a964
 800d638:	0801aa94 	.word	0x0801aa94
 800d63c:	0801aaac 	.word	0x0801aaac
 800d640:	0801aad0 	.word	0x0801aad0

0800d644 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d64c:	2300      	movs	r3, #0
 800d64e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d650:	e005      	b.n	800d65e <pbuf_clen+0x1a>
    ++len;
 800d652:	89fb      	ldrh	r3, [r7, #14]
 800d654:	3301      	adds	r3, #1
 800d656:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1f6      	bne.n	800d652 <pbuf_clen+0xe>
  }
  return len;
 800d664:	89fb      	ldrh	r3, [r7, #14]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3714      	adds	r7, #20
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
	...

0800d674 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d016      	beq.n	800d6b0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d682:	f00b faff 	bl	8018c84 <sys_arch_protect>
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	7b9b      	ldrb	r3, [r3, #14]
 800d68c:	3301      	adds	r3, #1
 800d68e:	b2da      	uxtb	r2, r3
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	739a      	strb	r2, [r3, #14]
 800d694:	68f8      	ldr	r0, [r7, #12]
 800d696:	f00b fb03 	bl	8018ca0 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7b9b      	ldrb	r3, [r3, #14]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d106      	bne.n	800d6b0 <pbuf_ref+0x3c>
 800d6a2:	4b05      	ldr	r3, [pc, #20]	; (800d6b8 <pbuf_ref+0x44>)
 800d6a4:	f240 3242 	movw	r2, #834	; 0x342
 800d6a8:	4904      	ldr	r1, [pc, #16]	; (800d6bc <pbuf_ref+0x48>)
 800d6aa:	4805      	ldr	r0, [pc, #20]	; (800d6c0 <pbuf_ref+0x4c>)
 800d6ac:	f00b fc86 	bl	8018fbc <iprintf>
  }
}
 800d6b0:	bf00      	nop
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	0801a904 	.word	0x0801a904
 800d6bc:	0801aae4 	.word	0x0801aae4
 800d6c0:	0801a964 	.word	0x0801a964

0800d6c4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b084      	sub	sp, #16
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d002      	beq.n	800d6da <pbuf_cat+0x16>
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d107      	bne.n	800d6ea <pbuf_cat+0x26>
 800d6da:	4b20      	ldr	r3, [pc, #128]	; (800d75c <pbuf_cat+0x98>)
 800d6dc:	f240 3259 	movw	r2, #857	; 0x359
 800d6e0:	491f      	ldr	r1, [pc, #124]	; (800d760 <pbuf_cat+0x9c>)
 800d6e2:	4820      	ldr	r0, [pc, #128]	; (800d764 <pbuf_cat+0xa0>)
 800d6e4:	f00b fc6a 	bl	8018fbc <iprintf>
 800d6e8:	e034      	b.n	800d754 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
 800d6ee:	e00a      	b.n	800d706 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	891a      	ldrh	r2, [r3, #8]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	891b      	ldrh	r3, [r3, #8]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	b29a      	uxth	r2, r3
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	60fb      	str	r3, [r7, #12]
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d1f0      	bne.n	800d6f0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	891a      	ldrh	r2, [r3, #8]
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	895b      	ldrh	r3, [r3, #10]
 800d716:	429a      	cmp	r2, r3
 800d718:	d006      	beq.n	800d728 <pbuf_cat+0x64>
 800d71a:	4b10      	ldr	r3, [pc, #64]	; (800d75c <pbuf_cat+0x98>)
 800d71c:	f240 3262 	movw	r2, #866	; 0x362
 800d720:	4911      	ldr	r1, [pc, #68]	; (800d768 <pbuf_cat+0xa4>)
 800d722:	4810      	ldr	r0, [pc, #64]	; (800d764 <pbuf_cat+0xa0>)
 800d724:	f00b fc4a 	bl	8018fbc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d006      	beq.n	800d73e <pbuf_cat+0x7a>
 800d730:	4b0a      	ldr	r3, [pc, #40]	; (800d75c <pbuf_cat+0x98>)
 800d732:	f240 3263 	movw	r2, #867	; 0x363
 800d736:	490d      	ldr	r1, [pc, #52]	; (800d76c <pbuf_cat+0xa8>)
 800d738:	480a      	ldr	r0, [pc, #40]	; (800d764 <pbuf_cat+0xa0>)
 800d73a:	f00b fc3f 	bl	8018fbc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	891a      	ldrh	r2, [r3, #8]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	891b      	ldrh	r3, [r3, #8]
 800d746:	4413      	add	r3, r2
 800d748:	b29a      	uxth	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	683a      	ldr	r2, [r7, #0]
 800d752:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d754:	3710      	adds	r7, #16
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}
 800d75a:	bf00      	nop
 800d75c:	0801a904 	.word	0x0801a904
 800d760:	0801aaf8 	.word	0x0801aaf8
 800d764:	0801a964 	.word	0x0801a964
 800d768:	0801ab30 	.word	0x0801ab30
 800d76c:	0801ab60 	.word	0x0801ab60

0800d770 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b082      	sub	sp, #8
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff ffa1 	bl	800d6c4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d782:	6838      	ldr	r0, [r7, #0]
 800d784:	f7ff ff76 	bl	800d674 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d788:	bf00      	nop
 800d78a:	3708      	adds	r7, #8
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d790:	b580      	push	{r7, lr}
 800d792:	b086      	sub	sp, #24
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d79a:	2300      	movs	r3, #0
 800d79c:	617b      	str	r3, [r7, #20]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d008      	beq.n	800d7ba <pbuf_copy+0x2a>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d005      	beq.n	800d7ba <pbuf_copy+0x2a>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	891a      	ldrh	r2, [r3, #8]
 800d7b2:	683b      	ldr	r3, [r7, #0]
 800d7b4:	891b      	ldrh	r3, [r3, #8]
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d209      	bcs.n	800d7ce <pbuf_copy+0x3e>
 800d7ba:	4b57      	ldr	r3, [pc, #348]	; (800d918 <pbuf_copy+0x188>)
 800d7bc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d7c0:	4956      	ldr	r1, [pc, #344]	; (800d91c <pbuf_copy+0x18c>)
 800d7c2:	4857      	ldr	r0, [pc, #348]	; (800d920 <pbuf_copy+0x190>)
 800d7c4:	f00b fbfa 	bl	8018fbc <iprintf>
 800d7c8:	f06f 030f 	mvn.w	r3, #15
 800d7cc:	e09f      	b.n	800d90e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	895b      	ldrh	r3, [r3, #10]
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	1ad2      	subs	r2, r2, r3
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	895b      	ldrh	r3, [r3, #10]
 800d7dc:	4619      	mov	r1, r3
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	1acb      	subs	r3, r1, r3
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d306      	bcc.n	800d7f4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	895b      	ldrh	r3, [r3, #10]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	693b      	ldr	r3, [r7, #16]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	60fb      	str	r3, [r7, #12]
 800d7f2:	e005      	b.n	800d800 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	895b      	ldrh	r3, [r3, #10]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	697b      	ldr	r3, [r7, #20]
 800d7fc:	1ad3      	subs	r3, r2, r3
 800d7fe:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	685a      	ldr	r2, [r3, #4]
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	18d0      	adds	r0, r2, r3
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	685a      	ldr	r2, [r3, #4]
 800d80c:	693b      	ldr	r3, [r7, #16]
 800d80e:	4413      	add	r3, r2
 800d810:	68fa      	ldr	r2, [r7, #12]
 800d812:	4619      	mov	r1, r3
 800d814:	f00b fcd0 	bl	80191b8 <memcpy>
    offset_to += len;
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	4413      	add	r3, r2
 800d81e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	4413      	add	r3, r2
 800d826:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	895b      	ldrh	r3, [r3, #10]
 800d82c:	461a      	mov	r2, r3
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	4293      	cmp	r3, r2
 800d832:	d906      	bls.n	800d842 <pbuf_copy+0xb2>
 800d834:	4b38      	ldr	r3, [pc, #224]	; (800d918 <pbuf_copy+0x188>)
 800d836:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d83a:	493a      	ldr	r1, [pc, #232]	; (800d924 <pbuf_copy+0x194>)
 800d83c:	4838      	ldr	r0, [pc, #224]	; (800d920 <pbuf_copy+0x190>)
 800d83e:	f00b fbbd 	bl	8018fbc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	895b      	ldrh	r3, [r3, #10]
 800d846:	461a      	mov	r2, r3
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	4293      	cmp	r3, r2
 800d84c:	d906      	bls.n	800d85c <pbuf_copy+0xcc>
 800d84e:	4b32      	ldr	r3, [pc, #200]	; (800d918 <pbuf_copy+0x188>)
 800d850:	f240 32da 	movw	r2, #986	; 0x3da
 800d854:	4934      	ldr	r1, [pc, #208]	; (800d928 <pbuf_copy+0x198>)
 800d856:	4832      	ldr	r0, [pc, #200]	; (800d920 <pbuf_copy+0x190>)
 800d858:	f00b fbb0 	bl	8018fbc <iprintf>
    if (offset_from >= p_from->len) {
 800d85c:	683b      	ldr	r3, [r7, #0]
 800d85e:	895b      	ldrh	r3, [r3, #10]
 800d860:	461a      	mov	r2, r3
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	4293      	cmp	r3, r2
 800d866:	d304      	bcc.n	800d872 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d868:	2300      	movs	r3, #0
 800d86a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	895b      	ldrh	r3, [r3, #10]
 800d876:	461a      	mov	r2, r3
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	4293      	cmp	r3, r2
 800d87c:	d114      	bne.n	800d8a8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10c      	bne.n	800d8a8 <pbuf_copy+0x118>
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d009      	beq.n	800d8a8 <pbuf_copy+0x118>
 800d894:	4b20      	ldr	r3, [pc, #128]	; (800d918 <pbuf_copy+0x188>)
 800d896:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d89a:	4924      	ldr	r1, [pc, #144]	; (800d92c <pbuf_copy+0x19c>)
 800d89c:	4820      	ldr	r0, [pc, #128]	; (800d920 <pbuf_copy+0x190>)
 800d89e:	f00b fb8d 	bl	8018fbc <iprintf>
 800d8a2:	f06f 030f 	mvn.w	r3, #15
 800d8a6:	e032      	b.n	800d90e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d013      	beq.n	800d8d6 <pbuf_copy+0x146>
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	895a      	ldrh	r2, [r3, #10]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	891b      	ldrh	r3, [r3, #8]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d10d      	bne.n	800d8d6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d009      	beq.n	800d8d6 <pbuf_copy+0x146>
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <pbuf_copy+0x188>)
 800d8c4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d8c8:	4919      	ldr	r1, [pc, #100]	; (800d930 <pbuf_copy+0x1a0>)
 800d8ca:	4815      	ldr	r0, [pc, #84]	; (800d920 <pbuf_copy+0x190>)
 800d8cc:	f00b fb76 	bl	8018fbc <iprintf>
 800d8d0:	f06f 0305 	mvn.w	r3, #5
 800d8d4:	e01b      	b.n	800d90e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d013      	beq.n	800d904 <pbuf_copy+0x174>
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	895a      	ldrh	r2, [r3, #10]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	891b      	ldrh	r3, [r3, #8]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d10d      	bne.n	800d904 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d009      	beq.n	800d904 <pbuf_copy+0x174>
 800d8f0:	4b09      	ldr	r3, [pc, #36]	; (800d918 <pbuf_copy+0x188>)
 800d8f2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d8f6:	490e      	ldr	r1, [pc, #56]	; (800d930 <pbuf_copy+0x1a0>)
 800d8f8:	4809      	ldr	r0, [pc, #36]	; (800d920 <pbuf_copy+0x190>)
 800d8fa:	f00b fb5f 	bl	8018fbc <iprintf>
 800d8fe:	f06f 0305 	mvn.w	r3, #5
 800d902:	e004      	b.n	800d90e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	f47f af61 	bne.w	800d7ce <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d90c:	2300      	movs	r3, #0
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3718      	adds	r7, #24
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}
 800d916:	bf00      	nop
 800d918:	0801a904 	.word	0x0801a904
 800d91c:	0801abac 	.word	0x0801abac
 800d920:	0801a964 	.word	0x0801a964
 800d924:	0801abdc 	.word	0x0801abdc
 800d928:	0801abf4 	.word	0x0801abf4
 800d92c:	0801ac10 	.word	0x0801ac10
 800d930:	0801ac20 	.word	0x0801ac20

0800d934 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b088      	sub	sp, #32
 800d938:	af00      	add	r7, sp, #0
 800d93a:	60f8      	str	r0, [r7, #12]
 800d93c:	60b9      	str	r1, [r7, #8]
 800d93e:	4611      	mov	r1, r2
 800d940:	461a      	mov	r2, r3
 800d942:	460b      	mov	r3, r1
 800d944:	80fb      	strh	r3, [r7, #6]
 800d946:	4613      	mov	r3, r2
 800d948:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d94a:	2300      	movs	r3, #0
 800d94c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d94e:	2300      	movs	r3, #0
 800d950:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d108      	bne.n	800d96a <pbuf_copy_partial+0x36>
 800d958:	4b2b      	ldr	r3, [pc, #172]	; (800da08 <pbuf_copy_partial+0xd4>)
 800d95a:	f240 420a 	movw	r2, #1034	; 0x40a
 800d95e:	492b      	ldr	r1, [pc, #172]	; (800da0c <pbuf_copy_partial+0xd8>)
 800d960:	482b      	ldr	r0, [pc, #172]	; (800da10 <pbuf_copy_partial+0xdc>)
 800d962:	f00b fb2b 	bl	8018fbc <iprintf>
 800d966:	2300      	movs	r3, #0
 800d968:	e04a      	b.n	800da00 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d96a:	68bb      	ldr	r3, [r7, #8]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d108      	bne.n	800d982 <pbuf_copy_partial+0x4e>
 800d970:	4b25      	ldr	r3, [pc, #148]	; (800da08 <pbuf_copy_partial+0xd4>)
 800d972:	f240 420b 	movw	r2, #1035	; 0x40b
 800d976:	4927      	ldr	r1, [pc, #156]	; (800da14 <pbuf_copy_partial+0xe0>)
 800d978:	4825      	ldr	r0, [pc, #148]	; (800da10 <pbuf_copy_partial+0xdc>)
 800d97a:	f00b fb1f 	bl	8018fbc <iprintf>
 800d97e:	2300      	movs	r3, #0
 800d980:	e03e      	b.n	800da00 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	61fb      	str	r3, [r7, #28]
 800d986:	e034      	b.n	800d9f2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d988:	88bb      	ldrh	r3, [r7, #4]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d00a      	beq.n	800d9a4 <pbuf_copy_partial+0x70>
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	895b      	ldrh	r3, [r3, #10]
 800d992:	88ba      	ldrh	r2, [r7, #4]
 800d994:	429a      	cmp	r2, r3
 800d996:	d305      	bcc.n	800d9a4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	895b      	ldrh	r3, [r3, #10]
 800d99c:	88ba      	ldrh	r2, [r7, #4]
 800d99e:	1ad3      	subs	r3, r2, r3
 800d9a0:	80bb      	strh	r3, [r7, #4]
 800d9a2:	e023      	b.n	800d9ec <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d9a4:	69fb      	ldr	r3, [r7, #28]
 800d9a6:	895a      	ldrh	r2, [r3, #10]
 800d9a8:	88bb      	ldrh	r3, [r7, #4]
 800d9aa:	1ad3      	subs	r3, r2, r3
 800d9ac:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d9ae:	8b3a      	ldrh	r2, [r7, #24]
 800d9b0:	88fb      	ldrh	r3, [r7, #6]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d901      	bls.n	800d9ba <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d9b6:	88fb      	ldrh	r3, [r7, #6]
 800d9b8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d9ba:	8b7b      	ldrh	r3, [r7, #26]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	18d0      	adds	r0, r2, r3
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	685a      	ldr	r2, [r3, #4]
 800d9c4:	88bb      	ldrh	r3, [r7, #4]
 800d9c6:	4413      	add	r3, r2
 800d9c8:	8b3a      	ldrh	r2, [r7, #24]
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	f00b fbf4 	bl	80191b8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d9d0:	8afa      	ldrh	r2, [r7, #22]
 800d9d2:	8b3b      	ldrh	r3, [r7, #24]
 800d9d4:	4413      	add	r3, r2
 800d9d6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d9d8:	8b7a      	ldrh	r2, [r7, #26]
 800d9da:	8b3b      	ldrh	r3, [r7, #24]
 800d9dc:	4413      	add	r3, r2
 800d9de:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d9e0:	88fa      	ldrh	r2, [r7, #6]
 800d9e2:	8b3b      	ldrh	r3, [r7, #24]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	61fb      	str	r3, [r7, #28]
 800d9f2:	88fb      	ldrh	r3, [r7, #6]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <pbuf_copy_partial+0xca>
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d1c4      	bne.n	800d988 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d9fe:	8afb      	ldrh	r3, [r7, #22]
}
 800da00:	4618      	mov	r0, r3
 800da02:	3720      	adds	r7, #32
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	0801a904 	.word	0x0801a904
 800da0c:	0801ac4c 	.word	0x0801ac4c
 800da10:	0801a964 	.word	0x0801a964
 800da14:	0801ac6c 	.word	0x0801ac6c

0800da18 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	603a      	str	r2, [r7, #0]
 800da22:	71fb      	strb	r3, [r7, #7]
 800da24:	460b      	mov	r3, r1
 800da26:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	8919      	ldrh	r1, [r3, #8]
 800da2c:	88ba      	ldrh	r2, [r7, #4]
 800da2e:	79fb      	ldrb	r3, [r7, #7]
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fa95 	bl	800cf60 <pbuf_alloc>
 800da36:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d101      	bne.n	800da42 <pbuf_clone+0x2a>
    return NULL;
 800da3e:	2300      	movs	r3, #0
 800da40:	e011      	b.n	800da66 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800da42:	6839      	ldr	r1, [r7, #0]
 800da44:	68f8      	ldr	r0, [r7, #12]
 800da46:	f7ff fea3 	bl	800d790 <pbuf_copy>
 800da4a:	4603      	mov	r3, r0
 800da4c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800da4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d006      	beq.n	800da64 <pbuf_clone+0x4c>
 800da56:	4b06      	ldr	r3, [pc, #24]	; (800da70 <pbuf_clone+0x58>)
 800da58:	f240 5224 	movw	r2, #1316	; 0x524
 800da5c:	4905      	ldr	r1, [pc, #20]	; (800da74 <pbuf_clone+0x5c>)
 800da5e:	4806      	ldr	r0, [pc, #24]	; (800da78 <pbuf_clone+0x60>)
 800da60:	f00b faac 	bl	8018fbc <iprintf>
  return q;
 800da64:	68fb      	ldr	r3, [r7, #12]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}
 800da6e:	bf00      	nop
 800da70:	0801a904 	.word	0x0801a904
 800da74:	0801ad78 	.word	0x0801ad78
 800da78:	0801a964 	.word	0x0801a964

0800da7c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800da80:	f00b f922 	bl	8018cc8 <rand>
 800da84:	4603      	mov	r3, r0
 800da86:	b29b      	uxth	r3, r3
 800da88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800da8c:	b29b      	uxth	r3, r3
 800da8e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800da92:	b29a      	uxth	r2, r3
 800da94:	4b01      	ldr	r3, [pc, #4]	; (800da9c <tcp_init+0x20>)
 800da96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800da98:	bf00      	nop
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	2000003c 	.word	0x2000003c

0800daa0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	7d1b      	ldrb	r3, [r3, #20]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d105      	bne.n	800dabc <tcp_free+0x1c>
 800dab0:	4b06      	ldr	r3, [pc, #24]	; (800dacc <tcp_free+0x2c>)
 800dab2:	22d4      	movs	r2, #212	; 0xd4
 800dab4:	4906      	ldr	r1, [pc, #24]	; (800dad0 <tcp_free+0x30>)
 800dab6:	4807      	ldr	r0, [pc, #28]	; (800dad4 <tcp_free+0x34>)
 800dab8:	f00b fa80 	bl	8018fbc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	2001      	movs	r0, #1
 800dac0:	f7fe fe82 	bl	800c7c8 <memp_free>
}
 800dac4:	bf00      	nop
 800dac6:	3708      	adds	r7, #8
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	0801ae04 	.word	0x0801ae04
 800dad0:	0801ae34 	.word	0x0801ae34
 800dad4:	0801ae48 	.word	0x0801ae48

0800dad8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b082      	sub	sp, #8
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	7d1b      	ldrb	r3, [r3, #20]
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d105      	bne.n	800daf4 <tcp_free_listen+0x1c>
 800dae8:	4b06      	ldr	r3, [pc, #24]	; (800db04 <tcp_free_listen+0x2c>)
 800daea:	22df      	movs	r2, #223	; 0xdf
 800daec:	4906      	ldr	r1, [pc, #24]	; (800db08 <tcp_free_listen+0x30>)
 800daee:	4807      	ldr	r0, [pc, #28]	; (800db0c <tcp_free_listen+0x34>)
 800daf0:	f00b fa64 	bl	8018fbc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800daf4:	6879      	ldr	r1, [r7, #4]
 800daf6:	2002      	movs	r0, #2
 800daf8:	f7fe fe66 	bl	800c7c8 <memp_free>
}
 800dafc:	bf00      	nop
 800dafe:	3708      	adds	r7, #8
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}
 800db04:	0801ae04 	.word	0x0801ae04
 800db08:	0801ae70 	.word	0x0801ae70
 800db0c:	0801ae48 	.word	0x0801ae48

0800db10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800db14:	f001 f85c 	bl	800ebd0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800db18:	4b07      	ldr	r3, [pc, #28]	; (800db38 <tcp_tmr+0x28>)
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	3301      	adds	r3, #1
 800db1e:	b2da      	uxtb	r2, r3
 800db20:	4b05      	ldr	r3, [pc, #20]	; (800db38 <tcp_tmr+0x28>)
 800db22:	701a      	strb	r2, [r3, #0]
 800db24:	4b04      	ldr	r3, [pc, #16]	; (800db38 <tcp_tmr+0x28>)
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	f003 0301 	and.w	r3, r3, #1
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d001      	beq.n	800db34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800db30:	f000 fd0e 	bl	800e550 <tcp_slowtmr>
  }
}
 800db34:	bf00      	nop
 800db36:	bd80      	pop	{r7, pc}
 800db38:	2000cef1 	.word	0x2000cef1

0800db3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
 800db44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d105      	bne.n	800db58 <tcp_remove_listener+0x1c>
 800db4c:	4b0d      	ldr	r3, [pc, #52]	; (800db84 <tcp_remove_listener+0x48>)
 800db4e:	22ff      	movs	r2, #255	; 0xff
 800db50:	490d      	ldr	r1, [pc, #52]	; (800db88 <tcp_remove_listener+0x4c>)
 800db52:	480e      	ldr	r0, [pc, #56]	; (800db8c <tcp_remove_listener+0x50>)
 800db54:	f00b fa32 	bl	8018fbc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	60fb      	str	r3, [r7, #12]
 800db5c:	e00a      	b.n	800db74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db62:	683a      	ldr	r2, [r7, #0]
 800db64:	429a      	cmp	r2, r3
 800db66:	d102      	bne.n	800db6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2200      	movs	r2, #0
 800db6c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	68db      	ldr	r3, [r3, #12]
 800db72:	60fb      	str	r3, [r7, #12]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1f1      	bne.n	800db5e <tcp_remove_listener+0x22>
    }
  }
}
 800db7a:	bf00      	nop
 800db7c:	bf00      	nop
 800db7e:	3710      	adds	r7, #16
 800db80:	46bd      	mov	sp, r7
 800db82:	bd80      	pop	{r7, pc}
 800db84:	0801ae04 	.word	0x0801ae04
 800db88:	0801ae8c 	.word	0x0801ae8c
 800db8c:	0801ae48 	.word	0x0801ae48

0800db90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d106      	bne.n	800dbac <tcp_listen_closed+0x1c>
 800db9e:	4b14      	ldr	r3, [pc, #80]	; (800dbf0 <tcp_listen_closed+0x60>)
 800dba0:	f240 1211 	movw	r2, #273	; 0x111
 800dba4:	4913      	ldr	r1, [pc, #76]	; (800dbf4 <tcp_listen_closed+0x64>)
 800dba6:	4814      	ldr	r0, [pc, #80]	; (800dbf8 <tcp_listen_closed+0x68>)
 800dba8:	f00b fa08 	bl	8018fbc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	7d1b      	ldrb	r3, [r3, #20]
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d006      	beq.n	800dbc2 <tcp_listen_closed+0x32>
 800dbb4:	4b0e      	ldr	r3, [pc, #56]	; (800dbf0 <tcp_listen_closed+0x60>)
 800dbb6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800dbba:	4910      	ldr	r1, [pc, #64]	; (800dbfc <tcp_listen_closed+0x6c>)
 800dbbc:	480e      	ldr	r0, [pc, #56]	; (800dbf8 <tcp_listen_closed+0x68>)
 800dbbe:	f00b f9fd 	bl	8018fbc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e00b      	b.n	800dbe0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dbc8:	4a0d      	ldr	r2, [pc, #52]	; (800dc00 <tcp_listen_closed+0x70>)
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	6879      	ldr	r1, [r7, #4]
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f7ff ffb1 	bl	800db3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3301      	adds	r3, #1
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	d9f0      	bls.n	800dbc8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dbe6:	bf00      	nop
 800dbe8:	bf00      	nop
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	0801ae04 	.word	0x0801ae04
 800dbf4:	0801aeb4 	.word	0x0801aeb4
 800dbf8:	0801ae48 	.word	0x0801ae48
 800dbfc:	0801aec0 	.word	0x0801aec0
 800dc00:	0801f58c 	.word	0x0801f58c

0800dc04 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dc04:	b5b0      	push	{r4, r5, r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af04      	add	r7, sp, #16
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	460b      	mov	r3, r1
 800dc0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d106      	bne.n	800dc24 <tcp_close_shutdown+0x20>
 800dc16:	4b63      	ldr	r3, [pc, #396]	; (800dda4 <tcp_close_shutdown+0x1a0>)
 800dc18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800dc1c:	4962      	ldr	r1, [pc, #392]	; (800dda8 <tcp_close_shutdown+0x1a4>)
 800dc1e:	4863      	ldr	r0, [pc, #396]	; (800ddac <tcp_close_shutdown+0x1a8>)
 800dc20:	f00b f9cc 	bl	8018fbc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dc24:	78fb      	ldrb	r3, [r7, #3]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d066      	beq.n	800dcf8 <tcp_close_shutdown+0xf4>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	7d1b      	ldrb	r3, [r3, #20]
 800dc2e:	2b04      	cmp	r3, #4
 800dc30:	d003      	beq.n	800dc3a <tcp_close_shutdown+0x36>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	7d1b      	ldrb	r3, [r3, #20]
 800dc36:	2b07      	cmp	r3, #7
 800dc38:	d15e      	bne.n	800dcf8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d104      	bne.n	800dc4c <tcp_close_shutdown+0x48>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dc46:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dc4a:	d055      	beq.n	800dcf8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	8b5b      	ldrh	r3, [r3, #26]
 800dc50:	f003 0310 	and.w	r3, r3, #16
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d106      	bne.n	800dc66 <tcp_close_shutdown+0x62>
 800dc58:	4b52      	ldr	r3, [pc, #328]	; (800dda4 <tcp_close_shutdown+0x1a0>)
 800dc5a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800dc5e:	4954      	ldr	r1, [pc, #336]	; (800ddb0 <tcp_close_shutdown+0x1ac>)
 800dc60:	4852      	ldr	r0, [pc, #328]	; (800ddac <tcp_close_shutdown+0x1a8>)
 800dc62:	f00b f9ab 	bl	8018fbc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800dc6e:	687d      	ldr	r5, [r7, #4]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3304      	adds	r3, #4
 800dc74:	687a      	ldr	r2, [r7, #4]
 800dc76:	8ad2      	ldrh	r2, [r2, #22]
 800dc78:	6879      	ldr	r1, [r7, #4]
 800dc7a:	8b09      	ldrh	r1, [r1, #24]
 800dc7c:	9102      	str	r1, [sp, #8]
 800dc7e:	9201      	str	r2, [sp, #4]
 800dc80:	9300      	str	r3, [sp, #0]
 800dc82:	462b      	mov	r3, r5
 800dc84:	4622      	mov	r2, r4
 800dc86:	4601      	mov	r1, r0
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f005 fd8f 	bl	80137ac <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f001 fb6c 	bl	800f36c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800dc94:	4b47      	ldr	r3, [pc, #284]	; (800ddb4 <tcp_close_shutdown+0x1b0>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	687a      	ldr	r2, [r7, #4]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d105      	bne.n	800dcaa <tcp_close_shutdown+0xa6>
 800dc9e:	4b45      	ldr	r3, [pc, #276]	; (800ddb4 <tcp_close_shutdown+0x1b0>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	4a43      	ldr	r2, [pc, #268]	; (800ddb4 <tcp_close_shutdown+0x1b0>)
 800dca6:	6013      	str	r3, [r2, #0]
 800dca8:	e013      	b.n	800dcd2 <tcp_close_shutdown+0xce>
 800dcaa:	4b42      	ldr	r3, [pc, #264]	; (800ddb4 <tcp_close_shutdown+0x1b0>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	60fb      	str	r3, [r7, #12]
 800dcb0:	e00c      	b.n	800dccc <tcp_close_shutdown+0xc8>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d104      	bne.n	800dcc6 <tcp_close_shutdown+0xc2>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	68da      	ldr	r2, [r3, #12]
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	60da      	str	r2, [r3, #12]
 800dcc4:	e005      	b.n	800dcd2 <tcp_close_shutdown+0xce>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	68db      	ldr	r3, [r3, #12]
 800dcca:	60fb      	str	r3, [r7, #12]
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d1ef      	bne.n	800dcb2 <tcp_close_shutdown+0xae>
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	60da      	str	r2, [r3, #12]
 800dcd8:	4b37      	ldr	r3, [pc, #220]	; (800ddb8 <tcp_close_shutdown+0x1b4>)
 800dcda:	2201      	movs	r2, #1
 800dcdc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800dcde:	4b37      	ldr	r3, [pc, #220]	; (800ddbc <tcp_close_shutdown+0x1b8>)
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	429a      	cmp	r2, r3
 800dce6:	d102      	bne.n	800dcee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800dce8:	f004 f804 	bl	8011cf4 <tcp_trigger_input_pcb_close>
 800dcec:	e002      	b.n	800dcf4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f7ff fed6 	bl	800daa0 <tcp_free>
      }
      return ERR_OK;
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	e050      	b.n	800dd9a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	7d1b      	ldrb	r3, [r3, #20]
 800dcfc:	2b02      	cmp	r3, #2
 800dcfe:	d03b      	beq.n	800dd78 <tcp_close_shutdown+0x174>
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	dc44      	bgt.n	800dd8e <tcp_close_shutdown+0x18a>
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d002      	beq.n	800dd0e <tcp_close_shutdown+0x10a>
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d02a      	beq.n	800dd62 <tcp_close_shutdown+0x15e>
 800dd0c:	e03f      	b.n	800dd8e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	8adb      	ldrh	r3, [r3, #22]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d021      	beq.n	800dd5a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd16:	4b2a      	ldr	r3, [pc, #168]	; (800ddc0 <tcp_close_shutdown+0x1bc>)
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	687a      	ldr	r2, [r7, #4]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d105      	bne.n	800dd2c <tcp_close_shutdown+0x128>
 800dd20:	4b27      	ldr	r3, [pc, #156]	; (800ddc0 <tcp_close_shutdown+0x1bc>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68db      	ldr	r3, [r3, #12]
 800dd26:	4a26      	ldr	r2, [pc, #152]	; (800ddc0 <tcp_close_shutdown+0x1bc>)
 800dd28:	6013      	str	r3, [r2, #0]
 800dd2a:	e013      	b.n	800dd54 <tcp_close_shutdown+0x150>
 800dd2c:	4b24      	ldr	r3, [pc, #144]	; (800ddc0 <tcp_close_shutdown+0x1bc>)
 800dd2e:	681b      	ldr	r3, [r3, #0]
 800dd30:	60bb      	str	r3, [r7, #8]
 800dd32:	e00c      	b.n	800dd4e <tcp_close_shutdown+0x14a>
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	687a      	ldr	r2, [r7, #4]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d104      	bne.n	800dd48 <tcp_close_shutdown+0x144>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	68da      	ldr	r2, [r3, #12]
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	60da      	str	r2, [r3, #12]
 800dd46:	e005      	b.n	800dd54 <tcp_close_shutdown+0x150>
 800dd48:	68bb      	ldr	r3, [r7, #8]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	60bb      	str	r3, [r7, #8]
 800dd4e:	68bb      	ldr	r3, [r7, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d1ef      	bne.n	800dd34 <tcp_close_shutdown+0x130>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2200      	movs	r2, #0
 800dd58:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f7ff fea0 	bl	800daa0 <tcp_free>
      break;
 800dd60:	e01a      	b.n	800dd98 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f7ff ff14 	bl	800db90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800dd68:	6879      	ldr	r1, [r7, #4]
 800dd6a:	4816      	ldr	r0, [pc, #88]	; (800ddc4 <tcp_close_shutdown+0x1c0>)
 800dd6c:	f001 fb4e 	bl	800f40c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7ff feb1 	bl	800dad8 <tcp_free_listen>
      break;
 800dd76:	e00f      	b.n	800dd98 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dd78:	6879      	ldr	r1, [r7, #4]
 800dd7a:	480e      	ldr	r0, [pc, #56]	; (800ddb4 <tcp_close_shutdown+0x1b0>)
 800dd7c:	f001 fb46 	bl	800f40c <tcp_pcb_remove>
 800dd80:	4b0d      	ldr	r3, [pc, #52]	; (800ddb8 <tcp_close_shutdown+0x1b4>)
 800dd82:	2201      	movs	r2, #1
 800dd84:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff fe8a 	bl	800daa0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dd8c:	e004      	b.n	800dd98 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 f81a 	bl	800ddc8 <tcp_close_shutdown_fin>
 800dd94:	4603      	mov	r3, r0
 800dd96:	e000      	b.n	800dd9a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bdb0      	pop	{r4, r5, r7, pc}
 800dda2:	bf00      	nop
 800dda4:	0801ae04 	.word	0x0801ae04
 800dda8:	0801aed8 	.word	0x0801aed8
 800ddac:	0801ae48 	.word	0x0801ae48
 800ddb0:	0801aef8 	.word	0x0801aef8
 800ddb4:	2000cee8 	.word	0x2000cee8
 800ddb8:	2000cef0 	.word	0x2000cef0
 800ddbc:	2000cf28 	.word	0x2000cf28
 800ddc0:	2000cee0 	.word	0x2000cee0
 800ddc4:	2000cee4 	.word	0x2000cee4

0800ddc8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b084      	sub	sp, #16
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d106      	bne.n	800dde4 <tcp_close_shutdown_fin+0x1c>
 800ddd6:	4b2e      	ldr	r3, [pc, #184]	; (800de90 <tcp_close_shutdown_fin+0xc8>)
 800ddd8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dddc:	492d      	ldr	r1, [pc, #180]	; (800de94 <tcp_close_shutdown_fin+0xcc>)
 800ddde:	482e      	ldr	r0, [pc, #184]	; (800de98 <tcp_close_shutdown_fin+0xd0>)
 800dde0:	f00b f8ec 	bl	8018fbc <iprintf>

  switch (pcb->state) {
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	7d1b      	ldrb	r3, [r3, #20]
 800dde8:	2b07      	cmp	r3, #7
 800ddea:	d020      	beq.n	800de2e <tcp_close_shutdown_fin+0x66>
 800ddec:	2b07      	cmp	r3, #7
 800ddee:	dc2b      	bgt.n	800de48 <tcp_close_shutdown_fin+0x80>
 800ddf0:	2b03      	cmp	r3, #3
 800ddf2:	d002      	beq.n	800ddfa <tcp_close_shutdown_fin+0x32>
 800ddf4:	2b04      	cmp	r3, #4
 800ddf6:	d00d      	beq.n	800de14 <tcp_close_shutdown_fin+0x4c>
 800ddf8:	e026      	b.n	800de48 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f004 fde4 	bl	80129c8 <tcp_send_fin>
 800de00:	4603      	mov	r3, r0
 800de02:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d11f      	bne.n	800de4c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2205      	movs	r2, #5
 800de10:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de12:	e01b      	b.n	800de4c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f004 fdd7 	bl	80129c8 <tcp_send_fin>
 800de1a:	4603      	mov	r3, r0
 800de1c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d114      	bne.n	800de50 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	2205      	movs	r2, #5
 800de2a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de2c:	e010      	b.n	800de50 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f004 fdca 	bl	80129c8 <tcp_send_fin>
 800de34:	4603      	mov	r3, r0
 800de36:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800de38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d109      	bne.n	800de54 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2209      	movs	r2, #9
 800de44:	751a      	strb	r2, [r3, #20]
      }
      break;
 800de46:	e005      	b.n	800de54 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800de48:	2300      	movs	r3, #0
 800de4a:	e01c      	b.n	800de86 <tcp_close_shutdown_fin+0xbe>
      break;
 800de4c:	bf00      	nop
 800de4e:	e002      	b.n	800de56 <tcp_close_shutdown_fin+0x8e>
      break;
 800de50:	bf00      	nop
 800de52:	e000      	b.n	800de56 <tcp_close_shutdown_fin+0x8e>
      break;
 800de54:	bf00      	nop
  }

  if (err == ERR_OK) {
 800de56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d103      	bne.n	800de66 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f004 fef0 	bl	8012c44 <tcp_output>
 800de64:	e00d      	b.n	800de82 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800de66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6e:	d108      	bne.n	800de82 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	8b5b      	ldrh	r3, [r3, #26]
 800de74:	f043 0308 	orr.w	r3, r3, #8
 800de78:	b29a      	uxth	r2, r3
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800de7e:	2300      	movs	r3, #0
 800de80:	e001      	b.n	800de86 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800de82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	0801ae04 	.word	0x0801ae04
 800de94:	0801aeb4 	.word	0x0801aeb4
 800de98:	0801ae48 	.word	0x0801ae48

0800de9c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b082      	sub	sp, #8
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d109      	bne.n	800debe <tcp_close+0x22>
 800deaa:	4b0f      	ldr	r3, [pc, #60]	; (800dee8 <tcp_close+0x4c>)
 800deac:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800deb0:	490e      	ldr	r1, [pc, #56]	; (800deec <tcp_close+0x50>)
 800deb2:	480f      	ldr	r0, [pc, #60]	; (800def0 <tcp_close+0x54>)
 800deb4:	f00b f882 	bl	8018fbc <iprintf>
 800deb8:	f06f 030f 	mvn.w	r3, #15
 800debc:	e00f      	b.n	800dede <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	7d1b      	ldrb	r3, [r3, #20]
 800dec2:	2b01      	cmp	r3, #1
 800dec4:	d006      	beq.n	800ded4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	8b5b      	ldrh	r3, [r3, #26]
 800deca:	f043 0310 	orr.w	r3, r3, #16
 800dece:	b29a      	uxth	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ded4:	2101      	movs	r1, #1
 800ded6:	6878      	ldr	r0, [r7, #4]
 800ded8:	f7ff fe94 	bl	800dc04 <tcp_close_shutdown>
 800dedc:	4603      	mov	r3, r0
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	0801ae04 	.word	0x0801ae04
 800deec:	0801af14 	.word	0x0801af14
 800def0:	0801ae48 	.word	0x0801ae48

0800def4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08e      	sub	sp, #56	; 0x38
 800def8:	af04      	add	r7, sp, #16
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d107      	bne.n	800df14 <tcp_abandon+0x20>
 800df04:	4b52      	ldr	r3, [pc, #328]	; (800e050 <tcp_abandon+0x15c>)
 800df06:	f240 223d 	movw	r2, #573	; 0x23d
 800df0a:	4952      	ldr	r1, [pc, #328]	; (800e054 <tcp_abandon+0x160>)
 800df0c:	4852      	ldr	r0, [pc, #328]	; (800e058 <tcp_abandon+0x164>)
 800df0e:	f00b f855 	bl	8018fbc <iprintf>
 800df12:	e099      	b.n	800e048 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	7d1b      	ldrb	r3, [r3, #20]
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d106      	bne.n	800df2a <tcp_abandon+0x36>
 800df1c:	4b4c      	ldr	r3, [pc, #304]	; (800e050 <tcp_abandon+0x15c>)
 800df1e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800df22:	494e      	ldr	r1, [pc, #312]	; (800e05c <tcp_abandon+0x168>)
 800df24:	484c      	ldr	r0, [pc, #304]	; (800e058 <tcp_abandon+0x164>)
 800df26:	f00b f849 	bl	8018fbc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	7d1b      	ldrb	r3, [r3, #20]
 800df2e:	2b0a      	cmp	r3, #10
 800df30:	d107      	bne.n	800df42 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800df32:	6879      	ldr	r1, [r7, #4]
 800df34:	484a      	ldr	r0, [pc, #296]	; (800e060 <tcp_abandon+0x16c>)
 800df36:	f001 fa69 	bl	800f40c <tcp_pcb_remove>
    tcp_free(pcb);
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f7ff fdb0 	bl	800daa0 <tcp_free>
 800df40:	e082      	b.n	800e048 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800df42:	2300      	movs	r3, #0
 800df44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df54:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800df5c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	691b      	ldr	r3, [r3, #16]
 800df62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	7d1b      	ldrb	r3, [r3, #20]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d126      	bne.n	800dfba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	8adb      	ldrh	r3, [r3, #22]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d02e      	beq.n	800dfd2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df74:	4b3b      	ldr	r3, [pc, #236]	; (800e064 <tcp_abandon+0x170>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	687a      	ldr	r2, [r7, #4]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d105      	bne.n	800df8a <tcp_abandon+0x96>
 800df7e:	4b39      	ldr	r3, [pc, #228]	; (800e064 <tcp_abandon+0x170>)
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	4a37      	ldr	r2, [pc, #220]	; (800e064 <tcp_abandon+0x170>)
 800df86:	6013      	str	r3, [r2, #0]
 800df88:	e013      	b.n	800dfb2 <tcp_abandon+0xbe>
 800df8a:	4b36      	ldr	r3, [pc, #216]	; (800e064 <tcp_abandon+0x170>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	61fb      	str	r3, [r7, #28]
 800df90:	e00c      	b.n	800dfac <tcp_abandon+0xb8>
 800df92:	69fb      	ldr	r3, [r7, #28]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	687a      	ldr	r2, [r7, #4]
 800df98:	429a      	cmp	r2, r3
 800df9a:	d104      	bne.n	800dfa6 <tcp_abandon+0xb2>
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	68da      	ldr	r2, [r3, #12]
 800dfa0:	69fb      	ldr	r3, [r7, #28]
 800dfa2:	60da      	str	r2, [r3, #12]
 800dfa4:	e005      	b.n	800dfb2 <tcp_abandon+0xbe>
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	68db      	ldr	r3, [r3, #12]
 800dfaa:	61fb      	str	r3, [r7, #28]
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d1ef      	bne.n	800df92 <tcp_abandon+0x9e>
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	60da      	str	r2, [r3, #12]
 800dfb8:	e00b      	b.n	800dfd2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	8adb      	ldrh	r3, [r3, #22]
 800dfc2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dfc4:	6879      	ldr	r1, [r7, #4]
 800dfc6:	4828      	ldr	r0, [pc, #160]	; (800e068 <tcp_abandon+0x174>)
 800dfc8:	f001 fa20 	bl	800f40c <tcp_pcb_remove>
 800dfcc:	4b27      	ldr	r3, [pc, #156]	; (800e06c <tcp_abandon+0x178>)
 800dfce:	2201      	movs	r2, #1
 800dfd0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d004      	beq.n	800dfe4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f000 fed6 	bl	800ed90 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d004      	beq.n	800dff6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dff0:	4618      	mov	r0, r3
 800dff2:	f000 fecd 	bl	800ed90 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d004      	beq.n	800e008 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e002:	4618      	mov	r0, r3
 800e004:	f000 fec4 	bl	800ed90 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00e      	beq.n	800e02c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e00e:	6879      	ldr	r1, [r7, #4]
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	3304      	adds	r3, #4
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	8b12      	ldrh	r2, [r2, #24]
 800e018:	9202      	str	r2, [sp, #8]
 800e01a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e01c:	9201      	str	r2, [sp, #4]
 800e01e:	9300      	str	r3, [sp, #0]
 800e020:	460b      	mov	r3, r1
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	69b9      	ldr	r1, [r7, #24]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f005 fbc0 	bl	80137ac <tcp_rst>
    }
    last_state = pcb->state;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	7d1b      	ldrb	r3, [r3, #20]
 800e030:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7ff fd34 	bl	800daa0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d004      	beq.n	800e048 <tcp_abandon+0x154>
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	f06f 010c 	mvn.w	r1, #12
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	4798      	blx	r3
  }
}
 800e048:	3728      	adds	r7, #40	; 0x28
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
 800e04e:	bf00      	nop
 800e050:	0801ae04 	.word	0x0801ae04
 800e054:	0801af48 	.word	0x0801af48
 800e058:	0801ae48 	.word	0x0801ae48
 800e05c:	0801af64 	.word	0x0801af64
 800e060:	2000ceec 	.word	0x2000ceec
 800e064:	2000cee0 	.word	0x2000cee0
 800e068:	2000cee8 	.word	0x2000cee8
 800e06c:	2000cef0 	.word	0x2000cef0

0800e070 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b082      	sub	sp, #8
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e078:	2101      	movs	r1, #1
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f7ff ff3a 	bl	800def4 <tcp_abandon>
}
 800e080:	bf00      	nop
 800e082:	3708      	adds	r7, #8
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}

0800e088 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b088      	sub	sp, #32
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	60f8      	str	r0, [r7, #12]
 800e090:	60b9      	str	r1, [r7, #8]
 800e092:	4613      	mov	r3, r2
 800e094:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800e096:	2304      	movs	r3, #4
 800e098:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800e0a0:	4b3e      	ldr	r3, [pc, #248]	; (800e19c <tcp_bind+0x114>)
 800e0a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d109      	bne.n	800e0be <tcp_bind+0x36>
 800e0aa:	4b3d      	ldr	r3, [pc, #244]	; (800e1a0 <tcp_bind+0x118>)
 800e0ac:	f240 22a9 	movw	r2, #681	; 0x2a9
 800e0b0:	493c      	ldr	r1, [pc, #240]	; (800e1a4 <tcp_bind+0x11c>)
 800e0b2:	483d      	ldr	r0, [pc, #244]	; (800e1a8 <tcp_bind+0x120>)
 800e0b4:	f00a ff82 	bl	8018fbc <iprintf>
 800e0b8:	f06f 030f 	mvn.w	r3, #15
 800e0bc:	e06a      	b.n	800e194 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	7d1b      	ldrb	r3, [r3, #20]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d009      	beq.n	800e0da <tcp_bind+0x52>
 800e0c6:	4b36      	ldr	r3, [pc, #216]	; (800e1a0 <tcp_bind+0x118>)
 800e0c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e0cc:	4937      	ldr	r1, [pc, #220]	; (800e1ac <tcp_bind+0x124>)
 800e0ce:	4836      	ldr	r0, [pc, #216]	; (800e1a8 <tcp_bind+0x120>)
 800e0d0:	f00a ff74 	bl	8018fbc <iprintf>
 800e0d4:	f06f 0305 	mvn.w	r3, #5
 800e0d8:	e05c      	b.n	800e194 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800e0da:	88fb      	ldrh	r3, [r7, #6]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d109      	bne.n	800e0f4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800e0e0:	f000 f9f0 	bl	800e4c4 <tcp_new_port>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800e0e8:	88fb      	ldrh	r3, [r7, #6]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d135      	bne.n	800e15a <tcp_bind+0xd2>
      return ERR_BUF;
 800e0ee:	f06f 0301 	mvn.w	r3, #1
 800e0f2:	e04f      	b.n	800e194 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800e0f4:	2300      	movs	r3, #0
 800e0f6:	61fb      	str	r3, [r7, #28]
 800e0f8:	e02b      	b.n	800e152 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e0fa:	4a2d      	ldr	r2, [pc, #180]	; (800e1b0 <tcp_bind+0x128>)
 800e0fc:	69fb      	ldr	r3, [r7, #28]
 800e0fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	61bb      	str	r3, [r7, #24]
 800e106:	e01e      	b.n	800e146 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800e108:	69bb      	ldr	r3, [r7, #24]
 800e10a:	8adb      	ldrh	r3, [r3, #22]
 800e10c:	88fa      	ldrh	r2, [r7, #6]
 800e10e:	429a      	cmp	r2, r3
 800e110:	d116      	bne.n	800e140 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800e112:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e114:	2b00      	cmp	r3, #0
 800e116:	d010      	beq.n	800e13a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00c      	beq.n	800e13a <tcp_bind+0xb2>
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	2b00      	cmp	r3, #0
 800e124:	d009      	beq.n	800e13a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d005      	beq.n	800e13a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800e12e:	69bb      	ldr	r3, [r7, #24]
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	68bb      	ldr	r3, [r7, #8]
 800e134:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800e136:	429a      	cmp	r2, r3
 800e138:	d102      	bne.n	800e140 <tcp_bind+0xb8>
              return ERR_USE;
 800e13a:	f06f 0307 	mvn.w	r3, #7
 800e13e:	e029      	b.n	800e194 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800e140:	69bb      	ldr	r3, [r7, #24]
 800e142:	68db      	ldr	r3, [r3, #12]
 800e144:	61bb      	str	r3, [r7, #24]
 800e146:	69bb      	ldr	r3, [r7, #24]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1dd      	bne.n	800e108 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800e14c:	69fb      	ldr	r3, [r7, #28]
 800e14e:	3301      	adds	r3, #1
 800e150:	61fb      	str	r3, [r7, #28]
 800e152:	69fa      	ldr	r2, [r7, #28]
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	429a      	cmp	r2, r3
 800e158:	dbcf      	blt.n	800e0fa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800e15a:	68bb      	ldr	r3, [r7, #8]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00c      	beq.n	800e17a <tcp_bind+0xf2>
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d008      	beq.n	800e17a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d002      	beq.n	800e174 <tcp_bind+0xec>
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	e000      	b.n	800e176 <tcp_bind+0xee>
 800e174:	2300      	movs	r3, #0
 800e176:	68fa      	ldr	r2, [r7, #12]
 800e178:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	88fa      	ldrh	r2, [r7, #6]
 800e17e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800e180:	4b0c      	ldr	r3, [pc, #48]	; (800e1b4 <tcp_bind+0x12c>)
 800e182:	681a      	ldr	r2, [r3, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	60da      	str	r2, [r3, #12]
 800e188:	4a0a      	ldr	r2, [pc, #40]	; (800e1b4 <tcp_bind+0x12c>)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	6013      	str	r3, [r2, #0]
 800e18e:	f005 fccf 	bl	8013b30 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3720      	adds	r7, #32
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	0801f5c4 	.word	0x0801f5c4
 800e1a0:	0801ae04 	.word	0x0801ae04
 800e1a4:	0801af98 	.word	0x0801af98
 800e1a8:	0801ae48 	.word	0x0801ae48
 800e1ac:	0801afb0 	.word	0x0801afb0
 800e1b0:	0801f58c 	.word	0x0801f58c
 800e1b4:	2000cee0 	.word	0x2000cee0

0800e1b8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800e1c6:	68bb      	ldr	r3, [r7, #8]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d106      	bne.n	800e1da <tcp_accept_null+0x22>
 800e1cc:	4b07      	ldr	r3, [pc, #28]	; (800e1ec <tcp_accept_null+0x34>)
 800e1ce:	f240 320f 	movw	r2, #783	; 0x30f
 800e1d2:	4907      	ldr	r1, [pc, #28]	; (800e1f0 <tcp_accept_null+0x38>)
 800e1d4:	4807      	ldr	r0, [pc, #28]	; (800e1f4 <tcp_accept_null+0x3c>)
 800e1d6:	f00a fef1 	bl	8018fbc <iprintf>

  tcp_abort(pcb);
 800e1da:	68b8      	ldr	r0, [r7, #8]
 800e1dc:	f7ff ff48 	bl	800e070 <tcp_abort>

  return ERR_ABRT;
 800e1e0:	f06f 030c 	mvn.w	r3, #12
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}
 800e1ec:	0801ae04 	.word	0x0801ae04
 800e1f0:	0801afd8 	.word	0x0801afd8
 800e1f4:	0801ae48 	.word	0x0801ae48

0800e1f8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
 800e200:	460b      	mov	r3, r1
 800e202:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800e204:	78fb      	ldrb	r3, [r7, #3]
 800e206:	2200      	movs	r2, #0
 800e208:	4619      	mov	r1, r3
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f806 	bl	800e21c <tcp_listen_with_backlog_and_err>
 800e210:	4603      	mov	r3, r0
}
 800e212:	4618      	mov	r0, r3
 800e214:	3708      	adds	r7, #8
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
	...

0800e21c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b088      	sub	sp, #32
 800e220:	af00      	add	r7, sp, #0
 800e222:	60f8      	str	r0, [r7, #12]
 800e224:	460b      	mov	r3, r1
 800e226:	607a      	str	r2, [r7, #4]
 800e228:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800e22a:	2300      	movs	r3, #0
 800e22c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d109      	bne.n	800e248 <tcp_listen_with_backlog_and_err+0x2c>
 800e234:	4b47      	ldr	r3, [pc, #284]	; (800e354 <tcp_listen_with_backlog_and_err+0x138>)
 800e236:	f240 3259 	movw	r2, #857	; 0x359
 800e23a:	4947      	ldr	r1, [pc, #284]	; (800e358 <tcp_listen_with_backlog_and_err+0x13c>)
 800e23c:	4847      	ldr	r0, [pc, #284]	; (800e35c <tcp_listen_with_backlog_and_err+0x140>)
 800e23e:	f00a febd 	bl	8018fbc <iprintf>
 800e242:	23f0      	movs	r3, #240	; 0xf0
 800e244:	76fb      	strb	r3, [r7, #27]
 800e246:	e079      	b.n	800e33c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800e248:	68fb      	ldr	r3, [r7, #12]
 800e24a:	7d1b      	ldrb	r3, [r3, #20]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d009      	beq.n	800e264 <tcp_listen_with_backlog_and_err+0x48>
 800e250:	4b40      	ldr	r3, [pc, #256]	; (800e354 <tcp_listen_with_backlog_and_err+0x138>)
 800e252:	f240 325a 	movw	r2, #858	; 0x35a
 800e256:	4942      	ldr	r1, [pc, #264]	; (800e360 <tcp_listen_with_backlog_and_err+0x144>)
 800e258:	4840      	ldr	r0, [pc, #256]	; (800e35c <tcp_listen_with_backlog_and_err+0x140>)
 800e25a:	f00a feaf 	bl	8018fbc <iprintf>
 800e25e:	23f1      	movs	r3, #241	; 0xf1
 800e260:	76fb      	strb	r3, [r7, #27]
 800e262:	e06b      	b.n	800e33c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	7d1b      	ldrb	r3, [r3, #20]
 800e268:	2b01      	cmp	r3, #1
 800e26a:	d104      	bne.n	800e276 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800e270:	23f7      	movs	r3, #247	; 0xf7
 800e272:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e274:	e062      	b.n	800e33c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800e276:	2002      	movs	r0, #2
 800e278:	f7fe fa30 	bl	800c6dc <memp_malloc>
 800e27c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800e27e:	69fb      	ldr	r3, [r7, #28]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d102      	bne.n	800e28a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800e284:	23ff      	movs	r3, #255	; 0xff
 800e286:	76fb      	strb	r3, [r7, #27]
    goto done;
 800e288:	e058      	b.n	800e33c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	691a      	ldr	r2, [r3, #16]
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	8ada      	ldrh	r2, [r3, #22]
 800e296:	69fb      	ldr	r3, [r7, #28]
 800e298:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800e29a:	69fb      	ldr	r3, [r7, #28]
 800e29c:	2201      	movs	r2, #1
 800e29e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	7d5a      	ldrb	r2, [r3, #21]
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	7a5a      	ldrb	r2, [r3, #9]
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800e2b0:	69fb      	ldr	r3, [r7, #28]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	7ada      	ldrb	r2, [r3, #11]
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	7a9a      	ldrb	r2, [r3, #10]
 800e2c2:	69fb      	ldr	r3, [r7, #28]
 800e2c4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	8adb      	ldrh	r3, [r3, #22]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d021      	beq.n	800e31a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800e2d6:	4b23      	ldr	r3, [pc, #140]	; (800e364 <tcp_listen_with_backlog_and_err+0x148>)
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68fa      	ldr	r2, [r7, #12]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d105      	bne.n	800e2ec <tcp_listen_with_backlog_and_err+0xd0>
 800e2e0:	4b20      	ldr	r3, [pc, #128]	; (800e364 <tcp_listen_with_backlog_and_err+0x148>)
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	4a1f      	ldr	r2, [pc, #124]	; (800e364 <tcp_listen_with_backlog_and_err+0x148>)
 800e2e8:	6013      	str	r3, [r2, #0]
 800e2ea:	e013      	b.n	800e314 <tcp_listen_with_backlog_and_err+0xf8>
 800e2ec:	4b1d      	ldr	r3, [pc, #116]	; (800e364 <tcp_listen_with_backlog_and_err+0x148>)
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	617b      	str	r3, [r7, #20]
 800e2f2:	e00c      	b.n	800e30e <tcp_listen_with_backlog_and_err+0xf2>
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	68fa      	ldr	r2, [r7, #12]
 800e2fa:	429a      	cmp	r2, r3
 800e2fc:	d104      	bne.n	800e308 <tcp_listen_with_backlog_and_err+0xec>
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68da      	ldr	r2, [r3, #12]
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	60da      	str	r2, [r3, #12]
 800e306:	e005      	b.n	800e314 <tcp_listen_with_backlog_and_err+0xf8>
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	617b      	str	r3, [r7, #20]
 800e30e:	697b      	ldr	r3, [r7, #20]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d1ef      	bne.n	800e2f4 <tcp_listen_with_backlog_and_err+0xd8>
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2200      	movs	r2, #0
 800e318:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800e31a:	68f8      	ldr	r0, [r7, #12]
 800e31c:	f7ff fbc0 	bl	800daa0 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800e320:	69fb      	ldr	r3, [r7, #28]
 800e322:	4a11      	ldr	r2, [pc, #68]	; (800e368 <tcp_listen_with_backlog_and_err+0x14c>)
 800e324:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800e326:	4b11      	ldr	r3, [pc, #68]	; (800e36c <tcp_listen_with_backlog_and_err+0x150>)
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	4a0f      	ldr	r2, [pc, #60]	; (800e36c <tcp_listen_with_backlog_and_err+0x150>)
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	6013      	str	r3, [r2, #0]
 800e334:	f005 fbfc 	bl	8013b30 <tcp_timer_needed>
  res = ERR_OK;
 800e338:	2300      	movs	r3, #0
 800e33a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d002      	beq.n	800e348 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	7efa      	ldrb	r2, [r7, #27]
 800e346:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800e348:	69fb      	ldr	r3, [r7, #28]
}
 800e34a:	4618      	mov	r0, r3
 800e34c:	3720      	adds	r7, #32
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	0801ae04 	.word	0x0801ae04
 800e358:	0801aff8 	.word	0x0801aff8
 800e35c:	0801ae48 	.word	0x0801ae48
 800e360:	0801b028 	.word	0x0801b028
 800e364:	2000cee0 	.word	0x2000cee0
 800e368:	0800e1b9 	.word	0x0800e1b9
 800e36c:	2000cee4 	.word	0x2000cee4

0800e370 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d106      	bne.n	800e38c <tcp_update_rcv_ann_wnd+0x1c>
 800e37e:	4b25      	ldr	r3, [pc, #148]	; (800e414 <tcp_update_rcv_ann_wnd+0xa4>)
 800e380:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e384:	4924      	ldr	r1, [pc, #144]	; (800e418 <tcp_update_rcv_ann_wnd+0xa8>)
 800e386:	4825      	ldr	r0, [pc, #148]	; (800e41c <tcp_update_rcv_ann_wnd+0xac>)
 800e388:	f00a fe18 	bl	8018fbc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e394:	4413      	add	r3, r2
 800e396:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e3a0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e3a4:	bf28      	it	cs
 800e3a6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e3aa:	b292      	uxth	r2, r2
 800e3ac:	4413      	add	r3, r2
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	db08      	blt.n	800e3c8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3c2:	68fa      	ldr	r2, [r7, #12]
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	e020      	b.n	800e40a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d0:	1ad3      	subs	r3, r2, r3
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	dd03      	ble.n	800e3de <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e3dc:	e014      	b.n	800e408 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3f0:	d306      	bcc.n	800e400 <tcp_update_rcv_ann_wnd+0x90>
 800e3f2:	4b08      	ldr	r3, [pc, #32]	; (800e414 <tcp_update_rcv_ann_wnd+0xa4>)
 800e3f4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e3f8:	4909      	ldr	r1, [pc, #36]	; (800e420 <tcp_update_rcv_ann_wnd+0xb0>)
 800e3fa:	4808      	ldr	r0, [pc, #32]	; (800e41c <tcp_update_rcv_ann_wnd+0xac>)
 800e3fc:	f00a fdde 	bl	8018fbc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	b29a      	uxth	r2, r3
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e408:	2300      	movs	r3, #0
  }
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	0801ae04 	.word	0x0801ae04
 800e418:	0801b060 	.word	0x0801b060
 800e41c:	0801ae48 	.word	0x0801ae48
 800e420:	0801b084 	.word	0x0801b084

0800e424 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d107      	bne.n	800e446 <tcp_recved+0x22>
 800e436:	4b1f      	ldr	r3, [pc, #124]	; (800e4b4 <tcp_recved+0x90>)
 800e438:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e43c:	491e      	ldr	r1, [pc, #120]	; (800e4b8 <tcp_recved+0x94>)
 800e43e:	481f      	ldr	r0, [pc, #124]	; (800e4bc <tcp_recved+0x98>)
 800e440:	f00a fdbc 	bl	8018fbc <iprintf>
 800e444:	e032      	b.n	800e4ac <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7d1b      	ldrb	r3, [r3, #20]
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	d106      	bne.n	800e45c <tcp_recved+0x38>
 800e44e:	4b19      	ldr	r3, [pc, #100]	; (800e4b4 <tcp_recved+0x90>)
 800e450:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e454:	491a      	ldr	r1, [pc, #104]	; (800e4c0 <tcp_recved+0x9c>)
 800e456:	4819      	ldr	r0, [pc, #100]	; (800e4bc <tcp_recved+0x98>)
 800e458:	f00a fdb0 	bl	8018fbc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e460:	887b      	ldrh	r3, [r7, #2]
 800e462:	4413      	add	r3, r2
 800e464:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e466:	89fb      	ldrh	r3, [r7, #14]
 800e468:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e46c:	d804      	bhi.n	800e478 <tcp_recved+0x54>
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e472:	89fa      	ldrh	r2, [r7, #14]
 800e474:	429a      	cmp	r2, r3
 800e476:	d204      	bcs.n	800e482 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e47e:	851a      	strh	r2, [r3, #40]	; 0x28
 800e480:	e002      	b.n	800e488 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	89fa      	ldrh	r2, [r7, #14]
 800e486:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e488:	6878      	ldr	r0, [r7, #4]
 800e48a:	f7ff ff71 	bl	800e370 <tcp_update_rcv_ann_wnd>
 800e48e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e490:	68bb      	ldr	r3, [r7, #8]
 800e492:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e496:	d309      	bcc.n	800e4ac <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	8b5b      	ldrh	r3, [r3, #26]
 800e49c:	f043 0302 	orr.w	r3, r3, #2
 800e4a0:	b29a      	uxth	r2, r3
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e4a6:	6878      	ldr	r0, [r7, #4]
 800e4a8:	f004 fbcc 	bl	8012c44 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e4ac:	3710      	adds	r7, #16
 800e4ae:	46bd      	mov	sp, r7
 800e4b0:	bd80      	pop	{r7, pc}
 800e4b2:	bf00      	nop
 800e4b4:	0801ae04 	.word	0x0801ae04
 800e4b8:	0801b0a0 	.word	0x0801b0a0
 800e4bc:	0801ae48 	.word	0x0801ae48
 800e4c0:	0801b0b8 	.word	0x0801b0b8

0800e4c4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	b083      	sub	sp, #12
 800e4c8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e4ce:	4b1e      	ldr	r3, [pc, #120]	; (800e548 <tcp_new_port+0x84>)
 800e4d0:	881b      	ldrh	r3, [r3, #0]
 800e4d2:	3301      	adds	r3, #1
 800e4d4:	b29a      	uxth	r2, r3
 800e4d6:	4b1c      	ldr	r3, [pc, #112]	; (800e548 <tcp_new_port+0x84>)
 800e4d8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e4da:	4b1b      	ldr	r3, [pc, #108]	; (800e548 <tcp_new_port+0x84>)
 800e4dc:	881b      	ldrh	r3, [r3, #0]
 800e4de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4e2:	4293      	cmp	r3, r2
 800e4e4:	d103      	bne.n	800e4ee <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e4e6:	4b18      	ldr	r3, [pc, #96]	; (800e548 <tcp_new_port+0x84>)
 800e4e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e4ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	71fb      	strb	r3, [r7, #7]
 800e4f2:	e01e      	b.n	800e532 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e4f4:	79fb      	ldrb	r3, [r7, #7]
 800e4f6:	4a15      	ldr	r2, [pc, #84]	; (800e54c <tcp_new_port+0x88>)
 800e4f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	603b      	str	r3, [r7, #0]
 800e500:	e011      	b.n	800e526 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	8ada      	ldrh	r2, [r3, #22]
 800e506:	4b10      	ldr	r3, [pc, #64]	; (800e548 <tcp_new_port+0x84>)
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d108      	bne.n	800e520 <tcp_new_port+0x5c>
        n++;
 800e50e:	88bb      	ldrh	r3, [r7, #4]
 800e510:	3301      	adds	r3, #1
 800e512:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e514:	88bb      	ldrh	r3, [r7, #4]
 800e516:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e51a:	d3d8      	bcc.n	800e4ce <tcp_new_port+0xa>
          return 0;
 800e51c:	2300      	movs	r3, #0
 800e51e:	e00d      	b.n	800e53c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	603b      	str	r3, [r7, #0]
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d1ea      	bne.n	800e502 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	3301      	adds	r3, #1
 800e530:	71fb      	strb	r3, [r7, #7]
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	2b03      	cmp	r3, #3
 800e536:	d9dd      	bls.n	800e4f4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e538:	4b03      	ldr	r3, [pc, #12]	; (800e548 <tcp_new_port+0x84>)
 800e53a:	881b      	ldrh	r3, [r3, #0]
}
 800e53c:	4618      	mov	r0, r3
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	2000003c 	.word	0x2000003c
 800e54c:	0801f58c 	.word	0x0801f58c

0800e550 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e550:	b5b0      	push	{r4, r5, r7, lr}
 800e552:	b090      	sub	sp, #64	; 0x40
 800e554:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e55c:	4b94      	ldr	r3, [pc, #592]	; (800e7b0 <tcp_slowtmr+0x260>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	3301      	adds	r3, #1
 800e562:	4a93      	ldr	r2, [pc, #588]	; (800e7b0 <tcp_slowtmr+0x260>)
 800e564:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e566:	4b93      	ldr	r3, [pc, #588]	; (800e7b4 <tcp_slowtmr+0x264>)
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	3301      	adds	r3, #1
 800e56c:	b2da      	uxtb	r2, r3
 800e56e:	4b91      	ldr	r3, [pc, #580]	; (800e7b4 <tcp_slowtmr+0x264>)
 800e570:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e572:	2300      	movs	r3, #0
 800e574:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e576:	4b90      	ldr	r3, [pc, #576]	; (800e7b8 <tcp_slowtmr+0x268>)
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e57c:	e29d      	b.n	800eaba <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e580:	7d1b      	ldrb	r3, [r3, #20]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d106      	bne.n	800e594 <tcp_slowtmr+0x44>
 800e586:	4b8d      	ldr	r3, [pc, #564]	; (800e7bc <tcp_slowtmr+0x26c>)
 800e588:	f240 42be 	movw	r2, #1214	; 0x4be
 800e58c:	498c      	ldr	r1, [pc, #560]	; (800e7c0 <tcp_slowtmr+0x270>)
 800e58e:	488d      	ldr	r0, [pc, #564]	; (800e7c4 <tcp_slowtmr+0x274>)
 800e590:	f00a fd14 	bl	8018fbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	7d1b      	ldrb	r3, [r3, #20]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d106      	bne.n	800e5aa <tcp_slowtmr+0x5a>
 800e59c:	4b87      	ldr	r3, [pc, #540]	; (800e7bc <tcp_slowtmr+0x26c>)
 800e59e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e5a2:	4989      	ldr	r1, [pc, #548]	; (800e7c8 <tcp_slowtmr+0x278>)
 800e5a4:	4887      	ldr	r0, [pc, #540]	; (800e7c4 <tcp_slowtmr+0x274>)
 800e5a6:	f00a fd09 	bl	8018fbc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e5aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ac:	7d1b      	ldrb	r3, [r3, #20]
 800e5ae:	2b0a      	cmp	r3, #10
 800e5b0:	d106      	bne.n	800e5c0 <tcp_slowtmr+0x70>
 800e5b2:	4b82      	ldr	r3, [pc, #520]	; (800e7bc <tcp_slowtmr+0x26c>)
 800e5b4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e5b8:	4984      	ldr	r1, [pc, #528]	; (800e7cc <tcp_slowtmr+0x27c>)
 800e5ba:	4882      	ldr	r0, [pc, #520]	; (800e7c4 <tcp_slowtmr+0x274>)
 800e5bc:	f00a fcfe 	bl	8018fbc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c2:	7f9a      	ldrb	r2, [r3, #30]
 800e5c4:	4b7b      	ldr	r3, [pc, #492]	; (800e7b4 <tcp_slowtmr+0x264>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d105      	bne.n	800e5d8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5d2:	68db      	ldr	r3, [r3, #12]
 800e5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e5d6:	e270      	b.n	800eaba <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e5d8:	4b76      	ldr	r3, [pc, #472]	; (800e7b4 <tcp_slowtmr+0x264>)
 800e5da:	781a      	ldrb	r2, [r3, #0]
 800e5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5de:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ee:	7d1b      	ldrb	r3, [r3, #20]
 800e5f0:	2b02      	cmp	r3, #2
 800e5f2:	d10a      	bne.n	800e60a <tcp_slowtmr+0xba>
 800e5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5fa:	2b05      	cmp	r3, #5
 800e5fc:	d905      	bls.n	800e60a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e5fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e602:	3301      	adds	r3, #1
 800e604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e608:	e11e      	b.n	800e848 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e610:	2b0b      	cmp	r3, #11
 800e612:	d905      	bls.n	800e620 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e618:	3301      	adds	r3, #1
 800e61a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e61e:	e113      	b.n	800e848 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e626:	2b00      	cmp	r3, #0
 800e628:	d075      	beq.n	800e716 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d006      	beq.n	800e640 <tcp_slowtmr+0xf0>
 800e632:	4b62      	ldr	r3, [pc, #392]	; (800e7bc <tcp_slowtmr+0x26c>)
 800e634:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e638:	4965      	ldr	r1, [pc, #404]	; (800e7d0 <tcp_slowtmr+0x280>)
 800e63a:	4862      	ldr	r0, [pc, #392]	; (800e7c4 <tcp_slowtmr+0x274>)
 800e63c:	f00a fcbe 	bl	8018fbc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e644:	2b00      	cmp	r3, #0
 800e646:	d106      	bne.n	800e656 <tcp_slowtmr+0x106>
 800e648:	4b5c      	ldr	r3, [pc, #368]	; (800e7bc <tcp_slowtmr+0x26c>)
 800e64a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e64e:	4961      	ldr	r1, [pc, #388]	; (800e7d4 <tcp_slowtmr+0x284>)
 800e650:	485c      	ldr	r0, [pc, #368]	; (800e7c4 <tcp_slowtmr+0x274>)
 800e652:	f00a fcb3 	bl	8018fbc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e658:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e65c:	2b0b      	cmp	r3, #11
 800e65e:	d905      	bls.n	800e66c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e664:	3301      	adds	r3, #1
 800e666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e66a:	e0ed      	b.n	800e848 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e66c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e672:	3b01      	subs	r3, #1
 800e674:	4a58      	ldr	r2, [pc, #352]	; (800e7d8 <tcp_slowtmr+0x288>)
 800e676:	5cd3      	ldrb	r3, [r2, r3]
 800e678:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e680:	7c7a      	ldrb	r2, [r7, #17]
 800e682:	429a      	cmp	r2, r3
 800e684:	d907      	bls.n	800e696 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e688:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e68c:	3301      	adds	r3, #1
 800e68e:	b2da      	uxtb	r2, r3
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e69c:	7c7a      	ldrb	r2, [r7, #17]
 800e69e:	429a      	cmp	r2, r3
 800e6a0:	f200 80d2 	bhi.w	800e848 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d108      	bne.n	800e6c4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e6b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6b4:	f005 f96e 	bl	8013994 <tcp_zero_window_probe>
 800e6b8:	4603      	mov	r3, r0
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d014      	beq.n	800e6e8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e6be:	2300      	movs	r3, #0
 800e6c0:	623b      	str	r3, [r7, #32]
 800e6c2:	e011      	b.n	800e6e8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6ce:	f004 f833 	bl	8012738 <tcp_split_unsent_seg>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d107      	bne.n	800e6e8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e6d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6da:	f004 fab3 	bl	8012c44 <tcp_output>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d101      	bne.n	800e6e8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e6e4:	2300      	movs	r3, #0
 800e6e6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e6e8:	6a3b      	ldr	r3, [r7, #32]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	f000 80ac 	beq.w	800e848 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e6fe:	2b06      	cmp	r3, #6
 800e700:	f200 80a2 	bhi.w	800e848 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e706:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e70a:	3301      	adds	r3, #1
 800e70c:	b2da      	uxtb	r2, r3
 800e70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e710:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e714:	e098      	b.n	800e848 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	db0f      	blt.n	800e740 <tcp_slowtmr+0x1f0>
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e726:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e72a:	4293      	cmp	r3, r2
 800e72c:	d008      	beq.n	800e740 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e730:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e734:	b29b      	uxth	r3, r3
 800e736:	3301      	adds	r3, #1
 800e738:	b29b      	uxth	r3, r3
 800e73a:	b21a      	sxth	r2, r3
 800e73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e742:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e74c:	429a      	cmp	r2, r3
 800e74e:	db7b      	blt.n	800e848 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e752:	f004 fd6b 	bl	801322c <tcp_rexmit_rto_prepare>
 800e756:	4603      	mov	r3, r0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d007      	beq.n	800e76c <tcp_slowtmr+0x21c>
 800e75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e760:	2b00      	cmp	r3, #0
 800e762:	d171      	bne.n	800e848 <tcp_slowtmr+0x2f8>
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d06d      	beq.n	800e848 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	7d1b      	ldrb	r3, [r3, #20]
 800e770:	2b02      	cmp	r3, #2
 800e772:	d03a      	beq.n	800e7ea <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e776:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e77a:	2b0c      	cmp	r3, #12
 800e77c:	bf28      	it	cs
 800e77e:	230c      	movcs	r3, #12
 800e780:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e788:	10db      	asrs	r3, r3, #3
 800e78a:	b21b      	sxth	r3, r3
 800e78c:	461a      	mov	r2, r3
 800e78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e790:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e794:	4413      	add	r3, r2
 800e796:	7efa      	ldrb	r2, [r7, #27]
 800e798:	4910      	ldr	r1, [pc, #64]	; (800e7dc <tcp_slowtmr+0x28c>)
 800e79a:	5c8a      	ldrb	r2, [r1, r2]
 800e79c:	4093      	lsls	r3, r2
 800e79e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	dc1a      	bgt.n	800e7e0 <tcp_slowtmr+0x290>
 800e7aa:	697b      	ldr	r3, [r7, #20]
 800e7ac:	b21a      	sxth	r2, r3
 800e7ae:	e019      	b.n	800e7e4 <tcp_slowtmr+0x294>
 800e7b0:	2000cedc 	.word	0x2000cedc
 800e7b4:	2000cef2 	.word	0x2000cef2
 800e7b8:	2000cee8 	.word	0x2000cee8
 800e7bc:	0801ae04 	.word	0x0801ae04
 800e7c0:	0801b148 	.word	0x0801b148
 800e7c4:	0801ae48 	.word	0x0801ae48
 800e7c8:	0801b174 	.word	0x0801b174
 800e7cc:	0801b1a0 	.word	0x0801b1a0
 800e7d0:	0801b1d0 	.word	0x0801b1d0
 800e7d4:	0801b204 	.word	0x0801b204
 800e7d8:	0801f584 	.word	0x0801f584
 800e7dc:	0801f574 	.word	0x0801f574
 800e7e0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	bf28      	it	cs
 800e800:	4613      	movcs	r3, r2
 800e802:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e804:	8a7b      	ldrh	r3, [r7, #18]
 800e806:	085b      	lsrs	r3, r3, #1
 800e808:	b29a      	uxth	r2, r3
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e812:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e818:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	b29b      	uxth	r3, r3
 800e81e:	429a      	cmp	r2, r3
 800e820:	d206      	bcs.n	800e830 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e826:	005b      	lsls	r3, r3, #1
 800e828:	b29a      	uxth	r2, r3
 800e82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e832:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e83a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e83c:	2200      	movs	r2, #0
 800e83e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e844:	f004 fd62 	bl	801330c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	7d1b      	ldrb	r3, [r3, #20]
 800e84c:	2b06      	cmp	r3, #6
 800e84e:	d111      	bne.n	800e874 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e852:	8b5b      	ldrh	r3, [r3, #26]
 800e854:	f003 0310 	and.w	r3, r3, #16
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d00b      	beq.n	800e874 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e85c:	4b9c      	ldr	r3, [pc, #624]	; (800ead0 <tcp_slowtmr+0x580>)
 800e85e:	681a      	ldr	r2, [r3, #0]
 800e860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e862:	6a1b      	ldr	r3, [r3, #32]
 800e864:	1ad3      	subs	r3, r2, r3
 800e866:	2b28      	cmp	r3, #40	; 0x28
 800e868:	d904      	bls.n	800e874 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e86a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e86e:	3301      	adds	r3, #1
 800e870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	7a5b      	ldrb	r3, [r3, #9]
 800e878:	f003 0308 	and.w	r3, r3, #8
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d04a      	beq.n	800e916 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e882:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e884:	2b04      	cmp	r3, #4
 800e886:	d003      	beq.n	800e890 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e88a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e88c:	2b07      	cmp	r3, #7
 800e88e:	d142      	bne.n	800e916 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e890:	4b8f      	ldr	r3, [pc, #572]	; (800ead0 <tcp_slowtmr+0x580>)
 800e892:	681a      	ldr	r2, [r3, #0]
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	6a1b      	ldr	r3, [r3, #32]
 800e898:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e8a0:	4b8c      	ldr	r3, [pc, #560]	; (800ead4 <tcp_slowtmr+0x584>)
 800e8a2:	440b      	add	r3, r1
 800e8a4:	498c      	ldr	r1, [pc, #560]	; (800ead8 <tcp_slowtmr+0x588>)
 800e8a6:	fba1 1303 	umull	r1, r3, r1, r3
 800e8aa:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d90a      	bls.n	800e8c6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e8b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8b4:	3301      	adds	r3, #1
 800e8b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e8ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e8be:	3301      	adds	r3, #1
 800e8c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e8c4:	e027      	b.n	800e916 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8c6:	4b82      	ldr	r3, [pc, #520]	; (800ead0 <tcp_slowtmr+0x580>)
 800e8c8:	681a      	ldr	r2, [r3, #0]
 800e8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8cc:	6a1b      	ldr	r3, [r3, #32]
 800e8ce:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e8dc:	4618      	mov	r0, r3
 800e8de:	4b7f      	ldr	r3, [pc, #508]	; (800eadc <tcp_slowtmr+0x58c>)
 800e8e0:	fb00 f303 	mul.w	r3, r0, r3
 800e8e4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e8e6:	497c      	ldr	r1, [pc, #496]	; (800ead8 <tcp_slowtmr+0x588>)
 800e8e8:	fba1 1303 	umull	r1, r3, r1, r3
 800e8ec:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e8ee:	429a      	cmp	r2, r3
 800e8f0:	d911      	bls.n	800e916 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8f4:	f005 f80e 	bl	8013914 <tcp_keepalive>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e8fe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e902:	2b00      	cmp	r3, #0
 800e904:	d107      	bne.n	800e916 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e908:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e90c:	3301      	adds	r3, #1
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d011      	beq.n	800e942 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e91e:	4b6c      	ldr	r3, [pc, #432]	; (800ead0 <tcp_slowtmr+0x580>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	6a1b      	ldr	r3, [r3, #32]
 800e926:	1ad2      	subs	r2, r2, r3
 800e928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e92a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e92e:	4619      	mov	r1, r3
 800e930:	460b      	mov	r3, r1
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	440b      	add	r3, r1
 800e936:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e938:	429a      	cmp	r2, r3
 800e93a:	d302      	bcc.n	800e942 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e93c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e93e:	f000 fec9 	bl	800f6d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e944:	7d1b      	ldrb	r3, [r3, #20]
 800e946:	2b03      	cmp	r3, #3
 800e948:	d10b      	bne.n	800e962 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e94a:	4b61      	ldr	r3, [pc, #388]	; (800ead0 <tcp_slowtmr+0x580>)
 800e94c:	681a      	ldr	r2, [r3, #0]
 800e94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e950:	6a1b      	ldr	r3, [r3, #32]
 800e952:	1ad3      	subs	r3, r2, r3
 800e954:	2b28      	cmp	r3, #40	; 0x28
 800e956:	d904      	bls.n	800e962 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e958:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e95c:	3301      	adds	r3, #1
 800e95e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	7d1b      	ldrb	r3, [r3, #20]
 800e966:	2b09      	cmp	r3, #9
 800e968:	d10b      	bne.n	800e982 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e96a:	4b59      	ldr	r3, [pc, #356]	; (800ead0 <tcp_slowtmr+0x580>)
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e970:	6a1b      	ldr	r3, [r3, #32]
 800e972:	1ad3      	subs	r3, r2, r3
 800e974:	2bf0      	cmp	r3, #240	; 0xf0
 800e976:	d904      	bls.n	800e982 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e97c:	3301      	adds	r3, #1
 800e97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e986:	2b00      	cmp	r3, #0
 800e988:	d060      	beq.n	800ea4c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e990:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e994:	f000 fcea 	bl	800f36c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d010      	beq.n	800e9c0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e99e:	4b50      	ldr	r3, [pc, #320]	; (800eae0 <tcp_slowtmr+0x590>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a4:	429a      	cmp	r2, r3
 800e9a6:	d106      	bne.n	800e9b6 <tcp_slowtmr+0x466>
 800e9a8:	4b4e      	ldr	r3, [pc, #312]	; (800eae4 <tcp_slowtmr+0x594>)
 800e9aa:	f240 526d 	movw	r2, #1389	; 0x56d
 800e9ae:	494e      	ldr	r1, [pc, #312]	; (800eae8 <tcp_slowtmr+0x598>)
 800e9b0:	484e      	ldr	r0, [pc, #312]	; (800eaec <tcp_slowtmr+0x59c>)
 800e9b2:	f00a fb03 	bl	8018fbc <iprintf>
        prev->next = pcb->next;
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	68da      	ldr	r2, [r3, #12]
 800e9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9bc:	60da      	str	r2, [r3, #12]
 800e9be:	e00f      	b.n	800e9e0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e9c0:	4b47      	ldr	r3, [pc, #284]	; (800eae0 <tcp_slowtmr+0x590>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d006      	beq.n	800e9d8 <tcp_slowtmr+0x488>
 800e9ca:	4b46      	ldr	r3, [pc, #280]	; (800eae4 <tcp_slowtmr+0x594>)
 800e9cc:	f240 5271 	movw	r2, #1393	; 0x571
 800e9d0:	4947      	ldr	r1, [pc, #284]	; (800eaf0 <tcp_slowtmr+0x5a0>)
 800e9d2:	4846      	ldr	r0, [pc, #280]	; (800eaec <tcp_slowtmr+0x59c>)
 800e9d4:	f00a faf2 	bl	8018fbc <iprintf>
        tcp_active_pcbs = pcb->next;
 800e9d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	4a40      	ldr	r2, [pc, #256]	; (800eae0 <tcp_slowtmr+0x590>)
 800e9de:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e9e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d013      	beq.n	800ea10 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e9e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e9ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e9f0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f4:	3304      	adds	r3, #4
 800e9f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9f8:	8ad2      	ldrh	r2, [r2, #22]
 800e9fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e9fc:	8b09      	ldrh	r1, [r1, #24]
 800e9fe:	9102      	str	r1, [sp, #8]
 800ea00:	9201      	str	r2, [sp, #4]
 800ea02:	9300      	str	r3, [sp, #0]
 800ea04:	462b      	mov	r3, r5
 800ea06:	4622      	mov	r2, r4
 800ea08:	4601      	mov	r1, r0
 800ea0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea0c:	f004 fece 	bl	80137ac <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ea10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea12:	691b      	ldr	r3, [r3, #16]
 800ea14:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ea16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea18:	7d1b      	ldrb	r3, [r3, #20]
 800ea1a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ea1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ea20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea22:	68db      	ldr	r3, [r3, #12]
 800ea24:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea26:	6838      	ldr	r0, [r7, #0]
 800ea28:	f7ff f83a 	bl	800daa0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ea2c:	4b31      	ldr	r3, [pc, #196]	; (800eaf4 <tcp_slowtmr+0x5a4>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d004      	beq.n	800ea42 <tcp_slowtmr+0x4f2>
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	f06f 010c 	mvn.w	r1, #12
 800ea3e:	68b8      	ldr	r0, [r7, #8]
 800ea40:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ea42:	4b2c      	ldr	r3, [pc, #176]	; (800eaf4 <tcp_slowtmr+0x5a4>)
 800ea44:	781b      	ldrb	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d037      	beq.n	800eaba <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ea4a:	e592      	b.n	800e572 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ea4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ea56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea58:	7f1b      	ldrb	r3, [r3, #28]
 800ea5a:	3301      	adds	r3, #1
 800ea5c:	b2da      	uxtb	r2, r3
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ea62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea64:	7f1a      	ldrb	r2, [r3, #28]
 800ea66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea68:	7f5b      	ldrb	r3, [r3, #29]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d325      	bcc.n	800eaba <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ea6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea70:	2200      	movs	r2, #0
 800ea72:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ea74:	4b1f      	ldr	r3, [pc, #124]	; (800eaf4 <tcp_slowtmr+0x5a4>)
 800ea76:	2200      	movs	r2, #0
 800ea78:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ea7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d00b      	beq.n	800ea9c <tcp_slowtmr+0x54c>
 800ea84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea8c:	6912      	ldr	r2, [r2, #16]
 800ea8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea90:	4610      	mov	r0, r2
 800ea92:	4798      	blx	r3
 800ea94:	4603      	mov	r3, r0
 800ea96:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ea9a:	e002      	b.n	800eaa2 <tcp_slowtmr+0x552>
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800eaa2:	4b14      	ldr	r3, [pc, #80]	; (800eaf4 <tcp_slowtmr+0x5a4>)
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d000      	beq.n	800eaac <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800eaaa:	e562      	b.n	800e572 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800eaac:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d102      	bne.n	800eaba <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800eab4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eab6:	f004 f8c5 	bl	8012c44 <tcp_output>
  while (pcb != NULL) {
 800eaba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	f47f ad5e 	bne.w	800e57e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800eac2:	2300      	movs	r3, #0
 800eac4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800eac6:	4b0c      	ldr	r3, [pc, #48]	; (800eaf8 <tcp_slowtmr+0x5a8>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eacc:	e069      	b.n	800eba2 <tcp_slowtmr+0x652>
 800eace:	bf00      	nop
 800ead0:	2000cedc 	.word	0x2000cedc
 800ead4:	000a4cb8 	.word	0x000a4cb8
 800ead8:	10624dd3 	.word	0x10624dd3
 800eadc:	000124f8 	.word	0x000124f8
 800eae0:	2000cee8 	.word	0x2000cee8
 800eae4:	0801ae04 	.word	0x0801ae04
 800eae8:	0801b23c 	.word	0x0801b23c
 800eaec:	0801ae48 	.word	0x0801ae48
 800eaf0:	0801b268 	.word	0x0801b268
 800eaf4:	2000cef0 	.word	0x2000cef0
 800eaf8:	2000ceec 	.word	0x2000ceec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800eafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eafe:	7d1b      	ldrb	r3, [r3, #20]
 800eb00:	2b0a      	cmp	r3, #10
 800eb02:	d006      	beq.n	800eb12 <tcp_slowtmr+0x5c2>
 800eb04:	4b2b      	ldr	r3, [pc, #172]	; (800ebb4 <tcp_slowtmr+0x664>)
 800eb06:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800eb0a:	492b      	ldr	r1, [pc, #172]	; (800ebb8 <tcp_slowtmr+0x668>)
 800eb0c:	482b      	ldr	r0, [pc, #172]	; (800ebbc <tcp_slowtmr+0x66c>)
 800eb0e:	f00a fa55 	bl	8018fbc <iprintf>
    pcb_remove = 0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800eb18:	4b29      	ldr	r3, [pc, #164]	; (800ebc0 <tcp_slowtmr+0x670>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	1ad3      	subs	r3, r2, r3
 800eb22:	2bf0      	cmp	r3, #240	; 0xf0
 800eb24:	d904      	bls.n	800eb30 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800eb26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb2a:	3301      	adds	r3, #1
 800eb2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800eb30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d02f      	beq.n	800eb98 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800eb38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800eb3a:	f000 fc17 	bl	800f36c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800eb3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d010      	beq.n	800eb66 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800eb44:	4b1f      	ldr	r3, [pc, #124]	; (800ebc4 <tcp_slowtmr+0x674>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d106      	bne.n	800eb5c <tcp_slowtmr+0x60c>
 800eb4e:	4b19      	ldr	r3, [pc, #100]	; (800ebb4 <tcp_slowtmr+0x664>)
 800eb50:	f240 52af 	movw	r2, #1455	; 0x5af
 800eb54:	491c      	ldr	r1, [pc, #112]	; (800ebc8 <tcp_slowtmr+0x678>)
 800eb56:	4819      	ldr	r0, [pc, #100]	; (800ebbc <tcp_slowtmr+0x66c>)
 800eb58:	f00a fa30 	bl	8018fbc <iprintf>
        prev->next = pcb->next;
 800eb5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb5e:	68da      	ldr	r2, [r3, #12]
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	60da      	str	r2, [r3, #12]
 800eb64:	e00f      	b.n	800eb86 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800eb66:	4b17      	ldr	r3, [pc, #92]	; (800ebc4 <tcp_slowtmr+0x674>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d006      	beq.n	800eb7e <tcp_slowtmr+0x62e>
 800eb70:	4b10      	ldr	r3, [pc, #64]	; (800ebb4 <tcp_slowtmr+0x664>)
 800eb72:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800eb76:	4915      	ldr	r1, [pc, #84]	; (800ebcc <tcp_slowtmr+0x67c>)
 800eb78:	4810      	ldr	r0, [pc, #64]	; (800ebbc <tcp_slowtmr+0x66c>)
 800eb7a:	f00a fa1f 	bl	8018fbc <iprintf>
        tcp_tw_pcbs = pcb->next;
 800eb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb80:	68db      	ldr	r3, [r3, #12]
 800eb82:	4a10      	ldr	r2, [pc, #64]	; (800ebc4 <tcp_slowtmr+0x674>)
 800eb84:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800eb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb88:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800eb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800eb90:	69f8      	ldr	r0, [r7, #28]
 800eb92:	f7fe ff85 	bl	800daa0 <tcp_free>
 800eb96:	e004      	b.n	800eba2 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800eb98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800eb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800eba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1a9      	bne.n	800eafc <tcp_slowtmr+0x5ac>
    }
  }
}
 800eba8:	bf00      	nop
 800ebaa:	bf00      	nop
 800ebac:	3730      	adds	r7, #48	; 0x30
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bdb0      	pop	{r4, r5, r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	0801ae04 	.word	0x0801ae04
 800ebb8:	0801b294 	.word	0x0801b294
 800ebbc:	0801ae48 	.word	0x0801ae48
 800ebc0:	2000cedc 	.word	0x2000cedc
 800ebc4:	2000ceec 	.word	0x2000ceec
 800ebc8:	0801b2c4 	.word	0x0801b2c4
 800ebcc:	0801b2ec 	.word	0x0801b2ec

0800ebd0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ebd6:	4b2d      	ldr	r3, [pc, #180]	; (800ec8c <tcp_fasttmr+0xbc>)
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	b2da      	uxtb	r2, r3
 800ebde:	4b2b      	ldr	r3, [pc, #172]	; (800ec8c <tcp_fasttmr+0xbc>)
 800ebe0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ebe2:	4b2b      	ldr	r3, [pc, #172]	; (800ec90 <tcp_fasttmr+0xc0>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ebe8:	e048      	b.n	800ec7c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	7f9a      	ldrb	r2, [r3, #30]
 800ebee:	4b27      	ldr	r3, [pc, #156]	; (800ec8c <tcp_fasttmr+0xbc>)
 800ebf0:	781b      	ldrb	r3, [r3, #0]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d03f      	beq.n	800ec76 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ebf6:	4b25      	ldr	r3, [pc, #148]	; (800ec8c <tcp_fasttmr+0xbc>)
 800ebf8:	781a      	ldrb	r2, [r3, #0]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	8b5b      	ldrh	r3, [r3, #26]
 800ec02:	f003 0301 	and.w	r3, r3, #1
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d010      	beq.n	800ec2c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	8b5b      	ldrh	r3, [r3, #26]
 800ec0e:	f043 0302 	orr.w	r3, r3, #2
 800ec12:	b29a      	uxth	r2, r3
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f004 f813 	bl	8012c44 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	8b5b      	ldrh	r3, [r3, #26]
 800ec22:	f023 0303 	bic.w	r3, r3, #3
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	8b5b      	ldrh	r3, [r3, #26]
 800ec30:	f003 0308 	and.w	r3, r3, #8
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d009      	beq.n	800ec4c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	8b5b      	ldrh	r3, [r3, #26]
 800ec3c:	f023 0308 	bic.w	r3, r3, #8
 800ec40:	b29a      	uxth	r2, r3
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f7ff f8be 	bl	800ddc8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00a      	beq.n	800ec70 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ec5a:	4b0e      	ldr	r3, [pc, #56]	; (800ec94 <tcp_fasttmr+0xc4>)
 800ec5c:	2200      	movs	r2, #0
 800ec5e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f819 	bl	800ec98 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ec66:	4b0b      	ldr	r3, [pc, #44]	; (800ec94 <tcp_fasttmr+0xc4>)
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d000      	beq.n	800ec70 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ec6e:	e7b8      	b.n	800ebe2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ec70:	683b      	ldr	r3, [r7, #0]
 800ec72:	607b      	str	r3, [r7, #4]
 800ec74:	e002      	b.n	800ec7c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	68db      	ldr	r3, [r3, #12]
 800ec7a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d1b3      	bne.n	800ebea <tcp_fasttmr+0x1a>
    }
  }
}
 800ec82:	bf00      	nop
 800ec84:	bf00      	nop
 800ec86:	3708      	adds	r7, #8
 800ec88:	46bd      	mov	sp, r7
 800ec8a:	bd80      	pop	{r7, pc}
 800ec8c:	2000cef2 	.word	0x2000cef2
 800ec90:	2000cee8 	.word	0x2000cee8
 800ec94:	2000cef0 	.word	0x2000cef0

0800ec98 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ec98:	b590      	push	{r4, r7, lr}
 800ec9a:	b085      	sub	sp, #20
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d109      	bne.n	800ecba <tcp_process_refused_data+0x22>
 800eca6:	4b37      	ldr	r3, [pc, #220]	; (800ed84 <tcp_process_refused_data+0xec>)
 800eca8:	f240 6209 	movw	r2, #1545	; 0x609
 800ecac:	4936      	ldr	r1, [pc, #216]	; (800ed88 <tcp_process_refused_data+0xf0>)
 800ecae:	4837      	ldr	r0, [pc, #220]	; (800ed8c <tcp_process_refused_data+0xf4>)
 800ecb0:	f00a f984 	bl	8018fbc <iprintf>
 800ecb4:	f06f 030f 	mvn.w	r3, #15
 800ecb8:	e060      	b.n	800ed7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecbe:	7b5b      	ldrb	r3, [r3, #13]
 800ecc0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecc6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2200      	movs	r2, #0
 800eccc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00b      	beq.n	800ecf0 <tcp_process_refused_data+0x58>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	6918      	ldr	r0, [r3, #16]
 800ece2:	2300      	movs	r3, #0
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	6879      	ldr	r1, [r7, #4]
 800ece8:	47a0      	blx	r4
 800ecea:	4603      	mov	r3, r0
 800ecec:	73fb      	strb	r3, [r7, #15]
 800ecee:	e007      	b.n	800ed00 <tcp_process_refused_data+0x68>
 800ecf0:	2300      	movs	r3, #0
 800ecf2:	68ba      	ldr	r2, [r7, #8]
 800ecf4:	6879      	ldr	r1, [r7, #4]
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	f000 f8c2 	bl	800ee80 <tcp_recv_null>
 800ecfc:	4603      	mov	r3, r0
 800ecfe:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ed00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d12a      	bne.n	800ed5e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ed08:	7bbb      	ldrb	r3, [r7, #14]
 800ed0a:	f003 0320 	and.w	r3, r3, #32
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d033      	beq.n	800ed7a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ed1a:	d005      	beq.n	800ed28 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ed20:	3301      	adds	r3, #1
 800ed22:	b29a      	uxth	r2, r3
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00b      	beq.n	800ed4a <tcp_process_refused_data+0xb2>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	6918      	ldr	r0, [r3, #16]
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	2200      	movs	r2, #0
 800ed40:	6879      	ldr	r1, [r7, #4]
 800ed42:	47a0      	blx	r4
 800ed44:	4603      	mov	r3, r0
 800ed46:	73fb      	strb	r3, [r7, #15]
 800ed48:	e001      	b.n	800ed4e <tcp_process_refused_data+0xb6>
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ed4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed52:	f113 0f0d 	cmn.w	r3, #13
 800ed56:	d110      	bne.n	800ed7a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ed58:	f06f 030c 	mvn.w	r3, #12
 800ed5c:	e00e      	b.n	800ed7c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ed5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed62:	f113 0f0d 	cmn.w	r3, #13
 800ed66:	d102      	bne.n	800ed6e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ed68:	f06f 030c 	mvn.w	r3, #12
 800ed6c:	e006      	b.n	800ed7c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ed74:	f06f 0304 	mvn.w	r3, #4
 800ed78:	e000      	b.n	800ed7c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3714      	adds	r7, #20
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd90      	pop	{r4, r7, pc}
 800ed84:	0801ae04 	.word	0x0801ae04
 800ed88:	0801b314 	.word	0x0801b314
 800ed8c:	0801ae48 	.word	0x0801ae48

0800ed90 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ed98:	e007      	b.n	800edaa <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f000 f80a 	bl	800edba <tcp_seg_free>
    seg = next;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d1f4      	bne.n	800ed9a <tcp_segs_free+0xa>
  }
}
 800edb0:	bf00      	nop
 800edb2:	bf00      	nop
 800edb4:	3710      	adds	r7, #16
 800edb6:	46bd      	mov	sp, r7
 800edb8:	bd80      	pop	{r7, pc}

0800edba <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800edba:	b580      	push	{r7, lr}
 800edbc:	b082      	sub	sp, #8
 800edbe:	af00      	add	r7, sp, #0
 800edc0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00c      	beq.n	800ede2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d004      	beq.n	800edda <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	685b      	ldr	r3, [r3, #4]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f7fe fba7 	bl	800d528 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	2003      	movs	r0, #3
 800edde:	f7fd fcf3 	bl	800c7c8 <memp_free>
  }
}
 800ede2:	bf00      	nop
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
	...

0800edec <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b082      	sub	sp, #8
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	460b      	mov	r3, r1
 800edf6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d107      	bne.n	800ee0e <tcp_setprio+0x22>
 800edfe:	4b07      	ldr	r3, [pc, #28]	; (800ee1c <tcp_setprio+0x30>)
 800ee00:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800ee04:	4906      	ldr	r1, [pc, #24]	; (800ee20 <tcp_setprio+0x34>)
 800ee06:	4807      	ldr	r0, [pc, #28]	; (800ee24 <tcp_setprio+0x38>)
 800ee08:	f00a f8d8 	bl	8018fbc <iprintf>
 800ee0c:	e002      	b.n	800ee14 <tcp_setprio+0x28>

  pcb->prio = prio;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	78fa      	ldrb	r2, [r7, #3]
 800ee12:	755a      	strb	r2, [r3, #21]
}
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	0801ae04 	.word	0x0801ae04
 800ee20:	0801b33c 	.word	0x0801b33c
 800ee24:	0801ae48 	.word	0x0801ae48

0800ee28 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d106      	bne.n	800ee44 <tcp_seg_copy+0x1c>
 800ee36:	4b0f      	ldr	r3, [pc, #60]	; (800ee74 <tcp_seg_copy+0x4c>)
 800ee38:	f240 6282 	movw	r2, #1666	; 0x682
 800ee3c:	490e      	ldr	r1, [pc, #56]	; (800ee78 <tcp_seg_copy+0x50>)
 800ee3e:	480f      	ldr	r0, [pc, #60]	; (800ee7c <tcp_seg_copy+0x54>)
 800ee40:	f00a f8bc 	bl	8018fbc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ee44:	2003      	movs	r0, #3
 800ee46:	f7fd fc49 	bl	800c6dc <memp_malloc>
 800ee4a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d101      	bne.n	800ee56 <tcp_seg_copy+0x2e>
    return NULL;
 800ee52:	2300      	movs	r3, #0
 800ee54:	e00a      	b.n	800ee6c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ee56:	2210      	movs	r2, #16
 800ee58:	6879      	ldr	r1, [r7, #4]
 800ee5a:	68f8      	ldr	r0, [r7, #12]
 800ee5c:	f00a f9ac 	bl	80191b8 <memcpy>
  pbuf_ref(cseg->p);
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	685b      	ldr	r3, [r3, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fe fc05 	bl	800d674 <pbuf_ref>
  return cseg;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3710      	adds	r7, #16
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd80      	pop	{r7, pc}
 800ee74:	0801ae04 	.word	0x0801ae04
 800ee78:	0801b358 	.word	0x0801b358
 800ee7c:	0801ae48 	.word	0x0801ae48

0800ee80 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
 800ee8c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d109      	bne.n	800eea8 <tcp_recv_null+0x28>
 800ee94:	4b12      	ldr	r3, [pc, #72]	; (800eee0 <tcp_recv_null+0x60>)
 800ee96:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ee9a:	4912      	ldr	r1, [pc, #72]	; (800eee4 <tcp_recv_null+0x64>)
 800ee9c:	4812      	ldr	r0, [pc, #72]	; (800eee8 <tcp_recv_null+0x68>)
 800ee9e:	f00a f88d 	bl	8018fbc <iprintf>
 800eea2:	f06f 030f 	mvn.w	r3, #15
 800eea6:	e016      	b.n	800eed6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d009      	beq.n	800eec2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	891b      	ldrh	r3, [r3, #8]
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	68b8      	ldr	r0, [r7, #8]
 800eeb6:	f7ff fab5 	bl	800e424 <tcp_recved>
    pbuf_free(p);
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f7fe fb34 	bl	800d528 <pbuf_free>
 800eec0:	e008      	b.n	800eed4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800eec2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d104      	bne.n	800eed4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800eeca:	68b8      	ldr	r0, [r7, #8]
 800eecc:	f7fe ffe6 	bl	800de9c <tcp_close>
 800eed0:	4603      	mov	r3, r0
 800eed2:	e000      	b.n	800eed6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800eed4:	2300      	movs	r3, #0
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	3710      	adds	r7, #16
 800eeda:	46bd      	mov	sp, r7
 800eedc:	bd80      	pop	{r7, pc}
 800eede:	bf00      	nop
 800eee0:	0801ae04 	.word	0x0801ae04
 800eee4:	0801b374 	.word	0x0801b374
 800eee8:	0801ae48 	.word	0x0801ae48

0800eeec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b086      	sub	sp, #24
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	db01      	blt.n	800ef02 <tcp_kill_prio+0x16>
 800eefe:	79fb      	ldrb	r3, [r7, #7]
 800ef00:	e000      	b.n	800ef04 <tcp_kill_prio+0x18>
 800ef02:	237f      	movs	r3, #127	; 0x7f
 800ef04:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ef06:	7afb      	ldrb	r3, [r7, #11]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d034      	beq.n	800ef76 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ef0c:	7afb      	ldrb	r3, [r7, #11]
 800ef0e:	3b01      	subs	r3, #1
 800ef10:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ef16:	2300      	movs	r3, #0
 800ef18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef1a:	4b19      	ldr	r3, [pc, #100]	; (800ef80 <tcp_kill_prio+0x94>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	617b      	str	r3, [r7, #20]
 800ef20:	e01f      	b.n	800ef62 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ef22:	697b      	ldr	r3, [r7, #20]
 800ef24:	7d5b      	ldrb	r3, [r3, #21]
 800ef26:	7afa      	ldrb	r2, [r7, #11]
 800ef28:	429a      	cmp	r2, r3
 800ef2a:	d80c      	bhi.n	800ef46 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ef30:	7afa      	ldrb	r2, [r7, #11]
 800ef32:	429a      	cmp	r2, r3
 800ef34:	d112      	bne.n	800ef5c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ef36:	4b13      	ldr	r3, [pc, #76]	; (800ef84 <tcp_kill_prio+0x98>)
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	6a1b      	ldr	r3, [r3, #32]
 800ef3e:	1ad3      	subs	r3, r2, r3
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d80a      	bhi.n	800ef5c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ef46:	4b0f      	ldr	r3, [pc, #60]	; (800ef84 <tcp_kill_prio+0x98>)
 800ef48:	681a      	ldr	r2, [r3, #0]
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	6a1b      	ldr	r3, [r3, #32]
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ef52:	697b      	ldr	r3, [r7, #20]
 800ef54:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ef56:	697b      	ldr	r3, [r7, #20]
 800ef58:	7d5b      	ldrb	r3, [r3, #21]
 800ef5a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	68db      	ldr	r3, [r3, #12]
 800ef60:	617b      	str	r3, [r7, #20]
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1dc      	bne.n	800ef22 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ef68:	693b      	ldr	r3, [r7, #16]
 800ef6a:	2b00      	cmp	r3, #0
 800ef6c:	d004      	beq.n	800ef78 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ef6e:	6938      	ldr	r0, [r7, #16]
 800ef70:	f7ff f87e 	bl	800e070 <tcp_abort>
 800ef74:	e000      	b.n	800ef78 <tcp_kill_prio+0x8c>
    return;
 800ef76:	bf00      	nop
  }
}
 800ef78:	3718      	adds	r7, #24
 800ef7a:	46bd      	mov	sp, r7
 800ef7c:	bd80      	pop	{r7, pc}
 800ef7e:	bf00      	nop
 800ef80:	2000cee8 	.word	0x2000cee8
 800ef84:	2000cedc 	.word	0x2000cedc

0800ef88 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ef88:	b580      	push	{r7, lr}
 800ef8a:	b086      	sub	sp, #24
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	4603      	mov	r3, r0
 800ef90:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ef92:	79fb      	ldrb	r3, [r7, #7]
 800ef94:	2b08      	cmp	r3, #8
 800ef96:	d009      	beq.n	800efac <tcp_kill_state+0x24>
 800ef98:	79fb      	ldrb	r3, [r7, #7]
 800ef9a:	2b09      	cmp	r3, #9
 800ef9c:	d006      	beq.n	800efac <tcp_kill_state+0x24>
 800ef9e:	4b1a      	ldr	r3, [pc, #104]	; (800f008 <tcp_kill_state+0x80>)
 800efa0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800efa4:	4919      	ldr	r1, [pc, #100]	; (800f00c <tcp_kill_state+0x84>)
 800efa6:	481a      	ldr	r0, [pc, #104]	; (800f010 <tcp_kill_state+0x88>)
 800efa8:	f00a f808 	bl	8018fbc <iprintf>

  inactivity = 0;
 800efac:	2300      	movs	r3, #0
 800efae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800efb0:	2300      	movs	r3, #0
 800efb2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efb4:	4b17      	ldr	r3, [pc, #92]	; (800f014 <tcp_kill_state+0x8c>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	617b      	str	r3, [r7, #20]
 800efba:	e017      	b.n	800efec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	7d1b      	ldrb	r3, [r3, #20]
 800efc0:	79fa      	ldrb	r2, [r7, #7]
 800efc2:	429a      	cmp	r2, r3
 800efc4:	d10f      	bne.n	800efe6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800efc6:	4b14      	ldr	r3, [pc, #80]	; (800f018 <tcp_kill_state+0x90>)
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	1ad3      	subs	r3, r2, r3
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d807      	bhi.n	800efe6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800efd6:	4b10      	ldr	r3, [pc, #64]	; (800f018 <tcp_kill_state+0x90>)
 800efd8:	681a      	ldr	r2, [r3, #0]
 800efda:	697b      	ldr	r3, [r7, #20]
 800efdc:	6a1b      	ldr	r3, [r3, #32]
 800efde:	1ad3      	subs	r3, r2, r3
 800efe0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800efe2:	697b      	ldr	r3, [r7, #20]
 800efe4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	68db      	ldr	r3, [r3, #12]
 800efea:	617b      	str	r3, [r7, #20]
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d1e4      	bne.n	800efbc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d003      	beq.n	800f000 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eff8:	2100      	movs	r1, #0
 800effa:	6938      	ldr	r0, [r7, #16]
 800effc:	f7fe ff7a 	bl	800def4 <tcp_abandon>
  }
}
 800f000:	bf00      	nop
 800f002:	3718      	adds	r7, #24
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}
 800f008:	0801ae04 	.word	0x0801ae04
 800f00c:	0801b390 	.word	0x0801b390
 800f010:	0801ae48 	.word	0x0801ae48
 800f014:	2000cee8 	.word	0x2000cee8
 800f018:	2000cedc 	.word	0x2000cedc

0800f01c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800f022:	2300      	movs	r3, #0
 800f024:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800f026:	2300      	movs	r3, #0
 800f028:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f02a:	4b12      	ldr	r3, [pc, #72]	; (800f074 <tcp_kill_timewait+0x58>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	60fb      	str	r3, [r7, #12]
 800f030:	e012      	b.n	800f058 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800f032:	4b11      	ldr	r3, [pc, #68]	; (800f078 <tcp_kill_timewait+0x5c>)
 800f034:	681a      	ldr	r2, [r3, #0]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	6a1b      	ldr	r3, [r3, #32]
 800f03a:	1ad3      	subs	r3, r2, r3
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d807      	bhi.n	800f052 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800f042:	4b0d      	ldr	r3, [pc, #52]	; (800f078 <tcp_kill_timewait+0x5c>)
 800f044:	681a      	ldr	r2, [r3, #0]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	6a1b      	ldr	r3, [r3, #32]
 800f04a:	1ad3      	subs	r3, r2, r3
 800f04c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	60fb      	str	r3, [r7, #12]
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d1e9      	bne.n	800f032 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800f05e:	68bb      	ldr	r3, [r7, #8]
 800f060:	2b00      	cmp	r3, #0
 800f062:	d002      	beq.n	800f06a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800f064:	68b8      	ldr	r0, [r7, #8]
 800f066:	f7ff f803 	bl	800e070 <tcp_abort>
  }
}
 800f06a:	bf00      	nop
 800f06c:	3710      	adds	r7, #16
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	2000ceec 	.word	0x2000ceec
 800f078:	2000cedc 	.word	0x2000cedc

0800f07c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b082      	sub	sp, #8
 800f080:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800f082:	4b10      	ldr	r3, [pc, #64]	; (800f0c4 <tcp_handle_closepend+0x48>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800f088:	e014      	b.n	800f0b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	8b5b      	ldrh	r3, [r3, #26]
 800f094:	f003 0308 	and.w	r3, r3, #8
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d009      	beq.n	800f0b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	8b5b      	ldrh	r3, [r3, #26]
 800f0a0:	f023 0308 	bic.w	r3, r3, #8
 800f0a4:	b29a      	uxth	r2, r3
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7fe fe8c 	bl	800ddc8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d1e7      	bne.n	800f08a <tcp_handle_closepend+0xe>
  }
}
 800f0ba:	bf00      	nop
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	2000cee8 	.word	0x2000cee8

0800f0c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	4603      	mov	r3, r0
 800f0d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	f7fd fb02 	bl	800c6dc <memp_malloc>
 800f0d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d126      	bne.n	800f12e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800f0e0:	f7ff ffcc 	bl	800f07c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800f0e4:	f7ff ff9a 	bl	800f01c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0e8:	2001      	movs	r0, #1
 800f0ea:	f7fd faf7 	bl	800c6dc <memp_malloc>
 800f0ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d11b      	bne.n	800f12e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800f0f6:	2009      	movs	r0, #9
 800f0f8:	f7ff ff46 	bl	800ef88 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f0fc:	2001      	movs	r0, #1
 800f0fe:	f7fd faed 	bl	800c6dc <memp_malloc>
 800f102:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d111      	bne.n	800f12e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800f10a:	2008      	movs	r0, #8
 800f10c:	f7ff ff3c 	bl	800ef88 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f110:	2001      	movs	r0, #1
 800f112:	f7fd fae3 	bl	800c6dc <memp_malloc>
 800f116:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d107      	bne.n	800f12e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800f11e:	79fb      	ldrb	r3, [r7, #7]
 800f120:	4618      	mov	r0, r3
 800f122:	f7ff fee3 	bl	800eeec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800f126:	2001      	movs	r0, #1
 800f128:	f7fd fad8 	bl	800c6dc <memp_malloc>
 800f12c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d03f      	beq.n	800f1b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800f134:	229c      	movs	r2, #156	; 0x9c
 800f136:	2100      	movs	r1, #0
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f009 ffa4 	bl	8019086 <memset>
    pcb->prio = prio;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	79fa      	ldrb	r2, [r7, #7]
 800f142:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f14a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800f154:	855a      	strh	r2, [r3, #42]	; 0x2a
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	22ff      	movs	r2, #255	; 0xff
 800f162:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f16a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	2206      	movs	r2, #6
 800f170:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2206      	movs	r2, #6
 800f178:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f180:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2201      	movs	r2, #1
 800f186:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800f18a:	4b0d      	ldr	r3, [pc, #52]	; (800f1c0 <tcp_alloc+0xf8>)
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f192:	4b0c      	ldr	r3, [pc, #48]	; (800f1c4 <tcp_alloc+0xfc>)
 800f194:	781a      	ldrb	r2, [r3, #0]
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f1a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	4a08      	ldr	r2, [pc, #32]	; (800f1c8 <tcp_alloc+0x100>)
 800f1a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	4a07      	ldr	r2, [pc, #28]	; (800f1cc <tcp_alloc+0x104>)
 800f1b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	2000cedc 	.word	0x2000cedc
 800f1c4:	2000cef2 	.word	0x2000cef2
 800f1c8:	0800ee81 	.word	0x0800ee81
 800f1cc:	006ddd00 	.word	0x006ddd00

0800f1d0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800f1d0:	b580      	push	{r7, lr}
 800f1d2:	b084      	sub	sp, #16
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800f1da:	2040      	movs	r0, #64	; 0x40
 800f1dc:	f7ff ff74 	bl	800f0c8 <tcp_alloc>
 800f1e0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
}
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	3710      	adds	r7, #16
 800f1e8:	46bd      	mov	sp, r7
 800f1ea:	bd80      	pop	{r7, pc}

0800f1ec <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f1ec:	b480      	push	{r7}
 800f1ee:	b083      	sub	sp, #12
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	6078      	str	r0, [r7, #4]
 800f1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d002      	beq.n	800f202 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	611a      	str	r2, [r3, #16]
  }
}
 800f202:	bf00      	nop
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr
	...

0800f210 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00e      	beq.n	800f23e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	7d1b      	ldrb	r3, [r3, #20]
 800f224:	2b01      	cmp	r3, #1
 800f226:	d106      	bne.n	800f236 <tcp_recv+0x26>
 800f228:	4b07      	ldr	r3, [pc, #28]	; (800f248 <tcp_recv+0x38>)
 800f22a:	f240 72df 	movw	r2, #2015	; 0x7df
 800f22e:	4907      	ldr	r1, [pc, #28]	; (800f24c <tcp_recv+0x3c>)
 800f230:	4807      	ldr	r0, [pc, #28]	; (800f250 <tcp_recv+0x40>)
 800f232:	f009 fec3 	bl	8018fbc <iprintf>
    pcb->recv = recv;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	683a      	ldr	r2, [r7, #0]
 800f23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f23e:	bf00      	nop
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	0801ae04 	.word	0x0801ae04
 800f24c:	0801b3a0 	.word	0x0801b3a0
 800f250:	0801ae48 	.word	0x0801ae48

0800f254 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00e      	beq.n	800f282 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	7d1b      	ldrb	r3, [r3, #20]
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d106      	bne.n	800f27a <tcp_sent+0x26>
 800f26c:	4b07      	ldr	r3, [pc, #28]	; (800f28c <tcp_sent+0x38>)
 800f26e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f272:	4907      	ldr	r1, [pc, #28]	; (800f290 <tcp_sent+0x3c>)
 800f274:	4807      	ldr	r0, [pc, #28]	; (800f294 <tcp_sent+0x40>)
 800f276:	f009 fea1 	bl	8018fbc <iprintf>
    pcb->sent = sent;
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f282:	bf00      	nop
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	0801ae04 	.word	0x0801ae04
 800f290:	0801b3c8 	.word	0x0801b3c8
 800f294:	0801ae48 	.word	0x0801ae48

0800f298 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b082      	sub	sp, #8
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00e      	beq.n	800f2c6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	7d1b      	ldrb	r3, [r3, #20]
 800f2ac:	2b01      	cmp	r3, #1
 800f2ae:	d106      	bne.n	800f2be <tcp_err+0x26>
 800f2b0:	4b07      	ldr	r3, [pc, #28]	; (800f2d0 <tcp_err+0x38>)
 800f2b2:	f640 020d 	movw	r2, #2061	; 0x80d
 800f2b6:	4907      	ldr	r1, [pc, #28]	; (800f2d4 <tcp_err+0x3c>)
 800f2b8:	4807      	ldr	r0, [pc, #28]	; (800f2d8 <tcp_err+0x40>)
 800f2ba:	f009 fe7f 	bl	8018fbc <iprintf>
    pcb->errf = err;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	683a      	ldr	r2, [r7, #0]
 800f2c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f2c6:	bf00      	nop
 800f2c8:	3708      	adds	r7, #8
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	bf00      	nop
 800f2d0:	0801ae04 	.word	0x0801ae04
 800f2d4:	0801b3f0 	.word	0x0801b3f0
 800f2d8:	0801ae48 	.word	0x0801ae48

0800f2dc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f2dc:	b480      	push	{r7}
 800f2de:	b085      	sub	sp, #20
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d008      	beq.n	800f2fe <tcp_accept+0x22>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	7d1b      	ldrb	r3, [r3, #20]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d104      	bne.n	800f2fe <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	683a      	ldr	r2, [r7, #0]
 800f2fc:	619a      	str	r2, [r3, #24]
  }
}
 800f2fe:	bf00      	nop
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr
	...

0800f30c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	60f8      	str	r0, [r7, #12]
 800f314:	60b9      	str	r1, [r7, #8]
 800f316:	4613      	mov	r3, r2
 800f318:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d107      	bne.n	800f330 <tcp_poll+0x24>
 800f320:	4b0e      	ldr	r3, [pc, #56]	; (800f35c <tcp_poll+0x50>)
 800f322:	f640 023d 	movw	r2, #2109	; 0x83d
 800f326:	490e      	ldr	r1, [pc, #56]	; (800f360 <tcp_poll+0x54>)
 800f328:	480e      	ldr	r0, [pc, #56]	; (800f364 <tcp_poll+0x58>)
 800f32a:	f009 fe47 	bl	8018fbc <iprintf>
 800f32e:	e011      	b.n	800f354 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	7d1b      	ldrb	r3, [r3, #20]
 800f334:	2b01      	cmp	r3, #1
 800f336:	d106      	bne.n	800f346 <tcp_poll+0x3a>
 800f338:	4b08      	ldr	r3, [pc, #32]	; (800f35c <tcp_poll+0x50>)
 800f33a:	f640 023e 	movw	r2, #2110	; 0x83e
 800f33e:	490a      	ldr	r1, [pc, #40]	; (800f368 <tcp_poll+0x5c>)
 800f340:	4808      	ldr	r0, [pc, #32]	; (800f364 <tcp_poll+0x58>)
 800f342:	f009 fe3b 	bl	8018fbc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	79fa      	ldrb	r2, [r7, #7]
 800f352:	775a      	strb	r2, [r3, #29]
}
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	0801ae04 	.word	0x0801ae04
 800f360:	0801b418 	.word	0x0801b418
 800f364:	0801ae48 	.word	0x0801ae48
 800f368:	0801b430 	.word	0x0801b430

0800f36c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d107      	bne.n	800f38a <tcp_pcb_purge+0x1e>
 800f37a:	4b21      	ldr	r3, [pc, #132]	; (800f400 <tcp_pcb_purge+0x94>)
 800f37c:	f640 0251 	movw	r2, #2129	; 0x851
 800f380:	4920      	ldr	r1, [pc, #128]	; (800f404 <tcp_pcb_purge+0x98>)
 800f382:	4821      	ldr	r0, [pc, #132]	; (800f408 <tcp_pcb_purge+0x9c>)
 800f384:	f009 fe1a 	bl	8018fbc <iprintf>
 800f388:	e037      	b.n	800f3fa <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	7d1b      	ldrb	r3, [r3, #20]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d033      	beq.n	800f3fa <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f396:	2b0a      	cmp	r3, #10
 800f398:	d02f      	beq.n	800f3fa <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d02b      	beq.n	800f3fa <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d007      	beq.n	800f3ba <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f7fe f8ba 	bl	800d528 <pbuf_free>
      pcb->refused_data = NULL;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d002      	beq.n	800f3c8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f986 	bl	800f6d4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3ce:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7ff fcdb 	bl	800ed90 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7ff fcd6 	bl	800ed90 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2200      	movs	r2, #0
 800f3e8:	66da      	str	r2, [r3, #108]	; 0x6c
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2200      	movs	r2, #0
 800f3f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f3fa:	3708      	adds	r7, #8
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	0801ae04 	.word	0x0801ae04
 800f404:	0801b450 	.word	0x0801b450
 800f408:	0801ae48 	.word	0x0801ae48

0800f40c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d106      	bne.n	800f42a <tcp_pcb_remove+0x1e>
 800f41c:	4b3e      	ldr	r3, [pc, #248]	; (800f518 <tcp_pcb_remove+0x10c>)
 800f41e:	f640 0283 	movw	r2, #2179	; 0x883
 800f422:	493e      	ldr	r1, [pc, #248]	; (800f51c <tcp_pcb_remove+0x110>)
 800f424:	483e      	ldr	r0, [pc, #248]	; (800f520 <tcp_pcb_remove+0x114>)
 800f426:	f009 fdc9 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d106      	bne.n	800f43e <tcp_pcb_remove+0x32>
 800f430:	4b39      	ldr	r3, [pc, #228]	; (800f518 <tcp_pcb_remove+0x10c>)
 800f432:	f640 0284 	movw	r2, #2180	; 0x884
 800f436:	493b      	ldr	r1, [pc, #236]	; (800f524 <tcp_pcb_remove+0x118>)
 800f438:	4839      	ldr	r0, [pc, #228]	; (800f520 <tcp_pcb_remove+0x114>)
 800f43a:	f009 fdbf 	bl	8018fbc <iprintf>

  TCP_RMV(pcblist, pcb);
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	683a      	ldr	r2, [r7, #0]
 800f444:	429a      	cmp	r2, r3
 800f446:	d105      	bne.n	800f454 <tcp_pcb_remove+0x48>
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	68da      	ldr	r2, [r3, #12]
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	601a      	str	r2, [r3, #0]
 800f452:	e013      	b.n	800f47c <tcp_pcb_remove+0x70>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e00c      	b.n	800f476 <tcp_pcb_remove+0x6a>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	68db      	ldr	r3, [r3, #12]
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	429a      	cmp	r2, r3
 800f464:	d104      	bne.n	800f470 <tcp_pcb_remove+0x64>
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	68da      	ldr	r2, [r3, #12]
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	60da      	str	r2, [r3, #12]
 800f46e:	e005      	b.n	800f47c <tcp_pcb_remove+0x70>
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	60fb      	str	r3, [r7, #12]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d1ef      	bne.n	800f45c <tcp_pcb_remove+0x50>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	2200      	movs	r2, #0
 800f480:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f482:	6838      	ldr	r0, [r7, #0]
 800f484:	f7ff ff72 	bl	800f36c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	7d1b      	ldrb	r3, [r3, #20]
 800f48c:	2b0a      	cmp	r3, #10
 800f48e:	d013      	beq.n	800f4b8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f494:	2b01      	cmp	r3, #1
 800f496:	d00f      	beq.n	800f4b8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f498:	683b      	ldr	r3, [r7, #0]
 800f49a:	8b5b      	ldrh	r3, [r3, #26]
 800f49c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d009      	beq.n	800f4b8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	8b5b      	ldrh	r3, [r3, #26]
 800f4a8:	f043 0302 	orr.w	r3, r3, #2
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f4b2:	6838      	ldr	r0, [r7, #0]
 800f4b4:	f003 fbc6 	bl	8012c44 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f4b8:	683b      	ldr	r3, [r7, #0]
 800f4ba:	7d1b      	ldrb	r3, [r3, #20]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d020      	beq.n	800f502 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d006      	beq.n	800f4d6 <tcp_pcb_remove+0xca>
 800f4c8:	4b13      	ldr	r3, [pc, #76]	; (800f518 <tcp_pcb_remove+0x10c>)
 800f4ca:	f640 0293 	movw	r2, #2195	; 0x893
 800f4ce:	4916      	ldr	r1, [pc, #88]	; (800f528 <tcp_pcb_remove+0x11c>)
 800f4d0:	4813      	ldr	r0, [pc, #76]	; (800f520 <tcp_pcb_remove+0x114>)
 800f4d2:	f009 fd73 	bl	8018fbc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d006      	beq.n	800f4ec <tcp_pcb_remove+0xe0>
 800f4de:	4b0e      	ldr	r3, [pc, #56]	; (800f518 <tcp_pcb_remove+0x10c>)
 800f4e0:	f640 0294 	movw	r2, #2196	; 0x894
 800f4e4:	4911      	ldr	r1, [pc, #68]	; (800f52c <tcp_pcb_remove+0x120>)
 800f4e6:	480e      	ldr	r0, [pc, #56]	; (800f520 <tcp_pcb_remove+0x114>)
 800f4e8:	f009 fd68 	bl	8018fbc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d006      	beq.n	800f502 <tcp_pcb_remove+0xf6>
 800f4f4:	4b08      	ldr	r3, [pc, #32]	; (800f518 <tcp_pcb_remove+0x10c>)
 800f4f6:	f640 0296 	movw	r2, #2198	; 0x896
 800f4fa:	490d      	ldr	r1, [pc, #52]	; (800f530 <tcp_pcb_remove+0x124>)
 800f4fc:	4808      	ldr	r0, [pc, #32]	; (800f520 <tcp_pcb_remove+0x114>)
 800f4fe:	f009 fd5d 	bl	8018fbc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	2200      	movs	r2, #0
 800f506:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	2200      	movs	r2, #0
 800f50c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f50e:	bf00      	nop
 800f510:	3710      	adds	r7, #16
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	0801ae04 	.word	0x0801ae04
 800f51c:	0801b46c 	.word	0x0801b46c
 800f520:	0801ae48 	.word	0x0801ae48
 800f524:	0801b488 	.word	0x0801b488
 800f528:	0801b4a8 	.word	0x0801b4a8
 800f52c:	0801b4c0 	.word	0x0801b4c0
 800f530:	0801b4dc 	.word	0x0801b4dc

0800f534 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <tcp_next_iss+0x1c>
 800f542:	4b0a      	ldr	r3, [pc, #40]	; (800f56c <tcp_next_iss+0x38>)
 800f544:	f640 02af 	movw	r2, #2223	; 0x8af
 800f548:	4909      	ldr	r1, [pc, #36]	; (800f570 <tcp_next_iss+0x3c>)
 800f54a:	480a      	ldr	r0, [pc, #40]	; (800f574 <tcp_next_iss+0x40>)
 800f54c:	f009 fd36 	bl	8018fbc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f550:	4b09      	ldr	r3, [pc, #36]	; (800f578 <tcp_next_iss+0x44>)
 800f552:	681a      	ldr	r2, [r3, #0]
 800f554:	4b09      	ldr	r3, [pc, #36]	; (800f57c <tcp_next_iss+0x48>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	4413      	add	r3, r2
 800f55a:	4a07      	ldr	r2, [pc, #28]	; (800f578 <tcp_next_iss+0x44>)
 800f55c:	6013      	str	r3, [r2, #0]
  return iss;
 800f55e:	4b06      	ldr	r3, [pc, #24]	; (800f578 <tcp_next_iss+0x44>)
 800f560:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f562:	4618      	mov	r0, r3
 800f564:	3708      	adds	r7, #8
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	0801ae04 	.word	0x0801ae04
 800f570:	0801b4f4 	.word	0x0801b4f4
 800f574:	0801ae48 	.word	0x0801ae48
 800f578:	20000040 	.word	0x20000040
 800f57c:	2000cedc 	.word	0x2000cedc

0800f580 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b086      	sub	sp, #24
 800f584:	af00      	add	r7, sp, #0
 800f586:	4603      	mov	r3, r0
 800f588:	60b9      	str	r1, [r7, #8]
 800f58a:	607a      	str	r2, [r7, #4]
 800f58c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d106      	bne.n	800f5a2 <tcp_eff_send_mss_netif+0x22>
 800f594:	4b14      	ldr	r3, [pc, #80]	; (800f5e8 <tcp_eff_send_mss_netif+0x68>)
 800f596:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f59a:	4914      	ldr	r1, [pc, #80]	; (800f5ec <tcp_eff_send_mss_netif+0x6c>)
 800f59c:	4814      	ldr	r0, [pc, #80]	; (800f5f0 <tcp_eff_send_mss_netif+0x70>)
 800f59e:	f009 fd0d 	bl	8018fbc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d101      	bne.n	800f5ac <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f5a8:	89fb      	ldrh	r3, [r7, #14]
 800f5aa:	e019      	b.n	800f5e0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f5b0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f5b2:	8afb      	ldrh	r3, [r7, #22]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d012      	beq.n	800f5de <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f5b8:	2328      	movs	r3, #40	; 0x28
 800f5ba:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f5bc:	8afa      	ldrh	r2, [r7, #22]
 800f5be:	8abb      	ldrh	r3, [r7, #20]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d904      	bls.n	800f5ce <tcp_eff_send_mss_netif+0x4e>
 800f5c4:	8afa      	ldrh	r2, [r7, #22]
 800f5c6:	8abb      	ldrh	r3, [r7, #20]
 800f5c8:	1ad3      	subs	r3, r2, r3
 800f5ca:	b29b      	uxth	r3, r3
 800f5cc:	e000      	b.n	800f5d0 <tcp_eff_send_mss_netif+0x50>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f5d2:	8a7a      	ldrh	r2, [r7, #18]
 800f5d4:	89fb      	ldrh	r3, [r7, #14]
 800f5d6:	4293      	cmp	r3, r2
 800f5d8:	bf28      	it	cs
 800f5da:	4613      	movcs	r3, r2
 800f5dc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f5de:	89fb      	ldrh	r3, [r7, #14]
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3718      	adds	r7, #24
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}
 800f5e8:	0801ae04 	.word	0x0801ae04
 800f5ec:	0801b510 	.word	0x0801b510
 800f5f0:	0801ae48 	.word	0x0801ae48

0800f5f4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	b084      	sub	sp, #16
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
 800f5fc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d119      	bne.n	800f63c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f608:	4b10      	ldr	r3, [pc, #64]	; (800f64c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f60a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f60e:	4910      	ldr	r1, [pc, #64]	; (800f650 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f610:	4810      	ldr	r0, [pc, #64]	; (800f654 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f612:	f009 fcd3 	bl	8018fbc <iprintf>

  while (pcb != NULL) {
 800f616:	e011      	b.n	800f63c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	681a      	ldr	r2, [r3, #0]
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	429a      	cmp	r2, r3
 800f622:	d108      	bne.n	800f636 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f62a:	68f8      	ldr	r0, [r7, #12]
 800f62c:	f7fe fd20 	bl	800e070 <tcp_abort>
      pcb = next;
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	60fb      	str	r3, [r7, #12]
 800f634:	e002      	b.n	800f63c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d1ea      	bne.n	800f618 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f642:	bf00      	nop
 800f644:	bf00      	nop
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	0801ae04 	.word	0x0801ae04
 800f650:	0801b538 	.word	0x0801b538
 800f654:	0801ae48 	.word	0x0801ae48

0800f658 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d02a      	beq.n	800f6be <tcp_netif_ip_addr_changed+0x66>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d026      	beq.n	800f6be <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f670:	4b15      	ldr	r3, [pc, #84]	; (800f6c8 <tcp_netif_ip_addr_changed+0x70>)
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	4619      	mov	r1, r3
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f7ff ffbc 	bl	800f5f4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f67c:	4b13      	ldr	r3, [pc, #76]	; (800f6cc <tcp_netif_ip_addr_changed+0x74>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4619      	mov	r1, r3
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7ff ffb6 	bl	800f5f4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f688:	683b      	ldr	r3, [r7, #0]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d017      	beq.n	800f6be <tcp_netif_ip_addr_changed+0x66>
 800f68e:	683b      	ldr	r3, [r7, #0]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d013      	beq.n	800f6be <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f696:	4b0e      	ldr	r3, [pc, #56]	; (800f6d0 <tcp_netif_ip_addr_changed+0x78>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	60fb      	str	r3, [r7, #12]
 800f69c:	e00c      	b.n	800f6b8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d103      	bne.n	800f6b2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	681a      	ldr	r2, [r3, #0]
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	60fb      	str	r3, [r7, #12]
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d1ef      	bne.n	800f69e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f6be:	bf00      	nop
 800f6c0:	3710      	adds	r7, #16
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	2000cee8 	.word	0x2000cee8
 800f6cc:	2000cee0 	.word	0x2000cee0
 800f6d0:	2000cee4 	.word	0x2000cee4

0800f6d4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d007      	beq.n	800f6f4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f7ff fb51 	bl	800ed90 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f6f4:	bf00      	nop
 800f6f6:	3708      	adds	r7, #8
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	bd80      	pop	{r7, pc}

0800f6fc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f6fc:	b590      	push	{r4, r7, lr}
 800f6fe:	b08d      	sub	sp, #52	; 0x34
 800f700:	af04      	add	r7, sp, #16
 800f702:	6078      	str	r0, [r7, #4]
 800f704:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d105      	bne.n	800f718 <tcp_input+0x1c>
 800f70c:	4b9b      	ldr	r3, [pc, #620]	; (800f97c <tcp_input+0x280>)
 800f70e:	2283      	movs	r2, #131	; 0x83
 800f710:	499b      	ldr	r1, [pc, #620]	; (800f980 <tcp_input+0x284>)
 800f712:	489c      	ldr	r0, [pc, #624]	; (800f984 <tcp_input+0x288>)
 800f714:	f009 fc52 	bl	8018fbc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	685b      	ldr	r3, [r3, #4]
 800f71c:	4a9a      	ldr	r2, [pc, #616]	; (800f988 <tcp_input+0x28c>)
 800f71e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	895b      	ldrh	r3, [r3, #10]
 800f724:	2b13      	cmp	r3, #19
 800f726:	f240 83d1 	bls.w	800fecc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f72a:	4b98      	ldr	r3, [pc, #608]	; (800f98c <tcp_input+0x290>)
 800f72c:	695b      	ldr	r3, [r3, #20]
 800f72e:	4a97      	ldr	r2, [pc, #604]	; (800f98c <tcp_input+0x290>)
 800f730:	6812      	ldr	r2, [r2, #0]
 800f732:	4611      	mov	r1, r2
 800f734:	4618      	mov	r0, r3
 800f736:	f008 fa57 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f040 83c7 	bne.w	800fed0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f742:	4b92      	ldr	r3, [pc, #584]	; (800f98c <tcp_input+0x290>)
 800f744:	695b      	ldr	r3, [r3, #20]
 800f746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f74a:	2be0      	cmp	r3, #224	; 0xe0
 800f74c:	f000 83c0 	beq.w	800fed0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f750:	4b8d      	ldr	r3, [pc, #564]	; (800f988 <tcp_input+0x28c>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	899b      	ldrh	r3, [r3, #12]
 800f756:	b29b      	uxth	r3, r3
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fc fab1 	bl	800bcc0 <lwip_htons>
 800f75e:	4603      	mov	r3, r0
 800f760:	0b1b      	lsrs	r3, r3, #12
 800f762:	b29b      	uxth	r3, r3
 800f764:	b2db      	uxtb	r3, r3
 800f766:	009b      	lsls	r3, r3, #2
 800f768:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f76a:	7cbb      	ldrb	r3, [r7, #18]
 800f76c:	2b13      	cmp	r3, #19
 800f76e:	f240 83b1 	bls.w	800fed4 <tcp_input+0x7d8>
 800f772:	7cbb      	ldrb	r3, [r7, #18]
 800f774:	b29a      	uxth	r2, r3
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	891b      	ldrh	r3, [r3, #8]
 800f77a:	429a      	cmp	r2, r3
 800f77c:	f200 83aa 	bhi.w	800fed4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f780:	7cbb      	ldrb	r3, [r7, #18]
 800f782:	b29b      	uxth	r3, r3
 800f784:	3b14      	subs	r3, #20
 800f786:	b29a      	uxth	r2, r3
 800f788:	4b81      	ldr	r3, [pc, #516]	; (800f990 <tcp_input+0x294>)
 800f78a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f78c:	4b81      	ldr	r3, [pc, #516]	; (800f994 <tcp_input+0x298>)
 800f78e:	2200      	movs	r2, #0
 800f790:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	895a      	ldrh	r2, [r3, #10]
 800f796:	7cbb      	ldrb	r3, [r7, #18]
 800f798:	b29b      	uxth	r3, r3
 800f79a:	429a      	cmp	r2, r3
 800f79c:	d309      	bcc.n	800f7b2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f79e:	4b7c      	ldr	r3, [pc, #496]	; (800f990 <tcp_input+0x294>)
 800f7a0:	881a      	ldrh	r2, [r3, #0]
 800f7a2:	4b7d      	ldr	r3, [pc, #500]	; (800f998 <tcp_input+0x29c>)
 800f7a4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f7a6:	7cbb      	ldrb	r3, [r7, #18]
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7fd fe36 	bl	800d41c <pbuf_remove_header>
 800f7b0:	e04e      	b.n	800f850 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d105      	bne.n	800f7c6 <tcp_input+0xca>
 800f7ba:	4b70      	ldr	r3, [pc, #448]	; (800f97c <tcp_input+0x280>)
 800f7bc:	22c2      	movs	r2, #194	; 0xc2
 800f7be:	4977      	ldr	r1, [pc, #476]	; (800f99c <tcp_input+0x2a0>)
 800f7c0:	4870      	ldr	r0, [pc, #448]	; (800f984 <tcp_input+0x288>)
 800f7c2:	f009 fbfb 	bl	8018fbc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f7c6:	2114      	movs	r1, #20
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7fd fe27 	bl	800d41c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	895a      	ldrh	r2, [r3, #10]
 800f7d2:	4b71      	ldr	r3, [pc, #452]	; (800f998 <tcp_input+0x29c>)
 800f7d4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f7d6:	4b6e      	ldr	r3, [pc, #440]	; (800f990 <tcp_input+0x294>)
 800f7d8:	881a      	ldrh	r2, [r3, #0]
 800f7da:	4b6f      	ldr	r3, [pc, #444]	; (800f998 <tcp_input+0x29c>)
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f7e2:	4b6d      	ldr	r3, [pc, #436]	; (800f998 <tcp_input+0x29c>)
 800f7e4:	881b      	ldrh	r3, [r3, #0]
 800f7e6:	4619      	mov	r1, r3
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f7fd fe17 	bl	800d41c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	895b      	ldrh	r3, [r3, #10]
 800f7f4:	8a3a      	ldrh	r2, [r7, #16]
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	f200 836e 	bhi.w	800fed8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	4a64      	ldr	r2, [pc, #400]	; (800f994 <tcp_input+0x298>)
 800f804:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	8a3a      	ldrh	r2, [r7, #16]
 800f80c:	4611      	mov	r1, r2
 800f80e:	4618      	mov	r0, r3
 800f810:	f7fd fe04 	bl	800d41c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	891a      	ldrh	r2, [r3, #8]
 800f818:	8a3b      	ldrh	r3, [r7, #16]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	895b      	ldrh	r3, [r3, #10]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d005      	beq.n	800f836 <tcp_input+0x13a>
 800f82a:	4b54      	ldr	r3, [pc, #336]	; (800f97c <tcp_input+0x280>)
 800f82c:	22df      	movs	r2, #223	; 0xdf
 800f82e:	495c      	ldr	r1, [pc, #368]	; (800f9a0 <tcp_input+0x2a4>)
 800f830:	4854      	ldr	r0, [pc, #336]	; (800f984 <tcp_input+0x288>)
 800f832:	f009 fbc3 	bl	8018fbc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	891a      	ldrh	r2, [r3, #8]
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	891b      	ldrh	r3, [r3, #8]
 800f840:	429a      	cmp	r2, r3
 800f842:	d005      	beq.n	800f850 <tcp_input+0x154>
 800f844:	4b4d      	ldr	r3, [pc, #308]	; (800f97c <tcp_input+0x280>)
 800f846:	22e0      	movs	r2, #224	; 0xe0
 800f848:	4956      	ldr	r1, [pc, #344]	; (800f9a4 <tcp_input+0x2a8>)
 800f84a:	484e      	ldr	r0, [pc, #312]	; (800f984 <tcp_input+0x288>)
 800f84c:	f009 fbb6 	bl	8018fbc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f850:	4b4d      	ldr	r3, [pc, #308]	; (800f988 <tcp_input+0x28c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	881b      	ldrh	r3, [r3, #0]
 800f856:	b29b      	uxth	r3, r3
 800f858:	4a4b      	ldr	r2, [pc, #300]	; (800f988 <tcp_input+0x28c>)
 800f85a:	6814      	ldr	r4, [r2, #0]
 800f85c:	4618      	mov	r0, r3
 800f85e:	f7fc fa2f 	bl	800bcc0 <lwip_htons>
 800f862:	4603      	mov	r3, r0
 800f864:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f866:	4b48      	ldr	r3, [pc, #288]	; (800f988 <tcp_input+0x28c>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	885b      	ldrh	r3, [r3, #2]
 800f86c:	b29b      	uxth	r3, r3
 800f86e:	4a46      	ldr	r2, [pc, #280]	; (800f988 <tcp_input+0x28c>)
 800f870:	6814      	ldr	r4, [r2, #0]
 800f872:	4618      	mov	r0, r3
 800f874:	f7fc fa24 	bl	800bcc0 <lwip_htons>
 800f878:	4603      	mov	r3, r0
 800f87a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f87c:	4b42      	ldr	r3, [pc, #264]	; (800f988 <tcp_input+0x28c>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	685b      	ldr	r3, [r3, #4]
 800f882:	4a41      	ldr	r2, [pc, #260]	; (800f988 <tcp_input+0x28c>)
 800f884:	6814      	ldr	r4, [r2, #0]
 800f886:	4618      	mov	r0, r3
 800f888:	f7fc fa2f 	bl	800bcea <lwip_htonl>
 800f88c:	4603      	mov	r3, r0
 800f88e:	6063      	str	r3, [r4, #4]
 800f890:	6863      	ldr	r3, [r4, #4]
 800f892:	4a45      	ldr	r2, [pc, #276]	; (800f9a8 <tcp_input+0x2ac>)
 800f894:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f896:	4b3c      	ldr	r3, [pc, #240]	; (800f988 <tcp_input+0x28c>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	4a3a      	ldr	r2, [pc, #232]	; (800f988 <tcp_input+0x28c>)
 800f89e:	6814      	ldr	r4, [r2, #0]
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fc fa22 	bl	800bcea <lwip_htonl>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	60a3      	str	r3, [r4, #8]
 800f8aa:	68a3      	ldr	r3, [r4, #8]
 800f8ac:	4a3f      	ldr	r2, [pc, #252]	; (800f9ac <tcp_input+0x2b0>)
 800f8ae:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f8b0:	4b35      	ldr	r3, [pc, #212]	; (800f988 <tcp_input+0x28c>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	89db      	ldrh	r3, [r3, #14]
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	4a33      	ldr	r2, [pc, #204]	; (800f988 <tcp_input+0x28c>)
 800f8ba:	6814      	ldr	r4, [r2, #0]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	f7fc f9ff 	bl	800bcc0 <lwip_htons>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f8c6:	4b30      	ldr	r3, [pc, #192]	; (800f988 <tcp_input+0x28c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	899b      	ldrh	r3, [r3, #12]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	4618      	mov	r0, r3
 800f8d0:	f7fc f9f6 	bl	800bcc0 <lwip_htons>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	b2db      	uxtb	r3, r3
 800f8d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8dc:	b2da      	uxtb	r2, r3
 800f8de:	4b34      	ldr	r3, [pc, #208]	; (800f9b0 <tcp_input+0x2b4>)
 800f8e0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	891a      	ldrh	r2, [r3, #8]
 800f8e6:	4b33      	ldr	r3, [pc, #204]	; (800f9b4 <tcp_input+0x2b8>)
 800f8e8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f8ea:	4b31      	ldr	r3, [pc, #196]	; (800f9b0 <tcp_input+0x2b4>)
 800f8ec:	781b      	ldrb	r3, [r3, #0]
 800f8ee:	f003 0303 	and.w	r3, r3, #3
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d00c      	beq.n	800f910 <tcp_input+0x214>
    tcplen++;
 800f8f6:	4b2f      	ldr	r3, [pc, #188]	; (800f9b4 <tcp_input+0x2b8>)
 800f8f8:	881b      	ldrh	r3, [r3, #0]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	b29a      	uxth	r2, r3
 800f8fe:	4b2d      	ldr	r3, [pc, #180]	; (800f9b4 <tcp_input+0x2b8>)
 800f900:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	891a      	ldrh	r2, [r3, #8]
 800f906:	4b2b      	ldr	r3, [pc, #172]	; (800f9b4 <tcp_input+0x2b8>)
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	429a      	cmp	r2, r3
 800f90c:	f200 82e6 	bhi.w	800fedc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f910:	2300      	movs	r3, #0
 800f912:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f914:	4b28      	ldr	r3, [pc, #160]	; (800f9b8 <tcp_input+0x2bc>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	61fb      	str	r3, [r7, #28]
 800f91a:	e09d      	b.n	800fa58 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f91c:	69fb      	ldr	r3, [r7, #28]
 800f91e:	7d1b      	ldrb	r3, [r3, #20]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d105      	bne.n	800f930 <tcp_input+0x234>
 800f924:	4b15      	ldr	r3, [pc, #84]	; (800f97c <tcp_input+0x280>)
 800f926:	22fb      	movs	r2, #251	; 0xfb
 800f928:	4924      	ldr	r1, [pc, #144]	; (800f9bc <tcp_input+0x2c0>)
 800f92a:	4816      	ldr	r0, [pc, #88]	; (800f984 <tcp_input+0x288>)
 800f92c:	f009 fb46 	bl	8018fbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	7d1b      	ldrb	r3, [r3, #20]
 800f934:	2b0a      	cmp	r3, #10
 800f936:	d105      	bne.n	800f944 <tcp_input+0x248>
 800f938:	4b10      	ldr	r3, [pc, #64]	; (800f97c <tcp_input+0x280>)
 800f93a:	22fc      	movs	r2, #252	; 0xfc
 800f93c:	4920      	ldr	r1, [pc, #128]	; (800f9c0 <tcp_input+0x2c4>)
 800f93e:	4811      	ldr	r0, [pc, #68]	; (800f984 <tcp_input+0x288>)
 800f940:	f009 fb3c 	bl	8018fbc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f944:	69fb      	ldr	r3, [r7, #28]
 800f946:	7d1b      	ldrb	r3, [r3, #20]
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d105      	bne.n	800f958 <tcp_input+0x25c>
 800f94c:	4b0b      	ldr	r3, [pc, #44]	; (800f97c <tcp_input+0x280>)
 800f94e:	22fd      	movs	r2, #253	; 0xfd
 800f950:	491c      	ldr	r1, [pc, #112]	; (800f9c4 <tcp_input+0x2c8>)
 800f952:	480c      	ldr	r0, [pc, #48]	; (800f984 <tcp_input+0x288>)
 800f954:	f009 fb32 	bl	8018fbc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	7a1b      	ldrb	r3, [r3, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d033      	beq.n	800f9c8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f960:	69fb      	ldr	r3, [r7, #28]
 800f962:	7a1a      	ldrb	r2, [r3, #8]
 800f964:	4b09      	ldr	r3, [pc, #36]	; (800f98c <tcp_input+0x290>)
 800f966:	685b      	ldr	r3, [r3, #4]
 800f968:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f96c:	3301      	adds	r3, #1
 800f96e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f970:	429a      	cmp	r2, r3
 800f972:	d029      	beq.n	800f9c8 <tcp_input+0x2cc>
      prev = pcb;
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	61bb      	str	r3, [r7, #24]
      continue;
 800f978:	e06b      	b.n	800fa52 <tcp_input+0x356>
 800f97a:	bf00      	nop
 800f97c:	0801b56c 	.word	0x0801b56c
 800f980:	0801b5a0 	.word	0x0801b5a0
 800f984:	0801b5b8 	.word	0x0801b5b8
 800f988:	2000cf04 	.word	0x2000cf04
 800f98c:	20009768 	.word	0x20009768
 800f990:	2000cf08 	.word	0x2000cf08
 800f994:	2000cf0c 	.word	0x2000cf0c
 800f998:	2000cf0a 	.word	0x2000cf0a
 800f99c:	0801b5e0 	.word	0x0801b5e0
 800f9a0:	0801b5f0 	.word	0x0801b5f0
 800f9a4:	0801b5fc 	.word	0x0801b5fc
 800f9a8:	2000cf14 	.word	0x2000cf14
 800f9ac:	2000cf18 	.word	0x2000cf18
 800f9b0:	2000cf20 	.word	0x2000cf20
 800f9b4:	2000cf1e 	.word	0x2000cf1e
 800f9b8:	2000cee8 	.word	0x2000cee8
 800f9bc:	0801b61c 	.word	0x0801b61c
 800f9c0:	0801b644 	.word	0x0801b644
 800f9c4:	0801b670 	.word	0x0801b670
    }

    if (pcb->remote_port == tcphdr->src &&
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	8b1a      	ldrh	r2, [r3, #24]
 800f9cc:	4b72      	ldr	r3, [pc, #456]	; (800fb98 <tcp_input+0x49c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	881b      	ldrh	r3, [r3, #0]
 800f9d2:	b29b      	uxth	r3, r3
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d13a      	bne.n	800fa4e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	8ada      	ldrh	r2, [r3, #22]
 800f9dc:	4b6e      	ldr	r3, [pc, #440]	; (800fb98 <tcp_input+0x49c>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	885b      	ldrh	r3, [r3, #2]
 800f9e2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d132      	bne.n	800fa4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	685a      	ldr	r2, [r3, #4]
 800f9ec:	4b6b      	ldr	r3, [pc, #428]	; (800fb9c <tcp_input+0x4a0>)
 800f9ee:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f9f0:	429a      	cmp	r2, r3
 800f9f2:	d12c      	bne.n	800fa4e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f9f4:	69fb      	ldr	r3, [r7, #28]
 800f9f6:	681a      	ldr	r2, [r3, #0]
 800f9f8:	4b68      	ldr	r3, [pc, #416]	; (800fb9c <tcp_input+0x4a0>)
 800f9fa:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d126      	bne.n	800fa4e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	68db      	ldr	r3, [r3, #12]
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	429a      	cmp	r2, r3
 800fa08:	d106      	bne.n	800fa18 <tcp_input+0x31c>
 800fa0a:	4b65      	ldr	r3, [pc, #404]	; (800fba0 <tcp_input+0x4a4>)
 800fa0c:	f240 120d 	movw	r2, #269	; 0x10d
 800fa10:	4964      	ldr	r1, [pc, #400]	; (800fba4 <tcp_input+0x4a8>)
 800fa12:	4865      	ldr	r0, [pc, #404]	; (800fba8 <tcp_input+0x4ac>)
 800fa14:	f009 fad2 	bl	8018fbc <iprintf>
      if (prev != NULL) {
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d00a      	beq.n	800fa34 <tcp_input+0x338>
        prev->next = pcb->next;
 800fa1e:	69fb      	ldr	r3, [r7, #28]
 800fa20:	68da      	ldr	r2, [r3, #12]
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800fa26:	4b61      	ldr	r3, [pc, #388]	; (800fbac <tcp_input+0x4b0>)
 800fa28:	681a      	ldr	r2, [r3, #0]
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800fa2e:	4a5f      	ldr	r2, [pc, #380]	; (800fbac <tcp_input+0x4b0>)
 800fa30:	69fb      	ldr	r3, [r7, #28]
 800fa32:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800fa34:	69fb      	ldr	r3, [r7, #28]
 800fa36:	68db      	ldr	r3, [r3, #12]
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d111      	bne.n	800fa62 <tcp_input+0x366>
 800fa3e:	4b58      	ldr	r3, [pc, #352]	; (800fba0 <tcp_input+0x4a4>)
 800fa40:	f240 1215 	movw	r2, #277	; 0x115
 800fa44:	495a      	ldr	r1, [pc, #360]	; (800fbb0 <tcp_input+0x4b4>)
 800fa46:	4858      	ldr	r0, [pc, #352]	; (800fba8 <tcp_input+0x4ac>)
 800fa48:	f009 fab8 	bl	8018fbc <iprintf>
      break;
 800fa4c:	e009      	b.n	800fa62 <tcp_input+0x366>
    }
    prev = pcb;
 800fa4e:	69fb      	ldr	r3, [r7, #28]
 800fa50:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	68db      	ldr	r3, [r3, #12]
 800fa56:	61fb      	str	r3, [r7, #28]
 800fa58:	69fb      	ldr	r3, [r7, #28]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	f47f af5e 	bne.w	800f91c <tcp_input+0x220>
 800fa60:	e000      	b.n	800fa64 <tcp_input+0x368>
      break;
 800fa62:	bf00      	nop
  }

  if (pcb == NULL) {
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	f040 80aa 	bne.w	800fbc0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800fa6c:	4b51      	ldr	r3, [pc, #324]	; (800fbb4 <tcp_input+0x4b8>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	61fb      	str	r3, [r7, #28]
 800fa72:	e03f      	b.n	800faf4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	7d1b      	ldrb	r3, [r3, #20]
 800fa78:	2b0a      	cmp	r3, #10
 800fa7a:	d006      	beq.n	800fa8a <tcp_input+0x38e>
 800fa7c:	4b48      	ldr	r3, [pc, #288]	; (800fba0 <tcp_input+0x4a4>)
 800fa7e:	f240 121f 	movw	r2, #287	; 0x11f
 800fa82:	494d      	ldr	r1, [pc, #308]	; (800fbb8 <tcp_input+0x4bc>)
 800fa84:	4848      	ldr	r0, [pc, #288]	; (800fba8 <tcp_input+0x4ac>)
 800fa86:	f009 fa99 	bl	8018fbc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	7a1b      	ldrb	r3, [r3, #8]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d009      	beq.n	800faa6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	7a1a      	ldrb	r2, [r3, #8]
 800fa96:	4b41      	ldr	r3, [pc, #260]	; (800fb9c <tcp_input+0x4a0>)
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fa9e:	3301      	adds	r3, #1
 800faa0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d122      	bne.n	800faec <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800faa6:	69fb      	ldr	r3, [r7, #28]
 800faa8:	8b1a      	ldrh	r2, [r3, #24]
 800faaa:	4b3b      	ldr	r3, [pc, #236]	; (800fb98 <tcp_input+0x49c>)
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	881b      	ldrh	r3, [r3, #0]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d11b      	bne.n	800faee <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	8ada      	ldrh	r2, [r3, #22]
 800faba:	4b37      	ldr	r3, [pc, #220]	; (800fb98 <tcp_input+0x49c>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	885b      	ldrh	r3, [r3, #2]
 800fac0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d113      	bne.n	800faee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fac6:	69fb      	ldr	r3, [r7, #28]
 800fac8:	685a      	ldr	r2, [r3, #4]
 800faca:	4b34      	ldr	r3, [pc, #208]	; (800fb9c <tcp_input+0x4a0>)
 800facc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800face:	429a      	cmp	r2, r3
 800fad0:	d10d      	bne.n	800faee <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800fad2:	69fb      	ldr	r3, [r7, #28]
 800fad4:	681a      	ldr	r2, [r3, #0]
 800fad6:	4b31      	ldr	r3, [pc, #196]	; (800fb9c <tcp_input+0x4a0>)
 800fad8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800fada:	429a      	cmp	r2, r3
 800fadc:	d107      	bne.n	800faee <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800fade:	69f8      	ldr	r0, [r7, #28]
 800fae0:	f000 fb56 	bl	8010190 <tcp_timewait_input>
        }
        pbuf_free(p);
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f7fd fd1f 	bl	800d528 <pbuf_free>
        return;
 800faea:	e1fd      	b.n	800fee8 <tcp_input+0x7ec>
        continue;
 800faec:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	61fb      	str	r3, [r7, #28]
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d1bc      	bne.n	800fa74 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800fafa:	2300      	movs	r3, #0
 800fafc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fafe:	4b2f      	ldr	r3, [pc, #188]	; (800fbbc <tcp_input+0x4c0>)
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	617b      	str	r3, [r7, #20]
 800fb04:	e02a      	b.n	800fb5c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb06:	697b      	ldr	r3, [r7, #20]
 800fb08:	7a1b      	ldrb	r3, [r3, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00c      	beq.n	800fb28 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	7a1a      	ldrb	r2, [r3, #8]
 800fb12:	4b22      	ldr	r3, [pc, #136]	; (800fb9c <tcp_input+0x4a0>)
 800fb14:	685b      	ldr	r3, [r3, #4]
 800fb16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800fb1e:	429a      	cmp	r2, r3
 800fb20:	d002      	beq.n	800fb28 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	61bb      	str	r3, [r7, #24]
        continue;
 800fb26:	e016      	b.n	800fb56 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	8ada      	ldrh	r2, [r3, #22]
 800fb2c:	4b1a      	ldr	r3, [pc, #104]	; (800fb98 <tcp_input+0x49c>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	885b      	ldrh	r3, [r3, #2]
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	429a      	cmp	r2, r3
 800fb36:	d10c      	bne.n	800fb52 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	681a      	ldr	r2, [r3, #0]
 800fb3c:	4b17      	ldr	r3, [pc, #92]	; (800fb9c <tcp_input+0x4a0>)
 800fb3e:	695b      	ldr	r3, [r3, #20]
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d00f      	beq.n	800fb64 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d00d      	beq.n	800fb66 <tcp_input+0x46a>
 800fb4a:	697b      	ldr	r3, [r7, #20]
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d009      	beq.n	800fb66 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800fb56:	697b      	ldr	r3, [r7, #20]
 800fb58:	68db      	ldr	r3, [r3, #12]
 800fb5a:	617b      	str	r3, [r7, #20]
 800fb5c:	697b      	ldr	r3, [r7, #20]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d1d1      	bne.n	800fb06 <tcp_input+0x40a>
 800fb62:	e000      	b.n	800fb66 <tcp_input+0x46a>
            break;
 800fb64:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800fb66:	697b      	ldr	r3, [r7, #20]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d029      	beq.n	800fbc0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800fb6c:	69bb      	ldr	r3, [r7, #24]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d00a      	beq.n	800fb88 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	68da      	ldr	r2, [r3, #12]
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800fb7a:	4b10      	ldr	r3, [pc, #64]	; (800fbbc <tcp_input+0x4c0>)
 800fb7c:	681a      	ldr	r2, [r3, #0]
 800fb7e:	697b      	ldr	r3, [r7, #20]
 800fb80:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800fb82:	4a0e      	ldr	r2, [pc, #56]	; (800fbbc <tcp_input+0x4c0>)
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800fb88:	6978      	ldr	r0, [r7, #20]
 800fb8a:	f000 fa03 	bl	800ff94 <tcp_listen_input>
      }
      pbuf_free(p);
 800fb8e:	6878      	ldr	r0, [r7, #4]
 800fb90:	f7fd fcca 	bl	800d528 <pbuf_free>
      return;
 800fb94:	e1a8      	b.n	800fee8 <tcp_input+0x7ec>
 800fb96:	bf00      	nop
 800fb98:	2000cf04 	.word	0x2000cf04
 800fb9c:	20009768 	.word	0x20009768
 800fba0:	0801b56c 	.word	0x0801b56c
 800fba4:	0801b698 	.word	0x0801b698
 800fba8:	0801b5b8 	.word	0x0801b5b8
 800fbac:	2000cee8 	.word	0x2000cee8
 800fbb0:	0801b6c4 	.word	0x0801b6c4
 800fbb4:	2000ceec 	.word	0x2000ceec
 800fbb8:	0801b6f0 	.word	0x0801b6f0
 800fbbc:	2000cee4 	.word	0x2000cee4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	f000 8158 	beq.w	800fe78 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fbc8:	4b95      	ldr	r3, [pc, #596]	; (800fe20 <tcp_input+0x724>)
 800fbca:	2200      	movs	r2, #0
 800fbcc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	891a      	ldrh	r2, [r3, #8]
 800fbd2:	4b93      	ldr	r3, [pc, #588]	; (800fe20 <tcp_input+0x724>)
 800fbd4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fbd6:	4a92      	ldr	r2, [pc, #584]	; (800fe20 <tcp_input+0x724>)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fbdc:	4b91      	ldr	r3, [pc, #580]	; (800fe24 <tcp_input+0x728>)
 800fbde:	681b      	ldr	r3, [r3, #0]
 800fbe0:	4a8f      	ldr	r2, [pc, #572]	; (800fe20 <tcp_input+0x724>)
 800fbe2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fbe4:	4b90      	ldr	r3, [pc, #576]	; (800fe28 <tcp_input+0x72c>)
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fbea:	4b90      	ldr	r3, [pc, #576]	; (800fe2c <tcp_input+0x730>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fbf0:	4b8f      	ldr	r3, [pc, #572]	; (800fe30 <tcp_input+0x734>)
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fbf6:	4b8f      	ldr	r3, [pc, #572]	; (800fe34 <tcp_input+0x738>)
 800fbf8:	781b      	ldrb	r3, [r3, #0]
 800fbfa:	f003 0308 	and.w	r3, r3, #8
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d006      	beq.n	800fc10 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	7b5b      	ldrb	r3, [r3, #13]
 800fc06:	f043 0301 	orr.w	r3, r3, #1
 800fc0a:	b2da      	uxtb	r2, r3
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d017      	beq.n	800fc48 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc18:	69f8      	ldr	r0, [r7, #28]
 800fc1a:	f7ff f83d 	bl	800ec98 <tcp_process_refused_data>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	f113 0f0d 	cmn.w	r3, #13
 800fc24:	d007      	beq.n	800fc36 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc26:	69fb      	ldr	r3, [r7, #28]
 800fc28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00c      	beq.n	800fc48 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fc2e:	4b82      	ldr	r3, [pc, #520]	; (800fe38 <tcp_input+0x73c>)
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d008      	beq.n	800fc48 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fc36:	69fb      	ldr	r3, [r7, #28]
 800fc38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f040 80e3 	bne.w	800fe06 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fc40:	69f8      	ldr	r0, [r7, #28]
 800fc42:	f003 fe05 	bl	8013850 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fc46:	e0de      	b.n	800fe06 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fc48:	4a7c      	ldr	r2, [pc, #496]	; (800fe3c <tcp_input+0x740>)
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fc4e:	69f8      	ldr	r0, [r7, #28]
 800fc50:	f000 fb18 	bl	8010284 <tcp_process>
 800fc54:	4603      	mov	r3, r0
 800fc56:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fc58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc5c:	f113 0f0d 	cmn.w	r3, #13
 800fc60:	f000 80d3 	beq.w	800fe0a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fc64:	4b71      	ldr	r3, [pc, #452]	; (800fe2c <tcp_input+0x730>)
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	f003 0308 	and.w	r3, r3, #8
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d015      	beq.n	800fc9c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fc70:	69fb      	ldr	r3, [r7, #28]
 800fc72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d008      	beq.n	800fc8c <tcp_input+0x590>
 800fc7a:	69fb      	ldr	r3, [r7, #28]
 800fc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc80:	69fa      	ldr	r2, [r7, #28]
 800fc82:	6912      	ldr	r2, [r2, #16]
 800fc84:	f06f 010d 	mvn.w	r1, #13
 800fc88:	4610      	mov	r0, r2
 800fc8a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc8c:	69f9      	ldr	r1, [r7, #28]
 800fc8e:	486c      	ldr	r0, [pc, #432]	; (800fe40 <tcp_input+0x744>)
 800fc90:	f7ff fbbc 	bl	800f40c <tcp_pcb_remove>
        tcp_free(pcb);
 800fc94:	69f8      	ldr	r0, [r7, #28]
 800fc96:	f7fd ff03 	bl	800daa0 <tcp_free>
 800fc9a:	e0da      	b.n	800fe52 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fca0:	4b63      	ldr	r3, [pc, #396]	; (800fe30 <tcp_input+0x734>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d01d      	beq.n	800fce4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fca8:	4b61      	ldr	r3, [pc, #388]	; (800fe30 <tcp_input+0x734>)
 800fcaa:	881b      	ldrh	r3, [r3, #0]
 800fcac:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d00a      	beq.n	800fcce <tcp_input+0x5d2>
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fcbe:	69fa      	ldr	r2, [r7, #28]
 800fcc0:	6910      	ldr	r0, [r2, #16]
 800fcc2:	89fa      	ldrh	r2, [r7, #14]
 800fcc4:	69f9      	ldr	r1, [r7, #28]
 800fcc6:	4798      	blx	r3
 800fcc8:	4603      	mov	r3, r0
 800fcca:	74fb      	strb	r3, [r7, #19]
 800fccc:	e001      	b.n	800fcd2 <tcp_input+0x5d6>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fcd6:	f113 0f0d 	cmn.w	r3, #13
 800fcda:	f000 8098 	beq.w	800fe0e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fcde:	4b54      	ldr	r3, [pc, #336]	; (800fe30 <tcp_input+0x734>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fce4:	69f8      	ldr	r0, [r7, #28]
 800fce6:	f000 f915 	bl	800ff14 <tcp_input_delayed_close>
 800fcea:	4603      	mov	r3, r0
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	f040 8090 	bne.w	800fe12 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fcf2:	4b4d      	ldr	r3, [pc, #308]	; (800fe28 <tcp_input+0x72c>)
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d041      	beq.n	800fd7e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fcfa:	69fb      	ldr	r3, [r7, #28]
 800fcfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d006      	beq.n	800fd10 <tcp_input+0x614>
 800fd02:	4b50      	ldr	r3, [pc, #320]	; (800fe44 <tcp_input+0x748>)
 800fd04:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fd08:	494f      	ldr	r1, [pc, #316]	; (800fe48 <tcp_input+0x74c>)
 800fd0a:	4850      	ldr	r0, [pc, #320]	; (800fe4c <tcp_input+0x750>)
 800fd0c:	f009 f956 	bl	8018fbc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fd10:	69fb      	ldr	r3, [r7, #28]
 800fd12:	8b5b      	ldrh	r3, [r3, #26]
 800fd14:	f003 0310 	and.w	r3, r3, #16
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d008      	beq.n	800fd2e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fd1c:	4b42      	ldr	r3, [pc, #264]	; (800fe28 <tcp_input+0x72c>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fd fc01 	bl	800d528 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fd26:	69f8      	ldr	r0, [r7, #28]
 800fd28:	f7fe f9a2 	bl	800e070 <tcp_abort>
            goto aborted;
 800fd2c:	e091      	b.n	800fe52 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fd2e:	69fb      	ldr	r3, [r7, #28]
 800fd30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d00c      	beq.n	800fd52 <tcp_input+0x656>
 800fd38:	69fb      	ldr	r3, [r7, #28]
 800fd3a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	6918      	ldr	r0, [r3, #16]
 800fd42:	4b39      	ldr	r3, [pc, #228]	; (800fe28 <tcp_input+0x72c>)
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	2300      	movs	r3, #0
 800fd48:	69f9      	ldr	r1, [r7, #28]
 800fd4a:	47a0      	blx	r4
 800fd4c:	4603      	mov	r3, r0
 800fd4e:	74fb      	strb	r3, [r7, #19]
 800fd50:	e008      	b.n	800fd64 <tcp_input+0x668>
 800fd52:	4b35      	ldr	r3, [pc, #212]	; (800fe28 <tcp_input+0x72c>)
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	2300      	movs	r3, #0
 800fd58:	69f9      	ldr	r1, [r7, #28]
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	f7ff f890 	bl	800ee80 <tcp_recv_null>
 800fd60:	4603      	mov	r3, r0
 800fd62:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fd64:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd68:	f113 0f0d 	cmn.w	r3, #13
 800fd6c:	d053      	beq.n	800fe16 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fd6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d003      	beq.n	800fd7e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fd76:	4b2c      	ldr	r3, [pc, #176]	; (800fe28 <tcp_input+0x72c>)
 800fd78:	681a      	ldr	r2, [r3, #0]
 800fd7a:	69fb      	ldr	r3, [r7, #28]
 800fd7c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fd7e:	4b2b      	ldr	r3, [pc, #172]	; (800fe2c <tcp_input+0x730>)
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	f003 0320 	and.w	r3, r3, #32
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d030      	beq.n	800fdec <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d009      	beq.n	800fda6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fd92:	69fb      	ldr	r3, [r7, #28]
 800fd94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd96:	7b5a      	ldrb	r2, [r3, #13]
 800fd98:	69fb      	ldr	r3, [r7, #28]
 800fd9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd9c:	f042 0220 	orr.w	r2, r2, #32
 800fda0:	b2d2      	uxtb	r2, r2
 800fda2:	735a      	strb	r2, [r3, #13]
 800fda4:	e022      	b.n	800fdec <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fda6:	69fb      	ldr	r3, [r7, #28]
 800fda8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdaa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fdae:	d005      	beq.n	800fdbc <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	69fb      	ldr	r3, [r7, #28]
 800fdba:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d00b      	beq.n	800fdde <tcp_input+0x6e2>
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fdcc:	69fb      	ldr	r3, [r7, #28]
 800fdce:	6918      	ldr	r0, [r3, #16]
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	69f9      	ldr	r1, [r7, #28]
 800fdd6:	47a0      	blx	r4
 800fdd8:	4603      	mov	r3, r0
 800fdda:	74fb      	strb	r3, [r7, #19]
 800fddc:	e001      	b.n	800fde2 <tcp_input+0x6e6>
 800fdde:	2300      	movs	r3, #0
 800fde0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fde2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fde6:	f113 0f0d 	cmn.w	r3, #13
 800fdea:	d016      	beq.n	800fe1a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fdec:	4b13      	ldr	r3, [pc, #76]	; (800fe3c <tcp_input+0x740>)
 800fdee:	2200      	movs	r2, #0
 800fdf0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fdf2:	69f8      	ldr	r0, [r7, #28]
 800fdf4:	f000 f88e 	bl	800ff14 <tcp_input_delayed_close>
 800fdf8:	4603      	mov	r3, r0
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d128      	bne.n	800fe50 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fdfe:	69f8      	ldr	r0, [r7, #28]
 800fe00:	f002 ff20 	bl	8012c44 <tcp_output>
 800fe04:	e025      	b.n	800fe52 <tcp_input+0x756>
        goto aborted;
 800fe06:	bf00      	nop
 800fe08:	e023      	b.n	800fe52 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fe0a:	bf00      	nop
 800fe0c:	e021      	b.n	800fe52 <tcp_input+0x756>
              goto aborted;
 800fe0e:	bf00      	nop
 800fe10:	e01f      	b.n	800fe52 <tcp_input+0x756>
          goto aborted;
 800fe12:	bf00      	nop
 800fe14:	e01d      	b.n	800fe52 <tcp_input+0x756>
            goto aborted;
 800fe16:	bf00      	nop
 800fe18:	e01b      	b.n	800fe52 <tcp_input+0x756>
              goto aborted;
 800fe1a:	bf00      	nop
 800fe1c:	e019      	b.n	800fe52 <tcp_input+0x756>
 800fe1e:	bf00      	nop
 800fe20:	2000cef4 	.word	0x2000cef4
 800fe24:	2000cf04 	.word	0x2000cf04
 800fe28:	2000cf24 	.word	0x2000cf24
 800fe2c:	2000cf21 	.word	0x2000cf21
 800fe30:	2000cf1c 	.word	0x2000cf1c
 800fe34:	2000cf20 	.word	0x2000cf20
 800fe38:	2000cf1e 	.word	0x2000cf1e
 800fe3c:	2000cf28 	.word	0x2000cf28
 800fe40:	2000cee8 	.word	0x2000cee8
 800fe44:	0801b56c 	.word	0x0801b56c
 800fe48:	0801b720 	.word	0x0801b720
 800fe4c:	0801b5b8 	.word	0x0801b5b8
          goto aborted;
 800fe50:	bf00      	nop
    tcp_input_pcb = NULL;
 800fe52:	4b27      	ldr	r3, [pc, #156]	; (800fef0 <tcp_input+0x7f4>)
 800fe54:	2200      	movs	r2, #0
 800fe56:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fe58:	4b26      	ldr	r3, [pc, #152]	; (800fef4 <tcp_input+0x7f8>)
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fe5e:	4b26      	ldr	r3, [pc, #152]	; (800fef8 <tcp_input+0x7fc>)
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d03f      	beq.n	800fee6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fe66:	4b24      	ldr	r3, [pc, #144]	; (800fef8 <tcp_input+0x7fc>)
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7fd fb5c 	bl	800d528 <pbuf_free>
      inseg.p = NULL;
 800fe70:	4b21      	ldr	r3, [pc, #132]	; (800fef8 <tcp_input+0x7fc>)
 800fe72:	2200      	movs	r2, #0
 800fe74:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fe76:	e036      	b.n	800fee6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fe78:	4b20      	ldr	r3, [pc, #128]	; (800fefc <tcp_input+0x800>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	899b      	ldrh	r3, [r3, #12]
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fb ff1d 	bl	800bcc0 <lwip_htons>
 800fe86:	4603      	mov	r3, r0
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	f003 0304 	and.w	r3, r3, #4
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d118      	bne.n	800fec4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe92:	4b1b      	ldr	r3, [pc, #108]	; (800ff00 <tcp_input+0x804>)
 800fe94:	6819      	ldr	r1, [r3, #0]
 800fe96:	4b1b      	ldr	r3, [pc, #108]	; (800ff04 <tcp_input+0x808>)
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	4b1a      	ldr	r3, [pc, #104]	; (800ff08 <tcp_input+0x80c>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fea2:	4b16      	ldr	r3, [pc, #88]	; (800fefc <tcp_input+0x800>)
 800fea4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fea6:	885b      	ldrh	r3, [r3, #2]
 800fea8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800feaa:	4a14      	ldr	r2, [pc, #80]	; (800fefc <tcp_input+0x800>)
 800feac:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feae:	8812      	ldrh	r2, [r2, #0]
 800feb0:	b292      	uxth	r2, r2
 800feb2:	9202      	str	r2, [sp, #8]
 800feb4:	9301      	str	r3, [sp, #4]
 800feb6:	4b15      	ldr	r3, [pc, #84]	; (800ff0c <tcp_input+0x810>)
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	4b15      	ldr	r3, [pc, #84]	; (800ff10 <tcp_input+0x814>)
 800febc:	4602      	mov	r2, r0
 800febe:	2000      	movs	r0, #0
 800fec0:	f003 fc74 	bl	80137ac <tcp_rst>
    pbuf_free(p);
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f7fd fb2f 	bl	800d528 <pbuf_free>
  return;
 800feca:	e00c      	b.n	800fee6 <tcp_input+0x7ea>
    goto dropped;
 800fecc:	bf00      	nop
 800fece:	e006      	b.n	800fede <tcp_input+0x7e2>
    goto dropped;
 800fed0:	bf00      	nop
 800fed2:	e004      	b.n	800fede <tcp_input+0x7e2>
    goto dropped;
 800fed4:	bf00      	nop
 800fed6:	e002      	b.n	800fede <tcp_input+0x7e2>
      goto dropped;
 800fed8:	bf00      	nop
 800feda:	e000      	b.n	800fede <tcp_input+0x7e2>
      goto dropped;
 800fedc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f7fd fb22 	bl	800d528 <pbuf_free>
 800fee4:	e000      	b.n	800fee8 <tcp_input+0x7ec>
  return;
 800fee6:	bf00      	nop
}
 800fee8:	3724      	adds	r7, #36	; 0x24
 800feea:	46bd      	mov	sp, r7
 800feec:	bd90      	pop	{r4, r7, pc}
 800feee:	bf00      	nop
 800fef0:	2000cf28 	.word	0x2000cf28
 800fef4:	2000cf24 	.word	0x2000cf24
 800fef8:	2000cef4 	.word	0x2000cef4
 800fefc:	2000cf04 	.word	0x2000cf04
 800ff00:	2000cf18 	.word	0x2000cf18
 800ff04:	2000cf1e 	.word	0x2000cf1e
 800ff08:	2000cf14 	.word	0x2000cf14
 800ff0c:	20009778 	.word	0x20009778
 800ff10:	2000977c 	.word	0x2000977c

0800ff14 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d106      	bne.n	800ff30 <tcp_input_delayed_close+0x1c>
 800ff22:	4b17      	ldr	r3, [pc, #92]	; (800ff80 <tcp_input_delayed_close+0x6c>)
 800ff24:	f240 225a 	movw	r2, #602	; 0x25a
 800ff28:	4916      	ldr	r1, [pc, #88]	; (800ff84 <tcp_input_delayed_close+0x70>)
 800ff2a:	4817      	ldr	r0, [pc, #92]	; (800ff88 <tcp_input_delayed_close+0x74>)
 800ff2c:	f009 f846 	bl	8018fbc <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ff30:	4b16      	ldr	r3, [pc, #88]	; (800ff8c <tcp_input_delayed_close+0x78>)
 800ff32:	781b      	ldrb	r3, [r3, #0]
 800ff34:	f003 0310 	and.w	r3, r3, #16
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01c      	beq.n	800ff76 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	8b5b      	ldrh	r3, [r3, #26]
 800ff40:	f003 0310 	and.w	r3, r3, #16
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d10d      	bne.n	800ff64 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d008      	beq.n	800ff64 <tcp_input_delayed_close+0x50>
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	6912      	ldr	r2, [r2, #16]
 800ff5c:	f06f 010e 	mvn.w	r1, #14
 800ff60:	4610      	mov	r0, r2
 800ff62:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ff64:	6879      	ldr	r1, [r7, #4]
 800ff66:	480a      	ldr	r0, [pc, #40]	; (800ff90 <tcp_input_delayed_close+0x7c>)
 800ff68:	f7ff fa50 	bl	800f40c <tcp_pcb_remove>
    tcp_free(pcb);
 800ff6c:	6878      	ldr	r0, [r7, #4]
 800ff6e:	f7fd fd97 	bl	800daa0 <tcp_free>
    return 1;
 800ff72:	2301      	movs	r3, #1
 800ff74:	e000      	b.n	800ff78 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}
 800ff80:	0801b56c 	.word	0x0801b56c
 800ff84:	0801b73c 	.word	0x0801b73c
 800ff88:	0801b5b8 	.word	0x0801b5b8
 800ff8c:	2000cf21 	.word	0x2000cf21
 800ff90:	2000cee8 	.word	0x2000cee8

0800ff94 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ff94:	b590      	push	{r4, r7, lr}
 800ff96:	b08b      	sub	sp, #44	; 0x2c
 800ff98:	af04      	add	r7, sp, #16
 800ff9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ff9c:	4b6f      	ldr	r3, [pc, #444]	; (801015c <tcp_listen_input+0x1c8>)
 800ff9e:	781b      	ldrb	r3, [r3, #0]
 800ffa0:	f003 0304 	and.w	r3, r3, #4
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	f040 80d2 	bne.w	801014e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d106      	bne.n	800ffbe <tcp_listen_input+0x2a>
 800ffb0:	4b6b      	ldr	r3, [pc, #428]	; (8010160 <tcp_listen_input+0x1cc>)
 800ffb2:	f240 2281 	movw	r2, #641	; 0x281
 800ffb6:	496b      	ldr	r1, [pc, #428]	; (8010164 <tcp_listen_input+0x1d0>)
 800ffb8:	486b      	ldr	r0, [pc, #428]	; (8010168 <tcp_listen_input+0x1d4>)
 800ffba:	f008 ffff 	bl	8018fbc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ffbe:	4b67      	ldr	r3, [pc, #412]	; (801015c <tcp_listen_input+0x1c8>)
 800ffc0:	781b      	ldrb	r3, [r3, #0]
 800ffc2:	f003 0310 	and.w	r3, r3, #16
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d019      	beq.n	800fffe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffca:	4b68      	ldr	r3, [pc, #416]	; (801016c <tcp_listen_input+0x1d8>)
 800ffcc:	6819      	ldr	r1, [r3, #0]
 800ffce:	4b68      	ldr	r3, [pc, #416]	; (8010170 <tcp_listen_input+0x1dc>)
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	4b67      	ldr	r3, [pc, #412]	; (8010174 <tcp_listen_input+0x1e0>)
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffda:	4b67      	ldr	r3, [pc, #412]	; (8010178 <tcp_listen_input+0x1e4>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffde:	885b      	ldrh	r3, [r3, #2]
 800ffe0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ffe2:	4a65      	ldr	r2, [pc, #404]	; (8010178 <tcp_listen_input+0x1e4>)
 800ffe4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ffe6:	8812      	ldrh	r2, [r2, #0]
 800ffe8:	b292      	uxth	r2, r2
 800ffea:	9202      	str	r2, [sp, #8]
 800ffec:	9301      	str	r3, [sp, #4]
 800ffee:	4b63      	ldr	r3, [pc, #396]	; (801017c <tcp_listen_input+0x1e8>)
 800fff0:	9300      	str	r3, [sp, #0]
 800fff2:	4b63      	ldr	r3, [pc, #396]	; (8010180 <tcp_listen_input+0x1ec>)
 800fff4:	4602      	mov	r2, r0
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f003 fbd8 	bl	80137ac <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fffc:	e0a9      	b.n	8010152 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fffe:	4b57      	ldr	r3, [pc, #348]	; (801015c <tcp_listen_input+0x1c8>)
 8010000:	781b      	ldrb	r3, [r3, #0]
 8010002:	f003 0302 	and.w	r3, r3, #2
 8010006:	2b00      	cmp	r3, #0
 8010008:	f000 80a3 	beq.w	8010152 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	7d5b      	ldrb	r3, [r3, #21]
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff f859 	bl	800f0c8 <tcp_alloc>
 8010016:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d111      	bne.n	8010042 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	699b      	ldr	r3, [r3, #24]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d00a      	beq.n	801003c <tcp_listen_input+0xa8>
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	699b      	ldr	r3, [r3, #24]
 801002a:	687a      	ldr	r2, [r7, #4]
 801002c:	6910      	ldr	r0, [r2, #16]
 801002e:	f04f 32ff 	mov.w	r2, #4294967295
 8010032:	2100      	movs	r1, #0
 8010034:	4798      	blx	r3
 8010036:	4603      	mov	r3, r0
 8010038:	73bb      	strb	r3, [r7, #14]
      return;
 801003a:	e08b      	b.n	8010154 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801003c:	23f0      	movs	r3, #240	; 0xf0
 801003e:	73bb      	strb	r3, [r7, #14]
      return;
 8010040:	e088      	b.n	8010154 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8010042:	4b50      	ldr	r3, [pc, #320]	; (8010184 <tcp_listen_input+0x1f0>)
 8010044:	695a      	ldr	r2, [r3, #20]
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801004a:	4b4e      	ldr	r3, [pc, #312]	; (8010184 <tcp_listen_input+0x1f0>)
 801004c:	691a      	ldr	r2, [r3, #16]
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	8ada      	ldrh	r2, [r3, #22]
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801005a:	4b47      	ldr	r3, [pc, #284]	; (8010178 <tcp_listen_input+0x1e4>)
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	881b      	ldrh	r3, [r3, #0]
 8010060:	b29a      	uxth	r2, r3
 8010062:	697b      	ldr	r3, [r7, #20]
 8010064:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	2203      	movs	r2, #3
 801006a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801006c:	4b41      	ldr	r3, [pc, #260]	; (8010174 <tcp_listen_input+0x1e0>)
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	1c5a      	adds	r2, r3, #1
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801007a:	697b      	ldr	r3, [r7, #20]
 801007c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801007e:	6978      	ldr	r0, [r7, #20]
 8010080:	f7ff fa58 	bl	800f534 <tcp_next_iss>
 8010084:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	693a      	ldr	r2, [r7, #16]
 801008a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	693a      	ldr	r2, [r7, #16]
 8010090:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	693a      	ldr	r2, [r7, #16]
 8010096:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8010098:	697b      	ldr	r3, [r7, #20]
 801009a:	693a      	ldr	r2, [r7, #16]
 801009c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801009e:	4b35      	ldr	r3, [pc, #212]	; (8010174 <tcp_listen_input+0x1e0>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	1e5a      	subs	r2, r3, #1
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	691a      	ldr	r2, [r3, #16]
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80100b0:	697b      	ldr	r3, [r7, #20]
 80100b2:	687a      	ldr	r2, [r7, #4]
 80100b4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	7a5b      	ldrb	r3, [r3, #9]
 80100ba:	f003 030c 	and.w	r3, r3, #12
 80100be:	b2da      	uxtb	r2, r3
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	7a1a      	ldrb	r2, [r3, #8]
 80100c8:	697b      	ldr	r3, [r7, #20]
 80100ca:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80100cc:	4b2e      	ldr	r3, [pc, #184]	; (8010188 <tcp_listen_input+0x1f4>)
 80100ce:	681a      	ldr	r2, [r3, #0]
 80100d0:	697b      	ldr	r3, [r7, #20]
 80100d2:	60da      	str	r2, [r3, #12]
 80100d4:	4a2c      	ldr	r2, [pc, #176]	; (8010188 <tcp_listen_input+0x1f4>)
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	6013      	str	r3, [r2, #0]
 80100da:	f003 fd29 	bl	8013b30 <tcp_timer_needed>
 80100de:	4b2b      	ldr	r3, [pc, #172]	; (801018c <tcp_listen_input+0x1f8>)
 80100e0:	2201      	movs	r2, #1
 80100e2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80100e4:	6978      	ldr	r0, [r7, #20]
 80100e6:	f001 fd8f 	bl	8011c08 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80100ea:	4b23      	ldr	r3, [pc, #140]	; (8010178 <tcp_listen_input+0x1e4>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	89db      	ldrh	r3, [r3, #14]
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	697b      	ldr	r3, [r7, #20]
 80100f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80100f8:	697b      	ldr	r3, [r7, #20]
 80100fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80100fe:	697b      	ldr	r3, [r7, #20]
 8010100:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8010104:	697b      	ldr	r3, [r7, #20]
 8010106:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010108:	697b      	ldr	r3, [r7, #20]
 801010a:	3304      	adds	r3, #4
 801010c:	4618      	mov	r0, r3
 801010e:	f007 fab7 	bl	8017680 <ip4_route>
 8010112:	4601      	mov	r1, r0
 8010114:	697b      	ldr	r3, [r7, #20]
 8010116:	3304      	adds	r3, #4
 8010118:	461a      	mov	r2, r3
 801011a:	4620      	mov	r0, r4
 801011c:	f7ff fa30 	bl	800f580 <tcp_eff_send_mss_netif>
 8010120:	4603      	mov	r3, r0
 8010122:	461a      	mov	r2, r3
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8010128:	2112      	movs	r1, #18
 801012a:	6978      	ldr	r0, [r7, #20]
 801012c:	f002 fc9c 	bl	8012a68 <tcp_enqueue_flags>
 8010130:	4603      	mov	r3, r0
 8010132:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8010134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d004      	beq.n	8010146 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801013c:	2100      	movs	r1, #0
 801013e:	6978      	ldr	r0, [r7, #20]
 8010140:	f7fd fed8 	bl	800def4 <tcp_abandon>
      return;
 8010144:	e006      	b.n	8010154 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8010146:	6978      	ldr	r0, [r7, #20]
 8010148:	f002 fd7c 	bl	8012c44 <tcp_output>
  return;
 801014c:	e001      	b.n	8010152 <tcp_listen_input+0x1be>
    return;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <tcp_listen_input+0x1c0>
  return;
 8010152:	bf00      	nop
}
 8010154:	371c      	adds	r7, #28
 8010156:	46bd      	mov	sp, r7
 8010158:	bd90      	pop	{r4, r7, pc}
 801015a:	bf00      	nop
 801015c:	2000cf20 	.word	0x2000cf20
 8010160:	0801b56c 	.word	0x0801b56c
 8010164:	0801b764 	.word	0x0801b764
 8010168:	0801b5b8 	.word	0x0801b5b8
 801016c:	2000cf18 	.word	0x2000cf18
 8010170:	2000cf1e 	.word	0x2000cf1e
 8010174:	2000cf14 	.word	0x2000cf14
 8010178:	2000cf04 	.word	0x2000cf04
 801017c:	20009778 	.word	0x20009778
 8010180:	2000977c 	.word	0x2000977c
 8010184:	20009768 	.word	0x20009768
 8010188:	2000cee8 	.word	0x2000cee8
 801018c:	2000cef0 	.word	0x2000cef0

08010190 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b086      	sub	sp, #24
 8010194:	af04      	add	r7, sp, #16
 8010196:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8010198:	4b2f      	ldr	r3, [pc, #188]	; (8010258 <tcp_timewait_input+0xc8>)
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	f003 0304 	and.w	r3, r3, #4
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d153      	bne.n	801024c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d106      	bne.n	80101b8 <tcp_timewait_input+0x28>
 80101aa:	4b2c      	ldr	r3, [pc, #176]	; (801025c <tcp_timewait_input+0xcc>)
 80101ac:	f240 22ee 	movw	r2, #750	; 0x2ee
 80101b0:	492b      	ldr	r1, [pc, #172]	; (8010260 <tcp_timewait_input+0xd0>)
 80101b2:	482c      	ldr	r0, [pc, #176]	; (8010264 <tcp_timewait_input+0xd4>)
 80101b4:	f008 ff02 	bl	8018fbc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80101b8:	4b27      	ldr	r3, [pc, #156]	; (8010258 <tcp_timewait_input+0xc8>)
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	f003 0302 	and.w	r3, r3, #2
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d02a      	beq.n	801021a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80101c4:	4b28      	ldr	r3, [pc, #160]	; (8010268 <tcp_timewait_input+0xd8>)
 80101c6:	681a      	ldr	r2, [r3, #0]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	db2d      	blt.n	801022e <tcp_timewait_input+0x9e>
 80101d2:	4b25      	ldr	r3, [pc, #148]	; (8010268 <tcp_timewait_input+0xd8>)
 80101d4:	681a      	ldr	r2, [r3, #0]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101da:	6879      	ldr	r1, [r7, #4]
 80101dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80101de:	440b      	add	r3, r1
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	dc23      	bgt.n	801022e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101e6:	4b21      	ldr	r3, [pc, #132]	; (801026c <tcp_timewait_input+0xdc>)
 80101e8:	6819      	ldr	r1, [r3, #0]
 80101ea:	4b21      	ldr	r3, [pc, #132]	; (8010270 <tcp_timewait_input+0xe0>)
 80101ec:	881b      	ldrh	r3, [r3, #0]
 80101ee:	461a      	mov	r2, r3
 80101f0:	4b1d      	ldr	r3, [pc, #116]	; (8010268 <tcp_timewait_input+0xd8>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101f6:	4b1f      	ldr	r3, [pc, #124]	; (8010274 <tcp_timewait_input+0xe4>)
 80101f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80101fa:	885b      	ldrh	r3, [r3, #2]
 80101fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80101fe:	4a1d      	ldr	r2, [pc, #116]	; (8010274 <tcp_timewait_input+0xe4>)
 8010200:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010202:	8812      	ldrh	r2, [r2, #0]
 8010204:	b292      	uxth	r2, r2
 8010206:	9202      	str	r2, [sp, #8]
 8010208:	9301      	str	r3, [sp, #4]
 801020a:	4b1b      	ldr	r3, [pc, #108]	; (8010278 <tcp_timewait_input+0xe8>)
 801020c:	9300      	str	r3, [sp, #0]
 801020e:	4b1b      	ldr	r3, [pc, #108]	; (801027c <tcp_timewait_input+0xec>)
 8010210:	4602      	mov	r2, r0
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f003 faca 	bl	80137ac <tcp_rst>
      return;
 8010218:	e01b      	b.n	8010252 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801021a:	4b0f      	ldr	r3, [pc, #60]	; (8010258 <tcp_timewait_input+0xc8>)
 801021c:	781b      	ldrb	r3, [r3, #0]
 801021e:	f003 0301 	and.w	r3, r3, #1
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010226:	4b16      	ldr	r3, [pc, #88]	; (8010280 <tcp_timewait_input+0xf0>)
 8010228:	681a      	ldr	r2, [r3, #0]
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801022e:	4b10      	ldr	r3, [pc, #64]	; (8010270 <tcp_timewait_input+0xe0>)
 8010230:	881b      	ldrh	r3, [r3, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d00c      	beq.n	8010250 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	8b5b      	ldrh	r3, [r3, #26]
 801023a:	f043 0302 	orr.w	r3, r3, #2
 801023e:	b29a      	uxth	r2, r3
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f002 fcfd 	bl	8012c44 <tcp_output>
  }
  return;
 801024a:	e001      	b.n	8010250 <tcp_timewait_input+0xc0>
    return;
 801024c:	bf00      	nop
 801024e:	e000      	b.n	8010252 <tcp_timewait_input+0xc2>
  return;
 8010250:	bf00      	nop
}
 8010252:	3708      	adds	r7, #8
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	2000cf20 	.word	0x2000cf20
 801025c:	0801b56c 	.word	0x0801b56c
 8010260:	0801b784 	.word	0x0801b784
 8010264:	0801b5b8 	.word	0x0801b5b8
 8010268:	2000cf14 	.word	0x2000cf14
 801026c:	2000cf18 	.word	0x2000cf18
 8010270:	2000cf1e 	.word	0x2000cf1e
 8010274:	2000cf04 	.word	0x2000cf04
 8010278:	20009778 	.word	0x20009778
 801027c:	2000977c 	.word	0x2000977c
 8010280:	2000cedc 	.word	0x2000cedc

08010284 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8010284:	b590      	push	{r4, r7, lr}
 8010286:	b08d      	sub	sp, #52	; 0x34
 8010288:	af04      	add	r7, sp, #16
 801028a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8010290:	2300      	movs	r3, #0
 8010292:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d106      	bne.n	80102a8 <tcp_process+0x24>
 801029a:	4b9d      	ldr	r3, [pc, #628]	; (8010510 <tcp_process+0x28c>)
 801029c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80102a0:	499c      	ldr	r1, [pc, #624]	; (8010514 <tcp_process+0x290>)
 80102a2:	489d      	ldr	r0, [pc, #628]	; (8010518 <tcp_process+0x294>)
 80102a4:	f008 fe8a 	bl	8018fbc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80102a8:	4b9c      	ldr	r3, [pc, #624]	; (801051c <tcp_process+0x298>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	f003 0304 	and.w	r3, r3, #4
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d04e      	beq.n	8010352 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	7d1b      	ldrb	r3, [r3, #20]
 80102b8:	2b02      	cmp	r3, #2
 80102ba:	d108      	bne.n	80102ce <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80102c0:	4b97      	ldr	r3, [pc, #604]	; (8010520 <tcp_process+0x29c>)
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d123      	bne.n	8010310 <tcp_process+0x8c>
        acceptable = 1;
 80102c8:	2301      	movs	r3, #1
 80102ca:	76fb      	strb	r3, [r7, #27]
 80102cc:	e020      	b.n	8010310 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102d2:	4b94      	ldr	r3, [pc, #592]	; (8010524 <tcp_process+0x2a0>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	429a      	cmp	r2, r3
 80102d8:	d102      	bne.n	80102e0 <tcp_process+0x5c>
        acceptable = 1;
 80102da:	2301      	movs	r3, #1
 80102dc:	76fb      	strb	r3, [r7, #27]
 80102de:	e017      	b.n	8010310 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80102e0:	4b90      	ldr	r3, [pc, #576]	; (8010524 <tcp_process+0x2a0>)
 80102e2:	681a      	ldr	r2, [r3, #0]
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e8:	1ad3      	subs	r3, r2, r3
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	db10      	blt.n	8010310 <tcp_process+0x8c>
 80102ee:	4b8d      	ldr	r3, [pc, #564]	; (8010524 <tcp_process+0x2a0>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f6:	6879      	ldr	r1, [r7, #4]
 80102f8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80102fa:	440b      	add	r3, r1
 80102fc:	1ad3      	subs	r3, r2, r3
 80102fe:	2b00      	cmp	r3, #0
 8010300:	dc06      	bgt.n	8010310 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	8b5b      	ldrh	r3, [r3, #26]
 8010306:	f043 0302 	orr.w	r3, r3, #2
 801030a:	b29a      	uxth	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8010310:	7efb      	ldrb	r3, [r7, #27]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d01b      	beq.n	801034e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	7d1b      	ldrb	r3, [r3, #20]
 801031a:	2b00      	cmp	r3, #0
 801031c:	d106      	bne.n	801032c <tcp_process+0xa8>
 801031e:	4b7c      	ldr	r3, [pc, #496]	; (8010510 <tcp_process+0x28c>)
 8010320:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010324:	4980      	ldr	r1, [pc, #512]	; (8010528 <tcp_process+0x2a4>)
 8010326:	487c      	ldr	r0, [pc, #496]	; (8010518 <tcp_process+0x294>)
 8010328:	f008 fe48 	bl	8018fbc <iprintf>
      recv_flags |= TF_RESET;
 801032c:	4b7f      	ldr	r3, [pc, #508]	; (801052c <tcp_process+0x2a8>)
 801032e:	781b      	ldrb	r3, [r3, #0]
 8010330:	f043 0308 	orr.w	r3, r3, #8
 8010334:	b2da      	uxtb	r2, r3
 8010336:	4b7d      	ldr	r3, [pc, #500]	; (801052c <tcp_process+0x2a8>)
 8010338:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	8b5b      	ldrh	r3, [r3, #26]
 801033e:	f023 0301 	bic.w	r3, r3, #1
 8010342:	b29a      	uxth	r2, r3
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010348:	f06f 030d 	mvn.w	r3, #13
 801034c:	e37a      	b.n	8010a44 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801034e:	2300      	movs	r3, #0
 8010350:	e378      	b.n	8010a44 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010352:	4b72      	ldr	r3, [pc, #456]	; (801051c <tcp_process+0x298>)
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 0302 	and.w	r3, r3, #2
 801035a:	2b00      	cmp	r3, #0
 801035c:	d010      	beq.n	8010380 <tcp_process+0xfc>
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	7d1b      	ldrb	r3, [r3, #20]
 8010362:	2b02      	cmp	r3, #2
 8010364:	d00c      	beq.n	8010380 <tcp_process+0xfc>
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	7d1b      	ldrb	r3, [r3, #20]
 801036a:	2b03      	cmp	r3, #3
 801036c:	d008      	beq.n	8010380 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	8b5b      	ldrh	r3, [r3, #26]
 8010372:	f043 0302 	orr.w	r3, r3, #2
 8010376:	b29a      	uxth	r2, r3
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801037c:	2300      	movs	r3, #0
 801037e:	e361      	b.n	8010a44 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	8b5b      	ldrh	r3, [r3, #26]
 8010384:	f003 0310 	and.w	r3, r3, #16
 8010388:	2b00      	cmp	r3, #0
 801038a:	d103      	bne.n	8010394 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801038c:	4b68      	ldr	r3, [pc, #416]	; (8010530 <tcp_process+0x2ac>)
 801038e:	681a      	ldr	r2, [r3, #0]
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2200      	movs	r2, #0
 8010398:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f001 fc2f 	bl	8011c08 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	7d1b      	ldrb	r3, [r3, #20]
 80103ae:	3b02      	subs	r3, #2
 80103b0:	2b07      	cmp	r3, #7
 80103b2:	f200 8337 	bhi.w	8010a24 <tcp_process+0x7a0>
 80103b6:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <tcp_process+0x138>)
 80103b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103bc:	080103dd 	.word	0x080103dd
 80103c0:	0801060d 	.word	0x0801060d
 80103c4:	08010785 	.word	0x08010785
 80103c8:	080107af 	.word	0x080107af
 80103cc:	080108d3 	.word	0x080108d3
 80103d0:	08010785 	.word	0x08010785
 80103d4:	0801095f 	.word	0x0801095f
 80103d8:	080109ef 	.word	0x080109ef
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80103dc:	4b4f      	ldr	r3, [pc, #316]	; (801051c <tcp_process+0x298>)
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	f003 0310 	and.w	r3, r3, #16
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f000 80e4 	beq.w	80105b2 <tcp_process+0x32e>
 80103ea:	4b4c      	ldr	r3, [pc, #304]	; (801051c <tcp_process+0x298>)
 80103ec:	781b      	ldrb	r3, [r3, #0]
 80103ee:	f003 0302 	and.w	r3, r3, #2
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	f000 80dd 	beq.w	80105b2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103fc:	1c5a      	adds	r2, r3, #1
 80103fe:	4b48      	ldr	r3, [pc, #288]	; (8010520 <tcp_process+0x29c>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	429a      	cmp	r2, r3
 8010404:	f040 80d5 	bne.w	80105b2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010408:	4b46      	ldr	r3, [pc, #280]	; (8010524 <tcp_process+0x2a0>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	1c5a      	adds	r2, r3, #1
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801041a:	4b41      	ldr	r3, [pc, #260]	; (8010520 <tcp_process+0x29c>)
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8010422:	4b44      	ldr	r3, [pc, #272]	; (8010534 <tcp_process+0x2b0>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	89db      	ldrh	r3, [r3, #14]
 8010428:	b29a      	uxth	r2, r3
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801043c:	4b39      	ldr	r3, [pc, #228]	; (8010524 <tcp_process+0x2a0>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	1e5a      	subs	r2, r3, #1
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2204      	movs	r2, #4
 801044a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	3304      	adds	r3, #4
 8010454:	4618      	mov	r0, r3
 8010456:	f007 f913 	bl	8017680 <ip4_route>
 801045a:	4601      	mov	r1, r0
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	3304      	adds	r3, #4
 8010460:	461a      	mov	r2, r3
 8010462:	4620      	mov	r0, r4
 8010464:	f7ff f88c 	bl	800f580 <tcp_eff_send_mss_netif>
 8010468:	4603      	mov	r3, r0
 801046a:	461a      	mov	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010474:	009a      	lsls	r2, r3, #2
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801047a:	005b      	lsls	r3, r3, #1
 801047c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010480:	428b      	cmp	r3, r1
 8010482:	bf38      	it	cc
 8010484:	460b      	movcc	r3, r1
 8010486:	429a      	cmp	r2, r3
 8010488:	d204      	bcs.n	8010494 <tcp_process+0x210>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801048e:	009b      	lsls	r3, r3, #2
 8010490:	b29b      	uxth	r3, r3
 8010492:	e00d      	b.n	80104b0 <tcp_process+0x22c>
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010498:	005b      	lsls	r3, r3, #1
 801049a:	f241 121c 	movw	r2, #4380	; 0x111c
 801049e:	4293      	cmp	r3, r2
 80104a0:	d904      	bls.n	80104ac <tcp_process+0x228>
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104a6:	005b      	lsls	r3, r3, #1
 80104a8:	b29b      	uxth	r3, r3
 80104aa:	e001      	b.n	80104b0 <tcp_process+0x22c>
 80104ac:	f241 131c 	movw	r3, #4380	; 0x111c
 80104b0:	687a      	ldr	r2, [r7, #4]
 80104b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d106      	bne.n	80104ce <tcp_process+0x24a>
 80104c0:	4b13      	ldr	r3, [pc, #76]	; (8010510 <tcp_process+0x28c>)
 80104c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80104c6:	491c      	ldr	r1, [pc, #112]	; (8010538 <tcp_process+0x2b4>)
 80104c8:	4813      	ldr	r0, [pc, #76]	; (8010518 <tcp_process+0x294>)
 80104ca:	f008 fd77 	bl	8018fbc <iprintf>
        --pcb->snd_queuelen;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80104d4:	3b01      	subs	r3, #1
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104e2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80104e4:	69fb      	ldr	r3, [r7, #28]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d12a      	bne.n	8010540 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104ee:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80104f0:	69fb      	ldr	r3, [r7, #28]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d106      	bne.n	8010504 <tcp_process+0x280>
 80104f6:	4b06      	ldr	r3, [pc, #24]	; (8010510 <tcp_process+0x28c>)
 80104f8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80104fc:	490f      	ldr	r1, [pc, #60]	; (801053c <tcp_process+0x2b8>)
 80104fe:	4806      	ldr	r0, [pc, #24]	; (8010518 <tcp_process+0x294>)
 8010500:	f008 fd5c 	bl	8018fbc <iprintf>
          pcb->unsent = rseg->next;
 8010504:	69fb      	ldr	r3, [r7, #28]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	66da      	str	r2, [r3, #108]	; 0x6c
 801050c:	e01c      	b.n	8010548 <tcp_process+0x2c4>
 801050e:	bf00      	nop
 8010510:	0801b56c 	.word	0x0801b56c
 8010514:	0801b7a4 	.word	0x0801b7a4
 8010518:	0801b5b8 	.word	0x0801b5b8
 801051c:	2000cf20 	.word	0x2000cf20
 8010520:	2000cf18 	.word	0x2000cf18
 8010524:	2000cf14 	.word	0x2000cf14
 8010528:	0801b7c0 	.word	0x0801b7c0
 801052c:	2000cf21 	.word	0x2000cf21
 8010530:	2000cedc 	.word	0x2000cedc
 8010534:	2000cf04 	.word	0x2000cf04
 8010538:	0801b7e0 	.word	0x0801b7e0
 801053c:	0801b7f8 	.word	0x0801b7f8
        } else {
          pcb->unacked = rseg->next;
 8010540:	69fb      	ldr	r3, [r7, #28]
 8010542:	681a      	ldr	r2, [r3, #0]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010548:	69f8      	ldr	r0, [r7, #28]
 801054a:	f7fe fc36 	bl	800edba <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010552:	2b00      	cmp	r3, #0
 8010554:	d104      	bne.n	8010560 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801055c:	861a      	strh	r2, [r3, #48]	; 0x30
 801055e:	e006      	b.n	801056e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	2200      	movs	r2, #0
 8010564:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	2200      	movs	r2, #0
 801056a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010574:	2b00      	cmp	r3, #0
 8010576:	d00a      	beq.n	801058e <tcp_process+0x30a>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	6910      	ldr	r0, [r2, #16]
 8010582:	2200      	movs	r2, #0
 8010584:	6879      	ldr	r1, [r7, #4]
 8010586:	4798      	blx	r3
 8010588:	4603      	mov	r3, r0
 801058a:	76bb      	strb	r3, [r7, #26]
 801058c:	e001      	b.n	8010592 <tcp_process+0x30e>
 801058e:	2300      	movs	r3, #0
 8010590:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010592:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010596:	f113 0f0d 	cmn.w	r3, #13
 801059a:	d102      	bne.n	80105a2 <tcp_process+0x31e>
          return ERR_ABRT;
 801059c:	f06f 030c 	mvn.w	r3, #12
 80105a0:	e250      	b.n	8010a44 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	8b5b      	ldrh	r3, [r3, #26]
 80105a6:	f043 0302 	orr.w	r3, r3, #2
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80105b0:	e23a      	b.n	8010a28 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80105b2:	4b98      	ldr	r3, [pc, #608]	; (8010814 <tcp_process+0x590>)
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	f003 0310 	and.w	r3, r3, #16
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f000 8234 	beq.w	8010a28 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105c0:	4b95      	ldr	r3, [pc, #596]	; (8010818 <tcp_process+0x594>)
 80105c2:	6819      	ldr	r1, [r3, #0]
 80105c4:	4b95      	ldr	r3, [pc, #596]	; (801081c <tcp_process+0x598>)
 80105c6:	881b      	ldrh	r3, [r3, #0]
 80105c8:	461a      	mov	r2, r3
 80105ca:	4b95      	ldr	r3, [pc, #596]	; (8010820 <tcp_process+0x59c>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105d0:	4b94      	ldr	r3, [pc, #592]	; (8010824 <tcp_process+0x5a0>)
 80105d2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105d4:	885b      	ldrh	r3, [r3, #2]
 80105d6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105d8:	4a92      	ldr	r2, [pc, #584]	; (8010824 <tcp_process+0x5a0>)
 80105da:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105dc:	8812      	ldrh	r2, [r2, #0]
 80105de:	b292      	uxth	r2, r2
 80105e0:	9202      	str	r2, [sp, #8]
 80105e2:	9301      	str	r3, [sp, #4]
 80105e4:	4b90      	ldr	r3, [pc, #576]	; (8010828 <tcp_process+0x5a4>)
 80105e6:	9300      	str	r3, [sp, #0]
 80105e8:	4b90      	ldr	r3, [pc, #576]	; (801082c <tcp_process+0x5a8>)
 80105ea:	4602      	mov	r2, r0
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f003 f8dd 	bl	80137ac <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105f8:	2b05      	cmp	r3, #5
 80105fa:	f200 8215 	bhi.w	8010a28 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	2200      	movs	r2, #0
 8010602:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010604:	6878      	ldr	r0, [r7, #4]
 8010606:	f002 fea9 	bl	801335c <tcp_rexmit_rto>
      break;
 801060a:	e20d      	b.n	8010a28 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801060c:	4b81      	ldr	r3, [pc, #516]	; (8010814 <tcp_process+0x590>)
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	f003 0310 	and.w	r3, r3, #16
 8010614:	2b00      	cmp	r3, #0
 8010616:	f000 80a1 	beq.w	801075c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801061a:	4b7f      	ldr	r3, [pc, #508]	; (8010818 <tcp_process+0x594>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010622:	1ad3      	subs	r3, r2, r3
 8010624:	3b01      	subs	r3, #1
 8010626:	2b00      	cmp	r3, #0
 8010628:	db7e      	blt.n	8010728 <tcp_process+0x4a4>
 801062a:	4b7b      	ldr	r3, [pc, #492]	; (8010818 <tcp_process+0x594>)
 801062c:	681a      	ldr	r2, [r3, #0]
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010632:	1ad3      	subs	r3, r2, r3
 8010634:	2b00      	cmp	r3, #0
 8010636:	dc77      	bgt.n	8010728 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2204      	movs	r2, #4
 801063c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010642:	2b00      	cmp	r3, #0
 8010644:	d102      	bne.n	801064c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010646:	23fa      	movs	r3, #250	; 0xfa
 8010648:	76bb      	strb	r3, [r7, #26]
 801064a:	e01d      	b.n	8010688 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d106      	bne.n	8010664 <tcp_process+0x3e0>
 8010656:	4b76      	ldr	r3, [pc, #472]	; (8010830 <tcp_process+0x5ac>)
 8010658:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801065c:	4975      	ldr	r1, [pc, #468]	; (8010834 <tcp_process+0x5b0>)
 801065e:	4876      	ldr	r0, [pc, #472]	; (8010838 <tcp_process+0x5b4>)
 8010660:	f008 fcac 	bl	8018fbc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010668:	699b      	ldr	r3, [r3, #24]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d00a      	beq.n	8010684 <tcp_process+0x400>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010672:	699b      	ldr	r3, [r3, #24]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6910      	ldr	r0, [r2, #16]
 8010678:	2200      	movs	r2, #0
 801067a:	6879      	ldr	r1, [r7, #4]
 801067c:	4798      	blx	r3
 801067e:	4603      	mov	r3, r0
 8010680:	76bb      	strb	r3, [r7, #26]
 8010682:	e001      	b.n	8010688 <tcp_process+0x404>
 8010684:	23f0      	movs	r3, #240	; 0xf0
 8010686:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010688:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d00a      	beq.n	80106a6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010690:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010694:	f113 0f0d 	cmn.w	r3, #13
 8010698:	d002      	beq.n	80106a0 <tcp_process+0x41c>
              tcp_abort(pcb);
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	f7fd fce8 	bl	800e070 <tcp_abort>
            }
            return ERR_ABRT;
 80106a0:	f06f 030c 	mvn.w	r3, #12
 80106a4:	e1ce      	b.n	8010a44 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 fae0 	bl	8010c6c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80106ac:	4b63      	ldr	r3, [pc, #396]	; (801083c <tcp_process+0x5b8>)
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d005      	beq.n	80106c0 <tcp_process+0x43c>
            recv_acked--;
 80106b4:	4b61      	ldr	r3, [pc, #388]	; (801083c <tcp_process+0x5b8>)
 80106b6:	881b      	ldrh	r3, [r3, #0]
 80106b8:	3b01      	subs	r3, #1
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	4b5f      	ldr	r3, [pc, #380]	; (801083c <tcp_process+0x5b8>)
 80106be:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106c4:	009a      	lsls	r2, r3, #2
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ca:	005b      	lsls	r3, r3, #1
 80106cc:	f241 111c 	movw	r1, #4380	; 0x111c
 80106d0:	428b      	cmp	r3, r1
 80106d2:	bf38      	it	cc
 80106d4:	460b      	movcc	r3, r1
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d204      	bcs.n	80106e4 <tcp_process+0x460>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106de:	009b      	lsls	r3, r3, #2
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	e00d      	b.n	8010700 <tcp_process+0x47c>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106e8:	005b      	lsls	r3, r3, #1
 80106ea:	f241 121c 	movw	r2, #4380	; 0x111c
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d904      	bls.n	80106fc <tcp_process+0x478>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f6:	005b      	lsls	r3, r3, #1
 80106f8:	b29b      	uxth	r3, r3
 80106fa:	e001      	b.n	8010700 <tcp_process+0x47c>
 80106fc:	f241 131c 	movw	r3, #4380	; 0x111c
 8010700:	687a      	ldr	r2, [r7, #4]
 8010702:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010706:	4b4e      	ldr	r3, [pc, #312]	; (8010840 <tcp_process+0x5bc>)
 8010708:	781b      	ldrb	r3, [r3, #0]
 801070a:	f003 0320 	and.w	r3, r3, #32
 801070e:	2b00      	cmp	r3, #0
 8010710:	d037      	beq.n	8010782 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	8b5b      	ldrh	r3, [r3, #26]
 8010716:	f043 0302 	orr.w	r3, r3, #2
 801071a:	b29a      	uxth	r2, r3
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	2207      	movs	r2, #7
 8010724:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010726:	e02c      	b.n	8010782 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010728:	4b3b      	ldr	r3, [pc, #236]	; (8010818 <tcp_process+0x594>)
 801072a:	6819      	ldr	r1, [r3, #0]
 801072c:	4b3b      	ldr	r3, [pc, #236]	; (801081c <tcp_process+0x598>)
 801072e:	881b      	ldrh	r3, [r3, #0]
 8010730:	461a      	mov	r2, r3
 8010732:	4b3b      	ldr	r3, [pc, #236]	; (8010820 <tcp_process+0x59c>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010738:	4b3a      	ldr	r3, [pc, #232]	; (8010824 <tcp_process+0x5a0>)
 801073a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801073c:	885b      	ldrh	r3, [r3, #2]
 801073e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010740:	4a38      	ldr	r2, [pc, #224]	; (8010824 <tcp_process+0x5a0>)
 8010742:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010744:	8812      	ldrh	r2, [r2, #0]
 8010746:	b292      	uxth	r2, r2
 8010748:	9202      	str	r2, [sp, #8]
 801074a:	9301      	str	r3, [sp, #4]
 801074c:	4b36      	ldr	r3, [pc, #216]	; (8010828 <tcp_process+0x5a4>)
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	4b36      	ldr	r3, [pc, #216]	; (801082c <tcp_process+0x5a8>)
 8010752:	4602      	mov	r2, r0
 8010754:	6878      	ldr	r0, [r7, #4]
 8010756:	f003 f829 	bl	80137ac <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801075a:	e167      	b.n	8010a2c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801075c:	4b2d      	ldr	r3, [pc, #180]	; (8010814 <tcp_process+0x590>)
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	f003 0302 	and.w	r3, r3, #2
 8010764:	2b00      	cmp	r3, #0
 8010766:	f000 8161 	beq.w	8010a2c <tcp_process+0x7a8>
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801076e:	1e5a      	subs	r2, r3, #1
 8010770:	4b2b      	ldr	r3, [pc, #172]	; (8010820 <tcp_process+0x59c>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	429a      	cmp	r2, r3
 8010776:	f040 8159 	bne.w	8010a2c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f002 fe10 	bl	80133a0 <tcp_rexmit>
      break;
 8010780:	e154      	b.n	8010a2c <tcp_process+0x7a8>
 8010782:	e153      	b.n	8010a2c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010784:	6878      	ldr	r0, [r7, #4]
 8010786:	f000 fa71 	bl	8010c6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801078a:	4b2d      	ldr	r3, [pc, #180]	; (8010840 <tcp_process+0x5bc>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	f003 0320 	and.w	r3, r3, #32
 8010792:	2b00      	cmp	r3, #0
 8010794:	f000 814c 	beq.w	8010a30 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	8b5b      	ldrh	r3, [r3, #26]
 801079c:	f043 0302 	orr.w	r3, r3, #2
 80107a0:	b29a      	uxth	r2, r3
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2207      	movs	r2, #7
 80107aa:	751a      	strb	r2, [r3, #20]
      }
      break;
 80107ac:	e140      	b.n	8010a30 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f000 fa5c 	bl	8010c6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80107b4:	4b22      	ldr	r3, [pc, #136]	; (8010840 <tcp_process+0x5bc>)
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	f003 0320 	and.w	r3, r3, #32
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d071      	beq.n	80108a4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107c0:	4b14      	ldr	r3, [pc, #80]	; (8010814 <tcp_process+0x590>)
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	f003 0310 	and.w	r3, r3, #16
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d060      	beq.n	801088e <tcp_process+0x60a>
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80107d0:	4b11      	ldr	r3, [pc, #68]	; (8010818 <tcp_process+0x594>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	429a      	cmp	r2, r3
 80107d6:	d15a      	bne.n	801088e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d156      	bne.n	801088e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	8b5b      	ldrh	r3, [r3, #26]
 80107e4:	f043 0302 	orr.w	r3, r3, #2
 80107e8:	b29a      	uxth	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f7fe fdbc 	bl	800f36c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80107f4:	4b13      	ldr	r3, [pc, #76]	; (8010844 <tcp_process+0x5c0>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d105      	bne.n	801080a <tcp_process+0x586>
 80107fe:	4b11      	ldr	r3, [pc, #68]	; (8010844 <tcp_process+0x5c0>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	4a0f      	ldr	r2, [pc, #60]	; (8010844 <tcp_process+0x5c0>)
 8010806:	6013      	str	r3, [r2, #0]
 8010808:	e02e      	b.n	8010868 <tcp_process+0x5e4>
 801080a:	4b0e      	ldr	r3, [pc, #56]	; (8010844 <tcp_process+0x5c0>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	617b      	str	r3, [r7, #20]
 8010810:	e027      	b.n	8010862 <tcp_process+0x5de>
 8010812:	bf00      	nop
 8010814:	2000cf20 	.word	0x2000cf20
 8010818:	2000cf18 	.word	0x2000cf18
 801081c:	2000cf1e 	.word	0x2000cf1e
 8010820:	2000cf14 	.word	0x2000cf14
 8010824:	2000cf04 	.word	0x2000cf04
 8010828:	20009778 	.word	0x20009778
 801082c:	2000977c 	.word	0x2000977c
 8010830:	0801b56c 	.word	0x0801b56c
 8010834:	0801b80c 	.word	0x0801b80c
 8010838:	0801b5b8 	.word	0x0801b5b8
 801083c:	2000cf1c 	.word	0x2000cf1c
 8010840:	2000cf21 	.word	0x2000cf21
 8010844:	2000cee8 	.word	0x2000cee8
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	68db      	ldr	r3, [r3, #12]
 801084c:	687a      	ldr	r2, [r7, #4]
 801084e:	429a      	cmp	r2, r3
 8010850:	d104      	bne.n	801085c <tcp_process+0x5d8>
 8010852:	687b      	ldr	r3, [r7, #4]
 8010854:	68da      	ldr	r2, [r3, #12]
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	60da      	str	r2, [r3, #12]
 801085a:	e005      	b.n	8010868 <tcp_process+0x5e4>
 801085c:	697b      	ldr	r3, [r7, #20]
 801085e:	68db      	ldr	r3, [r3, #12]
 8010860:	617b      	str	r3, [r7, #20]
 8010862:	697b      	ldr	r3, [r7, #20]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d1ef      	bne.n	8010848 <tcp_process+0x5c4>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	2200      	movs	r2, #0
 801086c:	60da      	str	r2, [r3, #12]
 801086e:	4b77      	ldr	r3, [pc, #476]	; (8010a4c <tcp_process+0x7c8>)
 8010870:	2201      	movs	r2, #1
 8010872:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	220a      	movs	r2, #10
 8010878:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801087a:	4b75      	ldr	r3, [pc, #468]	; (8010a50 <tcp_process+0x7cc>)
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	60da      	str	r2, [r3, #12]
 8010882:	4a73      	ldr	r2, [pc, #460]	; (8010a50 <tcp_process+0x7cc>)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6013      	str	r3, [r2, #0]
 8010888:	f003 f952 	bl	8013b30 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801088c:	e0d2      	b.n	8010a34 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	8b5b      	ldrh	r3, [r3, #26]
 8010892:	f043 0302 	orr.w	r3, r3, #2
 8010896:	b29a      	uxth	r2, r3
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	2208      	movs	r2, #8
 80108a0:	751a      	strb	r2, [r3, #20]
      break;
 80108a2:	e0c7      	b.n	8010a34 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108a4:	4b6b      	ldr	r3, [pc, #428]	; (8010a54 <tcp_process+0x7d0>)
 80108a6:	781b      	ldrb	r3, [r3, #0]
 80108a8:	f003 0310 	and.w	r3, r3, #16
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	f000 80c1 	beq.w	8010a34 <tcp_process+0x7b0>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108b6:	4b68      	ldr	r3, [pc, #416]	; (8010a58 <tcp_process+0x7d4>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	429a      	cmp	r2, r3
 80108bc:	f040 80ba 	bne.w	8010a34 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f040 80b5 	bne.w	8010a34 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2206      	movs	r2, #6
 80108ce:	751a      	strb	r2, [r3, #20]
      break;
 80108d0:	e0b0      	b.n	8010a34 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f000 f9ca 	bl	8010c6c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80108d8:	4b60      	ldr	r3, [pc, #384]	; (8010a5c <tcp_process+0x7d8>)
 80108da:	781b      	ldrb	r3, [r3, #0]
 80108dc:	f003 0320 	and.w	r3, r3, #32
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f000 80a9 	beq.w	8010a38 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	8b5b      	ldrh	r3, [r3, #26]
 80108ea:	f043 0302 	orr.w	r3, r3, #2
 80108ee:	b29a      	uxth	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f7fe fd39 	bl	800f36c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80108fa:	4b59      	ldr	r3, [pc, #356]	; (8010a60 <tcp_process+0x7dc>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	687a      	ldr	r2, [r7, #4]
 8010900:	429a      	cmp	r2, r3
 8010902:	d105      	bne.n	8010910 <tcp_process+0x68c>
 8010904:	4b56      	ldr	r3, [pc, #344]	; (8010a60 <tcp_process+0x7dc>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	68db      	ldr	r3, [r3, #12]
 801090a:	4a55      	ldr	r2, [pc, #340]	; (8010a60 <tcp_process+0x7dc>)
 801090c:	6013      	str	r3, [r2, #0]
 801090e:	e013      	b.n	8010938 <tcp_process+0x6b4>
 8010910:	4b53      	ldr	r3, [pc, #332]	; (8010a60 <tcp_process+0x7dc>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	613b      	str	r3, [r7, #16]
 8010916:	e00c      	b.n	8010932 <tcp_process+0x6ae>
 8010918:	693b      	ldr	r3, [r7, #16]
 801091a:	68db      	ldr	r3, [r3, #12]
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	429a      	cmp	r2, r3
 8010920:	d104      	bne.n	801092c <tcp_process+0x6a8>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	68da      	ldr	r2, [r3, #12]
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	60da      	str	r2, [r3, #12]
 801092a:	e005      	b.n	8010938 <tcp_process+0x6b4>
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	68db      	ldr	r3, [r3, #12]
 8010930:	613b      	str	r3, [r7, #16]
 8010932:	693b      	ldr	r3, [r7, #16]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d1ef      	bne.n	8010918 <tcp_process+0x694>
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2200      	movs	r2, #0
 801093c:	60da      	str	r2, [r3, #12]
 801093e:	4b43      	ldr	r3, [pc, #268]	; (8010a4c <tcp_process+0x7c8>)
 8010940:	2201      	movs	r2, #1
 8010942:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	220a      	movs	r2, #10
 8010948:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801094a:	4b41      	ldr	r3, [pc, #260]	; (8010a50 <tcp_process+0x7cc>)
 801094c:	681a      	ldr	r2, [r3, #0]
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	60da      	str	r2, [r3, #12]
 8010952:	4a3f      	ldr	r2, [pc, #252]	; (8010a50 <tcp_process+0x7cc>)
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	6013      	str	r3, [r2, #0]
 8010958:	f003 f8ea 	bl	8013b30 <tcp_timer_needed>
      }
      break;
 801095c:	e06c      	b.n	8010a38 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f000 f984 	bl	8010c6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010964:	4b3b      	ldr	r3, [pc, #236]	; (8010a54 <tcp_process+0x7d0>)
 8010966:	781b      	ldrb	r3, [r3, #0]
 8010968:	f003 0310 	and.w	r3, r3, #16
 801096c:	2b00      	cmp	r3, #0
 801096e:	d065      	beq.n	8010a3c <tcp_process+0x7b8>
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010974:	4b38      	ldr	r3, [pc, #224]	; (8010a58 <tcp_process+0x7d4>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	429a      	cmp	r2, r3
 801097a:	d15f      	bne.n	8010a3c <tcp_process+0x7b8>
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010980:	2b00      	cmp	r3, #0
 8010982:	d15b      	bne.n	8010a3c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f7fe fcf1 	bl	800f36c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801098a:	4b35      	ldr	r3, [pc, #212]	; (8010a60 <tcp_process+0x7dc>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	687a      	ldr	r2, [r7, #4]
 8010990:	429a      	cmp	r2, r3
 8010992:	d105      	bne.n	80109a0 <tcp_process+0x71c>
 8010994:	4b32      	ldr	r3, [pc, #200]	; (8010a60 <tcp_process+0x7dc>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	4a31      	ldr	r2, [pc, #196]	; (8010a60 <tcp_process+0x7dc>)
 801099c:	6013      	str	r3, [r2, #0]
 801099e:	e013      	b.n	80109c8 <tcp_process+0x744>
 80109a0:	4b2f      	ldr	r3, [pc, #188]	; (8010a60 <tcp_process+0x7dc>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	60fb      	str	r3, [r7, #12]
 80109a6:	e00c      	b.n	80109c2 <tcp_process+0x73e>
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	68db      	ldr	r3, [r3, #12]
 80109ac:	687a      	ldr	r2, [r7, #4]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d104      	bne.n	80109bc <tcp_process+0x738>
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	68da      	ldr	r2, [r3, #12]
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	60da      	str	r2, [r3, #12]
 80109ba:	e005      	b.n	80109c8 <tcp_process+0x744>
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	60fb      	str	r3, [r7, #12]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d1ef      	bne.n	80109a8 <tcp_process+0x724>
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	2200      	movs	r2, #0
 80109cc:	60da      	str	r2, [r3, #12]
 80109ce:	4b1f      	ldr	r3, [pc, #124]	; (8010a4c <tcp_process+0x7c8>)
 80109d0:	2201      	movs	r2, #1
 80109d2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	220a      	movs	r2, #10
 80109d8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80109da:	4b1d      	ldr	r3, [pc, #116]	; (8010a50 <tcp_process+0x7cc>)
 80109dc:	681a      	ldr	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	60da      	str	r2, [r3, #12]
 80109e2:	4a1b      	ldr	r2, [pc, #108]	; (8010a50 <tcp_process+0x7cc>)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	6013      	str	r3, [r2, #0]
 80109e8:	f003 f8a2 	bl	8013b30 <tcp_timer_needed>
      }
      break;
 80109ec:	e026      	b.n	8010a3c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80109ee:	6878      	ldr	r0, [r7, #4]
 80109f0:	f000 f93c 	bl	8010c6c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80109f4:	4b17      	ldr	r3, [pc, #92]	; (8010a54 <tcp_process+0x7d0>)
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	f003 0310 	and.w	r3, r3, #16
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d01f      	beq.n	8010a40 <tcp_process+0x7bc>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a04:	4b14      	ldr	r3, [pc, #80]	; (8010a58 <tcp_process+0x7d4>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d119      	bne.n	8010a40 <tcp_process+0x7bc>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d115      	bne.n	8010a40 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010a14:	4b11      	ldr	r3, [pc, #68]	; (8010a5c <tcp_process+0x7d8>)
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	f043 0310 	orr.w	r3, r3, #16
 8010a1c:	b2da      	uxtb	r2, r3
 8010a1e:	4b0f      	ldr	r3, [pc, #60]	; (8010a5c <tcp_process+0x7d8>)
 8010a20:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010a22:	e00d      	b.n	8010a40 <tcp_process+0x7bc>
    default:
      break;
 8010a24:	bf00      	nop
 8010a26:	e00c      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a28:	bf00      	nop
 8010a2a:	e00a      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a2c:	bf00      	nop
 8010a2e:	e008      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a30:	bf00      	nop
 8010a32:	e006      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a34:	bf00      	nop
 8010a36:	e004      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a38:	bf00      	nop
 8010a3a:	e002      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a3c:	bf00      	nop
 8010a3e:	e000      	b.n	8010a42 <tcp_process+0x7be>
      break;
 8010a40:	bf00      	nop
  }
  return ERR_OK;
 8010a42:	2300      	movs	r3, #0
}
 8010a44:	4618      	mov	r0, r3
 8010a46:	3724      	adds	r7, #36	; 0x24
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd90      	pop	{r4, r7, pc}
 8010a4c:	2000cef0 	.word	0x2000cef0
 8010a50:	2000ceec 	.word	0x2000ceec
 8010a54:	2000cf20 	.word	0x2000cf20
 8010a58:	2000cf18 	.word	0x2000cf18
 8010a5c:	2000cf21 	.word	0x2000cf21
 8010a60:	2000cee8 	.word	0x2000cee8

08010a64 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010a64:	b590      	push	{r4, r7, lr}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
 8010a6c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d106      	bne.n	8010a82 <tcp_oos_insert_segment+0x1e>
 8010a74:	4b3b      	ldr	r3, [pc, #236]	; (8010b64 <tcp_oos_insert_segment+0x100>)
 8010a76:	f240 421f 	movw	r2, #1055	; 0x41f
 8010a7a:	493b      	ldr	r1, [pc, #236]	; (8010b68 <tcp_oos_insert_segment+0x104>)
 8010a7c:	483b      	ldr	r0, [pc, #236]	; (8010b6c <tcp_oos_insert_segment+0x108>)
 8010a7e:	f008 fa9d 	bl	8018fbc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	68db      	ldr	r3, [r3, #12]
 8010a86:	899b      	ldrh	r3, [r3, #12]
 8010a88:	b29b      	uxth	r3, r3
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f7fb f918 	bl	800bcc0 <lwip_htons>
 8010a90:	4603      	mov	r3, r0
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	f003 0301 	and.w	r3, r3, #1
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d028      	beq.n	8010aee <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010a9c:	6838      	ldr	r0, [r7, #0]
 8010a9e:	f7fe f977 	bl	800ed90 <tcp_segs_free>
    next = NULL;
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	603b      	str	r3, [r7, #0]
 8010aa6:	e056      	b.n	8010b56 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	68db      	ldr	r3, [r3, #12]
 8010aac:	899b      	ldrh	r3, [r3, #12]
 8010aae:	b29b      	uxth	r3, r3
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fb f905 	bl	800bcc0 <lwip_htons>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d00d      	beq.n	8010ade <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	68db      	ldr	r3, [r3, #12]
 8010ac6:	899b      	ldrh	r3, [r3, #12]
 8010ac8:	b29c      	uxth	r4, r3
 8010aca:	2001      	movs	r0, #1
 8010acc:	f7fb f8f8 	bl	800bcc0 <lwip_htons>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68db      	ldr	r3, [r3, #12]
 8010ad8:	4322      	orrs	r2, r4
 8010ada:	b292      	uxth	r2, r2
 8010adc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010ae2:	683b      	ldr	r3, [r7, #0]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f7fe f966 	bl	800edba <tcp_seg_free>
    while (next &&
 8010aee:	683b      	ldr	r3, [r7, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d00e      	beq.n	8010b12 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	891b      	ldrh	r3, [r3, #8]
 8010af8:	461a      	mov	r2, r3
 8010afa:	4b1d      	ldr	r3, [pc, #116]	; (8010b70 <tcp_oos_insert_segment+0x10c>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	441a      	add	r2, r3
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	68db      	ldr	r3, [r3, #12]
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	6839      	ldr	r1, [r7, #0]
 8010b08:	8909      	ldrh	r1, [r1, #8]
 8010b0a:	440b      	add	r3, r1
 8010b0c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	daca      	bge.n	8010aa8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d01e      	beq.n	8010b56 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	891b      	ldrh	r3, [r3, #8]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	4b14      	ldr	r3, [pc, #80]	; (8010b70 <tcp_oos_insert_segment+0x10c>)
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	441a      	add	r2, r3
 8010b24:	683b      	ldr	r3, [r7, #0]
 8010b26:	68db      	ldr	r3, [r3, #12]
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	dd12      	ble.n	8010b56 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010b30:	683b      	ldr	r3, [r7, #0]
 8010b32:	68db      	ldr	r3, [r3, #12]
 8010b34:	685b      	ldr	r3, [r3, #4]
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	4b0d      	ldr	r3, [pc, #52]	; (8010b70 <tcp_oos_insert_segment+0x10c>)
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	b29b      	uxth	r3, r3
 8010b3e:	1ad3      	subs	r3, r2, r3
 8010b40:	b29a      	uxth	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	685a      	ldr	r2, [r3, #4]
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	891b      	ldrh	r3, [r3, #8]
 8010b4e:	4619      	mov	r1, r3
 8010b50:	4610      	mov	r0, r2
 8010b52:	f7fc fb63 	bl	800d21c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	683a      	ldr	r2, [r7, #0]
 8010b5a:	601a      	str	r2, [r3, #0]
}
 8010b5c:	bf00      	nop
 8010b5e:	3714      	adds	r7, #20
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd90      	pop	{r4, r7, pc}
 8010b64:	0801b56c 	.word	0x0801b56c
 8010b68:	0801b82c 	.word	0x0801b82c
 8010b6c:	0801b5b8 	.word	0x0801b5b8
 8010b70:	2000cf14 	.word	0x2000cf14

08010b74 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010b74:	b5b0      	push	{r4, r5, r7, lr}
 8010b76:	b086      	sub	sp, #24
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	60f8      	str	r0, [r7, #12]
 8010b7c:	60b9      	str	r1, [r7, #8]
 8010b7e:	607a      	str	r2, [r7, #4]
 8010b80:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010b82:	e03e      	b.n	8010c02 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010b8e:	697b      	ldr	r3, [r7, #20]
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fc fd56 	bl	800d644 <pbuf_clen>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010ba2:	8a7a      	ldrh	r2, [r7, #18]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d906      	bls.n	8010bb6 <tcp_free_acked_segments+0x42>
 8010ba8:	4b2a      	ldr	r3, [pc, #168]	; (8010c54 <tcp_free_acked_segments+0xe0>)
 8010baa:	f240 4257 	movw	r2, #1111	; 0x457
 8010bae:	492a      	ldr	r1, [pc, #168]	; (8010c58 <tcp_free_acked_segments+0xe4>)
 8010bb0:	482a      	ldr	r0, [pc, #168]	; (8010c5c <tcp_free_acked_segments+0xe8>)
 8010bb2:	f008 fa03 	bl	8018fbc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8010bbc:	8a7b      	ldrh	r3, [r7, #18]
 8010bbe:	1ad3      	subs	r3, r2, r3
 8010bc0:	b29a      	uxth	r2, r3
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010bc8:	697b      	ldr	r3, [r7, #20]
 8010bca:	891a      	ldrh	r2, [r3, #8]
 8010bcc:	4b24      	ldr	r3, [pc, #144]	; (8010c60 <tcp_free_acked_segments+0xec>)
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	4413      	add	r3, r2
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	4b22      	ldr	r3, [pc, #136]	; (8010c60 <tcp_free_acked_segments+0xec>)
 8010bd6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010bd8:	6978      	ldr	r0, [r7, #20]
 8010bda:	f7fe f8ee 	bl	800edba <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d00c      	beq.n	8010c02 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d109      	bne.n	8010c02 <tcp_free_acked_segments+0x8e>
 8010bee:	683b      	ldr	r3, [r7, #0]
 8010bf0:	2b00      	cmp	r3, #0
 8010bf2:	d106      	bne.n	8010c02 <tcp_free_acked_segments+0x8e>
 8010bf4:	4b17      	ldr	r3, [pc, #92]	; (8010c54 <tcp_free_acked_segments+0xe0>)
 8010bf6:	f240 4261 	movw	r2, #1121	; 0x461
 8010bfa:	491a      	ldr	r1, [pc, #104]	; (8010c64 <tcp_free_acked_segments+0xf0>)
 8010bfc:	4817      	ldr	r0, [pc, #92]	; (8010c5c <tcp_free_acked_segments+0xe8>)
 8010bfe:	f008 f9dd 	bl	8018fbc <iprintf>
  while (seg_list != NULL &&
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d020      	beq.n	8010c4a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	68db      	ldr	r3, [r3, #12]
 8010c0c:	685b      	ldr	r3, [r3, #4]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fb f86b 	bl	800bcea <lwip_htonl>
 8010c14:	4604      	mov	r4, r0
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	891b      	ldrh	r3, [r3, #8]
 8010c1a:	461d      	mov	r5, r3
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	68db      	ldr	r3, [r3, #12]
 8010c20:	899b      	ldrh	r3, [r3, #12]
 8010c22:	b29b      	uxth	r3, r3
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fb f84b 	bl	800bcc0 <lwip_htons>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	b2db      	uxtb	r3, r3
 8010c2e:	f003 0303 	and.w	r3, r3, #3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d001      	beq.n	8010c3a <tcp_free_acked_segments+0xc6>
 8010c36:	2301      	movs	r3, #1
 8010c38:	e000      	b.n	8010c3c <tcp_free_acked_segments+0xc8>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	442b      	add	r3, r5
 8010c3e:	18e2      	adds	r2, r4, r3
 8010c40:	4b09      	ldr	r3, [pc, #36]	; (8010c68 <tcp_free_acked_segments+0xf4>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	dd9c      	ble.n	8010b84 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010c4a:	68bb      	ldr	r3, [r7, #8]
}
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3718      	adds	r7, #24
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bdb0      	pop	{r4, r5, r7, pc}
 8010c54:	0801b56c 	.word	0x0801b56c
 8010c58:	0801b854 	.word	0x0801b854
 8010c5c:	0801b5b8 	.word	0x0801b5b8
 8010c60:	2000cf1c 	.word	0x2000cf1c
 8010c64:	0801b87c 	.word	0x0801b87c
 8010c68:	2000cf18 	.word	0x2000cf18

08010c6c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010c6c:	b5b0      	push	{r4, r5, r7, lr}
 8010c6e:	b094      	sub	sp, #80	; 0x50
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010c74:	2300      	movs	r3, #0
 8010c76:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d106      	bne.n	8010c8c <tcp_receive+0x20>
 8010c7e:	4b91      	ldr	r3, [pc, #580]	; (8010ec4 <tcp_receive+0x258>)
 8010c80:	f240 427b 	movw	r2, #1147	; 0x47b
 8010c84:	4990      	ldr	r1, [pc, #576]	; (8010ec8 <tcp_receive+0x25c>)
 8010c86:	4891      	ldr	r0, [pc, #580]	; (8010ecc <tcp_receive+0x260>)
 8010c88:	f008 f998 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	7d1b      	ldrb	r3, [r3, #20]
 8010c90:	2b03      	cmp	r3, #3
 8010c92:	d806      	bhi.n	8010ca2 <tcp_receive+0x36>
 8010c94:	4b8b      	ldr	r3, [pc, #556]	; (8010ec4 <tcp_receive+0x258>)
 8010c96:	f240 427c 	movw	r2, #1148	; 0x47c
 8010c9a:	498d      	ldr	r1, [pc, #564]	; (8010ed0 <tcp_receive+0x264>)
 8010c9c:	488b      	ldr	r0, [pc, #556]	; (8010ecc <tcp_receive+0x260>)
 8010c9e:	f008 f98d 	bl	8018fbc <iprintf>

  if (flags & TCP_ACK) {
 8010ca2:	4b8c      	ldr	r3, [pc, #560]	; (8010ed4 <tcp_receive+0x268>)
 8010ca4:	781b      	ldrb	r3, [r3, #0]
 8010ca6:	f003 0310 	and.w	r3, r3, #16
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	f000 8264 	beq.w	8011178 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010cb6:	461a      	mov	r2, r3
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cbc:	4413      	add	r3, r2
 8010cbe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cc4:	4b84      	ldr	r3, [pc, #528]	; (8010ed8 <tcp_receive+0x26c>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	1ad3      	subs	r3, r2, r3
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	db1b      	blt.n	8010d06 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010cd2:	4b81      	ldr	r3, [pc, #516]	; (8010ed8 <tcp_receive+0x26c>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010cd6:	429a      	cmp	r2, r3
 8010cd8:	d106      	bne.n	8010ce8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010cde:	4b7f      	ldr	r3, [pc, #508]	; (8010edc <tcp_receive+0x270>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	1ad3      	subs	r3, r2, r3
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	db0e      	blt.n	8010d06 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010cec:	4b7b      	ldr	r3, [pc, #492]	; (8010edc <tcp_receive+0x270>)
 8010cee:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d125      	bne.n	8010d40 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010cf4:	4b7a      	ldr	r3, [pc, #488]	; (8010ee0 <tcp_receive+0x274>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	89db      	ldrh	r3, [r3, #14]
 8010cfa:	b29a      	uxth	r2, r3
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d91c      	bls.n	8010d40 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010d06:	4b76      	ldr	r3, [pc, #472]	; (8010ee0 <tcp_receive+0x274>)
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	89db      	ldrh	r3, [r3, #14]
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d20:	429a      	cmp	r2, r3
 8010d22:	d205      	bcs.n	8010d30 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010d30:	4b69      	ldr	r3, [pc, #420]	; (8010ed8 <tcp_receive+0x26c>)
 8010d32:	681a      	ldr	r2, [r3, #0]
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010d38:	4b68      	ldr	r3, [pc, #416]	; (8010edc <tcp_receive+0x270>)
 8010d3a:	681a      	ldr	r2, [r3, #0]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010d40:	4b66      	ldr	r3, [pc, #408]	; (8010edc <tcp_receive+0x270>)
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d48:	1ad3      	subs	r3, r2, r3
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	dc58      	bgt.n	8010e00 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010d4e:	4b65      	ldr	r3, [pc, #404]	; (8010ee4 <tcp_receive+0x278>)
 8010d50:	881b      	ldrh	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d14b      	bne.n	8010dee <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010d60:	4413      	add	r3, r2
 8010d62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d64:	429a      	cmp	r2, r3
 8010d66:	d142      	bne.n	8010dee <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	db3d      	blt.n	8010dee <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010d76:	4b59      	ldr	r3, [pc, #356]	; (8010edc <tcp_receive+0x270>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	429a      	cmp	r2, r3
 8010d7c:	d137      	bne.n	8010dee <tcp_receive+0x182>
              found_dupack = 1;
 8010d7e:	2301      	movs	r3, #1
 8010d80:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d88:	2bff      	cmp	r3, #255	; 0xff
 8010d8a:	d007      	beq.n	8010d9c <tcp_receive+0x130>
                ++pcb->dupacks;
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d92:	3301      	adds	r3, #1
 8010d94:	b2da      	uxtb	r2, r3
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010da2:	2b03      	cmp	r3, #3
 8010da4:	d91b      	bls.n	8010dde <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010db0:	4413      	add	r3, r2
 8010db2:	b29a      	uxth	r2, r3
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dba:	429a      	cmp	r2, r3
 8010dbc:	d30a      	bcc.n	8010dd4 <tcp_receive+0x168>
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dc8:	4413      	add	r3, r2
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010dd2:	e004      	b.n	8010dde <tcp_receive+0x172>
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dda:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	d902      	bls.n	8010dee <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f002 fb45 	bl	8013478 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	f040 8161 	bne.w	80110b8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010dfe:	e15b      	b.n	80110b8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e00:	4b36      	ldr	r3, [pc, #216]	; (8010edc <tcp_receive+0x270>)
 8010e02:	681a      	ldr	r2, [r3, #0]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e08:	1ad3      	subs	r3, r2, r3
 8010e0a:	3b01      	subs	r3, #1
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	f2c0 814e 	blt.w	80110ae <tcp_receive+0x442>
 8010e12:	4b32      	ldr	r3, [pc, #200]	; (8010edc <tcp_receive+0x270>)
 8010e14:	681a      	ldr	r2, [r3, #0]
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010e1a:	1ad3      	subs	r3, r2, r3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	f300 8146 	bgt.w	80110ae <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	8b5b      	ldrh	r3, [r3, #26]
 8010e26:	f003 0304 	and.w	r3, r3, #4
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d010      	beq.n	8010e50 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	8b5b      	ldrh	r3, [r3, #26]
 8010e32:	f023 0304 	bic.w	r3, r3, #4
 8010e36:	b29a      	uxth	r2, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2200      	movs	r2, #0
 8010e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e5e:	10db      	asrs	r3, r3, #3
 8010e60:	b21b      	sxth	r3, r3
 8010e62:	b29a      	uxth	r2, r3
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e6a:	b29b      	uxth	r3, r3
 8010e6c:	4413      	add	r3, r2
 8010e6e:	b29b      	uxth	r3, r3
 8010e70:	b21a      	sxth	r2, r3
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010e78:	4b18      	ldr	r3, [pc, #96]	; (8010edc <tcp_receive+0x270>)
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	b29a      	uxth	r2, r3
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	1ad3      	subs	r3, r2, r3
 8010e86:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	2200      	movs	r2, #0
 8010e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010e90:	4b12      	ldr	r3, [pc, #72]	; (8010edc <tcp_receive+0x270>)
 8010e92:	681a      	ldr	r2, [r3, #0]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	7d1b      	ldrb	r3, [r3, #20]
 8010e9c:	2b03      	cmp	r3, #3
 8010e9e:	f240 8097 	bls.w	8010fd0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d245      	bcs.n	8010f3e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	8b5b      	ldrh	r3, [r3, #26]
 8010eb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d014      	beq.n	8010ee8 <tcp_receive+0x27c>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e013      	b.n	8010eea <tcp_receive+0x27e>
 8010ec2:	bf00      	nop
 8010ec4:	0801b56c 	.word	0x0801b56c
 8010ec8:	0801b89c 	.word	0x0801b89c
 8010ecc:	0801b5b8 	.word	0x0801b5b8
 8010ed0:	0801b8b8 	.word	0x0801b8b8
 8010ed4:	2000cf20 	.word	0x2000cf20
 8010ed8:	2000cf14 	.word	0x2000cf14
 8010edc:	2000cf18 	.word	0x2000cf18
 8010ee0:	2000cf04 	.word	0x2000cf04
 8010ee4:	2000cf1e 	.word	0x2000cf1e
 8010ee8:	2302      	movs	r3, #2
 8010eea:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010eee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ef8:	fb12 f303 	smulbb	r3, r2, r3
 8010efc:	b29b      	uxth	r3, r3
 8010efe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f00:	4293      	cmp	r3, r2
 8010f02:	bf28      	it	cs
 8010f04:	4613      	movcs	r3, r2
 8010f06:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f10:	4413      	add	r3, r2
 8010f12:	b29a      	uxth	r2, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d309      	bcc.n	8010f32 <tcp_receive+0x2c6>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f24:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010f26:	4413      	add	r3, r2
 8010f28:	b29a      	uxth	r2, r3
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f30:	e04e      	b.n	8010fd0 <tcp_receive+0x364>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010f3c:	e048      	b.n	8010fd0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f44:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f46:	4413      	add	r3, r2
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d309      	bcc.n	8010f68 <tcp_receive+0x2fc>
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010f5c:	4413      	add	r3, r2
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010f66:	e004      	b.n	8010f72 <tcp_receive+0x306>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f7e:	429a      	cmp	r2, r3
 8010f80:	d326      	bcc.n	8010fd0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010f8e:	1ad3      	subs	r3, r2, r3
 8010f90:	b29a      	uxth	r2, r3
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fa2:	4413      	add	r3, r2
 8010fa4:	b29a      	uxth	r2, r3
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d30a      	bcc.n	8010fc6 <tcp_receive+0x35a>
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010fba:	4413      	add	r3, r2
 8010fbc:	b29a      	uxth	r2, r3
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010fc4:	e004      	b.n	8010fd0 <tcp_receive+0x364>
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010fcc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010fd8:	4a98      	ldr	r2, [pc, #608]	; (801123c <tcp_receive+0x5d0>)
 8010fda:	6878      	ldr	r0, [r7, #4]
 8010fdc:	f7ff fdca 	bl	8010b74 <tcp_free_acked_segments>
 8010fe0:	4602      	mov	r2, r0
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fee:	4a94      	ldr	r2, [pc, #592]	; (8011240 <tcp_receive+0x5d4>)
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f7ff fdbf 	bl	8010b74 <tcp_free_acked_segments>
 8010ff6:	4602      	mov	r2, r0
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011000:	2b00      	cmp	r3, #0
 8011002:	d104      	bne.n	801100e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801100a:	861a      	strh	r2, [r3, #48]	; 0x30
 801100c:	e002      	b.n	8011014 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	2200      	movs	r2, #0
 8011012:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2200      	movs	r2, #0
 8011018:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801101e:	2b00      	cmp	r3, #0
 8011020:	d103      	bne.n	801102a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	2200      	movs	r2, #0
 8011026:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011030:	4b84      	ldr	r3, [pc, #528]	; (8011244 <tcp_receive+0x5d8>)
 8011032:	881b      	ldrh	r3, [r3, #0]
 8011034:	4413      	add	r3, r2
 8011036:	b29a      	uxth	r2, r3
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	8b5b      	ldrh	r3, [r3, #26]
 8011042:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011046:	2b00      	cmp	r3, #0
 8011048:	d035      	beq.n	80110b6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801104e:	2b00      	cmp	r3, #0
 8011050:	d118      	bne.n	8011084 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011056:	2b00      	cmp	r3, #0
 8011058:	d00c      	beq.n	8011074 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	685b      	ldr	r3, [r3, #4]
 8011066:	4618      	mov	r0, r3
 8011068:	f7fa fe3f 	bl	800bcea <lwip_htonl>
 801106c:	4603      	mov	r3, r0
 801106e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011070:	2b00      	cmp	r3, #0
 8011072:	dc20      	bgt.n	80110b6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	8b5b      	ldrh	r3, [r3, #26]
 8011078:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801107c:	b29a      	uxth	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011082:	e018      	b.n	80110b6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801108c:	68db      	ldr	r3, [r3, #12]
 801108e:	685b      	ldr	r3, [r3, #4]
 8011090:	4618      	mov	r0, r3
 8011092:	f7fa fe2a 	bl	800bcea <lwip_htonl>
 8011096:	4603      	mov	r3, r0
 8011098:	1ae3      	subs	r3, r4, r3
 801109a:	2b00      	cmp	r3, #0
 801109c:	dc0b      	bgt.n	80110b6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	8b5b      	ldrh	r3, [r3, #26]
 80110a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80110a6:	b29a      	uxth	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110ac:	e003      	b.n	80110b6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	f002 fbce 	bl	8013850 <tcp_send_empty_ack>
 80110b4:	e000      	b.n	80110b8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80110b6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d05b      	beq.n	8011178 <tcp_receive+0x50c>
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110c4:	4b60      	ldr	r3, [pc, #384]	; (8011248 <tcp_receive+0x5dc>)
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	1ad3      	subs	r3, r2, r3
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	da54      	bge.n	8011178 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80110ce:	4b5f      	ldr	r3, [pc, #380]	; (801124c <tcp_receive+0x5e0>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	b29a      	uxth	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80110d8:	b29b      	uxth	r3, r3
 80110da:	1ad3      	subs	r3, r2, r3
 80110dc:	b29b      	uxth	r3, r3
 80110de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80110e2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80110ec:	10db      	asrs	r3, r3, #3
 80110ee:	b21b      	sxth	r3, r3
 80110f0:	b29b      	uxth	r3, r3
 80110f2:	1ad3      	subs	r3, r2, r3
 80110f4:	b29b      	uxth	r3, r3
 80110f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011100:	b29a      	uxth	r2, r3
 8011102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011106:	4413      	add	r3, r2
 8011108:	b29b      	uxth	r3, r3
 801110a:	b21a      	sxth	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8011110:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8011114:	2b00      	cmp	r3, #0
 8011116:	da05      	bge.n	8011124 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8011118:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801111c:	425b      	negs	r3, r3
 801111e:	b29b      	uxth	r3, r3
 8011120:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011124:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801112e:	109b      	asrs	r3, r3, #2
 8011130:	b21b      	sxth	r3, r3
 8011132:	b29b      	uxth	r3, r3
 8011134:	1ad3      	subs	r3, r2, r3
 8011136:	b29b      	uxth	r3, r3
 8011138:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011142:	b29a      	uxth	r2, r3
 8011144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8011148:	4413      	add	r3, r2
 801114a:	b29b      	uxth	r3, r3
 801114c:	b21a      	sxth	r2, r3
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011158:	10db      	asrs	r3, r3, #3
 801115a:	b21b      	sxth	r3, r3
 801115c:	b29a      	uxth	r2, r3
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011164:	b29b      	uxth	r3, r3
 8011166:	4413      	add	r3, r2
 8011168:	b29b      	uxth	r3, r3
 801116a:	b21a      	sxth	r2, r3
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	2200      	movs	r2, #0
 8011176:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8011178:	4b35      	ldr	r3, [pc, #212]	; (8011250 <tcp_receive+0x5e4>)
 801117a:	881b      	ldrh	r3, [r3, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	f000 84e2 	beq.w	8011b46 <tcp_receive+0xeda>
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	7d1b      	ldrb	r3, [r3, #20]
 8011186:	2b06      	cmp	r3, #6
 8011188:	f200 84dd 	bhi.w	8011b46 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011190:	4b30      	ldr	r3, [pc, #192]	; (8011254 <tcp_receive+0x5e8>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	3b01      	subs	r3, #1
 8011198:	2b00      	cmp	r3, #0
 801119a:	f2c0 808f 	blt.w	80112bc <tcp_receive+0x650>
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111a2:	4b2b      	ldr	r3, [pc, #172]	; (8011250 <tcp_receive+0x5e4>)
 80111a4:	881b      	ldrh	r3, [r3, #0]
 80111a6:	4619      	mov	r1, r3
 80111a8:	4b2a      	ldr	r3, [pc, #168]	; (8011254 <tcp_receive+0x5e8>)
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	440b      	add	r3, r1
 80111ae:	1ad3      	subs	r3, r2, r3
 80111b0:	3301      	adds	r3, #1
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	f300 8082 	bgt.w	80112bc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80111b8:	4b27      	ldr	r3, [pc, #156]	; (8011258 <tcp_receive+0x5ec>)
 80111ba:	685b      	ldr	r3, [r3, #4]
 80111bc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80111c2:	4b24      	ldr	r3, [pc, #144]	; (8011254 <tcp_receive+0x5e8>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	1ad3      	subs	r3, r2, r3
 80111c8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80111ca:	4b23      	ldr	r3, [pc, #140]	; (8011258 <tcp_receive+0x5ec>)
 80111cc:	685b      	ldr	r3, [r3, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d106      	bne.n	80111e0 <tcp_receive+0x574>
 80111d2:	4b22      	ldr	r3, [pc, #136]	; (801125c <tcp_receive+0x5f0>)
 80111d4:	f240 5294 	movw	r2, #1428	; 0x594
 80111d8:	4921      	ldr	r1, [pc, #132]	; (8011260 <tcp_receive+0x5f4>)
 80111da:	4822      	ldr	r0, [pc, #136]	; (8011264 <tcp_receive+0x5f8>)
 80111dc:	f007 feee 	bl	8018fbc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80111e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80111e6:	4293      	cmp	r3, r2
 80111e8:	d906      	bls.n	80111f8 <tcp_receive+0x58c>
 80111ea:	4b1c      	ldr	r3, [pc, #112]	; (801125c <tcp_receive+0x5f0>)
 80111ec:	f240 5295 	movw	r2, #1429	; 0x595
 80111f0:	491d      	ldr	r1, [pc, #116]	; (8011268 <tcp_receive+0x5fc>)
 80111f2:	481c      	ldr	r0, [pc, #112]	; (8011264 <tcp_receive+0x5f8>)
 80111f4:	f007 fee2 	bl	8018fbc <iprintf>
      off = (u16_t)off32;
 80111f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80111fe:	4b16      	ldr	r3, [pc, #88]	; (8011258 <tcp_receive+0x5ec>)
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	891b      	ldrh	r3, [r3, #8]
 8011204:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011208:	429a      	cmp	r2, r3
 801120a:	d906      	bls.n	801121a <tcp_receive+0x5ae>
 801120c:	4b13      	ldr	r3, [pc, #76]	; (801125c <tcp_receive+0x5f0>)
 801120e:	f240 5297 	movw	r2, #1431	; 0x597
 8011212:	4916      	ldr	r1, [pc, #88]	; (801126c <tcp_receive+0x600>)
 8011214:	4813      	ldr	r0, [pc, #76]	; (8011264 <tcp_receive+0x5f8>)
 8011216:	f007 fed1 	bl	8018fbc <iprintf>
      inseg.len -= off;
 801121a:	4b0f      	ldr	r3, [pc, #60]	; (8011258 <tcp_receive+0x5ec>)
 801121c:	891a      	ldrh	r2, [r3, #8]
 801121e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011222:	1ad3      	subs	r3, r2, r3
 8011224:	b29a      	uxth	r2, r3
 8011226:	4b0c      	ldr	r3, [pc, #48]	; (8011258 <tcp_receive+0x5ec>)
 8011228:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801122a:	4b0b      	ldr	r3, [pc, #44]	; (8011258 <tcp_receive+0x5ec>)
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	891a      	ldrh	r2, [r3, #8]
 8011230:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011234:	1ad3      	subs	r3, r2, r3
 8011236:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011238:	e02a      	b.n	8011290 <tcp_receive+0x624>
 801123a:	bf00      	nop
 801123c:	0801b8d4 	.word	0x0801b8d4
 8011240:	0801b8dc 	.word	0x0801b8dc
 8011244:	2000cf1c 	.word	0x2000cf1c
 8011248:	2000cf18 	.word	0x2000cf18
 801124c:	2000cedc 	.word	0x2000cedc
 8011250:	2000cf1e 	.word	0x2000cf1e
 8011254:	2000cf14 	.word	0x2000cf14
 8011258:	2000cef4 	.word	0x2000cef4
 801125c:	0801b56c 	.word	0x0801b56c
 8011260:	0801b8e4 	.word	0x0801b8e4
 8011264:	0801b5b8 	.word	0x0801b5b8
 8011268:	0801b8f4 	.word	0x0801b8f4
 801126c:	0801b904 	.word	0x0801b904
        off -= p->len;
 8011270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011272:	895b      	ldrh	r3, [r3, #10]
 8011274:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011278:	1ad3      	subs	r3, r2, r3
 801127a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801127e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011280:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011282:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8011284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011286:	2200      	movs	r2, #0
 8011288:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801128a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8011290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011292:	895b      	ldrh	r3, [r3, #10]
 8011294:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011298:	429a      	cmp	r2, r3
 801129a:	d8e9      	bhi.n	8011270 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801129c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112a0:	4619      	mov	r1, r3
 80112a2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80112a4:	f7fc f8ba 	bl	800d41c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112ac:	4a91      	ldr	r2, [pc, #580]	; (80114f4 <tcp_receive+0x888>)
 80112ae:	6013      	str	r3, [r2, #0]
 80112b0:	4b91      	ldr	r3, [pc, #580]	; (80114f8 <tcp_receive+0x88c>)
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	4a8f      	ldr	r2, [pc, #572]	; (80114f4 <tcp_receive+0x888>)
 80112b6:	6812      	ldr	r2, [r2, #0]
 80112b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80112ba:	e00d      	b.n	80112d8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80112bc:	4b8d      	ldr	r3, [pc, #564]	; (80114f4 <tcp_receive+0x888>)
 80112be:	681a      	ldr	r2, [r3, #0]
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c4:	1ad3      	subs	r3, r2, r3
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	da06      	bge.n	80112d8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	8b5b      	ldrh	r3, [r3, #26]
 80112ce:	f043 0302 	orr.w	r3, r3, #2
 80112d2:	b29a      	uxth	r2, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80112d8:	4b86      	ldr	r3, [pc, #536]	; (80114f4 <tcp_receive+0x888>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	f2c0 842a 	blt.w	8011b3c <tcp_receive+0xed0>
 80112e8:	4b82      	ldr	r3, [pc, #520]	; (80114f4 <tcp_receive+0x888>)
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f0:	6879      	ldr	r1, [r7, #4]
 80112f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112f4:	440b      	add	r3, r1
 80112f6:	1ad3      	subs	r3, r2, r3
 80112f8:	3301      	adds	r3, #1
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	f300 841e 	bgt.w	8011b3c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011304:	4b7b      	ldr	r3, [pc, #492]	; (80114f4 <tcp_receive+0x888>)
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	429a      	cmp	r2, r3
 801130a:	f040 829a 	bne.w	8011842 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801130e:	4b7a      	ldr	r3, [pc, #488]	; (80114f8 <tcp_receive+0x88c>)
 8011310:	891c      	ldrh	r4, [r3, #8]
 8011312:	4b79      	ldr	r3, [pc, #484]	; (80114f8 <tcp_receive+0x88c>)
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	899b      	ldrh	r3, [r3, #12]
 8011318:	b29b      	uxth	r3, r3
 801131a:	4618      	mov	r0, r3
 801131c:	f7fa fcd0 	bl	800bcc0 <lwip_htons>
 8011320:	4603      	mov	r3, r0
 8011322:	b2db      	uxtb	r3, r3
 8011324:	f003 0303 	and.w	r3, r3, #3
 8011328:	2b00      	cmp	r3, #0
 801132a:	d001      	beq.n	8011330 <tcp_receive+0x6c4>
 801132c:	2301      	movs	r3, #1
 801132e:	e000      	b.n	8011332 <tcp_receive+0x6c6>
 8011330:	2300      	movs	r3, #0
 8011332:	4423      	add	r3, r4
 8011334:	b29a      	uxth	r2, r3
 8011336:	4b71      	ldr	r3, [pc, #452]	; (80114fc <tcp_receive+0x890>)
 8011338:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801133e:	4b6f      	ldr	r3, [pc, #444]	; (80114fc <tcp_receive+0x890>)
 8011340:	881b      	ldrh	r3, [r3, #0]
 8011342:	429a      	cmp	r2, r3
 8011344:	d275      	bcs.n	8011432 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011346:	4b6c      	ldr	r3, [pc, #432]	; (80114f8 <tcp_receive+0x88c>)
 8011348:	68db      	ldr	r3, [r3, #12]
 801134a:	899b      	ldrh	r3, [r3, #12]
 801134c:	b29b      	uxth	r3, r3
 801134e:	4618      	mov	r0, r3
 8011350:	f7fa fcb6 	bl	800bcc0 <lwip_htons>
 8011354:	4603      	mov	r3, r0
 8011356:	b2db      	uxtb	r3, r3
 8011358:	f003 0301 	and.w	r3, r3, #1
 801135c:	2b00      	cmp	r3, #0
 801135e:	d01f      	beq.n	80113a0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8011360:	4b65      	ldr	r3, [pc, #404]	; (80114f8 <tcp_receive+0x88c>)
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	899b      	ldrh	r3, [r3, #12]
 8011366:	b29b      	uxth	r3, r3
 8011368:	b21b      	sxth	r3, r3
 801136a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801136e:	b21c      	sxth	r4, r3
 8011370:	4b61      	ldr	r3, [pc, #388]	; (80114f8 <tcp_receive+0x88c>)
 8011372:	68db      	ldr	r3, [r3, #12]
 8011374:	899b      	ldrh	r3, [r3, #12]
 8011376:	b29b      	uxth	r3, r3
 8011378:	4618      	mov	r0, r3
 801137a:	f7fa fca1 	bl	800bcc0 <lwip_htons>
 801137e:	4603      	mov	r3, r0
 8011380:	b2db      	uxtb	r3, r3
 8011382:	b29b      	uxth	r3, r3
 8011384:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011388:	b29b      	uxth	r3, r3
 801138a:	4618      	mov	r0, r3
 801138c:	f7fa fc98 	bl	800bcc0 <lwip_htons>
 8011390:	4603      	mov	r3, r0
 8011392:	b21b      	sxth	r3, r3
 8011394:	4323      	orrs	r3, r4
 8011396:	b21a      	sxth	r2, r3
 8011398:	4b57      	ldr	r3, [pc, #348]	; (80114f8 <tcp_receive+0x88c>)
 801139a:	68db      	ldr	r3, [r3, #12]
 801139c:	b292      	uxth	r2, r2
 801139e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113a4:	4b54      	ldr	r3, [pc, #336]	; (80114f8 <tcp_receive+0x88c>)
 80113a6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80113a8:	4b53      	ldr	r3, [pc, #332]	; (80114f8 <tcp_receive+0x88c>)
 80113aa:	68db      	ldr	r3, [r3, #12]
 80113ac:	899b      	ldrh	r3, [r3, #12]
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fa fc85 	bl	800bcc0 <lwip_htons>
 80113b6:	4603      	mov	r3, r0
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 0302 	and.w	r3, r3, #2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d005      	beq.n	80113ce <tcp_receive+0x762>
            inseg.len -= 1;
 80113c2:	4b4d      	ldr	r3, [pc, #308]	; (80114f8 <tcp_receive+0x88c>)
 80113c4:	891b      	ldrh	r3, [r3, #8]
 80113c6:	3b01      	subs	r3, #1
 80113c8:	b29a      	uxth	r2, r3
 80113ca:	4b4b      	ldr	r3, [pc, #300]	; (80114f8 <tcp_receive+0x88c>)
 80113cc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80113ce:	4b4a      	ldr	r3, [pc, #296]	; (80114f8 <tcp_receive+0x88c>)
 80113d0:	685b      	ldr	r3, [r3, #4]
 80113d2:	4a49      	ldr	r2, [pc, #292]	; (80114f8 <tcp_receive+0x88c>)
 80113d4:	8912      	ldrh	r2, [r2, #8]
 80113d6:	4611      	mov	r1, r2
 80113d8:	4618      	mov	r0, r3
 80113da:	f7fb ff1f 	bl	800d21c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80113de:	4b46      	ldr	r3, [pc, #280]	; (80114f8 <tcp_receive+0x88c>)
 80113e0:	891c      	ldrh	r4, [r3, #8]
 80113e2:	4b45      	ldr	r3, [pc, #276]	; (80114f8 <tcp_receive+0x88c>)
 80113e4:	68db      	ldr	r3, [r3, #12]
 80113e6:	899b      	ldrh	r3, [r3, #12]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	4618      	mov	r0, r3
 80113ec:	f7fa fc68 	bl	800bcc0 <lwip_htons>
 80113f0:	4603      	mov	r3, r0
 80113f2:	b2db      	uxtb	r3, r3
 80113f4:	f003 0303 	and.w	r3, r3, #3
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d001      	beq.n	8011400 <tcp_receive+0x794>
 80113fc:	2301      	movs	r3, #1
 80113fe:	e000      	b.n	8011402 <tcp_receive+0x796>
 8011400:	2300      	movs	r3, #0
 8011402:	4423      	add	r3, r4
 8011404:	b29a      	uxth	r2, r3
 8011406:	4b3d      	ldr	r3, [pc, #244]	; (80114fc <tcp_receive+0x890>)
 8011408:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801140a:	4b3c      	ldr	r3, [pc, #240]	; (80114fc <tcp_receive+0x890>)
 801140c:	881b      	ldrh	r3, [r3, #0]
 801140e:	461a      	mov	r2, r3
 8011410:	4b38      	ldr	r3, [pc, #224]	; (80114f4 <tcp_receive+0x888>)
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	441a      	add	r2, r3
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801141a:	6879      	ldr	r1, [r7, #4]
 801141c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801141e:	440b      	add	r3, r1
 8011420:	429a      	cmp	r2, r3
 8011422:	d006      	beq.n	8011432 <tcp_receive+0x7c6>
 8011424:	4b36      	ldr	r3, [pc, #216]	; (8011500 <tcp_receive+0x894>)
 8011426:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801142a:	4936      	ldr	r1, [pc, #216]	; (8011504 <tcp_receive+0x898>)
 801142c:	4836      	ldr	r0, [pc, #216]	; (8011508 <tcp_receive+0x89c>)
 801142e:	f007 fdc5 	bl	8018fbc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011436:	2b00      	cmp	r3, #0
 8011438:	f000 80e7 	beq.w	801160a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801143c:	4b2e      	ldr	r3, [pc, #184]	; (80114f8 <tcp_receive+0x88c>)
 801143e:	68db      	ldr	r3, [r3, #12]
 8011440:	899b      	ldrh	r3, [r3, #12]
 8011442:	b29b      	uxth	r3, r3
 8011444:	4618      	mov	r0, r3
 8011446:	f7fa fc3b 	bl	800bcc0 <lwip_htons>
 801144a:	4603      	mov	r3, r0
 801144c:	b2db      	uxtb	r3, r3
 801144e:	f003 0301 	and.w	r3, r3, #1
 8011452:	2b00      	cmp	r3, #0
 8011454:	d010      	beq.n	8011478 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011456:	e00a      	b.n	801146e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801145c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011468:	68f8      	ldr	r0, [r7, #12]
 801146a:	f7fd fca6 	bl	800edba <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011472:	2b00      	cmp	r3, #0
 8011474:	d1f0      	bne.n	8011458 <tcp_receive+0x7ec>
 8011476:	e0c8      	b.n	801160a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801147c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801147e:	e052      	b.n	8011526 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8011480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011482:	68db      	ldr	r3, [r3, #12]
 8011484:	899b      	ldrh	r3, [r3, #12]
 8011486:	b29b      	uxth	r3, r3
 8011488:	4618      	mov	r0, r3
 801148a:	f7fa fc19 	bl	800bcc0 <lwip_htons>
 801148e:	4603      	mov	r3, r0
 8011490:	b2db      	uxtb	r3, r3
 8011492:	f003 0301 	and.w	r3, r3, #1
 8011496:	2b00      	cmp	r3, #0
 8011498:	d03d      	beq.n	8011516 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801149a:	4b17      	ldr	r3, [pc, #92]	; (80114f8 <tcp_receive+0x88c>)
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	899b      	ldrh	r3, [r3, #12]
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fa fc0c 	bl	800bcc0 <lwip_htons>
 80114a8:	4603      	mov	r3, r0
 80114aa:	b2db      	uxtb	r3, r3
 80114ac:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d130      	bne.n	8011516 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80114b4:	4b10      	ldr	r3, [pc, #64]	; (80114f8 <tcp_receive+0x88c>)
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	899b      	ldrh	r3, [r3, #12]
 80114ba:	b29c      	uxth	r4, r3
 80114bc:	2001      	movs	r0, #1
 80114be:	f7fa fbff 	bl	800bcc0 <lwip_htons>
 80114c2:	4603      	mov	r3, r0
 80114c4:	461a      	mov	r2, r3
 80114c6:	4b0c      	ldr	r3, [pc, #48]	; (80114f8 <tcp_receive+0x88c>)
 80114c8:	68db      	ldr	r3, [r3, #12]
 80114ca:	4322      	orrs	r2, r4
 80114cc:	b292      	uxth	r2, r2
 80114ce:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80114d0:	4b09      	ldr	r3, [pc, #36]	; (80114f8 <tcp_receive+0x88c>)
 80114d2:	891c      	ldrh	r4, [r3, #8]
 80114d4:	4b08      	ldr	r3, [pc, #32]	; (80114f8 <tcp_receive+0x88c>)
 80114d6:	68db      	ldr	r3, [r3, #12]
 80114d8:	899b      	ldrh	r3, [r3, #12]
 80114da:	b29b      	uxth	r3, r3
 80114dc:	4618      	mov	r0, r3
 80114de:	f7fa fbef 	bl	800bcc0 <lwip_htons>
 80114e2:	4603      	mov	r3, r0
 80114e4:	b2db      	uxtb	r3, r3
 80114e6:	f003 0303 	and.w	r3, r3, #3
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00e      	beq.n	801150c <tcp_receive+0x8a0>
 80114ee:	2301      	movs	r3, #1
 80114f0:	e00d      	b.n	801150e <tcp_receive+0x8a2>
 80114f2:	bf00      	nop
 80114f4:	2000cf14 	.word	0x2000cf14
 80114f8:	2000cef4 	.word	0x2000cef4
 80114fc:	2000cf1e 	.word	0x2000cf1e
 8011500:	0801b56c 	.word	0x0801b56c
 8011504:	0801b914 	.word	0x0801b914
 8011508:	0801b5b8 	.word	0x0801b5b8
 801150c:	2300      	movs	r3, #0
 801150e:	4423      	add	r3, r4
 8011510:	b29a      	uxth	r2, r3
 8011512:	4b98      	ldr	r3, [pc, #608]	; (8011774 <tcp_receive+0xb08>)
 8011514:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011518:	613b      	str	r3, [r7, #16]
              next = next->next;
 801151a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8011520:	6938      	ldr	r0, [r7, #16]
 8011522:	f7fd fc4a 	bl	800edba <tcp_seg_free>
            while (next &&
 8011526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00e      	beq.n	801154a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801152c:	4b91      	ldr	r3, [pc, #580]	; (8011774 <tcp_receive+0xb08>)
 801152e:	881b      	ldrh	r3, [r3, #0]
 8011530:	461a      	mov	r2, r3
 8011532:	4b91      	ldr	r3, [pc, #580]	; (8011778 <tcp_receive+0xb0c>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	441a      	add	r2, r3
 8011538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801153a:	68db      	ldr	r3, [r3, #12]
 801153c:	685b      	ldr	r3, [r3, #4]
 801153e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011540:	8909      	ldrh	r1, [r1, #8]
 8011542:	440b      	add	r3, r1
 8011544:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011546:	2b00      	cmp	r3, #0
 8011548:	da9a      	bge.n	8011480 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801154a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801154c:	2b00      	cmp	r3, #0
 801154e:	d059      	beq.n	8011604 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8011550:	4b88      	ldr	r3, [pc, #544]	; (8011774 <tcp_receive+0xb08>)
 8011552:	881b      	ldrh	r3, [r3, #0]
 8011554:	461a      	mov	r2, r3
 8011556:	4b88      	ldr	r3, [pc, #544]	; (8011778 <tcp_receive+0xb0c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	441a      	add	r2, r3
 801155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	685b      	ldr	r3, [r3, #4]
 8011562:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011564:	2b00      	cmp	r3, #0
 8011566:	dd4d      	ble.n	8011604 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801156a:	68db      	ldr	r3, [r3, #12]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	b29a      	uxth	r2, r3
 8011570:	4b81      	ldr	r3, [pc, #516]	; (8011778 <tcp_receive+0xb0c>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	b29b      	uxth	r3, r3
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	b29a      	uxth	r2, r3
 801157a:	4b80      	ldr	r3, [pc, #512]	; (801177c <tcp_receive+0xb10>)
 801157c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801157e:	4b7f      	ldr	r3, [pc, #508]	; (801177c <tcp_receive+0xb10>)
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	899b      	ldrh	r3, [r3, #12]
 8011584:	b29b      	uxth	r3, r3
 8011586:	4618      	mov	r0, r3
 8011588:	f7fa fb9a 	bl	800bcc0 <lwip_htons>
 801158c:	4603      	mov	r3, r0
 801158e:	b2db      	uxtb	r3, r3
 8011590:	f003 0302 	and.w	r3, r3, #2
 8011594:	2b00      	cmp	r3, #0
 8011596:	d005      	beq.n	80115a4 <tcp_receive+0x938>
                inseg.len -= 1;
 8011598:	4b78      	ldr	r3, [pc, #480]	; (801177c <tcp_receive+0xb10>)
 801159a:	891b      	ldrh	r3, [r3, #8]
 801159c:	3b01      	subs	r3, #1
 801159e:	b29a      	uxth	r2, r3
 80115a0:	4b76      	ldr	r3, [pc, #472]	; (801177c <tcp_receive+0xb10>)
 80115a2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80115a4:	4b75      	ldr	r3, [pc, #468]	; (801177c <tcp_receive+0xb10>)
 80115a6:	685b      	ldr	r3, [r3, #4]
 80115a8:	4a74      	ldr	r2, [pc, #464]	; (801177c <tcp_receive+0xb10>)
 80115aa:	8912      	ldrh	r2, [r2, #8]
 80115ac:	4611      	mov	r1, r2
 80115ae:	4618      	mov	r0, r3
 80115b0:	f7fb fe34 	bl	800d21c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80115b4:	4b71      	ldr	r3, [pc, #452]	; (801177c <tcp_receive+0xb10>)
 80115b6:	891c      	ldrh	r4, [r3, #8]
 80115b8:	4b70      	ldr	r3, [pc, #448]	; (801177c <tcp_receive+0xb10>)
 80115ba:	68db      	ldr	r3, [r3, #12]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	b29b      	uxth	r3, r3
 80115c0:	4618      	mov	r0, r3
 80115c2:	f7fa fb7d 	bl	800bcc0 <lwip_htons>
 80115c6:	4603      	mov	r3, r0
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	f003 0303 	and.w	r3, r3, #3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d001      	beq.n	80115d6 <tcp_receive+0x96a>
 80115d2:	2301      	movs	r3, #1
 80115d4:	e000      	b.n	80115d8 <tcp_receive+0x96c>
 80115d6:	2300      	movs	r3, #0
 80115d8:	4423      	add	r3, r4
 80115da:	b29a      	uxth	r2, r3
 80115dc:	4b65      	ldr	r3, [pc, #404]	; (8011774 <tcp_receive+0xb08>)
 80115de:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80115e0:	4b64      	ldr	r3, [pc, #400]	; (8011774 <tcp_receive+0xb08>)
 80115e2:	881b      	ldrh	r3, [r3, #0]
 80115e4:	461a      	mov	r2, r3
 80115e6:	4b64      	ldr	r3, [pc, #400]	; (8011778 <tcp_receive+0xb0c>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	441a      	add	r2, r3
 80115ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115ee:	68db      	ldr	r3, [r3, #12]
 80115f0:	685b      	ldr	r3, [r3, #4]
 80115f2:	429a      	cmp	r2, r3
 80115f4:	d006      	beq.n	8011604 <tcp_receive+0x998>
 80115f6:	4b62      	ldr	r3, [pc, #392]	; (8011780 <tcp_receive+0xb14>)
 80115f8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80115fc:	4961      	ldr	r1, [pc, #388]	; (8011784 <tcp_receive+0xb18>)
 80115fe:	4862      	ldr	r0, [pc, #392]	; (8011788 <tcp_receive+0xb1c>)
 8011600:	f007 fcdc 	bl	8018fbc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011608:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801160a:	4b5a      	ldr	r3, [pc, #360]	; (8011774 <tcp_receive+0xb08>)
 801160c:	881b      	ldrh	r3, [r3, #0]
 801160e:	461a      	mov	r2, r3
 8011610:	4b59      	ldr	r3, [pc, #356]	; (8011778 <tcp_receive+0xb0c>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	441a      	add	r2, r3
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801161e:	4b55      	ldr	r3, [pc, #340]	; (8011774 <tcp_receive+0xb08>)
 8011620:	881b      	ldrh	r3, [r3, #0]
 8011622:	429a      	cmp	r2, r3
 8011624:	d206      	bcs.n	8011634 <tcp_receive+0x9c8>
 8011626:	4b56      	ldr	r3, [pc, #344]	; (8011780 <tcp_receive+0xb14>)
 8011628:	f240 6207 	movw	r2, #1543	; 0x607
 801162c:	4957      	ldr	r1, [pc, #348]	; (801178c <tcp_receive+0xb20>)
 801162e:	4856      	ldr	r0, [pc, #344]	; (8011788 <tcp_receive+0xb1c>)
 8011630:	f007 fcc4 	bl	8018fbc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011638:	4b4e      	ldr	r3, [pc, #312]	; (8011774 <tcp_receive+0xb08>)
 801163a:	881b      	ldrh	r3, [r3, #0]
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	b29a      	uxth	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7fc fe93 	bl	800e370 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801164a:	4b4c      	ldr	r3, [pc, #304]	; (801177c <tcp_receive+0xb10>)
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	891b      	ldrh	r3, [r3, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d006      	beq.n	8011662 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011654:	4b49      	ldr	r3, [pc, #292]	; (801177c <tcp_receive+0xb10>)
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	4a4d      	ldr	r2, [pc, #308]	; (8011790 <tcp_receive+0xb24>)
 801165a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801165c:	4b47      	ldr	r3, [pc, #284]	; (801177c <tcp_receive+0xb10>)
 801165e:	2200      	movs	r2, #0
 8011660:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011662:	4b46      	ldr	r3, [pc, #280]	; (801177c <tcp_receive+0xb10>)
 8011664:	68db      	ldr	r3, [r3, #12]
 8011666:	899b      	ldrh	r3, [r3, #12]
 8011668:	b29b      	uxth	r3, r3
 801166a:	4618      	mov	r0, r3
 801166c:	f7fa fb28 	bl	800bcc0 <lwip_htons>
 8011670:	4603      	mov	r3, r0
 8011672:	b2db      	uxtb	r3, r3
 8011674:	f003 0301 	and.w	r3, r3, #1
 8011678:	2b00      	cmp	r3, #0
 801167a:	f000 80b8 	beq.w	80117ee <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801167e:	4b45      	ldr	r3, [pc, #276]	; (8011794 <tcp_receive+0xb28>)
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	f043 0320 	orr.w	r3, r3, #32
 8011686:	b2da      	uxtb	r2, r3
 8011688:	4b42      	ldr	r3, [pc, #264]	; (8011794 <tcp_receive+0xb28>)
 801168a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801168c:	e0af      	b.n	80117ee <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011692:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011698:	68db      	ldr	r3, [r3, #12]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	4a36      	ldr	r2, [pc, #216]	; (8011778 <tcp_receive+0xb0c>)
 801169e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	891b      	ldrh	r3, [r3, #8]
 80116a4:	461c      	mov	r4, r3
 80116a6:	68bb      	ldr	r3, [r7, #8]
 80116a8:	68db      	ldr	r3, [r3, #12]
 80116aa:	899b      	ldrh	r3, [r3, #12]
 80116ac:	b29b      	uxth	r3, r3
 80116ae:	4618      	mov	r0, r3
 80116b0:	f7fa fb06 	bl	800bcc0 <lwip_htons>
 80116b4:	4603      	mov	r3, r0
 80116b6:	b2db      	uxtb	r3, r3
 80116b8:	f003 0303 	and.w	r3, r3, #3
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d001      	beq.n	80116c4 <tcp_receive+0xa58>
 80116c0:	2301      	movs	r3, #1
 80116c2:	e000      	b.n	80116c6 <tcp_receive+0xa5a>
 80116c4:	2300      	movs	r3, #0
 80116c6:	191a      	adds	r2, r3, r4
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116cc:	441a      	add	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80116d6:	461c      	mov	r4, r3
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	891b      	ldrh	r3, [r3, #8]
 80116dc:	461d      	mov	r5, r3
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	899b      	ldrh	r3, [r3, #12]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7fa faea 	bl	800bcc0 <lwip_htons>
 80116ec:	4603      	mov	r3, r0
 80116ee:	b2db      	uxtb	r3, r3
 80116f0:	f003 0303 	and.w	r3, r3, #3
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d001      	beq.n	80116fc <tcp_receive+0xa90>
 80116f8:	2301      	movs	r3, #1
 80116fa:	e000      	b.n	80116fe <tcp_receive+0xa92>
 80116fc:	2300      	movs	r3, #0
 80116fe:	442b      	add	r3, r5
 8011700:	429c      	cmp	r4, r3
 8011702:	d206      	bcs.n	8011712 <tcp_receive+0xaa6>
 8011704:	4b1e      	ldr	r3, [pc, #120]	; (8011780 <tcp_receive+0xb14>)
 8011706:	f240 622b 	movw	r2, #1579	; 0x62b
 801170a:	4923      	ldr	r1, [pc, #140]	; (8011798 <tcp_receive+0xb2c>)
 801170c:	481e      	ldr	r0, [pc, #120]	; (8011788 <tcp_receive+0xb1c>)
 801170e:	f007 fc55 	bl	8018fbc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	891b      	ldrh	r3, [r3, #8]
 8011716:	461c      	mov	r4, r3
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	68db      	ldr	r3, [r3, #12]
 801171c:	899b      	ldrh	r3, [r3, #12]
 801171e:	b29b      	uxth	r3, r3
 8011720:	4618      	mov	r0, r3
 8011722:	f7fa facd 	bl	800bcc0 <lwip_htons>
 8011726:	4603      	mov	r3, r0
 8011728:	b2db      	uxtb	r3, r3
 801172a:	f003 0303 	and.w	r3, r3, #3
 801172e:	2b00      	cmp	r3, #0
 8011730:	d001      	beq.n	8011736 <tcp_receive+0xaca>
 8011732:	2301      	movs	r3, #1
 8011734:	e000      	b.n	8011738 <tcp_receive+0xacc>
 8011736:	2300      	movs	r3, #0
 8011738:	1919      	adds	r1, r3, r4
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801173e:	b28b      	uxth	r3, r1
 8011740:	1ad3      	subs	r3, r2, r3
 8011742:	b29a      	uxth	r2, r3
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011748:	6878      	ldr	r0, [r7, #4]
 801174a:	f7fc fe11 	bl	800e370 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	891b      	ldrh	r3, [r3, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d028      	beq.n	80117aa <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011758:	4b0d      	ldr	r3, [pc, #52]	; (8011790 <tcp_receive+0xb24>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d01d      	beq.n	801179c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8011760:	4b0b      	ldr	r3, [pc, #44]	; (8011790 <tcp_receive+0xb24>)
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	685b      	ldr	r3, [r3, #4]
 8011768:	4619      	mov	r1, r3
 801176a:	4610      	mov	r0, r2
 801176c:	f7fb ffaa 	bl	800d6c4 <pbuf_cat>
 8011770:	e018      	b.n	80117a4 <tcp_receive+0xb38>
 8011772:	bf00      	nop
 8011774:	2000cf1e 	.word	0x2000cf1e
 8011778:	2000cf14 	.word	0x2000cf14
 801177c:	2000cef4 	.word	0x2000cef4
 8011780:	0801b56c 	.word	0x0801b56c
 8011784:	0801b94c 	.word	0x0801b94c
 8011788:	0801b5b8 	.word	0x0801b5b8
 801178c:	0801b988 	.word	0x0801b988
 8011790:	2000cf24 	.word	0x2000cf24
 8011794:	2000cf21 	.word	0x2000cf21
 8011798:	0801b9a8 	.word	0x0801b9a8
            } else {
              recv_data = cseg->p;
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	685b      	ldr	r3, [r3, #4]
 80117a0:	4a70      	ldr	r2, [pc, #448]	; (8011964 <tcp_receive+0xcf8>)
 80117a2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2200      	movs	r2, #0
 80117a8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80117aa:	68bb      	ldr	r3, [r7, #8]
 80117ac:	68db      	ldr	r3, [r3, #12]
 80117ae:	899b      	ldrh	r3, [r3, #12]
 80117b0:	b29b      	uxth	r3, r3
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fa fa84 	bl	800bcc0 <lwip_htons>
 80117b8:	4603      	mov	r3, r0
 80117ba:	b2db      	uxtb	r3, r3
 80117bc:	f003 0301 	and.w	r3, r3, #1
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d00d      	beq.n	80117e0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80117c4:	4b68      	ldr	r3, [pc, #416]	; (8011968 <tcp_receive+0xcfc>)
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	f043 0320 	orr.w	r3, r3, #32
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	4b66      	ldr	r3, [pc, #408]	; (8011968 <tcp_receive+0xcfc>)
 80117d0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	7d1b      	ldrb	r3, [r3, #20]
 80117d6:	2b04      	cmp	r3, #4
 80117d8:	d102      	bne.n	80117e0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2207      	movs	r2, #7
 80117de:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80117e0:	68bb      	ldr	r3, [r7, #8]
 80117e2:	681a      	ldr	r2, [r3, #0]
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80117e8:	68b8      	ldr	r0, [r7, #8]
 80117ea:	f7fd fae6 	bl	800edba <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d008      	beq.n	8011808 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117fa:	68db      	ldr	r3, [r3, #12]
 80117fc:	685a      	ldr	r2, [r3, #4]
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8011802:	429a      	cmp	r2, r3
 8011804:	f43f af43 	beq.w	801168e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	8b5b      	ldrh	r3, [r3, #26]
 801180c:	f003 0301 	and.w	r3, r3, #1
 8011810:	2b00      	cmp	r3, #0
 8011812:	d00e      	beq.n	8011832 <tcp_receive+0xbc6>
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	8b5b      	ldrh	r3, [r3, #26]
 8011818:	f023 0301 	bic.w	r3, r3, #1
 801181c:	b29a      	uxth	r2, r3
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	835a      	strh	r2, [r3, #26]
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	8b5b      	ldrh	r3, [r3, #26]
 8011826:	f043 0302 	orr.w	r3, r3, #2
 801182a:	b29a      	uxth	r2, r3
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011830:	e188      	b.n	8011b44 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	8b5b      	ldrh	r3, [r3, #26]
 8011836:	f043 0301 	orr.w	r3, r3, #1
 801183a:	b29a      	uxth	r2, r3
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011840:	e180      	b.n	8011b44 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011846:	2b00      	cmp	r3, #0
 8011848:	d106      	bne.n	8011858 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801184a:	4848      	ldr	r0, [pc, #288]	; (801196c <tcp_receive+0xd00>)
 801184c:	f7fd faec 	bl	800ee28 <tcp_seg_copy>
 8011850:	4602      	mov	r2, r0
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	675a      	str	r2, [r3, #116]	; 0x74
 8011856:	e16d      	b.n	8011b34 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011858:	2300      	movs	r3, #0
 801185a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011860:	63bb      	str	r3, [r7, #56]	; 0x38
 8011862:	e157      	b.n	8011b14 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011866:	68db      	ldr	r3, [r3, #12]
 8011868:	685a      	ldr	r2, [r3, #4]
 801186a:	4b41      	ldr	r3, [pc, #260]	; (8011970 <tcp_receive+0xd04>)
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	429a      	cmp	r2, r3
 8011870:	d11d      	bne.n	80118ae <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011872:	4b3e      	ldr	r3, [pc, #248]	; (801196c <tcp_receive+0xd00>)
 8011874:	891a      	ldrh	r2, [r3, #8]
 8011876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011878:	891b      	ldrh	r3, [r3, #8]
 801187a:	429a      	cmp	r2, r3
 801187c:	f240 814f 	bls.w	8011b1e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011880:	483a      	ldr	r0, [pc, #232]	; (801196c <tcp_receive+0xd00>)
 8011882:	f7fd fad1 	bl	800ee28 <tcp_seg_copy>
 8011886:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	2b00      	cmp	r3, #0
 801188c:	f000 8149 	beq.w	8011b22 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8011890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011892:	2b00      	cmp	r3, #0
 8011894:	d003      	beq.n	801189e <tcp_receive+0xc32>
                    prev->next = cseg;
 8011896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011898:	697a      	ldr	r2, [r7, #20]
 801189a:	601a      	str	r2, [r3, #0]
 801189c:	e002      	b.n	80118a4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	697a      	ldr	r2, [r7, #20]
 80118a2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80118a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118a6:	6978      	ldr	r0, [r7, #20]
 80118a8:	f7ff f8dc 	bl	8010a64 <tcp_oos_insert_segment>
                }
                break;
 80118ac:	e139      	b.n	8011b22 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80118ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d117      	bne.n	80118e4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80118b4:	4b2e      	ldr	r3, [pc, #184]	; (8011970 <tcp_receive+0xd04>)
 80118b6:	681a      	ldr	r2, [r3, #0]
 80118b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ba:	68db      	ldr	r3, [r3, #12]
 80118bc:	685b      	ldr	r3, [r3, #4]
 80118be:	1ad3      	subs	r3, r2, r3
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	da57      	bge.n	8011974 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80118c4:	4829      	ldr	r0, [pc, #164]	; (801196c <tcp_receive+0xd00>)
 80118c6:	f7fd faaf 	bl	800ee28 <tcp_seg_copy>
 80118ca:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80118cc:	69bb      	ldr	r3, [r7, #24]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	f000 8129 	beq.w	8011b26 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	69ba      	ldr	r2, [r7, #24]
 80118d8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80118da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80118dc:	69b8      	ldr	r0, [r7, #24]
 80118de:	f7ff f8c1 	bl	8010a64 <tcp_oos_insert_segment>
                  }
                  break;
 80118e2:	e120      	b.n	8011b26 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80118e4:	4b22      	ldr	r3, [pc, #136]	; (8011970 <tcp_receive+0xd04>)
 80118e6:	681a      	ldr	r2, [r3, #0]
 80118e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ea:	68db      	ldr	r3, [r3, #12]
 80118ec:	685b      	ldr	r3, [r3, #4]
 80118ee:	1ad3      	subs	r3, r2, r3
 80118f0:	3b01      	subs	r3, #1
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	db3e      	blt.n	8011974 <tcp_receive+0xd08>
 80118f6:	4b1e      	ldr	r3, [pc, #120]	; (8011970 <tcp_receive+0xd04>)
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118fc:	68db      	ldr	r3, [r3, #12]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	3301      	adds	r3, #1
 8011904:	2b00      	cmp	r3, #0
 8011906:	dc35      	bgt.n	8011974 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011908:	4818      	ldr	r0, [pc, #96]	; (801196c <tcp_receive+0xd00>)
 801190a:	f7fd fa8d 	bl	800ee28 <tcp_seg_copy>
 801190e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011910:	69fb      	ldr	r3, [r7, #28]
 8011912:	2b00      	cmp	r3, #0
 8011914:	f000 8109 	beq.w	8011b2a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801191a:	68db      	ldr	r3, [r3, #12]
 801191c:	685b      	ldr	r3, [r3, #4]
 801191e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011920:	8912      	ldrh	r2, [r2, #8]
 8011922:	441a      	add	r2, r3
 8011924:	4b12      	ldr	r3, [pc, #72]	; (8011970 <tcp_receive+0xd04>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	1ad3      	subs	r3, r2, r3
 801192a:	2b00      	cmp	r3, #0
 801192c:	dd12      	ble.n	8011954 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801192e:	4b10      	ldr	r3, [pc, #64]	; (8011970 <tcp_receive+0xd04>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	b29a      	uxth	r2, r3
 8011934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011936:	68db      	ldr	r3, [r3, #12]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	b29b      	uxth	r3, r3
 801193c:	1ad3      	subs	r3, r2, r3
 801193e:	b29a      	uxth	r2, r3
 8011940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011942:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011946:	685a      	ldr	r2, [r3, #4]
 8011948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194a:	891b      	ldrh	r3, [r3, #8]
 801194c:	4619      	mov	r1, r3
 801194e:	4610      	mov	r0, r2
 8011950:	f7fb fc64 	bl	800d21c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011956:	69fa      	ldr	r2, [r7, #28]
 8011958:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801195a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801195c:	69f8      	ldr	r0, [r7, #28]
 801195e:	f7ff f881 	bl	8010a64 <tcp_oos_insert_segment>
                  }
                  break;
 8011962:	e0e2      	b.n	8011b2a <tcp_receive+0xebe>
 8011964:	2000cf24 	.word	0x2000cf24
 8011968:	2000cf21 	.word	0x2000cf21
 801196c:	2000cef4 	.word	0x2000cef4
 8011970:	2000cf14 	.word	0x2000cf14
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011976:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	f040 80c6 	bne.w	8011b0e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011982:	4b80      	ldr	r3, [pc, #512]	; (8011b84 <tcp_receive+0xf18>)
 8011984:	681a      	ldr	r2, [r3, #0]
 8011986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011988:	68db      	ldr	r3, [r3, #12]
 801198a:	685b      	ldr	r3, [r3, #4]
 801198c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801198e:	2b00      	cmp	r3, #0
 8011990:	f340 80bd 	ble.w	8011b0e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011996:	68db      	ldr	r3, [r3, #12]
 8011998:	899b      	ldrh	r3, [r3, #12]
 801199a:	b29b      	uxth	r3, r3
 801199c:	4618      	mov	r0, r3
 801199e:	f7fa f98f 	bl	800bcc0 <lwip_htons>
 80119a2:	4603      	mov	r3, r0
 80119a4:	b2db      	uxtb	r3, r3
 80119a6:	f003 0301 	and.w	r3, r3, #1
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	f040 80bf 	bne.w	8011b2e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80119b0:	4875      	ldr	r0, [pc, #468]	; (8011b88 <tcp_receive+0xf1c>)
 80119b2:	f7fd fa39 	bl	800ee28 <tcp_seg_copy>
 80119b6:	4602      	mov	r2, r0
 80119b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ba:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80119bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	f000 80b6 	beq.w	8011b32 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80119c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	685b      	ldr	r3, [r3, #4]
 80119cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119ce:	8912      	ldrh	r2, [r2, #8]
 80119d0:	441a      	add	r2, r3
 80119d2:	4b6c      	ldr	r3, [pc, #432]	; (8011b84 <tcp_receive+0xf18>)
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	1ad3      	subs	r3, r2, r3
 80119d8:	2b00      	cmp	r3, #0
 80119da:	dd12      	ble.n	8011a02 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80119dc:	4b69      	ldr	r3, [pc, #420]	; (8011b84 <tcp_receive+0xf18>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	b29a      	uxth	r2, r3
 80119e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e4:	68db      	ldr	r3, [r3, #12]
 80119e6:	685b      	ldr	r3, [r3, #4]
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80119f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f4:	685a      	ldr	r2, [r3, #4]
 80119f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119f8:	891b      	ldrh	r3, [r3, #8]
 80119fa:	4619      	mov	r1, r3
 80119fc:	4610      	mov	r0, r2
 80119fe:	f7fb fc0d 	bl	800d21c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011a02:	4b62      	ldr	r3, [pc, #392]	; (8011b8c <tcp_receive+0xf20>)
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	461a      	mov	r2, r3
 8011a08:	4b5e      	ldr	r3, [pc, #376]	; (8011b84 <tcp_receive+0xf18>)
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	441a      	add	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a12:	6879      	ldr	r1, [r7, #4]
 8011a14:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011a16:	440b      	add	r3, r1
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	f340 8089 	ble.w	8011b32 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	68db      	ldr	r3, [r3, #12]
 8011a26:	899b      	ldrh	r3, [r3, #12]
 8011a28:	b29b      	uxth	r3, r3
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7fa f948 	bl	800bcc0 <lwip_htons>
 8011a30:	4603      	mov	r3, r0
 8011a32:	b2db      	uxtb	r3, r3
 8011a34:	f003 0301 	and.w	r3, r3, #1
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d022      	beq.n	8011a82 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	68db      	ldr	r3, [r3, #12]
 8011a42:	899b      	ldrh	r3, [r3, #12]
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	b21b      	sxth	r3, r3
 8011a48:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011a4c:	b21c      	sxth	r4, r3
 8011a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a50:	681b      	ldr	r3, [r3, #0]
 8011a52:	68db      	ldr	r3, [r3, #12]
 8011a54:	899b      	ldrh	r3, [r3, #12]
 8011a56:	b29b      	uxth	r3, r3
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fa f931 	bl	800bcc0 <lwip_htons>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	b2db      	uxtb	r3, r3
 8011a62:	b29b      	uxth	r3, r3
 8011a64:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011a68:	b29b      	uxth	r3, r3
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fa f928 	bl	800bcc0 <lwip_htons>
 8011a70:	4603      	mov	r3, r0
 8011a72:	b21b      	sxth	r3, r3
 8011a74:	4323      	orrs	r3, r4
 8011a76:	b21a      	sxth	r2, r3
 8011a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	68db      	ldr	r3, [r3, #12]
 8011a7e:	b292      	uxth	r2, r2
 8011a80:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a86:	b29a      	uxth	r2, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a8c:	4413      	add	r3, r2
 8011a8e:	b299      	uxth	r1, r3
 8011a90:	4b3c      	ldr	r3, [pc, #240]	; (8011b84 <tcp_receive+0xf18>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	b29a      	uxth	r2, r3
 8011a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	1a8a      	subs	r2, r1, r2
 8011a9c:	b292      	uxth	r2, r2
 8011a9e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	685a      	ldr	r2, [r3, #4]
 8011aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	891b      	ldrh	r3, [r3, #8]
 8011aac:	4619      	mov	r1, r3
 8011aae:	4610      	mov	r0, r2
 8011ab0:	f7fb fbb4 	bl	800d21c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	891c      	ldrh	r4, [r3, #8]
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	68db      	ldr	r3, [r3, #12]
 8011ac0:	899b      	ldrh	r3, [r3, #12]
 8011ac2:	b29b      	uxth	r3, r3
 8011ac4:	4618      	mov	r0, r3
 8011ac6:	f7fa f8fb 	bl	800bcc0 <lwip_htons>
 8011aca:	4603      	mov	r3, r0
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	f003 0303 	and.w	r3, r3, #3
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <tcp_receive+0xe6e>
 8011ad6:	2301      	movs	r3, #1
 8011ad8:	e000      	b.n	8011adc <tcp_receive+0xe70>
 8011ada:	2300      	movs	r3, #0
 8011adc:	4423      	add	r3, r4
 8011ade:	b29a      	uxth	r2, r3
 8011ae0:	4b2a      	ldr	r3, [pc, #168]	; (8011b8c <tcp_receive+0xf20>)
 8011ae2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ae4:	4b29      	ldr	r3, [pc, #164]	; (8011b8c <tcp_receive+0xf20>)
 8011ae6:	881b      	ldrh	r3, [r3, #0]
 8011ae8:	461a      	mov	r2, r3
 8011aea:	4b26      	ldr	r3, [pc, #152]	; (8011b84 <tcp_receive+0xf18>)
 8011aec:	681b      	ldr	r3, [r3, #0]
 8011aee:	441a      	add	r2, r3
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011af4:	6879      	ldr	r1, [r7, #4]
 8011af6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011af8:	440b      	add	r3, r1
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d019      	beq.n	8011b32 <tcp_receive+0xec6>
 8011afe:	4b24      	ldr	r3, [pc, #144]	; (8011b90 <tcp_receive+0xf24>)
 8011b00:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011b04:	4923      	ldr	r1, [pc, #140]	; (8011b94 <tcp_receive+0xf28>)
 8011b06:	4824      	ldr	r0, [pc, #144]	; (8011b98 <tcp_receive+0xf2c>)
 8011b08:	f007 fa58 	bl	8018fbc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011b0c:	e011      	b.n	8011b32 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f47f aea4 	bne.w	8011864 <tcp_receive+0xbf8>
 8011b1c:	e00a      	b.n	8011b34 <tcp_receive+0xec8>
                break;
 8011b1e:	bf00      	nop
 8011b20:	e008      	b.n	8011b34 <tcp_receive+0xec8>
                break;
 8011b22:	bf00      	nop
 8011b24:	e006      	b.n	8011b34 <tcp_receive+0xec8>
                  break;
 8011b26:	bf00      	nop
 8011b28:	e004      	b.n	8011b34 <tcp_receive+0xec8>
                  break;
 8011b2a:	bf00      	nop
 8011b2c:	e002      	b.n	8011b34 <tcp_receive+0xec8>
                  break;
 8011b2e:	bf00      	nop
 8011b30:	e000      	b.n	8011b34 <tcp_receive+0xec8>
                break;
 8011b32:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011b34:	6878      	ldr	r0, [r7, #4]
 8011b36:	f001 fe8b 	bl	8013850 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011b3a:	e003      	b.n	8011b44 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011b3c:	6878      	ldr	r0, [r7, #4]
 8011b3e:	f001 fe87 	bl	8013850 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011b42:	e01a      	b.n	8011b7a <tcp_receive+0xf0e>
 8011b44:	e019      	b.n	8011b7a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011b46:	4b0f      	ldr	r3, [pc, #60]	; (8011b84 <tcp_receive+0xf18>)
 8011b48:	681a      	ldr	r2, [r3, #0]
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b4e:	1ad3      	subs	r3, r2, r3
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	db0a      	blt.n	8011b6a <tcp_receive+0xefe>
 8011b54:	4b0b      	ldr	r3, [pc, #44]	; (8011b84 <tcp_receive+0xf18>)
 8011b56:	681a      	ldr	r2, [r3, #0]
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b5c:	6879      	ldr	r1, [r7, #4]
 8011b5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011b60:	440b      	add	r3, r1
 8011b62:	1ad3      	subs	r3, r2, r3
 8011b64:	3301      	adds	r3, #1
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	dd07      	ble.n	8011b7a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	8b5b      	ldrh	r3, [r3, #26]
 8011b6e:	f043 0302 	orr.w	r3, r3, #2
 8011b72:	b29a      	uxth	r2, r3
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011b78:	e7ff      	b.n	8011b7a <tcp_receive+0xf0e>
 8011b7a:	bf00      	nop
 8011b7c:	3750      	adds	r7, #80	; 0x50
 8011b7e:	46bd      	mov	sp, r7
 8011b80:	bdb0      	pop	{r4, r5, r7, pc}
 8011b82:	bf00      	nop
 8011b84:	2000cf14 	.word	0x2000cf14
 8011b88:	2000cef4 	.word	0x2000cef4
 8011b8c:	2000cf1e 	.word	0x2000cf1e
 8011b90:	0801b56c 	.word	0x0801b56c
 8011b94:	0801b914 	.word	0x0801b914
 8011b98:	0801b5b8 	.word	0x0801b5b8

08011b9c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011b9c:	b480      	push	{r7}
 8011b9e:	b083      	sub	sp, #12
 8011ba0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011ba2:	4b15      	ldr	r3, [pc, #84]	; (8011bf8 <tcp_get_next_optbyte+0x5c>)
 8011ba4:	881b      	ldrh	r3, [r3, #0]
 8011ba6:	1c5a      	adds	r2, r3, #1
 8011ba8:	b291      	uxth	r1, r2
 8011baa:	4a13      	ldr	r2, [pc, #76]	; (8011bf8 <tcp_get_next_optbyte+0x5c>)
 8011bac:	8011      	strh	r1, [r2, #0]
 8011bae:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011bb0:	4b12      	ldr	r3, [pc, #72]	; (8011bfc <tcp_get_next_optbyte+0x60>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d004      	beq.n	8011bc2 <tcp_get_next_optbyte+0x26>
 8011bb8:	4b11      	ldr	r3, [pc, #68]	; (8011c00 <tcp_get_next_optbyte+0x64>)
 8011bba:	881b      	ldrh	r3, [r3, #0]
 8011bbc:	88fa      	ldrh	r2, [r7, #6]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d208      	bcs.n	8011bd4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011bc2:	4b10      	ldr	r3, [pc, #64]	; (8011c04 <tcp_get_next_optbyte+0x68>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	3314      	adds	r3, #20
 8011bc8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011bca:	88fb      	ldrh	r3, [r7, #6]
 8011bcc:	683a      	ldr	r2, [r7, #0]
 8011bce:	4413      	add	r3, r2
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	e00b      	b.n	8011bec <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011bd4:	88fb      	ldrh	r3, [r7, #6]
 8011bd6:	b2da      	uxtb	r2, r3
 8011bd8:	4b09      	ldr	r3, [pc, #36]	; (8011c00 <tcp_get_next_optbyte+0x64>)
 8011bda:	881b      	ldrh	r3, [r3, #0]
 8011bdc:	b2db      	uxtb	r3, r3
 8011bde:	1ad3      	subs	r3, r2, r3
 8011be0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011be2:	4b06      	ldr	r3, [pc, #24]	; (8011bfc <tcp_get_next_optbyte+0x60>)
 8011be4:	681a      	ldr	r2, [r3, #0]
 8011be6:	797b      	ldrb	r3, [r7, #5]
 8011be8:	4413      	add	r3, r2
 8011bea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	370c      	adds	r7, #12
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf6:	4770      	bx	lr
 8011bf8:	2000cf10 	.word	0x2000cf10
 8011bfc:	2000cf0c 	.word	0x2000cf0c
 8011c00:	2000cf0a 	.word	0x2000cf0a
 8011c04:	2000cf04 	.word	0x2000cf04

08011c08 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <tcp_parseopt+0x1c>
 8011c16:	4b32      	ldr	r3, [pc, #200]	; (8011ce0 <tcp_parseopt+0xd8>)
 8011c18:	f240 727d 	movw	r2, #1917	; 0x77d
 8011c1c:	4931      	ldr	r1, [pc, #196]	; (8011ce4 <tcp_parseopt+0xdc>)
 8011c1e:	4832      	ldr	r0, [pc, #200]	; (8011ce8 <tcp_parseopt+0xe0>)
 8011c20:	f007 f9cc 	bl	8018fbc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011c24:	4b31      	ldr	r3, [pc, #196]	; (8011cec <tcp_parseopt+0xe4>)
 8011c26:	881b      	ldrh	r3, [r3, #0]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d055      	beq.n	8011cd8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011c2c:	4b30      	ldr	r3, [pc, #192]	; (8011cf0 <tcp_parseopt+0xe8>)
 8011c2e:	2200      	movs	r2, #0
 8011c30:	801a      	strh	r2, [r3, #0]
 8011c32:	e045      	b.n	8011cc0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011c34:	f7ff ffb2 	bl	8011b9c <tcp_get_next_optbyte>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011c3c:	7bfb      	ldrb	r3, [r7, #15]
 8011c3e:	2b02      	cmp	r3, #2
 8011c40:	d006      	beq.n	8011c50 <tcp_parseopt+0x48>
 8011c42:	2b02      	cmp	r3, #2
 8011c44:	dc2b      	bgt.n	8011c9e <tcp_parseopt+0x96>
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d041      	beq.n	8011cce <tcp_parseopt+0xc6>
 8011c4a:	2b01      	cmp	r3, #1
 8011c4c:	d127      	bne.n	8011c9e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011c4e:	e037      	b.n	8011cc0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011c50:	f7ff ffa4 	bl	8011b9c <tcp_get_next_optbyte>
 8011c54:	4603      	mov	r3, r0
 8011c56:	2b04      	cmp	r3, #4
 8011c58:	d13b      	bne.n	8011cd2 <tcp_parseopt+0xca>
 8011c5a:	4b25      	ldr	r3, [pc, #148]	; (8011cf0 <tcp_parseopt+0xe8>)
 8011c5c:	881b      	ldrh	r3, [r3, #0]
 8011c5e:	3301      	adds	r3, #1
 8011c60:	4a22      	ldr	r2, [pc, #136]	; (8011cec <tcp_parseopt+0xe4>)
 8011c62:	8812      	ldrh	r2, [r2, #0]
 8011c64:	4293      	cmp	r3, r2
 8011c66:	da34      	bge.n	8011cd2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011c68:	f7ff ff98 	bl	8011b9c <tcp_get_next_optbyte>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	b29b      	uxth	r3, r3
 8011c70:	021b      	lsls	r3, r3, #8
 8011c72:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011c74:	f7ff ff92 	bl	8011b9c <tcp_get_next_optbyte>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	b29a      	uxth	r2, r3
 8011c7c:	89bb      	ldrh	r3, [r7, #12]
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011c82:	89bb      	ldrh	r3, [r7, #12]
 8011c84:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011c88:	d804      	bhi.n	8011c94 <tcp_parseopt+0x8c>
 8011c8a:	89bb      	ldrh	r3, [r7, #12]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d001      	beq.n	8011c94 <tcp_parseopt+0x8c>
 8011c90:	89ba      	ldrh	r2, [r7, #12]
 8011c92:	e001      	b.n	8011c98 <tcp_parseopt+0x90>
 8011c94:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011c9c:	e010      	b.n	8011cc0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011c9e:	f7ff ff7d 	bl	8011b9c <tcp_get_next_optbyte>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ca6:	7afb      	ldrb	r3, [r7, #11]
 8011ca8:	2b01      	cmp	r3, #1
 8011caa:	d914      	bls.n	8011cd6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011cac:	7afb      	ldrb	r3, [r7, #11]
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	4b0f      	ldr	r3, [pc, #60]	; (8011cf0 <tcp_parseopt+0xe8>)
 8011cb2:	881b      	ldrh	r3, [r3, #0]
 8011cb4:	4413      	add	r3, r2
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	3b02      	subs	r3, #2
 8011cba:	b29a      	uxth	r2, r3
 8011cbc:	4b0c      	ldr	r3, [pc, #48]	; (8011cf0 <tcp_parseopt+0xe8>)
 8011cbe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011cc0:	4b0b      	ldr	r3, [pc, #44]	; (8011cf0 <tcp_parseopt+0xe8>)
 8011cc2:	881a      	ldrh	r2, [r3, #0]
 8011cc4:	4b09      	ldr	r3, [pc, #36]	; (8011cec <tcp_parseopt+0xe4>)
 8011cc6:	881b      	ldrh	r3, [r3, #0]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d3b3      	bcc.n	8011c34 <tcp_parseopt+0x2c>
 8011ccc:	e004      	b.n	8011cd8 <tcp_parseopt+0xd0>
          return;
 8011cce:	bf00      	nop
 8011cd0:	e002      	b.n	8011cd8 <tcp_parseopt+0xd0>
            return;
 8011cd2:	bf00      	nop
 8011cd4:	e000      	b.n	8011cd8 <tcp_parseopt+0xd0>
            return;
 8011cd6:	bf00      	nop
      }
    }
  }
}
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	0801b56c 	.word	0x0801b56c
 8011ce4:	0801b9d0 	.word	0x0801b9d0
 8011ce8:	0801b5b8 	.word	0x0801b5b8
 8011cec:	2000cf08 	.word	0x2000cf08
 8011cf0:	2000cf10 	.word	0x2000cf10

08011cf4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011cf4:	b480      	push	{r7}
 8011cf6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011cf8:	4b05      	ldr	r3, [pc, #20]	; (8011d10 <tcp_trigger_input_pcb_close+0x1c>)
 8011cfa:	781b      	ldrb	r3, [r3, #0]
 8011cfc:	f043 0310 	orr.w	r3, r3, #16
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	4b03      	ldr	r3, [pc, #12]	; (8011d10 <tcp_trigger_input_pcb_close+0x1c>)
 8011d04:	701a      	strb	r2, [r3, #0]
}
 8011d06:	bf00      	nop
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0e:	4770      	bx	lr
 8011d10:	2000cf21 	.word	0x2000cf21

08011d14 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d00a      	beq.n	8011d3c <tcp_route+0x28>
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	7a1b      	ldrb	r3, [r3, #8]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d006      	beq.n	8011d3c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	7a1b      	ldrb	r3, [r3, #8]
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fb f86a 	bl	800ce0c <netif_get_by_index>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	e003      	b.n	8011d44 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f005 fc9f 	bl	8017680 <ip4_route>
 8011d42:	4603      	mov	r3, r0
  }
}
 8011d44:	4618      	mov	r0, r3
 8011d46:	3710      	adds	r7, #16
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011d4c:	b590      	push	{r4, r7, lr}
 8011d4e:	b087      	sub	sp, #28
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	603b      	str	r3, [r7, #0]
 8011d58:	4613      	mov	r3, r2
 8011d5a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d105      	bne.n	8011d6e <tcp_create_segment+0x22>
 8011d62:	4b44      	ldr	r3, [pc, #272]	; (8011e74 <tcp_create_segment+0x128>)
 8011d64:	22a3      	movs	r2, #163	; 0xa3
 8011d66:	4944      	ldr	r1, [pc, #272]	; (8011e78 <tcp_create_segment+0x12c>)
 8011d68:	4844      	ldr	r0, [pc, #272]	; (8011e7c <tcp_create_segment+0x130>)
 8011d6a:	f007 f927 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d105      	bne.n	8011d80 <tcp_create_segment+0x34>
 8011d74:	4b3f      	ldr	r3, [pc, #252]	; (8011e74 <tcp_create_segment+0x128>)
 8011d76:	22a4      	movs	r2, #164	; 0xa4
 8011d78:	4941      	ldr	r1, [pc, #260]	; (8011e80 <tcp_create_segment+0x134>)
 8011d7a:	4840      	ldr	r0, [pc, #256]	; (8011e7c <tcp_create_segment+0x130>)
 8011d7c:	f007 f91e 	bl	8018fbc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011d80:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d84:	009b      	lsls	r3, r3, #2
 8011d86:	b2db      	uxtb	r3, r3
 8011d88:	f003 0304 	and.w	r3, r3, #4
 8011d8c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011d8e:	2003      	movs	r0, #3
 8011d90:	f7fa fca4 	bl	800c6dc <memp_malloc>
 8011d94:	6138      	str	r0, [r7, #16]
 8011d96:	693b      	ldr	r3, [r7, #16]
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d104      	bne.n	8011da6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011d9c:	68b8      	ldr	r0, [r7, #8]
 8011d9e:	f7fb fbc3 	bl	800d528 <pbuf_free>
    return NULL;
 8011da2:	2300      	movs	r3, #0
 8011da4:	e061      	b.n	8011e6a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011da6:	693b      	ldr	r3, [r7, #16]
 8011da8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011dac:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	2200      	movs	r2, #0
 8011db2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011db4:	693b      	ldr	r3, [r7, #16]
 8011db6:	68ba      	ldr	r2, [r7, #8]
 8011db8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	891a      	ldrh	r2, [r3, #8]
 8011dbe:	7dfb      	ldrb	r3, [r7, #23]
 8011dc0:	b29b      	uxth	r3, r3
 8011dc2:	429a      	cmp	r2, r3
 8011dc4:	d205      	bcs.n	8011dd2 <tcp_create_segment+0x86>
 8011dc6:	4b2b      	ldr	r3, [pc, #172]	; (8011e74 <tcp_create_segment+0x128>)
 8011dc8:	22b0      	movs	r2, #176	; 0xb0
 8011dca:	492e      	ldr	r1, [pc, #184]	; (8011e84 <tcp_create_segment+0x138>)
 8011dcc:	482b      	ldr	r0, [pc, #172]	; (8011e7c <tcp_create_segment+0x130>)
 8011dce:	f007 f8f5 	bl	8018fbc <iprintf>
  seg->len = p->tot_len - optlen;
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	891a      	ldrh	r2, [r3, #8]
 8011dd6:	7dfb      	ldrb	r3, [r7, #23]
 8011dd8:	b29b      	uxth	r3, r3
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011de2:	2114      	movs	r1, #20
 8011de4:	68b8      	ldr	r0, [r7, #8]
 8011de6:	f7fb fb09 	bl	800d3fc <pbuf_add_header>
 8011dea:	4603      	mov	r3, r0
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d004      	beq.n	8011dfa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011df0:	6938      	ldr	r0, [r7, #16]
 8011df2:	f7fc ffe2 	bl	800edba <tcp_seg_free>
    return NULL;
 8011df6:	2300      	movs	r3, #0
 8011df8:	e037      	b.n	8011e6a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011dfa:	693b      	ldr	r3, [r7, #16]
 8011dfc:	685b      	ldr	r3, [r3, #4]
 8011dfe:	685a      	ldr	r2, [r3, #4]
 8011e00:	693b      	ldr	r3, [r7, #16]
 8011e02:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	8ada      	ldrh	r2, [r3, #22]
 8011e08:	693b      	ldr	r3, [r7, #16]
 8011e0a:	68dc      	ldr	r4, [r3, #12]
 8011e0c:	4610      	mov	r0, r2
 8011e0e:	f7f9 ff57 	bl	800bcc0 <lwip_htons>
 8011e12:	4603      	mov	r3, r0
 8011e14:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	8b1a      	ldrh	r2, [r3, #24]
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	68dc      	ldr	r4, [r3, #12]
 8011e1e:	4610      	mov	r0, r2
 8011e20:	f7f9 ff4e 	bl	800bcc0 <lwip_htons>
 8011e24:	4603      	mov	r3, r0
 8011e26:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	68dc      	ldr	r4, [r3, #12]
 8011e2c:	6838      	ldr	r0, [r7, #0]
 8011e2e:	f7f9 ff5c 	bl	800bcea <lwip_htonl>
 8011e32:	4603      	mov	r3, r0
 8011e34:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011e36:	7dfb      	ldrb	r3, [r7, #23]
 8011e38:	089b      	lsrs	r3, r3, #2
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	3305      	adds	r3, #5
 8011e40:	b29b      	uxth	r3, r3
 8011e42:	031b      	lsls	r3, r3, #12
 8011e44:	b29a      	uxth	r2, r3
 8011e46:	79fb      	ldrb	r3, [r7, #7]
 8011e48:	b29b      	uxth	r3, r3
 8011e4a:	4313      	orrs	r3, r2
 8011e4c:	b29a      	uxth	r2, r3
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	68dc      	ldr	r4, [r3, #12]
 8011e52:	4610      	mov	r0, r2
 8011e54:	f7f9 ff34 	bl	800bcc0 <lwip_htons>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	68db      	ldr	r3, [r3, #12]
 8011e60:	2200      	movs	r2, #0
 8011e62:	749a      	strb	r2, [r3, #18]
 8011e64:	2200      	movs	r2, #0
 8011e66:	74da      	strb	r2, [r3, #19]
  return seg;
 8011e68:	693b      	ldr	r3, [r7, #16]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	371c      	adds	r7, #28
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd90      	pop	{r4, r7, pc}
 8011e72:	bf00      	nop
 8011e74:	0801b9ec 	.word	0x0801b9ec
 8011e78:	0801ba20 	.word	0x0801ba20
 8011e7c:	0801ba40 	.word	0x0801ba40
 8011e80:	0801ba68 	.word	0x0801ba68
 8011e84:	0801ba8c 	.word	0x0801ba8c

08011e88 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	607b      	str	r3, [r7, #4]
 8011e90:	4603      	mov	r3, r0
 8011e92:	73fb      	strb	r3, [r7, #15]
 8011e94:	460b      	mov	r3, r1
 8011e96:	81bb      	strh	r3, [r7, #12]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011e9c:	89bb      	ldrh	r3, [r7, #12]
 8011e9e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d105      	bne.n	8011eb2 <tcp_pbuf_prealloc+0x2a>
 8011ea6:	4b30      	ldr	r3, [pc, #192]	; (8011f68 <tcp_pbuf_prealloc+0xe0>)
 8011ea8:	22e8      	movs	r2, #232	; 0xe8
 8011eaa:	4930      	ldr	r1, [pc, #192]	; (8011f6c <tcp_pbuf_prealloc+0xe4>)
 8011eac:	4830      	ldr	r0, [pc, #192]	; (8011f70 <tcp_pbuf_prealloc+0xe8>)
 8011eae:	f007 f885 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011eb2:	6a3b      	ldr	r3, [r7, #32]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d105      	bne.n	8011ec4 <tcp_pbuf_prealloc+0x3c>
 8011eb8:	4b2b      	ldr	r3, [pc, #172]	; (8011f68 <tcp_pbuf_prealloc+0xe0>)
 8011eba:	22e9      	movs	r2, #233	; 0xe9
 8011ebc:	492d      	ldr	r1, [pc, #180]	; (8011f74 <tcp_pbuf_prealloc+0xec>)
 8011ebe:	482c      	ldr	r0, [pc, #176]	; (8011f70 <tcp_pbuf_prealloc+0xe8>)
 8011ec0:	f007 f87c 	bl	8018fbc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011ec4:	89ba      	ldrh	r2, [r7, #12]
 8011ec6:	897b      	ldrh	r3, [r7, #10]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d221      	bcs.n	8011f10 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ecc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011ed0:	f003 0302 	and.w	r3, r3, #2
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d111      	bne.n	8011efc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011ed8:	6a3b      	ldr	r3, [r7, #32]
 8011eda:	8b5b      	ldrh	r3, [r3, #26]
 8011edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d115      	bne.n	8011f10 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011ee4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d007      	beq.n	8011efc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011eec:	6a3b      	ldr	r3, [r7, #32]
 8011eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d103      	bne.n	8011efc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011ef4:	6a3b      	ldr	r3, [r7, #32]
 8011ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d009      	beq.n	8011f10 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011efc:	89bb      	ldrh	r3, [r7, #12]
 8011efe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011f02:	f023 0203 	bic.w	r2, r3, #3
 8011f06:	897b      	ldrh	r3, [r7, #10]
 8011f08:	4293      	cmp	r3, r2
 8011f0a:	bf28      	it	cs
 8011f0c:	4613      	movcs	r3, r2
 8011f0e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011f10:	8af9      	ldrh	r1, [r7, #22]
 8011f12:	7bfb      	ldrb	r3, [r7, #15]
 8011f14:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7fb f821 	bl	800cf60 <pbuf_alloc>
 8011f1e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d101      	bne.n	8011f2a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011f26:	2300      	movs	r3, #0
 8011f28:	e019      	b.n	8011f5e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	681b      	ldr	r3, [r3, #0]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d006      	beq.n	8011f40 <tcp_pbuf_prealloc+0xb8>
 8011f32:	4b0d      	ldr	r3, [pc, #52]	; (8011f68 <tcp_pbuf_prealloc+0xe0>)
 8011f34:	f240 120b 	movw	r2, #267	; 0x10b
 8011f38:	490f      	ldr	r1, [pc, #60]	; (8011f78 <tcp_pbuf_prealloc+0xf0>)
 8011f3a:	480d      	ldr	r0, [pc, #52]	; (8011f70 <tcp_pbuf_prealloc+0xe8>)
 8011f3c:	f007 f83e 	bl	8018fbc <iprintf>
  *oversize = p->len - length;
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	895a      	ldrh	r2, [r3, #10]
 8011f44:	89bb      	ldrh	r3, [r7, #12]
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011f4e:	693b      	ldr	r3, [r7, #16]
 8011f50:	89ba      	ldrh	r2, [r7, #12]
 8011f52:	811a      	strh	r2, [r3, #8]
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	891a      	ldrh	r2, [r3, #8]
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	815a      	strh	r2, [r3, #10]
  return p;
 8011f5c:	693b      	ldr	r3, [r7, #16]
}
 8011f5e:	4618      	mov	r0, r3
 8011f60:	3718      	adds	r7, #24
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	0801b9ec 	.word	0x0801b9ec
 8011f6c:	0801baa4 	.word	0x0801baa4
 8011f70:	0801ba40 	.word	0x0801ba40
 8011f74:	0801bac8 	.word	0x0801bac8
 8011f78:	0801bae8 	.word	0x0801bae8

08011f7c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011f7c:	b580      	push	{r7, lr}
 8011f7e:	b082      	sub	sp, #8
 8011f80:	af00      	add	r7, sp, #0
 8011f82:	6078      	str	r0, [r7, #4]
 8011f84:	460b      	mov	r3, r1
 8011f86:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d106      	bne.n	8011f9c <tcp_write_checks+0x20>
 8011f8e:	4b33      	ldr	r3, [pc, #204]	; (801205c <tcp_write_checks+0xe0>)
 8011f90:	f240 1233 	movw	r2, #307	; 0x133
 8011f94:	4932      	ldr	r1, [pc, #200]	; (8012060 <tcp_write_checks+0xe4>)
 8011f96:	4833      	ldr	r0, [pc, #204]	; (8012064 <tcp_write_checks+0xe8>)
 8011f98:	f007 f810 	bl	8018fbc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	7d1b      	ldrb	r3, [r3, #20]
 8011fa0:	2b04      	cmp	r3, #4
 8011fa2:	d00e      	beq.n	8011fc2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011fa8:	2b07      	cmp	r3, #7
 8011faa:	d00a      	beq.n	8011fc2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011fb0:	2b02      	cmp	r3, #2
 8011fb2:	d006      	beq.n	8011fc2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011fb8:	2b03      	cmp	r3, #3
 8011fba:	d002      	beq.n	8011fc2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011fbc:	f06f 030a 	mvn.w	r3, #10
 8011fc0:	e048      	b.n	8012054 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011fc2:	887b      	ldrh	r3, [r7, #2]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d101      	bne.n	8011fcc <tcp_write_checks+0x50>
    return ERR_OK;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	e043      	b.n	8012054 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011fd2:	887a      	ldrh	r2, [r7, #2]
 8011fd4:	429a      	cmp	r2, r3
 8011fd6:	d909      	bls.n	8011fec <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	8b5b      	ldrh	r3, [r3, #26]
 8011fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fe0:	b29a      	uxth	r2, r3
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fea:	e033      	b.n	8012054 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ff2:	2b08      	cmp	r3, #8
 8011ff4:	d909      	bls.n	801200a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	8b5b      	ldrh	r3, [r3, #26]
 8011ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ffe:	b29a      	uxth	r2, r3
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8012004:	f04f 33ff 	mov.w	r3, #4294967295
 8012008:	e024      	b.n	8012054 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00f      	beq.n	8012034 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012018:	2b00      	cmp	r3, #0
 801201a:	d11a      	bne.n	8012052 <tcp_write_checks+0xd6>
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012020:	2b00      	cmp	r3, #0
 8012022:	d116      	bne.n	8012052 <tcp_write_checks+0xd6>
 8012024:	4b0d      	ldr	r3, [pc, #52]	; (801205c <tcp_write_checks+0xe0>)
 8012026:	f240 1255 	movw	r2, #341	; 0x155
 801202a:	490f      	ldr	r1, [pc, #60]	; (8012068 <tcp_write_checks+0xec>)
 801202c:	480d      	ldr	r0, [pc, #52]	; (8012064 <tcp_write_checks+0xe8>)
 801202e:	f006 ffc5 	bl	8018fbc <iprintf>
 8012032:	e00e      	b.n	8012052 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012038:	2b00      	cmp	r3, #0
 801203a:	d103      	bne.n	8012044 <tcp_write_checks+0xc8>
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	2b00      	cmp	r3, #0
 8012042:	d006      	beq.n	8012052 <tcp_write_checks+0xd6>
 8012044:	4b05      	ldr	r3, [pc, #20]	; (801205c <tcp_write_checks+0xe0>)
 8012046:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801204a:	4908      	ldr	r1, [pc, #32]	; (801206c <tcp_write_checks+0xf0>)
 801204c:	4805      	ldr	r0, [pc, #20]	; (8012064 <tcp_write_checks+0xe8>)
 801204e:	f006 ffb5 	bl	8018fbc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012052:	2300      	movs	r3, #0
}
 8012054:	4618      	mov	r0, r3
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	0801b9ec 	.word	0x0801b9ec
 8012060:	0801bafc 	.word	0x0801bafc
 8012064:	0801ba40 	.word	0x0801ba40
 8012068:	0801bb1c 	.word	0x0801bb1c
 801206c:	0801bb58 	.word	0x0801bb58

08012070 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012070:	b590      	push	{r4, r7, lr}
 8012072:	b09b      	sub	sp, #108	; 0x6c
 8012074:	af04      	add	r7, sp, #16
 8012076:	60f8      	str	r0, [r7, #12]
 8012078:	60b9      	str	r1, [r7, #8]
 801207a:	4611      	mov	r1, r2
 801207c:	461a      	mov	r2, r3
 801207e:	460b      	mov	r3, r1
 8012080:	80fb      	strh	r3, [r7, #6]
 8012082:	4613      	mov	r3, r2
 8012084:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8012086:	2300      	movs	r3, #0
 8012088:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801208a:	2300      	movs	r3, #0
 801208c:	653b      	str	r3, [r7, #80]	; 0x50
 801208e:	2300      	movs	r3, #0
 8012090:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012092:	2300      	movs	r3, #0
 8012094:	64bb      	str	r3, [r7, #72]	; 0x48
 8012096:	2300      	movs	r3, #0
 8012098:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801209a:	2300      	movs	r3, #0
 801209c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80120a0:	2300      	movs	r3, #0
 80120a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80120a6:	2300      	movs	r3, #0
 80120a8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80120aa:	2300      	movs	r3, #0
 80120ac:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80120ae:	2300      	movs	r3, #0
 80120b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d109      	bne.n	80120cc <tcp_write+0x5c>
 80120b8:	4ba4      	ldr	r3, [pc, #656]	; (801234c <tcp_write+0x2dc>)
 80120ba:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80120be:	49a4      	ldr	r1, [pc, #656]	; (8012350 <tcp_write+0x2e0>)
 80120c0:	48a4      	ldr	r0, [pc, #656]	; (8012354 <tcp_write+0x2e4>)
 80120c2:	f006 ff7b 	bl	8018fbc <iprintf>
 80120c6:	f06f 030f 	mvn.w	r3, #15
 80120ca:	e32a      	b.n	8012722 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80120d2:	085b      	lsrs	r3, r3, #1
 80120d4:	b29a      	uxth	r2, r3
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120da:	4293      	cmp	r3, r2
 80120dc:	bf28      	it	cs
 80120de:	4613      	movcs	r3, r2
 80120e0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80120e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d102      	bne.n	80120ee <tcp_write+0x7e>
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120ec:	e000      	b.n	80120f0 <tcp_write+0x80>
 80120ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80120f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d109      	bne.n	801210c <tcp_write+0x9c>
 80120f8:	4b94      	ldr	r3, [pc, #592]	; (801234c <tcp_write+0x2dc>)
 80120fa:	f240 12ad 	movw	r2, #429	; 0x1ad
 80120fe:	4996      	ldr	r1, [pc, #600]	; (8012358 <tcp_write+0x2e8>)
 8012100:	4894      	ldr	r0, [pc, #592]	; (8012354 <tcp_write+0x2e4>)
 8012102:	f006 ff5b 	bl	8018fbc <iprintf>
 8012106:	f06f 030f 	mvn.w	r3, #15
 801210a:	e30a      	b.n	8012722 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801210c:	88fb      	ldrh	r3, [r7, #6]
 801210e:	4619      	mov	r1, r3
 8012110:	68f8      	ldr	r0, [r7, #12]
 8012112:	f7ff ff33 	bl	8011f7c <tcp_write_checks>
 8012116:	4603      	mov	r3, r0
 8012118:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801211c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012120:	2b00      	cmp	r3, #0
 8012122:	d002      	beq.n	801212a <tcp_write+0xba>
    return err;
 8012124:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8012128:	e2fb      	b.n	8012722 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012130:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012134:	2300      	movs	r3, #0
 8012136:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801213e:	2b00      	cmp	r3, #0
 8012140:	f000 80f6 	beq.w	8012330 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012148:	653b      	str	r3, [r7, #80]	; 0x50
 801214a:	e002      	b.n	8012152 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801214c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d1f8      	bne.n	801214c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801215a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801215c:	7a9b      	ldrb	r3, [r3, #10]
 801215e:	009b      	lsls	r3, r3, #2
 8012160:	b29b      	uxth	r3, r3
 8012162:	f003 0304 	and.w	r3, r3, #4
 8012166:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8012168:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801216a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801216c:	891b      	ldrh	r3, [r3, #8]
 801216e:	4619      	mov	r1, r3
 8012170:	8c3b      	ldrh	r3, [r7, #32]
 8012172:	440b      	add	r3, r1
 8012174:	429a      	cmp	r2, r3
 8012176:	da06      	bge.n	8012186 <tcp_write+0x116>
 8012178:	4b74      	ldr	r3, [pc, #464]	; (801234c <tcp_write+0x2dc>)
 801217a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801217e:	4977      	ldr	r1, [pc, #476]	; (801235c <tcp_write+0x2ec>)
 8012180:	4874      	ldr	r0, [pc, #464]	; (8012354 <tcp_write+0x2e4>)
 8012182:	f006 ff1b 	bl	8018fbc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8012186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012188:	891a      	ldrh	r2, [r3, #8]
 801218a:	8c3b      	ldrh	r3, [r7, #32]
 801218c:	4413      	add	r3, r2
 801218e:	b29b      	uxth	r3, r3
 8012190:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012192:	1ad3      	subs	r3, r2, r3
 8012194:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801219c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801219e:	8a7b      	ldrh	r3, [r7, #18]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d026      	beq.n	80121f2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80121a4:	8a7b      	ldrh	r3, [r7, #18]
 80121a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d206      	bcs.n	80121ba <tcp_write+0x14a>
 80121ac:	4b67      	ldr	r3, [pc, #412]	; (801234c <tcp_write+0x2dc>)
 80121ae:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80121b2:	496b      	ldr	r1, [pc, #428]	; (8012360 <tcp_write+0x2f0>)
 80121b4:	4867      	ldr	r0, [pc, #412]	; (8012354 <tcp_write+0x2e4>)
 80121b6:	f006 ff01 	bl	8018fbc <iprintf>
      seg = last_unsent;
 80121ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80121bc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80121be:	8a7b      	ldrh	r3, [r7, #18]
 80121c0:	88fa      	ldrh	r2, [r7, #6]
 80121c2:	4293      	cmp	r3, r2
 80121c4:	bf28      	it	cs
 80121c6:	4613      	movcs	r3, r2
 80121c8:	b29b      	uxth	r3, r3
 80121ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80121cc:	4293      	cmp	r3, r2
 80121ce:	bf28      	it	cs
 80121d0:	4613      	movcs	r3, r2
 80121d2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80121d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121da:	4413      	add	r3, r2
 80121dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80121e0:	8a7a      	ldrh	r2, [r7, #18]
 80121e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121e4:	1ad3      	subs	r3, r2, r3
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80121ea:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80121ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80121f2:	8a7b      	ldrh	r3, [r7, #18]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00b      	beq.n	8012210 <tcp_write+0x1a0>
 80121f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80121fc:	88fb      	ldrh	r3, [r7, #6]
 80121fe:	429a      	cmp	r2, r3
 8012200:	d006      	beq.n	8012210 <tcp_write+0x1a0>
 8012202:	4b52      	ldr	r3, [pc, #328]	; (801234c <tcp_write+0x2dc>)
 8012204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012208:	4956      	ldr	r1, [pc, #344]	; (8012364 <tcp_write+0x2f4>)
 801220a:	4852      	ldr	r0, [pc, #328]	; (8012354 <tcp_write+0x2e4>)
 801220c:	f006 fed6 	bl	8018fbc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012214:	88fb      	ldrh	r3, [r7, #6]
 8012216:	429a      	cmp	r2, r3
 8012218:	f080 8167 	bcs.w	80124ea <tcp_write+0x47a>
 801221c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801221e:	2b00      	cmp	r3, #0
 8012220:	f000 8163 	beq.w	80124ea <tcp_write+0x47a>
 8012224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012226:	891b      	ldrh	r3, [r3, #8]
 8012228:	2b00      	cmp	r3, #0
 801222a:	f000 815e 	beq.w	80124ea <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801222e:	88fa      	ldrh	r2, [r7, #6]
 8012230:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012234:	1ad2      	subs	r2, r2, r3
 8012236:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012238:	4293      	cmp	r3, r2
 801223a:	bfa8      	it	ge
 801223c:	4613      	movge	r3, r2
 801223e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8012240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012242:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012244:	797b      	ldrb	r3, [r7, #5]
 8012246:	f003 0301 	and.w	r3, r3, #1
 801224a:	2b00      	cmp	r3, #0
 801224c:	d027      	beq.n	801229e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801224e:	f107 0012 	add.w	r0, r7, #18
 8012252:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012254:	8bf9      	ldrh	r1, [r7, #30]
 8012256:	2301      	movs	r3, #1
 8012258:	9302      	str	r3, [sp, #8]
 801225a:	797b      	ldrb	r3, [r7, #5]
 801225c:	9301      	str	r3, [sp, #4]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	9300      	str	r3, [sp, #0]
 8012262:	4603      	mov	r3, r0
 8012264:	2000      	movs	r0, #0
 8012266:	f7ff fe0f 	bl	8011e88 <tcp_pbuf_prealloc>
 801226a:	6578      	str	r0, [r7, #84]	; 0x54
 801226c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801226e:	2b00      	cmp	r3, #0
 8012270:	f000 8225 	beq.w	80126be <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012276:	6858      	ldr	r0, [r3, #4]
 8012278:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801227c:	68ba      	ldr	r2, [r7, #8]
 801227e:	4413      	add	r3, r2
 8012280:	8bfa      	ldrh	r2, [r7, #30]
 8012282:	4619      	mov	r1, r3
 8012284:	f006 ff98 	bl	80191b8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012288:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801228a:	f7fb f9db 	bl	800d644 <pbuf_clen>
 801228e:	4603      	mov	r3, r0
 8012290:	461a      	mov	r2, r3
 8012292:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012296:	4413      	add	r3, r2
 8012298:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801229c:	e041      	b.n	8012322 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801229e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	637b      	str	r3, [r7, #52]	; 0x34
 80122a4:	e002      	b.n	80122ac <tcp_write+0x23c>
 80122a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	637b      	str	r3, [r7, #52]	; 0x34
 80122ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d1f8      	bne.n	80122a6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80122b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b6:	7b1b      	ldrb	r3, [r3, #12]
 80122b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d115      	bne.n	80122ec <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80122c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122c2:	685b      	ldr	r3, [r3, #4]
 80122c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122c6:	8952      	ldrh	r2, [r2, #10]
 80122c8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80122ca:	68ba      	ldr	r2, [r7, #8]
 80122cc:	429a      	cmp	r2, r3
 80122ce:	d10d      	bne.n	80122ec <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80122d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d006      	beq.n	80122e6 <tcp_write+0x276>
 80122d8:	4b1c      	ldr	r3, [pc, #112]	; (801234c <tcp_write+0x2dc>)
 80122da:	f240 2231 	movw	r2, #561	; 0x231
 80122de:	4922      	ldr	r1, [pc, #136]	; (8012368 <tcp_write+0x2f8>)
 80122e0:	481c      	ldr	r0, [pc, #112]	; (8012354 <tcp_write+0x2e4>)
 80122e2:	f006 fe6b 	bl	8018fbc <iprintf>
          extendlen = seglen;
 80122e6:	8bfb      	ldrh	r3, [r7, #30]
 80122e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80122ea:	e01a      	b.n	8012322 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80122ec:	8bfb      	ldrh	r3, [r7, #30]
 80122ee:	2201      	movs	r2, #1
 80122f0:	4619      	mov	r1, r3
 80122f2:	2000      	movs	r0, #0
 80122f4:	f7fa fe34 	bl	800cf60 <pbuf_alloc>
 80122f8:	6578      	str	r0, [r7, #84]	; 0x54
 80122fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	f000 81e0 	beq.w	80126c2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8012302:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012306:	68ba      	ldr	r2, [r7, #8]
 8012308:	441a      	add	r2, r3
 801230a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801230c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801230e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012310:	f7fb f998 	bl	800d644 <pbuf_clen>
 8012314:	4603      	mov	r3, r0
 8012316:	461a      	mov	r2, r3
 8012318:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801231c:	4413      	add	r3, r2
 801231e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8012322:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012326:	8bfb      	ldrh	r3, [r7, #30]
 8012328:	4413      	add	r3, r2
 801232a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801232e:	e0dc      	b.n	80124ea <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012336:	2b00      	cmp	r3, #0
 8012338:	f000 80d7 	beq.w	80124ea <tcp_write+0x47a>
 801233c:	4b03      	ldr	r3, [pc, #12]	; (801234c <tcp_write+0x2dc>)
 801233e:	f240 224a 	movw	r2, #586	; 0x24a
 8012342:	490a      	ldr	r1, [pc, #40]	; (801236c <tcp_write+0x2fc>)
 8012344:	4803      	ldr	r0, [pc, #12]	; (8012354 <tcp_write+0x2e4>)
 8012346:	f006 fe39 	bl	8018fbc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801234a:	e0ce      	b.n	80124ea <tcp_write+0x47a>
 801234c:	0801b9ec 	.word	0x0801b9ec
 8012350:	0801bb8c 	.word	0x0801bb8c
 8012354:	0801ba40 	.word	0x0801ba40
 8012358:	0801bba4 	.word	0x0801bba4
 801235c:	0801bbd8 	.word	0x0801bbd8
 8012360:	0801bbf0 	.word	0x0801bbf0
 8012364:	0801bc10 	.word	0x0801bc10
 8012368:	0801bc30 	.word	0x0801bc30
 801236c:	0801bc5c 	.word	0x0801bc5c
    struct pbuf *p;
    u16_t left = len - pos;
 8012370:	88fa      	ldrh	r2, [r7, #6]
 8012372:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012376:	1ad3      	subs	r3, r2, r3
 8012378:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801237a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801237e:	b29b      	uxth	r3, r3
 8012380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8012382:	1ad3      	subs	r3, r2, r3
 8012384:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8012386:	8b7a      	ldrh	r2, [r7, #26]
 8012388:	8bbb      	ldrh	r3, [r7, #28]
 801238a:	4293      	cmp	r3, r2
 801238c:	bf28      	it	cs
 801238e:	4613      	movcs	r3, r2
 8012390:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012392:	797b      	ldrb	r3, [r7, #5]
 8012394:	f003 0301 	and.w	r3, r3, #1
 8012398:	2b00      	cmp	r3, #0
 801239a:	d036      	beq.n	801240a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801239c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	8b3b      	ldrh	r3, [r7, #24]
 80123a4:	4413      	add	r3, r2
 80123a6:	b299      	uxth	r1, r3
 80123a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	bf0c      	ite	eq
 80123ae:	2301      	moveq	r3, #1
 80123b0:	2300      	movne	r3, #0
 80123b2:	b2db      	uxtb	r3, r3
 80123b4:	f107 0012 	add.w	r0, r7, #18
 80123b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80123ba:	9302      	str	r3, [sp, #8]
 80123bc:	797b      	ldrb	r3, [r7, #5]
 80123be:	9301      	str	r3, [sp, #4]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	9300      	str	r3, [sp, #0]
 80123c4:	4603      	mov	r3, r0
 80123c6:	2036      	movs	r0, #54	; 0x36
 80123c8:	f7ff fd5e 	bl	8011e88 <tcp_pbuf_prealloc>
 80123cc:	6338      	str	r0, [r7, #48]	; 0x30
 80123ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	f000 8178 	beq.w	80126c6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80123d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123d8:	895b      	ldrh	r3, [r3, #10]
 80123da:	8b3a      	ldrh	r2, [r7, #24]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d906      	bls.n	80123ee <tcp_write+0x37e>
 80123e0:	4b8c      	ldr	r3, [pc, #560]	; (8012614 <tcp_write+0x5a4>)
 80123e2:	f240 2266 	movw	r2, #614	; 0x266
 80123e6:	498c      	ldr	r1, [pc, #560]	; (8012618 <tcp_write+0x5a8>)
 80123e8:	488c      	ldr	r0, [pc, #560]	; (801261c <tcp_write+0x5ac>)
 80123ea:	f006 fde7 	bl	8018fbc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80123ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f0:	685a      	ldr	r2, [r3, #4]
 80123f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80123f6:	18d0      	adds	r0, r2, r3
 80123f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80123fc:	68ba      	ldr	r2, [r7, #8]
 80123fe:	4413      	add	r3, r2
 8012400:	8b3a      	ldrh	r2, [r7, #24]
 8012402:	4619      	mov	r1, r3
 8012404:	f006 fed8 	bl	80191b8 <memcpy>
 8012408:	e02f      	b.n	801246a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801240a:	8a7b      	ldrh	r3, [r7, #18]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d006      	beq.n	801241e <tcp_write+0x3ae>
 8012410:	4b80      	ldr	r3, [pc, #512]	; (8012614 <tcp_write+0x5a4>)
 8012412:	f240 2271 	movw	r2, #625	; 0x271
 8012416:	4982      	ldr	r1, [pc, #520]	; (8012620 <tcp_write+0x5b0>)
 8012418:	4880      	ldr	r0, [pc, #512]	; (801261c <tcp_write+0x5ac>)
 801241a:	f006 fdcf 	bl	8018fbc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801241e:	8b3b      	ldrh	r3, [r7, #24]
 8012420:	2201      	movs	r2, #1
 8012422:	4619      	mov	r1, r3
 8012424:	2036      	movs	r0, #54	; 0x36
 8012426:	f7fa fd9b 	bl	800cf60 <pbuf_alloc>
 801242a:	6178      	str	r0, [r7, #20]
 801242c:	697b      	ldr	r3, [r7, #20]
 801242e:	2b00      	cmp	r3, #0
 8012430:	f000 814b 	beq.w	80126ca <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012434:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012438:	68ba      	ldr	r2, [r7, #8]
 801243a:	441a      	add	r2, r3
 801243c:	697b      	ldr	r3, [r7, #20]
 801243e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012440:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012444:	b29b      	uxth	r3, r3
 8012446:	f44f 7220 	mov.w	r2, #640	; 0x280
 801244a:	4619      	mov	r1, r3
 801244c:	2036      	movs	r0, #54	; 0x36
 801244e:	f7fa fd87 	bl	800cf60 <pbuf_alloc>
 8012452:	6338      	str	r0, [r7, #48]	; 0x30
 8012454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012456:	2b00      	cmp	r3, #0
 8012458:	d103      	bne.n	8012462 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801245a:	6978      	ldr	r0, [r7, #20]
 801245c:	f7fb f864 	bl	800d528 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8012460:	e136      	b.n	80126d0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012462:	6979      	ldr	r1, [r7, #20]
 8012464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012466:	f7fb f92d 	bl	800d6c4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801246a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801246c:	f7fb f8ea 	bl	800d644 <pbuf_clen>
 8012470:	4603      	mov	r3, r0
 8012472:	461a      	mov	r2, r3
 8012474:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012478:	4413      	add	r3, r2
 801247a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801247e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012482:	2b09      	cmp	r3, #9
 8012484:	d903      	bls.n	801248e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012486:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012488:	f7fb f84e 	bl	800d528 <pbuf_free>
      goto memerr;
 801248c:	e120      	b.n	80126d0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012492:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012496:	441a      	add	r2, r3
 8012498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801249c:	9300      	str	r3, [sp, #0]
 801249e:	4613      	mov	r3, r2
 80124a0:	2200      	movs	r2, #0
 80124a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124a4:	68f8      	ldr	r0, [r7, #12]
 80124a6:	f7ff fc51 	bl	8011d4c <tcp_create_segment>
 80124aa:	64f8      	str	r0, [r7, #76]	; 0x4c
 80124ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	f000 810d 	beq.w	80126ce <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80124b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d102      	bne.n	80124c0 <tcp_write+0x450>
      queue = seg;
 80124ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124bc:	647b      	str	r3, [r7, #68]	; 0x44
 80124be:	e00c      	b.n	80124da <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80124c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d106      	bne.n	80124d4 <tcp_write+0x464>
 80124c6:	4b53      	ldr	r3, [pc, #332]	; (8012614 <tcp_write+0x5a4>)
 80124c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80124cc:	4955      	ldr	r1, [pc, #340]	; (8012624 <tcp_write+0x5b4>)
 80124ce:	4853      	ldr	r0, [pc, #332]	; (801261c <tcp_write+0x5ac>)
 80124d0:	f006 fd74 	bl	8018fbc <iprintf>
      prev_seg->next = seg;
 80124d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80124d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80124d8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80124da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124dc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80124de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124e2:	8b3b      	ldrh	r3, [r7, #24]
 80124e4:	4413      	add	r3, r2
 80124e6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80124ea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80124ee:	88fb      	ldrh	r3, [r7, #6]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	f4ff af3d 	bcc.w	8012370 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80124f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d02c      	beq.n	8012556 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80124fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012502:	e01e      	b.n	8012542 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012506:	891a      	ldrh	r2, [r3, #8]
 8012508:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801250a:	4413      	add	r3, r2
 801250c:	b29a      	uxth	r2, r3
 801250e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012510:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d110      	bne.n	801253c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801251a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012520:	8952      	ldrh	r2, [r2, #10]
 8012522:	4413      	add	r3, r2
 8012524:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012526:	68b9      	ldr	r1, [r7, #8]
 8012528:	4618      	mov	r0, r3
 801252a:	f006 fe45 	bl	80191b8 <memcpy>
        p->len += oversize_used;
 801252e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012530:	895a      	ldrh	r2, [r3, #10]
 8012532:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012534:	4413      	add	r3, r2
 8012536:	b29a      	uxth	r2, r3
 8012538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012544:	2b00      	cmp	r3, #0
 8012546:	d1dd      	bne.n	8012504 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801254a:	891a      	ldrh	r2, [r3, #8]
 801254c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801254e:	4413      	add	r3, r2
 8012550:	b29a      	uxth	r2, r3
 8012552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012554:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012556:	8a7a      	ldrh	r2, [r7, #18]
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012560:	2b00      	cmp	r3, #0
 8012562:	d018      	beq.n	8012596 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012564:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012566:	2b00      	cmp	r3, #0
 8012568:	d106      	bne.n	8012578 <tcp_write+0x508>
 801256a:	4b2a      	ldr	r3, [pc, #168]	; (8012614 <tcp_write+0x5a4>)
 801256c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8012570:	492d      	ldr	r1, [pc, #180]	; (8012628 <tcp_write+0x5b8>)
 8012572:	482a      	ldr	r0, [pc, #168]	; (801261c <tcp_write+0x5ac>)
 8012574:	f006 fd22 	bl	8018fbc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801257a:	685b      	ldr	r3, [r3, #4]
 801257c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801257e:	4618      	mov	r0, r3
 8012580:	f7fb f8a0 	bl	800d6c4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012586:	891a      	ldrh	r2, [r3, #8]
 8012588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801258a:	891b      	ldrh	r3, [r3, #8]
 801258c:	4413      	add	r3, r2
 801258e:	b29a      	uxth	r2, r3
 8012590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012592:	811a      	strh	r2, [r3, #8]
 8012594:	e037      	b.n	8012606 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8012596:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012598:	2b00      	cmp	r3, #0
 801259a:	d034      	beq.n	8012606 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801259c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d003      	beq.n	80125aa <tcp_write+0x53a>
 80125a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <tcp_write+0x548>
 80125aa:	4b1a      	ldr	r3, [pc, #104]	; (8012614 <tcp_write+0x5a4>)
 80125ac:	f240 22e6 	movw	r2, #742	; 0x2e6
 80125b0:	491e      	ldr	r1, [pc, #120]	; (801262c <tcp_write+0x5bc>)
 80125b2:	481a      	ldr	r0, [pc, #104]	; (801261c <tcp_write+0x5ac>)
 80125b4:	f006 fd02 	bl	8018fbc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80125b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125ba:	685b      	ldr	r3, [r3, #4]
 80125bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80125be:	e009      	b.n	80125d4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80125c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c2:	891a      	ldrh	r2, [r3, #8]
 80125c4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125c6:	4413      	add	r3, r2
 80125c8:	b29a      	uxth	r2, r3
 80125ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125cc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80125ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80125d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d1f1      	bne.n	80125c0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80125dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125de:	891a      	ldrh	r2, [r3, #8]
 80125e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125e2:	4413      	add	r3, r2
 80125e4:	b29a      	uxth	r2, r3
 80125e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125e8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80125ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125ec:	895a      	ldrh	r2, [r3, #10]
 80125ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125f0:	4413      	add	r3, r2
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125f6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80125f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125fa:	891a      	ldrh	r2, [r3, #8]
 80125fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80125fe:	4413      	add	r3, r2
 8012600:	b29a      	uxth	r2, r3
 8012602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012604:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012608:	2b00      	cmp	r3, #0
 801260a:	d111      	bne.n	8012630 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012610:	66da      	str	r2, [r3, #108]	; 0x6c
 8012612:	e010      	b.n	8012636 <tcp_write+0x5c6>
 8012614:	0801b9ec 	.word	0x0801b9ec
 8012618:	0801bc8c 	.word	0x0801bc8c
 801261c:	0801ba40 	.word	0x0801ba40
 8012620:	0801bccc 	.word	0x0801bccc
 8012624:	0801bcdc 	.word	0x0801bcdc
 8012628:	0801bcf0 	.word	0x0801bcf0
 801262c:	0801bd28 	.word	0x0801bd28
  } else {
    last_unsent->next = queue;
 8012630:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012632:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012634:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801263a:	88fb      	ldrh	r3, [r7, #6]
 801263c:	441a      	add	r2, r3
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8012642:	68fb      	ldr	r3, [r7, #12]
 8012644:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012648:	88fb      	ldrh	r3, [r7, #6]
 801264a:	1ad3      	subs	r3, r2, r3
 801264c:	b29a      	uxth	r2, r3
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801265a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012664:	2b00      	cmp	r3, #0
 8012666:	d00e      	beq.n	8012686 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801266c:	2b00      	cmp	r3, #0
 801266e:	d10a      	bne.n	8012686 <tcp_write+0x616>
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012674:	2b00      	cmp	r3, #0
 8012676:	d106      	bne.n	8012686 <tcp_write+0x616>
 8012678:	4b2c      	ldr	r3, [pc, #176]	; (801272c <tcp_write+0x6bc>)
 801267a:	f240 3212 	movw	r2, #786	; 0x312
 801267e:	492c      	ldr	r1, [pc, #176]	; (8012730 <tcp_write+0x6c0>)
 8012680:	482c      	ldr	r0, [pc, #176]	; (8012734 <tcp_write+0x6c4>)
 8012682:	f006 fc9b 	bl	8018fbc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012686:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012688:	2b00      	cmp	r3, #0
 801268a:	d016      	beq.n	80126ba <tcp_write+0x64a>
 801268c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801268e:	68db      	ldr	r3, [r3, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d012      	beq.n	80126ba <tcp_write+0x64a>
 8012694:	797b      	ldrb	r3, [r7, #5]
 8012696:	f003 0302 	and.w	r3, r3, #2
 801269a:	2b00      	cmp	r3, #0
 801269c:	d10d      	bne.n	80126ba <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801269e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126a0:	68db      	ldr	r3, [r3, #12]
 80126a2:	899b      	ldrh	r3, [r3, #12]
 80126a4:	b29c      	uxth	r4, r3
 80126a6:	2008      	movs	r0, #8
 80126a8:	f7f9 fb0a 	bl	800bcc0 <lwip_htons>
 80126ac:	4603      	mov	r3, r0
 80126ae:	461a      	mov	r2, r3
 80126b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b2:	68db      	ldr	r3, [r3, #12]
 80126b4:	4322      	orrs	r2, r4
 80126b6:	b292      	uxth	r2, r2
 80126b8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80126ba:	2300      	movs	r3, #0
 80126bc:	e031      	b.n	8012722 <tcp_write+0x6b2>
          goto memerr;
 80126be:	bf00      	nop
 80126c0:	e006      	b.n	80126d0 <tcp_write+0x660>
            goto memerr;
 80126c2:	bf00      	nop
 80126c4:	e004      	b.n	80126d0 <tcp_write+0x660>
        goto memerr;
 80126c6:	bf00      	nop
 80126c8:	e002      	b.n	80126d0 <tcp_write+0x660>
        goto memerr;
 80126ca:	bf00      	nop
 80126cc:	e000      	b.n	80126d0 <tcp_write+0x660>
      goto memerr;
 80126ce:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	8b5b      	ldrh	r3, [r3, #26]
 80126d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126d8:	b29a      	uxth	r2, r3
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80126de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d002      	beq.n	80126ea <tcp_write+0x67a>
    pbuf_free(concat_p);
 80126e4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80126e6:	f7fa ff1f 	bl	800d528 <pbuf_free>
  }
  if (queue != NULL) {
 80126ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d002      	beq.n	80126f6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80126f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80126f2:	f7fc fb4d 	bl	800ed90 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80126f6:	68fb      	ldr	r3, [r7, #12]
 80126f8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00e      	beq.n	801271e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012704:	2b00      	cmp	r3, #0
 8012706:	d10a      	bne.n	801271e <tcp_write+0x6ae>
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801270c:	2b00      	cmp	r3, #0
 801270e:	d106      	bne.n	801271e <tcp_write+0x6ae>
 8012710:	4b06      	ldr	r3, [pc, #24]	; (801272c <tcp_write+0x6bc>)
 8012712:	f240 3227 	movw	r2, #807	; 0x327
 8012716:	4906      	ldr	r1, [pc, #24]	; (8012730 <tcp_write+0x6c0>)
 8012718:	4806      	ldr	r0, [pc, #24]	; (8012734 <tcp_write+0x6c4>)
 801271a:	f006 fc4f 	bl	8018fbc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801271e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012722:	4618      	mov	r0, r3
 8012724:	375c      	adds	r7, #92	; 0x5c
 8012726:	46bd      	mov	sp, r7
 8012728:	bd90      	pop	{r4, r7, pc}
 801272a:	bf00      	nop
 801272c:	0801b9ec 	.word	0x0801b9ec
 8012730:	0801bd60 	.word	0x0801bd60
 8012734:	0801ba40 	.word	0x0801ba40

08012738 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012738:	b590      	push	{r4, r7, lr}
 801273a:	b08b      	sub	sp, #44	; 0x2c
 801273c:	af02      	add	r7, sp, #8
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	460b      	mov	r3, r1
 8012742:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012744:	2300      	movs	r3, #0
 8012746:	61fb      	str	r3, [r7, #28]
 8012748:	2300      	movs	r3, #0
 801274a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801274c:	2300      	movs	r3, #0
 801274e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d106      	bne.n	8012764 <tcp_split_unsent_seg+0x2c>
 8012756:	4b95      	ldr	r3, [pc, #596]	; (80129ac <tcp_split_unsent_seg+0x274>)
 8012758:	f240 324b 	movw	r2, #843	; 0x34b
 801275c:	4994      	ldr	r1, [pc, #592]	; (80129b0 <tcp_split_unsent_seg+0x278>)
 801275e:	4895      	ldr	r0, [pc, #596]	; (80129b4 <tcp_split_unsent_seg+0x27c>)
 8012760:	f006 fc2c 	bl	8018fbc <iprintf>

  useg = pcb->unsent;
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012768:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d102      	bne.n	8012776 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8012770:	f04f 33ff 	mov.w	r3, #4294967295
 8012774:	e116      	b.n	80129a4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012776:	887b      	ldrh	r3, [r7, #2]
 8012778:	2b00      	cmp	r3, #0
 801277a:	d109      	bne.n	8012790 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801277c:	4b8b      	ldr	r3, [pc, #556]	; (80129ac <tcp_split_unsent_seg+0x274>)
 801277e:	f240 3253 	movw	r2, #851	; 0x353
 8012782:	498d      	ldr	r1, [pc, #564]	; (80129b8 <tcp_split_unsent_seg+0x280>)
 8012784:	488b      	ldr	r0, [pc, #556]	; (80129b4 <tcp_split_unsent_seg+0x27c>)
 8012786:	f006 fc19 	bl	8018fbc <iprintf>
    return ERR_VAL;
 801278a:	f06f 0305 	mvn.w	r3, #5
 801278e:	e109      	b.n	80129a4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	891b      	ldrh	r3, [r3, #8]
 8012794:	887a      	ldrh	r2, [r7, #2]
 8012796:	429a      	cmp	r2, r3
 8012798:	d301      	bcc.n	801279e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801279a:	2300      	movs	r3, #0
 801279c:	e102      	b.n	80129a4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80127a2:	887a      	ldrh	r2, [r7, #2]
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d906      	bls.n	80127b6 <tcp_split_unsent_seg+0x7e>
 80127a8:	4b80      	ldr	r3, [pc, #512]	; (80129ac <tcp_split_unsent_seg+0x274>)
 80127aa:	f240 325b 	movw	r2, #859	; 0x35b
 80127ae:	4983      	ldr	r1, [pc, #524]	; (80129bc <tcp_split_unsent_seg+0x284>)
 80127b0:	4880      	ldr	r0, [pc, #512]	; (80129b4 <tcp_split_unsent_seg+0x27c>)
 80127b2:	f006 fc03 	bl	8018fbc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	891b      	ldrh	r3, [r3, #8]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d106      	bne.n	80127cc <tcp_split_unsent_seg+0x94>
 80127be:	4b7b      	ldr	r3, [pc, #492]	; (80129ac <tcp_split_unsent_seg+0x274>)
 80127c0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80127c4:	497e      	ldr	r1, [pc, #504]	; (80129c0 <tcp_split_unsent_seg+0x288>)
 80127c6:	487b      	ldr	r0, [pc, #492]	; (80129b4 <tcp_split_unsent_seg+0x27c>)
 80127c8:	f006 fbf8 	bl	8018fbc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	7a9b      	ldrb	r3, [r3, #10]
 80127d0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80127d2:	7bfb      	ldrb	r3, [r7, #15]
 80127d4:	009b      	lsls	r3, r3, #2
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	f003 0304 	and.w	r3, r3, #4
 80127dc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	891a      	ldrh	r2, [r3, #8]
 80127e2:	887b      	ldrh	r3, [r7, #2]
 80127e4:	1ad3      	subs	r3, r2, r3
 80127e6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80127e8:	7bbb      	ldrb	r3, [r7, #14]
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	89bb      	ldrh	r3, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	b29b      	uxth	r3, r3
 80127f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80127f6:	4619      	mov	r1, r3
 80127f8:	2036      	movs	r0, #54	; 0x36
 80127fa:	f7fa fbb1 	bl	800cf60 <pbuf_alloc>
 80127fe:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012800:	693b      	ldr	r3, [r7, #16]
 8012802:	2b00      	cmp	r3, #0
 8012804:	f000 80b7 	beq.w	8012976 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012808:	697b      	ldr	r3, [r7, #20]
 801280a:	685b      	ldr	r3, [r3, #4]
 801280c:	891a      	ldrh	r2, [r3, #8]
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	891b      	ldrh	r3, [r3, #8]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	b29a      	uxth	r2, r3
 8012816:	887b      	ldrh	r3, [r7, #2]
 8012818:	4413      	add	r3, r2
 801281a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	6858      	ldr	r0, [r3, #4]
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	685a      	ldr	r2, [r3, #4]
 8012824:	7bbb      	ldrb	r3, [r7, #14]
 8012826:	18d1      	adds	r1, r2, r3
 8012828:	897b      	ldrh	r3, [r7, #10]
 801282a:	89ba      	ldrh	r2, [r7, #12]
 801282c:	f7fb f882 	bl	800d934 <pbuf_copy_partial>
 8012830:	4603      	mov	r3, r0
 8012832:	461a      	mov	r2, r3
 8012834:	89bb      	ldrh	r3, [r7, #12]
 8012836:	4293      	cmp	r3, r2
 8012838:	f040 809f 	bne.w	801297a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	68db      	ldr	r3, [r3, #12]
 8012840:	899b      	ldrh	r3, [r3, #12]
 8012842:	b29b      	uxth	r3, r3
 8012844:	4618      	mov	r0, r3
 8012846:	f7f9 fa3b 	bl	800bcc0 <lwip_htons>
 801284a:	4603      	mov	r3, r0
 801284c:	b2db      	uxtb	r3, r3
 801284e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012852:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012854:	2300      	movs	r3, #0
 8012856:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012858:	7efb      	ldrb	r3, [r7, #27]
 801285a:	f003 0308 	and.w	r3, r3, #8
 801285e:	2b00      	cmp	r3, #0
 8012860:	d007      	beq.n	8012872 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8012862:	7efb      	ldrb	r3, [r7, #27]
 8012864:	f023 0308 	bic.w	r3, r3, #8
 8012868:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801286a:	7ebb      	ldrb	r3, [r7, #26]
 801286c:	f043 0308 	orr.w	r3, r3, #8
 8012870:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012872:	7efb      	ldrb	r3, [r7, #27]
 8012874:	f003 0301 	and.w	r3, r3, #1
 8012878:	2b00      	cmp	r3, #0
 801287a:	d007      	beq.n	801288c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801287c:	7efb      	ldrb	r3, [r7, #27]
 801287e:	f023 0301 	bic.w	r3, r3, #1
 8012882:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012884:	7ebb      	ldrb	r3, [r7, #26]
 8012886:	f043 0301 	orr.w	r3, r3, #1
 801288a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801288c:	697b      	ldr	r3, [r7, #20]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	685b      	ldr	r3, [r3, #4]
 8012892:	4618      	mov	r0, r3
 8012894:	f7f9 fa29 	bl	800bcea <lwip_htonl>
 8012898:	4602      	mov	r2, r0
 801289a:	887b      	ldrh	r3, [r7, #2]
 801289c:	18d1      	adds	r1, r2, r3
 801289e:	7eba      	ldrb	r2, [r7, #26]
 80128a0:	7bfb      	ldrb	r3, [r7, #15]
 80128a2:	9300      	str	r3, [sp, #0]
 80128a4:	460b      	mov	r3, r1
 80128a6:	6939      	ldr	r1, [r7, #16]
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7ff fa4f 	bl	8011d4c <tcp_create_segment>
 80128ae:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d063      	beq.n	801297e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80128b6:	697b      	ldr	r3, [r7, #20]
 80128b8:	685b      	ldr	r3, [r3, #4]
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fa fec2 	bl	800d644 <pbuf_clen>
 80128c0:	4603      	mov	r3, r0
 80128c2:	461a      	mov	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80128ca:	1a9b      	subs	r3, r3, r2
 80128cc:	b29a      	uxth	r2, r3
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80128d4:	697b      	ldr	r3, [r7, #20]
 80128d6:	6858      	ldr	r0, [r3, #4]
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	891a      	ldrh	r2, [r3, #8]
 80128de:	89bb      	ldrh	r3, [r7, #12]
 80128e0:	1ad3      	subs	r3, r2, r3
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	4619      	mov	r1, r3
 80128e6:	f7fa fc99 	bl	800d21c <pbuf_realloc>
  useg->len -= remainder;
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	891a      	ldrh	r2, [r3, #8]
 80128ee:	89bb      	ldrh	r3, [r7, #12]
 80128f0:	1ad3      	subs	r3, r2, r3
 80128f2:	b29a      	uxth	r2, r3
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80128f8:	697b      	ldr	r3, [r7, #20]
 80128fa:	68db      	ldr	r3, [r3, #12]
 80128fc:	899b      	ldrh	r3, [r3, #12]
 80128fe:	b29c      	uxth	r4, r3
 8012900:	7efb      	ldrb	r3, [r7, #27]
 8012902:	b29b      	uxth	r3, r3
 8012904:	4618      	mov	r0, r3
 8012906:	f7f9 f9db 	bl	800bcc0 <lwip_htons>
 801290a:	4603      	mov	r3, r0
 801290c:	461a      	mov	r2, r3
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	68db      	ldr	r3, [r3, #12]
 8012912:	4322      	orrs	r2, r4
 8012914:	b292      	uxth	r2, r2
 8012916:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012918:	697b      	ldr	r3, [r7, #20]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	4618      	mov	r0, r3
 801291e:	f7fa fe91 	bl	800d644 <pbuf_clen>
 8012922:	4603      	mov	r3, r0
 8012924:	461a      	mov	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801292c:	4413      	add	r3, r2
 801292e:	b29a      	uxth	r2, r3
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012936:	69fb      	ldr	r3, [r7, #28]
 8012938:	685b      	ldr	r3, [r3, #4]
 801293a:	4618      	mov	r0, r3
 801293c:	f7fa fe82 	bl	800d644 <pbuf_clen>
 8012940:	4603      	mov	r3, r0
 8012942:	461a      	mov	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801294a:	4413      	add	r3, r2
 801294c:	b29a      	uxth	r2, r3
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012954:	697b      	ldr	r3, [r7, #20]
 8012956:	681a      	ldr	r2, [r3, #0]
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	69fa      	ldr	r2, [r7, #28]
 8012960:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8012962:	69fb      	ldr	r3, [r7, #28]
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	2b00      	cmp	r3, #0
 8012968:	d103      	bne.n	8012972 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	2200      	movs	r2, #0
 801296e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8012972:	2300      	movs	r3, #0
 8012974:	e016      	b.n	80129a4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012976:	bf00      	nop
 8012978:	e002      	b.n	8012980 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801297a:	bf00      	nop
 801297c:	e000      	b.n	8012980 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801297e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d006      	beq.n	8012994 <tcp_split_unsent_seg+0x25c>
 8012986:	4b09      	ldr	r3, [pc, #36]	; (80129ac <tcp_split_unsent_seg+0x274>)
 8012988:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801298c:	490d      	ldr	r1, [pc, #52]	; (80129c4 <tcp_split_unsent_seg+0x28c>)
 801298e:	4809      	ldr	r0, [pc, #36]	; (80129b4 <tcp_split_unsent_seg+0x27c>)
 8012990:	f006 fb14 	bl	8018fbc <iprintf>
  if (p != NULL) {
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d002      	beq.n	80129a0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801299a:	6938      	ldr	r0, [r7, #16]
 801299c:	f7fa fdc4 	bl	800d528 <pbuf_free>
  }

  return ERR_MEM;
 80129a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3724      	adds	r7, #36	; 0x24
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd90      	pop	{r4, r7, pc}
 80129ac:	0801b9ec 	.word	0x0801b9ec
 80129b0:	0801bd80 	.word	0x0801bd80
 80129b4:	0801ba40 	.word	0x0801ba40
 80129b8:	0801bda4 	.word	0x0801bda4
 80129bc:	0801bdc8 	.word	0x0801bdc8
 80129c0:	0801bdd8 	.word	0x0801bdd8
 80129c4:	0801bde8 	.word	0x0801bde8

080129c8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80129c8:	b590      	push	{r4, r7, lr}
 80129ca:	b085      	sub	sp, #20
 80129cc:	af00      	add	r7, sp, #0
 80129ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	d106      	bne.n	80129e4 <tcp_send_fin+0x1c>
 80129d6:	4b21      	ldr	r3, [pc, #132]	; (8012a5c <tcp_send_fin+0x94>)
 80129d8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80129dc:	4920      	ldr	r1, [pc, #128]	; (8012a60 <tcp_send_fin+0x98>)
 80129de:	4821      	ldr	r0, [pc, #132]	; (8012a64 <tcp_send_fin+0x9c>)
 80129e0:	f006 faec 	bl	8018fbc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d02e      	beq.n	8012a4a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129f0:	60fb      	str	r3, [r7, #12]
 80129f2:	e002      	b.n	80129fa <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d1f8      	bne.n	80129f4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	68db      	ldr	r3, [r3, #12]
 8012a06:	899b      	ldrh	r3, [r3, #12]
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	f7f9 f958 	bl	800bcc0 <lwip_htons>
 8012a10:	4603      	mov	r3, r0
 8012a12:	b2db      	uxtb	r3, r3
 8012a14:	f003 0307 	and.w	r3, r3, #7
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d116      	bne.n	8012a4a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	68db      	ldr	r3, [r3, #12]
 8012a20:	899b      	ldrh	r3, [r3, #12]
 8012a22:	b29c      	uxth	r4, r3
 8012a24:	2001      	movs	r0, #1
 8012a26:	f7f9 f94b 	bl	800bcc0 <lwip_htons>
 8012a2a:	4603      	mov	r3, r0
 8012a2c:	461a      	mov	r2, r3
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	68db      	ldr	r3, [r3, #12]
 8012a32:	4322      	orrs	r2, r4
 8012a34:	b292      	uxth	r2, r2
 8012a36:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	8b5b      	ldrh	r3, [r3, #26]
 8012a3c:	f043 0320 	orr.w	r3, r3, #32
 8012a40:	b29a      	uxth	r2, r3
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012a46:	2300      	movs	r3, #0
 8012a48:	e004      	b.n	8012a54 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012a4a:	2101      	movs	r1, #1
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f000 f80b 	bl	8012a68 <tcp_enqueue_flags>
 8012a52:	4603      	mov	r3, r0
}
 8012a54:	4618      	mov	r0, r3
 8012a56:	3714      	adds	r7, #20
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd90      	pop	{r4, r7, pc}
 8012a5c:	0801b9ec 	.word	0x0801b9ec
 8012a60:	0801bdf4 	.word	0x0801bdf4
 8012a64:	0801ba40 	.word	0x0801ba40

08012a68 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012a68:	b580      	push	{r7, lr}
 8012a6a:	b08a      	sub	sp, #40	; 0x28
 8012a6c:	af02      	add	r7, sp, #8
 8012a6e:	6078      	str	r0, [r7, #4]
 8012a70:	460b      	mov	r3, r1
 8012a72:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012a74:	2300      	movs	r3, #0
 8012a76:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012a7c:	78fb      	ldrb	r3, [r7, #3]
 8012a7e:	f003 0303 	and.w	r3, r3, #3
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d106      	bne.n	8012a94 <tcp_enqueue_flags+0x2c>
 8012a86:	4b67      	ldr	r3, [pc, #412]	; (8012c24 <tcp_enqueue_flags+0x1bc>)
 8012a88:	f240 4211 	movw	r2, #1041	; 0x411
 8012a8c:	4966      	ldr	r1, [pc, #408]	; (8012c28 <tcp_enqueue_flags+0x1c0>)
 8012a8e:	4867      	ldr	r0, [pc, #412]	; (8012c2c <tcp_enqueue_flags+0x1c4>)
 8012a90:	f006 fa94 	bl	8018fbc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d106      	bne.n	8012aa8 <tcp_enqueue_flags+0x40>
 8012a9a:	4b62      	ldr	r3, [pc, #392]	; (8012c24 <tcp_enqueue_flags+0x1bc>)
 8012a9c:	f240 4213 	movw	r2, #1043	; 0x413
 8012aa0:	4963      	ldr	r1, [pc, #396]	; (8012c30 <tcp_enqueue_flags+0x1c8>)
 8012aa2:	4862      	ldr	r0, [pc, #392]	; (8012c2c <tcp_enqueue_flags+0x1c4>)
 8012aa4:	f006 fa8a 	bl	8018fbc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8012aa8:	78fb      	ldrb	r3, [r7, #3]
 8012aaa:	f003 0302 	and.w	r3, r3, #2
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d001      	beq.n	8012ab6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012ab6:	7ffb      	ldrb	r3, [r7, #31]
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	f003 0304 	and.w	r3, r3, #4
 8012ac0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012ac2:	7dfb      	ldrb	r3, [r7, #23]
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012aca:	4619      	mov	r1, r3
 8012acc:	2036      	movs	r0, #54	; 0x36
 8012ace:	f7fa fa47 	bl	800cf60 <pbuf_alloc>
 8012ad2:	6138      	str	r0, [r7, #16]
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d109      	bne.n	8012aee <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	8b5b      	ldrh	r3, [r3, #26]
 8012ade:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012ae2:	b29a      	uxth	r2, r3
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8012aec:	e095      	b.n	8012c1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8012aee:	693b      	ldr	r3, [r7, #16]
 8012af0:	895a      	ldrh	r2, [r3, #10]
 8012af2:	7dfb      	ldrb	r3, [r7, #23]
 8012af4:	b29b      	uxth	r3, r3
 8012af6:	429a      	cmp	r2, r3
 8012af8:	d206      	bcs.n	8012b08 <tcp_enqueue_flags+0xa0>
 8012afa:	4b4a      	ldr	r3, [pc, #296]	; (8012c24 <tcp_enqueue_flags+0x1bc>)
 8012afc:	f240 4239 	movw	r2, #1081	; 0x439
 8012b00:	494c      	ldr	r1, [pc, #304]	; (8012c34 <tcp_enqueue_flags+0x1cc>)
 8012b02:	484a      	ldr	r0, [pc, #296]	; (8012c2c <tcp_enqueue_flags+0x1c4>)
 8012b04:	f006 fa5a 	bl	8018fbc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012b08:	687b      	ldr	r3, [r7, #4]
 8012b0a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012b0c:	78fa      	ldrb	r2, [r7, #3]
 8012b0e:	7ffb      	ldrb	r3, [r7, #31]
 8012b10:	9300      	str	r3, [sp, #0]
 8012b12:	460b      	mov	r3, r1
 8012b14:	6939      	ldr	r1, [r7, #16]
 8012b16:	6878      	ldr	r0, [r7, #4]
 8012b18:	f7ff f918 	bl	8011d4c <tcp_create_segment>
 8012b1c:	60f8      	str	r0, [r7, #12]
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d109      	bne.n	8012b38 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	8b5b      	ldrh	r3, [r3, #26]
 8012b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b2c:	b29a      	uxth	r2, r3
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012b32:	f04f 33ff 	mov.w	r3, #4294967295
 8012b36:	e070      	b.n	8012c1a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	f003 0303 	and.w	r3, r3, #3
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d006      	beq.n	8012b52 <tcp_enqueue_flags+0xea>
 8012b44:	4b37      	ldr	r3, [pc, #220]	; (8012c24 <tcp_enqueue_flags+0x1bc>)
 8012b46:	f240 4242 	movw	r2, #1090	; 0x442
 8012b4a:	493b      	ldr	r1, [pc, #236]	; (8012c38 <tcp_enqueue_flags+0x1d0>)
 8012b4c:	4837      	ldr	r0, [pc, #220]	; (8012c2c <tcp_enqueue_flags+0x1c4>)
 8012b4e:	f006 fa35 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	891b      	ldrh	r3, [r3, #8]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d006      	beq.n	8012b68 <tcp_enqueue_flags+0x100>
 8012b5a:	4b32      	ldr	r3, [pc, #200]	; (8012c24 <tcp_enqueue_flags+0x1bc>)
 8012b5c:	f240 4243 	movw	r2, #1091	; 0x443
 8012b60:	4936      	ldr	r1, [pc, #216]	; (8012c3c <tcp_enqueue_flags+0x1d4>)
 8012b62:	4832      	ldr	r0, [pc, #200]	; (8012c2c <tcp_enqueue_flags+0x1c4>)
 8012b64:	f006 fa2a 	bl	8018fbc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d103      	bne.n	8012b78 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	68fa      	ldr	r2, [r7, #12]
 8012b74:	66da      	str	r2, [r3, #108]	; 0x6c
 8012b76:	e00d      	b.n	8012b94 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b7c:	61bb      	str	r3, [r7, #24]
 8012b7e:	e002      	b.n	8012b86 <tcp_enqueue_flags+0x11e>
 8012b80:	69bb      	ldr	r3, [r7, #24]
 8012b82:	681b      	ldr	r3, [r3, #0]
 8012b84:	61bb      	str	r3, [r7, #24]
 8012b86:	69bb      	ldr	r3, [r7, #24]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d1f8      	bne.n	8012b80 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	68fa      	ldr	r2, [r7, #12]
 8012b92:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012b9c:	78fb      	ldrb	r3, [r7, #3]
 8012b9e:	f003 0302 	and.w	r3, r3, #2
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d104      	bne.n	8012bb0 <tcp_enqueue_flags+0x148>
 8012ba6:	78fb      	ldrb	r3, [r7, #3]
 8012ba8:	f003 0301 	and.w	r3, r3, #1
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d004      	beq.n	8012bba <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012bb4:	1c5a      	adds	r2, r3, #1
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012bba:	78fb      	ldrb	r3, [r7, #3]
 8012bbc:	f003 0301 	and.w	r3, r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d006      	beq.n	8012bd2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	8b5b      	ldrh	r3, [r3, #26]
 8012bc8:	f043 0320 	orr.w	r3, r3, #32
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	687b      	ldr	r3, [r7, #4]
 8012bd0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	685b      	ldr	r3, [r3, #4]
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fa fd34 	bl	800d644 <pbuf_clen>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	461a      	mov	r2, r3
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012be6:	4413      	add	r3, r2
 8012be8:	b29a      	uxth	r2, r3
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d00e      	beq.n	8012c18 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d10a      	bne.n	8012c18 <tcp_enqueue_flags+0x1b0>
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d106      	bne.n	8012c18 <tcp_enqueue_flags+0x1b0>
 8012c0a:	4b06      	ldr	r3, [pc, #24]	; (8012c24 <tcp_enqueue_flags+0x1bc>)
 8012c0c:	f240 4265 	movw	r2, #1125	; 0x465
 8012c10:	490b      	ldr	r1, [pc, #44]	; (8012c40 <tcp_enqueue_flags+0x1d8>)
 8012c12:	4806      	ldr	r0, [pc, #24]	; (8012c2c <tcp_enqueue_flags+0x1c4>)
 8012c14:	f006 f9d2 	bl	8018fbc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012c18:	2300      	movs	r3, #0
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3720      	adds	r7, #32
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}
 8012c22:	bf00      	nop
 8012c24:	0801b9ec 	.word	0x0801b9ec
 8012c28:	0801be10 	.word	0x0801be10
 8012c2c:	0801ba40 	.word	0x0801ba40
 8012c30:	0801be68 	.word	0x0801be68
 8012c34:	0801be88 	.word	0x0801be88
 8012c38:	0801bec4 	.word	0x0801bec4
 8012c3c:	0801bedc 	.word	0x0801bedc
 8012c40:	0801bf08 	.word	0x0801bf08

08012c44 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012c44:	b5b0      	push	{r4, r5, r7, lr}
 8012c46:	b08a      	sub	sp, #40	; 0x28
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d106      	bne.n	8012c60 <tcp_output+0x1c>
 8012c52:	4b8a      	ldr	r3, [pc, #552]	; (8012e7c <tcp_output+0x238>)
 8012c54:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012c58:	4989      	ldr	r1, [pc, #548]	; (8012e80 <tcp_output+0x23c>)
 8012c5a:	488a      	ldr	r0, [pc, #552]	; (8012e84 <tcp_output+0x240>)
 8012c5c:	f006 f9ae 	bl	8018fbc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	7d1b      	ldrb	r3, [r3, #20]
 8012c64:	2b01      	cmp	r3, #1
 8012c66:	d106      	bne.n	8012c76 <tcp_output+0x32>
 8012c68:	4b84      	ldr	r3, [pc, #528]	; (8012e7c <tcp_output+0x238>)
 8012c6a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012c6e:	4986      	ldr	r1, [pc, #536]	; (8012e88 <tcp_output+0x244>)
 8012c70:	4884      	ldr	r0, [pc, #528]	; (8012e84 <tcp_output+0x240>)
 8012c72:	f006 f9a3 	bl	8018fbc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012c76:	4b85      	ldr	r3, [pc, #532]	; (8012e8c <tcp_output+0x248>)
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d101      	bne.n	8012c84 <tcp_output+0x40>
    return ERR_OK;
 8012c80:	2300      	movs	r3, #0
 8012c82:	e1ce      	b.n	8013022 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012c90:	4293      	cmp	r3, r2
 8012c92:	bf28      	it	cs
 8012c94:	4613      	movcs	r3, r2
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c9e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d10b      	bne.n	8012cbe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	8b5b      	ldrh	r3, [r3, #26]
 8012caa:	f003 0302 	and.w	r3, r3, #2
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	f000 81aa 	beq.w	8013008 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012cb4:	6878      	ldr	r0, [r7, #4]
 8012cb6:	f000 fdcb 	bl	8013850 <tcp_send_empty_ack>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	e1b1      	b.n	8013022 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012cbe:	6879      	ldr	r1, [r7, #4]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	3304      	adds	r3, #4
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7ff f824 	bl	8011d14 <tcp_route>
 8012ccc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012cce:	697b      	ldr	r3, [r7, #20]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d102      	bne.n	8012cda <tcp_output+0x96>
    return ERR_RTE;
 8012cd4:	f06f 0303 	mvn.w	r3, #3
 8012cd8:	e1a3      	b.n	8013022 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d003      	beq.n	8012ce8 <tcp_output+0xa4>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d111      	bne.n	8012d0c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012ce8:	697b      	ldr	r3, [r7, #20]
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d002      	beq.n	8012cf4 <tcp_output+0xb0>
 8012cee:	697b      	ldr	r3, [r7, #20]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	e000      	b.n	8012cf6 <tcp_output+0xb2>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012cf8:	693b      	ldr	r3, [r7, #16]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d102      	bne.n	8012d04 <tcp_output+0xc0>
      return ERR_RTE;
 8012cfe:	f06f 0303 	mvn.w	r3, #3
 8012d02:	e18e      	b.n	8013022 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012d04:	693b      	ldr	r3, [r7, #16]
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	68db      	ldr	r3, [r3, #12]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7f8 ffe9 	bl	800bcea <lwip_htonl>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d1e:	1ad3      	subs	r3, r2, r3
 8012d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d22:	8912      	ldrh	r2, [r2, #8]
 8012d24:	4413      	add	r3, r2
 8012d26:	69ba      	ldr	r2, [r7, #24]
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	d227      	bcs.n	8012d7c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012d32:	461a      	mov	r2, r3
 8012d34:	69bb      	ldr	r3, [r7, #24]
 8012d36:	4293      	cmp	r3, r2
 8012d38:	d114      	bne.n	8012d64 <tcp_output+0x120>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d110      	bne.n	8012d64 <tcp_output+0x120>
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d10b      	bne.n	8012d64 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	2201      	movs	r2, #1
 8012d58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2200      	movs	r2, #0
 8012d60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012d64:	687b      	ldr	r3, [r7, #4]
 8012d66:	8b5b      	ldrh	r3, [r3, #26]
 8012d68:	f003 0302 	and.w	r3, r3, #2
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	f000 814d 	beq.w	801300c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 fd6c 	bl	8013850 <tcp_send_empty_ack>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	e152      	b.n	8013022 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d88:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012d8a:	6a3b      	ldr	r3, [r7, #32]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	f000 811c 	beq.w	8012fca <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012d92:	e002      	b.n	8012d9a <tcp_output+0x156>
 8012d94:	6a3b      	ldr	r3, [r7, #32]
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	623b      	str	r3, [r7, #32]
 8012d9a:	6a3b      	ldr	r3, [r7, #32]
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1f8      	bne.n	8012d94 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012da2:	e112      	b.n	8012fca <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	68db      	ldr	r3, [r3, #12]
 8012da8:	899b      	ldrh	r3, [r3, #12]
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	4618      	mov	r0, r3
 8012dae:	f7f8 ff87 	bl	800bcc0 <lwip_htons>
 8012db2:	4603      	mov	r3, r0
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	f003 0304 	and.w	r3, r3, #4
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d006      	beq.n	8012dcc <tcp_output+0x188>
 8012dbe:	4b2f      	ldr	r3, [pc, #188]	; (8012e7c <tcp_output+0x238>)
 8012dc0:	f240 5236 	movw	r2, #1334	; 0x536
 8012dc4:	4932      	ldr	r1, [pc, #200]	; (8012e90 <tcp_output+0x24c>)
 8012dc6:	482f      	ldr	r0, [pc, #188]	; (8012e84 <tcp_output+0x240>)
 8012dc8:	f006 f8f8 	bl	8018fbc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d01f      	beq.n	8012e14 <tcp_output+0x1d0>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	8b5b      	ldrh	r3, [r3, #26]
 8012dd8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d119      	bne.n	8012e14 <tcp_output+0x1d0>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d00b      	beq.n	8012e00 <tcp_output+0x1bc>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d110      	bne.n	8012e14 <tcp_output+0x1d0>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012df6:	891a      	ldrh	r2, [r3, #8]
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012dfc:	429a      	cmp	r2, r3
 8012dfe:	d209      	bcs.n	8012e14 <tcp_output+0x1d0>
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d004      	beq.n	8012e14 <tcp_output+0x1d0>
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012e10:	2b08      	cmp	r3, #8
 8012e12:	d901      	bls.n	8012e18 <tcp_output+0x1d4>
 8012e14:	2301      	movs	r3, #1
 8012e16:	e000      	b.n	8012e1a <tcp_output+0x1d6>
 8012e18:	2300      	movs	r3, #0
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d106      	bne.n	8012e2c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	8b5b      	ldrh	r3, [r3, #26]
 8012e22:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	f000 80e4 	beq.w	8012ff4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	7d1b      	ldrb	r3, [r3, #20]
 8012e30:	2b02      	cmp	r3, #2
 8012e32:	d00d      	beq.n	8012e50 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e36:	68db      	ldr	r3, [r3, #12]
 8012e38:	899b      	ldrh	r3, [r3, #12]
 8012e3a:	b29c      	uxth	r4, r3
 8012e3c:	2010      	movs	r0, #16
 8012e3e:	f7f8 ff3f 	bl	800bcc0 <lwip_htons>
 8012e42:	4603      	mov	r3, r0
 8012e44:	461a      	mov	r2, r3
 8012e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e48:	68db      	ldr	r3, [r3, #12]
 8012e4a:	4322      	orrs	r2, r4
 8012e4c:	b292      	uxth	r2, r2
 8012e4e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012e50:	697a      	ldr	r2, [r7, #20]
 8012e52:	6879      	ldr	r1, [r7, #4]
 8012e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e56:	f000 f909 	bl	801306c <tcp_output_segment>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d016      	beq.n	8012e94 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	8b5b      	ldrh	r3, [r3, #26]
 8012e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e6e:	b29a      	uxth	r2, r3
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	835a      	strh	r2, [r3, #26]
      return err;
 8012e74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e78:	e0d3      	b.n	8013022 <tcp_output+0x3de>
 8012e7a:	bf00      	nop
 8012e7c:	0801b9ec 	.word	0x0801b9ec
 8012e80:	0801bf30 	.word	0x0801bf30
 8012e84:	0801ba40 	.word	0x0801ba40
 8012e88:	0801bf48 	.word	0x0801bf48
 8012e8c:	2000cf28 	.word	0x2000cf28
 8012e90:	0801bf70 	.word	0x0801bf70
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	681a      	ldr	r2, [r3, #0]
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	7d1b      	ldrb	r3, [r3, #20]
 8012ea0:	2b02      	cmp	r3, #2
 8012ea2:	d006      	beq.n	8012eb2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	8b5b      	ldrh	r3, [r3, #26]
 8012ea8:	f023 0303 	bic.w	r3, r3, #3
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb4:	68db      	ldr	r3, [r3, #12]
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7f8 ff16 	bl	800bcea <lwip_htonl>
 8012ebe:	4604      	mov	r4, r0
 8012ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec2:	891b      	ldrh	r3, [r3, #8]
 8012ec4:	461d      	mov	r5, r3
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	899b      	ldrh	r3, [r3, #12]
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7f8 fef6 	bl	800bcc0 <lwip_htons>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	b2db      	uxtb	r3, r3
 8012ed8:	f003 0303 	and.w	r3, r3, #3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d001      	beq.n	8012ee4 <tcp_output+0x2a0>
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	e000      	b.n	8012ee6 <tcp_output+0x2a2>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	442b      	add	r3, r5
 8012ee8:	4423      	add	r3, r4
 8012eea:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	1ad3      	subs	r3, r2, r3
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	da02      	bge.n	8012efe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	68ba      	ldr	r2, [r7, #8]
 8012efc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f00:	891b      	ldrh	r3, [r3, #8]
 8012f02:	461c      	mov	r4, r3
 8012f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	899b      	ldrh	r3, [r3, #12]
 8012f0a:	b29b      	uxth	r3, r3
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	f7f8 fed7 	bl	800bcc0 <lwip_htons>
 8012f12:	4603      	mov	r3, r0
 8012f14:	b2db      	uxtb	r3, r3
 8012f16:	f003 0303 	and.w	r3, r3, #3
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d001      	beq.n	8012f22 <tcp_output+0x2de>
 8012f1e:	2301      	movs	r3, #1
 8012f20:	e000      	b.n	8012f24 <tcp_output+0x2e0>
 8012f22:	2300      	movs	r3, #0
 8012f24:	4423      	add	r3, r4
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d049      	beq.n	8012fbe <tcp_output+0x37a>
      seg->next = NULL;
 8012f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d105      	bne.n	8012f44 <tcp_output+0x300>
        pcb->unacked = seg;
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f3c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f40:	623b      	str	r3, [r7, #32]
 8012f42:	e03f      	b.n	8012fc4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f8 fecd 	bl	800bcea <lwip_htonl>
 8012f50:	4604      	mov	r4, r0
 8012f52:	6a3b      	ldr	r3, [r7, #32]
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	4618      	mov	r0, r3
 8012f5a:	f7f8 fec6 	bl	800bcea <lwip_htonl>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	1ae3      	subs	r3, r4, r3
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	da24      	bge.n	8012fb0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	3370      	adds	r3, #112	; 0x70
 8012f6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012f6c:	e002      	b.n	8012f74 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012f6e:	69fb      	ldr	r3, [r7, #28]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012f74:	69fb      	ldr	r3, [r7, #28]
 8012f76:	681b      	ldr	r3, [r3, #0]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d011      	beq.n	8012fa0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012f7c:	69fb      	ldr	r3, [r7, #28]
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	685b      	ldr	r3, [r3, #4]
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7f8 feb0 	bl	800bcea <lwip_htonl>
 8012f8a:	4604      	mov	r4, r0
 8012f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8e:	68db      	ldr	r3, [r3, #12]
 8012f90:	685b      	ldr	r3, [r3, #4]
 8012f92:	4618      	mov	r0, r3
 8012f94:	f7f8 fea9 	bl	800bcea <lwip_htonl>
 8012f98:	4603      	mov	r3, r0
 8012f9a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	dbe6      	blt.n	8012f6e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012fa0:	69fb      	ldr	r3, [r7, #28]
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fa6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012fa8:	69fb      	ldr	r3, [r7, #28]
 8012faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	e009      	b.n	8012fc4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012fb0:	6a3b      	ldr	r3, [r7, #32]
 8012fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fb4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012fb6:	6a3b      	ldr	r3, [r7, #32]
 8012fb8:	681b      	ldr	r3, [r3, #0]
 8012fba:	623b      	str	r3, [r7, #32]
 8012fbc:	e002      	b.n	8012fc4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012fc0:	f7fb fefb 	bl	800edba <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012fc8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d012      	beq.n	8012ff6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012fd2:	68db      	ldr	r3, [r3, #12]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7f8 fe87 	bl	800bcea <lwip_htonl>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012fe2:	1ad3      	subs	r3, r2, r3
 8012fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012fe6:	8912      	ldrh	r2, [r2, #8]
 8012fe8:	4413      	add	r3, r2
  while (seg != NULL &&
 8012fea:	69ba      	ldr	r2, [r7, #24]
 8012fec:	429a      	cmp	r2, r3
 8012fee:	f4bf aed9 	bcs.w	8012da4 <tcp_output+0x160>
 8012ff2:	e000      	b.n	8012ff6 <tcp_output+0x3b2>
      break;
 8012ff4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d108      	bne.n	8013010 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	2200      	movs	r2, #0
 8013002:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8013006:	e004      	b.n	8013012 <tcp_output+0x3ce>
    goto output_done;
 8013008:	bf00      	nop
 801300a:	e002      	b.n	8013012 <tcp_output+0x3ce>
    goto output_done;
 801300c:	bf00      	nop
 801300e:	e000      	b.n	8013012 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8013010:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	8b5b      	ldrh	r3, [r3, #26]
 8013016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801301a:	b29a      	uxth	r2, r3
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8013020:	2300      	movs	r3, #0
}
 8013022:	4618      	mov	r0, r3
 8013024:	3728      	adds	r7, #40	; 0x28
 8013026:	46bd      	mov	sp, r7
 8013028:	bdb0      	pop	{r4, r5, r7, pc}
 801302a:	bf00      	nop

0801302c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b082      	sub	sp, #8
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d106      	bne.n	8013048 <tcp_output_segment_busy+0x1c>
 801303a:	4b09      	ldr	r3, [pc, #36]	; (8013060 <tcp_output_segment_busy+0x34>)
 801303c:	f240 529a 	movw	r2, #1434	; 0x59a
 8013040:	4908      	ldr	r1, [pc, #32]	; (8013064 <tcp_output_segment_busy+0x38>)
 8013042:	4809      	ldr	r0, [pc, #36]	; (8013068 <tcp_output_segment_busy+0x3c>)
 8013044:	f005 ffba 	bl	8018fbc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	7b9b      	ldrb	r3, [r3, #14]
 801304e:	2b01      	cmp	r3, #1
 8013050:	d001      	beq.n	8013056 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8013052:	2301      	movs	r3, #1
 8013054:	e000      	b.n	8013058 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8013056:	2300      	movs	r3, #0
}
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	0801b9ec 	.word	0x0801b9ec
 8013064:	0801bf88 	.word	0x0801bf88
 8013068:	0801ba40 	.word	0x0801ba40

0801306c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801306c:	b5b0      	push	{r4, r5, r7, lr}
 801306e:	b08c      	sub	sp, #48	; 0x30
 8013070:	af04      	add	r7, sp, #16
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	2b00      	cmp	r3, #0
 801307c:	d106      	bne.n	801308c <tcp_output_segment+0x20>
 801307e:	4b64      	ldr	r3, [pc, #400]	; (8013210 <tcp_output_segment+0x1a4>)
 8013080:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8013084:	4963      	ldr	r1, [pc, #396]	; (8013214 <tcp_output_segment+0x1a8>)
 8013086:	4864      	ldr	r0, [pc, #400]	; (8013218 <tcp_output_segment+0x1ac>)
 8013088:	f005 ff98 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801308c:	68bb      	ldr	r3, [r7, #8]
 801308e:	2b00      	cmp	r3, #0
 8013090:	d106      	bne.n	80130a0 <tcp_output_segment+0x34>
 8013092:	4b5f      	ldr	r3, [pc, #380]	; (8013210 <tcp_output_segment+0x1a4>)
 8013094:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8013098:	4960      	ldr	r1, [pc, #384]	; (801321c <tcp_output_segment+0x1b0>)
 801309a:	485f      	ldr	r0, [pc, #380]	; (8013218 <tcp_output_segment+0x1ac>)
 801309c:	f005 ff8e 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d106      	bne.n	80130b4 <tcp_output_segment+0x48>
 80130a6:	4b5a      	ldr	r3, [pc, #360]	; (8013210 <tcp_output_segment+0x1a4>)
 80130a8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80130ac:	495c      	ldr	r1, [pc, #368]	; (8013220 <tcp_output_segment+0x1b4>)
 80130ae:	485a      	ldr	r0, [pc, #360]	; (8013218 <tcp_output_segment+0x1ac>)
 80130b0:	f005 ff84 	bl	8018fbc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80130b4:	68f8      	ldr	r0, [r7, #12]
 80130b6:	f7ff ffb9 	bl	801302c <tcp_output_segment_busy>
 80130ba:	4603      	mov	r3, r0
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d001      	beq.n	80130c4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80130c0:	2300      	movs	r3, #0
 80130c2:	e0a1      	b.n	8013208 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	68dc      	ldr	r4, [r3, #12]
 80130cc:	4610      	mov	r0, r2
 80130ce:	f7f8 fe0c 	bl	800bcea <lwip_htonl>
 80130d2:	4603      	mov	r3, r0
 80130d4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80130d6:	68bb      	ldr	r3, [r7, #8]
 80130d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	68dc      	ldr	r4, [r3, #12]
 80130de:	4610      	mov	r0, r2
 80130e0:	f7f8 fdee 	bl	800bcc0 <lwip_htons>
 80130e4:	4603      	mov	r3, r0
 80130e6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80130e8:	68bb      	ldr	r3, [r7, #8]
 80130ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ec:	68ba      	ldr	r2, [r7, #8]
 80130ee:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80130f0:	441a      	add	r2, r3
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	68db      	ldr	r3, [r3, #12]
 80130fa:	3314      	adds	r3, #20
 80130fc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	7a9b      	ldrb	r3, [r3, #10]
 8013102:	f003 0301 	and.w	r3, r3, #1
 8013106:	2b00      	cmp	r3, #0
 8013108:	d015      	beq.n	8013136 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801310a:	68bb      	ldr	r3, [r7, #8]
 801310c:	3304      	adds	r3, #4
 801310e:	461a      	mov	r2, r3
 8013110:	6879      	ldr	r1, [r7, #4]
 8013112:	f44f 7006 	mov.w	r0, #536	; 0x218
 8013116:	f7fc fa33 	bl	800f580 <tcp_eff_send_mss_netif>
 801311a:	4603      	mov	r3, r0
 801311c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801311e:	8b7b      	ldrh	r3, [r7, #26]
 8013120:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8013124:	4618      	mov	r0, r3
 8013126:	f7f8 fde0 	bl	800bcea <lwip_htonl>
 801312a:	4602      	mov	r2, r0
 801312c:	69fb      	ldr	r3, [r7, #28]
 801312e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	3304      	adds	r3, #4
 8013134:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801313c:	2b00      	cmp	r3, #0
 801313e:	da02      	bge.n	8013146 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8013140:	68bb      	ldr	r3, [r7, #8]
 8013142:	2200      	movs	r2, #0
 8013144:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8013146:	68bb      	ldr	r3, [r7, #8]
 8013148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801314a:	2b00      	cmp	r3, #0
 801314c:	d10c      	bne.n	8013168 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801314e:	4b35      	ldr	r3, [pc, #212]	; (8013224 <tcp_output_segment+0x1b8>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	68db      	ldr	r3, [r3, #12]
 801315a:	685b      	ldr	r3, [r3, #4]
 801315c:	4618      	mov	r0, r3
 801315e:	f7f8 fdc4 	bl	800bcea <lwip_htonl>
 8013162:	4602      	mov	r2, r0
 8013164:	68bb      	ldr	r3, [r7, #8]
 8013166:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	68da      	ldr	r2, [r3, #12]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	1ad3      	subs	r3, r2, r3
 8013174:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	8959      	ldrh	r1, [r3, #10]
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	8b3a      	ldrh	r2, [r7, #24]
 8013182:	1a8a      	subs	r2, r1, r2
 8013184:	b292      	uxth	r2, r2
 8013186:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	685b      	ldr	r3, [r3, #4]
 801318c:	8919      	ldrh	r1, [r3, #8]
 801318e:	68fb      	ldr	r3, [r7, #12]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	8b3a      	ldrh	r2, [r7, #24]
 8013194:	1a8a      	subs	r2, r1, r2
 8013196:	b292      	uxth	r2, r2
 8013198:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	68fa      	ldr	r2, [r7, #12]
 80131a0:	68d2      	ldr	r2, [r2, #12]
 80131a2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	68db      	ldr	r3, [r3, #12]
 80131a8:	2200      	movs	r2, #0
 80131aa:	741a      	strb	r2, [r3, #16]
 80131ac:	2200      	movs	r2, #0
 80131ae:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	68da      	ldr	r2, [r3, #12]
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	7a9b      	ldrb	r3, [r3, #10]
 80131b8:	f003 0301 	and.w	r3, r3, #1
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d001      	beq.n	80131c4 <tcp_output_segment+0x158>
 80131c0:	2318      	movs	r3, #24
 80131c2:	e000      	b.n	80131c6 <tcp_output_segment+0x15a>
 80131c4:	2314      	movs	r3, #20
 80131c6:	4413      	add	r3, r2
 80131c8:	69fa      	ldr	r2, [r7, #28]
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d006      	beq.n	80131dc <tcp_output_segment+0x170>
 80131ce:	4b10      	ldr	r3, [pc, #64]	; (8013210 <tcp_output_segment+0x1a4>)
 80131d0:	f240 621c 	movw	r2, #1564	; 0x61c
 80131d4:	4914      	ldr	r1, [pc, #80]	; (8013228 <tcp_output_segment+0x1bc>)
 80131d6:	4810      	ldr	r0, [pc, #64]	; (8013218 <tcp_output_segment+0x1ac>)
 80131d8:	f005 fef0 	bl	8018fbc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	6858      	ldr	r0, [r3, #4]
 80131e0:	68b9      	ldr	r1, [r7, #8]
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	1d1c      	adds	r4, r3, #4
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	7add      	ldrb	r5, [r3, #11]
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	7a9b      	ldrb	r3, [r3, #10]
 80131ee:	687a      	ldr	r2, [r7, #4]
 80131f0:	9202      	str	r2, [sp, #8]
 80131f2:	2206      	movs	r2, #6
 80131f4:	9201      	str	r2, [sp, #4]
 80131f6:	9300      	str	r3, [sp, #0]
 80131f8:	462b      	mov	r3, r5
 80131fa:	4622      	mov	r2, r4
 80131fc:	f004 fc1c 	bl	8017a38 <ip4_output_if>
 8013200:	4603      	mov	r3, r0
 8013202:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013204:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013208:	4618      	mov	r0, r3
 801320a:	3720      	adds	r7, #32
 801320c:	46bd      	mov	sp, r7
 801320e:	bdb0      	pop	{r4, r5, r7, pc}
 8013210:	0801b9ec 	.word	0x0801b9ec
 8013214:	0801bfb0 	.word	0x0801bfb0
 8013218:	0801ba40 	.word	0x0801ba40
 801321c:	0801bfd0 	.word	0x0801bfd0
 8013220:	0801bff0 	.word	0x0801bff0
 8013224:	2000cedc 	.word	0x2000cedc
 8013228:	0801c014 	.word	0x0801c014

0801322c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801322c:	b5b0      	push	{r4, r5, r7, lr}
 801322e:	b084      	sub	sp, #16
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d106      	bne.n	8013248 <tcp_rexmit_rto_prepare+0x1c>
 801323a:	4b31      	ldr	r3, [pc, #196]	; (8013300 <tcp_rexmit_rto_prepare+0xd4>)
 801323c:	f240 6263 	movw	r2, #1635	; 0x663
 8013240:	4930      	ldr	r1, [pc, #192]	; (8013304 <tcp_rexmit_rto_prepare+0xd8>)
 8013242:	4831      	ldr	r0, [pc, #196]	; (8013308 <tcp_rexmit_rto_prepare+0xdc>)
 8013244:	f005 feba 	bl	8018fbc <iprintf>

  if (pcb->unacked == NULL) {
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801324c:	2b00      	cmp	r3, #0
 801324e:	d102      	bne.n	8013256 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8013250:	f06f 0305 	mvn.w	r3, #5
 8013254:	e050      	b.n	80132f8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801325a:	60fb      	str	r3, [r7, #12]
 801325c:	e00b      	b.n	8013276 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7ff fee4 	bl	801302c <tcp_output_segment_busy>
 8013264:	4603      	mov	r3, r0
 8013266:	2b00      	cmp	r3, #0
 8013268:	d002      	beq.n	8013270 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801326a:	f06f 0305 	mvn.w	r3, #5
 801326e:	e043      	b.n	80132f8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	60fb      	str	r3, [r7, #12]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	681b      	ldr	r3, [r3, #0]
 801327a:	2b00      	cmp	r3, #0
 801327c:	d1ef      	bne.n	801325e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801327e:	68f8      	ldr	r0, [r7, #12]
 8013280:	f7ff fed4 	bl	801302c <tcp_output_segment_busy>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d002      	beq.n	8013290 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801328a:	f06f 0305 	mvn.w	r3, #5
 801328e:	e033      	b.n	80132f8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	8b5b      	ldrh	r3, [r3, #26]
 80132aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80132ae:	b29a      	uxth	r2, r3
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	68db      	ldr	r3, [r3, #12]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7f8 fd15 	bl	800bcea <lwip_htonl>
 80132c0:	4604      	mov	r4, r0
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	891b      	ldrh	r3, [r3, #8]
 80132c6:	461d      	mov	r5, r3
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	68db      	ldr	r3, [r3, #12]
 80132cc:	899b      	ldrh	r3, [r3, #12]
 80132ce:	b29b      	uxth	r3, r3
 80132d0:	4618      	mov	r0, r3
 80132d2:	f7f8 fcf5 	bl	800bcc0 <lwip_htons>
 80132d6:	4603      	mov	r3, r0
 80132d8:	b2db      	uxtb	r3, r3
 80132da:	f003 0303 	and.w	r3, r3, #3
 80132de:	2b00      	cmp	r3, #0
 80132e0:	d001      	beq.n	80132e6 <tcp_rexmit_rto_prepare+0xba>
 80132e2:	2301      	movs	r3, #1
 80132e4:	e000      	b.n	80132e8 <tcp_rexmit_rto_prepare+0xbc>
 80132e6:	2300      	movs	r3, #0
 80132e8:	442b      	add	r3, r5
 80132ea:	18e2      	adds	r2, r4, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2200      	movs	r2, #0
 80132f4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	3710      	adds	r7, #16
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bdb0      	pop	{r4, r5, r7, pc}
 8013300:	0801b9ec 	.word	0x0801b9ec
 8013304:	0801c028 	.word	0x0801c028
 8013308:	0801ba40 	.word	0x0801ba40

0801330c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d106      	bne.n	8013328 <tcp_rexmit_rto_commit+0x1c>
 801331a:	4b0d      	ldr	r3, [pc, #52]	; (8013350 <tcp_rexmit_rto_commit+0x44>)
 801331c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8013320:	490c      	ldr	r1, [pc, #48]	; (8013354 <tcp_rexmit_rto_commit+0x48>)
 8013322:	480d      	ldr	r0, [pc, #52]	; (8013358 <tcp_rexmit_rto_commit+0x4c>)
 8013324:	f005 fe4a 	bl	8018fbc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801332e:	2bff      	cmp	r3, #255	; 0xff
 8013330:	d007      	beq.n	8013342 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013338:	3301      	adds	r3, #1
 801333a:	b2da      	uxtb	r2, r3
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f7ff fc7e 	bl	8012c44 <tcp_output>
}
 8013348:	bf00      	nop
 801334a:	3708      	adds	r7, #8
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	0801b9ec 	.word	0x0801b9ec
 8013354:	0801c04c 	.word	0x0801c04c
 8013358:	0801ba40 	.word	0x0801ba40

0801335c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b082      	sub	sp, #8
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d106      	bne.n	8013378 <tcp_rexmit_rto+0x1c>
 801336a:	4b0a      	ldr	r3, [pc, #40]	; (8013394 <tcp_rexmit_rto+0x38>)
 801336c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8013370:	4909      	ldr	r1, [pc, #36]	; (8013398 <tcp_rexmit_rto+0x3c>)
 8013372:	480a      	ldr	r0, [pc, #40]	; (801339c <tcp_rexmit_rto+0x40>)
 8013374:	f005 fe22 	bl	8018fbc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f7ff ff57 	bl	801322c <tcp_rexmit_rto_prepare>
 801337e:	4603      	mov	r3, r0
 8013380:	2b00      	cmp	r3, #0
 8013382:	d102      	bne.n	801338a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8013384:	6878      	ldr	r0, [r7, #4]
 8013386:	f7ff ffc1 	bl	801330c <tcp_rexmit_rto_commit>
  }
}
 801338a:	bf00      	nop
 801338c:	3708      	adds	r7, #8
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	0801b9ec 	.word	0x0801b9ec
 8013398:	0801c070 	.word	0x0801c070
 801339c:	0801ba40 	.word	0x0801ba40

080133a0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80133a0:	b590      	push	{r4, r7, lr}
 80133a2:	b085      	sub	sp, #20
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d106      	bne.n	80133bc <tcp_rexmit+0x1c>
 80133ae:	4b2f      	ldr	r3, [pc, #188]	; (801346c <tcp_rexmit+0xcc>)
 80133b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80133b4:	492e      	ldr	r1, [pc, #184]	; (8013470 <tcp_rexmit+0xd0>)
 80133b6:	482f      	ldr	r0, [pc, #188]	; (8013474 <tcp_rexmit+0xd4>)
 80133b8:	f005 fe00 	bl	8018fbc <iprintf>

  if (pcb->unacked == NULL) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d102      	bne.n	80133ca <tcp_rexmit+0x2a>
    return ERR_VAL;
 80133c4:	f06f 0305 	mvn.w	r3, #5
 80133c8:	e04c      	b.n	8013464 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ce:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80133d0:	68b8      	ldr	r0, [r7, #8]
 80133d2:	f7ff fe2b 	bl	801302c <tcp_output_segment_busy>
 80133d6:	4603      	mov	r3, r0
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d002      	beq.n	80133e2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80133dc:	f06f 0305 	mvn.w	r3, #5
 80133e0:	e040      	b.n	8013464 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	687b      	ldr	r3, [r7, #4]
 80133e8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	336c      	adds	r3, #108	; 0x6c
 80133ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80133f0:	e002      	b.n	80133f8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	681b      	ldr	r3, [r3, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d011      	beq.n	8013424 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013400:	68fb      	ldr	r3, [r7, #12]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	68db      	ldr	r3, [r3, #12]
 8013406:	685b      	ldr	r3, [r3, #4]
 8013408:	4618      	mov	r0, r3
 801340a:	f7f8 fc6e 	bl	800bcea <lwip_htonl>
 801340e:	4604      	mov	r4, r0
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	68db      	ldr	r3, [r3, #12]
 8013414:	685b      	ldr	r3, [r3, #4]
 8013416:	4618      	mov	r0, r3
 8013418:	f7f8 fc67 	bl	800bcea <lwip_htonl>
 801341c:	4603      	mov	r3, r0
 801341e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013420:	2b00      	cmp	r3, #0
 8013422:	dbe6      	blt.n	80133f2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	681a      	ldr	r2, [r3, #0]
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	68ba      	ldr	r2, [r7, #8]
 8013430:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013432:	68bb      	ldr	r3, [r7, #8]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d103      	bne.n	8013442 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013448:	2bff      	cmp	r3, #255	; 0xff
 801344a:	d007      	beq.n	801345c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013452:	3301      	adds	r3, #1
 8013454:	b2da      	uxtb	r2, r3
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2200      	movs	r2, #0
 8013460:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013462:	2300      	movs	r3, #0
}
 8013464:	4618      	mov	r0, r3
 8013466:	3714      	adds	r7, #20
 8013468:	46bd      	mov	sp, r7
 801346a:	bd90      	pop	{r4, r7, pc}
 801346c:	0801b9ec 	.word	0x0801b9ec
 8013470:	0801c08c 	.word	0x0801c08c
 8013474:	0801ba40 	.word	0x0801ba40

08013478 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d106      	bne.n	8013494 <tcp_rexmit_fast+0x1c>
 8013486:	4b2a      	ldr	r3, [pc, #168]	; (8013530 <tcp_rexmit_fast+0xb8>)
 8013488:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801348c:	4929      	ldr	r1, [pc, #164]	; (8013534 <tcp_rexmit_fast+0xbc>)
 801348e:	482a      	ldr	r0, [pc, #168]	; (8013538 <tcp_rexmit_fast+0xc0>)
 8013490:	f005 fd94 	bl	8018fbc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013498:	2b00      	cmp	r3, #0
 801349a:	d045      	beq.n	8013528 <tcp_rexmit_fast+0xb0>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	8b5b      	ldrh	r3, [r3, #26]
 80134a0:	f003 0304 	and.w	r3, r3, #4
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d13f      	bne.n	8013528 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f7ff ff79 	bl	80133a0 <tcp_rexmit>
 80134ae:	4603      	mov	r3, r0
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d139      	bne.n	8013528 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80134c0:	4293      	cmp	r3, r2
 80134c2:	bf28      	it	cs
 80134c4:	4613      	movcs	r3, r2
 80134c6:	b29b      	uxth	r3, r3
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	da00      	bge.n	80134ce <tcp_rexmit_fast+0x56>
 80134cc:	3301      	adds	r3, #1
 80134ce:	105b      	asrs	r3, r3, #1
 80134d0:	b29a      	uxth	r2, r3
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80134de:	461a      	mov	r2, r3
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134e4:	005b      	lsls	r3, r3, #1
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d206      	bcs.n	80134f8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80134ee:	005b      	lsls	r3, r3, #1
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013502:	4619      	mov	r1, r3
 8013504:	0049      	lsls	r1, r1, #1
 8013506:	440b      	add	r3, r1
 8013508:	b29b      	uxth	r3, r3
 801350a:	4413      	add	r3, r2
 801350c:	b29a      	uxth	r2, r3
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8b5b      	ldrh	r3, [r3, #26]
 8013518:	f043 0304 	orr.w	r3, r3, #4
 801351c:	b29a      	uxth	r2, r3
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2200      	movs	r2, #0
 8013526:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013528:	bf00      	nop
 801352a:	3708      	adds	r7, #8
 801352c:	46bd      	mov	sp, r7
 801352e:	bd80      	pop	{r7, pc}
 8013530:	0801b9ec 	.word	0x0801b9ec
 8013534:	0801c0a4 	.word	0x0801c0a4
 8013538:	0801ba40 	.word	0x0801ba40

0801353c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	60f8      	str	r0, [r7, #12]
 8013544:	607b      	str	r3, [r7, #4]
 8013546:	460b      	mov	r3, r1
 8013548:	817b      	strh	r3, [r7, #10]
 801354a:	4613      	mov	r3, r2
 801354c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801354e:	897a      	ldrh	r2, [r7, #10]
 8013550:	893b      	ldrh	r3, [r7, #8]
 8013552:	4413      	add	r3, r2
 8013554:	b29b      	uxth	r3, r3
 8013556:	3314      	adds	r3, #20
 8013558:	b29b      	uxth	r3, r3
 801355a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801355e:	4619      	mov	r1, r3
 8013560:	2022      	movs	r0, #34	; 0x22
 8013562:	f7f9 fcfd 	bl	800cf60 <pbuf_alloc>
 8013566:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d04d      	beq.n	801360a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801356e:	897b      	ldrh	r3, [r7, #10]
 8013570:	3313      	adds	r3, #19
 8013572:	697a      	ldr	r2, [r7, #20]
 8013574:	8952      	ldrh	r2, [r2, #10]
 8013576:	4293      	cmp	r3, r2
 8013578:	db06      	blt.n	8013588 <tcp_output_alloc_header_common+0x4c>
 801357a:	4b26      	ldr	r3, [pc, #152]	; (8013614 <tcp_output_alloc_header_common+0xd8>)
 801357c:	f240 7223 	movw	r2, #1827	; 0x723
 8013580:	4925      	ldr	r1, [pc, #148]	; (8013618 <tcp_output_alloc_header_common+0xdc>)
 8013582:	4826      	ldr	r0, [pc, #152]	; (801361c <tcp_output_alloc_header_common+0xe0>)
 8013584:	f005 fd1a 	bl	8018fbc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801358e:	8c3b      	ldrh	r3, [r7, #32]
 8013590:	4618      	mov	r0, r3
 8013592:	f7f8 fb95 	bl	800bcc0 <lwip_htons>
 8013596:	4603      	mov	r3, r0
 8013598:	461a      	mov	r2, r3
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801359e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f8 fb8d 	bl	800bcc0 <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	461a      	mov	r2, r3
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80135ae:	693b      	ldr	r3, [r7, #16]
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f7f8 fb98 	bl	800bcea <lwip_htonl>
 80135ba:	4602      	mov	r2, r0
 80135bc:	693b      	ldr	r3, [r7, #16]
 80135be:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80135c0:	897b      	ldrh	r3, [r7, #10]
 80135c2:	089b      	lsrs	r3, r3, #2
 80135c4:	b29b      	uxth	r3, r3
 80135c6:	3305      	adds	r3, #5
 80135c8:	b29b      	uxth	r3, r3
 80135ca:	031b      	lsls	r3, r3, #12
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	4313      	orrs	r3, r2
 80135d6:	b29b      	uxth	r3, r3
 80135d8:	4618      	mov	r0, r3
 80135da:	f7f8 fb71 	bl	800bcc0 <lwip_htons>
 80135de:	4603      	mov	r3, r0
 80135e0:	461a      	mov	r2, r3
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80135e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80135e8:	4618      	mov	r0, r3
 80135ea:	f7f8 fb69 	bl	800bcc0 <lwip_htons>
 80135ee:	4603      	mov	r3, r0
 80135f0:	461a      	mov	r2, r3
 80135f2:	693b      	ldr	r3, [r7, #16]
 80135f4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80135f6:	693b      	ldr	r3, [r7, #16]
 80135f8:	2200      	movs	r2, #0
 80135fa:	741a      	strb	r2, [r3, #16]
 80135fc:	2200      	movs	r2, #0
 80135fe:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8013600:	693b      	ldr	r3, [r7, #16]
 8013602:	2200      	movs	r2, #0
 8013604:	749a      	strb	r2, [r3, #18]
 8013606:	2200      	movs	r2, #0
 8013608:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801360a:	697b      	ldr	r3, [r7, #20]
}
 801360c:	4618      	mov	r0, r3
 801360e:	3718      	adds	r7, #24
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	0801b9ec 	.word	0x0801b9ec
 8013618:	0801c0c4 	.word	0x0801c0c4
 801361c:	0801ba40 	.word	0x0801ba40

08013620 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8013620:	b5b0      	push	{r4, r5, r7, lr}
 8013622:	b08a      	sub	sp, #40	; 0x28
 8013624:	af04      	add	r7, sp, #16
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	607b      	str	r3, [r7, #4]
 801362a:	460b      	mov	r3, r1
 801362c:	817b      	strh	r3, [r7, #10]
 801362e:	4613      	mov	r3, r2
 8013630:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d106      	bne.n	8013646 <tcp_output_alloc_header+0x26>
 8013638:	4b15      	ldr	r3, [pc, #84]	; (8013690 <tcp_output_alloc_header+0x70>)
 801363a:	f240 7242 	movw	r2, #1858	; 0x742
 801363e:	4915      	ldr	r1, [pc, #84]	; (8013694 <tcp_output_alloc_header+0x74>)
 8013640:	4815      	ldr	r0, [pc, #84]	; (8013698 <tcp_output_alloc_header+0x78>)
 8013642:	f005 fcbb 	bl	8018fbc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801364a:	68fb      	ldr	r3, [r7, #12]
 801364c:	8adb      	ldrh	r3, [r3, #22]
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	8b12      	ldrh	r2, [r2, #24]
 8013652:	68f9      	ldr	r1, [r7, #12]
 8013654:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013656:	893d      	ldrh	r5, [r7, #8]
 8013658:	897c      	ldrh	r4, [r7, #10]
 801365a:	9103      	str	r1, [sp, #12]
 801365c:	2110      	movs	r1, #16
 801365e:	9102      	str	r1, [sp, #8]
 8013660:	9201      	str	r2, [sp, #4]
 8013662:	9300      	str	r3, [sp, #0]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	462a      	mov	r2, r5
 8013668:	4621      	mov	r1, r4
 801366a:	f7ff ff67 	bl	801353c <tcp_output_alloc_header_common>
 801366e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8013670:	697b      	ldr	r3, [r7, #20]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d006      	beq.n	8013684 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801367a:	68fa      	ldr	r2, [r7, #12]
 801367c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801367e:	441a      	add	r2, r3
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8013684:	697b      	ldr	r3, [r7, #20]
}
 8013686:	4618      	mov	r0, r3
 8013688:	3718      	adds	r7, #24
 801368a:	46bd      	mov	sp, r7
 801368c:	bdb0      	pop	{r4, r5, r7, pc}
 801368e:	bf00      	nop
 8013690:	0801b9ec 	.word	0x0801b9ec
 8013694:	0801c0f4 	.word	0x0801c0f4
 8013698:	0801ba40 	.word	0x0801ba40

0801369c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b088      	sub	sp, #32
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	4611      	mov	r1, r2
 80136a8:	461a      	mov	r2, r3
 80136aa:	460b      	mov	r3, r1
 80136ac:	71fb      	strb	r3, [r7, #7]
 80136ae:	4613      	mov	r3, r2
 80136b0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80136b2:	2300      	movs	r3, #0
 80136b4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80136b6:	68bb      	ldr	r3, [r7, #8]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d106      	bne.n	80136ca <tcp_output_fill_options+0x2e>
 80136bc:	4b12      	ldr	r3, [pc, #72]	; (8013708 <tcp_output_fill_options+0x6c>)
 80136be:	f240 7256 	movw	r2, #1878	; 0x756
 80136c2:	4912      	ldr	r1, [pc, #72]	; (801370c <tcp_output_fill_options+0x70>)
 80136c4:	4812      	ldr	r0, [pc, #72]	; (8013710 <tcp_output_fill_options+0x74>)
 80136c6:	f005 fc79 	bl	8018fbc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80136ca:	68bb      	ldr	r3, [r7, #8]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	3314      	adds	r3, #20
 80136d4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80136d6:	8bfb      	ldrh	r3, [r7, #30]
 80136d8:	009b      	lsls	r3, r3, #2
 80136da:	461a      	mov	r2, r3
 80136dc:	79fb      	ldrb	r3, [r7, #7]
 80136de:	009b      	lsls	r3, r3, #2
 80136e0:	f003 0304 	and.w	r3, r3, #4
 80136e4:	4413      	add	r3, r2
 80136e6:	3314      	adds	r3, #20
 80136e8:	69ba      	ldr	r2, [r7, #24]
 80136ea:	4413      	add	r3, r2
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d006      	beq.n	8013700 <tcp_output_fill_options+0x64>
 80136f2:	4b05      	ldr	r3, [pc, #20]	; (8013708 <tcp_output_fill_options+0x6c>)
 80136f4:	f240 7275 	movw	r2, #1909	; 0x775
 80136f8:	4906      	ldr	r1, [pc, #24]	; (8013714 <tcp_output_fill_options+0x78>)
 80136fa:	4805      	ldr	r0, [pc, #20]	; (8013710 <tcp_output_fill_options+0x74>)
 80136fc:	f005 fc5e 	bl	8018fbc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8013700:	bf00      	nop
 8013702:	3720      	adds	r7, #32
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}
 8013708:	0801b9ec 	.word	0x0801b9ec
 801370c:	0801c11c 	.word	0x0801c11c
 8013710:	0801ba40 	.word	0x0801ba40
 8013714:	0801c014 	.word	0x0801c014

08013718 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b08a      	sub	sp, #40	; 0x28
 801371c:	af04      	add	r7, sp, #16
 801371e:	60f8      	str	r0, [r7, #12]
 8013720:	60b9      	str	r1, [r7, #8]
 8013722:	607a      	str	r2, [r7, #4]
 8013724:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013726:	68bb      	ldr	r3, [r7, #8]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d106      	bne.n	801373a <tcp_output_control_segment+0x22>
 801372c:	4b1c      	ldr	r3, [pc, #112]	; (80137a0 <tcp_output_control_segment+0x88>)
 801372e:	f240 7287 	movw	r2, #1927	; 0x787
 8013732:	491c      	ldr	r1, [pc, #112]	; (80137a4 <tcp_output_control_segment+0x8c>)
 8013734:	481c      	ldr	r0, [pc, #112]	; (80137a8 <tcp_output_control_segment+0x90>)
 8013736:	f005 fc41 	bl	8018fbc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801373a:	683a      	ldr	r2, [r7, #0]
 801373c:	6879      	ldr	r1, [r7, #4]
 801373e:	68f8      	ldr	r0, [r7, #12]
 8013740:	f7fe fae8 	bl	8011d14 <tcp_route>
 8013744:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013746:	693b      	ldr	r3, [r7, #16]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d102      	bne.n	8013752 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801374c:	23fc      	movs	r3, #252	; 0xfc
 801374e:	75fb      	strb	r3, [r7, #23]
 8013750:	e01c      	b.n	801378c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d006      	beq.n	8013766 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	7adb      	ldrb	r3, [r3, #11]
 801375c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	7a9b      	ldrb	r3, [r3, #10]
 8013762:	757b      	strb	r3, [r7, #21]
 8013764:	e003      	b.n	801376e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013766:	23ff      	movs	r3, #255	; 0xff
 8013768:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801376a:	2300      	movs	r3, #0
 801376c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801376e:	7dba      	ldrb	r2, [r7, #22]
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	9302      	str	r3, [sp, #8]
 8013774:	2306      	movs	r3, #6
 8013776:	9301      	str	r3, [sp, #4]
 8013778:	7d7b      	ldrb	r3, [r7, #21]
 801377a:	9300      	str	r3, [sp, #0]
 801377c:	4613      	mov	r3, r2
 801377e:	683a      	ldr	r2, [r7, #0]
 8013780:	6879      	ldr	r1, [r7, #4]
 8013782:	68b8      	ldr	r0, [r7, #8]
 8013784:	f004 f958 	bl	8017a38 <ip4_output_if>
 8013788:	4603      	mov	r3, r0
 801378a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801378c:	68b8      	ldr	r0, [r7, #8]
 801378e:	f7f9 fecb 	bl	800d528 <pbuf_free>
  return err;
 8013792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013796:	4618      	mov	r0, r3
 8013798:	3718      	adds	r7, #24
 801379a:	46bd      	mov	sp, r7
 801379c:	bd80      	pop	{r7, pc}
 801379e:	bf00      	nop
 80137a0:	0801b9ec 	.word	0x0801b9ec
 80137a4:	0801c144 	.word	0x0801c144
 80137a8:	0801ba40 	.word	0x0801ba40

080137ac <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80137ac:	b590      	push	{r4, r7, lr}
 80137ae:	b08b      	sub	sp, #44	; 0x2c
 80137b0:	af04      	add	r7, sp, #16
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
 80137b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d106      	bne.n	80137ce <tcp_rst+0x22>
 80137c0:	4b1f      	ldr	r3, [pc, #124]	; (8013840 <tcp_rst+0x94>)
 80137c2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80137c6:	491f      	ldr	r1, [pc, #124]	; (8013844 <tcp_rst+0x98>)
 80137c8:	481f      	ldr	r0, [pc, #124]	; (8013848 <tcp_rst+0x9c>)
 80137ca:	f005 fbf7 	bl	8018fbc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80137ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d106      	bne.n	80137e2 <tcp_rst+0x36>
 80137d4:	4b1a      	ldr	r3, [pc, #104]	; (8013840 <tcp_rst+0x94>)
 80137d6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80137da:	491c      	ldr	r1, [pc, #112]	; (801384c <tcp_rst+0xa0>)
 80137dc:	481a      	ldr	r0, [pc, #104]	; (8013848 <tcp_rst+0x9c>)
 80137de:	f005 fbed 	bl	8018fbc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137e2:	2300      	movs	r3, #0
 80137e4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80137e6:	f246 0308 	movw	r3, #24584	; 0x6008
 80137ea:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80137ec:	7dfb      	ldrb	r3, [r7, #23]
 80137ee:	b29c      	uxth	r4, r3
 80137f0:	68b8      	ldr	r0, [r7, #8]
 80137f2:	f7f8 fa7a 	bl	800bcea <lwip_htonl>
 80137f6:	4602      	mov	r2, r0
 80137f8:	8abb      	ldrh	r3, [r7, #20]
 80137fa:	9303      	str	r3, [sp, #12]
 80137fc:	2314      	movs	r3, #20
 80137fe:	9302      	str	r3, [sp, #8]
 8013800:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8013802:	9301      	str	r3, [sp, #4]
 8013804:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013806:	9300      	str	r3, [sp, #0]
 8013808:	4613      	mov	r3, r2
 801380a:	2200      	movs	r2, #0
 801380c:	4621      	mov	r1, r4
 801380e:	6878      	ldr	r0, [r7, #4]
 8013810:	f7ff fe94 	bl	801353c <tcp_output_alloc_header_common>
 8013814:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	2b00      	cmp	r3, #0
 801381a:	d00c      	beq.n	8013836 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801381c:	7dfb      	ldrb	r3, [r7, #23]
 801381e:	2200      	movs	r2, #0
 8013820:	6939      	ldr	r1, [r7, #16]
 8013822:	68f8      	ldr	r0, [r7, #12]
 8013824:	f7ff ff3a 	bl	801369c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382a:	683a      	ldr	r2, [r7, #0]
 801382c:	6939      	ldr	r1, [r7, #16]
 801382e:	68f8      	ldr	r0, [r7, #12]
 8013830:	f7ff ff72 	bl	8013718 <tcp_output_control_segment>
 8013834:	e000      	b.n	8013838 <tcp_rst+0x8c>
    return;
 8013836:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013838:	371c      	adds	r7, #28
 801383a:	46bd      	mov	sp, r7
 801383c:	bd90      	pop	{r4, r7, pc}
 801383e:	bf00      	nop
 8013840:	0801b9ec 	.word	0x0801b9ec
 8013844:	0801c170 	.word	0x0801c170
 8013848:	0801ba40 	.word	0x0801ba40
 801384c:	0801c18c 	.word	0x0801c18c

08013850 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8013850:	b590      	push	{r4, r7, lr}
 8013852:	b087      	sub	sp, #28
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013858:	2300      	movs	r3, #0
 801385a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801385c:	2300      	movs	r3, #0
 801385e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d106      	bne.n	8013874 <tcp_send_empty_ack+0x24>
 8013866:	4b28      	ldr	r3, [pc, #160]	; (8013908 <tcp_send_empty_ack+0xb8>)
 8013868:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801386c:	4927      	ldr	r1, [pc, #156]	; (801390c <tcp_send_empty_ack+0xbc>)
 801386e:	4828      	ldr	r0, [pc, #160]	; (8013910 <tcp_send_empty_ack+0xc0>)
 8013870:	f005 fba4 	bl	8018fbc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013874:	7dfb      	ldrb	r3, [r7, #23]
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	b2db      	uxtb	r3, r3
 801387a:	f003 0304 	and.w	r3, r3, #4
 801387e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8013880:	7d7b      	ldrb	r3, [r7, #21]
 8013882:	b29c      	uxth	r4, r3
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013888:	4618      	mov	r0, r3
 801388a:	f7f8 fa2e 	bl	800bcea <lwip_htonl>
 801388e:	4603      	mov	r3, r0
 8013890:	2200      	movs	r2, #0
 8013892:	4621      	mov	r1, r4
 8013894:	6878      	ldr	r0, [r7, #4]
 8013896:	f7ff fec3 	bl	8013620 <tcp_output_alloc_header>
 801389a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801389c:	693b      	ldr	r3, [r7, #16]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d109      	bne.n	80138b6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	8b5b      	ldrh	r3, [r3, #26]
 80138a6:	f043 0303 	orr.w	r3, r3, #3
 80138aa:	b29a      	uxth	r2, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80138b0:	f06f 0301 	mvn.w	r3, #1
 80138b4:	e023      	b.n	80138fe <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80138b6:	7dbb      	ldrb	r3, [r7, #22]
 80138b8:	7dfa      	ldrb	r2, [r7, #23]
 80138ba:	6939      	ldr	r1, [r7, #16]
 80138bc:	6878      	ldr	r0, [r7, #4]
 80138be:	f7ff feed 	bl	801369c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80138c2:	687a      	ldr	r2, [r7, #4]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	3304      	adds	r3, #4
 80138c8:	6939      	ldr	r1, [r7, #16]
 80138ca:	6878      	ldr	r0, [r7, #4]
 80138cc:	f7ff ff24 	bl	8013718 <tcp_output_control_segment>
 80138d0:	4603      	mov	r3, r0
 80138d2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80138d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d007      	beq.n	80138ec <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	8b5b      	ldrh	r3, [r3, #26]
 80138e0:	f043 0303 	orr.w	r3, r3, #3
 80138e4:	b29a      	uxth	r2, r3
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	835a      	strh	r2, [r3, #26]
 80138ea:	e006      	b.n	80138fa <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	8b5b      	ldrh	r3, [r3, #26]
 80138f0:	f023 0303 	bic.w	r3, r3, #3
 80138f4:	b29a      	uxth	r2, r3
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80138fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80138fe:	4618      	mov	r0, r3
 8013900:	371c      	adds	r7, #28
 8013902:	46bd      	mov	sp, r7
 8013904:	bd90      	pop	{r4, r7, pc}
 8013906:	bf00      	nop
 8013908:	0801b9ec 	.word	0x0801b9ec
 801390c:	0801c1a8 	.word	0x0801c1a8
 8013910:	0801ba40 	.word	0x0801ba40

08013914 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013914:	b590      	push	{r4, r7, lr}
 8013916:	b087      	sub	sp, #28
 8013918:	af00      	add	r7, sp, #0
 801391a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801391c:	2300      	movs	r3, #0
 801391e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d106      	bne.n	8013934 <tcp_keepalive+0x20>
 8013926:	4b18      	ldr	r3, [pc, #96]	; (8013988 <tcp_keepalive+0x74>)
 8013928:	f640 0224 	movw	r2, #2084	; 0x824
 801392c:	4917      	ldr	r1, [pc, #92]	; (801398c <tcp_keepalive+0x78>)
 801392e:	4818      	ldr	r0, [pc, #96]	; (8013990 <tcp_keepalive+0x7c>)
 8013930:	f005 fb44 	bl	8018fbc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013934:	7dfb      	ldrb	r3, [r7, #23]
 8013936:	b29c      	uxth	r4, r3
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801393c:	3b01      	subs	r3, #1
 801393e:	4618      	mov	r0, r3
 8013940:	f7f8 f9d3 	bl	800bcea <lwip_htonl>
 8013944:	4603      	mov	r3, r0
 8013946:	2200      	movs	r2, #0
 8013948:	4621      	mov	r1, r4
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff fe68 	bl	8013620 <tcp_output_alloc_header>
 8013950:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013952:	693b      	ldr	r3, [r7, #16]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d102      	bne.n	801395e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013958:	f04f 33ff 	mov.w	r3, #4294967295
 801395c:	e010      	b.n	8013980 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801395e:	7dfb      	ldrb	r3, [r7, #23]
 8013960:	2200      	movs	r2, #0
 8013962:	6939      	ldr	r1, [r7, #16]
 8013964:	6878      	ldr	r0, [r7, #4]
 8013966:	f7ff fe99 	bl	801369c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801396a:	687a      	ldr	r2, [r7, #4]
 801396c:	687b      	ldr	r3, [r7, #4]
 801396e:	3304      	adds	r3, #4
 8013970:	6939      	ldr	r1, [r7, #16]
 8013972:	6878      	ldr	r0, [r7, #4]
 8013974:	f7ff fed0 	bl	8013718 <tcp_output_control_segment>
 8013978:	4603      	mov	r3, r0
 801397a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801397c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013980:	4618      	mov	r0, r3
 8013982:	371c      	adds	r7, #28
 8013984:	46bd      	mov	sp, r7
 8013986:	bd90      	pop	{r4, r7, pc}
 8013988:	0801b9ec 	.word	0x0801b9ec
 801398c:	0801c1c8 	.word	0x0801c1c8
 8013990:	0801ba40 	.word	0x0801ba40

08013994 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8013994:	b590      	push	{r4, r7, lr}
 8013996:	b08b      	sub	sp, #44	; 0x2c
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801399c:	2300      	movs	r3, #0
 801399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d106      	bne.n	80139b6 <tcp_zero_window_probe+0x22>
 80139a8:	4b4c      	ldr	r3, [pc, #304]	; (8013adc <tcp_zero_window_probe+0x148>)
 80139aa:	f640 024f 	movw	r2, #2127	; 0x84f
 80139ae:	494c      	ldr	r1, [pc, #304]	; (8013ae0 <tcp_zero_window_probe+0x14c>)
 80139b0:	484c      	ldr	r0, [pc, #304]	; (8013ae4 <tcp_zero_window_probe+0x150>)
 80139b2:	f005 fb03 	bl	8018fbc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139ba:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80139bc:	6a3b      	ldr	r3, [r7, #32]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d101      	bne.n	80139c6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80139c2:	2300      	movs	r3, #0
 80139c4:	e086      	b.n	8013ad4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80139cc:	2bff      	cmp	r3, #255	; 0xff
 80139ce:	d007      	beq.n	80139e0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80139d6:	3301      	adds	r3, #1
 80139d8:	b2da      	uxtb	r2, r3
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80139e0:	6a3b      	ldr	r3, [r7, #32]
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	899b      	ldrh	r3, [r3, #12]
 80139e6:	b29b      	uxth	r3, r3
 80139e8:	4618      	mov	r0, r3
 80139ea:	f7f8 f969 	bl	800bcc0 <lwip_htons>
 80139ee:	4603      	mov	r3, r0
 80139f0:	b2db      	uxtb	r3, r3
 80139f2:	f003 0301 	and.w	r3, r3, #1
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d005      	beq.n	8013a06 <tcp_zero_window_probe+0x72>
 80139fa:	6a3b      	ldr	r3, [r7, #32]
 80139fc:	891b      	ldrh	r3, [r3, #8]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d101      	bne.n	8013a06 <tcp_zero_window_probe+0x72>
 8013a02:	2301      	movs	r3, #1
 8013a04:	e000      	b.n	8013a08 <tcp_zero_window_probe+0x74>
 8013a06:	2300      	movs	r3, #0
 8013a08:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013a0a:	7ffb      	ldrb	r3, [r7, #31]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	bf0c      	ite	eq
 8013a10:	2301      	moveq	r3, #1
 8013a12:	2300      	movne	r3, #0
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a1c:	b299      	uxth	r1, r3
 8013a1e:	6a3b      	ldr	r3, [r7, #32]
 8013a20:	68db      	ldr	r3, [r3, #12]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	8bba      	ldrh	r2, [r7, #28]
 8013a26:	6878      	ldr	r0, [r7, #4]
 8013a28:	f7ff fdfa 	bl	8013620 <tcp_output_alloc_header>
 8013a2c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8013a2e:	69bb      	ldr	r3, [r7, #24]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d102      	bne.n	8013a3a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013a34:	f04f 33ff 	mov.w	r3, #4294967295
 8013a38:	e04c      	b.n	8013ad4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013a3a:	69bb      	ldr	r3, [r7, #24]
 8013a3c:	685b      	ldr	r3, [r3, #4]
 8013a3e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8013a40:	7ffb      	ldrb	r3, [r7, #31]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d011      	beq.n	8013a6a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	899b      	ldrh	r3, [r3, #12]
 8013a4a:	b29b      	uxth	r3, r3
 8013a4c:	b21b      	sxth	r3, r3
 8013a4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013a52:	b21c      	sxth	r4, r3
 8013a54:	2011      	movs	r0, #17
 8013a56:	f7f8 f933 	bl	800bcc0 <lwip_htons>
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	b21b      	sxth	r3, r3
 8013a5e:	4323      	orrs	r3, r4
 8013a60:	b21b      	sxth	r3, r3
 8013a62:	b29a      	uxth	r2, r3
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	819a      	strh	r2, [r3, #12]
 8013a68:	e010      	b.n	8013a8c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	685b      	ldr	r3, [r3, #4]
 8013a6e:	3314      	adds	r3, #20
 8013a70:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8013a72:	6a3b      	ldr	r3, [r7, #32]
 8013a74:	6858      	ldr	r0, [r3, #4]
 8013a76:	6a3b      	ldr	r3, [r7, #32]
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	891a      	ldrh	r2, [r3, #8]
 8013a7c:	6a3b      	ldr	r3, [r7, #32]
 8013a7e:	891b      	ldrh	r3, [r3, #8]
 8013a80:	1ad3      	subs	r3, r2, r3
 8013a82:	b29b      	uxth	r3, r3
 8013a84:	2201      	movs	r2, #1
 8013a86:	6939      	ldr	r1, [r7, #16]
 8013a88:	f7f9 ff54 	bl	800d934 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8013a8c:	6a3b      	ldr	r3, [r7, #32]
 8013a8e:	68db      	ldr	r3, [r3, #12]
 8013a90:	685b      	ldr	r3, [r3, #4]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f7f8 f929 	bl	800bcea <lwip_htonl>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	3301      	adds	r3, #1
 8013a9c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	1ad3      	subs	r3, r2, r3
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	da02      	bge.n	8013ab0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	68fa      	ldr	r2, [r7, #12]
 8013aae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ab4:	2200      	movs	r2, #0
 8013ab6:	69b9      	ldr	r1, [r7, #24]
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7ff fdef 	bl	801369c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013abe:	687a      	ldr	r2, [r7, #4]
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	3304      	adds	r3, #4
 8013ac4:	69b9      	ldr	r1, [r7, #24]
 8013ac6:	6878      	ldr	r0, [r7, #4]
 8013ac8:	f7ff fe26 	bl	8013718 <tcp_output_control_segment>
 8013acc:	4603      	mov	r3, r0
 8013ace:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013ad0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	372c      	adds	r7, #44	; 0x2c
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd90      	pop	{r4, r7, pc}
 8013adc:	0801b9ec 	.word	0x0801b9ec
 8013ae0:	0801c1e4 	.word	0x0801c1e4
 8013ae4:	0801ba40 	.word	0x0801ba40

08013ae8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b082      	sub	sp, #8
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8013af0:	f7fa f80e 	bl	800db10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013af4:	4b0a      	ldr	r3, [pc, #40]	; (8013b20 <tcpip_tcp_timer+0x38>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d103      	bne.n	8013b04 <tcpip_tcp_timer+0x1c>
 8013afc:	4b09      	ldr	r3, [pc, #36]	; (8013b24 <tcpip_tcp_timer+0x3c>)
 8013afe:	681b      	ldr	r3, [r3, #0]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d005      	beq.n	8013b10 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013b04:	2200      	movs	r2, #0
 8013b06:	4908      	ldr	r1, [pc, #32]	; (8013b28 <tcpip_tcp_timer+0x40>)
 8013b08:	20fa      	movs	r0, #250	; 0xfa
 8013b0a:	f000 f8f3 	bl	8013cf4 <sys_timeout>
 8013b0e:	e003      	b.n	8013b18 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8013b10:	4b06      	ldr	r3, [pc, #24]	; (8013b2c <tcpip_tcp_timer+0x44>)
 8013b12:	2200      	movs	r2, #0
 8013b14:	601a      	str	r2, [r3, #0]
  }
}
 8013b16:	bf00      	nop
 8013b18:	bf00      	nop
 8013b1a:	3708      	adds	r7, #8
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	2000cee8 	.word	0x2000cee8
 8013b24:	2000ceec 	.word	0x2000ceec
 8013b28:	08013ae9 	.word	0x08013ae9
 8013b2c:	2000cf34 	.word	0x2000cf34

08013b30 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013b34:	4b0a      	ldr	r3, [pc, #40]	; (8013b60 <tcp_timer_needed+0x30>)
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d10f      	bne.n	8013b5c <tcp_timer_needed+0x2c>
 8013b3c:	4b09      	ldr	r3, [pc, #36]	; (8013b64 <tcp_timer_needed+0x34>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d103      	bne.n	8013b4c <tcp_timer_needed+0x1c>
 8013b44:	4b08      	ldr	r3, [pc, #32]	; (8013b68 <tcp_timer_needed+0x38>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d007      	beq.n	8013b5c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013b4c:	4b04      	ldr	r3, [pc, #16]	; (8013b60 <tcp_timer_needed+0x30>)
 8013b4e:	2201      	movs	r2, #1
 8013b50:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013b52:	2200      	movs	r2, #0
 8013b54:	4905      	ldr	r1, [pc, #20]	; (8013b6c <tcp_timer_needed+0x3c>)
 8013b56:	20fa      	movs	r0, #250	; 0xfa
 8013b58:	f000 f8cc 	bl	8013cf4 <sys_timeout>
  }
}
 8013b5c:	bf00      	nop
 8013b5e:	bd80      	pop	{r7, pc}
 8013b60:	2000cf34 	.word	0x2000cf34
 8013b64:	2000cee8 	.word	0x2000cee8
 8013b68:	2000ceec 	.word	0x2000ceec
 8013b6c:	08013ae9 	.word	0x08013ae9

08013b70 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8013b70:	b580      	push	{r7, lr}
 8013b72:	b086      	sub	sp, #24
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	60f8      	str	r0, [r7, #12]
 8013b78:	60b9      	str	r1, [r7, #8]
 8013b7a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013b7c:	200a      	movs	r0, #10
 8013b7e:	f7f8 fdad 	bl	800c6dc <memp_malloc>
 8013b82:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d109      	bne.n	8013b9e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d151      	bne.n	8013c34 <sys_timeout_abs+0xc4>
 8013b90:	4b2a      	ldr	r3, [pc, #168]	; (8013c3c <sys_timeout_abs+0xcc>)
 8013b92:	22be      	movs	r2, #190	; 0xbe
 8013b94:	492a      	ldr	r1, [pc, #168]	; (8013c40 <sys_timeout_abs+0xd0>)
 8013b96:	482b      	ldr	r0, [pc, #172]	; (8013c44 <sys_timeout_abs+0xd4>)
 8013b98:	f005 fa10 	bl	8018fbc <iprintf>
    return;
 8013b9c:	e04a      	b.n	8013c34 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8013b9e:	693b      	ldr	r3, [r7, #16]
 8013ba0:	2200      	movs	r2, #0
 8013ba2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8013ba4:	693b      	ldr	r3, [r7, #16]
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8013baa:	693b      	ldr	r3, [r7, #16]
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8013bb0:	693b      	ldr	r3, [r7, #16]
 8013bb2:	68fa      	ldr	r2, [r7, #12]
 8013bb4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8013bb6:	4b24      	ldr	r3, [pc, #144]	; (8013c48 <sys_timeout_abs+0xd8>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d103      	bne.n	8013bc6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8013bbe:	4a22      	ldr	r2, [pc, #136]	; (8013c48 <sys_timeout_abs+0xd8>)
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	6013      	str	r3, [r2, #0]
    return;
 8013bc4:	e037      	b.n	8013c36 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8013bc6:	693b      	ldr	r3, [r7, #16]
 8013bc8:	685a      	ldr	r2, [r3, #4]
 8013bca:	4b1f      	ldr	r3, [pc, #124]	; (8013c48 <sys_timeout_abs+0xd8>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	685b      	ldr	r3, [r3, #4]
 8013bd0:	1ad3      	subs	r3, r2, r3
 8013bd2:	0fdb      	lsrs	r3, r3, #31
 8013bd4:	f003 0301 	and.w	r3, r3, #1
 8013bd8:	b2db      	uxtb	r3, r3
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d007      	beq.n	8013bee <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8013bde:	4b1a      	ldr	r3, [pc, #104]	; (8013c48 <sys_timeout_abs+0xd8>)
 8013be0:	681a      	ldr	r2, [r3, #0]
 8013be2:	693b      	ldr	r3, [r7, #16]
 8013be4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013be6:	4a18      	ldr	r2, [pc, #96]	; (8013c48 <sys_timeout_abs+0xd8>)
 8013be8:	693b      	ldr	r3, [r7, #16]
 8013bea:	6013      	str	r3, [r2, #0]
 8013bec:	e023      	b.n	8013c36 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013bee:	4b16      	ldr	r3, [pc, #88]	; (8013c48 <sys_timeout_abs+0xd8>)
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	617b      	str	r3, [r7, #20]
 8013bf4:	e01a      	b.n	8013c2c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013bf6:	697b      	ldr	r3, [r7, #20]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d00b      	beq.n	8013c16 <sys_timeout_abs+0xa6>
 8013bfe:	693b      	ldr	r3, [r7, #16]
 8013c00:	685a      	ldr	r2, [r3, #4]
 8013c02:	697b      	ldr	r3, [r7, #20]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	685b      	ldr	r3, [r3, #4]
 8013c08:	1ad3      	subs	r3, r2, r3
 8013c0a:	0fdb      	lsrs	r3, r3, #31
 8013c0c:	f003 0301 	and.w	r3, r3, #1
 8013c10:	b2db      	uxtb	r3, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d007      	beq.n	8013c26 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	681a      	ldr	r2, [r3, #0]
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	693a      	ldr	r2, [r7, #16]
 8013c22:	601a      	str	r2, [r3, #0]
        break;
 8013c24:	e007      	b.n	8013c36 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013c26:	697b      	ldr	r3, [r7, #20]
 8013c28:	681b      	ldr	r3, [r3, #0]
 8013c2a:	617b      	str	r3, [r7, #20]
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d1e1      	bne.n	8013bf6 <sys_timeout_abs+0x86>
 8013c32:	e000      	b.n	8013c36 <sys_timeout_abs+0xc6>
    return;
 8013c34:	bf00      	nop
      }
    }
  }
}
 8013c36:	3718      	adds	r7, #24
 8013c38:	46bd      	mov	sp, r7
 8013c3a:	bd80      	pop	{r7, pc}
 8013c3c:	0801c208 	.word	0x0801c208
 8013c40:	0801c23c 	.word	0x0801c23c
 8013c44:	0801c27c 	.word	0x0801c27c
 8013c48:	2000cf2c 	.word	0x2000cf2c

08013c4c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b086      	sub	sp, #24
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	685b      	ldr	r3, [r3, #4]
 8013c5c:	4798      	blx	r3

  now = sys_now();
 8013c5e:	f7f3 fa45 	bl	80070ec <sys_now>
 8013c62:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	4b0f      	ldr	r3, [pc, #60]	; (8013ca8 <lwip_cyclic_timer+0x5c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	4413      	add	r3, r2
 8013c6e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013c70:	68fa      	ldr	r2, [r7, #12]
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	1ad3      	subs	r3, r2, r3
 8013c76:	0fdb      	lsrs	r3, r3, #31
 8013c78:	f003 0301 	and.w	r3, r3, #1
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d009      	beq.n	8013c96 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013c82:	697b      	ldr	r3, [r7, #20]
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	693b      	ldr	r3, [r7, #16]
 8013c88:	4413      	add	r3, r2
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	4907      	ldr	r1, [pc, #28]	; (8013cac <lwip_cyclic_timer+0x60>)
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f7ff ff6e 	bl	8013b70 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013c94:	e004      	b.n	8013ca0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013c96:	687a      	ldr	r2, [r7, #4]
 8013c98:	4904      	ldr	r1, [pc, #16]	; (8013cac <lwip_cyclic_timer+0x60>)
 8013c9a:	68f8      	ldr	r0, [r7, #12]
 8013c9c:	f7ff ff68 	bl	8013b70 <sys_timeout_abs>
}
 8013ca0:	bf00      	nop
 8013ca2:	3718      	adds	r7, #24
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	2000cf30 	.word	0x2000cf30
 8013cac:	08013c4d 	.word	0x08013c4d

08013cb0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b082      	sub	sp, #8
 8013cb4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	607b      	str	r3, [r7, #4]
 8013cba:	e00e      	b.n	8013cda <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013cbc:	4a0b      	ldr	r2, [pc, #44]	; (8013cec <sys_timeouts_init+0x3c>)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	00db      	lsls	r3, r3, #3
 8013cc8:	4a08      	ldr	r2, [pc, #32]	; (8013cec <sys_timeouts_init+0x3c>)
 8013cca:	4413      	add	r3, r2
 8013ccc:	461a      	mov	r2, r3
 8013cce:	4908      	ldr	r1, [pc, #32]	; (8013cf0 <sys_timeouts_init+0x40>)
 8013cd0:	f000 f810 	bl	8013cf4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	607b      	str	r3, [r7, #4]
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2b04      	cmp	r3, #4
 8013cde:	d9ed      	bls.n	8013cbc <sys_timeouts_init+0xc>
  }
}
 8013ce0:	bf00      	nop
 8013ce2:	bf00      	nop
 8013ce4:	3708      	adds	r7, #8
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}
 8013cea:	bf00      	nop
 8013cec:	0801f59c 	.word	0x0801f59c
 8013cf0:	08013c4d 	.word	0x08013c4d

08013cf4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013cf4:	b580      	push	{r7, lr}
 8013cf6:	b086      	sub	sp, #24
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	60f8      	str	r0, [r7, #12]
 8013cfc:	60b9      	str	r1, [r7, #8]
 8013cfe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d06:	d306      	bcc.n	8013d16 <sys_timeout+0x22>
 8013d08:	4b0a      	ldr	r3, [pc, #40]	; (8013d34 <sys_timeout+0x40>)
 8013d0a:	f240 1229 	movw	r2, #297	; 0x129
 8013d0e:	490a      	ldr	r1, [pc, #40]	; (8013d38 <sys_timeout+0x44>)
 8013d10:	480a      	ldr	r0, [pc, #40]	; (8013d3c <sys_timeout+0x48>)
 8013d12:	f005 f953 	bl	8018fbc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013d16:	f7f3 f9e9 	bl	80070ec <sys_now>
 8013d1a:	4602      	mov	r2, r0
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	4413      	add	r3, r2
 8013d20:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	68b9      	ldr	r1, [r7, #8]
 8013d26:	6978      	ldr	r0, [r7, #20]
 8013d28:	f7ff ff22 	bl	8013b70 <sys_timeout_abs>
#endif
}
 8013d2c:	bf00      	nop
 8013d2e:	3718      	adds	r7, #24
 8013d30:	46bd      	mov	sp, r7
 8013d32:	bd80      	pop	{r7, pc}
 8013d34:	0801c208 	.word	0x0801c208
 8013d38:	0801c2a4 	.word	0x0801c2a4
 8013d3c:	0801c27c 	.word	0x0801c27c

08013d40 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b084      	sub	sp, #16
 8013d44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013d46:	f7f3 f9d1 	bl	80070ec <sys_now>
 8013d4a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013d4c:	4b17      	ldr	r3, [pc, #92]	; (8013dac <sys_check_timeouts+0x6c>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	d022      	beq.n	8013d9e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013d58:	68bb      	ldr	r3, [r7, #8]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	68fa      	ldr	r2, [r7, #12]
 8013d5e:	1ad3      	subs	r3, r2, r3
 8013d60:	0fdb      	lsrs	r3, r3, #31
 8013d62:	f003 0301 	and.w	r3, r3, #1
 8013d66:	b2db      	uxtb	r3, r3
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d11a      	bne.n	8013da2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	4a0e      	ldr	r2, [pc, #56]	; (8013dac <sys_check_timeouts+0x6c>)
 8013d72:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	689b      	ldr	r3, [r3, #8]
 8013d78:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	68db      	ldr	r3, [r3, #12]
 8013d7e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013d80:	68bb      	ldr	r3, [r7, #8]
 8013d82:	685b      	ldr	r3, [r3, #4]
 8013d84:	4a0a      	ldr	r2, [pc, #40]	; (8013db0 <sys_check_timeouts+0x70>)
 8013d86:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013d88:	68b9      	ldr	r1, [r7, #8]
 8013d8a:	200a      	movs	r0, #10
 8013d8c:	f7f8 fd1c 	bl	800c7c8 <memp_free>
    if (handler != NULL) {
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d0da      	beq.n	8013d4c <sys_check_timeouts+0xc>
      handler(arg);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	6838      	ldr	r0, [r7, #0]
 8013d9a:	4798      	blx	r3
  do {
 8013d9c:	e7d6      	b.n	8013d4c <sys_check_timeouts+0xc>
      return;
 8013d9e:	bf00      	nop
 8013da0:	e000      	b.n	8013da4 <sys_check_timeouts+0x64>
      return;
 8013da2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013da4:	3710      	adds	r7, #16
 8013da6:	46bd      	mov	sp, r7
 8013da8:	bd80      	pop	{r7, pc}
 8013daa:	bf00      	nop
 8013dac:	2000cf2c 	.word	0x2000cf2c
 8013db0:	2000cf30 	.word	0x2000cf30

08013db4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b082      	sub	sp, #8
 8013db8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013dba:	4b16      	ldr	r3, [pc, #88]	; (8013e14 <sys_timeouts_sleeptime+0x60>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d102      	bne.n	8013dc8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8013dc6:	e020      	b.n	8013e0a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013dc8:	f7f3 f990 	bl	80070ec <sys_now>
 8013dcc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013dce:	4b11      	ldr	r3, [pc, #68]	; (8013e14 <sys_timeouts_sleeptime+0x60>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	685a      	ldr	r2, [r3, #4]
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	0fdb      	lsrs	r3, r3, #31
 8013dda:	f003 0301 	and.w	r3, r3, #1
 8013dde:	b2db      	uxtb	r3, r3
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d001      	beq.n	8013de8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013de4:	2300      	movs	r3, #0
 8013de6:	e010      	b.n	8013e0a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013de8:	4b0a      	ldr	r3, [pc, #40]	; (8013e14 <sys_timeouts_sleeptime+0x60>)
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	685a      	ldr	r2, [r3, #4]
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	1ad3      	subs	r3, r2, r3
 8013df2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	da06      	bge.n	8013e08 <sys_timeouts_sleeptime+0x54>
 8013dfa:	4b07      	ldr	r3, [pc, #28]	; (8013e18 <sys_timeouts_sleeptime+0x64>)
 8013dfc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013e00:	4906      	ldr	r1, [pc, #24]	; (8013e1c <sys_timeouts_sleeptime+0x68>)
 8013e02:	4807      	ldr	r0, [pc, #28]	; (8013e20 <sys_timeouts_sleeptime+0x6c>)
 8013e04:	f005 f8da 	bl	8018fbc <iprintf>
    return ret;
 8013e08:	683b      	ldr	r3, [r7, #0]
  }
}
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	3708      	adds	r7, #8
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd80      	pop	{r7, pc}
 8013e12:	bf00      	nop
 8013e14:	2000cf2c 	.word	0x2000cf2c
 8013e18:	0801c208 	.word	0x0801c208
 8013e1c:	0801c2dc 	.word	0x0801c2dc
 8013e20:	0801c27c 	.word	0x0801c27c

08013e24 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013e28:	f004 ff4e 	bl	8018cc8 <rand>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	b29b      	uxth	r3, r3
 8013e30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013e34:	b29b      	uxth	r3, r3
 8013e36:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013e3a:	b29a      	uxth	r2, r3
 8013e3c:	4b01      	ldr	r3, [pc, #4]	; (8013e44 <udp_init+0x20>)
 8013e3e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013e40:	bf00      	nop
 8013e42:	bd80      	pop	{r7, pc}
 8013e44:	20000044 	.word	0x20000044

08013e48 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013e48:	b480      	push	{r7}
 8013e4a:	b083      	sub	sp, #12
 8013e4c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013e4e:	2300      	movs	r3, #0
 8013e50:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013e52:	4b17      	ldr	r3, [pc, #92]	; (8013eb0 <udp_new_port+0x68>)
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	1c5a      	adds	r2, r3, #1
 8013e58:	b291      	uxth	r1, r2
 8013e5a:	4a15      	ldr	r2, [pc, #84]	; (8013eb0 <udp_new_port+0x68>)
 8013e5c:	8011      	strh	r1, [r2, #0]
 8013e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d103      	bne.n	8013e6e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013e66:	4b12      	ldr	r3, [pc, #72]	; (8013eb0 <udp_new_port+0x68>)
 8013e68:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013e6c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e6e:	4b11      	ldr	r3, [pc, #68]	; (8013eb4 <udp_new_port+0x6c>)
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	603b      	str	r3, [r7, #0]
 8013e74:	e011      	b.n	8013e9a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013e76:	683b      	ldr	r3, [r7, #0]
 8013e78:	8a5a      	ldrh	r2, [r3, #18]
 8013e7a:	4b0d      	ldr	r3, [pc, #52]	; (8013eb0 <udp_new_port+0x68>)
 8013e7c:	881b      	ldrh	r3, [r3, #0]
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d108      	bne.n	8013e94 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013e82:	88fb      	ldrh	r3, [r7, #6]
 8013e84:	3301      	adds	r3, #1
 8013e86:	80fb      	strh	r3, [r7, #6]
 8013e88:	88fb      	ldrh	r3, [r7, #6]
 8013e8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013e8e:	d3e0      	bcc.n	8013e52 <udp_new_port+0xa>
        return 0;
 8013e90:	2300      	movs	r3, #0
 8013e92:	e007      	b.n	8013ea4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e94:	683b      	ldr	r3, [r7, #0]
 8013e96:	68db      	ldr	r3, [r3, #12]
 8013e98:	603b      	str	r3, [r7, #0]
 8013e9a:	683b      	ldr	r3, [r7, #0]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d1ea      	bne.n	8013e76 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013ea0:	4b03      	ldr	r3, [pc, #12]	; (8013eb0 <udp_new_port+0x68>)
 8013ea2:	881b      	ldrh	r3, [r3, #0]
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	370c      	adds	r7, #12
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eae:	4770      	bx	lr
 8013eb0:	20000044 	.word	0x20000044
 8013eb4:	2000cf38 	.word	0x2000cf38

08013eb8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	60f8      	str	r0, [r7, #12]
 8013ec0:	60b9      	str	r1, [r7, #8]
 8013ec2:	4613      	mov	r3, r2
 8013ec4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d105      	bne.n	8013ed8 <udp_input_local_match+0x20>
 8013ecc:	4b27      	ldr	r3, [pc, #156]	; (8013f6c <udp_input_local_match+0xb4>)
 8013ece:	2287      	movs	r2, #135	; 0x87
 8013ed0:	4927      	ldr	r1, [pc, #156]	; (8013f70 <udp_input_local_match+0xb8>)
 8013ed2:	4828      	ldr	r0, [pc, #160]	; (8013f74 <udp_input_local_match+0xbc>)
 8013ed4:	f005 f872 	bl	8018fbc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d105      	bne.n	8013eea <udp_input_local_match+0x32>
 8013ede:	4b23      	ldr	r3, [pc, #140]	; (8013f6c <udp_input_local_match+0xb4>)
 8013ee0:	2288      	movs	r2, #136	; 0x88
 8013ee2:	4925      	ldr	r1, [pc, #148]	; (8013f78 <udp_input_local_match+0xc0>)
 8013ee4:	4823      	ldr	r0, [pc, #140]	; (8013f74 <udp_input_local_match+0xbc>)
 8013ee6:	f005 f869 	bl	8018fbc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	7a1b      	ldrb	r3, [r3, #8]
 8013eee:	2b00      	cmp	r3, #0
 8013ef0:	d00b      	beq.n	8013f0a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	7a1a      	ldrb	r2, [r3, #8]
 8013ef6:	4b21      	ldr	r3, [pc, #132]	; (8013f7c <udp_input_local_match+0xc4>)
 8013ef8:	685b      	ldr	r3, [r3, #4]
 8013efa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013efe:	3301      	adds	r3, #1
 8013f00:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013f02:	429a      	cmp	r2, r3
 8013f04:	d001      	beq.n	8013f0a <udp_input_local_match+0x52>
    return 0;
 8013f06:	2300      	movs	r3, #0
 8013f08:	e02b      	b.n	8013f62 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013f0a:	79fb      	ldrb	r3, [r7, #7]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d018      	beq.n	8013f42 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d013      	beq.n	8013f3e <udp_input_local_match+0x86>
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d00f      	beq.n	8013f3e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013f1e:	4b17      	ldr	r3, [pc, #92]	; (8013f7c <udp_input_local_match+0xc4>)
 8013f20:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f26:	d00a      	beq.n	8013f3e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	681a      	ldr	r2, [r3, #0]
 8013f2c:	4b13      	ldr	r3, [pc, #76]	; (8013f7c <udp_input_local_match+0xc4>)
 8013f2e:	695b      	ldr	r3, [r3, #20]
 8013f30:	405a      	eors	r2, r3
 8013f32:	68bb      	ldr	r3, [r7, #8]
 8013f34:	3308      	adds	r3, #8
 8013f36:	681b      	ldr	r3, [r3, #0]
 8013f38:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d110      	bne.n	8013f60 <udp_input_local_match+0xa8>
          return 1;
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e00f      	b.n	8013f62 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d009      	beq.n	8013f5c <udp_input_local_match+0xa4>
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d005      	beq.n	8013f5c <udp_input_local_match+0xa4>
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681a      	ldr	r2, [r3, #0]
 8013f54:	4b09      	ldr	r3, [pc, #36]	; (8013f7c <udp_input_local_match+0xc4>)
 8013f56:	695b      	ldr	r3, [r3, #20]
 8013f58:	429a      	cmp	r2, r3
 8013f5a:	d101      	bne.n	8013f60 <udp_input_local_match+0xa8>
        return 1;
 8013f5c:	2301      	movs	r3, #1
 8013f5e:	e000      	b.n	8013f62 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013f60:	2300      	movs	r3, #0
}
 8013f62:	4618      	mov	r0, r3
 8013f64:	3710      	adds	r7, #16
 8013f66:	46bd      	mov	sp, r7
 8013f68:	bd80      	pop	{r7, pc}
 8013f6a:	bf00      	nop
 8013f6c:	0801c2f0 	.word	0x0801c2f0
 8013f70:	0801c320 	.word	0x0801c320
 8013f74:	0801c344 	.word	0x0801c344
 8013f78:	0801c36c 	.word	0x0801c36c
 8013f7c:	20009768 	.word	0x20009768

08013f80 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013f80:	b590      	push	{r4, r7, lr}
 8013f82:	b08d      	sub	sp, #52	; 0x34
 8013f84:	af02      	add	r7, sp, #8
 8013f86:	6078      	str	r0, [r7, #4]
 8013f88:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d105      	bne.n	8013fa0 <udp_input+0x20>
 8013f94:	4b7c      	ldr	r3, [pc, #496]	; (8014188 <udp_input+0x208>)
 8013f96:	22cf      	movs	r2, #207	; 0xcf
 8013f98:	497c      	ldr	r1, [pc, #496]	; (801418c <udp_input+0x20c>)
 8013f9a:	487d      	ldr	r0, [pc, #500]	; (8014190 <udp_input+0x210>)
 8013f9c:	f005 f80e 	bl	8018fbc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013fa0:	683b      	ldr	r3, [r7, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d105      	bne.n	8013fb2 <udp_input+0x32>
 8013fa6:	4b78      	ldr	r3, [pc, #480]	; (8014188 <udp_input+0x208>)
 8013fa8:	22d0      	movs	r2, #208	; 0xd0
 8013faa:	497a      	ldr	r1, [pc, #488]	; (8014194 <udp_input+0x214>)
 8013fac:	4878      	ldr	r0, [pc, #480]	; (8014190 <udp_input+0x210>)
 8013fae:	f005 f805 	bl	8018fbc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	895b      	ldrh	r3, [r3, #10]
 8013fb6:	2b07      	cmp	r3, #7
 8013fb8:	d803      	bhi.n	8013fc2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f7f9 fab4 	bl	800d528 <pbuf_free>
    goto end;
 8013fc0:	e0de      	b.n	8014180 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	685b      	ldr	r3, [r3, #4]
 8013fc6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013fc8:	4b73      	ldr	r3, [pc, #460]	; (8014198 <udp_input+0x218>)
 8013fca:	695b      	ldr	r3, [r3, #20]
 8013fcc:	4a72      	ldr	r2, [pc, #456]	; (8014198 <udp_input+0x218>)
 8013fce:	6812      	ldr	r2, [r2, #0]
 8013fd0:	4611      	mov	r1, r2
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f003 fe08 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 8013fd8:	4603      	mov	r3, r0
 8013fda:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	881b      	ldrh	r3, [r3, #0]
 8013fe0:	b29b      	uxth	r3, r3
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7f7 fe6c 	bl	800bcc0 <lwip_htons>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	885b      	ldrh	r3, [r3, #2]
 8013ff0:	b29b      	uxth	r3, r3
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7f7 fe64 	bl	800bcc0 <lwip_htons>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8014000:	2300      	movs	r3, #0
 8014002:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014004:	2300      	movs	r3, #0
 8014006:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014008:	4b64      	ldr	r3, [pc, #400]	; (801419c <udp_input+0x21c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	627b      	str	r3, [r7, #36]	; 0x24
 801400e:	e054      	b.n	80140ba <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014012:	8a5b      	ldrh	r3, [r3, #18]
 8014014:	89fa      	ldrh	r2, [r7, #14]
 8014016:	429a      	cmp	r2, r3
 8014018:	d14a      	bne.n	80140b0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801401a:	7cfb      	ldrb	r3, [r7, #19]
 801401c:	461a      	mov	r2, r3
 801401e:	6839      	ldr	r1, [r7, #0]
 8014020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014022:	f7ff ff49 	bl	8013eb8 <udp_input_local_match>
 8014026:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014028:	2b00      	cmp	r3, #0
 801402a:	d041      	beq.n	80140b0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402e:	7c1b      	ldrb	r3, [r3, #16]
 8014030:	f003 0304 	and.w	r3, r3, #4
 8014034:	2b00      	cmp	r3, #0
 8014036:	d11d      	bne.n	8014074 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d102      	bne.n	8014044 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014040:	61fb      	str	r3, [r7, #28]
 8014042:	e017      	b.n	8014074 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014044:	7cfb      	ldrb	r3, [r7, #19]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d014      	beq.n	8014074 <udp_input+0xf4>
 801404a:	4b53      	ldr	r3, [pc, #332]	; (8014198 <udp_input+0x218>)
 801404c:	695b      	ldr	r3, [r3, #20]
 801404e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014052:	d10f      	bne.n	8014074 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	681a      	ldr	r2, [r3, #0]
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	3304      	adds	r3, #4
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	429a      	cmp	r2, r3
 8014060:	d008      	beq.n	8014074 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014064:	681a      	ldr	r2, [r3, #0]
 8014066:	683b      	ldr	r3, [r7, #0]
 8014068:	3304      	adds	r3, #4
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	429a      	cmp	r2, r3
 801406e:	d101      	bne.n	8014074 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8014070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014072:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014076:	8a9b      	ldrh	r3, [r3, #20]
 8014078:	8a3a      	ldrh	r2, [r7, #16]
 801407a:	429a      	cmp	r2, r3
 801407c:	d118      	bne.n	80140b0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014080:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014082:	2b00      	cmp	r3, #0
 8014084:	d005      	beq.n	8014092 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014088:	685a      	ldr	r2, [r3, #4]
 801408a:	4b43      	ldr	r3, [pc, #268]	; (8014198 <udp_input+0x218>)
 801408c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801408e:	429a      	cmp	r2, r3
 8014090:	d10e      	bne.n	80140b0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014092:	6a3b      	ldr	r3, [r7, #32]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d014      	beq.n	80140c2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409a:	68da      	ldr	r2, [r3, #12]
 801409c:	6a3b      	ldr	r3, [r7, #32]
 801409e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80140a0:	4b3e      	ldr	r3, [pc, #248]	; (801419c <udp_input+0x21c>)
 80140a2:	681a      	ldr	r2, [r3, #0]
 80140a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140a6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80140a8:	4a3c      	ldr	r2, [pc, #240]	; (801419c <udp_input+0x21c>)
 80140aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140ac:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80140ae:	e008      	b.n	80140c2 <udp_input+0x142>
      }
    }

    prev = pcb;
 80140b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80140b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b6:	68db      	ldr	r3, [r3, #12]
 80140b8:	627b      	str	r3, [r7, #36]	; 0x24
 80140ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140bc:	2b00      	cmp	r3, #0
 80140be:	d1a7      	bne.n	8014010 <udp_input+0x90>
 80140c0:	e000      	b.n	80140c4 <udp_input+0x144>
        break;
 80140c2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80140c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140c6:	2b00      	cmp	r3, #0
 80140c8:	d101      	bne.n	80140ce <udp_input+0x14e>
    pcb = uncon_pcb;
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80140ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d002      	beq.n	80140da <udp_input+0x15a>
    for_us = 1;
 80140d4:	2301      	movs	r3, #1
 80140d6:	76fb      	strb	r3, [r7, #27]
 80140d8:	e00a      	b.n	80140f0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	3304      	adds	r3, #4
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	4b2d      	ldr	r3, [pc, #180]	; (8014198 <udp_input+0x218>)
 80140e2:	695b      	ldr	r3, [r3, #20]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	bf0c      	ite	eq
 80140e8:	2301      	moveq	r3, #1
 80140ea:	2300      	movne	r3, #0
 80140ec:	b2db      	uxtb	r3, r3
 80140ee:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80140f0:	7efb      	ldrb	r3, [r7, #27]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d041      	beq.n	801417a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80140f6:	2108      	movs	r1, #8
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f7f9 f98f 	bl	800d41c <pbuf_remove_header>
 80140fe:	4603      	mov	r3, r0
 8014100:	2b00      	cmp	r3, #0
 8014102:	d00a      	beq.n	801411a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014104:	4b20      	ldr	r3, [pc, #128]	; (8014188 <udp_input+0x208>)
 8014106:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801410a:	4925      	ldr	r1, [pc, #148]	; (80141a0 <udp_input+0x220>)
 801410c:	4820      	ldr	r0, [pc, #128]	; (8014190 <udp_input+0x210>)
 801410e:	f004 ff55 	bl	8018fbc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f7f9 fa08 	bl	800d528 <pbuf_free>
      goto end;
 8014118:	e032      	b.n	8014180 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801411c:	2b00      	cmp	r3, #0
 801411e:	d012      	beq.n	8014146 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014122:	699b      	ldr	r3, [r3, #24]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d00a      	beq.n	801413e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412a:	699c      	ldr	r4, [r3, #24]
 801412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801412e:	69d8      	ldr	r0, [r3, #28]
 8014130:	8a3b      	ldrh	r3, [r7, #16]
 8014132:	9300      	str	r3, [sp, #0]
 8014134:	4b1b      	ldr	r3, [pc, #108]	; (80141a4 <udp_input+0x224>)
 8014136:	687a      	ldr	r2, [r7, #4]
 8014138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801413a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801413c:	e021      	b.n	8014182 <udp_input+0x202>
        pbuf_free(p);
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f7f9 f9f2 	bl	800d528 <pbuf_free>
        goto end;
 8014144:	e01c      	b.n	8014180 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014146:	7cfb      	ldrb	r3, [r7, #19]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d112      	bne.n	8014172 <udp_input+0x1f2>
 801414c:	4b12      	ldr	r3, [pc, #72]	; (8014198 <udp_input+0x218>)
 801414e:	695b      	ldr	r3, [r3, #20]
 8014150:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014154:	2be0      	cmp	r3, #224	; 0xe0
 8014156:	d00c      	beq.n	8014172 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8014158:	4b0f      	ldr	r3, [pc, #60]	; (8014198 <udp_input+0x218>)
 801415a:	899b      	ldrh	r3, [r3, #12]
 801415c:	3308      	adds	r3, #8
 801415e:	b29b      	uxth	r3, r3
 8014160:	b21b      	sxth	r3, r3
 8014162:	4619      	mov	r1, r3
 8014164:	6878      	ldr	r0, [r7, #4]
 8014166:	f7f9 f9cc 	bl	800d502 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801416a:	2103      	movs	r1, #3
 801416c:	6878      	ldr	r0, [r7, #4]
 801416e:	f003 f9fd 	bl	801756c <icmp_dest_unreach>
      pbuf_free(p);
 8014172:	6878      	ldr	r0, [r7, #4]
 8014174:	f7f9 f9d8 	bl	800d528 <pbuf_free>
  return;
 8014178:	e003      	b.n	8014182 <udp_input+0x202>
    pbuf_free(p);
 801417a:	6878      	ldr	r0, [r7, #4]
 801417c:	f7f9 f9d4 	bl	800d528 <pbuf_free>
  return;
 8014180:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8014182:	372c      	adds	r7, #44	; 0x2c
 8014184:	46bd      	mov	sp, r7
 8014186:	bd90      	pop	{r4, r7, pc}
 8014188:	0801c2f0 	.word	0x0801c2f0
 801418c:	0801c394 	.word	0x0801c394
 8014190:	0801c344 	.word	0x0801c344
 8014194:	0801c3ac 	.word	0x0801c3ac
 8014198:	20009768 	.word	0x20009768
 801419c:	2000cf38 	.word	0x2000cf38
 80141a0:	0801c3c8 	.word	0x0801c3c8
 80141a4:	20009778 	.word	0x20009778

080141a8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80141a8:	b580      	push	{r7, lr}
 80141aa:	b088      	sub	sp, #32
 80141ac:	af02      	add	r7, sp, #8
 80141ae:	60f8      	str	r0, [r7, #12]
 80141b0:	60b9      	str	r1, [r7, #8]
 80141b2:	607a      	str	r2, [r7, #4]
 80141b4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80141b6:	68fb      	ldr	r3, [r7, #12]
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d109      	bne.n	80141d0 <udp_sendto_if+0x28>
 80141bc:	4b2e      	ldr	r3, [pc, #184]	; (8014278 <udp_sendto_if+0xd0>)
 80141be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80141c2:	492e      	ldr	r1, [pc, #184]	; (801427c <udp_sendto_if+0xd4>)
 80141c4:	482e      	ldr	r0, [pc, #184]	; (8014280 <udp_sendto_if+0xd8>)
 80141c6:	f004 fef9 	bl	8018fbc <iprintf>
 80141ca:	f06f 030f 	mvn.w	r3, #15
 80141ce:	e04f      	b.n	8014270 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80141d0:	68bb      	ldr	r3, [r7, #8]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d109      	bne.n	80141ea <udp_sendto_if+0x42>
 80141d6:	4b28      	ldr	r3, [pc, #160]	; (8014278 <udp_sendto_if+0xd0>)
 80141d8:	f240 2281 	movw	r2, #641	; 0x281
 80141dc:	4929      	ldr	r1, [pc, #164]	; (8014284 <udp_sendto_if+0xdc>)
 80141de:	4828      	ldr	r0, [pc, #160]	; (8014280 <udp_sendto_if+0xd8>)
 80141e0:	f004 feec 	bl	8018fbc <iprintf>
 80141e4:	f06f 030f 	mvn.w	r3, #15
 80141e8:	e042      	b.n	8014270 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d109      	bne.n	8014204 <udp_sendto_if+0x5c>
 80141f0:	4b21      	ldr	r3, [pc, #132]	; (8014278 <udp_sendto_if+0xd0>)
 80141f2:	f240 2282 	movw	r2, #642	; 0x282
 80141f6:	4924      	ldr	r1, [pc, #144]	; (8014288 <udp_sendto_if+0xe0>)
 80141f8:	4821      	ldr	r0, [pc, #132]	; (8014280 <udp_sendto_if+0xd8>)
 80141fa:	f004 fedf 	bl	8018fbc <iprintf>
 80141fe:	f06f 030f 	mvn.w	r3, #15
 8014202:	e035      	b.n	8014270 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8014204:	6a3b      	ldr	r3, [r7, #32]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d109      	bne.n	801421e <udp_sendto_if+0x76>
 801420a:	4b1b      	ldr	r3, [pc, #108]	; (8014278 <udp_sendto_if+0xd0>)
 801420c:	f240 2283 	movw	r2, #643	; 0x283
 8014210:	491e      	ldr	r1, [pc, #120]	; (801428c <udp_sendto_if+0xe4>)
 8014212:	481b      	ldr	r0, [pc, #108]	; (8014280 <udp_sendto_if+0xd8>)
 8014214:	f004 fed2 	bl	8018fbc <iprintf>
 8014218:	f06f 030f 	mvn.w	r3, #15
 801421c:	e028      	b.n	8014270 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d009      	beq.n	8014238 <udp_sendto_if+0x90>
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d005      	beq.n	8014238 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	681b      	ldr	r3, [r3, #0]
 8014230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014234:	2be0      	cmp	r3, #224	; 0xe0
 8014236:	d103      	bne.n	8014240 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8014238:	6a3b      	ldr	r3, [r7, #32]
 801423a:	3304      	adds	r3, #4
 801423c:	617b      	str	r3, [r7, #20]
 801423e:	e00b      	b.n	8014258 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	681a      	ldr	r2, [r3, #0]
 8014244:	6a3b      	ldr	r3, [r7, #32]
 8014246:	3304      	adds	r3, #4
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	429a      	cmp	r2, r3
 801424c:	d002      	beq.n	8014254 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801424e:	f06f 0303 	mvn.w	r3, #3
 8014252:	e00d      	b.n	8014270 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8014258:	887a      	ldrh	r2, [r7, #2]
 801425a:	697b      	ldr	r3, [r7, #20]
 801425c:	9301      	str	r3, [sp, #4]
 801425e:	6a3b      	ldr	r3, [r7, #32]
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	4613      	mov	r3, r2
 8014264:	687a      	ldr	r2, [r7, #4]
 8014266:	68b9      	ldr	r1, [r7, #8]
 8014268:	68f8      	ldr	r0, [r7, #12]
 801426a:	f000 f811 	bl	8014290 <udp_sendto_if_src>
 801426e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8014270:	4618      	mov	r0, r3
 8014272:	3718      	adds	r7, #24
 8014274:	46bd      	mov	sp, r7
 8014276:	bd80      	pop	{r7, pc}
 8014278:	0801c2f0 	.word	0x0801c2f0
 801427c:	0801c464 	.word	0x0801c464
 8014280:	0801c344 	.word	0x0801c344
 8014284:	0801c480 	.word	0x0801c480
 8014288:	0801c49c 	.word	0x0801c49c
 801428c:	0801c4bc 	.word	0x0801c4bc

08014290 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8014290:	b580      	push	{r7, lr}
 8014292:	b08c      	sub	sp, #48	; 0x30
 8014294:	af04      	add	r7, sp, #16
 8014296:	60f8      	str	r0, [r7, #12]
 8014298:	60b9      	str	r1, [r7, #8]
 801429a:	607a      	str	r2, [r7, #4]
 801429c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d109      	bne.n	80142b8 <udp_sendto_if_src+0x28>
 80142a4:	4b65      	ldr	r3, [pc, #404]	; (801443c <udp_sendto_if_src+0x1ac>)
 80142a6:	f240 22d1 	movw	r2, #721	; 0x2d1
 80142aa:	4965      	ldr	r1, [pc, #404]	; (8014440 <udp_sendto_if_src+0x1b0>)
 80142ac:	4865      	ldr	r0, [pc, #404]	; (8014444 <udp_sendto_if_src+0x1b4>)
 80142ae:	f004 fe85 	bl	8018fbc <iprintf>
 80142b2:	f06f 030f 	mvn.w	r3, #15
 80142b6:	e0bc      	b.n	8014432 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d109      	bne.n	80142d2 <udp_sendto_if_src+0x42>
 80142be:	4b5f      	ldr	r3, [pc, #380]	; (801443c <udp_sendto_if_src+0x1ac>)
 80142c0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80142c4:	4960      	ldr	r1, [pc, #384]	; (8014448 <udp_sendto_if_src+0x1b8>)
 80142c6:	485f      	ldr	r0, [pc, #380]	; (8014444 <udp_sendto_if_src+0x1b4>)
 80142c8:	f004 fe78 	bl	8018fbc <iprintf>
 80142cc:	f06f 030f 	mvn.w	r3, #15
 80142d0:	e0af      	b.n	8014432 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d109      	bne.n	80142ec <udp_sendto_if_src+0x5c>
 80142d8:	4b58      	ldr	r3, [pc, #352]	; (801443c <udp_sendto_if_src+0x1ac>)
 80142da:	f240 22d3 	movw	r2, #723	; 0x2d3
 80142de:	495b      	ldr	r1, [pc, #364]	; (801444c <udp_sendto_if_src+0x1bc>)
 80142e0:	4858      	ldr	r0, [pc, #352]	; (8014444 <udp_sendto_if_src+0x1b4>)
 80142e2:	f004 fe6b 	bl	8018fbc <iprintf>
 80142e6:	f06f 030f 	mvn.w	r3, #15
 80142ea:	e0a2      	b.n	8014432 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80142ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d109      	bne.n	8014306 <udp_sendto_if_src+0x76>
 80142f2:	4b52      	ldr	r3, [pc, #328]	; (801443c <udp_sendto_if_src+0x1ac>)
 80142f4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80142f8:	4955      	ldr	r1, [pc, #340]	; (8014450 <udp_sendto_if_src+0x1c0>)
 80142fa:	4852      	ldr	r0, [pc, #328]	; (8014444 <udp_sendto_if_src+0x1b4>)
 80142fc:	f004 fe5e 	bl	8018fbc <iprintf>
 8014300:	f06f 030f 	mvn.w	r3, #15
 8014304:	e095      	b.n	8014432 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8014306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014308:	2b00      	cmp	r3, #0
 801430a:	d109      	bne.n	8014320 <udp_sendto_if_src+0x90>
 801430c:	4b4b      	ldr	r3, [pc, #300]	; (801443c <udp_sendto_if_src+0x1ac>)
 801430e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8014312:	4950      	ldr	r1, [pc, #320]	; (8014454 <udp_sendto_if_src+0x1c4>)
 8014314:	484b      	ldr	r0, [pc, #300]	; (8014444 <udp_sendto_if_src+0x1b4>)
 8014316:	f004 fe51 	bl	8018fbc <iprintf>
 801431a:	f06f 030f 	mvn.w	r3, #15
 801431e:	e088      	b.n	8014432 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	8a5b      	ldrh	r3, [r3, #18]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d10f      	bne.n	8014348 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8014328:	68f9      	ldr	r1, [r7, #12]
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	8a5b      	ldrh	r3, [r3, #18]
 801432e:	461a      	mov	r2, r3
 8014330:	68f8      	ldr	r0, [r7, #12]
 8014332:	f000 f893 	bl	801445c <udp_bind>
 8014336:	4603      	mov	r3, r0
 8014338:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801433a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801433e:	2b00      	cmp	r3, #0
 8014340:	d002      	beq.n	8014348 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8014342:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014346:	e074      	b.n	8014432 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	891b      	ldrh	r3, [r3, #8]
 801434c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8014350:	4293      	cmp	r3, r2
 8014352:	d902      	bls.n	801435a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8014354:	f04f 33ff 	mov.w	r3, #4294967295
 8014358:	e06b      	b.n	8014432 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801435a:	2108      	movs	r1, #8
 801435c:	68b8      	ldr	r0, [r7, #8]
 801435e:	f7f9 f84d 	bl	800d3fc <pbuf_add_header>
 8014362:	4603      	mov	r3, r0
 8014364:	2b00      	cmp	r3, #0
 8014366:	d015      	beq.n	8014394 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8014368:	f44f 7220 	mov.w	r2, #640	; 0x280
 801436c:	2108      	movs	r1, #8
 801436e:	2022      	movs	r0, #34	; 0x22
 8014370:	f7f8 fdf6 	bl	800cf60 <pbuf_alloc>
 8014374:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8014376:	69fb      	ldr	r3, [r7, #28]
 8014378:	2b00      	cmp	r3, #0
 801437a:	d102      	bne.n	8014382 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801437c:	f04f 33ff 	mov.w	r3, #4294967295
 8014380:	e057      	b.n	8014432 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	891b      	ldrh	r3, [r3, #8]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d006      	beq.n	8014398 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801438a:	68b9      	ldr	r1, [r7, #8]
 801438c:	69f8      	ldr	r0, [r7, #28]
 801438e:	f7f9 f9ef 	bl	800d770 <pbuf_chain>
 8014392:	e001      	b.n	8014398 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8014394:	68bb      	ldr	r3, [r7, #8]
 8014396:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	895b      	ldrh	r3, [r3, #10]
 801439c:	2b07      	cmp	r3, #7
 801439e:	d806      	bhi.n	80143ae <udp_sendto_if_src+0x11e>
 80143a0:	4b26      	ldr	r3, [pc, #152]	; (801443c <udp_sendto_if_src+0x1ac>)
 80143a2:	f240 320d 	movw	r2, #781	; 0x30d
 80143a6:	492c      	ldr	r1, [pc, #176]	; (8014458 <udp_sendto_if_src+0x1c8>)
 80143a8:	4826      	ldr	r0, [pc, #152]	; (8014444 <udp_sendto_if_src+0x1b4>)
 80143aa:	f004 fe07 	bl	8018fbc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80143ae:	69fb      	ldr	r3, [r7, #28]
 80143b0:	685b      	ldr	r3, [r3, #4]
 80143b2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80143b4:	68fb      	ldr	r3, [r7, #12]
 80143b6:	8a5b      	ldrh	r3, [r3, #18]
 80143b8:	4618      	mov	r0, r3
 80143ba:	f7f7 fc81 	bl	800bcc0 <lwip_htons>
 80143be:	4603      	mov	r3, r0
 80143c0:	461a      	mov	r2, r3
 80143c2:	697b      	ldr	r3, [r7, #20]
 80143c4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80143c6:	887b      	ldrh	r3, [r7, #2]
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7f7 fc79 	bl	800bcc0 <lwip_htons>
 80143ce:	4603      	mov	r3, r0
 80143d0:	461a      	mov	r2, r3
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	2200      	movs	r2, #0
 80143da:	719a      	strb	r2, [r3, #6]
 80143dc:	2200      	movs	r2, #0
 80143de:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80143e0:	69fb      	ldr	r3, [r7, #28]
 80143e2:	891b      	ldrh	r3, [r3, #8]
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7f7 fc6b 	bl	800bcc0 <lwip_htons>
 80143ea:	4603      	mov	r3, r0
 80143ec:	461a      	mov	r2, r3
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80143f2:	2311      	movs	r3, #17
 80143f4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	7adb      	ldrb	r3, [r3, #11]
 80143fa:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	7a9b      	ldrb	r3, [r3, #10]
 8014400:	7cb9      	ldrb	r1, [r7, #18]
 8014402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014404:	9202      	str	r2, [sp, #8]
 8014406:	7cfa      	ldrb	r2, [r7, #19]
 8014408:	9201      	str	r2, [sp, #4]
 801440a:	9300      	str	r3, [sp, #0]
 801440c:	460b      	mov	r3, r1
 801440e:	687a      	ldr	r2, [r7, #4]
 8014410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014412:	69f8      	ldr	r0, [r7, #28]
 8014414:	f003 fb3a 	bl	8017a8c <ip4_output_if_src>
 8014418:	4603      	mov	r3, r0
 801441a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801441c:	69fa      	ldr	r2, [r7, #28]
 801441e:	68bb      	ldr	r3, [r7, #8]
 8014420:	429a      	cmp	r2, r3
 8014422:	d004      	beq.n	801442e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8014424:	69f8      	ldr	r0, [r7, #28]
 8014426:	f7f9 f87f 	bl	800d528 <pbuf_free>
    q = NULL;
 801442a:	2300      	movs	r3, #0
 801442c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801442e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8014432:	4618      	mov	r0, r3
 8014434:	3720      	adds	r7, #32
 8014436:	46bd      	mov	sp, r7
 8014438:	bd80      	pop	{r7, pc}
 801443a:	bf00      	nop
 801443c:	0801c2f0 	.word	0x0801c2f0
 8014440:	0801c4dc 	.word	0x0801c4dc
 8014444:	0801c344 	.word	0x0801c344
 8014448:	0801c4fc 	.word	0x0801c4fc
 801444c:	0801c51c 	.word	0x0801c51c
 8014450:	0801c540 	.word	0x0801c540
 8014454:	0801c564 	.word	0x0801c564
 8014458:	0801c588 	.word	0x0801c588

0801445c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b086      	sub	sp, #24
 8014460:	af00      	add	r7, sp, #0
 8014462:	60f8      	str	r0, [r7, #12]
 8014464:	60b9      	str	r1, [r7, #8]
 8014466:	4613      	mov	r3, r2
 8014468:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801446a:	68bb      	ldr	r3, [r7, #8]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d101      	bne.n	8014474 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8014470:	4b39      	ldr	r3, [pc, #228]	; (8014558 <udp_bind+0xfc>)
 8014472:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	2b00      	cmp	r3, #0
 8014478:	d109      	bne.n	801448e <udp_bind+0x32>
 801447a:	4b38      	ldr	r3, [pc, #224]	; (801455c <udp_bind+0x100>)
 801447c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8014480:	4937      	ldr	r1, [pc, #220]	; (8014560 <udp_bind+0x104>)
 8014482:	4838      	ldr	r0, [pc, #224]	; (8014564 <udp_bind+0x108>)
 8014484:	f004 fd9a 	bl	8018fbc <iprintf>
 8014488:	f06f 030f 	mvn.w	r3, #15
 801448c:	e060      	b.n	8014550 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801448e:	2300      	movs	r3, #0
 8014490:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014492:	4b35      	ldr	r3, [pc, #212]	; (8014568 <udp_bind+0x10c>)
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	617b      	str	r3, [r7, #20]
 8014498:	e009      	b.n	80144ae <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801449a:	68fa      	ldr	r2, [r7, #12]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	429a      	cmp	r2, r3
 80144a0:	d102      	bne.n	80144a8 <udp_bind+0x4c>
      rebind = 1;
 80144a2:	2301      	movs	r3, #1
 80144a4:	74fb      	strb	r3, [r7, #19]
      break;
 80144a6:	e005      	b.n	80144b4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	617b      	str	r3, [r7, #20]
 80144ae:	697b      	ldr	r3, [r7, #20]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d1f2      	bne.n	801449a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80144b4:	88fb      	ldrh	r3, [r7, #6]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d109      	bne.n	80144ce <udp_bind+0x72>
    port = udp_new_port();
 80144ba:	f7ff fcc5 	bl	8013e48 <udp_new_port>
 80144be:	4603      	mov	r3, r0
 80144c0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80144c2:	88fb      	ldrh	r3, [r7, #6]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d12c      	bne.n	8014522 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80144c8:	f06f 0307 	mvn.w	r3, #7
 80144cc:	e040      	b.n	8014550 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80144ce:	4b26      	ldr	r3, [pc, #152]	; (8014568 <udp_bind+0x10c>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	617b      	str	r3, [r7, #20]
 80144d4:	e022      	b.n	801451c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	697b      	ldr	r3, [r7, #20]
 80144da:	429a      	cmp	r2, r3
 80144dc:	d01b      	beq.n	8014516 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80144de:	697b      	ldr	r3, [r7, #20]
 80144e0:	8a5b      	ldrh	r3, [r3, #18]
 80144e2:	88fa      	ldrh	r2, [r7, #6]
 80144e4:	429a      	cmp	r2, r3
 80144e6:	d116      	bne.n	8014516 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144e8:	697b      	ldr	r3, [r7, #20]
 80144ea:	681a      	ldr	r2, [r3, #0]
 80144ec:	68bb      	ldr	r3, [r7, #8]
 80144ee:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d00d      	beq.n	8014510 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d00a      	beq.n	8014510 <udp_bind+0xb4>
 80144fa:	68bb      	ldr	r3, [r7, #8]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d006      	beq.n	8014510 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014502:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014504:	2b00      	cmp	r3, #0
 8014506:	d003      	beq.n	8014510 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d102      	bne.n	8014516 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014510:	f06f 0307 	mvn.w	r3, #7
 8014514:	e01c      	b.n	8014550 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014516:	697b      	ldr	r3, [r7, #20]
 8014518:	68db      	ldr	r3, [r3, #12]
 801451a:	617b      	str	r3, [r7, #20]
 801451c:	697b      	ldr	r3, [r7, #20]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d1d9      	bne.n	80144d6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d002      	beq.n	801452e <udp_bind+0xd2>
 8014528:	68bb      	ldr	r3, [r7, #8]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	e000      	b.n	8014530 <udp_bind+0xd4>
 801452e:	2300      	movs	r3, #0
 8014530:	68fa      	ldr	r2, [r7, #12]
 8014532:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	88fa      	ldrh	r2, [r7, #6]
 8014538:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801453a:	7cfb      	ldrb	r3, [r7, #19]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d106      	bne.n	801454e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8014540:	4b09      	ldr	r3, [pc, #36]	; (8014568 <udp_bind+0x10c>)
 8014542:	681a      	ldr	r2, [r3, #0]
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8014548:	4a07      	ldr	r2, [pc, #28]	; (8014568 <udp_bind+0x10c>)
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	3718      	adds	r7, #24
 8014554:	46bd      	mov	sp, r7
 8014556:	bd80      	pop	{r7, pc}
 8014558:	0801f5c4 	.word	0x0801f5c4
 801455c:	0801c2f0 	.word	0x0801c2f0
 8014560:	0801c5b8 	.word	0x0801c5b8
 8014564:	0801c344 	.word	0x0801c344
 8014568:	2000cf38 	.word	0x2000cf38

0801456c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b086      	sub	sp, #24
 8014570:	af00      	add	r7, sp, #0
 8014572:	60f8      	str	r0, [r7, #12]
 8014574:	60b9      	str	r1, [r7, #8]
 8014576:	4613      	mov	r3, r2
 8014578:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d109      	bne.n	8014594 <udp_connect+0x28>
 8014580:	4b2c      	ldr	r3, [pc, #176]	; (8014634 <udp_connect+0xc8>)
 8014582:	f240 4235 	movw	r2, #1077	; 0x435
 8014586:	492c      	ldr	r1, [pc, #176]	; (8014638 <udp_connect+0xcc>)
 8014588:	482c      	ldr	r0, [pc, #176]	; (801463c <udp_connect+0xd0>)
 801458a:	f004 fd17 	bl	8018fbc <iprintf>
 801458e:	f06f 030f 	mvn.w	r3, #15
 8014592:	e04b      	b.n	801462c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8014594:	68bb      	ldr	r3, [r7, #8]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d109      	bne.n	80145ae <udp_connect+0x42>
 801459a:	4b26      	ldr	r3, [pc, #152]	; (8014634 <udp_connect+0xc8>)
 801459c:	f240 4236 	movw	r2, #1078	; 0x436
 80145a0:	4927      	ldr	r1, [pc, #156]	; (8014640 <udp_connect+0xd4>)
 80145a2:	4826      	ldr	r0, [pc, #152]	; (801463c <udp_connect+0xd0>)
 80145a4:	f004 fd0a 	bl	8018fbc <iprintf>
 80145a8:	f06f 030f 	mvn.w	r3, #15
 80145ac:	e03e      	b.n	801462c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80145ae:	68fb      	ldr	r3, [r7, #12]
 80145b0:	8a5b      	ldrh	r3, [r3, #18]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d10f      	bne.n	80145d6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80145b6:	68f9      	ldr	r1, [r7, #12]
 80145b8:	68fb      	ldr	r3, [r7, #12]
 80145ba:	8a5b      	ldrh	r3, [r3, #18]
 80145bc:	461a      	mov	r2, r3
 80145be:	68f8      	ldr	r0, [r7, #12]
 80145c0:	f7ff ff4c 	bl	801445c <udp_bind>
 80145c4:	4603      	mov	r3, r0
 80145c6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80145c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d002      	beq.n	80145d6 <udp_connect+0x6a>
      return err;
 80145d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145d4:	e02a      	b.n	801462c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80145d6:	68bb      	ldr	r3, [r7, #8]
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d002      	beq.n	80145e2 <udp_connect+0x76>
 80145dc:	68bb      	ldr	r3, [r7, #8]
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	e000      	b.n	80145e4 <udp_connect+0x78>
 80145e2:	2300      	movs	r3, #0
 80145e4:	68fa      	ldr	r2, [r7, #12]
 80145e6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80145e8:	68fb      	ldr	r3, [r7, #12]
 80145ea:	88fa      	ldrh	r2, [r7, #6]
 80145ec:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	7c1b      	ldrb	r3, [r3, #16]
 80145f2:	f043 0304 	orr.w	r3, r3, #4
 80145f6:	b2da      	uxtb	r2, r3
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80145fc:	4b11      	ldr	r3, [pc, #68]	; (8014644 <udp_connect+0xd8>)
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	617b      	str	r3, [r7, #20]
 8014602:	e008      	b.n	8014616 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8014604:	68fa      	ldr	r2, [r7, #12]
 8014606:	697b      	ldr	r3, [r7, #20]
 8014608:	429a      	cmp	r2, r3
 801460a:	d101      	bne.n	8014610 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801460c:	2300      	movs	r3, #0
 801460e:	e00d      	b.n	801462c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014610:	697b      	ldr	r3, [r7, #20]
 8014612:	68db      	ldr	r3, [r3, #12]
 8014614:	617b      	str	r3, [r7, #20]
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d1f3      	bne.n	8014604 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801461c:	4b09      	ldr	r3, [pc, #36]	; (8014644 <udp_connect+0xd8>)
 801461e:	681a      	ldr	r2, [r3, #0]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8014624:	4a07      	ldr	r2, [pc, #28]	; (8014644 <udp_connect+0xd8>)
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801462a:	2300      	movs	r3, #0
}
 801462c:	4618      	mov	r0, r3
 801462e:	3718      	adds	r7, #24
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	0801c2f0 	.word	0x0801c2f0
 8014638:	0801c5d0 	.word	0x0801c5d0
 801463c:	0801c344 	.word	0x0801c344
 8014640:	0801c5ec 	.word	0x0801c5ec
 8014644:	2000cf38 	.word	0x2000cf38

08014648 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b084      	sub	sp, #16
 801464c:	af00      	add	r7, sp, #0
 801464e:	60f8      	str	r0, [r7, #12]
 8014650:	60b9      	str	r1, [r7, #8]
 8014652:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d107      	bne.n	801466a <udp_recv+0x22>
 801465a:	4b08      	ldr	r3, [pc, #32]	; (801467c <udp_recv+0x34>)
 801465c:	f240 428a 	movw	r2, #1162	; 0x48a
 8014660:	4907      	ldr	r1, [pc, #28]	; (8014680 <udp_recv+0x38>)
 8014662:	4808      	ldr	r0, [pc, #32]	; (8014684 <udp_recv+0x3c>)
 8014664:	f004 fcaa 	bl	8018fbc <iprintf>
 8014668:	e005      	b.n	8014676 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	68ba      	ldr	r2, [r7, #8]
 801466e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	687a      	ldr	r2, [r7, #4]
 8014674:	61da      	str	r2, [r3, #28]
}
 8014676:	3710      	adds	r7, #16
 8014678:	46bd      	mov	sp, r7
 801467a:	bd80      	pop	{r7, pc}
 801467c:	0801c2f0 	.word	0x0801c2f0
 8014680:	0801c624 	.word	0x0801c624
 8014684:	0801c344 	.word	0x0801c344

08014688 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8014688:	b580      	push	{r7, lr}
 801468a:	b084      	sub	sp, #16
 801468c:	af00      	add	r7, sp, #0
 801468e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d107      	bne.n	80146a6 <udp_remove+0x1e>
 8014696:	4b19      	ldr	r3, [pc, #100]	; (80146fc <udp_remove+0x74>)
 8014698:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801469c:	4918      	ldr	r1, [pc, #96]	; (8014700 <udp_remove+0x78>)
 801469e:	4819      	ldr	r0, [pc, #100]	; (8014704 <udp_remove+0x7c>)
 80146a0:	f004 fc8c 	bl	8018fbc <iprintf>
 80146a4:	e026      	b.n	80146f4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80146a6:	4b18      	ldr	r3, [pc, #96]	; (8014708 <udp_remove+0x80>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d105      	bne.n	80146bc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80146b0:	4b15      	ldr	r3, [pc, #84]	; (8014708 <udp_remove+0x80>)
 80146b2:	681b      	ldr	r3, [r3, #0]
 80146b4:	68db      	ldr	r3, [r3, #12]
 80146b6:	4a14      	ldr	r2, [pc, #80]	; (8014708 <udp_remove+0x80>)
 80146b8:	6013      	str	r3, [r2, #0]
 80146ba:	e017      	b.n	80146ec <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80146bc:	4b12      	ldr	r3, [pc, #72]	; (8014708 <udp_remove+0x80>)
 80146be:	681b      	ldr	r3, [r3, #0]
 80146c0:	60fb      	str	r3, [r7, #12]
 80146c2:	e010      	b.n	80146e6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	68db      	ldr	r3, [r3, #12]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d009      	beq.n	80146e0 <udp_remove+0x58>
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	68db      	ldr	r3, [r3, #12]
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d104      	bne.n	80146e0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	68da      	ldr	r2, [r3, #12]
 80146da:	68fb      	ldr	r3, [r7, #12]
 80146dc:	60da      	str	r2, [r3, #12]
        break;
 80146de:	e005      	b.n	80146ec <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	60fb      	str	r3, [r7, #12]
 80146e6:	68fb      	ldr	r3, [r7, #12]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d1eb      	bne.n	80146c4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80146ec:	6879      	ldr	r1, [r7, #4]
 80146ee:	2000      	movs	r0, #0
 80146f0:	f7f8 f86a 	bl	800c7c8 <memp_free>
}
 80146f4:	3710      	adds	r7, #16
 80146f6:	46bd      	mov	sp, r7
 80146f8:	bd80      	pop	{r7, pc}
 80146fa:	bf00      	nop
 80146fc:	0801c2f0 	.word	0x0801c2f0
 8014700:	0801c63c 	.word	0x0801c63c
 8014704:	0801c344 	.word	0x0801c344
 8014708:	2000cf38 	.word	0x2000cf38

0801470c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b082      	sub	sp, #8
 8014710:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8014712:	2000      	movs	r0, #0
 8014714:	f7f7 ffe2 	bl	800c6dc <memp_malloc>
 8014718:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d007      	beq.n	8014730 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014720:	2220      	movs	r2, #32
 8014722:	2100      	movs	r1, #0
 8014724:	6878      	ldr	r0, [r7, #4]
 8014726:	f004 fcae 	bl	8019086 <memset>
    pcb->ttl = UDP_TTL;
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	22ff      	movs	r2, #255	; 0xff
 801472e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014730:	687b      	ldr	r3, [r7, #4]
}
 8014732:	4618      	mov	r0, r3
 8014734:	3708      	adds	r7, #8
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
	...

0801473c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801473c:	b480      	push	{r7}
 801473e:	b085      	sub	sp, #20
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d01e      	beq.n	801478a <udp_netif_ip_addr_changed+0x4e>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d01a      	beq.n	801478a <udp_netif_ip_addr_changed+0x4e>
 8014754:	683b      	ldr	r3, [r7, #0]
 8014756:	2b00      	cmp	r3, #0
 8014758:	d017      	beq.n	801478a <udp_netif_ip_addr_changed+0x4e>
 801475a:	683b      	ldr	r3, [r7, #0]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d013      	beq.n	801478a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8014762:	4b0d      	ldr	r3, [pc, #52]	; (8014798 <udp_netif_ip_addr_changed+0x5c>)
 8014764:	681b      	ldr	r3, [r3, #0]
 8014766:	60fb      	str	r3, [r7, #12]
 8014768:	e00c      	b.n	8014784 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	681a      	ldr	r2, [r3, #0]
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	429a      	cmp	r2, r3
 8014774:	d103      	bne.n	801477e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8014776:	683b      	ldr	r3, [r7, #0]
 8014778:	681a      	ldr	r2, [r3, #0]
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	68db      	ldr	r3, [r3, #12]
 8014782:	60fb      	str	r3, [r7, #12]
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d1ef      	bne.n	801476a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801478a:	bf00      	nop
 801478c:	3714      	adds	r7, #20
 801478e:	46bd      	mov	sp, r7
 8014790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014794:	4770      	bx	lr
 8014796:	bf00      	nop
 8014798:	2000cf38 	.word	0x2000cf38

0801479c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 80147a0:	4b20      	ldr	r3, [pc, #128]	; (8014824 <dhcp_inc_pcb_refcount+0x88>)
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d133      	bne.n	8014810 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80147a8:	4b1f      	ldr	r3, [pc, #124]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d005      	beq.n	80147bc <dhcp_inc_pcb_refcount+0x20>
 80147b0:	4b1e      	ldr	r3, [pc, #120]	; (801482c <dhcp_inc_pcb_refcount+0x90>)
 80147b2:	22e5      	movs	r2, #229	; 0xe5
 80147b4:	491e      	ldr	r1, [pc, #120]	; (8014830 <dhcp_inc_pcb_refcount+0x94>)
 80147b6:	481f      	ldr	r0, [pc, #124]	; (8014834 <dhcp_inc_pcb_refcount+0x98>)
 80147b8:	f004 fc00 	bl	8018fbc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80147bc:	f7ff ffa6 	bl	801470c <udp_new>
 80147c0:	4603      	mov	r3, r0
 80147c2:	4a19      	ldr	r2, [pc, #100]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147c4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80147c6:	4b18      	ldr	r3, [pc, #96]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d102      	bne.n	80147d4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80147ce:	f04f 33ff 	mov.w	r3, #4294967295
 80147d2:	e024      	b.n	801481e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80147d4:	4b14      	ldr	r3, [pc, #80]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	7a5a      	ldrb	r2, [r3, #9]
 80147da:	4b13      	ldr	r3, [pc, #76]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	f042 0220 	orr.w	r2, r2, #32
 80147e2:	b2d2      	uxtb	r2, r2
 80147e4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80147e6:	4b10      	ldr	r3, [pc, #64]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	2244      	movs	r2, #68	; 0x44
 80147ec:	4912      	ldr	r1, [pc, #72]	; (8014838 <dhcp_inc_pcb_refcount+0x9c>)
 80147ee:	4618      	mov	r0, r3
 80147f0:	f7ff fe34 	bl	801445c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80147f4:	4b0c      	ldr	r3, [pc, #48]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	2243      	movs	r2, #67	; 0x43
 80147fa:	490f      	ldr	r1, [pc, #60]	; (8014838 <dhcp_inc_pcb_refcount+0x9c>)
 80147fc:	4618      	mov	r0, r3
 80147fe:	f7ff feb5 	bl	801456c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8014802:	4b09      	ldr	r3, [pc, #36]	; (8014828 <dhcp_inc_pcb_refcount+0x8c>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	2200      	movs	r2, #0
 8014808:	490c      	ldr	r1, [pc, #48]	; (801483c <dhcp_inc_pcb_refcount+0xa0>)
 801480a:	4618      	mov	r0, r3
 801480c:	f7ff ff1c 	bl	8014648 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8014810:	4b04      	ldr	r3, [pc, #16]	; (8014824 <dhcp_inc_pcb_refcount+0x88>)
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	3301      	adds	r3, #1
 8014816:	b2da      	uxtb	r2, r3
 8014818:	4b02      	ldr	r3, [pc, #8]	; (8014824 <dhcp_inc_pcb_refcount+0x88>)
 801481a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801481c:	2300      	movs	r3, #0
}
 801481e:	4618      	mov	r0, r3
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	2000cf68 	.word	0x2000cf68
 8014828:	2000cf64 	.word	0x2000cf64
 801482c:	0801c654 	.word	0x0801c654
 8014830:	0801c68c 	.word	0x0801c68c
 8014834:	0801c6b4 	.word	0x0801c6b4
 8014838:	0801f5c4 	.word	0x0801f5c4
 801483c:	080160d5 	.word	0x080160d5

08014840 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8014840:	b580      	push	{r7, lr}
 8014842:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8014844:	4b0e      	ldr	r3, [pc, #56]	; (8014880 <dhcp_dec_pcb_refcount+0x40>)
 8014846:	781b      	ldrb	r3, [r3, #0]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d105      	bne.n	8014858 <dhcp_dec_pcb_refcount+0x18>
 801484c:	4b0d      	ldr	r3, [pc, #52]	; (8014884 <dhcp_dec_pcb_refcount+0x44>)
 801484e:	22ff      	movs	r2, #255	; 0xff
 8014850:	490d      	ldr	r1, [pc, #52]	; (8014888 <dhcp_dec_pcb_refcount+0x48>)
 8014852:	480e      	ldr	r0, [pc, #56]	; (801488c <dhcp_dec_pcb_refcount+0x4c>)
 8014854:	f004 fbb2 	bl	8018fbc <iprintf>
  dhcp_pcb_refcount--;
 8014858:	4b09      	ldr	r3, [pc, #36]	; (8014880 <dhcp_dec_pcb_refcount+0x40>)
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	3b01      	subs	r3, #1
 801485e:	b2da      	uxtb	r2, r3
 8014860:	4b07      	ldr	r3, [pc, #28]	; (8014880 <dhcp_dec_pcb_refcount+0x40>)
 8014862:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8014864:	4b06      	ldr	r3, [pc, #24]	; (8014880 <dhcp_dec_pcb_refcount+0x40>)
 8014866:	781b      	ldrb	r3, [r3, #0]
 8014868:	2b00      	cmp	r3, #0
 801486a:	d107      	bne.n	801487c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801486c:	4b08      	ldr	r3, [pc, #32]	; (8014890 <dhcp_dec_pcb_refcount+0x50>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	4618      	mov	r0, r3
 8014872:	f7ff ff09 	bl	8014688 <udp_remove>
    dhcp_pcb = NULL;
 8014876:	4b06      	ldr	r3, [pc, #24]	; (8014890 <dhcp_dec_pcb_refcount+0x50>)
 8014878:	2200      	movs	r2, #0
 801487a:	601a      	str	r2, [r3, #0]
  }
}
 801487c:	bf00      	nop
 801487e:	bd80      	pop	{r7, pc}
 8014880:	2000cf68 	.word	0x2000cf68
 8014884:	0801c654 	.word	0x0801c654
 8014888:	0801c6dc 	.word	0x0801c6dc
 801488c:	0801c6b4 	.word	0x0801c6b4
 8014890:	2000cf64 	.word	0x2000cf64

08014894 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148a0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80148a2:	210c      	movs	r1, #12
 80148a4:	68f8      	ldr	r0, [r7, #12]
 80148a6:	f001 f857 	bl	8015958 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80148aa:	4b06      	ldr	r3, [pc, #24]	; (80148c4 <dhcp_handle_nak+0x30>)
 80148ac:	4a05      	ldr	r2, [pc, #20]	; (80148c4 <dhcp_handle_nak+0x30>)
 80148ae:	4905      	ldr	r1, [pc, #20]	; (80148c4 <dhcp_handle_nak+0x30>)
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f7f8 f92b 	bl	800cb0c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 fc4a 	bl	8015150 <dhcp_discover>
}
 80148bc:	bf00      	nop
 80148be:	3710      	adds	r7, #16
 80148c0:	46bd      	mov	sp, r7
 80148c2:	bd80      	pop	{r7, pc}
 80148c4:	0801f5c4 	.word	0x0801f5c4

080148c8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b084      	sub	sp, #16
 80148cc:	af00      	add	r7, sp, #0
 80148ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80148d6:	2108      	movs	r1, #8
 80148d8:	68f8      	ldr	r0, [r7, #12]
 80148da:	f001 f83d 	bl	8015958 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	331c      	adds	r3, #28
 80148e2:	2200      	movs	r2, #0
 80148e4:	4619      	mov	r1, r3
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	f002 fb3e 	bl	8016f68 <etharp_query>
 80148ec:	4603      	mov	r3, r0
 80148ee:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	799b      	ldrb	r3, [r3, #6]
 80148f4:	2bff      	cmp	r3, #255	; 0xff
 80148f6:	d005      	beq.n	8014904 <dhcp_check+0x3c>
    dhcp->tries++;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	799b      	ldrb	r3, [r3, #6]
 80148fc:	3301      	adds	r3, #1
 80148fe:	b2da      	uxtb	r2, r3
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8014904:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8014908:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801490a:	893b      	ldrh	r3, [r7, #8]
 801490c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014910:	4a06      	ldr	r2, [pc, #24]	; (801492c <dhcp_check+0x64>)
 8014912:	fb82 1203 	smull	r1, r2, r2, r3
 8014916:	1152      	asrs	r2, r2, #5
 8014918:	17db      	asrs	r3, r3, #31
 801491a:	1ad3      	subs	r3, r2, r3
 801491c:	b29a      	uxth	r2, r3
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8014922:	bf00      	nop
 8014924:	3710      	adds	r7, #16
 8014926:	46bd      	mov	sp, r7
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	10624dd3 	.word	0x10624dd3

08014930 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801493e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8014940:	4b0c      	ldr	r3, [pc, #48]	; (8014974 <dhcp_handle_offer+0x44>)
 8014942:	789b      	ldrb	r3, [r3, #2]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d011      	beq.n	801496c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	2200      	movs	r2, #0
 801494c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801494e:	4b0a      	ldr	r3, [pc, #40]	; (8014978 <dhcp_handle_offer+0x48>)
 8014950:	689b      	ldr	r3, [r3, #8]
 8014952:	4618      	mov	r0, r3
 8014954:	f7f7 f9c9 	bl	800bcea <lwip_htonl>
 8014958:	4602      	mov	r2, r0
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	691a      	ldr	r2, [r3, #16]
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8014966:	6878      	ldr	r0, [r7, #4]
 8014968:	f000 f808 	bl	801497c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801496c:	bf00      	nop
 801496e:	3710      	adds	r7, #16
 8014970:	46bd      	mov	sp, r7
 8014972:	bd80      	pop	{r7, pc}
 8014974:	2000cf5c 	.word	0x2000cf5c
 8014978:	2000cf3c 	.word	0x2000cf3c

0801497c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801497c:	b5b0      	push	{r4, r5, r7, lr}
 801497e:	b08a      	sub	sp, #40	; 0x28
 8014980:	af02      	add	r7, sp, #8
 8014982:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d109      	bne.n	801499e <dhcp_select+0x22>
 801498a:	4b71      	ldr	r3, [pc, #452]	; (8014b50 <dhcp_select+0x1d4>)
 801498c:	f240 1277 	movw	r2, #375	; 0x177
 8014990:	4970      	ldr	r1, [pc, #448]	; (8014b54 <dhcp_select+0x1d8>)
 8014992:	4871      	ldr	r0, [pc, #452]	; (8014b58 <dhcp_select+0x1dc>)
 8014994:	f004 fb12 	bl	8018fbc <iprintf>
 8014998:	f06f 030f 	mvn.w	r3, #15
 801499c:	e0d3      	b.n	8014b46 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149a2:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80149a4:	69bb      	ldr	r3, [r7, #24]
 80149a6:	2b00      	cmp	r3, #0
 80149a8:	d109      	bne.n	80149be <dhcp_select+0x42>
 80149aa:	4b69      	ldr	r3, [pc, #420]	; (8014b50 <dhcp_select+0x1d4>)
 80149ac:	f240 1279 	movw	r2, #377	; 0x179
 80149b0:	496a      	ldr	r1, [pc, #424]	; (8014b5c <dhcp_select+0x1e0>)
 80149b2:	4869      	ldr	r0, [pc, #420]	; (8014b58 <dhcp_select+0x1dc>)
 80149b4:	f004 fb02 	bl	8018fbc <iprintf>
 80149b8:	f06f 0305 	mvn.w	r3, #5
 80149bc:	e0c3      	b.n	8014b46 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80149be:	2101      	movs	r1, #1
 80149c0:	69b8      	ldr	r0, [r7, #24]
 80149c2:	f000 ffc9 	bl	8015958 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80149c6:	f107 030c 	add.w	r3, r7, #12
 80149ca:	2203      	movs	r2, #3
 80149cc:	69b9      	ldr	r1, [r7, #24]
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f001 fc4e 	bl	8016270 <dhcp_create_msg>
 80149d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80149d6:	697b      	ldr	r3, [r7, #20]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	f000 8085 	beq.w	8014ae8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	685b      	ldr	r3, [r3, #4]
 80149e2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80149e4:	89b8      	ldrh	r0, [r7, #12]
 80149e6:	693b      	ldr	r3, [r7, #16]
 80149e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80149ec:	2302      	movs	r3, #2
 80149ee:	2239      	movs	r2, #57	; 0x39
 80149f0:	f000 ffcc 	bl	801598c <dhcp_option>
 80149f4:	4603      	mov	r3, r0
 80149f6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80149f8:	89b8      	ldrh	r0, [r7, #12]
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a04:	461a      	mov	r2, r3
 8014a06:	f001 f81b 	bl	8015a40 <dhcp_option_short>
 8014a0a:	4603      	mov	r3, r0
 8014a0c:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014a0e:	89b8      	ldrh	r0, [r7, #12]
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a16:	2304      	movs	r3, #4
 8014a18:	2232      	movs	r2, #50	; 0x32
 8014a1a:	f000 ffb7 	bl	801598c <dhcp_option>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014a22:	89bc      	ldrh	r4, [r7, #12]
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a2a:	69bb      	ldr	r3, [r7, #24]
 8014a2c:	69db      	ldr	r3, [r3, #28]
 8014a2e:	4618      	mov	r0, r3
 8014a30:	f7f7 f95b 	bl	800bcea <lwip_htonl>
 8014a34:	4603      	mov	r3, r0
 8014a36:	461a      	mov	r2, r3
 8014a38:	4629      	mov	r1, r5
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	f001 f832 	bl	8015aa4 <dhcp_option_long>
 8014a40:	4603      	mov	r3, r0
 8014a42:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8014a44:	89b8      	ldrh	r0, [r7, #12]
 8014a46:	693b      	ldr	r3, [r7, #16]
 8014a48:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a4c:	2304      	movs	r3, #4
 8014a4e:	2236      	movs	r2, #54	; 0x36
 8014a50:	f000 ff9c 	bl	801598c <dhcp_option>
 8014a54:	4603      	mov	r3, r0
 8014a56:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8014a58:	89bc      	ldrh	r4, [r7, #12]
 8014a5a:	693b      	ldr	r3, [r7, #16]
 8014a5c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8014a60:	69bb      	ldr	r3, [r7, #24]
 8014a62:	699b      	ldr	r3, [r3, #24]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f7 f940 	bl	800bcea <lwip_htonl>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	4629      	mov	r1, r5
 8014a70:	4620      	mov	r0, r4
 8014a72:	f001 f817 	bl	8015aa4 <dhcp_option_long>
 8014a76:	4603      	mov	r3, r0
 8014a78:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014a7a:	89b8      	ldrh	r0, [r7, #12]
 8014a7c:	693b      	ldr	r3, [r7, #16]
 8014a7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a82:	2303      	movs	r3, #3
 8014a84:	2237      	movs	r2, #55	; 0x37
 8014a86:	f000 ff81 	bl	801598c <dhcp_option>
 8014a8a:	4603      	mov	r3, r0
 8014a8c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014a8e:	2300      	movs	r3, #0
 8014a90:	77bb      	strb	r3, [r7, #30]
 8014a92:	e00e      	b.n	8014ab2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014a94:	89b8      	ldrh	r0, [r7, #12]
 8014a96:	693b      	ldr	r3, [r7, #16]
 8014a98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014a9c:	7fbb      	ldrb	r3, [r7, #30]
 8014a9e:	4a30      	ldr	r2, [pc, #192]	; (8014b60 <dhcp_select+0x1e4>)
 8014aa0:	5cd3      	ldrb	r3, [r2, r3]
 8014aa2:	461a      	mov	r2, r3
 8014aa4:	f000 ffa6 	bl	80159f4 <dhcp_option_byte>
 8014aa8:	4603      	mov	r3, r0
 8014aaa:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014aac:	7fbb      	ldrb	r3, [r7, #30]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	77bb      	strb	r3, [r7, #30]
 8014ab2:	7fbb      	ldrb	r3, [r7, #30]
 8014ab4:	2b02      	cmp	r3, #2
 8014ab6:	d9ed      	bls.n	8014a94 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014ab8:	89b8      	ldrh	r0, [r7, #12]
 8014aba:	693b      	ldr	r3, [r7, #16]
 8014abc:	33f0      	adds	r3, #240	; 0xf0
 8014abe:	697a      	ldr	r2, [r7, #20]
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	f001 fcab 	bl	801641c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8014ac6:	4b27      	ldr	r3, [pc, #156]	; (8014b64 <dhcp_select+0x1e8>)
 8014ac8:	6818      	ldr	r0, [r3, #0]
 8014aca:	4b27      	ldr	r3, [pc, #156]	; (8014b68 <dhcp_select+0x1ec>)
 8014acc:	9301      	str	r3, [sp, #4]
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	9300      	str	r3, [sp, #0]
 8014ad2:	2343      	movs	r3, #67	; 0x43
 8014ad4:	4a25      	ldr	r2, [pc, #148]	; (8014b6c <dhcp_select+0x1f0>)
 8014ad6:	6979      	ldr	r1, [r7, #20]
 8014ad8:	f7ff fbda 	bl	8014290 <udp_sendto_if_src>
 8014adc:	4603      	mov	r3, r0
 8014ade:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8014ae0:	6978      	ldr	r0, [r7, #20]
 8014ae2:	f7f8 fd21 	bl	800d528 <pbuf_free>
 8014ae6:	e001      	b.n	8014aec <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014ae8:	23ff      	movs	r3, #255	; 0xff
 8014aea:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014aec:	69bb      	ldr	r3, [r7, #24]
 8014aee:	799b      	ldrb	r3, [r3, #6]
 8014af0:	2bff      	cmp	r3, #255	; 0xff
 8014af2:	d005      	beq.n	8014b00 <dhcp_select+0x184>
    dhcp->tries++;
 8014af4:	69bb      	ldr	r3, [r7, #24]
 8014af6:	799b      	ldrb	r3, [r3, #6]
 8014af8:	3301      	adds	r3, #1
 8014afa:	b2da      	uxtb	r2, r3
 8014afc:	69bb      	ldr	r3, [r7, #24]
 8014afe:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	799b      	ldrb	r3, [r3, #6]
 8014b04:	2b05      	cmp	r3, #5
 8014b06:	d80d      	bhi.n	8014b24 <dhcp_select+0x1a8>
 8014b08:	69bb      	ldr	r3, [r7, #24]
 8014b0a:	799b      	ldrb	r3, [r3, #6]
 8014b0c:	461a      	mov	r2, r3
 8014b0e:	2301      	movs	r3, #1
 8014b10:	4093      	lsls	r3, r2
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	461a      	mov	r2, r3
 8014b16:	0152      	lsls	r2, r2, #5
 8014b18:	1ad2      	subs	r2, r2, r3
 8014b1a:	0092      	lsls	r2, r2, #2
 8014b1c:	4413      	add	r3, r2
 8014b1e:	00db      	lsls	r3, r3, #3
 8014b20:	b29b      	uxth	r3, r3
 8014b22:	e001      	b.n	8014b28 <dhcp_select+0x1ac>
 8014b24:	f64e 2360 	movw	r3, #60000	; 0xea60
 8014b28:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014b2a:	89fb      	ldrh	r3, [r7, #14]
 8014b2c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014b30:	4a0f      	ldr	r2, [pc, #60]	; (8014b70 <dhcp_select+0x1f4>)
 8014b32:	fb82 1203 	smull	r1, r2, r2, r3
 8014b36:	1152      	asrs	r2, r2, #5
 8014b38:	17db      	asrs	r3, r3, #31
 8014b3a:	1ad3      	subs	r3, r2, r3
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	69bb      	ldr	r3, [r7, #24]
 8014b40:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014b42:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014b46:	4618      	mov	r0, r3
 8014b48:	3720      	adds	r7, #32
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	bdb0      	pop	{r4, r5, r7, pc}
 8014b4e:	bf00      	nop
 8014b50:	0801c654 	.word	0x0801c654
 8014b54:	0801c700 	.word	0x0801c700
 8014b58:	0801c6b4 	.word	0x0801c6b4
 8014b5c:	0801c71c 	.word	0x0801c71c
 8014b60:	20000048 	.word	0x20000048
 8014b64:	2000cf64 	.word	0x2000cf64
 8014b68:	0801f5c4 	.word	0x0801f5c4
 8014b6c:	0801f5c8 	.word	0x0801f5c8
 8014b70:	10624dd3 	.word	0x10624dd3

08014b74 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	b082      	sub	sp, #8
 8014b78:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8014b7a:	4b27      	ldr	r3, [pc, #156]	; (8014c18 <dhcp_coarse_tmr+0xa4>)
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	607b      	str	r3, [r7, #4]
 8014b80:	e042      	b.n	8014c08 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b86:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d039      	beq.n	8014c02 <dhcp_coarse_tmr+0x8e>
 8014b8e:	683b      	ldr	r3, [r7, #0]
 8014b90:	795b      	ldrb	r3, [r3, #5]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d035      	beq.n	8014c02 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	8a9b      	ldrh	r3, [r3, #20]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d012      	beq.n	8014bc4 <dhcp_coarse_tmr+0x50>
 8014b9e:	683b      	ldr	r3, [r7, #0]
 8014ba0:	8a5b      	ldrh	r3, [r3, #18]
 8014ba2:	3301      	adds	r3, #1
 8014ba4:	b29a      	uxth	r2, r3
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	825a      	strh	r2, [r3, #18]
 8014baa:	683b      	ldr	r3, [r7, #0]
 8014bac:	8a5a      	ldrh	r2, [r3, #18]
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	8a9b      	ldrh	r3, [r3, #20]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d106      	bne.n	8014bc4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8014bb6:	6878      	ldr	r0, [r7, #4]
 8014bb8:	f000 fe34 	bl	8015824 <dhcp_release_and_stop>
        dhcp_start(netif);
 8014bbc:	6878      	ldr	r0, [r7, #4]
 8014bbe:	f000 f96b 	bl	8014e98 <dhcp_start>
 8014bc2:	e01e      	b.n	8014c02 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8014bc4:	683b      	ldr	r3, [r7, #0]
 8014bc6:	8a1b      	ldrh	r3, [r3, #16]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d00b      	beq.n	8014be4 <dhcp_coarse_tmr+0x70>
 8014bcc:	683b      	ldr	r3, [r7, #0]
 8014bce:	8a1b      	ldrh	r3, [r3, #16]
 8014bd0:	1e5a      	subs	r2, r3, #1
 8014bd2:	b291      	uxth	r1, r2
 8014bd4:	683a      	ldr	r2, [r7, #0]
 8014bd6:	8211      	strh	r1, [r2, #16]
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d103      	bne.n	8014be4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	f000 f8c7 	bl	8014d70 <dhcp_t2_timeout>
 8014be2:	e00e      	b.n	8014c02 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8014be4:	683b      	ldr	r3, [r7, #0]
 8014be6:	89db      	ldrh	r3, [r3, #14]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d00a      	beq.n	8014c02 <dhcp_coarse_tmr+0x8e>
 8014bec:	683b      	ldr	r3, [r7, #0]
 8014bee:	89db      	ldrh	r3, [r3, #14]
 8014bf0:	1e5a      	subs	r2, r3, #1
 8014bf2:	b291      	uxth	r1, r2
 8014bf4:	683a      	ldr	r2, [r7, #0]
 8014bf6:	81d1      	strh	r1, [r2, #14]
 8014bf8:	2b01      	cmp	r3, #1
 8014bfa:	d102      	bne.n	8014c02 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f000 f888 	bl	8014d12 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	607b      	str	r3, [r7, #4]
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d1b9      	bne.n	8014b82 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8014c0e:	bf00      	nop
 8014c10:	bf00      	nop
 8014c12:	3708      	adds	r7, #8
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	2000ced0 	.word	0x2000ced0

08014c1c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b082      	sub	sp, #8
 8014c20:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8014c22:	4b16      	ldr	r3, [pc, #88]	; (8014c7c <dhcp_fine_tmr+0x60>)
 8014c24:	681b      	ldr	r3, [r3, #0]
 8014c26:	607b      	str	r3, [r7, #4]
 8014c28:	e020      	b.n	8014c6c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c2e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8014c30:	683b      	ldr	r3, [r7, #0]
 8014c32:	2b00      	cmp	r3, #0
 8014c34:	d017      	beq.n	8014c66 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	891b      	ldrh	r3, [r3, #8]
 8014c3a:	2b01      	cmp	r3, #1
 8014c3c:	d906      	bls.n	8014c4c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	891b      	ldrh	r3, [r3, #8]
 8014c42:	3b01      	subs	r3, #1
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	811a      	strh	r2, [r3, #8]
 8014c4a:	e00c      	b.n	8014c66 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	891b      	ldrh	r3, [r3, #8]
 8014c50:	2b01      	cmp	r3, #1
 8014c52:	d108      	bne.n	8014c66 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	891b      	ldrh	r3, [r3, #8]
 8014c58:	3b01      	subs	r3, #1
 8014c5a:	b29a      	uxth	r2, r3
 8014c5c:	683b      	ldr	r3, [r7, #0]
 8014c5e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f000 f80d 	bl	8014c80 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	607b      	str	r3, [r7, #4]
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d1db      	bne.n	8014c2a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8014c72:	bf00      	nop
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	2000ced0 	.word	0x2000ced0

08014c80 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b084      	sub	sp, #16
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c8c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	795b      	ldrb	r3, [r3, #5]
 8014c92:	2b0c      	cmp	r3, #12
 8014c94:	d003      	beq.n	8014c9e <dhcp_timeout+0x1e>
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	795b      	ldrb	r3, [r3, #5]
 8014c9a:	2b06      	cmp	r3, #6
 8014c9c:	d103      	bne.n	8014ca6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8014c9e:	6878      	ldr	r0, [r7, #4]
 8014ca0:	f000 fa56 	bl	8015150 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8014ca4:	e031      	b.n	8014d0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	795b      	ldrb	r3, [r3, #5]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d10e      	bne.n	8014ccc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8014cae:	68fb      	ldr	r3, [r7, #12]
 8014cb0:	799b      	ldrb	r3, [r3, #6]
 8014cb2:	2b05      	cmp	r3, #5
 8014cb4:	d803      	bhi.n	8014cbe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8014cb6:	6878      	ldr	r0, [r7, #4]
 8014cb8:	f7ff fe60 	bl	801497c <dhcp_select>
}
 8014cbc:	e025      	b.n	8014d0a <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f000 fdb0 	bl	8015824 <dhcp_release_and_stop>
      dhcp_start(netif);
 8014cc4:	6878      	ldr	r0, [r7, #4]
 8014cc6:	f000 f8e7 	bl	8014e98 <dhcp_start>
}
 8014cca:	e01e      	b.n	8014d0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	795b      	ldrb	r3, [r3, #5]
 8014cd0:	2b08      	cmp	r3, #8
 8014cd2:	d10b      	bne.n	8014cec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	799b      	ldrb	r3, [r3, #6]
 8014cd8:	2b01      	cmp	r3, #1
 8014cda:	d803      	bhi.n	8014ce4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8014cdc:	6878      	ldr	r0, [r7, #4]
 8014cde:	f7ff fdf3 	bl	80148c8 <dhcp_check>
}
 8014ce2:	e012      	b.n	8014d0a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f000 fad5 	bl	8015294 <dhcp_bind>
}
 8014cea:	e00e      	b.n	8014d0a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	795b      	ldrb	r3, [r3, #5]
 8014cf0:	2b03      	cmp	r3, #3
 8014cf2:	d10a      	bne.n	8014d0a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	799b      	ldrb	r3, [r3, #6]
 8014cf8:	2b01      	cmp	r3, #1
 8014cfa:	d803      	bhi.n	8014d04 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f000 fcdb 	bl	80156b8 <dhcp_reboot>
}
 8014d02:	e002      	b.n	8014d0a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8014d04:	6878      	ldr	r0, [r7, #4]
 8014d06:	f000 fa23 	bl	8015150 <dhcp_discover>
}
 8014d0a:	bf00      	nop
 8014d0c:	3710      	adds	r7, #16
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	bd80      	pop	{r7, pc}

08014d12 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8014d12:	b580      	push	{r7, lr}
 8014d14:	b084      	sub	sp, #16
 8014d16:	af00      	add	r7, sp, #0
 8014d18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014d20:	68fb      	ldr	r3, [r7, #12]
 8014d22:	795b      	ldrb	r3, [r3, #5]
 8014d24:	2b01      	cmp	r3, #1
 8014d26:	d007      	beq.n	8014d38 <dhcp_t1_timeout+0x26>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	795b      	ldrb	r3, [r3, #5]
 8014d2c:	2b0a      	cmp	r3, #10
 8014d2e:	d003      	beq.n	8014d38 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014d34:	2b05      	cmp	r3, #5
 8014d36:	d117      	bne.n	8014d68 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fb85 	bl	8015448 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	899b      	ldrh	r3, [r3, #12]
 8014d42:	461a      	mov	r2, r3
 8014d44:	68fb      	ldr	r3, [r7, #12]
 8014d46:	8a5b      	ldrh	r3, [r3, #18]
 8014d48:	1ad3      	subs	r3, r2, r3
 8014d4a:	2b01      	cmp	r3, #1
 8014d4c:	dd0c      	ble.n	8014d68 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	899b      	ldrh	r3, [r3, #12]
 8014d52:	461a      	mov	r2, r3
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	8a5b      	ldrh	r3, [r3, #18]
 8014d58:	1ad3      	subs	r3, r2, r3
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	da00      	bge.n	8014d60 <dhcp_t1_timeout+0x4e>
 8014d5e:	3301      	adds	r3, #1
 8014d60:	105b      	asrs	r3, r3, #1
 8014d62:	b29a      	uxth	r2, r3
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8014d68:	bf00      	nop
 8014d6a:	3710      	adds	r7, #16
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b084      	sub	sp, #16
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d7c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	795b      	ldrb	r3, [r3, #5]
 8014d82:	2b01      	cmp	r3, #1
 8014d84:	d00b      	beq.n	8014d9e <dhcp_t2_timeout+0x2e>
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	795b      	ldrb	r3, [r3, #5]
 8014d8a:	2b0a      	cmp	r3, #10
 8014d8c:	d007      	beq.n	8014d9e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8014d92:	2b05      	cmp	r3, #5
 8014d94:	d003      	beq.n	8014d9e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	795b      	ldrb	r3, [r3, #5]
 8014d9a:	2b04      	cmp	r3, #4
 8014d9c:	d117      	bne.n	8014dce <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f000 fbee 	bl	8015580 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	8a9b      	ldrh	r3, [r3, #20]
 8014da8:	461a      	mov	r2, r3
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	8a5b      	ldrh	r3, [r3, #18]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	2b01      	cmp	r3, #1
 8014db2:	dd0c      	ble.n	8014dce <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	8a9b      	ldrh	r3, [r3, #20]
 8014db8:	461a      	mov	r2, r3
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	8a5b      	ldrh	r3, [r3, #18]
 8014dbe:	1ad3      	subs	r3, r2, r3
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	da00      	bge.n	8014dc6 <dhcp_t2_timeout+0x56>
 8014dc4:	3301      	adds	r3, #1
 8014dc6:	105b      	asrs	r3, r3, #1
 8014dc8:	b29a      	uxth	r2, r3
 8014dca:	68fb      	ldr	r3, [r7, #12]
 8014dcc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8014dce:	bf00      	nop
 8014dd0:	3710      	adds	r7, #16
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
	...

08014dd8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b084      	sub	sp, #16
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014de6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	2200      	movs	r2, #0
 8014dec:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	2200      	movs	r2, #0
 8014df2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8014df4:	4b26      	ldr	r3, [pc, #152]	; (8014e90 <dhcp_handle_ack+0xb8>)
 8014df6:	78db      	ldrb	r3, [r3, #3]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d003      	beq.n	8014e04 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8014dfc:	4b25      	ldr	r3, [pc, #148]	; (8014e94 <dhcp_handle_ack+0xbc>)
 8014dfe:	68da      	ldr	r2, [r3, #12]
 8014e00:	68fb      	ldr	r3, [r7, #12]
 8014e02:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8014e04:	4b22      	ldr	r3, [pc, #136]	; (8014e90 <dhcp_handle_ack+0xb8>)
 8014e06:	791b      	ldrb	r3, [r3, #4]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d004      	beq.n	8014e16 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8014e0c:	4b21      	ldr	r3, [pc, #132]	; (8014e94 <dhcp_handle_ack+0xbc>)
 8014e0e:	691a      	ldr	r2, [r3, #16]
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	62da      	str	r2, [r3, #44]	; 0x2c
 8014e14:	e004      	b.n	8014e20 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e1a:	085a      	lsrs	r2, r3, #1
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8014e20:	4b1b      	ldr	r3, [pc, #108]	; (8014e90 <dhcp_handle_ack+0xb8>)
 8014e22:	795b      	ldrb	r3, [r3, #5]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d004      	beq.n	8014e32 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8014e28:	4b1a      	ldr	r3, [pc, #104]	; (8014e94 <dhcp_handle_ack+0xbc>)
 8014e2a:	695a      	ldr	r2, [r3, #20]
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8014e30:	e007      	b.n	8014e42 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014e36:	4613      	mov	r3, r2
 8014e38:	00db      	lsls	r3, r3, #3
 8014e3a:	1a9b      	subs	r3, r3, r2
 8014e3c:	08da      	lsrs	r2, r3, #3
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8014e42:	683b      	ldr	r3, [r7, #0]
 8014e44:	691a      	ldr	r2, [r3, #16]
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8014e4a:	4b11      	ldr	r3, [pc, #68]	; (8014e90 <dhcp_handle_ack+0xb8>)
 8014e4c:	799b      	ldrb	r3, [r3, #6]
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d00b      	beq.n	8014e6a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8014e52:	4b10      	ldr	r3, [pc, #64]	; (8014e94 <dhcp_handle_ack+0xbc>)
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	4618      	mov	r0, r3
 8014e58:	f7f6 ff47 	bl	800bcea <lwip_htonl>
 8014e5c:	4602      	mov	r2, r0
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	2201      	movs	r2, #1
 8014e66:	71da      	strb	r2, [r3, #7]
 8014e68:	e002      	b.n	8014e70 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8014e70:	4b07      	ldr	r3, [pc, #28]	; (8014e90 <dhcp_handle_ack+0xb8>)
 8014e72:	79db      	ldrb	r3, [r3, #7]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d007      	beq.n	8014e88 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8014e78:	4b06      	ldr	r3, [pc, #24]	; (8014e94 <dhcp_handle_ack+0xbc>)
 8014e7a:	69db      	ldr	r3, [r3, #28]
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	f7f6 ff34 	bl	800bcea <lwip_htonl>
 8014e82:	4602      	mov	r2, r0
 8014e84:	68fb      	ldr	r3, [r7, #12]
 8014e86:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8014e88:	bf00      	nop
 8014e8a:	3710      	adds	r7, #16
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}
 8014e90:	2000cf5c 	.word	0x2000cf5c
 8014e94:	2000cf3c 	.word	0x2000cf3c

08014e98 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8014e98:	b580      	push	{r7, lr}
 8014e9a:	b084      	sub	sp, #16
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d109      	bne.n	8014eba <dhcp_start+0x22>
 8014ea6:	4b37      	ldr	r3, [pc, #220]	; (8014f84 <dhcp_start+0xec>)
 8014ea8:	f240 22e7 	movw	r2, #743	; 0x2e7
 8014eac:	4936      	ldr	r1, [pc, #216]	; (8014f88 <dhcp_start+0xf0>)
 8014eae:	4837      	ldr	r0, [pc, #220]	; (8014f8c <dhcp_start+0xf4>)
 8014eb0:	f004 f884 	bl	8018fbc <iprintf>
 8014eb4:	f06f 030f 	mvn.w	r3, #15
 8014eb8:	e060      	b.n	8014f7c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014ec0:	f003 0301 	and.w	r3, r3, #1
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d109      	bne.n	8014edc <dhcp_start+0x44>
 8014ec8:	4b2e      	ldr	r3, [pc, #184]	; (8014f84 <dhcp_start+0xec>)
 8014eca:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8014ece:	4930      	ldr	r1, [pc, #192]	; (8014f90 <dhcp_start+0xf8>)
 8014ed0:	482e      	ldr	r0, [pc, #184]	; (8014f8c <dhcp_start+0xf4>)
 8014ed2:	f004 f873 	bl	8018fbc <iprintf>
 8014ed6:	f06f 030f 	mvn.w	r3, #15
 8014eda:	e04f      	b.n	8014f7c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ee0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014ee6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8014eea:	d202      	bcs.n	8014ef2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8014eec:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef0:	e044      	b.n	8014f7c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d10d      	bne.n	8014f14 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8014ef8:	2034      	movs	r0, #52	; 0x34
 8014efa:	f7f7 fa4b 	bl	800c394 <mem_malloc>
 8014efe:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8014f00:	68fb      	ldr	r3, [r7, #12]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d102      	bne.n	8014f0c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8014f06:	f04f 33ff 	mov.w	r3, #4294967295
 8014f0a:	e037      	b.n	8014f7c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	68fa      	ldr	r2, [r7, #12]
 8014f10:	625a      	str	r2, [r3, #36]	; 0x24
 8014f12:	e005      	b.n	8014f20 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8014f14:	68fb      	ldr	r3, [r7, #12]
 8014f16:	791b      	ldrb	r3, [r3, #4]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d001      	beq.n	8014f20 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014f1c:	f7ff fc90 	bl	8014840 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8014f20:	2234      	movs	r2, #52	; 0x34
 8014f22:	2100      	movs	r1, #0
 8014f24:	68f8      	ldr	r0, [r7, #12]
 8014f26:	f004 f8ae 	bl	8019086 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8014f2a:	f7ff fc37 	bl	801479c <dhcp_inc_pcb_refcount>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d002      	beq.n	8014f3a <dhcp_start+0xa2>
    return ERR_MEM;
 8014f34:	f04f 33ff 	mov.w	r3, #4294967295
 8014f38:	e020      	b.n	8014f7c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	2201      	movs	r2, #1
 8014f3e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014f46:	f003 0304 	and.w	r3, r3, #4
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d105      	bne.n	8014f5a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8014f4e:	2102      	movs	r1, #2
 8014f50:	68f8      	ldr	r0, [r7, #12]
 8014f52:	f000 fd01 	bl	8015958 <dhcp_set_state>
    return ERR_OK;
 8014f56:	2300      	movs	r3, #0
 8014f58:	e010      	b.n	8014f7c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8014f5a:	6878      	ldr	r0, [r7, #4]
 8014f5c:	f000 f8f8 	bl	8015150 <dhcp_discover>
 8014f60:	4603      	mov	r3, r0
 8014f62:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8014f64:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d005      	beq.n	8014f78 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f000 fc59 	bl	8015824 <dhcp_release_and_stop>
    return ERR_MEM;
 8014f72:	f04f 33ff 	mov.w	r3, #4294967295
 8014f76:	e001      	b.n	8014f7c <dhcp_start+0xe4>
  }
  return result;
 8014f78:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	3710      	adds	r7, #16
 8014f80:	46bd      	mov	sp, r7
 8014f82:	bd80      	pop	{r7, pc}
 8014f84:	0801c654 	.word	0x0801c654
 8014f88:	0801c738 	.word	0x0801c738
 8014f8c:	0801c6b4 	.word	0x0801c6b4
 8014f90:	0801c77c 	.word	0x0801c77c

08014f94 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	b084      	sub	sp, #16
 8014f98:	af00      	add	r7, sp, #0
 8014f9a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8014fa2:	68fb      	ldr	r3, [r7, #12]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d025      	beq.n	8014ff4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	795b      	ldrb	r3, [r3, #5]
 8014fac:	2b0a      	cmp	r3, #10
 8014fae:	d008      	beq.n	8014fc2 <dhcp_network_changed+0x2e>
 8014fb0:	2b0a      	cmp	r3, #10
 8014fb2:	dc0d      	bgt.n	8014fd0 <dhcp_network_changed+0x3c>
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d01f      	beq.n	8014ff8 <dhcp_network_changed+0x64>
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	db09      	blt.n	8014fd0 <dhcp_network_changed+0x3c>
 8014fbc:	3b03      	subs	r3, #3
 8014fbe:	2b02      	cmp	r3, #2
 8014fc0:	d806      	bhi.n	8014fd0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2200      	movs	r2, #0
 8014fc6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8014fc8:	6878      	ldr	r0, [r7, #4]
 8014fca:	f000 fb75 	bl	80156b8 <dhcp_reboot>
      break;
 8014fce:	e014      	b.n	8014ffa <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	795b      	ldrb	r3, [r3, #5]
 8014fd4:	2b0c      	cmp	r3, #12
 8014fd6:	d906      	bls.n	8014fe6 <dhcp_network_changed+0x52>
 8014fd8:	4b09      	ldr	r3, [pc, #36]	; (8015000 <dhcp_network_changed+0x6c>)
 8014fda:	f240 326d 	movw	r2, #877	; 0x36d
 8014fde:	4909      	ldr	r1, [pc, #36]	; (8015004 <dhcp_network_changed+0x70>)
 8014fe0:	4809      	ldr	r0, [pc, #36]	; (8015008 <dhcp_network_changed+0x74>)
 8014fe2:	f003 ffeb 	bl	8018fbc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	2200      	movs	r2, #0
 8014fea:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f000 f8af 	bl	8015150 <dhcp_discover>
      break;
 8014ff2:	e002      	b.n	8014ffa <dhcp_network_changed+0x66>
    return;
 8014ff4:	bf00      	nop
 8014ff6:	e000      	b.n	8014ffa <dhcp_network_changed+0x66>
      break;
 8014ff8:	bf00      	nop
  }
}
 8014ffa:	3710      	adds	r7, #16
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}
 8015000:	0801c654 	.word	0x0801c654
 8015004:	0801c7a0 	.word	0x0801c7a0
 8015008:	0801c6b4 	.word	0x0801c6b4

0801500c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b084      	sub	sp, #16
 8015010:	af00      	add	r7, sp, #0
 8015012:	6078      	str	r0, [r7, #4]
 8015014:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d107      	bne.n	801502c <dhcp_arp_reply+0x20>
 801501c:	4b0e      	ldr	r3, [pc, #56]	; (8015058 <dhcp_arp_reply+0x4c>)
 801501e:	f240 328b 	movw	r2, #907	; 0x38b
 8015022:	490e      	ldr	r1, [pc, #56]	; (801505c <dhcp_arp_reply+0x50>)
 8015024:	480e      	ldr	r0, [pc, #56]	; (8015060 <dhcp_arp_reply+0x54>)
 8015026:	f003 ffc9 	bl	8018fbc <iprintf>
 801502a:	e012      	b.n	8015052 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015030:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d00c      	beq.n	8015052 <dhcp_arp_reply+0x46>
 8015038:	68fb      	ldr	r3, [r7, #12]
 801503a:	795b      	ldrb	r3, [r3, #5]
 801503c:	2b08      	cmp	r3, #8
 801503e:	d108      	bne.n	8015052 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8015040:	683b      	ldr	r3, [r7, #0]
 8015042:	681a      	ldr	r2, [r3, #0]
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	69db      	ldr	r3, [r3, #28]
 8015048:	429a      	cmp	r2, r3
 801504a:	d102      	bne.n	8015052 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801504c:	6878      	ldr	r0, [r7, #4]
 801504e:	f000 f809 	bl	8015064 <dhcp_decline>
    }
  }
}
 8015052:	3710      	adds	r7, #16
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	0801c654 	.word	0x0801c654
 801505c:	0801c738 	.word	0x0801c738
 8015060:	0801c6b4 	.word	0x0801c6b4

08015064 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8015064:	b5b0      	push	{r4, r5, r7, lr}
 8015066:	b08a      	sub	sp, #40	; 0x28
 8015068:	af02      	add	r7, sp, #8
 801506a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015070:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015072:	210c      	movs	r1, #12
 8015074:	69b8      	ldr	r0, [r7, #24]
 8015076:	f000 fc6f 	bl	8015958 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801507a:	f107 030c 	add.w	r3, r7, #12
 801507e:	2204      	movs	r2, #4
 8015080:	69b9      	ldr	r1, [r7, #24]
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f001 f8f4 	bl	8016270 <dhcp_create_msg>
 8015088:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801508a:	697b      	ldr	r3, [r7, #20]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d035      	beq.n	80150fc <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015090:	697b      	ldr	r3, [r7, #20]
 8015092:	685b      	ldr	r3, [r3, #4]
 8015094:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015096:	89b8      	ldrh	r0, [r7, #12]
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801509e:	2304      	movs	r3, #4
 80150a0:	2232      	movs	r2, #50	; 0x32
 80150a2:	f000 fc73 	bl	801598c <dhcp_option>
 80150a6:	4603      	mov	r3, r0
 80150a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80150aa:	89bc      	ldrh	r4, [r7, #12]
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80150b2:	69bb      	ldr	r3, [r7, #24]
 80150b4:	69db      	ldr	r3, [r3, #28]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f7f6 fe17 	bl	800bcea <lwip_htonl>
 80150bc:	4603      	mov	r3, r0
 80150be:	461a      	mov	r2, r3
 80150c0:	4629      	mov	r1, r5
 80150c2:	4620      	mov	r0, r4
 80150c4:	f000 fcee 	bl	8015aa4 <dhcp_option_long>
 80150c8:	4603      	mov	r3, r0
 80150ca:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80150cc:	89b8      	ldrh	r0, [r7, #12]
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	33f0      	adds	r3, #240	; 0xf0
 80150d2:	697a      	ldr	r2, [r7, #20]
 80150d4:	4619      	mov	r1, r3
 80150d6:	f001 f9a1 	bl	801641c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80150da:	4b19      	ldr	r3, [pc, #100]	; (8015140 <dhcp_decline+0xdc>)
 80150dc:	6818      	ldr	r0, [r3, #0]
 80150de:	4b19      	ldr	r3, [pc, #100]	; (8015144 <dhcp_decline+0xe0>)
 80150e0:	9301      	str	r3, [sp, #4]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	9300      	str	r3, [sp, #0]
 80150e6:	2343      	movs	r3, #67	; 0x43
 80150e8:	4a17      	ldr	r2, [pc, #92]	; (8015148 <dhcp_decline+0xe4>)
 80150ea:	6979      	ldr	r1, [r7, #20]
 80150ec:	f7ff f8d0 	bl	8014290 <udp_sendto_if_src>
 80150f0:	4603      	mov	r3, r0
 80150f2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80150f4:	6978      	ldr	r0, [r7, #20]
 80150f6:	f7f8 fa17 	bl	800d528 <pbuf_free>
 80150fa:	e001      	b.n	8015100 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80150fc:	23ff      	movs	r3, #255	; 0xff
 80150fe:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	799b      	ldrb	r3, [r3, #6]
 8015104:	2bff      	cmp	r3, #255	; 0xff
 8015106:	d005      	beq.n	8015114 <dhcp_decline+0xb0>
    dhcp->tries++;
 8015108:	69bb      	ldr	r3, [r7, #24]
 801510a:	799b      	ldrb	r3, [r3, #6]
 801510c:	3301      	adds	r3, #1
 801510e:	b2da      	uxtb	r2, r3
 8015110:	69bb      	ldr	r3, [r7, #24]
 8015112:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8015114:	f242 7310 	movw	r3, #10000	; 0x2710
 8015118:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801511a:	89fb      	ldrh	r3, [r7, #14]
 801511c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015120:	4a0a      	ldr	r2, [pc, #40]	; (801514c <dhcp_decline+0xe8>)
 8015122:	fb82 1203 	smull	r1, r2, r2, r3
 8015126:	1152      	asrs	r2, r2, #5
 8015128:	17db      	asrs	r3, r3, #31
 801512a:	1ad3      	subs	r3, r2, r3
 801512c:	b29a      	uxth	r2, r3
 801512e:	69bb      	ldr	r3, [r7, #24]
 8015130:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015132:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015136:	4618      	mov	r0, r3
 8015138:	3720      	adds	r7, #32
 801513a:	46bd      	mov	sp, r7
 801513c:	bdb0      	pop	{r4, r5, r7, pc}
 801513e:	bf00      	nop
 8015140:	2000cf64 	.word	0x2000cf64
 8015144:	0801f5c4 	.word	0x0801f5c4
 8015148:	0801f5c8 	.word	0x0801f5c8
 801514c:	10624dd3 	.word	0x10624dd3

08015150 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b08a      	sub	sp, #40	; 0x28
 8015154:	af02      	add	r7, sp, #8
 8015156:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801515c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801515e:	2300      	movs	r3, #0
 8015160:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8015162:	69bb      	ldr	r3, [r7, #24]
 8015164:	2200      	movs	r2, #0
 8015166:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8015168:	2106      	movs	r1, #6
 801516a:	69b8      	ldr	r0, [r7, #24]
 801516c:	f000 fbf4 	bl	8015958 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8015170:	f107 0308 	add.w	r3, r7, #8
 8015174:	2201      	movs	r2, #1
 8015176:	69b9      	ldr	r1, [r7, #24]
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	f001 f879 	bl	8016270 <dhcp_create_msg>
 801517e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8015180:	693b      	ldr	r3, [r7, #16]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d04b      	beq.n	801521e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	685b      	ldr	r3, [r3, #4]
 801518a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801518c:	8938      	ldrh	r0, [r7, #8]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015194:	2302      	movs	r3, #2
 8015196:	2239      	movs	r2, #57	; 0x39
 8015198:	f000 fbf8 	bl	801598c <dhcp_option>
 801519c:	4603      	mov	r3, r0
 801519e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80151a0:	8938      	ldrh	r0, [r7, #8]
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80151ac:	461a      	mov	r2, r3
 80151ae:	f000 fc47 	bl	8015a40 <dhcp_option_short>
 80151b2:	4603      	mov	r3, r0
 80151b4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80151b6:	8938      	ldrh	r0, [r7, #8]
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151be:	2303      	movs	r3, #3
 80151c0:	2237      	movs	r2, #55	; 0x37
 80151c2:	f000 fbe3 	bl	801598c <dhcp_option>
 80151c6:	4603      	mov	r3, r0
 80151c8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151ca:	2300      	movs	r3, #0
 80151cc:	77fb      	strb	r3, [r7, #31]
 80151ce:	e00e      	b.n	80151ee <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80151d0:	8938      	ldrh	r0, [r7, #8]
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151d8:	7ffb      	ldrb	r3, [r7, #31]
 80151da:	4a29      	ldr	r2, [pc, #164]	; (8015280 <dhcp_discover+0x130>)
 80151dc:	5cd3      	ldrb	r3, [r2, r3]
 80151de:	461a      	mov	r2, r3
 80151e0:	f000 fc08 	bl	80159f4 <dhcp_option_byte>
 80151e4:	4603      	mov	r3, r0
 80151e6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80151e8:	7ffb      	ldrb	r3, [r7, #31]
 80151ea:	3301      	adds	r3, #1
 80151ec:	77fb      	strb	r3, [r7, #31]
 80151ee:	7ffb      	ldrb	r3, [r7, #31]
 80151f0:	2b02      	cmp	r3, #2
 80151f2:	d9ed      	bls.n	80151d0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80151f4:	8938      	ldrh	r0, [r7, #8]
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	33f0      	adds	r3, #240	; 0xf0
 80151fa:	693a      	ldr	r2, [r7, #16]
 80151fc:	4619      	mov	r1, r3
 80151fe:	f001 f90d 	bl	801641c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015202:	4b20      	ldr	r3, [pc, #128]	; (8015284 <dhcp_discover+0x134>)
 8015204:	6818      	ldr	r0, [r3, #0]
 8015206:	4b20      	ldr	r3, [pc, #128]	; (8015288 <dhcp_discover+0x138>)
 8015208:	9301      	str	r3, [sp, #4]
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	9300      	str	r3, [sp, #0]
 801520e:	2343      	movs	r3, #67	; 0x43
 8015210:	4a1e      	ldr	r2, [pc, #120]	; (801528c <dhcp_discover+0x13c>)
 8015212:	6939      	ldr	r1, [r7, #16]
 8015214:	f7ff f83c 	bl	8014290 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8015218:	6938      	ldr	r0, [r7, #16]
 801521a:	f7f8 f985 	bl	800d528 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801521e:	69bb      	ldr	r3, [r7, #24]
 8015220:	799b      	ldrb	r3, [r3, #6]
 8015222:	2bff      	cmp	r3, #255	; 0xff
 8015224:	d005      	beq.n	8015232 <dhcp_discover+0xe2>
    dhcp->tries++;
 8015226:	69bb      	ldr	r3, [r7, #24]
 8015228:	799b      	ldrb	r3, [r3, #6]
 801522a:	3301      	adds	r3, #1
 801522c:	b2da      	uxtb	r2, r3
 801522e:	69bb      	ldr	r3, [r7, #24]
 8015230:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015232:	69bb      	ldr	r3, [r7, #24]
 8015234:	799b      	ldrb	r3, [r3, #6]
 8015236:	2b05      	cmp	r3, #5
 8015238:	d80d      	bhi.n	8015256 <dhcp_discover+0x106>
 801523a:	69bb      	ldr	r3, [r7, #24]
 801523c:	799b      	ldrb	r3, [r3, #6]
 801523e:	461a      	mov	r2, r3
 8015240:	2301      	movs	r3, #1
 8015242:	4093      	lsls	r3, r2
 8015244:	b29b      	uxth	r3, r3
 8015246:	461a      	mov	r2, r3
 8015248:	0152      	lsls	r2, r2, #5
 801524a:	1ad2      	subs	r2, r2, r3
 801524c:	0092      	lsls	r2, r2, #2
 801524e:	4413      	add	r3, r2
 8015250:	00db      	lsls	r3, r3, #3
 8015252:	b29b      	uxth	r3, r3
 8015254:	e001      	b.n	801525a <dhcp_discover+0x10a>
 8015256:	f64e 2360 	movw	r3, #60000	; 0xea60
 801525a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801525c:	897b      	ldrh	r3, [r7, #10]
 801525e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015262:	4a0b      	ldr	r2, [pc, #44]	; (8015290 <dhcp_discover+0x140>)
 8015264:	fb82 1203 	smull	r1, r2, r2, r3
 8015268:	1152      	asrs	r2, r2, #5
 801526a:	17db      	asrs	r3, r3, #31
 801526c:	1ad3      	subs	r3, r2, r3
 801526e:	b29a      	uxth	r2, r3
 8015270:	69bb      	ldr	r3, [r7, #24]
 8015272:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015274:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015278:	4618      	mov	r0, r3
 801527a:	3720      	adds	r7, #32
 801527c:	46bd      	mov	sp, r7
 801527e:	bd80      	pop	{r7, pc}
 8015280:	20000048 	.word	0x20000048
 8015284:	2000cf64 	.word	0x2000cf64
 8015288:	0801f5c4 	.word	0x0801f5c4
 801528c:	0801f5c8 	.word	0x0801f5c8
 8015290:	10624dd3 	.word	0x10624dd3

08015294 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8015294:	b580      	push	{r7, lr}
 8015296:	b088      	sub	sp, #32
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d107      	bne.n	80152b2 <dhcp_bind+0x1e>
 80152a2:	4b64      	ldr	r3, [pc, #400]	; (8015434 <dhcp_bind+0x1a0>)
 80152a4:	f240 4215 	movw	r2, #1045	; 0x415
 80152a8:	4963      	ldr	r1, [pc, #396]	; (8015438 <dhcp_bind+0x1a4>)
 80152aa:	4864      	ldr	r0, [pc, #400]	; (801543c <dhcp_bind+0x1a8>)
 80152ac:	f003 fe86 	bl	8018fbc <iprintf>
 80152b0:	e0bc      	b.n	801542c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152b6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d107      	bne.n	80152ce <dhcp_bind+0x3a>
 80152be:	4b5d      	ldr	r3, [pc, #372]	; (8015434 <dhcp_bind+0x1a0>)
 80152c0:	f240 4217 	movw	r2, #1047	; 0x417
 80152c4:	495e      	ldr	r1, [pc, #376]	; (8015440 <dhcp_bind+0x1ac>)
 80152c6:	485d      	ldr	r0, [pc, #372]	; (801543c <dhcp_bind+0x1a8>)
 80152c8:	f003 fe78 	bl	8018fbc <iprintf>
 80152cc:	e0ae      	b.n	801542c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80152ce:	69bb      	ldr	r3, [r7, #24]
 80152d0:	2200      	movs	r2, #0
 80152d2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80152d4:	69bb      	ldr	r3, [r7, #24]
 80152d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152dc:	d019      	beq.n	8015312 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80152de:	69bb      	ldr	r3, [r7, #24]
 80152e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152e2:	331e      	adds	r3, #30
 80152e4:	4a57      	ldr	r2, [pc, #348]	; (8015444 <dhcp_bind+0x1b0>)
 80152e6:	fba2 2303 	umull	r2, r3, r2, r3
 80152ea:	095b      	lsrs	r3, r3, #5
 80152ec:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80152f4:	d302      	bcc.n	80152fc <dhcp_bind+0x68>
      timeout = 0xffff;
 80152f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80152fa:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80152fc:	69fb      	ldr	r3, [r7, #28]
 80152fe:	b29a      	uxth	r2, r3
 8015300:	69bb      	ldr	r3, [r7, #24]
 8015302:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8015304:	69bb      	ldr	r3, [r7, #24]
 8015306:	8a9b      	ldrh	r3, [r3, #20]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d102      	bne.n	8015312 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801530c:	69bb      	ldr	r3, [r7, #24]
 801530e:	2201      	movs	r2, #1
 8015310:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8015312:	69bb      	ldr	r3, [r7, #24]
 8015314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801531a:	d01d      	beq.n	8015358 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801531c:	69bb      	ldr	r3, [r7, #24]
 801531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015320:	331e      	adds	r3, #30
 8015322:	4a48      	ldr	r2, [pc, #288]	; (8015444 <dhcp_bind+0x1b0>)
 8015324:	fba2 2303 	umull	r2, r3, r2, r3
 8015328:	095b      	lsrs	r3, r3, #5
 801532a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015332:	d302      	bcc.n	801533a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8015334:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015338:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801533a:	69fb      	ldr	r3, [r7, #28]
 801533c:	b29a      	uxth	r2, r3
 801533e:	69bb      	ldr	r3, [r7, #24]
 8015340:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8015342:	69bb      	ldr	r3, [r7, #24]
 8015344:	895b      	ldrh	r3, [r3, #10]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d102      	bne.n	8015350 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801534a:	69bb      	ldr	r3, [r7, #24]
 801534c:	2201      	movs	r2, #1
 801534e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8015350:	69bb      	ldr	r3, [r7, #24]
 8015352:	895a      	ldrh	r2, [r3, #10]
 8015354:	69bb      	ldr	r3, [r7, #24]
 8015356:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8015358:	69bb      	ldr	r3, [r7, #24]
 801535a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801535c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015360:	d01d      	beq.n	801539e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8015362:	69bb      	ldr	r3, [r7, #24]
 8015364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015366:	331e      	adds	r3, #30
 8015368:	4a36      	ldr	r2, [pc, #216]	; (8015444 <dhcp_bind+0x1b0>)
 801536a:	fba2 2303 	umull	r2, r3, r2, r3
 801536e:	095b      	lsrs	r3, r3, #5
 8015370:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8015372:	69fb      	ldr	r3, [r7, #28]
 8015374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015378:	d302      	bcc.n	8015380 <dhcp_bind+0xec>
      timeout = 0xffff;
 801537a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801537e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	b29a      	uxth	r2, r3
 8015384:	69bb      	ldr	r3, [r7, #24]
 8015386:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8015388:	69bb      	ldr	r3, [r7, #24]
 801538a:	899b      	ldrh	r3, [r3, #12]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d102      	bne.n	8015396 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8015390:	69bb      	ldr	r3, [r7, #24]
 8015392:	2201      	movs	r2, #1
 8015394:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8015396:	69bb      	ldr	r3, [r7, #24]
 8015398:	899a      	ldrh	r2, [r3, #12]
 801539a:	69bb      	ldr	r3, [r7, #24]
 801539c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	895a      	ldrh	r2, [r3, #10]
 80153a2:	69bb      	ldr	r3, [r7, #24]
 80153a4:	899b      	ldrh	r3, [r3, #12]
 80153a6:	429a      	cmp	r2, r3
 80153a8:	d306      	bcc.n	80153b8 <dhcp_bind+0x124>
 80153aa:	69bb      	ldr	r3, [r7, #24]
 80153ac:	899b      	ldrh	r3, [r3, #12]
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d002      	beq.n	80153b8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	2200      	movs	r2, #0
 80153b6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80153b8:	69bb      	ldr	r3, [r7, #24]
 80153ba:	79db      	ldrb	r3, [r3, #7]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d003      	beq.n	80153c8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80153c0:	69bb      	ldr	r3, [r7, #24]
 80153c2:	6a1b      	ldr	r3, [r3, #32]
 80153c4:	613b      	str	r3, [r7, #16]
 80153c6:	e014      	b.n	80153f2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80153c8:	69bb      	ldr	r3, [r7, #24]
 80153ca:	331c      	adds	r3, #28
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80153d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	db02      	blt.n	80153de <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80153d8:	23ff      	movs	r3, #255	; 0xff
 80153da:	613b      	str	r3, [r7, #16]
 80153dc:	e009      	b.n	80153f2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80153de:	7dfb      	ldrb	r3, [r7, #23]
 80153e0:	2bbf      	cmp	r3, #191	; 0xbf
 80153e2:	d903      	bls.n	80153ec <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80153e4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80153e8:	613b      	str	r3, [r7, #16]
 80153ea:	e002      	b.n	80153f2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80153ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153f0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80153f2:	69bb      	ldr	r3, [r7, #24]
 80153f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d108      	bne.n	8015410 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80153fe:	69bb      	ldr	r3, [r7, #24]
 8015400:	69da      	ldr	r2, [r3, #28]
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	4013      	ands	r3, r2
 8015406:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801540e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8015410:	210a      	movs	r1, #10
 8015412:	69b8      	ldr	r0, [r7, #24]
 8015414:	f000 faa0 	bl	8015958 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8015418:	69bb      	ldr	r3, [r7, #24]
 801541a:	f103 011c 	add.w	r1, r3, #28
 801541e:	f107 030c 	add.w	r3, r7, #12
 8015422:	f107 0210 	add.w	r2, r7, #16
 8015426:	6878      	ldr	r0, [r7, #4]
 8015428:	f7f7 fb70 	bl	800cb0c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801542c:	3720      	adds	r7, #32
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}
 8015432:	bf00      	nop
 8015434:	0801c654 	.word	0x0801c654
 8015438:	0801c7b4 	.word	0x0801c7b4
 801543c:	0801c6b4 	.word	0x0801c6b4
 8015440:	0801c7d0 	.word	0x0801c7d0
 8015444:	88888889 	.word	0x88888889

08015448 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8015448:	b580      	push	{r7, lr}
 801544a:	b08a      	sub	sp, #40	; 0x28
 801544c:	af02      	add	r7, sp, #8
 801544e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015454:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8015456:	2105      	movs	r1, #5
 8015458:	69b8      	ldr	r0, [r7, #24]
 801545a:	f000 fa7d 	bl	8015958 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801545e:	f107 030c 	add.w	r3, r7, #12
 8015462:	2203      	movs	r2, #3
 8015464:	69b9      	ldr	r1, [r7, #24]
 8015466:	6878      	ldr	r0, [r7, #4]
 8015468:	f000 ff02 	bl	8016270 <dhcp_create_msg>
 801546c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d04e      	beq.n	8015512 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015474:	697b      	ldr	r3, [r7, #20]
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801547a:	89b8      	ldrh	r0, [r7, #12]
 801547c:	693b      	ldr	r3, [r7, #16]
 801547e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015482:	2302      	movs	r3, #2
 8015484:	2239      	movs	r2, #57	; 0x39
 8015486:	f000 fa81 	bl	801598c <dhcp_option>
 801548a:	4603      	mov	r3, r0
 801548c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801548e:	89b8      	ldrh	r0, [r7, #12]
 8015490:	693b      	ldr	r3, [r7, #16]
 8015492:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801549a:	461a      	mov	r2, r3
 801549c:	f000 fad0 	bl	8015a40 <dhcp_option_short>
 80154a0:	4603      	mov	r3, r0
 80154a2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80154a4:	89b8      	ldrh	r0, [r7, #12]
 80154a6:	693b      	ldr	r3, [r7, #16]
 80154a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154ac:	2303      	movs	r3, #3
 80154ae:	2237      	movs	r2, #55	; 0x37
 80154b0:	f000 fa6c 	bl	801598c <dhcp_option>
 80154b4:	4603      	mov	r3, r0
 80154b6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154b8:	2300      	movs	r3, #0
 80154ba:	77bb      	strb	r3, [r7, #30]
 80154bc:	e00e      	b.n	80154dc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80154be:	89b8      	ldrh	r0, [r7, #12]
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80154c6:	7fbb      	ldrb	r3, [r7, #30]
 80154c8:	4a2a      	ldr	r2, [pc, #168]	; (8015574 <dhcp_renew+0x12c>)
 80154ca:	5cd3      	ldrb	r3, [r2, r3]
 80154cc:	461a      	mov	r2, r3
 80154ce:	f000 fa91 	bl	80159f4 <dhcp_option_byte>
 80154d2:	4603      	mov	r3, r0
 80154d4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80154d6:	7fbb      	ldrb	r3, [r7, #30]
 80154d8:	3301      	adds	r3, #1
 80154da:	77bb      	strb	r3, [r7, #30]
 80154dc:	7fbb      	ldrb	r3, [r7, #30]
 80154de:	2b02      	cmp	r3, #2
 80154e0:	d9ed      	bls.n	80154be <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80154e2:	89b8      	ldrh	r0, [r7, #12]
 80154e4:	693b      	ldr	r3, [r7, #16]
 80154e6:	33f0      	adds	r3, #240	; 0xf0
 80154e8:	697a      	ldr	r2, [r7, #20]
 80154ea:	4619      	mov	r1, r3
 80154ec:	f000 ff96 	bl	801641c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80154f0:	4b21      	ldr	r3, [pc, #132]	; (8015578 <dhcp_renew+0x130>)
 80154f2:	6818      	ldr	r0, [r3, #0]
 80154f4:	69bb      	ldr	r3, [r7, #24]
 80154f6:	f103 0218 	add.w	r2, r3, #24
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	9300      	str	r3, [sp, #0]
 80154fe:	2343      	movs	r3, #67	; 0x43
 8015500:	6979      	ldr	r1, [r7, #20]
 8015502:	f7fe fe51 	bl	80141a8 <udp_sendto_if>
 8015506:	4603      	mov	r3, r0
 8015508:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801550a:	6978      	ldr	r0, [r7, #20]
 801550c:	f7f8 f80c 	bl	800d528 <pbuf_free>
 8015510:	e001      	b.n	8015516 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015512:	23ff      	movs	r3, #255	; 0xff
 8015514:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015516:	69bb      	ldr	r3, [r7, #24]
 8015518:	799b      	ldrb	r3, [r3, #6]
 801551a:	2bff      	cmp	r3, #255	; 0xff
 801551c:	d005      	beq.n	801552a <dhcp_renew+0xe2>
    dhcp->tries++;
 801551e:	69bb      	ldr	r3, [r7, #24]
 8015520:	799b      	ldrb	r3, [r3, #6]
 8015522:	3301      	adds	r3, #1
 8015524:	b2da      	uxtb	r2, r3
 8015526:	69bb      	ldr	r3, [r7, #24]
 8015528:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801552a:	69bb      	ldr	r3, [r7, #24]
 801552c:	799b      	ldrb	r3, [r3, #6]
 801552e:	2b09      	cmp	r3, #9
 8015530:	d80a      	bhi.n	8015548 <dhcp_renew+0x100>
 8015532:	69bb      	ldr	r3, [r7, #24]
 8015534:	799b      	ldrb	r3, [r3, #6]
 8015536:	b29b      	uxth	r3, r3
 8015538:	461a      	mov	r2, r3
 801553a:	0152      	lsls	r2, r2, #5
 801553c:	1ad2      	subs	r2, r2, r3
 801553e:	0092      	lsls	r2, r2, #2
 8015540:	4413      	add	r3, r2
 8015542:	011b      	lsls	r3, r3, #4
 8015544:	b29b      	uxth	r3, r3
 8015546:	e001      	b.n	801554c <dhcp_renew+0x104>
 8015548:	f644 6320 	movw	r3, #20000	; 0x4e20
 801554c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801554e:	89fb      	ldrh	r3, [r7, #14]
 8015550:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015554:	4a09      	ldr	r2, [pc, #36]	; (801557c <dhcp_renew+0x134>)
 8015556:	fb82 1203 	smull	r1, r2, r2, r3
 801555a:	1152      	asrs	r2, r2, #5
 801555c:	17db      	asrs	r3, r3, #31
 801555e:	1ad3      	subs	r3, r2, r3
 8015560:	b29a      	uxth	r2, r3
 8015562:	69bb      	ldr	r3, [r7, #24]
 8015564:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015566:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801556a:	4618      	mov	r0, r3
 801556c:	3720      	adds	r7, #32
 801556e:	46bd      	mov	sp, r7
 8015570:	bd80      	pop	{r7, pc}
 8015572:	bf00      	nop
 8015574:	20000048 	.word	0x20000048
 8015578:	2000cf64 	.word	0x2000cf64
 801557c:	10624dd3 	.word	0x10624dd3

08015580 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b08a      	sub	sp, #40	; 0x28
 8015584:	af02      	add	r7, sp, #8
 8015586:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801558c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801558e:	2104      	movs	r1, #4
 8015590:	69b8      	ldr	r0, [r7, #24]
 8015592:	f000 f9e1 	bl	8015958 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015596:	f107 030c 	add.w	r3, r7, #12
 801559a:	2203      	movs	r2, #3
 801559c:	69b9      	ldr	r1, [r7, #24]
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f000 fe66 	bl	8016270 <dhcp_create_msg>
 80155a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d04c      	beq.n	8015646 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	685b      	ldr	r3, [r3, #4]
 80155b0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80155b2:	89b8      	ldrh	r0, [r7, #12]
 80155b4:	693b      	ldr	r3, [r7, #16]
 80155b6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155ba:	2302      	movs	r3, #2
 80155bc:	2239      	movs	r2, #57	; 0x39
 80155be:	f000 f9e5 	bl	801598c <dhcp_option>
 80155c2:	4603      	mov	r3, r0
 80155c4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80155c6:	89b8      	ldrh	r0, [r7, #12]
 80155c8:	693b      	ldr	r3, [r7, #16]
 80155ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80155d2:	461a      	mov	r2, r3
 80155d4:	f000 fa34 	bl	8015a40 <dhcp_option_short>
 80155d8:	4603      	mov	r3, r0
 80155da:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80155dc:	89b8      	ldrh	r0, [r7, #12]
 80155de:	693b      	ldr	r3, [r7, #16]
 80155e0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155e4:	2303      	movs	r3, #3
 80155e6:	2237      	movs	r2, #55	; 0x37
 80155e8:	f000 f9d0 	bl	801598c <dhcp_option>
 80155ec:	4603      	mov	r3, r0
 80155ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80155f0:	2300      	movs	r3, #0
 80155f2:	77bb      	strb	r3, [r7, #30]
 80155f4:	e00e      	b.n	8015614 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80155f6:	89b8      	ldrh	r0, [r7, #12]
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80155fe:	7fbb      	ldrb	r3, [r7, #30]
 8015600:	4a29      	ldr	r2, [pc, #164]	; (80156a8 <dhcp_rebind+0x128>)
 8015602:	5cd3      	ldrb	r3, [r2, r3]
 8015604:	461a      	mov	r2, r3
 8015606:	f000 f9f5 	bl	80159f4 <dhcp_option_byte>
 801560a:	4603      	mov	r3, r0
 801560c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801560e:	7fbb      	ldrb	r3, [r7, #30]
 8015610:	3301      	adds	r3, #1
 8015612:	77bb      	strb	r3, [r7, #30]
 8015614:	7fbb      	ldrb	r3, [r7, #30]
 8015616:	2b02      	cmp	r3, #2
 8015618:	d9ed      	bls.n	80155f6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801561a:	89b8      	ldrh	r0, [r7, #12]
 801561c:	693b      	ldr	r3, [r7, #16]
 801561e:	33f0      	adds	r3, #240	; 0xf0
 8015620:	697a      	ldr	r2, [r7, #20]
 8015622:	4619      	mov	r1, r3
 8015624:	f000 fefa 	bl	801641c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015628:	4b20      	ldr	r3, [pc, #128]	; (80156ac <dhcp_rebind+0x12c>)
 801562a:	6818      	ldr	r0, [r3, #0]
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	9300      	str	r3, [sp, #0]
 8015630:	2343      	movs	r3, #67	; 0x43
 8015632:	4a1f      	ldr	r2, [pc, #124]	; (80156b0 <dhcp_rebind+0x130>)
 8015634:	6979      	ldr	r1, [r7, #20]
 8015636:	f7fe fdb7 	bl	80141a8 <udp_sendto_if>
 801563a:	4603      	mov	r3, r0
 801563c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801563e:	6978      	ldr	r0, [r7, #20]
 8015640:	f7f7 ff72 	bl	800d528 <pbuf_free>
 8015644:	e001      	b.n	801564a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8015646:	23ff      	movs	r3, #255	; 0xff
 8015648:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801564a:	69bb      	ldr	r3, [r7, #24]
 801564c:	799b      	ldrb	r3, [r3, #6]
 801564e:	2bff      	cmp	r3, #255	; 0xff
 8015650:	d005      	beq.n	801565e <dhcp_rebind+0xde>
    dhcp->tries++;
 8015652:	69bb      	ldr	r3, [r7, #24]
 8015654:	799b      	ldrb	r3, [r3, #6]
 8015656:	3301      	adds	r3, #1
 8015658:	b2da      	uxtb	r2, r3
 801565a:	69bb      	ldr	r3, [r7, #24]
 801565c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	799b      	ldrb	r3, [r3, #6]
 8015662:	2b09      	cmp	r3, #9
 8015664:	d80a      	bhi.n	801567c <dhcp_rebind+0xfc>
 8015666:	69bb      	ldr	r3, [r7, #24]
 8015668:	799b      	ldrb	r3, [r3, #6]
 801566a:	b29b      	uxth	r3, r3
 801566c:	461a      	mov	r2, r3
 801566e:	0152      	lsls	r2, r2, #5
 8015670:	1ad2      	subs	r2, r2, r3
 8015672:	0092      	lsls	r2, r2, #2
 8015674:	4413      	add	r3, r2
 8015676:	00db      	lsls	r3, r3, #3
 8015678:	b29b      	uxth	r3, r3
 801567a:	e001      	b.n	8015680 <dhcp_rebind+0x100>
 801567c:	f242 7310 	movw	r3, #10000	; 0x2710
 8015680:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015682:	89fb      	ldrh	r3, [r7, #14]
 8015684:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8015688:	4a0a      	ldr	r2, [pc, #40]	; (80156b4 <dhcp_rebind+0x134>)
 801568a:	fb82 1203 	smull	r1, r2, r2, r3
 801568e:	1152      	asrs	r2, r2, #5
 8015690:	17db      	asrs	r3, r3, #31
 8015692:	1ad3      	subs	r3, r2, r3
 8015694:	b29a      	uxth	r2, r3
 8015696:	69bb      	ldr	r3, [r7, #24]
 8015698:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801569a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3720      	adds	r7, #32
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}
 80156a6:	bf00      	nop
 80156a8:	20000048 	.word	0x20000048
 80156ac:	2000cf64 	.word	0x2000cf64
 80156b0:	0801f5c8 	.word	0x0801f5c8
 80156b4:	10624dd3 	.word	0x10624dd3

080156b8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80156b8:	b5b0      	push	{r4, r5, r7, lr}
 80156ba:	b08a      	sub	sp, #40	; 0x28
 80156bc:	af02      	add	r7, sp, #8
 80156be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156c4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80156c6:	2103      	movs	r1, #3
 80156c8:	69b8      	ldr	r0, [r7, #24]
 80156ca:	f000 f945 	bl	8015958 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80156ce:	f107 030c 	add.w	r3, r7, #12
 80156d2:	2203      	movs	r2, #3
 80156d4:	69b9      	ldr	r1, [r7, #24]
 80156d6:	6878      	ldr	r0, [r7, #4]
 80156d8:	f000 fdca 	bl	8016270 <dhcp_create_msg>
 80156dc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80156de:	697b      	ldr	r3, [r7, #20]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d066      	beq.n	80157b2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80156e4:	697b      	ldr	r3, [r7, #20]
 80156e6:	685b      	ldr	r3, [r3, #4]
 80156e8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80156ea:	89b8      	ldrh	r0, [r7, #12]
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80156f2:	2302      	movs	r3, #2
 80156f4:	2239      	movs	r2, #57	; 0x39
 80156f6:	f000 f949 	bl	801598c <dhcp_option>
 80156fa:	4603      	mov	r3, r0
 80156fc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80156fe:	89b8      	ldrh	r0, [r7, #12]
 8015700:	693b      	ldr	r3, [r7, #16]
 8015702:	33f0      	adds	r3, #240	; 0xf0
 8015704:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015708:	4619      	mov	r1, r3
 801570a:	f000 f999 	bl	8015a40 <dhcp_option_short>
 801570e:	4603      	mov	r3, r0
 8015710:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015712:	89b8      	ldrh	r0, [r7, #12]
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801571a:	2304      	movs	r3, #4
 801571c:	2232      	movs	r2, #50	; 0x32
 801571e:	f000 f935 	bl	801598c <dhcp_option>
 8015722:	4603      	mov	r3, r0
 8015724:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015726:	89bc      	ldrh	r4, [r7, #12]
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801572e:	69bb      	ldr	r3, [r7, #24]
 8015730:	69db      	ldr	r3, [r3, #28]
 8015732:	4618      	mov	r0, r3
 8015734:	f7f6 fad9 	bl	800bcea <lwip_htonl>
 8015738:	4603      	mov	r3, r0
 801573a:	461a      	mov	r2, r3
 801573c:	4629      	mov	r1, r5
 801573e:	4620      	mov	r0, r4
 8015740:	f000 f9b0 	bl	8015aa4 <dhcp_option_long>
 8015744:	4603      	mov	r3, r0
 8015746:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015748:	89b8      	ldrh	r0, [r7, #12]
 801574a:	693b      	ldr	r3, [r7, #16]
 801574c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8015750:	2303      	movs	r3, #3
 8015752:	2237      	movs	r2, #55	; 0x37
 8015754:	f000 f91a 	bl	801598c <dhcp_option>
 8015758:	4603      	mov	r3, r0
 801575a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801575c:	2300      	movs	r3, #0
 801575e:	77bb      	strb	r3, [r7, #30]
 8015760:	e00e      	b.n	8015780 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015762:	89b8      	ldrh	r0, [r7, #12]
 8015764:	693b      	ldr	r3, [r7, #16]
 8015766:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801576a:	7fbb      	ldrb	r3, [r7, #30]
 801576c:	4a29      	ldr	r2, [pc, #164]	; (8015814 <dhcp_reboot+0x15c>)
 801576e:	5cd3      	ldrb	r3, [r2, r3]
 8015770:	461a      	mov	r2, r3
 8015772:	f000 f93f 	bl	80159f4 <dhcp_option_byte>
 8015776:	4603      	mov	r3, r0
 8015778:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801577a:	7fbb      	ldrb	r3, [r7, #30]
 801577c:	3301      	adds	r3, #1
 801577e:	77bb      	strb	r3, [r7, #30]
 8015780:	7fbb      	ldrb	r3, [r7, #30]
 8015782:	2b02      	cmp	r3, #2
 8015784:	d9ed      	bls.n	8015762 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015786:	89b8      	ldrh	r0, [r7, #12]
 8015788:	693b      	ldr	r3, [r7, #16]
 801578a:	33f0      	adds	r3, #240	; 0xf0
 801578c:	697a      	ldr	r2, [r7, #20]
 801578e:	4619      	mov	r1, r3
 8015790:	f000 fe44 	bl	801641c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015794:	4b20      	ldr	r3, [pc, #128]	; (8015818 <dhcp_reboot+0x160>)
 8015796:	6818      	ldr	r0, [r3, #0]
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	9300      	str	r3, [sp, #0]
 801579c:	2343      	movs	r3, #67	; 0x43
 801579e:	4a1f      	ldr	r2, [pc, #124]	; (801581c <dhcp_reboot+0x164>)
 80157a0:	6979      	ldr	r1, [r7, #20]
 80157a2:	f7fe fd01 	bl	80141a8 <udp_sendto_if>
 80157a6:	4603      	mov	r3, r0
 80157a8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80157aa:	6978      	ldr	r0, [r7, #20]
 80157ac:	f7f7 febc 	bl	800d528 <pbuf_free>
 80157b0:	e001      	b.n	80157b6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80157b2:	23ff      	movs	r3, #255	; 0xff
 80157b4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80157b6:	69bb      	ldr	r3, [r7, #24]
 80157b8:	799b      	ldrb	r3, [r3, #6]
 80157ba:	2bff      	cmp	r3, #255	; 0xff
 80157bc:	d005      	beq.n	80157ca <dhcp_reboot+0x112>
    dhcp->tries++;
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	799b      	ldrb	r3, [r3, #6]
 80157c2:	3301      	adds	r3, #1
 80157c4:	b2da      	uxtb	r2, r3
 80157c6:	69bb      	ldr	r3, [r7, #24]
 80157c8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	799b      	ldrb	r3, [r3, #6]
 80157ce:	2b09      	cmp	r3, #9
 80157d0:	d80a      	bhi.n	80157e8 <dhcp_reboot+0x130>
 80157d2:	69bb      	ldr	r3, [r7, #24]
 80157d4:	799b      	ldrb	r3, [r3, #6]
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	461a      	mov	r2, r3
 80157da:	0152      	lsls	r2, r2, #5
 80157dc:	1ad2      	subs	r2, r2, r3
 80157de:	0092      	lsls	r2, r2, #2
 80157e0:	4413      	add	r3, r2
 80157e2:	00db      	lsls	r3, r3, #3
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	e001      	b.n	80157ec <dhcp_reboot+0x134>
 80157e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80157ec:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80157ee:	89fb      	ldrh	r3, [r7, #14]
 80157f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80157f4:	4a0a      	ldr	r2, [pc, #40]	; (8015820 <dhcp_reboot+0x168>)
 80157f6:	fb82 1203 	smull	r1, r2, r2, r3
 80157fa:	1152      	asrs	r2, r2, #5
 80157fc:	17db      	asrs	r3, r3, #31
 80157fe:	1ad3      	subs	r3, r2, r3
 8015800:	b29a      	uxth	r2, r3
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8015806:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801580a:	4618      	mov	r0, r3
 801580c:	3720      	adds	r7, #32
 801580e:	46bd      	mov	sp, r7
 8015810:	bdb0      	pop	{r4, r5, r7, pc}
 8015812:	bf00      	nop
 8015814:	20000048 	.word	0x20000048
 8015818:	2000cf64 	.word	0x2000cf64
 801581c:	0801f5c8 	.word	0x0801f5c8
 8015820:	10624dd3 	.word	0x10624dd3

08015824 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8015824:	b5b0      	push	{r4, r5, r7, lr}
 8015826:	b08a      	sub	sp, #40	; 0x28
 8015828:	af02      	add	r7, sp, #8
 801582a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015830:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	2b00      	cmp	r3, #0
 8015836:	f000 8084 	beq.w	8015942 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801583a:	69fb      	ldr	r3, [r7, #28]
 801583c:	795b      	ldrb	r3, [r3, #5]
 801583e:	2b00      	cmp	r3, #0
 8015840:	f000 8081 	beq.w	8015946 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	699b      	ldr	r3, [r3, #24]
 8015848:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801584a:	69fb      	ldr	r3, [r7, #28]
 801584c:	2200      	movs	r2, #0
 801584e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8015850:	69fb      	ldr	r3, [r7, #28]
 8015852:	2200      	movs	r2, #0
 8015854:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8015856:	69fb      	ldr	r3, [r7, #28]
 8015858:	2200      	movs	r2, #0
 801585a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801585c:	69fb      	ldr	r3, [r7, #28]
 801585e:	2200      	movs	r2, #0
 8015860:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	2200      	movs	r2, #0
 8015866:	631a      	str	r2, [r3, #48]	; 0x30
 8015868:	69fb      	ldr	r3, [r7, #28]
 801586a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801586c:	69fb      	ldr	r3, [r7, #28]
 801586e:	62da      	str	r2, [r3, #44]	; 0x2c
 8015870:	69fb      	ldr	r3, [r7, #28]
 8015872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8015878:	69fb      	ldr	r3, [r7, #28]
 801587a:	2200      	movs	r2, #0
 801587c:	829a      	strh	r2, [r3, #20]
 801587e:	69fb      	ldr	r3, [r7, #28]
 8015880:	8a9a      	ldrh	r2, [r3, #20]
 8015882:	69fb      	ldr	r3, [r7, #28]
 8015884:	825a      	strh	r2, [r3, #18]
 8015886:	69fb      	ldr	r3, [r7, #28]
 8015888:	8a5a      	ldrh	r2, [r3, #18]
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	821a      	strh	r2, [r3, #16]
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	8a1a      	ldrh	r2, [r3, #16]
 8015892:	69fb      	ldr	r3, [r7, #28]
 8015894:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8015896:	6878      	ldr	r0, [r7, #4]
 8015898:	f000 fdee 	bl	8016478 <dhcp_supplied_address>
 801589c:	4603      	mov	r3, r0
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d03b      	beq.n	801591a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80158a2:	f107 030e 	add.w	r3, r7, #14
 80158a6:	2207      	movs	r2, #7
 80158a8:	69f9      	ldr	r1, [r7, #28]
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 fce0 	bl	8016270 <dhcp_create_msg>
 80158b0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80158b2:	69bb      	ldr	r3, [r7, #24]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d030      	beq.n	801591a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	685b      	ldr	r3, [r3, #4]
 80158bc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80158be:	89f8      	ldrh	r0, [r7, #14]
 80158c0:	697b      	ldr	r3, [r7, #20]
 80158c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80158c6:	2304      	movs	r3, #4
 80158c8:	2236      	movs	r2, #54	; 0x36
 80158ca:	f000 f85f 	bl	801598c <dhcp_option>
 80158ce:	4603      	mov	r3, r0
 80158d0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80158d2:	89fc      	ldrh	r4, [r7, #14]
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	4618      	mov	r0, r3
 80158de:	f7f6 fa04 	bl	800bcea <lwip_htonl>
 80158e2:	4603      	mov	r3, r0
 80158e4:	461a      	mov	r2, r3
 80158e6:	4629      	mov	r1, r5
 80158e8:	4620      	mov	r0, r4
 80158ea:	f000 f8db 	bl	8015aa4 <dhcp_option_long>
 80158ee:	4603      	mov	r3, r0
 80158f0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80158f2:	89f8      	ldrh	r0, [r7, #14]
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	33f0      	adds	r3, #240	; 0xf0
 80158f8:	69ba      	ldr	r2, [r7, #24]
 80158fa:	4619      	mov	r1, r3
 80158fc:	f000 fd8e 	bl	801641c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8015900:	4b13      	ldr	r3, [pc, #76]	; (8015950 <dhcp_release_and_stop+0x12c>)
 8015902:	6818      	ldr	r0, [r3, #0]
 8015904:	f107 0210 	add.w	r2, r7, #16
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	9300      	str	r3, [sp, #0]
 801590c:	2343      	movs	r3, #67	; 0x43
 801590e:	69b9      	ldr	r1, [r7, #24]
 8015910:	f7fe fc4a 	bl	80141a8 <udp_sendto_if>
      pbuf_free(p_out);
 8015914:	69b8      	ldr	r0, [r7, #24]
 8015916:	f7f7 fe07 	bl	800d528 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801591a:	4b0e      	ldr	r3, [pc, #56]	; (8015954 <dhcp_release_and_stop+0x130>)
 801591c:	4a0d      	ldr	r2, [pc, #52]	; (8015954 <dhcp_release_and_stop+0x130>)
 801591e:	490d      	ldr	r1, [pc, #52]	; (8015954 <dhcp_release_and_stop+0x130>)
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f7f7 f8f3 	bl	800cb0c <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8015926:	2100      	movs	r1, #0
 8015928:	69f8      	ldr	r0, [r7, #28]
 801592a:	f000 f815 	bl	8015958 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801592e:	69fb      	ldr	r3, [r7, #28]
 8015930:	791b      	ldrb	r3, [r3, #4]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d008      	beq.n	8015948 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8015936:	f7fe ff83 	bl	8014840 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	2200      	movs	r2, #0
 801593e:	711a      	strb	r2, [r3, #4]
 8015940:	e002      	b.n	8015948 <dhcp_release_and_stop+0x124>
    return;
 8015942:	bf00      	nop
 8015944:	e000      	b.n	8015948 <dhcp_release_and_stop+0x124>
    return;
 8015946:	bf00      	nop
  }
}
 8015948:	3720      	adds	r7, #32
 801594a:	46bd      	mov	sp, r7
 801594c:	bdb0      	pop	{r4, r5, r7, pc}
 801594e:	bf00      	nop
 8015950:	2000cf64 	.word	0x2000cf64
 8015954:	0801f5c4 	.word	0x0801f5c4

08015958 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8015958:	b480      	push	{r7}
 801595a:	b083      	sub	sp, #12
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	460b      	mov	r3, r1
 8015962:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	795b      	ldrb	r3, [r3, #5]
 8015968:	78fa      	ldrb	r2, [r7, #3]
 801596a:	429a      	cmp	r2, r3
 801596c:	d008      	beq.n	8015980 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	78fa      	ldrb	r2, [r7, #3]
 8015972:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	2200      	movs	r2, #0
 8015978:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	2200      	movs	r2, #0
 801597e:	811a      	strh	r2, [r3, #8]
  }
}
 8015980:	bf00      	nop
 8015982:	370c      	adds	r7, #12
 8015984:	46bd      	mov	sp, r7
 8015986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598a:	4770      	bx	lr

0801598c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801598c:	b580      	push	{r7, lr}
 801598e:	b082      	sub	sp, #8
 8015990:	af00      	add	r7, sp, #0
 8015992:	6039      	str	r1, [r7, #0]
 8015994:	4611      	mov	r1, r2
 8015996:	461a      	mov	r2, r3
 8015998:	4603      	mov	r3, r0
 801599a:	80fb      	strh	r3, [r7, #6]
 801599c:	460b      	mov	r3, r1
 801599e:	717b      	strb	r3, [r7, #5]
 80159a0:	4613      	mov	r3, r2
 80159a2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80159a4:	88fa      	ldrh	r2, [r7, #6]
 80159a6:	793b      	ldrb	r3, [r7, #4]
 80159a8:	4413      	add	r3, r2
 80159aa:	3302      	adds	r3, #2
 80159ac:	2b44      	cmp	r3, #68	; 0x44
 80159ae:	d906      	bls.n	80159be <dhcp_option+0x32>
 80159b0:	4b0d      	ldr	r3, [pc, #52]	; (80159e8 <dhcp_option+0x5c>)
 80159b2:	f240 529a 	movw	r2, #1434	; 0x59a
 80159b6:	490d      	ldr	r1, [pc, #52]	; (80159ec <dhcp_option+0x60>)
 80159b8:	480d      	ldr	r0, [pc, #52]	; (80159f0 <dhcp_option+0x64>)
 80159ba:	f003 faff 	bl	8018fbc <iprintf>
  options[options_out_len++] = option_type;
 80159be:	88fb      	ldrh	r3, [r7, #6]
 80159c0:	1c5a      	adds	r2, r3, #1
 80159c2:	80fa      	strh	r2, [r7, #6]
 80159c4:	461a      	mov	r2, r3
 80159c6:	683b      	ldr	r3, [r7, #0]
 80159c8:	4413      	add	r3, r2
 80159ca:	797a      	ldrb	r2, [r7, #5]
 80159cc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80159ce:	88fb      	ldrh	r3, [r7, #6]
 80159d0:	1c5a      	adds	r2, r3, #1
 80159d2:	80fa      	strh	r2, [r7, #6]
 80159d4:	461a      	mov	r2, r3
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	4413      	add	r3, r2
 80159da:	793a      	ldrb	r2, [r7, #4]
 80159dc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80159de:	88fb      	ldrh	r3, [r7, #6]
}
 80159e0:	4618      	mov	r0, r3
 80159e2:	3708      	adds	r7, #8
 80159e4:	46bd      	mov	sp, r7
 80159e6:	bd80      	pop	{r7, pc}
 80159e8:	0801c654 	.word	0x0801c654
 80159ec:	0801c7e8 	.word	0x0801c7e8
 80159f0:	0801c6b4 	.word	0x0801c6b4

080159f4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	4603      	mov	r3, r0
 80159fc:	6039      	str	r1, [r7, #0]
 80159fe:	80fb      	strh	r3, [r7, #6]
 8015a00:	4613      	mov	r3, r2
 8015a02:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8015a04:	88fb      	ldrh	r3, [r7, #6]
 8015a06:	2b43      	cmp	r3, #67	; 0x43
 8015a08:	d906      	bls.n	8015a18 <dhcp_option_byte+0x24>
 8015a0a:	4b0a      	ldr	r3, [pc, #40]	; (8015a34 <dhcp_option_byte+0x40>)
 8015a0c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8015a10:	4909      	ldr	r1, [pc, #36]	; (8015a38 <dhcp_option_byte+0x44>)
 8015a12:	480a      	ldr	r0, [pc, #40]	; (8015a3c <dhcp_option_byte+0x48>)
 8015a14:	f003 fad2 	bl	8018fbc <iprintf>
  options[options_out_len++] = value;
 8015a18:	88fb      	ldrh	r3, [r7, #6]
 8015a1a:	1c5a      	adds	r2, r3, #1
 8015a1c:	80fa      	strh	r2, [r7, #6]
 8015a1e:	461a      	mov	r2, r3
 8015a20:	683b      	ldr	r3, [r7, #0]
 8015a22:	4413      	add	r3, r2
 8015a24:	797a      	ldrb	r2, [r7, #5]
 8015a26:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015a28:	88fb      	ldrh	r3, [r7, #6]
}
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	3708      	adds	r7, #8
 8015a2e:	46bd      	mov	sp, r7
 8015a30:	bd80      	pop	{r7, pc}
 8015a32:	bf00      	nop
 8015a34:	0801c654 	.word	0x0801c654
 8015a38:	0801c82c 	.word	0x0801c82c
 8015a3c:	0801c6b4 	.word	0x0801c6b4

08015a40 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b082      	sub	sp, #8
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	4603      	mov	r3, r0
 8015a48:	6039      	str	r1, [r7, #0]
 8015a4a:	80fb      	strh	r3, [r7, #6]
 8015a4c:	4613      	mov	r3, r2
 8015a4e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8015a50:	88fb      	ldrh	r3, [r7, #6]
 8015a52:	3302      	adds	r3, #2
 8015a54:	2b44      	cmp	r3, #68	; 0x44
 8015a56:	d906      	bls.n	8015a66 <dhcp_option_short+0x26>
 8015a58:	4b0f      	ldr	r3, [pc, #60]	; (8015a98 <dhcp_option_short+0x58>)
 8015a5a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8015a5e:	490f      	ldr	r1, [pc, #60]	; (8015a9c <dhcp_option_short+0x5c>)
 8015a60:	480f      	ldr	r0, [pc, #60]	; (8015aa0 <dhcp_option_short+0x60>)
 8015a62:	f003 faab 	bl	8018fbc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8015a66:	88bb      	ldrh	r3, [r7, #4]
 8015a68:	0a1b      	lsrs	r3, r3, #8
 8015a6a:	b29a      	uxth	r2, r3
 8015a6c:	88fb      	ldrh	r3, [r7, #6]
 8015a6e:	1c59      	adds	r1, r3, #1
 8015a70:	80f9      	strh	r1, [r7, #6]
 8015a72:	4619      	mov	r1, r3
 8015a74:	683b      	ldr	r3, [r7, #0]
 8015a76:	440b      	add	r3, r1
 8015a78:	b2d2      	uxtb	r2, r2
 8015a7a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8015a7c:	88fb      	ldrh	r3, [r7, #6]
 8015a7e:	1c5a      	adds	r2, r3, #1
 8015a80:	80fa      	strh	r2, [r7, #6]
 8015a82:	461a      	mov	r2, r3
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	4413      	add	r3, r2
 8015a88:	88ba      	ldrh	r2, [r7, #4]
 8015a8a:	b2d2      	uxtb	r2, r2
 8015a8c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015a8e:	88fb      	ldrh	r3, [r7, #6]
}
 8015a90:	4618      	mov	r0, r3
 8015a92:	3708      	adds	r7, #8
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bd80      	pop	{r7, pc}
 8015a98:	0801c654 	.word	0x0801c654
 8015a9c:	0801c864 	.word	0x0801c864
 8015aa0:	0801c6b4 	.word	0x0801c6b4

08015aa4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b084      	sub	sp, #16
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	4603      	mov	r3, r0
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
 8015ab0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8015ab2:	89fb      	ldrh	r3, [r7, #14]
 8015ab4:	3304      	adds	r3, #4
 8015ab6:	2b44      	cmp	r3, #68	; 0x44
 8015ab8:	d906      	bls.n	8015ac8 <dhcp_option_long+0x24>
 8015aba:	4b19      	ldr	r3, [pc, #100]	; (8015b20 <dhcp_option_long+0x7c>)
 8015abc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8015ac0:	4918      	ldr	r1, [pc, #96]	; (8015b24 <dhcp_option_long+0x80>)
 8015ac2:	4819      	ldr	r0, [pc, #100]	; (8015b28 <dhcp_option_long+0x84>)
 8015ac4:	f003 fa7a 	bl	8018fbc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	0e1a      	lsrs	r2, r3, #24
 8015acc:	89fb      	ldrh	r3, [r7, #14]
 8015ace:	1c59      	adds	r1, r3, #1
 8015ad0:	81f9      	strh	r1, [r7, #14]
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	440b      	add	r3, r1
 8015ad8:	b2d2      	uxtb	r2, r2
 8015ada:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	0c1a      	lsrs	r2, r3, #16
 8015ae0:	89fb      	ldrh	r3, [r7, #14]
 8015ae2:	1c59      	adds	r1, r3, #1
 8015ae4:	81f9      	strh	r1, [r7, #14]
 8015ae6:	4619      	mov	r1, r3
 8015ae8:	68bb      	ldr	r3, [r7, #8]
 8015aea:	440b      	add	r3, r1
 8015aec:	b2d2      	uxtb	r2, r2
 8015aee:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	0a1a      	lsrs	r2, r3, #8
 8015af4:	89fb      	ldrh	r3, [r7, #14]
 8015af6:	1c59      	adds	r1, r3, #1
 8015af8:	81f9      	strh	r1, [r7, #14]
 8015afa:	4619      	mov	r1, r3
 8015afc:	68bb      	ldr	r3, [r7, #8]
 8015afe:	440b      	add	r3, r1
 8015b00:	b2d2      	uxtb	r2, r2
 8015b02:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8015b04:	89fb      	ldrh	r3, [r7, #14]
 8015b06:	1c5a      	adds	r2, r3, #1
 8015b08:	81fa      	strh	r2, [r7, #14]
 8015b0a:	461a      	mov	r2, r3
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	4413      	add	r3, r2
 8015b10:	687a      	ldr	r2, [r7, #4]
 8015b12:	b2d2      	uxtb	r2, r2
 8015b14:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8015b16:	89fb      	ldrh	r3, [r7, #14]
}
 8015b18:	4618      	mov	r0, r3
 8015b1a:	3710      	adds	r7, #16
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	0801c654 	.word	0x0801c654
 8015b24:	0801c8a0 	.word	0x0801c8a0
 8015b28:	0801c6b4 	.word	0x0801c6b4

08015b2c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b090      	sub	sp, #64	; 0x40
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
 8015b34:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8015b36:	2300      	movs	r3, #0
 8015b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8015b3e:	2208      	movs	r2, #8
 8015b40:	2100      	movs	r1, #0
 8015b42:	48b5      	ldr	r0, [pc, #724]	; (8015e18 <dhcp_parse_reply+0x2ec>)
 8015b44:	f003 fa9f 	bl	8019086 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	895b      	ldrh	r3, [r3, #10]
 8015b4c:	2b2b      	cmp	r3, #43	; 0x2b
 8015b4e:	d802      	bhi.n	8015b56 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8015b50:	f06f 0301 	mvn.w	r3, #1
 8015b54:	e2a7      	b.n	80160a6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	685b      	ldr	r3, [r3, #4]
 8015b5a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8015b5c:	23f0      	movs	r3, #240	; 0xf0
 8015b5e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	891b      	ldrh	r3, [r3, #8]
 8015b64:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015b6a:	e00c      	b.n	8015b86 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8015b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6e:	895b      	ldrh	r3, [r3, #10]
 8015b70:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8015b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b78:	895b      	ldrh	r3, [r3, #10]
 8015b7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8015b7c:	1ad3      	subs	r3, r2, r3
 8015b7e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8015b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8015b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d004      	beq.n	8015b96 <dhcp_parse_reply+0x6a>
 8015b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8e:	895b      	ldrh	r3, [r3, #10]
 8015b90:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8015b92:	429a      	cmp	r2, r3
 8015b94:	d2ea      	bcs.n	8015b6c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8015b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	d102      	bne.n	8015ba2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8015b9c:	f06f 0301 	mvn.w	r3, #1
 8015ba0:	e281      	b.n	80160a6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8015ba2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015ba4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8015ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015ba8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8015baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bac:	685b      	ldr	r3, [r3, #4]
 8015bae:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8015bb0:	e239      	b.n	8016026 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8015bb2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015bb6:	4413      	add	r3, r2
 8015bb8:	781b      	ldrb	r3, [r3, #0]
 8015bba:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8015bbc:	2300      	movs	r3, #0
 8015bbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8015bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8015bc6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8015bc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bca:	3302      	adds	r3, #2
 8015bcc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8015bce:	8bfa      	ldrh	r2, [r7, #30]
 8015bd0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bd2:	429a      	cmp	r2, r3
 8015bd4:	d202      	bcs.n	8015bdc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8015bd6:	f06f 0301 	mvn.w	r3, #1
 8015bda:	e264      	b.n	80160a6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8015bdc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bde:	3301      	adds	r3, #1
 8015be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015be2:	8952      	ldrh	r2, [r2, #10]
 8015be4:	4293      	cmp	r3, r2
 8015be6:	da07      	bge.n	8015bf8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8015be8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bea:	3301      	adds	r3, #1
 8015bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015bee:	4413      	add	r3, r2
 8015bf0:	781b      	ldrb	r3, [r3, #0]
 8015bf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015bf6:	e00b      	b.n	8015c10 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8015bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d004      	beq.n	8015c0a <dhcp_parse_reply+0xde>
 8015c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	685b      	ldr	r3, [r3, #4]
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	e000      	b.n	8015c0c <dhcp_parse_reply+0xe0>
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8015c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015c14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8015c18:	7dfb      	ldrb	r3, [r7, #23]
 8015c1a:	2b3b      	cmp	r3, #59	; 0x3b
 8015c1c:	f200 812c 	bhi.w	8015e78 <dhcp_parse_reply+0x34c>
 8015c20:	a201      	add	r2, pc, #4	; (adr r2, 8015c28 <dhcp_parse_reply+0xfc>)
 8015c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c26:	bf00      	nop
 8015c28:	08015d19 	.word	0x08015d19
 8015c2c:	08015d29 	.word	0x08015d29
 8015c30:	08015e79 	.word	0x08015e79
 8015c34:	08015d4b 	.word	0x08015d4b
 8015c38:	08015e79 	.word	0x08015e79
 8015c3c:	08015e79 	.word	0x08015e79
 8015c40:	08015e79 	.word	0x08015e79
 8015c44:	08015e79 	.word	0x08015e79
 8015c48:	08015e79 	.word	0x08015e79
 8015c4c:	08015e79 	.word	0x08015e79
 8015c50:	08015e79 	.word	0x08015e79
 8015c54:	08015e79 	.word	0x08015e79
 8015c58:	08015e79 	.word	0x08015e79
 8015c5c:	08015e79 	.word	0x08015e79
 8015c60:	08015e79 	.word	0x08015e79
 8015c64:	08015e79 	.word	0x08015e79
 8015c68:	08015e79 	.word	0x08015e79
 8015c6c:	08015e79 	.word	0x08015e79
 8015c70:	08015e79 	.word	0x08015e79
 8015c74:	08015e79 	.word	0x08015e79
 8015c78:	08015e79 	.word	0x08015e79
 8015c7c:	08015e79 	.word	0x08015e79
 8015c80:	08015e79 	.word	0x08015e79
 8015c84:	08015e79 	.word	0x08015e79
 8015c88:	08015e79 	.word	0x08015e79
 8015c8c:	08015e79 	.word	0x08015e79
 8015c90:	08015e79 	.word	0x08015e79
 8015c94:	08015e79 	.word	0x08015e79
 8015c98:	08015e79 	.word	0x08015e79
 8015c9c:	08015e79 	.word	0x08015e79
 8015ca0:	08015e79 	.word	0x08015e79
 8015ca4:	08015e79 	.word	0x08015e79
 8015ca8:	08015e79 	.word	0x08015e79
 8015cac:	08015e79 	.word	0x08015e79
 8015cb0:	08015e79 	.word	0x08015e79
 8015cb4:	08015e79 	.word	0x08015e79
 8015cb8:	08015e79 	.word	0x08015e79
 8015cbc:	08015e79 	.word	0x08015e79
 8015cc0:	08015e79 	.word	0x08015e79
 8015cc4:	08015e79 	.word	0x08015e79
 8015cc8:	08015e79 	.word	0x08015e79
 8015ccc:	08015e79 	.word	0x08015e79
 8015cd0:	08015e79 	.word	0x08015e79
 8015cd4:	08015e79 	.word	0x08015e79
 8015cd8:	08015e79 	.word	0x08015e79
 8015cdc:	08015e79 	.word	0x08015e79
 8015ce0:	08015e79 	.word	0x08015e79
 8015ce4:	08015e79 	.word	0x08015e79
 8015ce8:	08015e79 	.word	0x08015e79
 8015cec:	08015e79 	.word	0x08015e79
 8015cf0:	08015e79 	.word	0x08015e79
 8015cf4:	08015d77 	.word	0x08015d77
 8015cf8:	08015d99 	.word	0x08015d99
 8015cfc:	08015dd5 	.word	0x08015dd5
 8015d00:	08015df7 	.word	0x08015df7
 8015d04:	08015e79 	.word	0x08015e79
 8015d08:	08015e79 	.word	0x08015e79
 8015d0c:	08015e79 	.word	0x08015e79
 8015d10:	08015e35 	.word	0x08015e35
 8015d14:	08015e57 	.word	0x08015e57
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8015d26:	e0ab      	b.n	8015e80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d2c:	2b04      	cmp	r3, #4
 8015d2e:	d009      	beq.n	8015d44 <dhcp_parse_reply+0x218>
 8015d30:	4b3a      	ldr	r3, [pc, #232]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015d32:	f240 622e 	movw	r2, #1582	; 0x62e
 8015d36:	493a      	ldr	r1, [pc, #232]	; (8015e20 <dhcp_parse_reply+0x2f4>)
 8015d38:	483a      	ldr	r0, [pc, #232]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015d3a:	f003 f93f 	bl	8018fbc <iprintf>
 8015d3e:	f06f 0305 	mvn.w	r3, #5
 8015d42:	e1b0      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8015d44:	2306      	movs	r3, #6
 8015d46:	623b      	str	r3, [r7, #32]
        break;
 8015d48:	e09a      	b.n	8015e80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8015d4a:	2304      	movs	r3, #4
 8015d4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8015d50:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8015d54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d209      	bcs.n	8015d70 <dhcp_parse_reply+0x244>
 8015d5c:	4b2f      	ldr	r3, [pc, #188]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015d5e:	f240 6233 	movw	r2, #1587	; 0x633
 8015d62:	4931      	ldr	r1, [pc, #196]	; (8015e28 <dhcp_parse_reply+0x2fc>)
 8015d64:	482f      	ldr	r0, [pc, #188]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015d66:	f003 f929 	bl	8018fbc <iprintf>
 8015d6a:	f06f 0305 	mvn.w	r3, #5
 8015d6e:	e19a      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8015d70:	2307      	movs	r3, #7
 8015d72:	623b      	str	r3, [r7, #32]
        break;
 8015d74:	e084      	b.n	8015e80 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015d76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d7a:	2b04      	cmp	r3, #4
 8015d7c:	d009      	beq.n	8015d92 <dhcp_parse_reply+0x266>
 8015d7e:	4b27      	ldr	r3, [pc, #156]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015d80:	f240 6241 	movw	r2, #1601	; 0x641
 8015d84:	4926      	ldr	r1, [pc, #152]	; (8015e20 <dhcp_parse_reply+0x2f4>)
 8015d86:	4827      	ldr	r0, [pc, #156]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015d88:	f003 f918 	bl	8018fbc <iprintf>
 8015d8c:	f06f 0305 	mvn.w	r3, #5
 8015d90:	e189      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8015d92:	2303      	movs	r3, #3
 8015d94:	623b      	str	r3, [r7, #32]
        break;
 8015d96:	e073      	b.n	8015e80 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d009      	beq.n	8015db4 <dhcp_parse_reply+0x288>
 8015da0:	4b1e      	ldr	r3, [pc, #120]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015da2:	f240 624f 	movw	r2, #1615	; 0x64f
 8015da6:	4921      	ldr	r1, [pc, #132]	; (8015e2c <dhcp_parse_reply+0x300>)
 8015da8:	481e      	ldr	r0, [pc, #120]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015daa:	f003 f907 	bl	8018fbc <iprintf>
 8015dae:	f06f 0305 	mvn.w	r3, #5
 8015db2:	e178      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8015db4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015db6:	2bf0      	cmp	r3, #240	; 0xf0
 8015db8:	d009      	beq.n	8015dce <dhcp_parse_reply+0x2a2>
 8015dba:	4b18      	ldr	r3, [pc, #96]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015dbc:	f240 6251 	movw	r2, #1617	; 0x651
 8015dc0:	491b      	ldr	r1, [pc, #108]	; (8015e30 <dhcp_parse_reply+0x304>)
 8015dc2:	4818      	ldr	r0, [pc, #96]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015dc4:	f003 f8fa 	bl	8018fbc <iprintf>
 8015dc8:	f06f 0305 	mvn.w	r3, #5
 8015dcc:	e16b      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	623b      	str	r3, [r7, #32]
        break;
 8015dd2:	e055      	b.n	8015e80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8015dd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dd8:	2b01      	cmp	r3, #1
 8015dda:	d009      	beq.n	8015df0 <dhcp_parse_reply+0x2c4>
 8015ddc:	4b0f      	ldr	r3, [pc, #60]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015dde:	f240 6255 	movw	r2, #1621	; 0x655
 8015de2:	4912      	ldr	r1, [pc, #72]	; (8015e2c <dhcp_parse_reply+0x300>)
 8015de4:	480f      	ldr	r0, [pc, #60]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015de6:	f003 f8e9 	bl	8018fbc <iprintf>
 8015dea:	f06f 0305 	mvn.w	r3, #5
 8015dee:	e15a      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8015df0:	2301      	movs	r3, #1
 8015df2:	623b      	str	r3, [r7, #32]
        break;
 8015df4:	e044      	b.n	8015e80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015df6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015dfa:	2b04      	cmp	r3, #4
 8015dfc:	d009      	beq.n	8015e12 <dhcp_parse_reply+0x2e6>
 8015dfe:	4b07      	ldr	r3, [pc, #28]	; (8015e1c <dhcp_parse_reply+0x2f0>)
 8015e00:	f240 6259 	movw	r2, #1625	; 0x659
 8015e04:	4906      	ldr	r1, [pc, #24]	; (8015e20 <dhcp_parse_reply+0x2f4>)
 8015e06:	4807      	ldr	r0, [pc, #28]	; (8015e24 <dhcp_parse_reply+0x2f8>)
 8015e08:	f003 f8d8 	bl	8018fbc <iprintf>
 8015e0c:	f06f 0305 	mvn.w	r3, #5
 8015e10:	e149      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8015e12:	2302      	movs	r3, #2
 8015e14:	623b      	str	r3, [r7, #32]
        break;
 8015e16:	e033      	b.n	8015e80 <dhcp_parse_reply+0x354>
 8015e18:	2000cf5c 	.word	0x2000cf5c
 8015e1c:	0801c654 	.word	0x0801c654
 8015e20:	0801c8dc 	.word	0x0801c8dc
 8015e24:	0801c6b4 	.word	0x0801c6b4
 8015e28:	0801c8e8 	.word	0x0801c8e8
 8015e2c:	0801c8fc 	.word	0x0801c8fc
 8015e30:	0801c908 	.word	0x0801c908
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e38:	2b04      	cmp	r3, #4
 8015e3a:	d009      	beq.n	8015e50 <dhcp_parse_reply+0x324>
 8015e3c:	4b9c      	ldr	r3, [pc, #624]	; (80160b0 <dhcp_parse_reply+0x584>)
 8015e3e:	f240 625d 	movw	r2, #1629	; 0x65d
 8015e42:	499c      	ldr	r1, [pc, #624]	; (80160b4 <dhcp_parse_reply+0x588>)
 8015e44:	489c      	ldr	r0, [pc, #624]	; (80160b8 <dhcp_parse_reply+0x58c>)
 8015e46:	f003 f8b9 	bl	8018fbc <iprintf>
 8015e4a:	f06f 0305 	mvn.w	r3, #5
 8015e4e:	e12a      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8015e50:	2304      	movs	r3, #4
 8015e52:	623b      	str	r3, [r7, #32]
        break;
 8015e54:	e014      	b.n	8015e80 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8015e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e5a:	2b04      	cmp	r3, #4
 8015e5c:	d009      	beq.n	8015e72 <dhcp_parse_reply+0x346>
 8015e5e:	4b94      	ldr	r3, [pc, #592]	; (80160b0 <dhcp_parse_reply+0x584>)
 8015e60:	f240 6261 	movw	r2, #1633	; 0x661
 8015e64:	4993      	ldr	r1, [pc, #588]	; (80160b4 <dhcp_parse_reply+0x588>)
 8015e66:	4894      	ldr	r0, [pc, #592]	; (80160b8 <dhcp_parse_reply+0x58c>)
 8015e68:	f003 f8a8 	bl	8018fbc <iprintf>
 8015e6c:	f06f 0305 	mvn.w	r3, #5
 8015e70:	e119      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8015e72:	2305      	movs	r3, #5
 8015e74:	623b      	str	r3, [r7, #32]
        break;
 8015e76:	e003      	b.n	8015e80 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8015e78:	2300      	movs	r3, #0
 8015e7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8015e7e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8015e80:	7dfb      	ldrb	r3, [r7, #23]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d103      	bne.n	8015e8e <dhcp_parse_reply+0x362>
      offset++;
 8015e86:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015e88:	3301      	adds	r3, #1
 8015e8a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8015e8c:	e0a1      	b.n	8015fd2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8015e8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015e94:	4413      	add	r3, r2
 8015e96:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8015e9a:	4293      	cmp	r3, r2
 8015e9c:	dd02      	ble.n	8015ea4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8015e9e:	f06f 0301 	mvn.w	r3, #1
 8015ea2:	e100      	b.n	80160a6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8015ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ea8:	b29a      	uxth	r2, r3
 8015eaa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015eac:	4413      	add	r3, r2
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	3302      	adds	r3, #2
 8015eb2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8015eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f000 808a 	beq.w	8015fd2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8015ec2:	6a3b      	ldr	r3, [r7, #32]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	db02      	blt.n	8015ece <dhcp_parse_reply+0x3a2>
 8015ec8:	6a3b      	ldr	r3, [r7, #32]
 8015eca:	2b07      	cmp	r3, #7
 8015ecc:	dd06      	ble.n	8015edc <dhcp_parse_reply+0x3b0>
 8015ece:	4b78      	ldr	r3, [pc, #480]	; (80160b0 <dhcp_parse_reply+0x584>)
 8015ed0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8015ed4:	4979      	ldr	r1, [pc, #484]	; (80160bc <dhcp_parse_reply+0x590>)
 8015ed6:	4878      	ldr	r0, [pc, #480]	; (80160b8 <dhcp_parse_reply+0x58c>)
 8015ed8:	f003 f870 	bl	8018fbc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8015edc:	4a78      	ldr	r2, [pc, #480]	; (80160c0 <dhcp_parse_reply+0x594>)
 8015ede:	6a3b      	ldr	r3, [r7, #32]
 8015ee0:	4413      	add	r3, r2
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d174      	bne.n	8015fd2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8015ee8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015eec:	2b04      	cmp	r3, #4
 8015eee:	bf28      	it	cs
 8015ef0:	2304      	movcs	r3, #4
 8015ef2:	b2db      	uxtb	r3, r3
 8015ef4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8015ef6:	8bfb      	ldrh	r3, [r7, #30]
 8015ef8:	8aba      	ldrh	r2, [r7, #20]
 8015efa:	f107 0108 	add.w	r1, r7, #8
 8015efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015f00:	f7f7 fd18 	bl	800d934 <pbuf_copy_partial>
 8015f04:	4603      	mov	r3, r0
 8015f06:	461a      	mov	r2, r3
 8015f08:	8abb      	ldrh	r3, [r7, #20]
 8015f0a:	4293      	cmp	r3, r2
 8015f0c:	d002      	beq.n	8015f14 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8015f0e:	f06f 0301 	mvn.w	r3, #1
 8015f12:	e0c8      	b.n	80160a6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8015f14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f18:	2b04      	cmp	r3, #4
 8015f1a:	d933      	bls.n	8015f84 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8015f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f20:	f003 0303 	and.w	r3, r3, #3
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d009      	beq.n	8015f3e <dhcp_parse_reply+0x412>
 8015f2a:	4b61      	ldr	r3, [pc, #388]	; (80160b0 <dhcp_parse_reply+0x584>)
 8015f2c:	f240 6281 	movw	r2, #1665	; 0x681
 8015f30:	4964      	ldr	r1, [pc, #400]	; (80160c4 <dhcp_parse_reply+0x598>)
 8015f32:	4861      	ldr	r0, [pc, #388]	; (80160b8 <dhcp_parse_reply+0x58c>)
 8015f34:	f003 f842 	bl	8018fbc <iprintf>
 8015f38:	f06f 0305 	mvn.w	r3, #5
 8015f3c:	e0b3      	b.n	80160a6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8015f3e:	4a60      	ldr	r2, [pc, #384]	; (80160c0 <dhcp_parse_reply+0x594>)
 8015f40:	6a3b      	ldr	r3, [r7, #32]
 8015f42:	4413      	add	r3, r2
 8015f44:	2201      	movs	r2, #1
 8015f46:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	4618      	mov	r0, r3
 8015f4c:	f7f5 fecd 	bl	800bcea <lwip_htonl>
 8015f50:	4602      	mov	r2, r0
 8015f52:	495d      	ldr	r1, [pc, #372]	; (80160c8 <dhcp_parse_reply+0x59c>)
 8015f54:	6a3b      	ldr	r3, [r7, #32]
 8015f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8015f5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f5e:	3b04      	subs	r3, #4
 8015f60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8015f64:	8bfb      	ldrh	r3, [r7, #30]
 8015f66:	3304      	adds	r3, #4
 8015f68:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8015f6a:	8a7a      	ldrh	r2, [r7, #18]
 8015f6c:	8bfb      	ldrh	r3, [r7, #30]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d202      	bcs.n	8015f78 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8015f72:	f06f 0301 	mvn.w	r3, #1
 8015f76:	e096      	b.n	80160a6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8015f78:	8a7b      	ldrh	r3, [r7, #18]
 8015f7a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8015f7c:	6a3b      	ldr	r3, [r7, #32]
 8015f7e:	3301      	adds	r3, #1
 8015f80:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8015f82:	e79e      	b.n	8015ec2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8015f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f88:	2b04      	cmp	r3, #4
 8015f8a:	d106      	bne.n	8015f9a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8015f8c:	68bb      	ldr	r3, [r7, #8]
 8015f8e:	4618      	mov	r0, r3
 8015f90:	f7f5 feab 	bl	800bcea <lwip_htonl>
 8015f94:	4603      	mov	r3, r0
 8015f96:	60bb      	str	r3, [r7, #8]
 8015f98:	e011      	b.n	8015fbe <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8015f9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015f9e:	2b01      	cmp	r3, #1
 8015fa0:	d009      	beq.n	8015fb6 <dhcp_parse_reply+0x48a>
 8015fa2:	4b43      	ldr	r3, [pc, #268]	; (80160b0 <dhcp_parse_reply+0x584>)
 8015fa4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8015fa8:	4948      	ldr	r1, [pc, #288]	; (80160cc <dhcp_parse_reply+0x5a0>)
 8015faa:	4843      	ldr	r0, [pc, #268]	; (80160b8 <dhcp_parse_reply+0x58c>)
 8015fac:	f003 f806 	bl	8018fbc <iprintf>
 8015fb0:	f06f 0305 	mvn.w	r3, #5
 8015fb4:	e077      	b.n	80160a6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8015fb6:	f107 0308 	add.w	r3, r7, #8
 8015fba:	781b      	ldrb	r3, [r3, #0]
 8015fbc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8015fbe:	4a40      	ldr	r2, [pc, #256]	; (80160c0 <dhcp_parse_reply+0x594>)
 8015fc0:	6a3b      	ldr	r3, [r7, #32]
 8015fc2:	4413      	add	r3, r2
 8015fc4:	2201      	movs	r2, #1
 8015fc6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8015fc8:	68ba      	ldr	r2, [r7, #8]
 8015fca:	493f      	ldr	r1, [pc, #252]	; (80160c8 <dhcp_parse_reply+0x59c>)
 8015fcc:	6a3b      	ldr	r3, [r7, #32]
 8015fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8015fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fd4:	895b      	ldrh	r3, [r3, #10]
 8015fd6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fd8:	429a      	cmp	r2, r3
 8015fda:	d324      	bcc.n	8016026 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8015fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fde:	895b      	ldrh	r3, [r3, #10]
 8015fe0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015fe2:	1ad3      	subs	r3, r2, r3
 8015fe4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8015fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015fe8:	895b      	ldrh	r3, [r3, #10]
 8015fea:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8015fec:	1ad3      	subs	r3, r2, r3
 8015fee:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8015ff0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015ff2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8015ff4:	429a      	cmp	r2, r3
 8015ff6:	d213      	bcs.n	8016020 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8015ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8015ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016000:	2b00      	cmp	r3, #0
 8016002:	d109      	bne.n	8016018 <dhcp_parse_reply+0x4ec>
 8016004:	4b2a      	ldr	r3, [pc, #168]	; (80160b0 <dhcp_parse_reply+0x584>)
 8016006:	f240 629d 	movw	r2, #1693	; 0x69d
 801600a:	4931      	ldr	r1, [pc, #196]	; (80160d0 <dhcp_parse_reply+0x5a4>)
 801600c:	482a      	ldr	r0, [pc, #168]	; (80160b8 <dhcp_parse_reply+0x58c>)
 801600e:	f002 ffd5 	bl	8018fbc <iprintf>
 8016012:	f06f 0305 	mvn.w	r3, #5
 8016016:	e046      	b.n	80160a6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8016018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801601e:	e002      	b.n	8016026 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8016020:	f06f 0301 	mvn.w	r3, #1
 8016024:	e03f      	b.n	80160a6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8016026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016028:	2b00      	cmp	r3, #0
 801602a:	d00a      	beq.n	8016042 <dhcp_parse_reply+0x516>
 801602c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801602e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016030:	429a      	cmp	r2, r3
 8016032:	d206      	bcs.n	8016042 <dhcp_parse_reply+0x516>
 8016034:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016036:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016038:	4413      	add	r3, r2
 801603a:	781b      	ldrb	r3, [r3, #0]
 801603c:	2bff      	cmp	r3, #255	; 0xff
 801603e:	f47f adb8 	bne.w	8015bb2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8016042:	4b1f      	ldr	r3, [pc, #124]	; (80160c0 <dhcp_parse_reply+0x594>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d018      	beq.n	801607c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801604a:	4b1f      	ldr	r3, [pc, #124]	; (80160c8 <dhcp_parse_reply+0x59c>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8016050:	4b1b      	ldr	r3, [pc, #108]	; (80160c0 <dhcp_parse_reply+0x594>)
 8016052:	2200      	movs	r2, #0
 8016054:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2b01      	cmp	r3, #1
 801605a:	d102      	bne.n	8016062 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801605c:	2301      	movs	r3, #1
 801605e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016060:	e00c      	b.n	801607c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	2b02      	cmp	r3, #2
 8016066:	d102      	bne.n	801606e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8016068:	2301      	movs	r3, #1
 801606a:	62bb      	str	r3, [r7, #40]	; 0x28
 801606c:	e006      	b.n	801607c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2b03      	cmp	r3, #3
 8016072:	d103      	bne.n	801607c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8016074:	2301      	movs	r3, #1
 8016076:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8016078:	2301      	movs	r3, #1
 801607a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801607e:	2b00      	cmp	r3, #0
 8016080:	d006      	beq.n	8016090 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8016082:	2300      	movs	r3, #0
 8016084:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8016086:	236c      	movs	r3, #108	; 0x6c
 8016088:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801608a:	23ec      	movs	r3, #236	; 0xec
 801608c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801608e:	e56a      	b.n	8015b66 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8016090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016092:	2b00      	cmp	r3, #0
 8016094:	d006      	beq.n	80160a4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8016096:	2300      	movs	r3, #0
 8016098:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801609a:	232c      	movs	r3, #44	; 0x2c
 801609c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801609e:	236c      	movs	r3, #108	; 0x6c
 80160a0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80160a2:	e560      	b.n	8015b66 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80160a4:	2300      	movs	r3, #0
}
 80160a6:	4618      	mov	r0, r3
 80160a8:	3740      	adds	r7, #64	; 0x40
 80160aa:	46bd      	mov	sp, r7
 80160ac:	bd80      	pop	{r7, pc}
 80160ae:	bf00      	nop
 80160b0:	0801c654 	.word	0x0801c654
 80160b4:	0801c8dc 	.word	0x0801c8dc
 80160b8:	0801c6b4 	.word	0x0801c6b4
 80160bc:	0801c920 	.word	0x0801c920
 80160c0:	2000cf5c 	.word	0x2000cf5c
 80160c4:	0801c934 	.word	0x0801c934
 80160c8:	2000cf3c 	.word	0x2000cf3c
 80160cc:	0801c94c 	.word	0x0801c94c
 80160d0:	0801c960 	.word	0x0801c960

080160d4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b08a      	sub	sp, #40	; 0x28
 80160d8:	af00      	add	r7, sp, #0
 80160da:	60f8      	str	r0, [r7, #12]
 80160dc:	60b9      	str	r1, [r7, #8]
 80160de:	607a      	str	r2, [r7, #4]
 80160e0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80160e2:	4b60      	ldr	r3, [pc, #384]	; (8016264 <dhcp_recv+0x190>)
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160e8:	6a3b      	ldr	r3, [r7, #32]
 80160ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160ec:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80160f4:	69fb      	ldr	r3, [r7, #28]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	f000 809d 	beq.w	8016236 <dhcp_recv+0x162>
 80160fc:	69fb      	ldr	r3, [r7, #28]
 80160fe:	791b      	ldrb	r3, [r3, #4]
 8016100:	2b00      	cmp	r3, #0
 8016102:	f000 8098 	beq.w	8016236 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	895b      	ldrh	r3, [r3, #10]
 801610a:	2b2b      	cmp	r3, #43	; 0x2b
 801610c:	f240 8095 	bls.w	801623a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8016110:	69bb      	ldr	r3, [r7, #24]
 8016112:	781b      	ldrb	r3, [r3, #0]
 8016114:	2b02      	cmp	r3, #2
 8016116:	f040 8092 	bne.w	801623e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801611a:	2300      	movs	r3, #0
 801611c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016120:	e012      	b.n	8016148 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8016122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016126:	6a3a      	ldr	r2, [r7, #32]
 8016128:	4413      	add	r3, r2
 801612a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801612e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016132:	69b9      	ldr	r1, [r7, #24]
 8016134:	440b      	add	r3, r1
 8016136:	7f1b      	ldrb	r3, [r3, #28]
 8016138:	429a      	cmp	r2, r3
 801613a:	f040 8082 	bne.w	8016242 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801613e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016142:	3301      	adds	r3, #1
 8016144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016148:	6a3b      	ldr	r3, [r7, #32]
 801614a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801614e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8016152:	429a      	cmp	r2, r3
 8016154:	d203      	bcs.n	801615e <dhcp_recv+0x8a>
 8016156:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801615a:	2b05      	cmp	r3, #5
 801615c:	d9e1      	bls.n	8016122 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801615e:	69bb      	ldr	r3, [r7, #24]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	4618      	mov	r0, r3
 8016164:	f7f5 fdc1 	bl	800bcea <lwip_htonl>
 8016168:	4602      	mov	r2, r0
 801616a:	69fb      	ldr	r3, [r7, #28]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	429a      	cmp	r2, r3
 8016170:	d169      	bne.n	8016246 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8016172:	69f9      	ldr	r1, [r7, #28]
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7ff fcd9 	bl	8015b2c <dhcp_parse_reply>
 801617a:	4603      	mov	r3, r0
 801617c:	2b00      	cmp	r3, #0
 801617e:	d164      	bne.n	801624a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8016180:	4b39      	ldr	r3, [pc, #228]	; (8016268 <dhcp_recv+0x194>)
 8016182:	785b      	ldrb	r3, [r3, #1]
 8016184:	2b00      	cmp	r3, #0
 8016186:	d062      	beq.n	801624e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801618e:	4b37      	ldr	r3, [pc, #220]	; (801626c <dhcp_recv+0x198>)
 8016190:	685b      	ldr	r3, [r3, #4]
 8016192:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8016194:	7cfb      	ldrb	r3, [r7, #19]
 8016196:	2b05      	cmp	r3, #5
 8016198:	d12a      	bne.n	80161f0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801619a:	69fb      	ldr	r3, [r7, #28]
 801619c:	795b      	ldrb	r3, [r3, #5]
 801619e:	2b01      	cmp	r3, #1
 80161a0:	d112      	bne.n	80161c8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80161a2:	6979      	ldr	r1, [r7, #20]
 80161a4:	6a38      	ldr	r0, [r7, #32]
 80161a6:	f7fe fe17 	bl	8014dd8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80161aa:	6a3b      	ldr	r3, [r7, #32]
 80161ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161b0:	f003 0308 	and.w	r3, r3, #8
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d003      	beq.n	80161c0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80161b8:	6a38      	ldr	r0, [r7, #32]
 80161ba:	f7fe fb85 	bl	80148c8 <dhcp_check>
 80161be:	e049      	b.n	8016254 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80161c0:	6a38      	ldr	r0, [r7, #32]
 80161c2:	f7ff f867 	bl	8015294 <dhcp_bind>
 80161c6:	e045      	b.n	8016254 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80161c8:	69fb      	ldr	r3, [r7, #28]
 80161ca:	795b      	ldrb	r3, [r3, #5]
 80161cc:	2b03      	cmp	r3, #3
 80161ce:	d007      	beq.n	80161e0 <dhcp_recv+0x10c>
 80161d0:	69fb      	ldr	r3, [r7, #28]
 80161d2:	795b      	ldrb	r3, [r3, #5]
 80161d4:	2b04      	cmp	r3, #4
 80161d6:	d003      	beq.n	80161e0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80161d8:	69fb      	ldr	r3, [r7, #28]
 80161da:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80161dc:	2b05      	cmp	r3, #5
 80161de:	d139      	bne.n	8016254 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80161e0:	6979      	ldr	r1, [r7, #20]
 80161e2:	6a38      	ldr	r0, [r7, #32]
 80161e4:	f7fe fdf8 	bl	8014dd8 <dhcp_handle_ack>
      dhcp_bind(netif);
 80161e8:	6a38      	ldr	r0, [r7, #32]
 80161ea:	f7ff f853 	bl	8015294 <dhcp_bind>
 80161ee:	e031      	b.n	8016254 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 80161f0:	7cfb      	ldrb	r3, [r7, #19]
 80161f2:	2b06      	cmp	r3, #6
 80161f4:	d113      	bne.n	801621e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80161f6:	69fb      	ldr	r3, [r7, #28]
 80161f8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80161fa:	2b03      	cmp	r3, #3
 80161fc:	d00b      	beq.n	8016216 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80161fe:	69fb      	ldr	r3, [r7, #28]
 8016200:	795b      	ldrb	r3, [r3, #5]
 8016202:	2b01      	cmp	r3, #1
 8016204:	d007      	beq.n	8016216 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8016206:	69fb      	ldr	r3, [r7, #28]
 8016208:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801620a:	2b04      	cmp	r3, #4
 801620c:	d003      	beq.n	8016216 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801620e:	69fb      	ldr	r3, [r7, #28]
 8016210:	795b      	ldrb	r3, [r3, #5]
 8016212:	2b05      	cmp	r3, #5
 8016214:	d103      	bne.n	801621e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8016216:	6a38      	ldr	r0, [r7, #32]
 8016218:	f7fe fb3c 	bl	8014894 <dhcp_handle_nak>
 801621c:	e01a      	b.n	8016254 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801621e:	7cfb      	ldrb	r3, [r7, #19]
 8016220:	2b02      	cmp	r3, #2
 8016222:	d116      	bne.n	8016252 <dhcp_recv+0x17e>
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	795b      	ldrb	r3, [r3, #5]
 8016228:	2b06      	cmp	r3, #6
 801622a:	d112      	bne.n	8016252 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801622c:	6979      	ldr	r1, [r7, #20]
 801622e:	6a38      	ldr	r0, [r7, #32]
 8016230:	f7fe fb7e 	bl	8014930 <dhcp_handle_offer>
 8016234:	e00e      	b.n	8016254 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016236:	bf00      	nop
 8016238:	e00c      	b.n	8016254 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801623a:	bf00      	nop
 801623c:	e00a      	b.n	8016254 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801623e:	bf00      	nop
 8016240:	e008      	b.n	8016254 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8016242:	bf00      	nop
 8016244:	e006      	b.n	8016254 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8016246:	bf00      	nop
 8016248:	e004      	b.n	8016254 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801624a:	bf00      	nop
 801624c:	e002      	b.n	8016254 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801624e:	bf00      	nop
 8016250:	e000      	b.n	8016254 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8016252:	bf00      	nop
  pbuf_free(p);
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f7f7 f967 	bl	800d528 <pbuf_free>
}
 801625a:	bf00      	nop
 801625c:	3728      	adds	r7, #40	; 0x28
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	20009768 	.word	0x20009768
 8016268:	2000cf5c 	.word	0x2000cf5c
 801626c:	2000cf3c 	.word	0x2000cf3c

08016270 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b088      	sub	sp, #32
 8016274:	af00      	add	r7, sp, #0
 8016276:	60f8      	str	r0, [r7, #12]
 8016278:	60b9      	str	r1, [r7, #8]
 801627a:	603b      	str	r3, [r7, #0]
 801627c:	4613      	mov	r3, r2
 801627e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8016280:	68fb      	ldr	r3, [r7, #12]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d108      	bne.n	8016298 <dhcp_create_msg+0x28>
 8016286:	4b5f      	ldr	r3, [pc, #380]	; (8016404 <dhcp_create_msg+0x194>)
 8016288:	f240 7269 	movw	r2, #1897	; 0x769
 801628c:	495e      	ldr	r1, [pc, #376]	; (8016408 <dhcp_create_msg+0x198>)
 801628e:	485f      	ldr	r0, [pc, #380]	; (801640c <dhcp_create_msg+0x19c>)
 8016290:	f002 fe94 	bl	8018fbc <iprintf>
 8016294:	2300      	movs	r3, #0
 8016296:	e0b1      	b.n	80163fc <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d108      	bne.n	80162b0 <dhcp_create_msg+0x40>
 801629e:	4b59      	ldr	r3, [pc, #356]	; (8016404 <dhcp_create_msg+0x194>)
 80162a0:	f240 726a 	movw	r2, #1898	; 0x76a
 80162a4:	495a      	ldr	r1, [pc, #360]	; (8016410 <dhcp_create_msg+0x1a0>)
 80162a6:	4859      	ldr	r0, [pc, #356]	; (801640c <dhcp_create_msg+0x19c>)
 80162a8:	f002 fe88 	bl	8018fbc <iprintf>
 80162ac:	2300      	movs	r3, #0
 80162ae:	e0a5      	b.n	80163fc <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80162b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80162b4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80162b8:	2036      	movs	r0, #54	; 0x36
 80162ba:	f7f6 fe51 	bl	800cf60 <pbuf_alloc>
 80162be:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80162c0:	69bb      	ldr	r3, [r7, #24]
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d101      	bne.n	80162ca <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80162c6:	2300      	movs	r3, #0
 80162c8:	e098      	b.n	80163fc <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80162ca:	69bb      	ldr	r3, [r7, #24]
 80162cc:	895b      	ldrh	r3, [r3, #10]
 80162ce:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80162d2:	d206      	bcs.n	80162e2 <dhcp_create_msg+0x72>
 80162d4:	4b4b      	ldr	r3, [pc, #300]	; (8016404 <dhcp_create_msg+0x194>)
 80162d6:	f240 7271 	movw	r2, #1905	; 0x771
 80162da:	494e      	ldr	r1, [pc, #312]	; (8016414 <dhcp_create_msg+0x1a4>)
 80162dc:	484b      	ldr	r0, [pc, #300]	; (801640c <dhcp_create_msg+0x19c>)
 80162de:	f002 fe6d 	bl	8018fbc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80162e2:	79fb      	ldrb	r3, [r7, #7]
 80162e4:	2b03      	cmp	r3, #3
 80162e6:	d103      	bne.n	80162f0 <dhcp_create_msg+0x80>
 80162e8:	68bb      	ldr	r3, [r7, #8]
 80162ea:	795b      	ldrb	r3, [r3, #5]
 80162ec:	2b03      	cmp	r3, #3
 80162ee:	d10d      	bne.n	801630c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80162f0:	68bb      	ldr	r3, [r7, #8]
 80162f2:	799b      	ldrb	r3, [r3, #6]
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d105      	bne.n	8016304 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80162f8:	f002 fce6 	bl	8018cc8 <rand>
 80162fc:	4603      	mov	r3, r0
 80162fe:	461a      	mov	r2, r3
 8016300:	4b45      	ldr	r3, [pc, #276]	; (8016418 <dhcp_create_msg+0x1a8>)
 8016302:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8016304:	4b44      	ldr	r3, [pc, #272]	; (8016418 <dhcp_create_msg+0x1a8>)
 8016306:	681a      	ldr	r2, [r3, #0]
 8016308:	68bb      	ldr	r3, [r7, #8]
 801630a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	685b      	ldr	r3, [r3, #4]
 8016310:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8016312:	f44f 729a 	mov.w	r2, #308	; 0x134
 8016316:	2100      	movs	r1, #0
 8016318:	6978      	ldr	r0, [r7, #20]
 801631a:	f002 feb4 	bl	8019086 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	2201      	movs	r2, #1
 8016322:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	2201      	movs	r2, #1
 8016328:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8016334:	68bb      	ldr	r3, [r7, #8]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	4618      	mov	r0, r3
 801633a:	f7f5 fcd6 	bl	800bcea <lwip_htonl>
 801633e:	4602      	mov	r2, r0
 8016340:	697b      	ldr	r3, [r7, #20]
 8016342:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8016344:	79fb      	ldrb	r3, [r7, #7]
 8016346:	2b08      	cmp	r3, #8
 8016348:	d010      	beq.n	801636c <dhcp_create_msg+0xfc>
 801634a:	79fb      	ldrb	r3, [r7, #7]
 801634c:	2b04      	cmp	r3, #4
 801634e:	d00d      	beq.n	801636c <dhcp_create_msg+0xfc>
 8016350:	79fb      	ldrb	r3, [r7, #7]
 8016352:	2b07      	cmp	r3, #7
 8016354:	d00a      	beq.n	801636c <dhcp_create_msg+0xfc>
 8016356:	79fb      	ldrb	r3, [r7, #7]
 8016358:	2b03      	cmp	r3, #3
 801635a:	d10c      	bne.n	8016376 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801635c:	68bb      	ldr	r3, [r7, #8]
 801635e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8016360:	2b05      	cmp	r3, #5
 8016362:	d003      	beq.n	801636c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	795b      	ldrb	r3, [r3, #5]
 8016368:	2b04      	cmp	r3, #4
 801636a:	d104      	bne.n	8016376 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	3304      	adds	r3, #4
 8016370:	681a      	ldr	r2, [r3, #0]
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016376:	2300      	movs	r3, #0
 8016378:	83fb      	strh	r3, [r7, #30]
 801637a:	e00c      	b.n	8016396 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801637c:	8bfa      	ldrh	r2, [r7, #30]
 801637e:	8bfb      	ldrh	r3, [r7, #30]
 8016380:	68f9      	ldr	r1, [r7, #12]
 8016382:	440a      	add	r2, r1
 8016384:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8016388:	697a      	ldr	r2, [r7, #20]
 801638a:	4413      	add	r3, r2
 801638c:	460a      	mov	r2, r1
 801638e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8016390:	8bfb      	ldrh	r3, [r7, #30]
 8016392:	3301      	adds	r3, #1
 8016394:	83fb      	strh	r3, [r7, #30]
 8016396:	8bfb      	ldrh	r3, [r7, #30]
 8016398:	2b05      	cmp	r3, #5
 801639a:	d9ef      	bls.n	801637c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801639c:	697b      	ldr	r3, [r7, #20]
 801639e:	2200      	movs	r2, #0
 80163a0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80163a4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80163a8:	2200      	movs	r2, #0
 80163aa:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80163ae:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80163b2:	2200      	movs	r2, #0
 80163b4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80163b8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80163bc:	2200      	movs	r2, #0
 80163be:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80163c2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163cc:	2301      	movs	r3, #1
 80163ce:	2235      	movs	r2, #53	; 0x35
 80163d0:	2000      	movs	r0, #0
 80163d2:	f7ff fadb 	bl	801598c <dhcp_option>
 80163d6:	4603      	mov	r3, r0
 80163d8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80163e0:	79fa      	ldrb	r2, [r7, #7]
 80163e2:	8a7b      	ldrh	r3, [r7, #18]
 80163e4:	4618      	mov	r0, r3
 80163e6:	f7ff fb05 	bl	80159f4 <dhcp_option_byte>
 80163ea:	4603      	mov	r3, r0
 80163ec:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d002      	beq.n	80163fa <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	8a7a      	ldrh	r2, [r7, #18]
 80163f8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80163fa:	69bb      	ldr	r3, [r7, #24]
}
 80163fc:	4618      	mov	r0, r3
 80163fe:	3720      	adds	r7, #32
 8016400:	46bd      	mov	sp, r7
 8016402:	bd80      	pop	{r7, pc}
 8016404:	0801c654 	.word	0x0801c654
 8016408:	0801c974 	.word	0x0801c974
 801640c:	0801c6b4 	.word	0x0801c6b4
 8016410:	0801c994 	.word	0x0801c994
 8016414:	0801c9b4 	.word	0x0801c9b4
 8016418:	2000cf6c 	.word	0x2000cf6c

0801641c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801641c:	b580      	push	{r7, lr}
 801641e:	b084      	sub	sp, #16
 8016420:	af00      	add	r7, sp, #0
 8016422:	4603      	mov	r3, r0
 8016424:	60b9      	str	r1, [r7, #8]
 8016426:	607a      	str	r2, [r7, #4]
 8016428:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801642a:	89fb      	ldrh	r3, [r7, #14]
 801642c:	1c5a      	adds	r2, r3, #1
 801642e:	81fa      	strh	r2, [r7, #14]
 8016430:	461a      	mov	r2, r3
 8016432:	68bb      	ldr	r3, [r7, #8]
 8016434:	4413      	add	r3, r2
 8016436:	22ff      	movs	r2, #255	; 0xff
 8016438:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801643a:	e007      	b.n	801644c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801643c:	89fb      	ldrh	r3, [r7, #14]
 801643e:	1c5a      	adds	r2, r3, #1
 8016440:	81fa      	strh	r2, [r7, #14]
 8016442:	461a      	mov	r2, r3
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	4413      	add	r3, r2
 8016448:	2200      	movs	r2, #0
 801644a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801644c:	89fb      	ldrh	r3, [r7, #14]
 801644e:	2b43      	cmp	r3, #67	; 0x43
 8016450:	d904      	bls.n	801645c <dhcp_option_trailer+0x40>
 8016452:	89fb      	ldrh	r3, [r7, #14]
 8016454:	f003 0303 	and.w	r3, r3, #3
 8016458:	2b00      	cmp	r3, #0
 801645a:	d002      	beq.n	8016462 <dhcp_option_trailer+0x46>
 801645c:	89fb      	ldrh	r3, [r7, #14]
 801645e:	2b43      	cmp	r3, #67	; 0x43
 8016460:	d9ec      	bls.n	801643c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8016462:	89fb      	ldrh	r3, [r7, #14]
 8016464:	33f0      	adds	r3, #240	; 0xf0
 8016466:	b29b      	uxth	r3, r3
 8016468:	4619      	mov	r1, r3
 801646a:	6878      	ldr	r0, [r7, #4]
 801646c:	f7f6 fed6 	bl	800d21c <pbuf_realloc>
}
 8016470:	bf00      	nop
 8016472:	3710      	adds	r7, #16
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}

08016478 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8016478:	b480      	push	{r7}
 801647a:	b085      	sub	sp, #20
 801647c:	af00      	add	r7, sp, #0
 801647e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d017      	beq.n	80164b6 <dhcp_supplied_address+0x3e>
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801648a:	2b00      	cmp	r3, #0
 801648c:	d013      	beq.n	80164b6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016492:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	795b      	ldrb	r3, [r3, #5]
 8016498:	2b0a      	cmp	r3, #10
 801649a:	d007      	beq.n	80164ac <dhcp_supplied_address+0x34>
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	795b      	ldrb	r3, [r3, #5]
 80164a0:	2b05      	cmp	r3, #5
 80164a2:	d003      	beq.n	80164ac <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80164a8:	2b04      	cmp	r3, #4
 80164aa:	d101      	bne.n	80164b0 <dhcp_supplied_address+0x38>
 80164ac:	2301      	movs	r3, #1
 80164ae:	e000      	b.n	80164b2 <dhcp_supplied_address+0x3a>
 80164b0:	2300      	movs	r3, #0
 80164b2:	b2db      	uxtb	r3, r3
 80164b4:	e000      	b.n	80164b8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3714      	adds	r7, #20
 80164bc:	46bd      	mov	sp, r7
 80164be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c2:	4770      	bx	lr

080164c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b082      	sub	sp, #8
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80164cc:	4915      	ldr	r1, [pc, #84]	; (8016524 <etharp_free_entry+0x60>)
 80164ce:	687a      	ldr	r2, [r7, #4]
 80164d0:	4613      	mov	r3, r2
 80164d2:	005b      	lsls	r3, r3, #1
 80164d4:	4413      	add	r3, r2
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	440b      	add	r3, r1
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d013      	beq.n	8016508 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80164e0:	4910      	ldr	r1, [pc, #64]	; (8016524 <etharp_free_entry+0x60>)
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	4613      	mov	r3, r2
 80164e6:	005b      	lsls	r3, r3, #1
 80164e8:	4413      	add	r3, r2
 80164ea:	00db      	lsls	r3, r3, #3
 80164ec:	440b      	add	r3, r1
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	4618      	mov	r0, r3
 80164f2:	f7f7 f819 	bl	800d528 <pbuf_free>
    arp_table[i].q = NULL;
 80164f6:	490b      	ldr	r1, [pc, #44]	; (8016524 <etharp_free_entry+0x60>)
 80164f8:	687a      	ldr	r2, [r7, #4]
 80164fa:	4613      	mov	r3, r2
 80164fc:	005b      	lsls	r3, r3, #1
 80164fe:	4413      	add	r3, r2
 8016500:	00db      	lsls	r3, r3, #3
 8016502:	440b      	add	r3, r1
 8016504:	2200      	movs	r2, #0
 8016506:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016508:	4906      	ldr	r1, [pc, #24]	; (8016524 <etharp_free_entry+0x60>)
 801650a:	687a      	ldr	r2, [r7, #4]
 801650c:	4613      	mov	r3, r2
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	4413      	add	r3, r2
 8016512:	00db      	lsls	r3, r3, #3
 8016514:	440b      	add	r3, r1
 8016516:	3314      	adds	r3, #20
 8016518:	2200      	movs	r2, #0
 801651a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801651c:	bf00      	nop
 801651e:	3708      	adds	r7, #8
 8016520:	46bd      	mov	sp, r7
 8016522:	bd80      	pop	{r7, pc}
 8016524:	2000cf70 	.word	0x2000cf70

08016528 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b082      	sub	sp, #8
 801652c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801652e:	2300      	movs	r3, #0
 8016530:	607b      	str	r3, [r7, #4]
 8016532:	e096      	b.n	8016662 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016534:	494f      	ldr	r1, [pc, #316]	; (8016674 <etharp_tmr+0x14c>)
 8016536:	687a      	ldr	r2, [r7, #4]
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	440b      	add	r3, r1
 8016542:	3314      	adds	r3, #20
 8016544:	781b      	ldrb	r3, [r3, #0]
 8016546:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016548:	78fb      	ldrb	r3, [r7, #3]
 801654a:	2b00      	cmp	r3, #0
 801654c:	f000 8086 	beq.w	801665c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016550:	4948      	ldr	r1, [pc, #288]	; (8016674 <etharp_tmr+0x14c>)
 8016552:	687a      	ldr	r2, [r7, #4]
 8016554:	4613      	mov	r3, r2
 8016556:	005b      	lsls	r3, r3, #1
 8016558:	4413      	add	r3, r2
 801655a:	00db      	lsls	r3, r3, #3
 801655c:	440b      	add	r3, r1
 801655e:	3312      	adds	r3, #18
 8016560:	881b      	ldrh	r3, [r3, #0]
 8016562:	3301      	adds	r3, #1
 8016564:	b298      	uxth	r0, r3
 8016566:	4943      	ldr	r1, [pc, #268]	; (8016674 <etharp_tmr+0x14c>)
 8016568:	687a      	ldr	r2, [r7, #4]
 801656a:	4613      	mov	r3, r2
 801656c:	005b      	lsls	r3, r3, #1
 801656e:	4413      	add	r3, r2
 8016570:	00db      	lsls	r3, r3, #3
 8016572:	440b      	add	r3, r1
 8016574:	3312      	adds	r3, #18
 8016576:	4602      	mov	r2, r0
 8016578:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801657a:	493e      	ldr	r1, [pc, #248]	; (8016674 <etharp_tmr+0x14c>)
 801657c:	687a      	ldr	r2, [r7, #4]
 801657e:	4613      	mov	r3, r2
 8016580:	005b      	lsls	r3, r3, #1
 8016582:	4413      	add	r3, r2
 8016584:	00db      	lsls	r3, r3, #3
 8016586:	440b      	add	r3, r1
 8016588:	3312      	adds	r3, #18
 801658a:	881b      	ldrh	r3, [r3, #0]
 801658c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016590:	d215      	bcs.n	80165be <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016592:	4938      	ldr	r1, [pc, #224]	; (8016674 <etharp_tmr+0x14c>)
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	4613      	mov	r3, r2
 8016598:	005b      	lsls	r3, r3, #1
 801659a:	4413      	add	r3, r2
 801659c:	00db      	lsls	r3, r3, #3
 801659e:	440b      	add	r3, r1
 80165a0:	3314      	adds	r3, #20
 80165a2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80165a4:	2b01      	cmp	r3, #1
 80165a6:	d10e      	bne.n	80165c6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80165a8:	4932      	ldr	r1, [pc, #200]	; (8016674 <etharp_tmr+0x14c>)
 80165aa:	687a      	ldr	r2, [r7, #4]
 80165ac:	4613      	mov	r3, r2
 80165ae:	005b      	lsls	r3, r3, #1
 80165b0:	4413      	add	r3, r2
 80165b2:	00db      	lsls	r3, r3, #3
 80165b4:	440b      	add	r3, r1
 80165b6:	3312      	adds	r3, #18
 80165b8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80165ba:	2b04      	cmp	r3, #4
 80165bc:	d903      	bls.n	80165c6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f7ff ff80 	bl	80164c4 <etharp_free_entry>
 80165c4:	e04a      	b.n	801665c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80165c6:	492b      	ldr	r1, [pc, #172]	; (8016674 <etharp_tmr+0x14c>)
 80165c8:	687a      	ldr	r2, [r7, #4]
 80165ca:	4613      	mov	r3, r2
 80165cc:	005b      	lsls	r3, r3, #1
 80165ce:	4413      	add	r3, r2
 80165d0:	00db      	lsls	r3, r3, #3
 80165d2:	440b      	add	r3, r1
 80165d4:	3314      	adds	r3, #20
 80165d6:	781b      	ldrb	r3, [r3, #0]
 80165d8:	2b03      	cmp	r3, #3
 80165da:	d10a      	bne.n	80165f2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80165dc:	4925      	ldr	r1, [pc, #148]	; (8016674 <etharp_tmr+0x14c>)
 80165de:	687a      	ldr	r2, [r7, #4]
 80165e0:	4613      	mov	r3, r2
 80165e2:	005b      	lsls	r3, r3, #1
 80165e4:	4413      	add	r3, r2
 80165e6:	00db      	lsls	r3, r3, #3
 80165e8:	440b      	add	r3, r1
 80165ea:	3314      	adds	r3, #20
 80165ec:	2204      	movs	r2, #4
 80165ee:	701a      	strb	r2, [r3, #0]
 80165f0:	e034      	b.n	801665c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80165f2:	4920      	ldr	r1, [pc, #128]	; (8016674 <etharp_tmr+0x14c>)
 80165f4:	687a      	ldr	r2, [r7, #4]
 80165f6:	4613      	mov	r3, r2
 80165f8:	005b      	lsls	r3, r3, #1
 80165fa:	4413      	add	r3, r2
 80165fc:	00db      	lsls	r3, r3, #3
 80165fe:	440b      	add	r3, r1
 8016600:	3314      	adds	r3, #20
 8016602:	781b      	ldrb	r3, [r3, #0]
 8016604:	2b04      	cmp	r3, #4
 8016606:	d10a      	bne.n	801661e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016608:	491a      	ldr	r1, [pc, #104]	; (8016674 <etharp_tmr+0x14c>)
 801660a:	687a      	ldr	r2, [r7, #4]
 801660c:	4613      	mov	r3, r2
 801660e:	005b      	lsls	r3, r3, #1
 8016610:	4413      	add	r3, r2
 8016612:	00db      	lsls	r3, r3, #3
 8016614:	440b      	add	r3, r1
 8016616:	3314      	adds	r3, #20
 8016618:	2202      	movs	r2, #2
 801661a:	701a      	strb	r2, [r3, #0]
 801661c:	e01e      	b.n	801665c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801661e:	4915      	ldr	r1, [pc, #84]	; (8016674 <etharp_tmr+0x14c>)
 8016620:	687a      	ldr	r2, [r7, #4]
 8016622:	4613      	mov	r3, r2
 8016624:	005b      	lsls	r3, r3, #1
 8016626:	4413      	add	r3, r2
 8016628:	00db      	lsls	r3, r3, #3
 801662a:	440b      	add	r3, r1
 801662c:	3314      	adds	r3, #20
 801662e:	781b      	ldrb	r3, [r3, #0]
 8016630:	2b01      	cmp	r3, #1
 8016632:	d113      	bne.n	801665c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8016634:	490f      	ldr	r1, [pc, #60]	; (8016674 <etharp_tmr+0x14c>)
 8016636:	687a      	ldr	r2, [r7, #4]
 8016638:	4613      	mov	r3, r2
 801663a:	005b      	lsls	r3, r3, #1
 801663c:	4413      	add	r3, r2
 801663e:	00db      	lsls	r3, r3, #3
 8016640:	440b      	add	r3, r1
 8016642:	3308      	adds	r3, #8
 8016644:	6818      	ldr	r0, [r3, #0]
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	4613      	mov	r3, r2
 801664a:	005b      	lsls	r3, r3, #1
 801664c:	4413      	add	r3, r2
 801664e:	00db      	lsls	r3, r3, #3
 8016650:	4a08      	ldr	r2, [pc, #32]	; (8016674 <etharp_tmr+0x14c>)
 8016652:	4413      	add	r3, r2
 8016654:	3304      	adds	r3, #4
 8016656:	4619      	mov	r1, r3
 8016658:	f000 fe72 	bl	8017340 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	3301      	adds	r3, #1
 8016660:	607b      	str	r3, [r7, #4]
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2b09      	cmp	r3, #9
 8016666:	f77f af65 	ble.w	8016534 <etharp_tmr+0xc>
      }
    }
  }
}
 801666a:	bf00      	nop
 801666c:	bf00      	nop
 801666e:	3708      	adds	r7, #8
 8016670:	46bd      	mov	sp, r7
 8016672:	bd80      	pop	{r7, pc}
 8016674:	2000cf70 	.word	0x2000cf70

08016678 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b08a      	sub	sp, #40	; 0x28
 801667c:	af00      	add	r7, sp, #0
 801667e:	60f8      	str	r0, [r7, #12]
 8016680:	460b      	mov	r3, r1
 8016682:	607a      	str	r2, [r7, #4]
 8016684:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8016686:	230a      	movs	r3, #10
 8016688:	84fb      	strh	r3, [r7, #38]	; 0x26
 801668a:	230a      	movs	r3, #10
 801668c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801668e:	230a      	movs	r3, #10
 8016690:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8016692:	2300      	movs	r3, #0
 8016694:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8016696:	230a      	movs	r3, #10
 8016698:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801669a:	2300      	movs	r3, #0
 801669c:	83bb      	strh	r3, [r7, #28]
 801669e:	2300      	movs	r3, #0
 80166a0:	837b      	strh	r3, [r7, #26]
 80166a2:	2300      	movs	r3, #0
 80166a4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80166a6:	2300      	movs	r3, #0
 80166a8:	843b      	strh	r3, [r7, #32]
 80166aa:	e0ae      	b.n	801680a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80166ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80166b0:	49a6      	ldr	r1, [pc, #664]	; (801694c <etharp_find_entry+0x2d4>)
 80166b2:	4613      	mov	r3, r2
 80166b4:	005b      	lsls	r3, r3, #1
 80166b6:	4413      	add	r3, r2
 80166b8:	00db      	lsls	r3, r3, #3
 80166ba:	440b      	add	r3, r1
 80166bc:	3314      	adds	r3, #20
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80166c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80166c6:	2b0a      	cmp	r3, #10
 80166c8:	d105      	bne.n	80166d6 <etharp_find_entry+0x5e>
 80166ca:	7dfb      	ldrb	r3, [r7, #23]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d102      	bne.n	80166d6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80166d0:	8c3b      	ldrh	r3, [r7, #32]
 80166d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80166d4:	e095      	b.n	8016802 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80166d6:	7dfb      	ldrb	r3, [r7, #23]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	f000 8092 	beq.w	8016802 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80166de:	7dfb      	ldrb	r3, [r7, #23]
 80166e0:	2b01      	cmp	r3, #1
 80166e2:	d009      	beq.n	80166f8 <etharp_find_entry+0x80>
 80166e4:	7dfb      	ldrb	r3, [r7, #23]
 80166e6:	2b01      	cmp	r3, #1
 80166e8:	d806      	bhi.n	80166f8 <etharp_find_entry+0x80>
 80166ea:	4b99      	ldr	r3, [pc, #612]	; (8016950 <etharp_find_entry+0x2d8>)
 80166ec:	f240 1223 	movw	r2, #291	; 0x123
 80166f0:	4998      	ldr	r1, [pc, #608]	; (8016954 <etharp_find_entry+0x2dc>)
 80166f2:	4899      	ldr	r0, [pc, #612]	; (8016958 <etharp_find_entry+0x2e0>)
 80166f4:	f002 fc62 	bl	8018fbc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d020      	beq.n	8016740 <etharp_find_entry+0xc8>
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	6819      	ldr	r1, [r3, #0]
 8016702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016706:	4891      	ldr	r0, [pc, #580]	; (801694c <etharp_find_entry+0x2d4>)
 8016708:	4613      	mov	r3, r2
 801670a:	005b      	lsls	r3, r3, #1
 801670c:	4413      	add	r3, r2
 801670e:	00db      	lsls	r3, r3, #3
 8016710:	4403      	add	r3, r0
 8016712:	3304      	adds	r3, #4
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	4299      	cmp	r1, r3
 8016718:	d112      	bne.n	8016740 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d00c      	beq.n	801673a <etharp_find_entry+0xc2>
 8016720:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016724:	4989      	ldr	r1, [pc, #548]	; (801694c <etharp_find_entry+0x2d4>)
 8016726:	4613      	mov	r3, r2
 8016728:	005b      	lsls	r3, r3, #1
 801672a:	4413      	add	r3, r2
 801672c:	00db      	lsls	r3, r3, #3
 801672e:	440b      	add	r3, r1
 8016730:	3308      	adds	r3, #8
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	687a      	ldr	r2, [r7, #4]
 8016736:	429a      	cmp	r2, r3
 8016738:	d102      	bne.n	8016740 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801673a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801673e:	e100      	b.n	8016942 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8016740:	7dfb      	ldrb	r3, [r7, #23]
 8016742:	2b01      	cmp	r3, #1
 8016744:	d140      	bne.n	80167c8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8016746:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801674a:	4980      	ldr	r1, [pc, #512]	; (801694c <etharp_find_entry+0x2d4>)
 801674c:	4613      	mov	r3, r2
 801674e:	005b      	lsls	r3, r3, #1
 8016750:	4413      	add	r3, r2
 8016752:	00db      	lsls	r3, r3, #3
 8016754:	440b      	add	r3, r1
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2b00      	cmp	r3, #0
 801675a:	d01a      	beq.n	8016792 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801675c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016760:	497a      	ldr	r1, [pc, #488]	; (801694c <etharp_find_entry+0x2d4>)
 8016762:	4613      	mov	r3, r2
 8016764:	005b      	lsls	r3, r3, #1
 8016766:	4413      	add	r3, r2
 8016768:	00db      	lsls	r3, r3, #3
 801676a:	440b      	add	r3, r1
 801676c:	3312      	adds	r3, #18
 801676e:	881b      	ldrh	r3, [r3, #0]
 8016770:	8bba      	ldrh	r2, [r7, #28]
 8016772:	429a      	cmp	r2, r3
 8016774:	d845      	bhi.n	8016802 <etharp_find_entry+0x18a>
            old_queue = i;
 8016776:	8c3b      	ldrh	r3, [r7, #32]
 8016778:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801677a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801677e:	4973      	ldr	r1, [pc, #460]	; (801694c <etharp_find_entry+0x2d4>)
 8016780:	4613      	mov	r3, r2
 8016782:	005b      	lsls	r3, r3, #1
 8016784:	4413      	add	r3, r2
 8016786:	00db      	lsls	r3, r3, #3
 8016788:	440b      	add	r3, r1
 801678a:	3312      	adds	r3, #18
 801678c:	881b      	ldrh	r3, [r3, #0]
 801678e:	83bb      	strh	r3, [r7, #28]
 8016790:	e037      	b.n	8016802 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8016792:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016796:	496d      	ldr	r1, [pc, #436]	; (801694c <etharp_find_entry+0x2d4>)
 8016798:	4613      	mov	r3, r2
 801679a:	005b      	lsls	r3, r3, #1
 801679c:	4413      	add	r3, r2
 801679e:	00db      	lsls	r3, r3, #3
 80167a0:	440b      	add	r3, r1
 80167a2:	3312      	adds	r3, #18
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	8b7a      	ldrh	r2, [r7, #26]
 80167a8:	429a      	cmp	r2, r3
 80167aa:	d82a      	bhi.n	8016802 <etharp_find_entry+0x18a>
            old_pending = i;
 80167ac:	8c3b      	ldrh	r3, [r7, #32]
 80167ae:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80167b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167b4:	4965      	ldr	r1, [pc, #404]	; (801694c <etharp_find_entry+0x2d4>)
 80167b6:	4613      	mov	r3, r2
 80167b8:	005b      	lsls	r3, r3, #1
 80167ba:	4413      	add	r3, r2
 80167bc:	00db      	lsls	r3, r3, #3
 80167be:	440b      	add	r3, r1
 80167c0:	3312      	adds	r3, #18
 80167c2:	881b      	ldrh	r3, [r3, #0]
 80167c4:	837b      	strh	r3, [r7, #26]
 80167c6:	e01c      	b.n	8016802 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80167c8:	7dfb      	ldrb	r3, [r7, #23]
 80167ca:	2b01      	cmp	r3, #1
 80167cc:	d919      	bls.n	8016802 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80167ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167d2:	495e      	ldr	r1, [pc, #376]	; (801694c <etharp_find_entry+0x2d4>)
 80167d4:	4613      	mov	r3, r2
 80167d6:	005b      	lsls	r3, r3, #1
 80167d8:	4413      	add	r3, r2
 80167da:	00db      	lsls	r3, r3, #3
 80167dc:	440b      	add	r3, r1
 80167de:	3312      	adds	r3, #18
 80167e0:	881b      	ldrh	r3, [r3, #0]
 80167e2:	8b3a      	ldrh	r2, [r7, #24]
 80167e4:	429a      	cmp	r2, r3
 80167e6:	d80c      	bhi.n	8016802 <etharp_find_entry+0x18a>
            old_stable = i;
 80167e8:	8c3b      	ldrh	r3, [r7, #32]
 80167ea:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80167ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80167f0:	4956      	ldr	r1, [pc, #344]	; (801694c <etharp_find_entry+0x2d4>)
 80167f2:	4613      	mov	r3, r2
 80167f4:	005b      	lsls	r3, r3, #1
 80167f6:	4413      	add	r3, r2
 80167f8:	00db      	lsls	r3, r3, #3
 80167fa:	440b      	add	r3, r1
 80167fc:	3312      	adds	r3, #18
 80167fe:	881b      	ldrh	r3, [r3, #0]
 8016800:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016802:	8c3b      	ldrh	r3, [r7, #32]
 8016804:	3301      	adds	r3, #1
 8016806:	b29b      	uxth	r3, r3
 8016808:	843b      	strh	r3, [r7, #32]
 801680a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801680e:	2b09      	cmp	r3, #9
 8016810:	f77f af4c 	ble.w	80166ac <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8016814:	7afb      	ldrb	r3, [r7, #11]
 8016816:	f003 0302 	and.w	r3, r3, #2
 801681a:	2b00      	cmp	r3, #0
 801681c:	d108      	bne.n	8016830 <etharp_find_entry+0x1b8>
 801681e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8016822:	2b0a      	cmp	r3, #10
 8016824:	d107      	bne.n	8016836 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8016826:	7afb      	ldrb	r3, [r7, #11]
 8016828:	f003 0301 	and.w	r3, r3, #1
 801682c:	2b00      	cmp	r3, #0
 801682e:	d102      	bne.n	8016836 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8016830:	f04f 33ff 	mov.w	r3, #4294967295
 8016834:	e085      	b.n	8016942 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8016836:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801683a:	2b09      	cmp	r3, #9
 801683c:	dc02      	bgt.n	8016844 <etharp_find_entry+0x1cc>
    i = empty;
 801683e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016840:	843b      	strh	r3, [r7, #32]
 8016842:	e039      	b.n	80168b8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8016844:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8016848:	2b09      	cmp	r3, #9
 801684a:	dc14      	bgt.n	8016876 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801684c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801684e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8016850:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016854:	493d      	ldr	r1, [pc, #244]	; (801694c <etharp_find_entry+0x2d4>)
 8016856:	4613      	mov	r3, r2
 8016858:	005b      	lsls	r3, r3, #1
 801685a:	4413      	add	r3, r2
 801685c:	00db      	lsls	r3, r3, #3
 801685e:	440b      	add	r3, r1
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	d018      	beq.n	8016898 <etharp_find_entry+0x220>
 8016866:	4b3a      	ldr	r3, [pc, #232]	; (8016950 <etharp_find_entry+0x2d8>)
 8016868:	f240 126d 	movw	r2, #365	; 0x16d
 801686c:	493b      	ldr	r1, [pc, #236]	; (801695c <etharp_find_entry+0x2e4>)
 801686e:	483a      	ldr	r0, [pc, #232]	; (8016958 <etharp_find_entry+0x2e0>)
 8016870:	f002 fba4 	bl	8018fbc <iprintf>
 8016874:	e010      	b.n	8016898 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8016876:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801687a:	2b09      	cmp	r3, #9
 801687c:	dc02      	bgt.n	8016884 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801687e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016880:	843b      	strh	r3, [r7, #32]
 8016882:	e009      	b.n	8016898 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8016884:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8016888:	2b09      	cmp	r3, #9
 801688a:	dc02      	bgt.n	8016892 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801688c:	8bfb      	ldrh	r3, [r7, #30]
 801688e:	843b      	strh	r3, [r7, #32]
 8016890:	e002      	b.n	8016898 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8016892:	f04f 33ff 	mov.w	r3, #4294967295
 8016896:	e054      	b.n	8016942 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8016898:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801689c:	2b09      	cmp	r3, #9
 801689e:	dd06      	ble.n	80168ae <etharp_find_entry+0x236>
 80168a0:	4b2b      	ldr	r3, [pc, #172]	; (8016950 <etharp_find_entry+0x2d8>)
 80168a2:	f240 127f 	movw	r2, #383	; 0x17f
 80168a6:	492e      	ldr	r1, [pc, #184]	; (8016960 <etharp_find_entry+0x2e8>)
 80168a8:	482b      	ldr	r0, [pc, #172]	; (8016958 <etharp_find_entry+0x2e0>)
 80168aa:	f002 fb87 	bl	8018fbc <iprintf>
    etharp_free_entry(i);
 80168ae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168b2:	4618      	mov	r0, r3
 80168b4:	f7ff fe06 	bl	80164c4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80168b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80168bc:	2b09      	cmp	r3, #9
 80168be:	dd06      	ble.n	80168ce <etharp_find_entry+0x256>
 80168c0:	4b23      	ldr	r3, [pc, #140]	; (8016950 <etharp_find_entry+0x2d8>)
 80168c2:	f240 1283 	movw	r2, #387	; 0x183
 80168c6:	4926      	ldr	r1, [pc, #152]	; (8016960 <etharp_find_entry+0x2e8>)
 80168c8:	4823      	ldr	r0, [pc, #140]	; (8016958 <etharp_find_entry+0x2e0>)
 80168ca:	f002 fb77 	bl	8018fbc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80168ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168d2:	491e      	ldr	r1, [pc, #120]	; (801694c <etharp_find_entry+0x2d4>)
 80168d4:	4613      	mov	r3, r2
 80168d6:	005b      	lsls	r3, r3, #1
 80168d8:	4413      	add	r3, r2
 80168da:	00db      	lsls	r3, r3, #3
 80168dc:	440b      	add	r3, r1
 80168de:	3314      	adds	r3, #20
 80168e0:	781b      	ldrb	r3, [r3, #0]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d006      	beq.n	80168f4 <etharp_find_entry+0x27c>
 80168e6:	4b1a      	ldr	r3, [pc, #104]	; (8016950 <etharp_find_entry+0x2d8>)
 80168e8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80168ec:	491d      	ldr	r1, [pc, #116]	; (8016964 <etharp_find_entry+0x2ec>)
 80168ee:	481a      	ldr	r0, [pc, #104]	; (8016958 <etharp_find_entry+0x2e0>)
 80168f0:	f002 fb64 	bl	8018fbc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d00b      	beq.n	8016912 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80168fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	6819      	ldr	r1, [r3, #0]
 8016902:	4812      	ldr	r0, [pc, #72]	; (801694c <etharp_find_entry+0x2d4>)
 8016904:	4613      	mov	r3, r2
 8016906:	005b      	lsls	r3, r3, #1
 8016908:	4413      	add	r3, r2
 801690a:	00db      	lsls	r3, r3, #3
 801690c:	4403      	add	r3, r0
 801690e:	3304      	adds	r3, #4
 8016910:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8016912:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8016916:	490d      	ldr	r1, [pc, #52]	; (801694c <etharp_find_entry+0x2d4>)
 8016918:	4613      	mov	r3, r2
 801691a:	005b      	lsls	r3, r3, #1
 801691c:	4413      	add	r3, r2
 801691e:	00db      	lsls	r3, r3, #3
 8016920:	440b      	add	r3, r1
 8016922:	3312      	adds	r3, #18
 8016924:	2200      	movs	r2, #0
 8016926:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8016928:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801692c:	4907      	ldr	r1, [pc, #28]	; (801694c <etharp_find_entry+0x2d4>)
 801692e:	4613      	mov	r3, r2
 8016930:	005b      	lsls	r3, r3, #1
 8016932:	4413      	add	r3, r2
 8016934:	00db      	lsls	r3, r3, #3
 8016936:	440b      	add	r3, r1
 8016938:	3308      	adds	r3, #8
 801693a:	687a      	ldr	r2, [r7, #4]
 801693c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801693e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8016942:	4618      	mov	r0, r3
 8016944:	3728      	adds	r7, #40	; 0x28
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	2000cf70 	.word	0x2000cf70
 8016950:	0801c9f4 	.word	0x0801c9f4
 8016954:	0801ca2c 	.word	0x0801ca2c
 8016958:	0801ca6c 	.word	0x0801ca6c
 801695c:	0801ca94 	.word	0x0801ca94
 8016960:	0801caac 	.word	0x0801caac
 8016964:	0801cac0 	.word	0x0801cac0

08016968 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b088      	sub	sp, #32
 801696c:	af02      	add	r7, sp, #8
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	607a      	str	r2, [r7, #4]
 8016974:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801697c:	2b06      	cmp	r3, #6
 801697e:	d006      	beq.n	801698e <etharp_update_arp_entry+0x26>
 8016980:	4b48      	ldr	r3, [pc, #288]	; (8016aa4 <etharp_update_arp_entry+0x13c>)
 8016982:	f240 12a9 	movw	r2, #425	; 0x1a9
 8016986:	4948      	ldr	r1, [pc, #288]	; (8016aa8 <etharp_update_arp_entry+0x140>)
 8016988:	4848      	ldr	r0, [pc, #288]	; (8016aac <etharp_update_arp_entry+0x144>)
 801698a:	f002 fb17 	bl	8018fbc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801698e:	68bb      	ldr	r3, [r7, #8]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d012      	beq.n	80169ba <etharp_update_arp_entry+0x52>
 8016994:	68bb      	ldr	r3, [r7, #8]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	2b00      	cmp	r3, #0
 801699a:	d00e      	beq.n	80169ba <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801699c:	68bb      	ldr	r3, [r7, #8]
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	68f9      	ldr	r1, [r7, #12]
 80169a2:	4618      	mov	r0, r3
 80169a4:	f001 f920 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 80169a8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d105      	bne.n	80169ba <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80169ae:	68bb      	ldr	r3, [r7, #8]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80169b6:	2be0      	cmp	r3, #224	; 0xe0
 80169b8:	d102      	bne.n	80169c0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80169ba:	f06f 030f 	mvn.w	r3, #15
 80169be:	e06c      	b.n	8016a9a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80169c0:	78fb      	ldrb	r3, [r7, #3]
 80169c2:	68fa      	ldr	r2, [r7, #12]
 80169c4:	4619      	mov	r1, r3
 80169c6:	68b8      	ldr	r0, [r7, #8]
 80169c8:	f7ff fe56 	bl	8016678 <etharp_find_entry>
 80169cc:	4603      	mov	r3, r0
 80169ce:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80169d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	da02      	bge.n	80169de <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80169d8:	8afb      	ldrh	r3, [r7, #22]
 80169da:	b25b      	sxtb	r3, r3
 80169dc:	e05d      	b.n	8016a9a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80169de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169e2:	4933      	ldr	r1, [pc, #204]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 80169e4:	4613      	mov	r3, r2
 80169e6:	005b      	lsls	r3, r3, #1
 80169e8:	4413      	add	r3, r2
 80169ea:	00db      	lsls	r3, r3, #3
 80169ec:	440b      	add	r3, r1
 80169ee:	3314      	adds	r3, #20
 80169f0:	2202      	movs	r2, #2
 80169f2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80169f4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80169f8:	492d      	ldr	r1, [pc, #180]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 80169fa:	4613      	mov	r3, r2
 80169fc:	005b      	lsls	r3, r3, #1
 80169fe:	4413      	add	r3, r2
 8016a00:	00db      	lsls	r3, r3, #3
 8016a02:	440b      	add	r3, r1
 8016a04:	3308      	adds	r3, #8
 8016a06:	68fa      	ldr	r2, [r7, #12]
 8016a08:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8016a0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a0e:	4613      	mov	r3, r2
 8016a10:	005b      	lsls	r3, r3, #1
 8016a12:	4413      	add	r3, r2
 8016a14:	00db      	lsls	r3, r3, #3
 8016a16:	3308      	adds	r3, #8
 8016a18:	4a25      	ldr	r2, [pc, #148]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 8016a1a:	4413      	add	r3, r2
 8016a1c:	3304      	adds	r3, #4
 8016a1e:	2206      	movs	r2, #6
 8016a20:	6879      	ldr	r1, [r7, #4]
 8016a22:	4618      	mov	r0, r3
 8016a24:	f002 fbc8 	bl	80191b8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8016a28:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a2c:	4920      	ldr	r1, [pc, #128]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 8016a2e:	4613      	mov	r3, r2
 8016a30:	005b      	lsls	r3, r3, #1
 8016a32:	4413      	add	r3, r2
 8016a34:	00db      	lsls	r3, r3, #3
 8016a36:	440b      	add	r3, r1
 8016a38:	3312      	adds	r3, #18
 8016a3a:	2200      	movs	r2, #0
 8016a3c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8016a3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a42:	491b      	ldr	r1, [pc, #108]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 8016a44:	4613      	mov	r3, r2
 8016a46:	005b      	lsls	r3, r3, #1
 8016a48:	4413      	add	r3, r2
 8016a4a:	00db      	lsls	r3, r3, #3
 8016a4c:	440b      	add	r3, r1
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d021      	beq.n	8016a98 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8016a54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a58:	4915      	ldr	r1, [pc, #84]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 8016a5a:	4613      	mov	r3, r2
 8016a5c:	005b      	lsls	r3, r3, #1
 8016a5e:	4413      	add	r3, r2
 8016a60:	00db      	lsls	r3, r3, #3
 8016a62:	440b      	add	r3, r1
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8016a68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8016a6c:	4910      	ldr	r1, [pc, #64]	; (8016ab0 <etharp_update_arp_entry+0x148>)
 8016a6e:	4613      	mov	r3, r2
 8016a70:	005b      	lsls	r3, r3, #1
 8016a72:	4413      	add	r3, r2
 8016a74:	00db      	lsls	r3, r3, #3
 8016a76:	440b      	add	r3, r1
 8016a78:	2200      	movs	r2, #0
 8016a7a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016a86:	9300      	str	r3, [sp, #0]
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6939      	ldr	r1, [r7, #16]
 8016a8c:	68f8      	ldr	r0, [r7, #12]
 8016a8e:	f001 ffb9 	bl	8018a04 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8016a92:	6938      	ldr	r0, [r7, #16]
 8016a94:	f7f6 fd48 	bl	800d528 <pbuf_free>
  }
  return ERR_OK;
 8016a98:	2300      	movs	r3, #0
}
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	3718      	adds	r7, #24
 8016a9e:	46bd      	mov	sp, r7
 8016aa0:	bd80      	pop	{r7, pc}
 8016aa2:	bf00      	nop
 8016aa4:	0801c9f4 	.word	0x0801c9f4
 8016aa8:	0801caec 	.word	0x0801caec
 8016aac:	0801ca6c 	.word	0x0801ca6c
 8016ab0:	2000cf70 	.word	0x2000cf70

08016ab4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b084      	sub	sp, #16
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016abc:	2300      	movs	r3, #0
 8016abe:	60fb      	str	r3, [r7, #12]
 8016ac0:	e01e      	b.n	8016b00 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8016ac2:	4913      	ldr	r1, [pc, #76]	; (8016b10 <etharp_cleanup_netif+0x5c>)
 8016ac4:	68fa      	ldr	r2, [r7, #12]
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	005b      	lsls	r3, r3, #1
 8016aca:	4413      	add	r3, r2
 8016acc:	00db      	lsls	r3, r3, #3
 8016ace:	440b      	add	r3, r1
 8016ad0:	3314      	adds	r3, #20
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8016ad6:	7afb      	ldrb	r3, [r7, #11]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00e      	beq.n	8016afa <etharp_cleanup_netif+0x46>
 8016adc:	490c      	ldr	r1, [pc, #48]	; (8016b10 <etharp_cleanup_netif+0x5c>)
 8016ade:	68fa      	ldr	r2, [r7, #12]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	005b      	lsls	r3, r3, #1
 8016ae4:	4413      	add	r3, r2
 8016ae6:	00db      	lsls	r3, r3, #3
 8016ae8:	440b      	add	r3, r1
 8016aea:	3308      	adds	r3, #8
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	687a      	ldr	r2, [r7, #4]
 8016af0:	429a      	cmp	r2, r3
 8016af2:	d102      	bne.n	8016afa <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8016af4:	68f8      	ldr	r0, [r7, #12]
 8016af6:	f7ff fce5 	bl	80164c4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016afa:	68fb      	ldr	r3, [r7, #12]
 8016afc:	3301      	adds	r3, #1
 8016afe:	60fb      	str	r3, [r7, #12]
 8016b00:	68fb      	ldr	r3, [r7, #12]
 8016b02:	2b09      	cmp	r3, #9
 8016b04:	dddd      	ble.n	8016ac2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8016b06:	bf00      	nop
 8016b08:	bf00      	nop
 8016b0a:	3710      	adds	r7, #16
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd80      	pop	{r7, pc}
 8016b10:	2000cf70 	.word	0x2000cf70

08016b14 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8016b14:	b5b0      	push	{r4, r5, r7, lr}
 8016b16:	b08a      	sub	sp, #40	; 0x28
 8016b18:	af04      	add	r7, sp, #16
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016b1e:	683b      	ldr	r3, [r7, #0]
 8016b20:	2b00      	cmp	r3, #0
 8016b22:	d107      	bne.n	8016b34 <etharp_input+0x20>
 8016b24:	4b3f      	ldr	r3, [pc, #252]	; (8016c24 <etharp_input+0x110>)
 8016b26:	f240 228a 	movw	r2, #650	; 0x28a
 8016b2a:	493f      	ldr	r1, [pc, #252]	; (8016c28 <etharp_input+0x114>)
 8016b2c:	483f      	ldr	r0, [pc, #252]	; (8016c2c <etharp_input+0x118>)
 8016b2e:	f002 fa45 	bl	8018fbc <iprintf>
 8016b32:	e074      	b.n	8016c1e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b3a:	693b      	ldr	r3, [r7, #16]
 8016b3c:	881b      	ldrh	r3, [r3, #0]
 8016b3e:	b29b      	uxth	r3, r3
 8016b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016b44:	d10c      	bne.n	8016b60 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016b4a:	2b06      	cmp	r3, #6
 8016b4c:	d108      	bne.n	8016b60 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8016b52:	2b04      	cmp	r3, #4
 8016b54:	d104      	bne.n	8016b60 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8016b56:	693b      	ldr	r3, [r7, #16]
 8016b58:	885b      	ldrh	r3, [r3, #2]
 8016b5a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016b5c:	2b08      	cmp	r3, #8
 8016b5e:	d003      	beq.n	8016b68 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016b60:	6878      	ldr	r0, [r7, #4]
 8016b62:	f7f6 fce1 	bl	800d528 <pbuf_free>
    return;
 8016b66:	e05a      	b.n	8016c1e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	330e      	adds	r3, #14
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8016b70:	693b      	ldr	r3, [r7, #16]
 8016b72:	3318      	adds	r3, #24
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	3304      	adds	r3, #4
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d102      	bne.n	8016b88 <etharp_input+0x74>
    for_us = 0;
 8016b82:	2300      	movs	r3, #0
 8016b84:	75fb      	strb	r3, [r7, #23]
 8016b86:	e009      	b.n	8016b9c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8016b88:	68ba      	ldr	r2, [r7, #8]
 8016b8a:	683b      	ldr	r3, [r7, #0]
 8016b8c:	3304      	adds	r3, #4
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	429a      	cmp	r2, r3
 8016b92:	bf0c      	ite	eq
 8016b94:	2301      	moveq	r3, #1
 8016b96:	2300      	movne	r3, #0
 8016b98:	b2db      	uxtb	r3, r3
 8016b9a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8016b9c:	693b      	ldr	r3, [r7, #16]
 8016b9e:	f103 0208 	add.w	r2, r3, #8
 8016ba2:	7dfb      	ldrb	r3, [r7, #23]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d001      	beq.n	8016bac <etharp_input+0x98>
 8016ba8:	2301      	movs	r3, #1
 8016baa:	e000      	b.n	8016bae <etharp_input+0x9a>
 8016bac:	2302      	movs	r3, #2
 8016bae:	f107 010c 	add.w	r1, r7, #12
 8016bb2:	6838      	ldr	r0, [r7, #0]
 8016bb4:	f7ff fed8 	bl	8016968 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	88db      	ldrh	r3, [r3, #6]
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016bc2:	d003      	beq.n	8016bcc <etharp_input+0xb8>
 8016bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016bc8:	d01e      	beq.n	8016c08 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016bca:	e025      	b.n	8016c18 <etharp_input+0x104>
      if (for_us) {
 8016bcc:	7dfb      	ldrb	r3, [r7, #23]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d021      	beq.n	8016c16 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8016bd2:	683b      	ldr	r3, [r7, #0]
 8016bd4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016bd8:	693b      	ldr	r3, [r7, #16]
 8016bda:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016be8:	693a      	ldr	r2, [r7, #16]
 8016bea:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016bec:	2102      	movs	r1, #2
 8016bee:	9103      	str	r1, [sp, #12]
 8016bf0:	f107 010c 	add.w	r1, r7, #12
 8016bf4:	9102      	str	r1, [sp, #8]
 8016bf6:	9201      	str	r2, [sp, #4]
 8016bf8:	9300      	str	r3, [sp, #0]
 8016bfa:	462b      	mov	r3, r5
 8016bfc:	4622      	mov	r2, r4
 8016bfe:	4601      	mov	r1, r0
 8016c00:	6838      	ldr	r0, [r7, #0]
 8016c02:	f000 faef 	bl	80171e4 <etharp_raw>
      break;
 8016c06:	e006      	b.n	8016c16 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8016c08:	f107 030c 	add.w	r3, r7, #12
 8016c0c:	4619      	mov	r1, r3
 8016c0e:	6838      	ldr	r0, [r7, #0]
 8016c10:	f7fe f9fc 	bl	801500c <dhcp_arp_reply>
      break;
 8016c14:	e000      	b.n	8016c18 <etharp_input+0x104>
      break;
 8016c16:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016c18:	6878      	ldr	r0, [r7, #4]
 8016c1a:	f7f6 fc85 	bl	800d528 <pbuf_free>
}
 8016c1e:	3718      	adds	r7, #24
 8016c20:	46bd      	mov	sp, r7
 8016c22:	bdb0      	pop	{r4, r5, r7, pc}
 8016c24:	0801c9f4 	.word	0x0801c9f4
 8016c28:	0801cb44 	.word	0x0801cb44
 8016c2c:	0801ca6c 	.word	0x0801ca6c

08016c30 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016c30:	b580      	push	{r7, lr}
 8016c32:	b086      	sub	sp, #24
 8016c34:	af02      	add	r7, sp, #8
 8016c36:	60f8      	str	r0, [r7, #12]
 8016c38:	60b9      	str	r1, [r7, #8]
 8016c3a:	4613      	mov	r3, r2
 8016c3c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8016c3e:	79fa      	ldrb	r2, [r7, #7]
 8016c40:	4944      	ldr	r1, [pc, #272]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016c42:	4613      	mov	r3, r2
 8016c44:	005b      	lsls	r3, r3, #1
 8016c46:	4413      	add	r3, r2
 8016c48:	00db      	lsls	r3, r3, #3
 8016c4a:	440b      	add	r3, r1
 8016c4c:	3314      	adds	r3, #20
 8016c4e:	781b      	ldrb	r3, [r3, #0]
 8016c50:	2b01      	cmp	r3, #1
 8016c52:	d806      	bhi.n	8016c62 <etharp_output_to_arp_index+0x32>
 8016c54:	4b40      	ldr	r3, [pc, #256]	; (8016d58 <etharp_output_to_arp_index+0x128>)
 8016c56:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016c5a:	4940      	ldr	r1, [pc, #256]	; (8016d5c <etharp_output_to_arp_index+0x12c>)
 8016c5c:	4840      	ldr	r0, [pc, #256]	; (8016d60 <etharp_output_to_arp_index+0x130>)
 8016c5e:	f002 f9ad 	bl	8018fbc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016c62:	79fa      	ldrb	r2, [r7, #7]
 8016c64:	493b      	ldr	r1, [pc, #236]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016c66:	4613      	mov	r3, r2
 8016c68:	005b      	lsls	r3, r3, #1
 8016c6a:	4413      	add	r3, r2
 8016c6c:	00db      	lsls	r3, r3, #3
 8016c6e:	440b      	add	r3, r1
 8016c70:	3314      	adds	r3, #20
 8016c72:	781b      	ldrb	r3, [r3, #0]
 8016c74:	2b02      	cmp	r3, #2
 8016c76:	d153      	bne.n	8016d20 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8016c78:	79fa      	ldrb	r2, [r7, #7]
 8016c7a:	4936      	ldr	r1, [pc, #216]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016c7c:	4613      	mov	r3, r2
 8016c7e:	005b      	lsls	r3, r3, #1
 8016c80:	4413      	add	r3, r2
 8016c82:	00db      	lsls	r3, r3, #3
 8016c84:	440b      	add	r3, r1
 8016c86:	3312      	adds	r3, #18
 8016c88:	881b      	ldrh	r3, [r3, #0]
 8016c8a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8016c8e:	d919      	bls.n	8016cc4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8016c90:	79fa      	ldrb	r2, [r7, #7]
 8016c92:	4613      	mov	r3, r2
 8016c94:	005b      	lsls	r3, r3, #1
 8016c96:	4413      	add	r3, r2
 8016c98:	00db      	lsls	r3, r3, #3
 8016c9a:	4a2e      	ldr	r2, [pc, #184]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016c9c:	4413      	add	r3, r2
 8016c9e:	3304      	adds	r3, #4
 8016ca0:	4619      	mov	r1, r3
 8016ca2:	68f8      	ldr	r0, [r7, #12]
 8016ca4:	f000 fb4c 	bl	8017340 <etharp_request>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d138      	bne.n	8016d20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016cae:	79fa      	ldrb	r2, [r7, #7]
 8016cb0:	4928      	ldr	r1, [pc, #160]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016cb2:	4613      	mov	r3, r2
 8016cb4:	005b      	lsls	r3, r3, #1
 8016cb6:	4413      	add	r3, r2
 8016cb8:	00db      	lsls	r3, r3, #3
 8016cba:	440b      	add	r3, r1
 8016cbc:	3314      	adds	r3, #20
 8016cbe:	2203      	movs	r2, #3
 8016cc0:	701a      	strb	r2, [r3, #0]
 8016cc2:	e02d      	b.n	8016d20 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8016cc4:	79fa      	ldrb	r2, [r7, #7]
 8016cc6:	4923      	ldr	r1, [pc, #140]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016cc8:	4613      	mov	r3, r2
 8016cca:	005b      	lsls	r3, r3, #1
 8016ccc:	4413      	add	r3, r2
 8016cce:	00db      	lsls	r3, r3, #3
 8016cd0:	440b      	add	r3, r1
 8016cd2:	3312      	adds	r3, #18
 8016cd4:	881b      	ldrh	r3, [r3, #0]
 8016cd6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8016cda:	d321      	bcc.n	8016d20 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8016cdc:	79fa      	ldrb	r2, [r7, #7]
 8016cde:	4613      	mov	r3, r2
 8016ce0:	005b      	lsls	r3, r3, #1
 8016ce2:	4413      	add	r3, r2
 8016ce4:	00db      	lsls	r3, r3, #3
 8016ce6:	4a1b      	ldr	r2, [pc, #108]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016ce8:	4413      	add	r3, r2
 8016cea:	1d19      	adds	r1, r3, #4
 8016cec:	79fa      	ldrb	r2, [r7, #7]
 8016cee:	4613      	mov	r3, r2
 8016cf0:	005b      	lsls	r3, r3, #1
 8016cf2:	4413      	add	r3, r2
 8016cf4:	00db      	lsls	r3, r3, #3
 8016cf6:	3308      	adds	r3, #8
 8016cf8:	4a16      	ldr	r2, [pc, #88]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016cfa:	4413      	add	r3, r2
 8016cfc:	3304      	adds	r3, #4
 8016cfe:	461a      	mov	r2, r3
 8016d00:	68f8      	ldr	r0, [r7, #12]
 8016d02:	f000 fafb 	bl	80172fc <etharp_request_dst>
 8016d06:	4603      	mov	r3, r0
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d109      	bne.n	8016d20 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8016d0c:	79fa      	ldrb	r2, [r7, #7]
 8016d0e:	4911      	ldr	r1, [pc, #68]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016d10:	4613      	mov	r3, r2
 8016d12:	005b      	lsls	r3, r3, #1
 8016d14:	4413      	add	r3, r2
 8016d16:	00db      	lsls	r3, r3, #3
 8016d18:	440b      	add	r3, r1
 8016d1a:	3314      	adds	r3, #20
 8016d1c:	2203      	movs	r2, #3
 8016d1e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8016d26:	79fa      	ldrb	r2, [r7, #7]
 8016d28:	4613      	mov	r3, r2
 8016d2a:	005b      	lsls	r3, r3, #1
 8016d2c:	4413      	add	r3, r2
 8016d2e:	00db      	lsls	r3, r3, #3
 8016d30:	3308      	adds	r3, #8
 8016d32:	4a08      	ldr	r2, [pc, #32]	; (8016d54 <etharp_output_to_arp_index+0x124>)
 8016d34:	4413      	add	r3, r2
 8016d36:	3304      	adds	r3, #4
 8016d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016d3c:	9200      	str	r2, [sp, #0]
 8016d3e:	460a      	mov	r2, r1
 8016d40:	68b9      	ldr	r1, [r7, #8]
 8016d42:	68f8      	ldr	r0, [r7, #12]
 8016d44:	f001 fe5e 	bl	8018a04 <ethernet_output>
 8016d48:	4603      	mov	r3, r0
}
 8016d4a:	4618      	mov	r0, r3
 8016d4c:	3710      	adds	r7, #16
 8016d4e:	46bd      	mov	sp, r7
 8016d50:	bd80      	pop	{r7, pc}
 8016d52:	bf00      	nop
 8016d54:	2000cf70 	.word	0x2000cf70
 8016d58:	0801c9f4 	.word	0x0801c9f4
 8016d5c:	0801cb64 	.word	0x0801cb64
 8016d60:	0801ca6c 	.word	0x0801ca6c

08016d64 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b08a      	sub	sp, #40	; 0x28
 8016d68:	af02      	add	r7, sp, #8
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d106      	bne.n	8016d88 <etharp_output+0x24>
 8016d7a:	4b73      	ldr	r3, [pc, #460]	; (8016f48 <etharp_output+0x1e4>)
 8016d7c:	f240 321e 	movw	r2, #798	; 0x31e
 8016d80:	4972      	ldr	r1, [pc, #456]	; (8016f4c <etharp_output+0x1e8>)
 8016d82:	4873      	ldr	r0, [pc, #460]	; (8016f50 <etharp_output+0x1ec>)
 8016d84:	f002 f91a 	bl	8018fbc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8016d88:	68bb      	ldr	r3, [r7, #8]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d106      	bne.n	8016d9c <etharp_output+0x38>
 8016d8e:	4b6e      	ldr	r3, [pc, #440]	; (8016f48 <etharp_output+0x1e4>)
 8016d90:	f240 321f 	movw	r2, #799	; 0x31f
 8016d94:	496f      	ldr	r1, [pc, #444]	; (8016f54 <etharp_output+0x1f0>)
 8016d96:	486e      	ldr	r0, [pc, #440]	; (8016f50 <etharp_output+0x1ec>)
 8016d98:	f002 f910 	bl	8018fbc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d106      	bne.n	8016db0 <etharp_output+0x4c>
 8016da2:	4b69      	ldr	r3, [pc, #420]	; (8016f48 <etharp_output+0x1e4>)
 8016da4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8016da8:	496b      	ldr	r1, [pc, #428]	; (8016f58 <etharp_output+0x1f4>)
 8016daa:	4869      	ldr	r0, [pc, #420]	; (8016f50 <etharp_output+0x1ec>)
 8016dac:	f002 f906 	bl	8018fbc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	68f9      	ldr	r1, [r7, #12]
 8016db6:	4618      	mov	r0, r3
 8016db8:	f000 ff16 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 8016dbc:	4603      	mov	r3, r0
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d002      	beq.n	8016dc8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8016dc2:	4b66      	ldr	r3, [pc, #408]	; (8016f5c <etharp_output+0x1f8>)
 8016dc4:	61fb      	str	r3, [r7, #28]
 8016dc6:	e0af      	b.n	8016f28 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dd0:	2be0      	cmp	r3, #224	; 0xe0
 8016dd2:	d118      	bne.n	8016e06 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8016ddc:	235e      	movs	r3, #94	; 0x5e
 8016dde:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	3301      	adds	r3, #1
 8016de4:	781b      	ldrb	r3, [r3, #0]
 8016de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016dea:	b2db      	uxtb	r3, r3
 8016dec:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	3302      	adds	r3, #2
 8016df2:	781b      	ldrb	r3, [r3, #0]
 8016df4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	3303      	adds	r3, #3
 8016dfa:	781b      	ldrb	r3, [r3, #0]
 8016dfc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8016dfe:	f107 0310 	add.w	r3, r7, #16
 8016e02:	61fb      	str	r3, [r7, #28]
 8016e04:	e090      	b.n	8016f28 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	681a      	ldr	r2, [r3, #0]
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	3304      	adds	r3, #4
 8016e0e:	681b      	ldr	r3, [r3, #0]
 8016e10:	405a      	eors	r2, r3
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	3308      	adds	r3, #8
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	4013      	ands	r3, r2
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d012      	beq.n	8016e44 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8016e1e:	687b      	ldr	r3, [r7, #4]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016e24:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016e28:	4293      	cmp	r3, r2
 8016e2a:	d00b      	beq.n	8016e44 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	330c      	adds	r3, #12
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d003      	beq.n	8016e3e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	330c      	adds	r3, #12
 8016e3a:	61bb      	str	r3, [r7, #24]
 8016e3c:	e002      	b.n	8016e44 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8016e3e:	f06f 0303 	mvn.w	r3, #3
 8016e42:	e07d      	b.n	8016f40 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e44:	4b46      	ldr	r3, [pc, #280]	; (8016f60 <etharp_output+0x1fc>)
 8016e46:	781b      	ldrb	r3, [r3, #0]
 8016e48:	4619      	mov	r1, r3
 8016e4a:	4a46      	ldr	r2, [pc, #280]	; (8016f64 <etharp_output+0x200>)
 8016e4c:	460b      	mov	r3, r1
 8016e4e:	005b      	lsls	r3, r3, #1
 8016e50:	440b      	add	r3, r1
 8016e52:	00db      	lsls	r3, r3, #3
 8016e54:	4413      	add	r3, r2
 8016e56:	3314      	adds	r3, #20
 8016e58:	781b      	ldrb	r3, [r3, #0]
 8016e5a:	2b01      	cmp	r3, #1
 8016e5c:	d925      	bls.n	8016eaa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016e5e:	4b40      	ldr	r3, [pc, #256]	; (8016f60 <etharp_output+0x1fc>)
 8016e60:	781b      	ldrb	r3, [r3, #0]
 8016e62:	4619      	mov	r1, r3
 8016e64:	4a3f      	ldr	r2, [pc, #252]	; (8016f64 <etharp_output+0x200>)
 8016e66:	460b      	mov	r3, r1
 8016e68:	005b      	lsls	r3, r3, #1
 8016e6a:	440b      	add	r3, r1
 8016e6c:	00db      	lsls	r3, r3, #3
 8016e6e:	4413      	add	r3, r2
 8016e70:	3308      	adds	r3, #8
 8016e72:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016e74:	68fa      	ldr	r2, [r7, #12]
 8016e76:	429a      	cmp	r2, r3
 8016e78:	d117      	bne.n	8016eaa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8016e7a:	69bb      	ldr	r3, [r7, #24]
 8016e7c:	681a      	ldr	r2, [r3, #0]
 8016e7e:	4b38      	ldr	r3, [pc, #224]	; (8016f60 <etharp_output+0x1fc>)
 8016e80:	781b      	ldrb	r3, [r3, #0]
 8016e82:	4618      	mov	r0, r3
 8016e84:	4937      	ldr	r1, [pc, #220]	; (8016f64 <etharp_output+0x200>)
 8016e86:	4603      	mov	r3, r0
 8016e88:	005b      	lsls	r3, r3, #1
 8016e8a:	4403      	add	r3, r0
 8016e8c:	00db      	lsls	r3, r3, #3
 8016e8e:	440b      	add	r3, r1
 8016e90:	3304      	adds	r3, #4
 8016e92:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8016e94:	429a      	cmp	r2, r3
 8016e96:	d108      	bne.n	8016eaa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8016e98:	4b31      	ldr	r3, [pc, #196]	; (8016f60 <etharp_output+0x1fc>)
 8016e9a:	781b      	ldrb	r3, [r3, #0]
 8016e9c:	461a      	mov	r2, r3
 8016e9e:	68b9      	ldr	r1, [r7, #8]
 8016ea0:	68f8      	ldr	r0, [r7, #12]
 8016ea2:	f7ff fec5 	bl	8016c30 <etharp_output_to_arp_index>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	e04a      	b.n	8016f40 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016eaa:	2300      	movs	r3, #0
 8016eac:	75fb      	strb	r3, [r7, #23]
 8016eae:	e031      	b.n	8016f14 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016eb0:	7dfa      	ldrb	r2, [r7, #23]
 8016eb2:	492c      	ldr	r1, [pc, #176]	; (8016f64 <etharp_output+0x200>)
 8016eb4:	4613      	mov	r3, r2
 8016eb6:	005b      	lsls	r3, r3, #1
 8016eb8:	4413      	add	r3, r2
 8016eba:	00db      	lsls	r3, r3, #3
 8016ebc:	440b      	add	r3, r1
 8016ebe:	3314      	adds	r3, #20
 8016ec0:	781b      	ldrb	r3, [r3, #0]
 8016ec2:	2b01      	cmp	r3, #1
 8016ec4:	d923      	bls.n	8016f0e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8016ec6:	7dfa      	ldrb	r2, [r7, #23]
 8016ec8:	4926      	ldr	r1, [pc, #152]	; (8016f64 <etharp_output+0x200>)
 8016eca:	4613      	mov	r3, r2
 8016ecc:	005b      	lsls	r3, r3, #1
 8016ece:	4413      	add	r3, r2
 8016ed0:	00db      	lsls	r3, r3, #3
 8016ed2:	440b      	add	r3, r1
 8016ed4:	3308      	adds	r3, #8
 8016ed6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016ed8:	68fa      	ldr	r2, [r7, #12]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d117      	bne.n	8016f0e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	6819      	ldr	r1, [r3, #0]
 8016ee2:	7dfa      	ldrb	r2, [r7, #23]
 8016ee4:	481f      	ldr	r0, [pc, #124]	; (8016f64 <etharp_output+0x200>)
 8016ee6:	4613      	mov	r3, r2
 8016ee8:	005b      	lsls	r3, r3, #1
 8016eea:	4413      	add	r3, r2
 8016eec:	00db      	lsls	r3, r3, #3
 8016eee:	4403      	add	r3, r0
 8016ef0:	3304      	adds	r3, #4
 8016ef2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016ef4:	4299      	cmp	r1, r3
 8016ef6:	d10a      	bne.n	8016f0e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016ef8:	4a19      	ldr	r2, [pc, #100]	; (8016f60 <etharp_output+0x1fc>)
 8016efa:	7dfb      	ldrb	r3, [r7, #23]
 8016efc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8016efe:	7dfb      	ldrb	r3, [r7, #23]
 8016f00:	461a      	mov	r2, r3
 8016f02:	68b9      	ldr	r1, [r7, #8]
 8016f04:	68f8      	ldr	r0, [r7, #12]
 8016f06:	f7ff fe93 	bl	8016c30 <etharp_output_to_arp_index>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	e018      	b.n	8016f40 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8016f0e:	7dfb      	ldrb	r3, [r7, #23]
 8016f10:	3301      	adds	r3, #1
 8016f12:	75fb      	strb	r3, [r7, #23]
 8016f14:	7dfb      	ldrb	r3, [r7, #23]
 8016f16:	2b09      	cmp	r3, #9
 8016f18:	d9ca      	bls.n	8016eb0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8016f1a:	68ba      	ldr	r2, [r7, #8]
 8016f1c:	69b9      	ldr	r1, [r7, #24]
 8016f1e:	68f8      	ldr	r0, [r7, #12]
 8016f20:	f000 f822 	bl	8016f68 <etharp_query>
 8016f24:	4603      	mov	r3, r0
 8016f26:	e00b      	b.n	8016f40 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8016f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016f32:	9300      	str	r3, [sp, #0]
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	68b9      	ldr	r1, [r7, #8]
 8016f38:	68f8      	ldr	r0, [r7, #12]
 8016f3a:	f001 fd63 	bl	8018a04 <ethernet_output>
 8016f3e:	4603      	mov	r3, r0
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	3720      	adds	r7, #32
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bd80      	pop	{r7, pc}
 8016f48:	0801c9f4 	.word	0x0801c9f4
 8016f4c:	0801cb44 	.word	0x0801cb44
 8016f50:	0801ca6c 	.word	0x0801ca6c
 8016f54:	0801cb94 	.word	0x0801cb94
 8016f58:	0801cb34 	.word	0x0801cb34
 8016f5c:	0801f5cc 	.word	0x0801f5cc
 8016f60:	2000d060 	.word	0x2000d060
 8016f64:	2000cf70 	.word	0x2000cf70

08016f68 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016f68:	b580      	push	{r7, lr}
 8016f6a:	b08c      	sub	sp, #48	; 0x30
 8016f6c:	af02      	add	r7, sp, #8
 8016f6e:	60f8      	str	r0, [r7, #12]
 8016f70:	60b9      	str	r1, [r7, #8]
 8016f72:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	332a      	adds	r3, #42	; 0x2a
 8016f78:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8016f7a:	23ff      	movs	r3, #255	; 0xff
 8016f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8016f80:	2300      	movs	r3, #0
 8016f82:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	68f9      	ldr	r1, [r7, #12]
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f000 fe2c 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 8016f90:	4603      	mov	r3, r0
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d10c      	bne.n	8016fb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8016f9e:	2be0      	cmp	r3, #224	; 0xe0
 8016fa0:	d006      	beq.n	8016fb0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8016fa2:	68bb      	ldr	r3, [r7, #8]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d003      	beq.n	8016fb0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8016fa8:	68bb      	ldr	r3, [r7, #8]
 8016faa:	681b      	ldr	r3, [r3, #0]
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d102      	bne.n	8016fb6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8016fb0:	f06f 030f 	mvn.w	r3, #15
 8016fb4:	e101      	b.n	80171ba <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8016fb6:	68fa      	ldr	r2, [r7, #12]
 8016fb8:	2101      	movs	r1, #1
 8016fba:	68b8      	ldr	r0, [r7, #8]
 8016fbc:	f7ff fb5c 	bl	8016678 <etharp_find_entry>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8016fc4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	da02      	bge.n	8016fd2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8016fcc:	8a7b      	ldrh	r3, [r7, #18]
 8016fce:	b25b      	sxtb	r3, r3
 8016fd0:	e0f3      	b.n	80171ba <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016fd2:	8a7b      	ldrh	r3, [r7, #18]
 8016fd4:	2b7e      	cmp	r3, #126	; 0x7e
 8016fd6:	d906      	bls.n	8016fe6 <etharp_query+0x7e>
 8016fd8:	4b7a      	ldr	r3, [pc, #488]	; (80171c4 <etharp_query+0x25c>)
 8016fda:	f240 32c1 	movw	r2, #961	; 0x3c1
 8016fde:	497a      	ldr	r1, [pc, #488]	; (80171c8 <etharp_query+0x260>)
 8016fe0:	487a      	ldr	r0, [pc, #488]	; (80171cc <etharp_query+0x264>)
 8016fe2:	f001 ffeb 	bl	8018fbc <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016fe6:	8a7b      	ldrh	r3, [r7, #18]
 8016fe8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8016fea:	7c7a      	ldrb	r2, [r7, #17]
 8016fec:	4978      	ldr	r1, [pc, #480]	; (80171d0 <etharp_query+0x268>)
 8016fee:	4613      	mov	r3, r2
 8016ff0:	005b      	lsls	r3, r3, #1
 8016ff2:	4413      	add	r3, r2
 8016ff4:	00db      	lsls	r3, r3, #3
 8016ff6:	440b      	add	r3, r1
 8016ff8:	3314      	adds	r3, #20
 8016ffa:	781b      	ldrb	r3, [r3, #0]
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d115      	bne.n	801702c <etharp_query+0xc4>
    is_new_entry = 1;
 8017000:	2301      	movs	r3, #1
 8017002:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017004:	7c7a      	ldrb	r2, [r7, #17]
 8017006:	4972      	ldr	r1, [pc, #456]	; (80171d0 <etharp_query+0x268>)
 8017008:	4613      	mov	r3, r2
 801700a:	005b      	lsls	r3, r3, #1
 801700c:	4413      	add	r3, r2
 801700e:	00db      	lsls	r3, r3, #3
 8017010:	440b      	add	r3, r1
 8017012:	3314      	adds	r3, #20
 8017014:	2201      	movs	r2, #1
 8017016:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017018:	7c7a      	ldrb	r2, [r7, #17]
 801701a:	496d      	ldr	r1, [pc, #436]	; (80171d0 <etharp_query+0x268>)
 801701c:	4613      	mov	r3, r2
 801701e:	005b      	lsls	r3, r3, #1
 8017020:	4413      	add	r3, r2
 8017022:	00db      	lsls	r3, r3, #3
 8017024:	440b      	add	r3, r1
 8017026:	3308      	adds	r3, #8
 8017028:	68fa      	ldr	r2, [r7, #12]
 801702a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801702c:	7c7a      	ldrb	r2, [r7, #17]
 801702e:	4968      	ldr	r1, [pc, #416]	; (80171d0 <etharp_query+0x268>)
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	440b      	add	r3, r1
 801703a:	3314      	adds	r3, #20
 801703c:	781b      	ldrb	r3, [r3, #0]
 801703e:	2b01      	cmp	r3, #1
 8017040:	d011      	beq.n	8017066 <etharp_query+0xfe>
 8017042:	7c7a      	ldrb	r2, [r7, #17]
 8017044:	4962      	ldr	r1, [pc, #392]	; (80171d0 <etharp_query+0x268>)
 8017046:	4613      	mov	r3, r2
 8017048:	005b      	lsls	r3, r3, #1
 801704a:	4413      	add	r3, r2
 801704c:	00db      	lsls	r3, r3, #3
 801704e:	440b      	add	r3, r1
 8017050:	3314      	adds	r3, #20
 8017052:	781b      	ldrb	r3, [r3, #0]
 8017054:	2b01      	cmp	r3, #1
 8017056:	d806      	bhi.n	8017066 <etharp_query+0xfe>
 8017058:	4b5a      	ldr	r3, [pc, #360]	; (80171c4 <etharp_query+0x25c>)
 801705a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801705e:	495d      	ldr	r1, [pc, #372]	; (80171d4 <etharp_query+0x26c>)
 8017060:	485a      	ldr	r0, [pc, #360]	; (80171cc <etharp_query+0x264>)
 8017062:	f001 ffab 	bl	8018fbc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017066:	6a3b      	ldr	r3, [r7, #32]
 8017068:	2b00      	cmp	r3, #0
 801706a:	d102      	bne.n	8017072 <etharp_query+0x10a>
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d10c      	bne.n	801708c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017072:	68b9      	ldr	r1, [r7, #8]
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f000 f963 	bl	8017340 <etharp_request>
 801707a:	4603      	mov	r3, r0
 801707c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d102      	bne.n	801708c <etharp_query+0x124>
      return result;
 8017086:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801708a:	e096      	b.n	80171ba <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	2b00      	cmp	r3, #0
 8017090:	d106      	bne.n	80170a0 <etharp_query+0x138>
 8017092:	4b4c      	ldr	r3, [pc, #304]	; (80171c4 <etharp_query+0x25c>)
 8017094:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017098:	494f      	ldr	r1, [pc, #316]	; (80171d8 <etharp_query+0x270>)
 801709a:	484c      	ldr	r0, [pc, #304]	; (80171cc <etharp_query+0x264>)
 801709c:	f001 ff8e 	bl	8018fbc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80170a0:	7c7a      	ldrb	r2, [r7, #17]
 80170a2:	494b      	ldr	r1, [pc, #300]	; (80171d0 <etharp_query+0x268>)
 80170a4:	4613      	mov	r3, r2
 80170a6:	005b      	lsls	r3, r3, #1
 80170a8:	4413      	add	r3, r2
 80170aa:	00db      	lsls	r3, r3, #3
 80170ac:	440b      	add	r3, r1
 80170ae:	3314      	adds	r3, #20
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	2b01      	cmp	r3, #1
 80170b4:	d917      	bls.n	80170e6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80170b6:	4a49      	ldr	r2, [pc, #292]	; (80171dc <etharp_query+0x274>)
 80170b8:	7c7b      	ldrb	r3, [r7, #17]
 80170ba:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80170bc:	7c7a      	ldrb	r2, [r7, #17]
 80170be:	4613      	mov	r3, r2
 80170c0:	005b      	lsls	r3, r3, #1
 80170c2:	4413      	add	r3, r2
 80170c4:	00db      	lsls	r3, r3, #3
 80170c6:	3308      	adds	r3, #8
 80170c8:	4a41      	ldr	r2, [pc, #260]	; (80171d0 <etharp_query+0x268>)
 80170ca:	4413      	add	r3, r2
 80170cc:	3304      	adds	r3, #4
 80170ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80170d2:	9200      	str	r2, [sp, #0]
 80170d4:	697a      	ldr	r2, [r7, #20]
 80170d6:	6879      	ldr	r1, [r7, #4]
 80170d8:	68f8      	ldr	r0, [r7, #12]
 80170da:	f001 fc93 	bl	8018a04 <ethernet_output>
 80170de:	4603      	mov	r3, r0
 80170e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80170e4:	e067      	b.n	80171b6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80170e6:	7c7a      	ldrb	r2, [r7, #17]
 80170e8:	4939      	ldr	r1, [pc, #228]	; (80171d0 <etharp_query+0x268>)
 80170ea:	4613      	mov	r3, r2
 80170ec:	005b      	lsls	r3, r3, #1
 80170ee:	4413      	add	r3, r2
 80170f0:	00db      	lsls	r3, r3, #3
 80170f2:	440b      	add	r3, r1
 80170f4:	3314      	adds	r3, #20
 80170f6:	781b      	ldrb	r3, [r3, #0]
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	d15c      	bne.n	80171b6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80170fc:	2300      	movs	r3, #0
 80170fe:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017104:	e01c      	b.n	8017140 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017106:	69fb      	ldr	r3, [r7, #28]
 8017108:	895a      	ldrh	r2, [r3, #10]
 801710a:	69fb      	ldr	r3, [r7, #28]
 801710c:	891b      	ldrh	r3, [r3, #8]
 801710e:	429a      	cmp	r2, r3
 8017110:	d10a      	bne.n	8017128 <etharp_query+0x1c0>
 8017112:	69fb      	ldr	r3, [r7, #28]
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d006      	beq.n	8017128 <etharp_query+0x1c0>
 801711a:	4b2a      	ldr	r3, [pc, #168]	; (80171c4 <etharp_query+0x25c>)
 801711c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017120:	492f      	ldr	r1, [pc, #188]	; (80171e0 <etharp_query+0x278>)
 8017122:	482a      	ldr	r0, [pc, #168]	; (80171cc <etharp_query+0x264>)
 8017124:	f001 ff4a 	bl	8018fbc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017128:	69fb      	ldr	r3, [r7, #28]
 801712a:	7b1b      	ldrb	r3, [r3, #12]
 801712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017130:	2b00      	cmp	r3, #0
 8017132:	d002      	beq.n	801713a <etharp_query+0x1d2>
        copy_needed = 1;
 8017134:	2301      	movs	r3, #1
 8017136:	61bb      	str	r3, [r7, #24]
        break;
 8017138:	e005      	b.n	8017146 <etharp_query+0x1de>
      }
      p = p->next;
 801713a:	69fb      	ldr	r3, [r7, #28]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017140:	69fb      	ldr	r3, [r7, #28]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d1df      	bne.n	8017106 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017146:	69bb      	ldr	r3, [r7, #24]
 8017148:	2b00      	cmp	r3, #0
 801714a:	d007      	beq.n	801715c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801714c:	687a      	ldr	r2, [r7, #4]
 801714e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017152:	200e      	movs	r0, #14
 8017154:	f7f6 fc60 	bl	800da18 <pbuf_clone>
 8017158:	61f8      	str	r0, [r7, #28]
 801715a:	e004      	b.n	8017166 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017160:	69f8      	ldr	r0, [r7, #28]
 8017162:	f7f6 fa87 	bl	800d674 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017166:	69fb      	ldr	r3, [r7, #28]
 8017168:	2b00      	cmp	r3, #0
 801716a:	d021      	beq.n	80171b0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801716c:	7c7a      	ldrb	r2, [r7, #17]
 801716e:	4918      	ldr	r1, [pc, #96]	; (80171d0 <etharp_query+0x268>)
 8017170:	4613      	mov	r3, r2
 8017172:	005b      	lsls	r3, r3, #1
 8017174:	4413      	add	r3, r2
 8017176:	00db      	lsls	r3, r3, #3
 8017178:	440b      	add	r3, r1
 801717a:	681b      	ldr	r3, [r3, #0]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d00a      	beq.n	8017196 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017180:	7c7a      	ldrb	r2, [r7, #17]
 8017182:	4913      	ldr	r1, [pc, #76]	; (80171d0 <etharp_query+0x268>)
 8017184:	4613      	mov	r3, r2
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	4413      	add	r3, r2
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	440b      	add	r3, r1
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	4618      	mov	r0, r3
 8017192:	f7f6 f9c9 	bl	800d528 <pbuf_free>
      }
      arp_table[i].q = p;
 8017196:	7c7a      	ldrb	r2, [r7, #17]
 8017198:	490d      	ldr	r1, [pc, #52]	; (80171d0 <etharp_query+0x268>)
 801719a:	4613      	mov	r3, r2
 801719c:	005b      	lsls	r3, r3, #1
 801719e:	4413      	add	r3, r2
 80171a0:	00db      	lsls	r3, r3, #3
 80171a2:	440b      	add	r3, r1
 80171a4:	69fa      	ldr	r2, [r7, #28]
 80171a6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80171a8:	2300      	movs	r3, #0
 80171aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171ae:	e002      	b.n	80171b6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80171b0:	23ff      	movs	r3, #255	; 0xff
 80171b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80171b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80171ba:	4618      	mov	r0, r3
 80171bc:	3728      	adds	r7, #40	; 0x28
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}
 80171c2:	bf00      	nop
 80171c4:	0801c9f4 	.word	0x0801c9f4
 80171c8:	0801cba0 	.word	0x0801cba0
 80171cc:	0801ca6c 	.word	0x0801ca6c
 80171d0:	2000cf70 	.word	0x2000cf70
 80171d4:	0801cbb0 	.word	0x0801cbb0
 80171d8:	0801cb94 	.word	0x0801cb94
 80171dc:	2000d060 	.word	0x2000d060
 80171e0:	0801cbd8 	.word	0x0801cbd8

080171e4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b08a      	sub	sp, #40	; 0x28
 80171e8:	af02      	add	r7, sp, #8
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
 80171f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80171f2:	2300      	movs	r3, #0
 80171f4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	2b00      	cmp	r3, #0
 80171fa:	d106      	bne.n	801720a <etharp_raw+0x26>
 80171fc:	4b3a      	ldr	r3, [pc, #232]	; (80172e8 <etharp_raw+0x104>)
 80171fe:	f240 4257 	movw	r2, #1111	; 0x457
 8017202:	493a      	ldr	r1, [pc, #232]	; (80172ec <etharp_raw+0x108>)
 8017204:	483a      	ldr	r0, [pc, #232]	; (80172f0 <etharp_raw+0x10c>)
 8017206:	f001 fed9 	bl	8018fbc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801720a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801720e:	211c      	movs	r1, #28
 8017210:	200e      	movs	r0, #14
 8017212:	f7f5 fea5 	bl	800cf60 <pbuf_alloc>
 8017216:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017218:	69bb      	ldr	r3, [r7, #24]
 801721a:	2b00      	cmp	r3, #0
 801721c:	d102      	bne.n	8017224 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801721e:	f04f 33ff 	mov.w	r3, #4294967295
 8017222:	e05d      	b.n	80172e0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017224:	69bb      	ldr	r3, [r7, #24]
 8017226:	895b      	ldrh	r3, [r3, #10]
 8017228:	2b1b      	cmp	r3, #27
 801722a:	d806      	bhi.n	801723a <etharp_raw+0x56>
 801722c:	4b2e      	ldr	r3, [pc, #184]	; (80172e8 <etharp_raw+0x104>)
 801722e:	f240 4262 	movw	r2, #1122	; 0x462
 8017232:	4930      	ldr	r1, [pc, #192]	; (80172f4 <etharp_raw+0x110>)
 8017234:	482e      	ldr	r0, [pc, #184]	; (80172f0 <etharp_raw+0x10c>)
 8017236:	f001 fec1 	bl	8018fbc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801723a:	69bb      	ldr	r3, [r7, #24]
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017240:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017242:	4618      	mov	r0, r3
 8017244:	f7f4 fd3c 	bl	800bcc0 <lwip_htons>
 8017248:	4603      	mov	r3, r0
 801724a:	461a      	mov	r2, r3
 801724c:	697b      	ldr	r3, [r7, #20]
 801724e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017256:	2b06      	cmp	r3, #6
 8017258:	d006      	beq.n	8017268 <etharp_raw+0x84>
 801725a:	4b23      	ldr	r3, [pc, #140]	; (80172e8 <etharp_raw+0x104>)
 801725c:	f240 4269 	movw	r2, #1129	; 0x469
 8017260:	4925      	ldr	r1, [pc, #148]	; (80172f8 <etharp_raw+0x114>)
 8017262:	4823      	ldr	r0, [pc, #140]	; (80172f0 <etharp_raw+0x10c>)
 8017264:	f001 feaa 	bl	8018fbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017268:	697b      	ldr	r3, [r7, #20]
 801726a:	3308      	adds	r3, #8
 801726c:	2206      	movs	r2, #6
 801726e:	6839      	ldr	r1, [r7, #0]
 8017270:	4618      	mov	r0, r3
 8017272:	f001 ffa1 	bl	80191b8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017276:	697b      	ldr	r3, [r7, #20]
 8017278:	3312      	adds	r3, #18
 801727a:	2206      	movs	r2, #6
 801727c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801727e:	4618      	mov	r0, r3
 8017280:	f001 ff9a 	bl	80191b8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017284:	697b      	ldr	r3, [r7, #20]
 8017286:	330e      	adds	r3, #14
 8017288:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801728a:	6812      	ldr	r2, [r2, #0]
 801728c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801728e:	697b      	ldr	r3, [r7, #20]
 8017290:	3318      	adds	r3, #24
 8017292:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017294:	6812      	ldr	r2, [r2, #0]
 8017296:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	2200      	movs	r2, #0
 801729c:	701a      	strb	r2, [r3, #0]
 801729e:	2200      	movs	r2, #0
 80172a0:	f042 0201 	orr.w	r2, r2, #1
 80172a4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80172a6:	697b      	ldr	r3, [r7, #20]
 80172a8:	2200      	movs	r2, #0
 80172aa:	f042 0208 	orr.w	r2, r2, #8
 80172ae:	709a      	strb	r2, [r3, #2]
 80172b0:	2200      	movs	r2, #0
 80172b2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80172b4:	697b      	ldr	r3, [r7, #20]
 80172b6:	2206      	movs	r2, #6
 80172b8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80172ba:	697b      	ldr	r3, [r7, #20]
 80172bc:	2204      	movs	r2, #4
 80172be:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80172c0:	f640 0306 	movw	r3, #2054	; 0x806
 80172c4:	9300      	str	r3, [sp, #0]
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	68ba      	ldr	r2, [r7, #8]
 80172ca:	69b9      	ldr	r1, [r7, #24]
 80172cc:	68f8      	ldr	r0, [r7, #12]
 80172ce:	f001 fb99 	bl	8018a04 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80172d2:	69b8      	ldr	r0, [r7, #24]
 80172d4:	f7f6 f928 	bl	800d528 <pbuf_free>
  p = NULL;
 80172d8:	2300      	movs	r3, #0
 80172da:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80172dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80172e0:	4618      	mov	r0, r3
 80172e2:	3720      	adds	r7, #32
 80172e4:	46bd      	mov	sp, r7
 80172e6:	bd80      	pop	{r7, pc}
 80172e8:	0801c9f4 	.word	0x0801c9f4
 80172ec:	0801cb44 	.word	0x0801cb44
 80172f0:	0801ca6c 	.word	0x0801ca6c
 80172f4:	0801cbf4 	.word	0x0801cbf4
 80172f8:	0801cc28 	.word	0x0801cc28

080172fc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80172fc:	b580      	push	{r7, lr}
 80172fe:	b088      	sub	sp, #32
 8017300:	af04      	add	r7, sp, #16
 8017302:	60f8      	str	r0, [r7, #12]
 8017304:	60b9      	str	r1, [r7, #8]
 8017306:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017308:	68fb      	ldr	r3, [r7, #12]
 801730a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017318:	2201      	movs	r2, #1
 801731a:	9203      	str	r2, [sp, #12]
 801731c:	68ba      	ldr	r2, [r7, #8]
 801731e:	9202      	str	r2, [sp, #8]
 8017320:	4a06      	ldr	r2, [pc, #24]	; (801733c <etharp_request_dst+0x40>)
 8017322:	9201      	str	r2, [sp, #4]
 8017324:	9300      	str	r3, [sp, #0]
 8017326:	4603      	mov	r3, r0
 8017328:	687a      	ldr	r2, [r7, #4]
 801732a:	68f8      	ldr	r0, [r7, #12]
 801732c:	f7ff ff5a 	bl	80171e4 <etharp_raw>
 8017330:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017332:	4618      	mov	r0, r3
 8017334:	3710      	adds	r7, #16
 8017336:	46bd      	mov	sp, r7
 8017338:	bd80      	pop	{r7, pc}
 801733a:	bf00      	nop
 801733c:	0801f5d4 	.word	0x0801f5d4

08017340 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017340:	b580      	push	{r7, lr}
 8017342:	b082      	sub	sp, #8
 8017344:	af00      	add	r7, sp, #0
 8017346:	6078      	str	r0, [r7, #4]
 8017348:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801734a:	4a05      	ldr	r2, [pc, #20]	; (8017360 <etharp_request+0x20>)
 801734c:	6839      	ldr	r1, [r7, #0]
 801734e:	6878      	ldr	r0, [r7, #4]
 8017350:	f7ff ffd4 	bl	80172fc <etharp_request_dst>
 8017354:	4603      	mov	r3, r0
}
 8017356:	4618      	mov	r0, r3
 8017358:	3708      	adds	r7, #8
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}
 801735e:	bf00      	nop
 8017360:	0801f5cc 	.word	0x0801f5cc

08017364 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017364:	b580      	push	{r7, lr}
 8017366:	b08e      	sub	sp, #56	; 0x38
 8017368:	af04      	add	r7, sp, #16
 801736a:	6078      	str	r0, [r7, #4]
 801736c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801736e:	4b79      	ldr	r3, [pc, #484]	; (8017554 <icmp_input+0x1f0>)
 8017370:	689b      	ldr	r3, [r3, #8]
 8017372:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	f003 030f 	and.w	r3, r3, #15
 801737c:	b2db      	uxtb	r3, r3
 801737e:	009b      	lsls	r3, r3, #2
 8017380:	b2db      	uxtb	r3, r3
 8017382:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017384:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017386:	2b13      	cmp	r3, #19
 8017388:	f240 80cd 	bls.w	8017526 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	895b      	ldrh	r3, [r3, #10]
 8017390:	2b03      	cmp	r3, #3
 8017392:	f240 80ca 	bls.w	801752a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	685b      	ldr	r3, [r3, #4]
 801739a:	781b      	ldrb	r3, [r3, #0]
 801739c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80173a0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	f000 80b7 	beq.w	8017518 <icmp_input+0x1b4>
 80173aa:	2b08      	cmp	r3, #8
 80173ac:	f040 80b7 	bne.w	801751e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80173b0:	4b69      	ldr	r3, [pc, #420]	; (8017558 <icmp_input+0x1f4>)
 80173b2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80173b4:	4b67      	ldr	r3, [pc, #412]	; (8017554 <icmp_input+0x1f0>)
 80173b6:	695b      	ldr	r3, [r3, #20]
 80173b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80173bc:	2be0      	cmp	r3, #224	; 0xe0
 80173be:	f000 80bb 	beq.w	8017538 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80173c2:	4b64      	ldr	r3, [pc, #400]	; (8017554 <icmp_input+0x1f0>)
 80173c4:	695b      	ldr	r3, [r3, #20]
 80173c6:	4a63      	ldr	r2, [pc, #396]	; (8017554 <icmp_input+0x1f0>)
 80173c8:	6812      	ldr	r2, [r2, #0]
 80173ca:	4611      	mov	r1, r2
 80173cc:	4618      	mov	r0, r3
 80173ce:	f000 fc0b 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 80173d2:	4603      	mov	r3, r0
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	f040 80b1 	bne.w	801753c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	891b      	ldrh	r3, [r3, #8]
 80173de:	2b07      	cmp	r3, #7
 80173e0:	f240 80a5 	bls.w	801752e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80173e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173e6:	330e      	adds	r3, #14
 80173e8:	4619      	mov	r1, r3
 80173ea:	6878      	ldr	r0, [r7, #4]
 80173ec:	f7f6 f806 	bl	800d3fc <pbuf_add_header>
 80173f0:	4603      	mov	r3, r0
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d04b      	beq.n	801748e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	891a      	ldrh	r2, [r3, #8]
 80173fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80173fc:	4413      	add	r3, r2
 80173fe:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	891b      	ldrh	r3, [r3, #8]
 8017404:	8b7a      	ldrh	r2, [r7, #26]
 8017406:	429a      	cmp	r2, r3
 8017408:	f0c0 809a 	bcc.w	8017540 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801740c:	8b7b      	ldrh	r3, [r7, #26]
 801740e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017412:	4619      	mov	r1, r3
 8017414:	200e      	movs	r0, #14
 8017416:	f7f5 fda3 	bl	800cf60 <pbuf_alloc>
 801741a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	2b00      	cmp	r3, #0
 8017420:	f000 8090 	beq.w	8017544 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017424:	697b      	ldr	r3, [r7, #20]
 8017426:	895b      	ldrh	r3, [r3, #10]
 8017428:	461a      	mov	r2, r3
 801742a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801742c:	3308      	adds	r3, #8
 801742e:	429a      	cmp	r2, r3
 8017430:	d203      	bcs.n	801743a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017432:	6978      	ldr	r0, [r7, #20]
 8017434:	f7f6 f878 	bl	800d528 <pbuf_free>
          goto icmperr;
 8017438:	e085      	b.n	8017546 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801743a:	697b      	ldr	r3, [r7, #20]
 801743c:	685b      	ldr	r3, [r3, #4]
 801743e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017442:	4618      	mov	r0, r3
 8017444:	f001 feb8 	bl	80191b8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801744a:	4619      	mov	r1, r3
 801744c:	6978      	ldr	r0, [r7, #20]
 801744e:	f7f5 ffe5 	bl	800d41c <pbuf_remove_header>
 8017452:	4603      	mov	r3, r0
 8017454:	2b00      	cmp	r3, #0
 8017456:	d009      	beq.n	801746c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017458:	4b40      	ldr	r3, [pc, #256]	; (801755c <icmp_input+0x1f8>)
 801745a:	22b6      	movs	r2, #182	; 0xb6
 801745c:	4940      	ldr	r1, [pc, #256]	; (8017560 <icmp_input+0x1fc>)
 801745e:	4841      	ldr	r0, [pc, #260]	; (8017564 <icmp_input+0x200>)
 8017460:	f001 fdac 	bl	8018fbc <iprintf>
          pbuf_free(r);
 8017464:	6978      	ldr	r0, [r7, #20]
 8017466:	f7f6 f85f 	bl	800d528 <pbuf_free>
          goto icmperr;
 801746a:	e06c      	b.n	8017546 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801746c:	6879      	ldr	r1, [r7, #4]
 801746e:	6978      	ldr	r0, [r7, #20]
 8017470:	f7f6 f98e 	bl	800d790 <pbuf_copy>
 8017474:	4603      	mov	r3, r0
 8017476:	2b00      	cmp	r3, #0
 8017478:	d003      	beq.n	8017482 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801747a:	6978      	ldr	r0, [r7, #20]
 801747c:	f7f6 f854 	bl	800d528 <pbuf_free>
          goto icmperr;
 8017480:	e061      	b.n	8017546 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8017482:	6878      	ldr	r0, [r7, #4]
 8017484:	f7f6 f850 	bl	800d528 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	607b      	str	r3, [r7, #4]
 801748c:	e00f      	b.n	80174ae <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801748e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017490:	330e      	adds	r3, #14
 8017492:	4619      	mov	r1, r3
 8017494:	6878      	ldr	r0, [r7, #4]
 8017496:	f7f5 ffc1 	bl	800d41c <pbuf_remove_header>
 801749a:	4603      	mov	r3, r0
 801749c:	2b00      	cmp	r3, #0
 801749e:	d006      	beq.n	80174ae <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80174a0:	4b2e      	ldr	r3, [pc, #184]	; (801755c <icmp_input+0x1f8>)
 80174a2:	22c7      	movs	r2, #199	; 0xc7
 80174a4:	4930      	ldr	r1, [pc, #192]	; (8017568 <icmp_input+0x204>)
 80174a6:	482f      	ldr	r0, [pc, #188]	; (8017564 <icmp_input+0x200>)
 80174a8:	f001 fd88 	bl	8018fbc <iprintf>
          goto icmperr;
 80174ac:	e04b      	b.n	8017546 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	685b      	ldr	r3, [r3, #4]
 80174b2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80174b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80174b6:	4619      	mov	r1, r3
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f7f5 ff9f 	bl	800d3fc <pbuf_add_header>
 80174be:	4603      	mov	r3, r0
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d12b      	bne.n	801751c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	685b      	ldr	r3, [r3, #4]
 80174c8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80174ca:	69fb      	ldr	r3, [r7, #28]
 80174cc:	681a      	ldr	r2, [r3, #0]
 80174ce:	68fb      	ldr	r3, [r7, #12]
 80174d0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80174d2:	4b20      	ldr	r3, [pc, #128]	; (8017554 <icmp_input+0x1f0>)
 80174d4:	691a      	ldr	r2, [r3, #16]
 80174d6:	68fb      	ldr	r3, [r7, #12]
 80174d8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80174da:	693b      	ldr	r3, [r7, #16]
 80174dc:	2200      	movs	r2, #0
 80174de:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80174e0:	693b      	ldr	r3, [r7, #16]
 80174e2:	2200      	movs	r2, #0
 80174e4:	709a      	strb	r2, [r3, #2]
 80174e6:	2200      	movs	r2, #0
 80174e8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80174ea:	68fb      	ldr	r3, [r7, #12]
 80174ec:	22ff      	movs	r2, #255	; 0xff
 80174ee:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	2200      	movs	r2, #0
 80174f4:	729a      	strb	r2, [r3, #10]
 80174f6:	2200      	movs	r2, #0
 80174f8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80174fa:	683b      	ldr	r3, [r7, #0]
 80174fc:	9302      	str	r3, [sp, #8]
 80174fe:	2301      	movs	r3, #1
 8017500:	9301      	str	r3, [sp, #4]
 8017502:	2300      	movs	r3, #0
 8017504:	9300      	str	r3, [sp, #0]
 8017506:	23ff      	movs	r3, #255	; 0xff
 8017508:	2200      	movs	r2, #0
 801750a:	69f9      	ldr	r1, [r7, #28]
 801750c:	6878      	ldr	r0, [r7, #4]
 801750e:	f000 fa93 	bl	8017a38 <ip4_output_if>
 8017512:	4603      	mov	r3, r0
 8017514:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017516:	e001      	b.n	801751c <icmp_input+0x1b8>
      break;
 8017518:	bf00      	nop
 801751a:	e000      	b.n	801751e <icmp_input+0x1ba>
      break;
 801751c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801751e:	6878      	ldr	r0, [r7, #4]
 8017520:	f7f6 f802 	bl	800d528 <pbuf_free>
  return;
 8017524:	e013      	b.n	801754e <icmp_input+0x1ea>
    goto lenerr;
 8017526:	bf00      	nop
 8017528:	e002      	b.n	8017530 <icmp_input+0x1cc>
    goto lenerr;
 801752a:	bf00      	nop
 801752c:	e000      	b.n	8017530 <icmp_input+0x1cc>
        goto lenerr;
 801752e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017530:	6878      	ldr	r0, [r7, #4]
 8017532:	f7f5 fff9 	bl	800d528 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017536:	e00a      	b.n	801754e <icmp_input+0x1ea>
        goto icmperr;
 8017538:	bf00      	nop
 801753a:	e004      	b.n	8017546 <icmp_input+0x1e2>
        goto icmperr;
 801753c:	bf00      	nop
 801753e:	e002      	b.n	8017546 <icmp_input+0x1e2>
          goto icmperr;
 8017540:	bf00      	nop
 8017542:	e000      	b.n	8017546 <icmp_input+0x1e2>
          goto icmperr;
 8017544:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017546:	6878      	ldr	r0, [r7, #4]
 8017548:	f7f5 ffee 	bl	800d528 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801754c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801754e:	3728      	adds	r7, #40	; 0x28
 8017550:	46bd      	mov	sp, r7
 8017552:	bd80      	pop	{r7, pc}
 8017554:	20009768 	.word	0x20009768
 8017558:	2000977c 	.word	0x2000977c
 801755c:	0801cc6c 	.word	0x0801cc6c
 8017560:	0801cca4 	.word	0x0801cca4
 8017564:	0801ccdc 	.word	0x0801ccdc
 8017568:	0801cd04 	.word	0x0801cd04

0801756c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801756c:	b580      	push	{r7, lr}
 801756e:	b082      	sub	sp, #8
 8017570:	af00      	add	r7, sp, #0
 8017572:	6078      	str	r0, [r7, #4]
 8017574:	460b      	mov	r3, r1
 8017576:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017578:	78fb      	ldrb	r3, [r7, #3]
 801757a:	461a      	mov	r2, r3
 801757c:	2103      	movs	r1, #3
 801757e:	6878      	ldr	r0, [r7, #4]
 8017580:	f000 f814 	bl	80175ac <icmp_send_response>
}
 8017584:	bf00      	nop
 8017586:	3708      	adds	r7, #8
 8017588:	46bd      	mov	sp, r7
 801758a:	bd80      	pop	{r7, pc}

0801758c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801758c:	b580      	push	{r7, lr}
 801758e:	b082      	sub	sp, #8
 8017590:	af00      	add	r7, sp, #0
 8017592:	6078      	str	r0, [r7, #4]
 8017594:	460b      	mov	r3, r1
 8017596:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017598:	78fb      	ldrb	r3, [r7, #3]
 801759a:	461a      	mov	r2, r3
 801759c:	210b      	movs	r1, #11
 801759e:	6878      	ldr	r0, [r7, #4]
 80175a0:	f000 f804 	bl	80175ac <icmp_send_response>
}
 80175a4:	bf00      	nop
 80175a6:	3708      	adds	r7, #8
 80175a8:	46bd      	mov	sp, r7
 80175aa:	bd80      	pop	{r7, pc}

080175ac <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	b08c      	sub	sp, #48	; 0x30
 80175b0:	af04      	add	r7, sp, #16
 80175b2:	6078      	str	r0, [r7, #4]
 80175b4:	460b      	mov	r3, r1
 80175b6:	70fb      	strb	r3, [r7, #3]
 80175b8:	4613      	mov	r3, r2
 80175ba:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80175bc:	f44f 7220 	mov.w	r2, #640	; 0x280
 80175c0:	2124      	movs	r1, #36	; 0x24
 80175c2:	2022      	movs	r0, #34	; 0x22
 80175c4:	f7f5 fccc 	bl	800cf60 <pbuf_alloc>
 80175c8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80175ca:	69fb      	ldr	r3, [r7, #28]
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d04c      	beq.n	801766a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80175d0:	69fb      	ldr	r3, [r7, #28]
 80175d2:	895b      	ldrh	r3, [r3, #10]
 80175d4:	2b23      	cmp	r3, #35	; 0x23
 80175d6:	d806      	bhi.n	80175e6 <icmp_send_response+0x3a>
 80175d8:	4b26      	ldr	r3, [pc, #152]	; (8017674 <icmp_send_response+0xc8>)
 80175da:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80175de:	4926      	ldr	r1, [pc, #152]	; (8017678 <icmp_send_response+0xcc>)
 80175e0:	4826      	ldr	r0, [pc, #152]	; (801767c <icmp_send_response+0xd0>)
 80175e2:	f001 fceb 	bl	8018fbc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	685b      	ldr	r3, [r3, #4]
 80175ea:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80175ec:	69fb      	ldr	r3, [r7, #28]
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80175f2:	697b      	ldr	r3, [r7, #20]
 80175f4:	78fa      	ldrb	r2, [r7, #3]
 80175f6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80175f8:	697b      	ldr	r3, [r7, #20]
 80175fa:	78ba      	ldrb	r2, [r7, #2]
 80175fc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80175fe:	697b      	ldr	r3, [r7, #20]
 8017600:	2200      	movs	r2, #0
 8017602:	711a      	strb	r2, [r3, #4]
 8017604:	2200      	movs	r2, #0
 8017606:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8017608:	697b      	ldr	r3, [r7, #20]
 801760a:	2200      	movs	r2, #0
 801760c:	719a      	strb	r2, [r3, #6]
 801760e:	2200      	movs	r2, #0
 8017610:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8017612:	69fb      	ldr	r3, [r7, #28]
 8017614:	685b      	ldr	r3, [r3, #4]
 8017616:	f103 0008 	add.w	r0, r3, #8
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	685b      	ldr	r3, [r3, #4]
 801761e:	221c      	movs	r2, #28
 8017620:	4619      	mov	r1, r3
 8017622:	f001 fdc9 	bl	80191b8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8017626:	69bb      	ldr	r3, [r7, #24]
 8017628:	68db      	ldr	r3, [r3, #12]
 801762a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801762c:	f107 030c 	add.w	r3, r7, #12
 8017630:	4618      	mov	r0, r3
 8017632:	f000 f825 	bl	8017680 <ip4_route>
 8017636:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8017638:	693b      	ldr	r3, [r7, #16]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d011      	beq.n	8017662 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	2200      	movs	r2, #0
 8017642:	709a      	strb	r2, [r3, #2]
 8017644:	2200      	movs	r2, #0
 8017646:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8017648:	f107 020c 	add.w	r2, r7, #12
 801764c:	693b      	ldr	r3, [r7, #16]
 801764e:	9302      	str	r3, [sp, #8]
 8017650:	2301      	movs	r3, #1
 8017652:	9301      	str	r3, [sp, #4]
 8017654:	2300      	movs	r3, #0
 8017656:	9300      	str	r3, [sp, #0]
 8017658:	23ff      	movs	r3, #255	; 0xff
 801765a:	2100      	movs	r1, #0
 801765c:	69f8      	ldr	r0, [r7, #28]
 801765e:	f000 f9eb 	bl	8017a38 <ip4_output_if>
  }
  pbuf_free(q);
 8017662:	69f8      	ldr	r0, [r7, #28]
 8017664:	f7f5 ff60 	bl	800d528 <pbuf_free>
 8017668:	e000      	b.n	801766c <icmp_send_response+0xc0>
    return;
 801766a:	bf00      	nop
}
 801766c:	3720      	adds	r7, #32
 801766e:	46bd      	mov	sp, r7
 8017670:	bd80      	pop	{r7, pc}
 8017672:	bf00      	nop
 8017674:	0801cc6c 	.word	0x0801cc6c
 8017678:	0801cd38 	.word	0x0801cd38
 801767c:	0801ccdc 	.word	0x0801ccdc

08017680 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8017680:	b480      	push	{r7}
 8017682:	b085      	sub	sp, #20
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8017688:	4b33      	ldr	r3, [pc, #204]	; (8017758 <ip4_route+0xd8>)
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	60fb      	str	r3, [r7, #12]
 801768e:	e036      	b.n	80176fe <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017696:	f003 0301 	and.w	r3, r3, #1
 801769a:	b2db      	uxtb	r3, r3
 801769c:	2b00      	cmp	r3, #0
 801769e:	d02b      	beq.n	80176f8 <ip4_route+0x78>
 80176a0:	68fb      	ldr	r3, [r7, #12]
 80176a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176a6:	089b      	lsrs	r3, r3, #2
 80176a8:	f003 0301 	and.w	r3, r3, #1
 80176ac:	b2db      	uxtb	r3, r3
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d022      	beq.n	80176f8 <ip4_route+0x78>
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	3304      	adds	r3, #4
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d01d      	beq.n	80176f8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681a      	ldr	r2, [r3, #0]
 80176c0:	68fb      	ldr	r3, [r7, #12]
 80176c2:	3304      	adds	r3, #4
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	405a      	eors	r2, r3
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	3308      	adds	r3, #8
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	4013      	ands	r3, r2
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d101      	bne.n	80176d8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80176d4:	68fb      	ldr	r3, [r7, #12]
 80176d6:	e038      	b.n	801774a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80176d8:	68fb      	ldr	r3, [r7, #12]
 80176da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80176de:	f003 0302 	and.w	r3, r3, #2
 80176e2:	2b00      	cmp	r3, #0
 80176e4:	d108      	bne.n	80176f8 <ip4_route+0x78>
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	681a      	ldr	r2, [r3, #0]
 80176ea:	68fb      	ldr	r3, [r7, #12]
 80176ec:	330c      	adds	r3, #12
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	429a      	cmp	r2, r3
 80176f2:	d101      	bne.n	80176f8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80176f4:	68fb      	ldr	r3, [r7, #12]
 80176f6:	e028      	b.n	801774a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80176f8:	68fb      	ldr	r3, [r7, #12]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	60fb      	str	r3, [r7, #12]
 80176fe:	68fb      	ldr	r3, [r7, #12]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d1c5      	bne.n	8017690 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017704:	4b15      	ldr	r3, [pc, #84]	; (801775c <ip4_route+0xdc>)
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d01a      	beq.n	8017742 <ip4_route+0xc2>
 801770c:	4b13      	ldr	r3, [pc, #76]	; (801775c <ip4_route+0xdc>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017714:	f003 0301 	and.w	r3, r3, #1
 8017718:	2b00      	cmp	r3, #0
 801771a:	d012      	beq.n	8017742 <ip4_route+0xc2>
 801771c:	4b0f      	ldr	r3, [pc, #60]	; (801775c <ip4_route+0xdc>)
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017724:	f003 0304 	and.w	r3, r3, #4
 8017728:	2b00      	cmp	r3, #0
 801772a:	d00a      	beq.n	8017742 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801772c:	4b0b      	ldr	r3, [pc, #44]	; (801775c <ip4_route+0xdc>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	3304      	adds	r3, #4
 8017732:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8017734:	2b00      	cmp	r3, #0
 8017736:	d004      	beq.n	8017742 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	681b      	ldr	r3, [r3, #0]
 801773c:	b2db      	uxtb	r3, r3
 801773e:	2b7f      	cmp	r3, #127	; 0x7f
 8017740:	d101      	bne.n	8017746 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8017742:	2300      	movs	r3, #0
 8017744:	e001      	b.n	801774a <ip4_route+0xca>
  }

  return netif_default;
 8017746:	4b05      	ldr	r3, [pc, #20]	; (801775c <ip4_route+0xdc>)
 8017748:	681b      	ldr	r3, [r3, #0]
}
 801774a:	4618      	mov	r0, r3
 801774c:	3714      	adds	r7, #20
 801774e:	46bd      	mov	sp, r7
 8017750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017754:	4770      	bx	lr
 8017756:	bf00      	nop
 8017758:	2000ced0 	.word	0x2000ced0
 801775c:	2000ced4 	.word	0x2000ced4

08017760 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b082      	sub	sp, #8
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801776e:	f003 0301 	and.w	r3, r3, #1
 8017772:	b2db      	uxtb	r3, r3
 8017774:	2b00      	cmp	r3, #0
 8017776:	d016      	beq.n	80177a6 <ip4_input_accept+0x46>
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	3304      	adds	r3, #4
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d011      	beq.n	80177a6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8017782:	4b0b      	ldr	r3, [pc, #44]	; (80177b0 <ip4_input_accept+0x50>)
 8017784:	695a      	ldr	r2, [r3, #20]
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	3304      	adds	r3, #4
 801778a:	681b      	ldr	r3, [r3, #0]
 801778c:	429a      	cmp	r2, r3
 801778e:	d008      	beq.n	80177a2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8017790:	4b07      	ldr	r3, [pc, #28]	; (80177b0 <ip4_input_accept+0x50>)
 8017792:	695b      	ldr	r3, [r3, #20]
 8017794:	6879      	ldr	r1, [r7, #4]
 8017796:	4618      	mov	r0, r3
 8017798:	f000 fa26 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 801779c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d001      	beq.n	80177a6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80177a2:	2301      	movs	r3, #1
 80177a4:	e000      	b.n	80177a8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80177a6:	2300      	movs	r3, #0
}
 80177a8:	4618      	mov	r0, r3
 80177aa:	3708      	adds	r7, #8
 80177ac:	46bd      	mov	sp, r7
 80177ae:	bd80      	pop	{r7, pc}
 80177b0:	20009768 	.word	0x20009768

080177b4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b088      	sub	sp, #32
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
 80177bc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80177be:	2301      	movs	r3, #1
 80177c0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	685b      	ldr	r3, [r3, #4]
 80177c6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80177c8:	69fb      	ldr	r3, [r7, #28]
 80177ca:	781b      	ldrb	r3, [r3, #0]
 80177cc:	091b      	lsrs	r3, r3, #4
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	2b04      	cmp	r3, #4
 80177d2:	d004      	beq.n	80177de <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80177d4:	6878      	ldr	r0, [r7, #4]
 80177d6:	f7f5 fea7 	bl	800d528 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80177da:	2300      	movs	r3, #0
 80177dc:	e123      	b.n	8017a26 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80177de:	69fb      	ldr	r3, [r7, #28]
 80177e0:	781b      	ldrb	r3, [r3, #0]
 80177e2:	f003 030f 	and.w	r3, r3, #15
 80177e6:	b2db      	uxtb	r3, r3
 80177e8:	009b      	lsls	r3, r3, #2
 80177ea:	b2db      	uxtb	r3, r3
 80177ec:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80177ee:	69fb      	ldr	r3, [r7, #28]
 80177f0:	885b      	ldrh	r3, [r3, #2]
 80177f2:	b29b      	uxth	r3, r3
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7f4 fa63 	bl	800bcc0 <lwip_htons>
 80177fa:	4603      	mov	r3, r0
 80177fc:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	891b      	ldrh	r3, [r3, #8]
 8017802:	8a3a      	ldrh	r2, [r7, #16]
 8017804:	429a      	cmp	r2, r3
 8017806:	d204      	bcs.n	8017812 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8017808:	8a3b      	ldrh	r3, [r7, #16]
 801780a:	4619      	mov	r1, r3
 801780c:	6878      	ldr	r0, [r7, #4]
 801780e:	f7f5 fd05 	bl	800d21c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	895b      	ldrh	r3, [r3, #10]
 8017816:	8a7a      	ldrh	r2, [r7, #18]
 8017818:	429a      	cmp	r2, r3
 801781a:	d807      	bhi.n	801782c <ip4_input+0x78>
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	891b      	ldrh	r3, [r3, #8]
 8017820:	8a3a      	ldrh	r2, [r7, #16]
 8017822:	429a      	cmp	r2, r3
 8017824:	d802      	bhi.n	801782c <ip4_input+0x78>
 8017826:	8a7b      	ldrh	r3, [r7, #18]
 8017828:	2b13      	cmp	r3, #19
 801782a:	d804      	bhi.n	8017836 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801782c:	6878      	ldr	r0, [r7, #4]
 801782e:	f7f5 fe7b 	bl	800d528 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8017832:	2300      	movs	r3, #0
 8017834:	e0f7      	b.n	8017a26 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8017836:	69fb      	ldr	r3, [r7, #28]
 8017838:	691b      	ldr	r3, [r3, #16]
 801783a:	4a7d      	ldr	r2, [pc, #500]	; (8017a30 <ip4_input+0x27c>)
 801783c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801783e:	69fb      	ldr	r3, [r7, #28]
 8017840:	68db      	ldr	r3, [r3, #12]
 8017842:	4a7b      	ldr	r2, [pc, #492]	; (8017a30 <ip4_input+0x27c>)
 8017844:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017846:	4b7a      	ldr	r3, [pc, #488]	; (8017a30 <ip4_input+0x27c>)
 8017848:	695b      	ldr	r3, [r3, #20]
 801784a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801784e:	2be0      	cmp	r3, #224	; 0xe0
 8017850:	d112      	bne.n	8017878 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017858:	f003 0301 	and.w	r3, r3, #1
 801785c:	b2db      	uxtb	r3, r3
 801785e:	2b00      	cmp	r3, #0
 8017860:	d007      	beq.n	8017872 <ip4_input+0xbe>
 8017862:	683b      	ldr	r3, [r7, #0]
 8017864:	3304      	adds	r3, #4
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	2b00      	cmp	r3, #0
 801786a:	d002      	beq.n	8017872 <ip4_input+0xbe>
      netif = inp;
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	61bb      	str	r3, [r7, #24]
 8017870:	e02a      	b.n	80178c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8017872:	2300      	movs	r3, #0
 8017874:	61bb      	str	r3, [r7, #24]
 8017876:	e027      	b.n	80178c8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8017878:	6838      	ldr	r0, [r7, #0]
 801787a:	f7ff ff71 	bl	8017760 <ip4_input_accept>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	d002      	beq.n	801788a <ip4_input+0xd6>
      netif = inp;
 8017884:	683b      	ldr	r3, [r7, #0]
 8017886:	61bb      	str	r3, [r7, #24]
 8017888:	e01e      	b.n	80178c8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801788a:	2300      	movs	r3, #0
 801788c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801788e:	4b68      	ldr	r3, [pc, #416]	; (8017a30 <ip4_input+0x27c>)
 8017890:	695b      	ldr	r3, [r3, #20]
 8017892:	b2db      	uxtb	r3, r3
 8017894:	2b7f      	cmp	r3, #127	; 0x7f
 8017896:	d017      	beq.n	80178c8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8017898:	4b66      	ldr	r3, [pc, #408]	; (8017a34 <ip4_input+0x280>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	61bb      	str	r3, [r7, #24]
 801789e:	e00e      	b.n	80178be <ip4_input+0x10a>
          if (netif == inp) {
 80178a0:	69ba      	ldr	r2, [r7, #24]
 80178a2:	683b      	ldr	r3, [r7, #0]
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d006      	beq.n	80178b6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80178a8:	69b8      	ldr	r0, [r7, #24]
 80178aa:	f7ff ff59 	bl	8017760 <ip4_input_accept>
 80178ae:	4603      	mov	r3, r0
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d108      	bne.n	80178c6 <ip4_input+0x112>
 80178b4:	e000      	b.n	80178b8 <ip4_input+0x104>
            continue;
 80178b6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80178b8:	69bb      	ldr	r3, [r7, #24]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	61bb      	str	r3, [r7, #24]
 80178be:	69bb      	ldr	r3, [r7, #24]
 80178c0:	2b00      	cmp	r3, #0
 80178c2:	d1ed      	bne.n	80178a0 <ip4_input+0xec>
 80178c4:	e000      	b.n	80178c8 <ip4_input+0x114>
            break;
 80178c6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80178c8:	69bb      	ldr	r3, [r7, #24]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	d111      	bne.n	80178f2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80178ce:	69fb      	ldr	r3, [r7, #28]
 80178d0:	7a5b      	ldrb	r3, [r3, #9]
 80178d2:	2b11      	cmp	r3, #17
 80178d4:	d10d      	bne.n	80178f2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80178d6:	8a7b      	ldrh	r3, [r7, #18]
 80178d8:	69fa      	ldr	r2, [r7, #28]
 80178da:	4413      	add	r3, r2
 80178dc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80178de:	68fb      	ldr	r3, [r7, #12]
 80178e0:	885b      	ldrh	r3, [r3, #2]
 80178e2:	b29b      	uxth	r3, r3
 80178e4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80178e8:	d103      	bne.n	80178f2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80178ee:	2300      	movs	r3, #0
 80178f0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80178f2:	697b      	ldr	r3, [r7, #20]
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d017      	beq.n	8017928 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80178f8:	4b4d      	ldr	r3, [pc, #308]	; (8017a30 <ip4_input+0x27c>)
 80178fa:	691b      	ldr	r3, [r3, #16]
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	d013      	beq.n	8017928 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8017900:	4b4b      	ldr	r3, [pc, #300]	; (8017a30 <ip4_input+0x27c>)
 8017902:	691b      	ldr	r3, [r3, #16]
 8017904:	6839      	ldr	r1, [r7, #0]
 8017906:	4618      	mov	r0, r3
 8017908:	f000 f96e 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 801790c:	4603      	mov	r3, r0
 801790e:	2b00      	cmp	r3, #0
 8017910:	d105      	bne.n	801791e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8017912:	4b47      	ldr	r3, [pc, #284]	; (8017a30 <ip4_input+0x27c>)
 8017914:	691b      	ldr	r3, [r3, #16]
 8017916:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801791a:	2be0      	cmp	r3, #224	; 0xe0
 801791c:	d104      	bne.n	8017928 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801791e:	6878      	ldr	r0, [r7, #4]
 8017920:	f7f5 fe02 	bl	800d528 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8017924:	2300      	movs	r3, #0
 8017926:	e07e      	b.n	8017a26 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8017928:	69bb      	ldr	r3, [r7, #24]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d104      	bne.n	8017938 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801792e:	6878      	ldr	r0, [r7, #4]
 8017930:	f7f5 fdfa 	bl	800d528 <pbuf_free>
    return ERR_OK;
 8017934:	2300      	movs	r3, #0
 8017936:	e076      	b.n	8017a26 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8017938:	69fb      	ldr	r3, [r7, #28]
 801793a:	88db      	ldrh	r3, [r3, #6]
 801793c:	b29b      	uxth	r3, r3
 801793e:	461a      	mov	r2, r3
 8017940:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8017944:	4013      	ands	r3, r2
 8017946:	2b00      	cmp	r3, #0
 8017948:	d00b      	beq.n	8017962 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f000 fc92 	bl	8018274 <ip4_reass>
 8017950:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8017952:	687b      	ldr	r3, [r7, #4]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d101      	bne.n	801795c <ip4_input+0x1a8>
      return ERR_OK;
 8017958:	2300      	movs	r3, #0
 801795a:	e064      	b.n	8017a26 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	685b      	ldr	r3, [r3, #4]
 8017960:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8017962:	4a33      	ldr	r2, [pc, #204]	; (8017a30 <ip4_input+0x27c>)
 8017964:	69bb      	ldr	r3, [r7, #24]
 8017966:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8017968:	4a31      	ldr	r2, [pc, #196]	; (8017a30 <ip4_input+0x27c>)
 801796a:	683b      	ldr	r3, [r7, #0]
 801796c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801796e:	4a30      	ldr	r2, [pc, #192]	; (8017a30 <ip4_input+0x27c>)
 8017970:	69fb      	ldr	r3, [r7, #28]
 8017972:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8017974:	69fb      	ldr	r3, [r7, #28]
 8017976:	781b      	ldrb	r3, [r3, #0]
 8017978:	f003 030f 	and.w	r3, r3, #15
 801797c:	b2db      	uxtb	r3, r3
 801797e:	009b      	lsls	r3, r3, #2
 8017980:	b2db      	uxtb	r3, r3
 8017982:	b29a      	uxth	r2, r3
 8017984:	4b2a      	ldr	r3, [pc, #168]	; (8017a30 <ip4_input+0x27c>)
 8017986:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8017988:	8a7b      	ldrh	r3, [r7, #18]
 801798a:	4619      	mov	r1, r3
 801798c:	6878      	ldr	r0, [r7, #4]
 801798e:	f7f5 fd45 	bl	800d41c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8017992:	69fb      	ldr	r3, [r7, #28]
 8017994:	7a5b      	ldrb	r3, [r3, #9]
 8017996:	2b11      	cmp	r3, #17
 8017998:	d006      	beq.n	80179a8 <ip4_input+0x1f4>
 801799a:	2b11      	cmp	r3, #17
 801799c:	dc13      	bgt.n	80179c6 <ip4_input+0x212>
 801799e:	2b01      	cmp	r3, #1
 80179a0:	d00c      	beq.n	80179bc <ip4_input+0x208>
 80179a2:	2b06      	cmp	r3, #6
 80179a4:	d005      	beq.n	80179b2 <ip4_input+0x1fe>
 80179a6:	e00e      	b.n	80179c6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80179a8:	6839      	ldr	r1, [r7, #0]
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f7fc fae8 	bl	8013f80 <udp_input>
        break;
 80179b0:	e026      	b.n	8017a00 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80179b2:	6839      	ldr	r1, [r7, #0]
 80179b4:	6878      	ldr	r0, [r7, #4]
 80179b6:	f7f7 fea1 	bl	800f6fc <tcp_input>
        break;
 80179ba:	e021      	b.n	8017a00 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80179bc:	6839      	ldr	r1, [r7, #0]
 80179be:	6878      	ldr	r0, [r7, #4]
 80179c0:	f7ff fcd0 	bl	8017364 <icmp_input>
        break;
 80179c4:	e01c      	b.n	8017a00 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80179c6:	4b1a      	ldr	r3, [pc, #104]	; (8017a30 <ip4_input+0x27c>)
 80179c8:	695b      	ldr	r3, [r3, #20]
 80179ca:	69b9      	ldr	r1, [r7, #24]
 80179cc:	4618      	mov	r0, r3
 80179ce:	f000 f90b 	bl	8017be8 <ip4_addr_isbroadcast_u32>
 80179d2:	4603      	mov	r3, r0
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d10f      	bne.n	80179f8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80179d8:	4b15      	ldr	r3, [pc, #84]	; (8017a30 <ip4_input+0x27c>)
 80179da:	695b      	ldr	r3, [r3, #20]
 80179dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80179e0:	2be0      	cmp	r3, #224	; 0xe0
 80179e2:	d009      	beq.n	80179f8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80179e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80179e8:	4619      	mov	r1, r3
 80179ea:	6878      	ldr	r0, [r7, #4]
 80179ec:	f7f5 fd89 	bl	800d502 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80179f0:	2102      	movs	r1, #2
 80179f2:	6878      	ldr	r0, [r7, #4]
 80179f4:	f7ff fdba 	bl	801756c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80179f8:	6878      	ldr	r0, [r7, #4]
 80179fa:	f7f5 fd95 	bl	800d528 <pbuf_free>
        break;
 80179fe:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8017a00:	4b0b      	ldr	r3, [pc, #44]	; (8017a30 <ip4_input+0x27c>)
 8017a02:	2200      	movs	r2, #0
 8017a04:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8017a06:	4b0a      	ldr	r3, [pc, #40]	; (8017a30 <ip4_input+0x27c>)
 8017a08:	2200      	movs	r2, #0
 8017a0a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8017a0c:	4b08      	ldr	r3, [pc, #32]	; (8017a30 <ip4_input+0x27c>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8017a12:	4b07      	ldr	r3, [pc, #28]	; (8017a30 <ip4_input+0x27c>)
 8017a14:	2200      	movs	r2, #0
 8017a16:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8017a18:	4b05      	ldr	r3, [pc, #20]	; (8017a30 <ip4_input+0x27c>)
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8017a1e:	4b04      	ldr	r3, [pc, #16]	; (8017a30 <ip4_input+0x27c>)
 8017a20:	2200      	movs	r2, #0
 8017a22:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8017a24:	2300      	movs	r3, #0
}
 8017a26:	4618      	mov	r0, r3
 8017a28:	3720      	adds	r7, #32
 8017a2a:	46bd      	mov	sp, r7
 8017a2c:	bd80      	pop	{r7, pc}
 8017a2e:	bf00      	nop
 8017a30:	20009768 	.word	0x20009768
 8017a34:	2000ced0 	.word	0x2000ced0

08017a38 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8017a38:	b580      	push	{r7, lr}
 8017a3a:	b08a      	sub	sp, #40	; 0x28
 8017a3c:	af04      	add	r7, sp, #16
 8017a3e:	60f8      	str	r0, [r7, #12]
 8017a40:	60b9      	str	r1, [r7, #8]
 8017a42:	607a      	str	r2, [r7, #4]
 8017a44:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	d009      	beq.n	8017a64 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8017a50:	68bb      	ldr	r3, [r7, #8]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d003      	beq.n	8017a5e <ip4_output_if+0x26>
 8017a56:	68bb      	ldr	r3, [r7, #8]
 8017a58:	681b      	ldr	r3, [r3, #0]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d102      	bne.n	8017a64 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8017a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a60:	3304      	adds	r3, #4
 8017a62:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8017a64:	78fa      	ldrb	r2, [r7, #3]
 8017a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017a68:	9302      	str	r3, [sp, #8]
 8017a6a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017a6e:	9301      	str	r3, [sp, #4]
 8017a70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8017a74:	9300      	str	r3, [sp, #0]
 8017a76:	4613      	mov	r3, r2
 8017a78:	687a      	ldr	r2, [r7, #4]
 8017a7a:	6979      	ldr	r1, [r7, #20]
 8017a7c:	68f8      	ldr	r0, [r7, #12]
 8017a7e:	f000 f805 	bl	8017a8c <ip4_output_if_src>
 8017a82:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8017a84:	4618      	mov	r0, r3
 8017a86:	3718      	adds	r7, #24
 8017a88:	46bd      	mov	sp, r7
 8017a8a:	bd80      	pop	{r7, pc}

08017a8c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8017a8c:	b580      	push	{r7, lr}
 8017a8e:	b088      	sub	sp, #32
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	60f8      	str	r0, [r7, #12]
 8017a94:	60b9      	str	r1, [r7, #8]
 8017a96:	607a      	str	r2, [r7, #4]
 8017a98:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8017a9a:	68fb      	ldr	r3, [r7, #12]
 8017a9c:	7b9b      	ldrb	r3, [r3, #14]
 8017a9e:	2b01      	cmp	r3, #1
 8017aa0:	d006      	beq.n	8017ab0 <ip4_output_if_src+0x24>
 8017aa2:	4b4b      	ldr	r3, [pc, #300]	; (8017bd0 <ip4_output_if_src+0x144>)
 8017aa4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8017aa8:	494a      	ldr	r1, [pc, #296]	; (8017bd4 <ip4_output_if_src+0x148>)
 8017aaa:	484b      	ldr	r0, [pc, #300]	; (8017bd8 <ip4_output_if_src+0x14c>)
 8017aac:	f001 fa86 	bl	8018fbc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d060      	beq.n	8017b78 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8017ab6:	2314      	movs	r3, #20
 8017ab8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8017aba:	2114      	movs	r1, #20
 8017abc:	68f8      	ldr	r0, [r7, #12]
 8017abe:	f7f5 fc9d 	bl	800d3fc <pbuf_add_header>
 8017ac2:	4603      	mov	r3, r0
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d002      	beq.n	8017ace <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017ac8:	f06f 0301 	mvn.w	r3, #1
 8017acc:	e07c      	b.n	8017bc8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	895b      	ldrh	r3, [r3, #10]
 8017ad8:	2b13      	cmp	r3, #19
 8017ada:	d806      	bhi.n	8017aea <ip4_output_if_src+0x5e>
 8017adc:	4b3c      	ldr	r3, [pc, #240]	; (8017bd0 <ip4_output_if_src+0x144>)
 8017ade:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017ae2:	493e      	ldr	r1, [pc, #248]	; (8017bdc <ip4_output_if_src+0x150>)
 8017ae4:	483c      	ldr	r0, [pc, #240]	; (8017bd8 <ip4_output_if_src+0x14c>)
 8017ae6:	f001 fa69 	bl	8018fbc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	78fa      	ldrb	r2, [r7, #3]
 8017aee:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017af0:	69fb      	ldr	r3, [r7, #28]
 8017af2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017af6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	681a      	ldr	r2, [r3, #0]
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017b00:	8b7b      	ldrh	r3, [r7, #26]
 8017b02:	089b      	lsrs	r3, r3, #2
 8017b04:	b29b      	uxth	r3, r3
 8017b06:	b2db      	uxtb	r3, r3
 8017b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b0c:	b2da      	uxtb	r2, r3
 8017b0e:	69fb      	ldr	r3, [r7, #28]
 8017b10:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017b12:	69fb      	ldr	r3, [r7, #28]
 8017b14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017b18:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8017b1a:	68fb      	ldr	r3, [r7, #12]
 8017b1c:	891b      	ldrh	r3, [r3, #8]
 8017b1e:	4618      	mov	r0, r3
 8017b20:	f7f4 f8ce 	bl	800bcc0 <lwip_htons>
 8017b24:	4603      	mov	r3, r0
 8017b26:	461a      	mov	r2, r3
 8017b28:	69fb      	ldr	r3, [r7, #28]
 8017b2a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8017b2c:	69fb      	ldr	r3, [r7, #28]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	719a      	strb	r2, [r3, #6]
 8017b32:	2200      	movs	r2, #0
 8017b34:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017b36:	4b2a      	ldr	r3, [pc, #168]	; (8017be0 <ip4_output_if_src+0x154>)
 8017b38:	881b      	ldrh	r3, [r3, #0]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7f4 f8c0 	bl	800bcc0 <lwip_htons>
 8017b40:	4603      	mov	r3, r0
 8017b42:	461a      	mov	r2, r3
 8017b44:	69fb      	ldr	r3, [r7, #28]
 8017b46:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017b48:	4b25      	ldr	r3, [pc, #148]	; (8017be0 <ip4_output_if_src+0x154>)
 8017b4a:	881b      	ldrh	r3, [r3, #0]
 8017b4c:	3301      	adds	r3, #1
 8017b4e:	b29a      	uxth	r2, r3
 8017b50:	4b23      	ldr	r3, [pc, #140]	; (8017be0 <ip4_output_if_src+0x154>)
 8017b52:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d104      	bne.n	8017b64 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8017b5a:	4b22      	ldr	r3, [pc, #136]	; (8017be4 <ip4_output_if_src+0x158>)
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	69fb      	ldr	r3, [r7, #28]
 8017b60:	60da      	str	r2, [r3, #12]
 8017b62:	e003      	b.n	8017b6c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8017b64:	68bb      	ldr	r3, [r7, #8]
 8017b66:	681a      	ldr	r2, [r3, #0]
 8017b68:	69fb      	ldr	r3, [r7, #28]
 8017b6a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	2200      	movs	r2, #0
 8017b70:	729a      	strb	r2, [r3, #10]
 8017b72:	2200      	movs	r2, #0
 8017b74:	72da      	strb	r2, [r3, #11]
 8017b76:	e00f      	b.n	8017b98 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8017b78:	68fb      	ldr	r3, [r7, #12]
 8017b7a:	895b      	ldrh	r3, [r3, #10]
 8017b7c:	2b13      	cmp	r3, #19
 8017b7e:	d802      	bhi.n	8017b86 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017b80:	f06f 0301 	mvn.w	r3, #1
 8017b84:	e020      	b.n	8017bc8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8017b86:	68fb      	ldr	r3, [r7, #12]
 8017b88:	685b      	ldr	r3, [r3, #4]
 8017b8a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8017b8c:	69fb      	ldr	r3, [r7, #28]
 8017b8e:	691b      	ldr	r3, [r3, #16]
 8017b90:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8017b92:	f107 0314 	add.w	r3, r7, #20
 8017b96:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8017b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d00c      	beq.n	8017bba <ip4_output_if_src+0x12e>
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	891a      	ldrh	r2, [r3, #8]
 8017ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ba8:	429a      	cmp	r2, r3
 8017baa:	d906      	bls.n	8017bba <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017bb0:	68f8      	ldr	r0, [r7, #12]
 8017bb2:	f000 fd53 	bl	801865c <ip4_frag>
 8017bb6:	4603      	mov	r3, r0
 8017bb8:	e006      	b.n	8017bc8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8017bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bbc:	695b      	ldr	r3, [r3, #20]
 8017bbe:	687a      	ldr	r2, [r7, #4]
 8017bc0:	68f9      	ldr	r1, [r7, #12]
 8017bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017bc4:	4798      	blx	r3
 8017bc6:	4603      	mov	r3, r0
}
 8017bc8:	4618      	mov	r0, r3
 8017bca:	3720      	adds	r7, #32
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	bd80      	pop	{r7, pc}
 8017bd0:	0801cd64 	.word	0x0801cd64
 8017bd4:	0801cd98 	.word	0x0801cd98
 8017bd8:	0801cda4 	.word	0x0801cda4
 8017bdc:	0801cdcc 	.word	0x0801cdcc
 8017be0:	2000d062 	.word	0x2000d062
 8017be4:	0801f5c4 	.word	0x0801f5c4

08017be8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017be8:	b480      	push	{r7}
 8017bea:	b085      	sub	sp, #20
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017bfc:	d002      	beq.n	8017c04 <ip4_addr_isbroadcast_u32+0x1c>
 8017bfe:	687b      	ldr	r3, [r7, #4]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d101      	bne.n	8017c08 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017c04:	2301      	movs	r3, #1
 8017c06:	e02a      	b.n	8017c5e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017c08:	683b      	ldr	r3, [r7, #0]
 8017c0a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017c0e:	f003 0302 	and.w	r3, r3, #2
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d101      	bne.n	8017c1a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	e021      	b.n	8017c5e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8017c1a:	683b      	ldr	r3, [r7, #0]
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	687a      	ldr	r2, [r7, #4]
 8017c22:	429a      	cmp	r2, r3
 8017c24:	d101      	bne.n	8017c2a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017c26:	2300      	movs	r3, #0
 8017c28:	e019      	b.n	8017c5e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8017c2a:	68fa      	ldr	r2, [r7, #12]
 8017c2c:	683b      	ldr	r3, [r7, #0]
 8017c2e:	3304      	adds	r3, #4
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	405a      	eors	r2, r3
 8017c34:	683b      	ldr	r3, [r7, #0]
 8017c36:	3308      	adds	r3, #8
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	4013      	ands	r3, r2
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	d10d      	bne.n	8017c5c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017c40:	683b      	ldr	r3, [r7, #0]
 8017c42:	3308      	adds	r3, #8
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	43da      	mvns	r2, r3
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	3308      	adds	r3, #8
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d101      	bne.n	8017c5c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017c58:	2301      	movs	r3, #1
 8017c5a:	e000      	b.n	8017c5e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8017c5c:	2300      	movs	r3, #0
  }
}
 8017c5e:	4618      	mov	r0, r3
 8017c60:	3714      	adds	r7, #20
 8017c62:	46bd      	mov	sp, r7
 8017c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c68:	4770      	bx	lr
	...

08017c6c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b084      	sub	sp, #16
 8017c70:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8017c72:	2300      	movs	r3, #0
 8017c74:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8017c76:	4b12      	ldr	r3, [pc, #72]	; (8017cc0 <ip_reass_tmr+0x54>)
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8017c7c:	e018      	b.n	8017cb0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	7fdb      	ldrb	r3, [r3, #31]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d00b      	beq.n	8017c9e <ip_reass_tmr+0x32>
      r->timer--;
 8017c86:	68fb      	ldr	r3, [r7, #12]
 8017c88:	7fdb      	ldrb	r3, [r3, #31]
 8017c8a:	3b01      	subs	r3, #1
 8017c8c:	b2da      	uxtb	r2, r3
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	60fb      	str	r3, [r7, #12]
 8017c9c:	e008      	b.n	8017cb0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8017c9e:	68fb      	ldr	r3, [r7, #12]
 8017ca0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8017ca8:	68b9      	ldr	r1, [r7, #8]
 8017caa:	6878      	ldr	r0, [r7, #4]
 8017cac:	f000 f80a 	bl	8017cc4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8017cb0:	68fb      	ldr	r3, [r7, #12]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d1e3      	bne.n	8017c7e <ip_reass_tmr+0x12>
    }
  }
}
 8017cb6:	bf00      	nop
 8017cb8:	bf00      	nop
 8017cba:	3710      	adds	r7, #16
 8017cbc:	46bd      	mov	sp, r7
 8017cbe:	bd80      	pop	{r7, pc}
 8017cc0:	2000d064 	.word	0x2000d064

08017cc4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b088      	sub	sp, #32
 8017cc8:	af00      	add	r7, sp, #0
 8017cca:	6078      	str	r0, [r7, #4]
 8017ccc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8017cce:	2300      	movs	r3, #0
 8017cd0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017cd2:	683a      	ldr	r2, [r7, #0]
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	429a      	cmp	r2, r3
 8017cd8:	d105      	bne.n	8017ce6 <ip_reass_free_complete_datagram+0x22>
 8017cda:	4b45      	ldr	r3, [pc, #276]	; (8017df0 <ip_reass_free_complete_datagram+0x12c>)
 8017cdc:	22ab      	movs	r2, #171	; 0xab
 8017cde:	4945      	ldr	r1, [pc, #276]	; (8017df4 <ip_reass_free_complete_datagram+0x130>)
 8017ce0:	4845      	ldr	r0, [pc, #276]	; (8017df8 <ip_reass_free_complete_datagram+0x134>)
 8017ce2:	f001 f96b 	bl	8018fbc <iprintf>
  if (prev != NULL) {
 8017ce6:	683b      	ldr	r3, [r7, #0]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d00a      	beq.n	8017d02 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8017cec:	683b      	ldr	r3, [r7, #0]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	687a      	ldr	r2, [r7, #4]
 8017cf2:	429a      	cmp	r2, r3
 8017cf4:	d005      	beq.n	8017d02 <ip_reass_free_complete_datagram+0x3e>
 8017cf6:	4b3e      	ldr	r3, [pc, #248]	; (8017df0 <ip_reass_free_complete_datagram+0x12c>)
 8017cf8:	22ad      	movs	r2, #173	; 0xad
 8017cfa:	4940      	ldr	r1, [pc, #256]	; (8017dfc <ip_reass_free_complete_datagram+0x138>)
 8017cfc:	483e      	ldr	r0, [pc, #248]	; (8017df8 <ip_reass_free_complete_datagram+0x134>)
 8017cfe:	f001 f95d 	bl	8018fbc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	685b      	ldr	r3, [r3, #4]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8017d0a:	697b      	ldr	r3, [r7, #20]
 8017d0c:	889b      	ldrh	r3, [r3, #4]
 8017d0e:	b29b      	uxth	r3, r3
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d12a      	bne.n	8017d6a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	685b      	ldr	r3, [r3, #4]
 8017d18:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	681a      	ldr	r2, [r3, #0]
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017d22:	69bb      	ldr	r3, [r7, #24]
 8017d24:	6858      	ldr	r0, [r3, #4]
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	3308      	adds	r3, #8
 8017d2a:	2214      	movs	r2, #20
 8017d2c:	4619      	mov	r1, r3
 8017d2e:	f001 fa43 	bl	80191b8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017d32:	2101      	movs	r1, #1
 8017d34:	69b8      	ldr	r0, [r7, #24]
 8017d36:	f7ff fc29 	bl	801758c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8017d3a:	69b8      	ldr	r0, [r7, #24]
 8017d3c:	f7f5 fc82 	bl	800d644 <pbuf_clen>
 8017d40:	4603      	mov	r3, r0
 8017d42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d44:	8bfa      	ldrh	r2, [r7, #30]
 8017d46:	8a7b      	ldrh	r3, [r7, #18]
 8017d48:	4413      	add	r3, r2
 8017d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d4e:	db05      	blt.n	8017d5c <ip_reass_free_complete_datagram+0x98>
 8017d50:	4b27      	ldr	r3, [pc, #156]	; (8017df0 <ip_reass_free_complete_datagram+0x12c>)
 8017d52:	22bc      	movs	r2, #188	; 0xbc
 8017d54:	492a      	ldr	r1, [pc, #168]	; (8017e00 <ip_reass_free_complete_datagram+0x13c>)
 8017d56:	4828      	ldr	r0, [pc, #160]	; (8017df8 <ip_reass_free_complete_datagram+0x134>)
 8017d58:	f001 f930 	bl	8018fbc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017d5c:	8bfa      	ldrh	r2, [r7, #30]
 8017d5e:	8a7b      	ldrh	r3, [r7, #18]
 8017d60:	4413      	add	r3, r2
 8017d62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8017d64:	69b8      	ldr	r0, [r7, #24]
 8017d66:	f7f5 fbdf 	bl	800d528 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	685b      	ldr	r3, [r3, #4]
 8017d6e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8017d70:	e01f      	b.n	8017db2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8017d72:	69bb      	ldr	r3, [r7, #24]
 8017d74:	685b      	ldr	r3, [r3, #4]
 8017d76:	617b      	str	r3, [r7, #20]
    pcur = p;
 8017d78:	69bb      	ldr	r3, [r7, #24]
 8017d7a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8017d7c:	697b      	ldr	r3, [r7, #20]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8017d82:	68f8      	ldr	r0, [r7, #12]
 8017d84:	f7f5 fc5e 	bl	800d644 <pbuf_clen>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017d8c:	8bfa      	ldrh	r2, [r7, #30]
 8017d8e:	8a7b      	ldrh	r3, [r7, #18]
 8017d90:	4413      	add	r3, r2
 8017d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017d96:	db05      	blt.n	8017da4 <ip_reass_free_complete_datagram+0xe0>
 8017d98:	4b15      	ldr	r3, [pc, #84]	; (8017df0 <ip_reass_free_complete_datagram+0x12c>)
 8017d9a:	22cc      	movs	r2, #204	; 0xcc
 8017d9c:	4918      	ldr	r1, [pc, #96]	; (8017e00 <ip_reass_free_complete_datagram+0x13c>)
 8017d9e:	4816      	ldr	r0, [pc, #88]	; (8017df8 <ip_reass_free_complete_datagram+0x134>)
 8017da0:	f001 f90c 	bl	8018fbc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8017da4:	8bfa      	ldrh	r2, [r7, #30]
 8017da6:	8a7b      	ldrh	r3, [r7, #18]
 8017da8:	4413      	add	r3, r2
 8017daa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8017dac:	68f8      	ldr	r0, [r7, #12]
 8017dae:	f7f5 fbbb 	bl	800d528 <pbuf_free>
  while (p != NULL) {
 8017db2:	69bb      	ldr	r3, [r7, #24]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d1dc      	bne.n	8017d72 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8017db8:	6839      	ldr	r1, [r7, #0]
 8017dba:	6878      	ldr	r0, [r7, #4]
 8017dbc:	f000 f8c2 	bl	8017f44 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017dc0:	4b10      	ldr	r3, [pc, #64]	; (8017e04 <ip_reass_free_complete_datagram+0x140>)
 8017dc2:	881b      	ldrh	r3, [r3, #0]
 8017dc4:	8bfa      	ldrh	r2, [r7, #30]
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d905      	bls.n	8017dd6 <ip_reass_free_complete_datagram+0x112>
 8017dca:	4b09      	ldr	r3, [pc, #36]	; (8017df0 <ip_reass_free_complete_datagram+0x12c>)
 8017dcc:	22d2      	movs	r2, #210	; 0xd2
 8017dce:	490e      	ldr	r1, [pc, #56]	; (8017e08 <ip_reass_free_complete_datagram+0x144>)
 8017dd0:	4809      	ldr	r0, [pc, #36]	; (8017df8 <ip_reass_free_complete_datagram+0x134>)
 8017dd2:	f001 f8f3 	bl	8018fbc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017dd6:	4b0b      	ldr	r3, [pc, #44]	; (8017e04 <ip_reass_free_complete_datagram+0x140>)
 8017dd8:	881a      	ldrh	r2, [r3, #0]
 8017dda:	8bfb      	ldrh	r3, [r7, #30]
 8017ddc:	1ad3      	subs	r3, r2, r3
 8017dde:	b29a      	uxth	r2, r3
 8017de0:	4b08      	ldr	r3, [pc, #32]	; (8017e04 <ip_reass_free_complete_datagram+0x140>)
 8017de2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017de4:	8bfb      	ldrh	r3, [r7, #30]
}
 8017de6:	4618      	mov	r0, r3
 8017de8:	3720      	adds	r7, #32
 8017dea:	46bd      	mov	sp, r7
 8017dec:	bd80      	pop	{r7, pc}
 8017dee:	bf00      	nop
 8017df0:	0801cdfc 	.word	0x0801cdfc
 8017df4:	0801ce38 	.word	0x0801ce38
 8017df8:	0801ce44 	.word	0x0801ce44
 8017dfc:	0801ce6c 	.word	0x0801ce6c
 8017e00:	0801ce80 	.word	0x0801ce80
 8017e04:	2000d068 	.word	0x2000d068
 8017e08:	0801cea0 	.word	0x0801cea0

08017e0c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8017e0c:	b580      	push	{r7, lr}
 8017e0e:	b08a      	sub	sp, #40	; 0x28
 8017e10:	af00      	add	r7, sp, #0
 8017e12:	6078      	str	r0, [r7, #4]
 8017e14:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017e16:	2300      	movs	r3, #0
 8017e18:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8017e1e:	2300      	movs	r3, #0
 8017e20:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017e22:	2300      	movs	r3, #0
 8017e24:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017e26:	2300      	movs	r3, #0
 8017e28:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8017e2a:	4b28      	ldr	r3, [pc, #160]	; (8017ecc <ip_reass_remove_oldest_datagram+0xc0>)
 8017e2c:	681b      	ldr	r3, [r3, #0]
 8017e2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e30:	e030      	b.n	8017e94 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e34:	695a      	ldr	r2, [r3, #20]
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	68db      	ldr	r3, [r3, #12]
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d10c      	bne.n	8017e58 <ip_reass_remove_oldest_datagram+0x4c>
 8017e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e40:	699a      	ldr	r2, [r3, #24]
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	691b      	ldr	r3, [r3, #16]
 8017e46:	429a      	cmp	r2, r3
 8017e48:	d106      	bne.n	8017e58 <ip_reass_remove_oldest_datagram+0x4c>
 8017e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e4c:	899a      	ldrh	r2, [r3, #12]
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	889b      	ldrh	r3, [r3, #4]
 8017e52:	b29b      	uxth	r3, r3
 8017e54:	429a      	cmp	r2, r3
 8017e56:	d014      	beq.n	8017e82 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017e58:	693b      	ldr	r3, [r7, #16]
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8017e5e:	6a3b      	ldr	r3, [r7, #32]
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	d104      	bne.n	8017e6e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8017e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e66:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017e68:	69fb      	ldr	r3, [r7, #28]
 8017e6a:	61bb      	str	r3, [r7, #24]
 8017e6c:	e009      	b.n	8017e82 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8017e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e70:	7fda      	ldrb	r2, [r3, #31]
 8017e72:	6a3b      	ldr	r3, [r7, #32]
 8017e74:	7fdb      	ldrb	r3, [r3, #31]
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d803      	bhi.n	8017e82 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8017e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e7c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8017e7e:	69fb      	ldr	r3, [r7, #28]
 8017e80:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8017e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d001      	beq.n	8017e8e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8017e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e8c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8017e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e90:	681b      	ldr	r3, [r3, #0]
 8017e92:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d1cb      	bne.n	8017e32 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8017e9a:	6a3b      	ldr	r3, [r7, #32]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d008      	beq.n	8017eb2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8017ea0:	69b9      	ldr	r1, [r7, #24]
 8017ea2:	6a38      	ldr	r0, [r7, #32]
 8017ea4:	f7ff ff0e 	bl	8017cc4 <ip_reass_free_complete_datagram>
 8017ea8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8017eaa:	697a      	ldr	r2, [r7, #20]
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	4413      	add	r3, r2
 8017eb0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8017eb2:	697a      	ldr	r2, [r7, #20]
 8017eb4:	683b      	ldr	r3, [r7, #0]
 8017eb6:	429a      	cmp	r2, r3
 8017eb8:	da02      	bge.n	8017ec0 <ip_reass_remove_oldest_datagram+0xb4>
 8017eba:	693b      	ldr	r3, [r7, #16]
 8017ebc:	2b01      	cmp	r3, #1
 8017ebe:	dcac      	bgt.n	8017e1a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017ec0:	697b      	ldr	r3, [r7, #20]
}
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	3728      	adds	r7, #40	; 0x28
 8017ec6:	46bd      	mov	sp, r7
 8017ec8:	bd80      	pop	{r7, pc}
 8017eca:	bf00      	nop
 8017ecc:	2000d064 	.word	0x2000d064

08017ed0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b084      	sub	sp, #16
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017eda:	2004      	movs	r0, #4
 8017edc:	f7f4 fbfe 	bl	800c6dc <memp_malloc>
 8017ee0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017ee2:	68fb      	ldr	r3, [r7, #12]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d110      	bne.n	8017f0a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017ee8:	6839      	ldr	r1, [r7, #0]
 8017eea:	6878      	ldr	r0, [r7, #4]
 8017eec:	f7ff ff8e 	bl	8017e0c <ip_reass_remove_oldest_datagram>
 8017ef0:	4602      	mov	r2, r0
 8017ef2:	683b      	ldr	r3, [r7, #0]
 8017ef4:	4293      	cmp	r3, r2
 8017ef6:	dc03      	bgt.n	8017f00 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017ef8:	2004      	movs	r0, #4
 8017efa:	f7f4 fbef 	bl	800c6dc <memp_malloc>
 8017efe:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d101      	bne.n	8017f0a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017f06:	2300      	movs	r3, #0
 8017f08:	e016      	b.n	8017f38 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8017f0a:	2220      	movs	r2, #32
 8017f0c:	2100      	movs	r1, #0
 8017f0e:	68f8      	ldr	r0, [r7, #12]
 8017f10:	f001 f8b9 	bl	8019086 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017f14:	68fb      	ldr	r3, [r7, #12]
 8017f16:	220f      	movs	r2, #15
 8017f18:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8017f1a:	4b09      	ldr	r3, [pc, #36]	; (8017f40 <ip_reass_enqueue_new_datagram+0x70>)
 8017f1c:	681a      	ldr	r2, [r3, #0]
 8017f1e:	68fb      	ldr	r3, [r7, #12]
 8017f20:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017f22:	4a07      	ldr	r2, [pc, #28]	; (8017f40 <ip_reass_enqueue_new_datagram+0x70>)
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	3308      	adds	r3, #8
 8017f2c:	2214      	movs	r2, #20
 8017f2e:	6879      	ldr	r1, [r7, #4]
 8017f30:	4618      	mov	r0, r3
 8017f32:	f001 f941 	bl	80191b8 <memcpy>
  return ipr;
 8017f36:	68fb      	ldr	r3, [r7, #12]
}
 8017f38:	4618      	mov	r0, r3
 8017f3a:	3710      	adds	r7, #16
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	2000d064 	.word	0x2000d064

08017f44 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b082      	sub	sp, #8
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]
 8017f4c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8017f4e:	4b10      	ldr	r3, [pc, #64]	; (8017f90 <ip_reass_dequeue_datagram+0x4c>)
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	687a      	ldr	r2, [r7, #4]
 8017f54:	429a      	cmp	r2, r3
 8017f56:	d104      	bne.n	8017f62 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	681b      	ldr	r3, [r3, #0]
 8017f5c:	4a0c      	ldr	r2, [pc, #48]	; (8017f90 <ip_reass_dequeue_datagram+0x4c>)
 8017f5e:	6013      	str	r3, [r2, #0]
 8017f60:	e00d      	b.n	8017f7e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8017f62:	683b      	ldr	r3, [r7, #0]
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d106      	bne.n	8017f76 <ip_reass_dequeue_datagram+0x32>
 8017f68:	4b0a      	ldr	r3, [pc, #40]	; (8017f94 <ip_reass_dequeue_datagram+0x50>)
 8017f6a:	f240 1245 	movw	r2, #325	; 0x145
 8017f6e:	490a      	ldr	r1, [pc, #40]	; (8017f98 <ip_reass_dequeue_datagram+0x54>)
 8017f70:	480a      	ldr	r0, [pc, #40]	; (8017f9c <ip_reass_dequeue_datagram+0x58>)
 8017f72:	f001 f823 	bl	8018fbc <iprintf>
    prev->next = ipr->next;
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	683b      	ldr	r3, [r7, #0]
 8017f7c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8017f7e:	6879      	ldr	r1, [r7, #4]
 8017f80:	2004      	movs	r0, #4
 8017f82:	f7f4 fc21 	bl	800c7c8 <memp_free>
}
 8017f86:	bf00      	nop
 8017f88:	3708      	adds	r7, #8
 8017f8a:	46bd      	mov	sp, r7
 8017f8c:	bd80      	pop	{r7, pc}
 8017f8e:	bf00      	nop
 8017f90:	2000d064 	.word	0x2000d064
 8017f94:	0801cdfc 	.word	0x0801cdfc
 8017f98:	0801cec4 	.word	0x0801cec4
 8017f9c:	0801ce44 	.word	0x0801ce44

08017fa0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8017fa0:	b580      	push	{r7, lr}
 8017fa2:	b08c      	sub	sp, #48	; 0x30
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8017fac:	2300      	movs	r3, #0
 8017fae:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8017fb0:	2301      	movs	r3, #1
 8017fb2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	685b      	ldr	r3, [r3, #4]
 8017fb8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8017fba:	69fb      	ldr	r3, [r7, #28]
 8017fbc:	885b      	ldrh	r3, [r3, #2]
 8017fbe:	b29b      	uxth	r3, r3
 8017fc0:	4618      	mov	r0, r3
 8017fc2:	f7f3 fe7d 	bl	800bcc0 <lwip_htons>
 8017fc6:	4603      	mov	r3, r0
 8017fc8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8017fca:	69fb      	ldr	r3, [r7, #28]
 8017fcc:	781b      	ldrb	r3, [r3, #0]
 8017fce:	f003 030f 	and.w	r3, r3, #15
 8017fd2:	b2db      	uxtb	r3, r3
 8017fd4:	009b      	lsls	r3, r3, #2
 8017fd6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017fd8:	7e7b      	ldrb	r3, [r7, #25]
 8017fda:	b29b      	uxth	r3, r3
 8017fdc:	8b7a      	ldrh	r2, [r7, #26]
 8017fde:	429a      	cmp	r2, r3
 8017fe0:	d202      	bcs.n	8017fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8017fe6:	e135      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017fe8:	7e7b      	ldrb	r3, [r7, #25]
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	8b7a      	ldrh	r2, [r7, #26]
 8017fee:	1ad3      	subs	r3, r2, r3
 8017ff0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017ff2:	69fb      	ldr	r3, [r7, #28]
 8017ff4:	88db      	ldrh	r3, [r3, #6]
 8017ff6:	b29b      	uxth	r3, r3
 8017ff8:	4618      	mov	r0, r3
 8017ffa:	f7f3 fe61 	bl	800bcc0 <lwip_htons>
 8017ffe:	4603      	mov	r3, r0
 8018000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018004:	b29b      	uxth	r3, r3
 8018006:	00db      	lsls	r3, r3, #3
 8018008:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801800a:	68bb      	ldr	r3, [r7, #8]
 801800c:	685b      	ldr	r3, [r3, #4]
 801800e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018012:	2200      	movs	r2, #0
 8018014:	701a      	strb	r2, [r3, #0]
 8018016:	2200      	movs	r2, #0
 8018018:	705a      	strb	r2, [r3, #1]
 801801a:	2200      	movs	r2, #0
 801801c:	709a      	strb	r2, [r3, #2]
 801801e:	2200      	movs	r2, #0
 8018020:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018024:	8afa      	ldrh	r2, [r7, #22]
 8018026:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018028:	8afa      	ldrh	r2, [r7, #22]
 801802a:	8b7b      	ldrh	r3, [r7, #26]
 801802c:	4413      	add	r3, r2
 801802e:	b29a      	uxth	r2, r3
 8018030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018032:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018036:	88db      	ldrh	r3, [r3, #6]
 8018038:	b29b      	uxth	r3, r3
 801803a:	8afa      	ldrh	r2, [r7, #22]
 801803c:	429a      	cmp	r2, r3
 801803e:	d902      	bls.n	8018046 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018040:	f04f 33ff 	mov.w	r3, #4294967295
 8018044:	e106      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018046:	68fb      	ldr	r3, [r7, #12]
 8018048:	685b      	ldr	r3, [r3, #4]
 801804a:	627b      	str	r3, [r7, #36]	; 0x24
 801804c:	e068      	b.n	8018120 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018050:	685b      	ldr	r3, [r3, #4]
 8018052:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018056:	889b      	ldrh	r3, [r3, #4]
 8018058:	b29a      	uxth	r2, r3
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	889b      	ldrh	r3, [r3, #4]
 801805e:	b29b      	uxth	r3, r3
 8018060:	429a      	cmp	r2, r3
 8018062:	d235      	bcs.n	80180d0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018068:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801806a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801806c:	2b00      	cmp	r3, #0
 801806e:	d020      	beq.n	80180b2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018072:	889b      	ldrh	r3, [r3, #4]
 8018074:	b29a      	uxth	r2, r3
 8018076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018078:	88db      	ldrh	r3, [r3, #6]
 801807a:	b29b      	uxth	r3, r3
 801807c:	429a      	cmp	r2, r3
 801807e:	d307      	bcc.n	8018090 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018082:	88db      	ldrh	r3, [r3, #6]
 8018084:	b29a      	uxth	r2, r3
 8018086:	693b      	ldr	r3, [r7, #16]
 8018088:	889b      	ldrh	r3, [r3, #4]
 801808a:	b29b      	uxth	r3, r3
 801808c:	429a      	cmp	r2, r3
 801808e:	d902      	bls.n	8018096 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018090:	f04f 33ff 	mov.w	r3, #4294967295
 8018094:	e0de      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018098:	68ba      	ldr	r2, [r7, #8]
 801809a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801809e:	88db      	ldrh	r3, [r3, #6]
 80180a0:	b29a      	uxth	r2, r3
 80180a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180a4:	889b      	ldrh	r3, [r3, #4]
 80180a6:	b29b      	uxth	r3, r3
 80180a8:	429a      	cmp	r2, r3
 80180aa:	d03d      	beq.n	8018128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80180ac:	2300      	movs	r3, #0
 80180ae:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80180b0:	e03a      	b.n	8018128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80180b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b4:	88db      	ldrh	r3, [r3, #6]
 80180b6:	b29a      	uxth	r2, r3
 80180b8:	693b      	ldr	r3, [r7, #16]
 80180ba:	889b      	ldrh	r3, [r3, #4]
 80180bc:	b29b      	uxth	r3, r3
 80180be:	429a      	cmp	r2, r3
 80180c0:	d902      	bls.n	80180c8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180c2:	f04f 33ff 	mov.w	r3, #4294967295
 80180c6:	e0c5      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	68ba      	ldr	r2, [r7, #8]
 80180cc:	605a      	str	r2, [r3, #4]
      break;
 80180ce:	e02b      	b.n	8018128 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80180d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d2:	889b      	ldrh	r3, [r3, #4]
 80180d4:	b29a      	uxth	r2, r3
 80180d6:	693b      	ldr	r3, [r7, #16]
 80180d8:	889b      	ldrh	r3, [r3, #4]
 80180da:	b29b      	uxth	r3, r3
 80180dc:	429a      	cmp	r2, r3
 80180de:	d102      	bne.n	80180e6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180e0:	f04f 33ff 	mov.w	r3, #4294967295
 80180e4:	e0b6      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80180e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180e8:	889b      	ldrh	r3, [r3, #4]
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	693b      	ldr	r3, [r7, #16]
 80180ee:	88db      	ldrh	r3, [r3, #6]
 80180f0:	b29b      	uxth	r3, r3
 80180f2:	429a      	cmp	r2, r3
 80180f4:	d202      	bcs.n	80180fc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80180f6:	f04f 33ff 	mov.w	r3, #4294967295
 80180fa:	e0ab      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80180fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d009      	beq.n	8018116 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018104:	88db      	ldrh	r3, [r3, #6]
 8018106:	b29a      	uxth	r2, r3
 8018108:	693b      	ldr	r3, [r7, #16]
 801810a:	889b      	ldrh	r3, [r3, #4]
 801810c:	b29b      	uxth	r3, r3
 801810e:	429a      	cmp	r2, r3
 8018110:	d001      	beq.n	8018116 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018112:	2300      	movs	r3, #0
 8018114:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018116:	693b      	ldr	r3, [r7, #16]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801811c:	693b      	ldr	r3, [r7, #16]
 801811e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018122:	2b00      	cmp	r3, #0
 8018124:	d193      	bne.n	801804e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018126:	e000      	b.n	801812a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018128:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801812c:	2b00      	cmp	r3, #0
 801812e:	d12d      	bne.n	801818c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018132:	2b00      	cmp	r3, #0
 8018134:	d01c      	beq.n	8018170 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018138:	88db      	ldrh	r3, [r3, #6]
 801813a:	b29a      	uxth	r2, r3
 801813c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801813e:	889b      	ldrh	r3, [r3, #4]
 8018140:	b29b      	uxth	r3, r3
 8018142:	429a      	cmp	r2, r3
 8018144:	d906      	bls.n	8018154 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018146:	4b45      	ldr	r3, [pc, #276]	; (801825c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018148:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801814c:	4944      	ldr	r1, [pc, #272]	; (8018260 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801814e:	4845      	ldr	r0, [pc, #276]	; (8018264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018150:	f000 ff34 	bl	8018fbc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018156:	68ba      	ldr	r2, [r7, #8]
 8018158:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801815a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801815c:	88db      	ldrh	r3, [r3, #6]
 801815e:	b29a      	uxth	r2, r3
 8018160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018162:	889b      	ldrh	r3, [r3, #4]
 8018164:	b29b      	uxth	r3, r3
 8018166:	429a      	cmp	r2, r3
 8018168:	d010      	beq.n	801818c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801816a:	2300      	movs	r3, #0
 801816c:	623b      	str	r3, [r7, #32]
 801816e:	e00d      	b.n	801818c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018170:	68fb      	ldr	r3, [r7, #12]
 8018172:	685b      	ldr	r3, [r3, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d006      	beq.n	8018186 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018178:	4b38      	ldr	r3, [pc, #224]	; (801825c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801817a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801817e:	493a      	ldr	r1, [pc, #232]	; (8018268 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018180:	4838      	ldr	r0, [pc, #224]	; (8018264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018182:	f000 ff1b 	bl	8018fbc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018186:	68fb      	ldr	r3, [r7, #12]
 8018188:	68ba      	ldr	r2, [r7, #8]
 801818a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d105      	bne.n	801819e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	7f9b      	ldrb	r3, [r3, #30]
 8018196:	f003 0301 	and.w	r3, r3, #1
 801819a:	2b00      	cmp	r3, #0
 801819c:	d059      	beq.n	8018252 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801819e:	6a3b      	ldr	r3, [r7, #32]
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d04f      	beq.n	8018244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	685b      	ldr	r3, [r3, #4]
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d006      	beq.n	80181ba <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	685b      	ldr	r3, [r3, #4]
 80181b2:	889b      	ldrh	r3, [r3, #4]
 80181b4:	b29b      	uxth	r3, r3
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d002      	beq.n	80181c0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80181ba:	2300      	movs	r3, #0
 80181bc:	623b      	str	r3, [r7, #32]
 80181be:	e041      	b.n	8018244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80181c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80181c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181c6:	681b      	ldr	r3, [r3, #0]
 80181c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80181ca:	e012      	b.n	80181f2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80181cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181ce:	685b      	ldr	r3, [r3, #4]
 80181d0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80181d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d4:	88db      	ldrh	r3, [r3, #6]
 80181d6:	b29a      	uxth	r2, r3
 80181d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181da:	889b      	ldrh	r3, [r3, #4]
 80181dc:	b29b      	uxth	r3, r3
 80181de:	429a      	cmp	r2, r3
 80181e0:	d002      	beq.n	80181e8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80181e2:	2300      	movs	r3, #0
 80181e4:	623b      	str	r3, [r7, #32]
            break;
 80181e6:	e007      	b.n	80181f8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80181e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ea:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80181ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80181f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d1e9      	bne.n	80181cc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80181f8:	6a3b      	ldr	r3, [r7, #32]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d022      	beq.n	8018244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	685b      	ldr	r3, [r3, #4]
 8018202:	2b00      	cmp	r3, #0
 8018204:	d106      	bne.n	8018214 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018206:	4b15      	ldr	r3, [pc, #84]	; (801825c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018208:	f240 12df 	movw	r2, #479	; 0x1df
 801820c:	4917      	ldr	r1, [pc, #92]	; (801826c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801820e:	4815      	ldr	r0, [pc, #84]	; (8018264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018210:	f000 fed4 	bl	8018fbc <iprintf>
          LWIP_ASSERT("sanity check",
 8018214:	68fb      	ldr	r3, [r7, #12]
 8018216:	685b      	ldr	r3, [r3, #4]
 8018218:	685b      	ldr	r3, [r3, #4]
 801821a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801821c:	429a      	cmp	r2, r3
 801821e:	d106      	bne.n	801822e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018220:	4b0e      	ldr	r3, [pc, #56]	; (801825c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018222:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018226:	4911      	ldr	r1, [pc, #68]	; (801826c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018228:	480e      	ldr	r0, [pc, #56]	; (8018264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801822a:	f000 fec7 	bl	8018fbc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801822e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d006      	beq.n	8018244 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018236:	4b09      	ldr	r3, [pc, #36]	; (801825c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018238:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801823c:	490c      	ldr	r1, [pc, #48]	; (8018270 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801823e:	4809      	ldr	r0, [pc, #36]	; (8018264 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018240:	f000 febc 	bl	8018fbc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018244:	6a3b      	ldr	r3, [r7, #32]
 8018246:	2b00      	cmp	r3, #0
 8018248:	bf14      	ite	ne
 801824a:	2301      	movne	r3, #1
 801824c:	2300      	moveq	r3, #0
 801824e:	b2db      	uxtb	r3, r3
 8018250:	e000      	b.n	8018254 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018252:	2300      	movs	r3, #0
}
 8018254:	4618      	mov	r0, r3
 8018256:	3730      	adds	r7, #48	; 0x30
 8018258:	46bd      	mov	sp, r7
 801825a:	bd80      	pop	{r7, pc}
 801825c:	0801cdfc 	.word	0x0801cdfc
 8018260:	0801cee0 	.word	0x0801cee0
 8018264:	0801ce44 	.word	0x0801ce44
 8018268:	0801cf00 	.word	0x0801cf00
 801826c:	0801cf38 	.word	0x0801cf38
 8018270:	0801cf48 	.word	0x0801cf48

08018274 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b08e      	sub	sp, #56	; 0x38
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	685b      	ldr	r3, [r3, #4]
 8018280:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018284:	781b      	ldrb	r3, [r3, #0]
 8018286:	f003 030f 	and.w	r3, r3, #15
 801828a:	b2db      	uxtb	r3, r3
 801828c:	009b      	lsls	r3, r3, #2
 801828e:	b2db      	uxtb	r3, r3
 8018290:	2b14      	cmp	r3, #20
 8018292:	f040 8171 	bne.w	8018578 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018298:	88db      	ldrh	r3, [r3, #6]
 801829a:	b29b      	uxth	r3, r3
 801829c:	4618      	mov	r0, r3
 801829e:	f7f3 fd0f 	bl	800bcc0 <lwip_htons>
 80182a2:	4603      	mov	r3, r0
 80182a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	00db      	lsls	r3, r3, #3
 80182ac:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80182ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182b0:	885b      	ldrh	r3, [r3, #2]
 80182b2:	b29b      	uxth	r3, r3
 80182b4:	4618      	mov	r0, r3
 80182b6:	f7f3 fd03 	bl	800bcc0 <lwip_htons>
 80182ba:	4603      	mov	r3, r0
 80182bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80182be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80182c0:	781b      	ldrb	r3, [r3, #0]
 80182c2:	f003 030f 	and.w	r3, r3, #15
 80182c6:	b2db      	uxtb	r3, r3
 80182c8:	009b      	lsls	r3, r3, #2
 80182ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80182ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80182d2:	b29b      	uxth	r3, r3
 80182d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80182d6:	429a      	cmp	r2, r3
 80182d8:	f0c0 8150 	bcc.w	801857c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80182dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80182e0:	b29b      	uxth	r3, r3
 80182e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80182e4:	1ad3      	subs	r3, r2, r3
 80182e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80182e8:	6878      	ldr	r0, [r7, #4]
 80182ea:	f7f5 f9ab 	bl	800d644 <pbuf_clen>
 80182ee:	4603      	mov	r3, r0
 80182f0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80182f2:	4b8c      	ldr	r3, [pc, #560]	; (8018524 <ip4_reass+0x2b0>)
 80182f4:	881b      	ldrh	r3, [r3, #0]
 80182f6:	461a      	mov	r2, r3
 80182f8:	8c3b      	ldrh	r3, [r7, #32]
 80182fa:	4413      	add	r3, r2
 80182fc:	2b0a      	cmp	r3, #10
 80182fe:	dd10      	ble.n	8018322 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018300:	8c3b      	ldrh	r3, [r7, #32]
 8018302:	4619      	mov	r1, r3
 8018304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018306:	f7ff fd81 	bl	8017e0c <ip_reass_remove_oldest_datagram>
 801830a:	4603      	mov	r3, r0
 801830c:	2b00      	cmp	r3, #0
 801830e:	f000 8137 	beq.w	8018580 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018312:	4b84      	ldr	r3, [pc, #528]	; (8018524 <ip4_reass+0x2b0>)
 8018314:	881b      	ldrh	r3, [r3, #0]
 8018316:	461a      	mov	r2, r3
 8018318:	8c3b      	ldrh	r3, [r7, #32]
 801831a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801831c:	2b0a      	cmp	r3, #10
 801831e:	f300 812f 	bgt.w	8018580 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018322:	4b81      	ldr	r3, [pc, #516]	; (8018528 <ip4_reass+0x2b4>)
 8018324:	681b      	ldr	r3, [r3, #0]
 8018326:	633b      	str	r3, [r7, #48]	; 0x30
 8018328:	e015      	b.n	8018356 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801832a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801832c:	695a      	ldr	r2, [r3, #20]
 801832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018330:	68db      	ldr	r3, [r3, #12]
 8018332:	429a      	cmp	r2, r3
 8018334:	d10c      	bne.n	8018350 <ip4_reass+0xdc>
 8018336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018338:	699a      	ldr	r2, [r3, #24]
 801833a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801833c:	691b      	ldr	r3, [r3, #16]
 801833e:	429a      	cmp	r2, r3
 8018340:	d106      	bne.n	8018350 <ip4_reass+0xdc>
 8018342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018344:	899a      	ldrh	r2, [r3, #12]
 8018346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018348:	889b      	ldrh	r3, [r3, #4]
 801834a:	b29b      	uxth	r3, r3
 801834c:	429a      	cmp	r2, r3
 801834e:	d006      	beq.n	801835e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	633b      	str	r3, [r7, #48]	; 0x30
 8018356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018358:	2b00      	cmp	r3, #0
 801835a:	d1e6      	bne.n	801832a <ip4_reass+0xb6>
 801835c:	e000      	b.n	8018360 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801835e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018362:	2b00      	cmp	r3, #0
 8018364:	d109      	bne.n	801837a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018366:	8c3b      	ldrh	r3, [r7, #32]
 8018368:	4619      	mov	r1, r3
 801836a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801836c:	f7ff fdb0 	bl	8017ed0 <ip_reass_enqueue_new_datagram>
 8018370:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018374:	2b00      	cmp	r3, #0
 8018376:	d11c      	bne.n	80183b2 <ip4_reass+0x13e>
      goto nullreturn;
 8018378:	e105      	b.n	8018586 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837c:	88db      	ldrh	r3, [r3, #6]
 801837e:	b29b      	uxth	r3, r3
 8018380:	4618      	mov	r0, r3
 8018382:	f7f3 fc9d 	bl	800bcc0 <lwip_htons>
 8018386:	4603      	mov	r3, r0
 8018388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801838c:	2b00      	cmp	r3, #0
 801838e:	d110      	bne.n	80183b2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018392:	89db      	ldrh	r3, [r3, #14]
 8018394:	4618      	mov	r0, r3
 8018396:	f7f3 fc93 	bl	800bcc0 <lwip_htons>
 801839a:	4603      	mov	r3, r0
 801839c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d006      	beq.n	80183b2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80183a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80183a6:	3308      	adds	r3, #8
 80183a8:	2214      	movs	r2, #20
 80183aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80183ac:	4618      	mov	r0, r3
 80183ae:	f000 ff03 	bl	80191b8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80183b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183b4:	88db      	ldrh	r3, [r3, #6]
 80183b6:	b29b      	uxth	r3, r3
 80183b8:	f003 0320 	and.w	r3, r3, #32
 80183bc:	2b00      	cmp	r3, #0
 80183be:	bf0c      	ite	eq
 80183c0:	2301      	moveq	r3, #1
 80183c2:	2300      	movne	r3, #0
 80183c4:	b2db      	uxtb	r3, r3
 80183c6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80183c8:	69fb      	ldr	r3, [r7, #28]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d00e      	beq.n	80183ec <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80183ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80183d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183d2:	4413      	add	r3, r2
 80183d4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80183d6:	8b7a      	ldrh	r2, [r7, #26]
 80183d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80183da:	429a      	cmp	r2, r3
 80183dc:	f0c0 80a0 	bcc.w	8018520 <ip4_reass+0x2ac>
 80183e0:	8b7b      	ldrh	r3, [r7, #26]
 80183e2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80183e6:	4293      	cmp	r3, r2
 80183e8:	f200 809a 	bhi.w	8018520 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80183ec:	69fa      	ldr	r2, [r7, #28]
 80183ee:	6879      	ldr	r1, [r7, #4]
 80183f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80183f2:	f7ff fdd5 	bl	8017fa0 <ip_reass_chain_frag_into_datagram_and_validate>
 80183f6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80183f8:	697b      	ldr	r3, [r7, #20]
 80183fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80183fe:	f000 809b 	beq.w	8018538 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018402:	4b48      	ldr	r3, [pc, #288]	; (8018524 <ip4_reass+0x2b0>)
 8018404:	881a      	ldrh	r2, [r3, #0]
 8018406:	8c3b      	ldrh	r3, [r7, #32]
 8018408:	4413      	add	r3, r2
 801840a:	b29a      	uxth	r2, r3
 801840c:	4b45      	ldr	r3, [pc, #276]	; (8018524 <ip4_reass+0x2b0>)
 801840e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018410:	69fb      	ldr	r3, [r7, #28]
 8018412:	2b00      	cmp	r3, #0
 8018414:	d00d      	beq.n	8018432 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018416:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801841a:	4413      	add	r3, r2
 801841c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018420:	8a7a      	ldrh	r2, [r7, #18]
 8018422:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018426:	7f9b      	ldrb	r3, [r3, #30]
 8018428:	f043 0301 	orr.w	r3, r3, #1
 801842c:	b2da      	uxtb	r2, r3
 801842e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018430:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018432:	697b      	ldr	r3, [r7, #20]
 8018434:	2b01      	cmp	r3, #1
 8018436:	d171      	bne.n	801851c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801843a:	8b9b      	ldrh	r3, [r3, #28]
 801843c:	3314      	adds	r3, #20
 801843e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	685b      	ldr	r3, [r3, #4]
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801844a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801844c:	685b      	ldr	r3, [r3, #4]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018454:	3308      	adds	r3, #8
 8018456:	2214      	movs	r2, #20
 8018458:	4619      	mov	r1, r3
 801845a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801845c:	f000 feac 	bl	80191b8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018460:	8a3b      	ldrh	r3, [r7, #16]
 8018462:	4618      	mov	r0, r3
 8018464:	f7f3 fc2c 	bl	800bcc0 <lwip_htons>
 8018468:	4603      	mov	r3, r0
 801846a:	461a      	mov	r2, r3
 801846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801846e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018472:	2200      	movs	r2, #0
 8018474:	719a      	strb	r2, [r3, #6]
 8018476:	2200      	movs	r2, #0
 8018478:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801847a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801847c:	2200      	movs	r2, #0
 801847e:	729a      	strb	r2, [r3, #10]
 8018480:	2200      	movs	r2, #0
 8018482:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018486:	685b      	ldr	r3, [r3, #4]
 8018488:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801848a:	e00d      	b.n	80184a8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801848c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801848e:	685b      	ldr	r3, [r3, #4]
 8018490:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018492:	2114      	movs	r1, #20
 8018494:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018496:	f7f4 ffc1 	bl	800d41c <pbuf_remove_header>
      pbuf_cat(p, r);
 801849a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801849c:	6878      	ldr	r0, [r7, #4]
 801849e:	f7f5 f911 	bl	800d6c4 <pbuf_cat>
      r = iprh->next_pbuf;
 80184a2:	68fb      	ldr	r3, [r7, #12]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80184a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80184aa:	2b00      	cmp	r3, #0
 80184ac:	d1ee      	bne.n	801848c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80184ae:	4b1e      	ldr	r3, [pc, #120]	; (8018528 <ip4_reass+0x2b4>)
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d102      	bne.n	80184be <ip4_reass+0x24a>
      ipr_prev = NULL;
 80184b8:	2300      	movs	r3, #0
 80184ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184bc:	e010      	b.n	80184e0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80184be:	4b1a      	ldr	r3, [pc, #104]	; (8018528 <ip4_reass+0x2b4>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184c4:	e007      	b.n	80184d6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80184c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80184cc:	429a      	cmp	r2, r3
 80184ce:	d006      	beq.n	80184de <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80184d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d2:	681b      	ldr	r3, [r3, #0]
 80184d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80184d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d1f4      	bne.n	80184c6 <ip4_reass+0x252>
 80184dc:	e000      	b.n	80184e0 <ip4_reass+0x26c>
          break;
 80184de:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80184e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80184e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80184e4:	f7ff fd2e 	bl	8017f44 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80184e8:	6878      	ldr	r0, [r7, #4]
 80184ea:	f7f5 f8ab 	bl	800d644 <pbuf_clen>
 80184ee:	4603      	mov	r3, r0
 80184f0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80184f2:	4b0c      	ldr	r3, [pc, #48]	; (8018524 <ip4_reass+0x2b0>)
 80184f4:	881b      	ldrh	r3, [r3, #0]
 80184f6:	8c3a      	ldrh	r2, [r7, #32]
 80184f8:	429a      	cmp	r2, r3
 80184fa:	d906      	bls.n	801850a <ip4_reass+0x296>
 80184fc:	4b0b      	ldr	r3, [pc, #44]	; (801852c <ip4_reass+0x2b8>)
 80184fe:	f240 229b 	movw	r2, #667	; 0x29b
 8018502:	490b      	ldr	r1, [pc, #44]	; (8018530 <ip4_reass+0x2bc>)
 8018504:	480b      	ldr	r0, [pc, #44]	; (8018534 <ip4_reass+0x2c0>)
 8018506:	f000 fd59 	bl	8018fbc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801850a:	4b06      	ldr	r3, [pc, #24]	; (8018524 <ip4_reass+0x2b0>)
 801850c:	881a      	ldrh	r2, [r3, #0]
 801850e:	8c3b      	ldrh	r3, [r7, #32]
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	b29a      	uxth	r2, r3
 8018514:	4b03      	ldr	r3, [pc, #12]	; (8018524 <ip4_reass+0x2b0>)
 8018516:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	e038      	b.n	801858e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801851c:	2300      	movs	r3, #0
 801851e:	e036      	b.n	801858e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018520:	bf00      	nop
 8018522:	e00a      	b.n	801853a <ip4_reass+0x2c6>
 8018524:	2000d068 	.word	0x2000d068
 8018528:	2000d064 	.word	0x2000d064
 801852c:	0801cdfc 	.word	0x0801cdfc
 8018530:	0801cf6c 	.word	0x0801cf6c
 8018534:	0801ce44 	.word	0x0801ce44
    goto nullreturn_ipr;
 8018538:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801853c:	2b00      	cmp	r3, #0
 801853e:	d106      	bne.n	801854e <ip4_reass+0x2da>
 8018540:	4b15      	ldr	r3, [pc, #84]	; (8018598 <ip4_reass+0x324>)
 8018542:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018546:	4915      	ldr	r1, [pc, #84]	; (801859c <ip4_reass+0x328>)
 8018548:	4815      	ldr	r0, [pc, #84]	; (80185a0 <ip4_reass+0x32c>)
 801854a:	f000 fd37 	bl	8018fbc <iprintf>
  if (ipr->p == NULL) {
 801854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018550:	685b      	ldr	r3, [r3, #4]
 8018552:	2b00      	cmp	r3, #0
 8018554:	d116      	bne.n	8018584 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018556:	4b13      	ldr	r3, [pc, #76]	; (80185a4 <ip4_reass+0x330>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801855c:	429a      	cmp	r2, r3
 801855e:	d006      	beq.n	801856e <ip4_reass+0x2fa>
 8018560:	4b0d      	ldr	r3, [pc, #52]	; (8018598 <ip4_reass+0x324>)
 8018562:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018566:	4910      	ldr	r1, [pc, #64]	; (80185a8 <ip4_reass+0x334>)
 8018568:	480d      	ldr	r0, [pc, #52]	; (80185a0 <ip4_reass+0x32c>)
 801856a:	f000 fd27 	bl	8018fbc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801856e:	2100      	movs	r1, #0
 8018570:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018572:	f7ff fce7 	bl	8017f44 <ip_reass_dequeue_datagram>
 8018576:	e006      	b.n	8018586 <ip4_reass+0x312>
    goto nullreturn;
 8018578:	bf00      	nop
 801857a:	e004      	b.n	8018586 <ip4_reass+0x312>
    goto nullreturn;
 801857c:	bf00      	nop
 801857e:	e002      	b.n	8018586 <ip4_reass+0x312>
      goto nullreturn;
 8018580:	bf00      	nop
 8018582:	e000      	b.n	8018586 <ip4_reass+0x312>
  }

nullreturn:
 8018584:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018586:	6878      	ldr	r0, [r7, #4]
 8018588:	f7f4 ffce 	bl	800d528 <pbuf_free>
  return NULL;
 801858c:	2300      	movs	r3, #0
}
 801858e:	4618      	mov	r0, r3
 8018590:	3738      	adds	r7, #56	; 0x38
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}
 8018596:	bf00      	nop
 8018598:	0801cdfc 	.word	0x0801cdfc
 801859c:	0801cf88 	.word	0x0801cf88
 80185a0:	0801ce44 	.word	0x0801ce44
 80185a4:	2000d064 	.word	0x2000d064
 80185a8:	0801cf94 	.word	0x0801cf94

080185ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80185b0:	2005      	movs	r0, #5
 80185b2:	f7f4 f893 	bl	800c6dc <memp_malloc>
 80185b6:	4603      	mov	r3, r0
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	bd80      	pop	{r7, pc}

080185bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b082      	sub	sp, #8
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d106      	bne.n	80185d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80185ca:	4b07      	ldr	r3, [pc, #28]	; (80185e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80185cc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80185d0:	4906      	ldr	r1, [pc, #24]	; (80185ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80185d2:	4807      	ldr	r0, [pc, #28]	; (80185f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80185d4:	f000 fcf2 	bl	8018fbc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80185d8:	6879      	ldr	r1, [r7, #4]
 80185da:	2005      	movs	r0, #5
 80185dc:	f7f4 f8f4 	bl	800c7c8 <memp_free>
}
 80185e0:	bf00      	nop
 80185e2:	3708      	adds	r7, #8
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}
 80185e8:	0801cdfc 	.word	0x0801cdfc
 80185ec:	0801cfb4 	.word	0x0801cfb4
 80185f0:	0801ce44 	.word	0x0801ce44

080185f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b084      	sub	sp, #16
 80185f8:	af00      	add	r7, sp, #0
 80185fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d106      	bne.n	8018614 <ipfrag_free_pbuf_custom+0x20>
 8018606:	4b11      	ldr	r3, [pc, #68]	; (801864c <ipfrag_free_pbuf_custom+0x58>)
 8018608:	f240 22ce 	movw	r2, #718	; 0x2ce
 801860c:	4910      	ldr	r1, [pc, #64]	; (8018650 <ipfrag_free_pbuf_custom+0x5c>)
 801860e:	4811      	ldr	r0, [pc, #68]	; (8018654 <ipfrag_free_pbuf_custom+0x60>)
 8018610:	f000 fcd4 	bl	8018fbc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8018614:	68fa      	ldr	r2, [r7, #12]
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	429a      	cmp	r2, r3
 801861a:	d006      	beq.n	801862a <ipfrag_free_pbuf_custom+0x36>
 801861c:	4b0b      	ldr	r3, [pc, #44]	; (801864c <ipfrag_free_pbuf_custom+0x58>)
 801861e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8018622:	490d      	ldr	r1, [pc, #52]	; (8018658 <ipfrag_free_pbuf_custom+0x64>)
 8018624:	480b      	ldr	r0, [pc, #44]	; (8018654 <ipfrag_free_pbuf_custom+0x60>)
 8018626:	f000 fcc9 	bl	8018fbc <iprintf>
  if (pcr->original != NULL) {
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	695b      	ldr	r3, [r3, #20]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d004      	beq.n	801863c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	695b      	ldr	r3, [r3, #20]
 8018636:	4618      	mov	r0, r3
 8018638:	f7f4 ff76 	bl	800d528 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801863c:	68f8      	ldr	r0, [r7, #12]
 801863e:	f7ff ffbd 	bl	80185bc <ip_frag_free_pbuf_custom_ref>
}
 8018642:	bf00      	nop
 8018644:	3710      	adds	r7, #16
 8018646:	46bd      	mov	sp, r7
 8018648:	bd80      	pop	{r7, pc}
 801864a:	bf00      	nop
 801864c:	0801cdfc 	.word	0x0801cdfc
 8018650:	0801cfc0 	.word	0x0801cfc0
 8018654:	0801ce44 	.word	0x0801ce44
 8018658:	0801cfcc 	.word	0x0801cfcc

0801865c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b094      	sub	sp, #80	; 0x50
 8018660:	af02      	add	r7, sp, #8
 8018662:	60f8      	str	r0, [r7, #12]
 8018664:	60b9      	str	r1, [r7, #8]
 8018666:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8018668:	2300      	movs	r3, #0
 801866a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801866e:	68bb      	ldr	r3, [r7, #8]
 8018670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018672:	3b14      	subs	r3, #20
 8018674:	2b00      	cmp	r3, #0
 8018676:	da00      	bge.n	801867a <ip4_frag+0x1e>
 8018678:	3307      	adds	r3, #7
 801867a:	10db      	asrs	r3, r3, #3
 801867c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801867e:	2314      	movs	r3, #20
 8018680:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	685b      	ldr	r3, [r3, #4]
 8018686:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8018688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801868a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801868c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801868e:	781b      	ldrb	r3, [r3, #0]
 8018690:	f003 030f 	and.w	r3, r3, #15
 8018694:	b2db      	uxtb	r3, r3
 8018696:	009b      	lsls	r3, r3, #2
 8018698:	b2db      	uxtb	r3, r3
 801869a:	2b14      	cmp	r3, #20
 801869c:	d002      	beq.n	80186a4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801869e:	f06f 0305 	mvn.w	r3, #5
 80186a2:	e110      	b.n	80188c6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	895b      	ldrh	r3, [r3, #10]
 80186a8:	2b13      	cmp	r3, #19
 80186aa:	d809      	bhi.n	80186c0 <ip4_frag+0x64>
 80186ac:	4b88      	ldr	r3, [pc, #544]	; (80188d0 <ip4_frag+0x274>)
 80186ae:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80186b2:	4988      	ldr	r1, [pc, #544]	; (80188d4 <ip4_frag+0x278>)
 80186b4:	4888      	ldr	r0, [pc, #544]	; (80188d8 <ip4_frag+0x27c>)
 80186b6:	f000 fc81 	bl	8018fbc <iprintf>
 80186ba:	f06f 0305 	mvn.w	r3, #5
 80186be:	e102      	b.n	80188c6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80186c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80186c2:	88db      	ldrh	r3, [r3, #6]
 80186c4:	b29b      	uxth	r3, r3
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7f3 fafa 	bl	800bcc0 <lwip_htons>
 80186cc:	4603      	mov	r3, r0
 80186ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80186d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80186d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80186da:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80186dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80186e0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80186e2:	68fb      	ldr	r3, [r7, #12]
 80186e4:	891b      	ldrh	r3, [r3, #8]
 80186e6:	3b14      	subs	r3, #20
 80186e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80186ec:	e0e1      	b.n	80188b2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80186ee:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80186f0:	00db      	lsls	r3, r3, #3
 80186f2:	b29b      	uxth	r3, r3
 80186f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80186f8:	4293      	cmp	r3, r2
 80186fa:	bf28      	it	cs
 80186fc:	4613      	movcs	r3, r2
 80186fe:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8018700:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018704:	2114      	movs	r1, #20
 8018706:	200e      	movs	r0, #14
 8018708:	f7f4 fc2a 	bl	800cf60 <pbuf_alloc>
 801870c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018710:	2b00      	cmp	r3, #0
 8018712:	f000 80d5 	beq.w	80188c0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8018716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018718:	895b      	ldrh	r3, [r3, #10]
 801871a:	2b13      	cmp	r3, #19
 801871c:	d806      	bhi.n	801872c <ip4_frag+0xd0>
 801871e:	4b6c      	ldr	r3, [pc, #432]	; (80188d0 <ip4_frag+0x274>)
 8018720:	f44f 7249 	mov.w	r2, #804	; 0x324
 8018724:	496d      	ldr	r1, [pc, #436]	; (80188dc <ip4_frag+0x280>)
 8018726:	486c      	ldr	r0, [pc, #432]	; (80188d8 <ip4_frag+0x27c>)
 8018728:	f000 fc48 	bl	8018fbc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801872e:	685b      	ldr	r3, [r3, #4]
 8018730:	2214      	movs	r2, #20
 8018732:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018734:	4618      	mov	r0, r3
 8018736:	f000 fd3f 	bl	80191b8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801873a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801873c:	685b      	ldr	r3, [r3, #4]
 801873e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8018740:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8018742:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8018746:	e064      	b.n	8018812 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	895a      	ldrh	r2, [r3, #10]
 801874c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801874e:	1ad3      	subs	r3, r2, r3
 8018750:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	895b      	ldrh	r3, [r3, #10]
 8018756:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8018758:	429a      	cmp	r2, r3
 801875a:	d906      	bls.n	801876a <ip4_frag+0x10e>
 801875c:	4b5c      	ldr	r3, [pc, #368]	; (80188d0 <ip4_frag+0x274>)
 801875e:	f240 322d 	movw	r2, #813	; 0x32d
 8018762:	495f      	ldr	r1, [pc, #380]	; (80188e0 <ip4_frag+0x284>)
 8018764:	485c      	ldr	r0, [pc, #368]	; (80188d8 <ip4_frag+0x27c>)
 8018766:	f000 fc29 	bl	8018fbc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801876a:	8bfa      	ldrh	r2, [r7, #30]
 801876c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018770:	4293      	cmp	r3, r2
 8018772:	bf28      	it	cs
 8018774:	4613      	movcs	r3, r2
 8018776:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801877a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801877e:	2b00      	cmp	r3, #0
 8018780:	d105      	bne.n	801878e <ip4_frag+0x132>
        poff = 0;
 8018782:	2300      	movs	r3, #0
 8018784:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	60fb      	str	r3, [r7, #12]
        continue;
 801878c:	e041      	b.n	8018812 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801878e:	f7ff ff0d 	bl	80185ac <ip_frag_alloc_pbuf_custom_ref>
 8018792:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8018794:	69bb      	ldr	r3, [r7, #24]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d103      	bne.n	80187a2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801879a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801879c:	f7f4 fec4 	bl	800d528 <pbuf_free>
        goto memerr;
 80187a0:	e08f      	b.n	80188c2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80187a2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80187a8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80187aa:	4413      	add	r3, r2
 80187ac:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80187b0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80187b4:	9201      	str	r2, [sp, #4]
 80187b6:	9300      	str	r3, [sp, #0]
 80187b8:	4603      	mov	r3, r0
 80187ba:	2241      	movs	r2, #65	; 0x41
 80187bc:	2000      	movs	r0, #0
 80187be:	f7f4 fcf9 	bl	800d1b4 <pbuf_alloced_custom>
 80187c2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80187c4:	697b      	ldr	r3, [r7, #20]
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	d106      	bne.n	80187d8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80187ca:	69b8      	ldr	r0, [r7, #24]
 80187cc:	f7ff fef6 	bl	80185bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80187d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80187d2:	f7f4 fea9 	bl	800d528 <pbuf_free>
        goto memerr;
 80187d6:	e074      	b.n	80188c2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80187d8:	68f8      	ldr	r0, [r7, #12]
 80187da:	f7f4 ff4b 	bl	800d674 <pbuf_ref>
      pcr->original = p;
 80187de:	69bb      	ldr	r3, [r7, #24]
 80187e0:	68fa      	ldr	r2, [r7, #12]
 80187e2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80187e4:	69bb      	ldr	r3, [r7, #24]
 80187e6:	4a3f      	ldr	r2, [pc, #252]	; (80188e4 <ip4_frag+0x288>)
 80187e8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80187ea:	6979      	ldr	r1, [r7, #20]
 80187ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80187ee:	f7f4 ff69 	bl	800d6c4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80187f2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80187f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80187fa:	1ad3      	subs	r3, r2, r3
 80187fc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8018800:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018804:	2b00      	cmp	r3, #0
 8018806:	d004      	beq.n	8018812 <ip4_frag+0x1b6>
        poff = 0;
 8018808:	2300      	movs	r3, #0
 801880a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801880c:	68fb      	ldr	r3, [r7, #12]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8018812:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8018816:	2b00      	cmp	r3, #0
 8018818:	d196      	bne.n	8018748 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801881a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801881c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8018820:	4413      	add	r3, r2
 8018822:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8018824:	68bb      	ldr	r3, [r7, #8]
 8018826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018828:	f1a3 0213 	sub.w	r2, r3, #19
 801882c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018830:	429a      	cmp	r2, r3
 8018832:	bfcc      	ite	gt
 8018834:	2301      	movgt	r3, #1
 8018836:	2300      	movle	r3, #0
 8018838:	b2db      	uxtb	r3, r3
 801883a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801883c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018844:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8018846:	6a3b      	ldr	r3, [r7, #32]
 8018848:	2b00      	cmp	r3, #0
 801884a:	d002      	beq.n	8018852 <ip4_frag+0x1f6>
 801884c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801884e:	2b00      	cmp	r3, #0
 8018850:	d003      	beq.n	801885a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8018852:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018854:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8018858:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801885a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801885c:	4618      	mov	r0, r3
 801885e:	f7f3 fa2f 	bl	800bcc0 <lwip_htons>
 8018862:	4603      	mov	r3, r0
 8018864:	461a      	mov	r2, r3
 8018866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018868:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801886a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801886c:	3314      	adds	r3, #20
 801886e:	b29b      	uxth	r3, r3
 8018870:	4618      	mov	r0, r3
 8018872:	f7f3 fa25 	bl	800bcc0 <lwip_htons>
 8018876:	4603      	mov	r3, r0
 8018878:	461a      	mov	r2, r3
 801887a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801887c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018880:	2200      	movs	r2, #0
 8018882:	729a      	strb	r2, [r3, #10]
 8018884:	2200      	movs	r2, #0
 8018886:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8018888:	68bb      	ldr	r3, [r7, #8]
 801888a:	695b      	ldr	r3, [r3, #20]
 801888c:	687a      	ldr	r2, [r7, #4]
 801888e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018890:	68b8      	ldr	r0, [r7, #8]
 8018892:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8018894:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018896:	f7f4 fe47 	bl	800d528 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801889a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801889e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80188a0:	1ad3      	subs	r3, r2, r3
 80188a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80188a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80188aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80188ac:	4413      	add	r3, r2
 80188ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80188b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	f47f af19 	bne.w	80186ee <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80188bc:	2300      	movs	r3, #0
 80188be:	e002      	b.n	80188c6 <ip4_frag+0x26a>
      goto memerr;
 80188c0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80188c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	3748      	adds	r7, #72	; 0x48
 80188ca:	46bd      	mov	sp, r7
 80188cc:	bd80      	pop	{r7, pc}
 80188ce:	bf00      	nop
 80188d0:	0801cdfc 	.word	0x0801cdfc
 80188d4:	0801cfd8 	.word	0x0801cfd8
 80188d8:	0801ce44 	.word	0x0801ce44
 80188dc:	0801cff4 	.word	0x0801cff4
 80188e0:	0801d014 	.word	0x0801d014
 80188e4:	080185f5 	.word	0x080185f5

080188e8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	b086      	sub	sp, #24
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	6078      	str	r0, [r7, #4]
 80188f0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80188f2:	230e      	movs	r3, #14
 80188f4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	895b      	ldrh	r3, [r3, #10]
 80188fa:	2b0e      	cmp	r3, #14
 80188fc:	d96e      	bls.n	80189dc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	7bdb      	ldrb	r3, [r3, #15]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d106      	bne.n	8018914 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8018906:	683b      	ldr	r3, [r7, #0]
 8018908:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801890c:	3301      	adds	r3, #1
 801890e:	b2da      	uxtb	r2, r3
 8018910:	687b      	ldr	r3, [r7, #4]
 8018912:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	685b      	ldr	r3, [r3, #4]
 8018918:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801891a:	693b      	ldr	r3, [r7, #16]
 801891c:	7b1a      	ldrb	r2, [r3, #12]
 801891e:	7b5b      	ldrb	r3, [r3, #13]
 8018920:	021b      	lsls	r3, r3, #8
 8018922:	4313      	orrs	r3, r2
 8018924:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8018926:	693b      	ldr	r3, [r7, #16]
 8018928:	781b      	ldrb	r3, [r3, #0]
 801892a:	f003 0301 	and.w	r3, r3, #1
 801892e:	2b00      	cmp	r3, #0
 8018930:	d023      	beq.n	801897a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8018932:	693b      	ldr	r3, [r7, #16]
 8018934:	781b      	ldrb	r3, [r3, #0]
 8018936:	2b01      	cmp	r3, #1
 8018938:	d10f      	bne.n	801895a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801893a:	693b      	ldr	r3, [r7, #16]
 801893c:	785b      	ldrb	r3, [r3, #1]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d11b      	bne.n	801897a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018942:	693b      	ldr	r3, [r7, #16]
 8018944:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018946:	2b5e      	cmp	r3, #94	; 0x5e
 8018948:	d117      	bne.n	801897a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	7b5b      	ldrb	r3, [r3, #13]
 801894e:	f043 0310 	orr.w	r3, r3, #16
 8018952:	b2da      	uxtb	r2, r3
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	735a      	strb	r2, [r3, #13]
 8018958:	e00f      	b.n	801897a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801895a:	693b      	ldr	r3, [r7, #16]
 801895c:	2206      	movs	r2, #6
 801895e:	4928      	ldr	r1, [pc, #160]	; (8018a00 <ethernet_input+0x118>)
 8018960:	4618      	mov	r0, r3
 8018962:	f000 fb80 	bl	8019066 <memcmp>
 8018966:	4603      	mov	r3, r0
 8018968:	2b00      	cmp	r3, #0
 801896a:	d106      	bne.n	801897a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	7b5b      	ldrb	r3, [r3, #13]
 8018970:	f043 0308 	orr.w	r3, r3, #8
 8018974:	b2da      	uxtb	r2, r3
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801897a:	89fb      	ldrh	r3, [r7, #14]
 801897c:	2b08      	cmp	r3, #8
 801897e:	d003      	beq.n	8018988 <ethernet_input+0xa0>
 8018980:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018984:	d014      	beq.n	80189b0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018986:	e032      	b.n	80189ee <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801898e:	f003 0308 	and.w	r3, r3, #8
 8018992:	2b00      	cmp	r3, #0
 8018994:	d024      	beq.n	80189e0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018996:	8afb      	ldrh	r3, [r7, #22]
 8018998:	4619      	mov	r1, r3
 801899a:	6878      	ldr	r0, [r7, #4]
 801899c:	f7f4 fd3e 	bl	800d41c <pbuf_remove_header>
 80189a0:	4603      	mov	r3, r0
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d11e      	bne.n	80189e4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80189a6:	6839      	ldr	r1, [r7, #0]
 80189a8:	6878      	ldr	r0, [r7, #4]
 80189aa:	f7fe ff03 	bl	80177b4 <ip4_input>
      break;
 80189ae:	e013      	b.n	80189d8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80189b0:	683b      	ldr	r3, [r7, #0]
 80189b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80189b6:	f003 0308 	and.w	r3, r3, #8
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d014      	beq.n	80189e8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80189be:	8afb      	ldrh	r3, [r7, #22]
 80189c0:	4619      	mov	r1, r3
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	f7f4 fd2a 	bl	800d41c <pbuf_remove_header>
 80189c8:	4603      	mov	r3, r0
 80189ca:	2b00      	cmp	r3, #0
 80189cc:	d10e      	bne.n	80189ec <ethernet_input+0x104>
        etharp_input(p, netif);
 80189ce:	6839      	ldr	r1, [r7, #0]
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f7fe f89f 	bl	8016b14 <etharp_input>
      break;
 80189d6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80189d8:	2300      	movs	r3, #0
 80189da:	e00c      	b.n	80189f6 <ethernet_input+0x10e>
    goto free_and_return;
 80189dc:	bf00      	nop
 80189de:	e006      	b.n	80189ee <ethernet_input+0x106>
        goto free_and_return;
 80189e0:	bf00      	nop
 80189e2:	e004      	b.n	80189ee <ethernet_input+0x106>
        goto free_and_return;
 80189e4:	bf00      	nop
 80189e6:	e002      	b.n	80189ee <ethernet_input+0x106>
        goto free_and_return;
 80189e8:	bf00      	nop
 80189ea:	e000      	b.n	80189ee <ethernet_input+0x106>
        goto free_and_return;
 80189ec:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80189ee:	6878      	ldr	r0, [r7, #4]
 80189f0:	f7f4 fd9a 	bl	800d528 <pbuf_free>
  return ERR_OK;
 80189f4:	2300      	movs	r3, #0
}
 80189f6:	4618      	mov	r0, r3
 80189f8:	3718      	adds	r7, #24
 80189fa:	46bd      	mov	sp, r7
 80189fc:	bd80      	pop	{r7, pc}
 80189fe:	bf00      	nop
 8018a00:	0801f5cc 	.word	0x0801f5cc

08018a04 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8018a04:	b580      	push	{r7, lr}
 8018a06:	b086      	sub	sp, #24
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	60f8      	str	r0, [r7, #12]
 8018a0c:	60b9      	str	r1, [r7, #8]
 8018a0e:	607a      	str	r2, [r7, #4]
 8018a10:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8018a12:	8c3b      	ldrh	r3, [r7, #32]
 8018a14:	4618      	mov	r0, r3
 8018a16:	f7f3 f953 	bl	800bcc0 <lwip_htons>
 8018a1a:	4603      	mov	r3, r0
 8018a1c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8018a1e:	210e      	movs	r1, #14
 8018a20:	68b8      	ldr	r0, [r7, #8]
 8018a22:	f7f4 fceb 	bl	800d3fc <pbuf_add_header>
 8018a26:	4603      	mov	r3, r0
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d125      	bne.n	8018a78 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	685b      	ldr	r3, [r3, #4]
 8018a30:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8018a32:	693b      	ldr	r3, [r7, #16]
 8018a34:	8afa      	ldrh	r2, [r7, #22]
 8018a36:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8018a38:	693b      	ldr	r3, [r7, #16]
 8018a3a:	2206      	movs	r2, #6
 8018a3c:	6839      	ldr	r1, [r7, #0]
 8018a3e:	4618      	mov	r0, r3
 8018a40:	f000 fbba 	bl	80191b8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018a44:	693b      	ldr	r3, [r7, #16]
 8018a46:	3306      	adds	r3, #6
 8018a48:	2206      	movs	r2, #6
 8018a4a:	6879      	ldr	r1, [r7, #4]
 8018a4c:	4618      	mov	r0, r3
 8018a4e:	f000 fbb3 	bl	80191b8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018a52:	68fb      	ldr	r3, [r7, #12]
 8018a54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018a58:	2b06      	cmp	r3, #6
 8018a5a:	d006      	beq.n	8018a6a <ethernet_output+0x66>
 8018a5c:	4b0a      	ldr	r3, [pc, #40]	; (8018a88 <ethernet_output+0x84>)
 8018a5e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018a62:	490a      	ldr	r1, [pc, #40]	; (8018a8c <ethernet_output+0x88>)
 8018a64:	480a      	ldr	r0, [pc, #40]	; (8018a90 <ethernet_output+0x8c>)
 8018a66:	f000 faa9 	bl	8018fbc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	699b      	ldr	r3, [r3, #24]
 8018a6e:	68b9      	ldr	r1, [r7, #8]
 8018a70:	68f8      	ldr	r0, [r7, #12]
 8018a72:	4798      	blx	r3
 8018a74:	4603      	mov	r3, r0
 8018a76:	e002      	b.n	8018a7e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018a78:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018a7a:	f06f 0301 	mvn.w	r3, #1
}
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3718      	adds	r7, #24
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	0801d024 	.word	0x0801d024
 8018a8c:	0801d05c 	.word	0x0801d05c
 8018a90:	0801d090 	.word	0x0801d090

08018a94 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b086      	sub	sp, #24
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018a9e:	683b      	ldr	r3, [r7, #0]
 8018aa0:	60bb      	str	r3, [r7, #8]
 8018aa2:	2304      	movs	r3, #4
 8018aa4:	60fb      	str	r3, [r7, #12]
 8018aa6:	2300      	movs	r3, #0
 8018aa8:	613b      	str	r3, [r7, #16]
 8018aaa:	2300      	movs	r3, #0
 8018aac:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018aae:	f107 0308 	add.w	r3, r7, #8
 8018ab2:	2100      	movs	r1, #0
 8018ab4:	4618      	mov	r0, r3
 8018ab6:	f7ee fefb 	bl	80078b0 <osMessageCreate>
 8018aba:	4602      	mov	r2, r0
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	681b      	ldr	r3, [r3, #0]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d102      	bne.n	8018ace <sys_mbox_new+0x3a>
    return ERR_MEM;
 8018ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8018acc:	e000      	b.n	8018ad0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8018ace:	2300      	movs	r3, #0
}
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	3718      	adds	r7, #24
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	bd80      	pop	{r7, pc}

08018ad8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018ad8:	b580      	push	{r7, lr}
 8018ada:	b084      	sub	sp, #16
 8018adc:	af00      	add	r7, sp, #0
 8018ade:	6078      	str	r0, [r7, #4]
 8018ae0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	6839      	ldr	r1, [r7, #0]
 8018ae8:	2200      	movs	r2, #0
 8018aea:	4618      	mov	r0, r3
 8018aec:	f7ee ff08 	bl	8007900 <osMessagePut>
 8018af0:	4603      	mov	r3, r0
 8018af2:	2b00      	cmp	r3, #0
 8018af4:	d102      	bne.n	8018afc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018af6:	2300      	movs	r3, #0
 8018af8:	73fb      	strb	r3, [r7, #15]
 8018afa:	e001      	b.n	8018b00 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018afc:	23ff      	movs	r3, #255	; 0xff
 8018afe:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b04:	4618      	mov	r0, r3
 8018b06:	3710      	adds	r7, #16
 8018b08:	46bd      	mov	sp, r7
 8018b0a:	bd80      	pop	{r7, pc}

08018b0c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018b0c:	b580      	push	{r7, lr}
 8018b0e:	b08c      	sub	sp, #48	; 0x30
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	61f8      	str	r0, [r7, #28]
 8018b14:	61b9      	str	r1, [r7, #24]
 8018b16:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018b18:	f7ee fd3a 	bl	8007590 <osKernelSysTick>
 8018b1c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018b1e:	697b      	ldr	r3, [r7, #20]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d017      	beq.n	8018b54 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018b24:	69fb      	ldr	r3, [r7, #28]
 8018b26:	6819      	ldr	r1, [r3, #0]
 8018b28:	f107 0320 	add.w	r3, r7, #32
 8018b2c:	697a      	ldr	r2, [r7, #20]
 8018b2e:	4618      	mov	r0, r3
 8018b30:	f7ee ff26 	bl	8007980 <osMessageGet>

    if(event.status == osEventMessage)
 8018b34:	6a3b      	ldr	r3, [r7, #32]
 8018b36:	2b10      	cmp	r3, #16
 8018b38:	d109      	bne.n	8018b4e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b3c:	461a      	mov	r2, r3
 8018b3e:	69bb      	ldr	r3, [r7, #24]
 8018b40:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018b42:	f7ee fd25 	bl	8007590 <osKernelSysTick>
 8018b46:	4602      	mov	r2, r0
 8018b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b4a:	1ad3      	subs	r3, r2, r3
 8018b4c:	e019      	b.n	8018b82 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018b52:	e016      	b.n	8018b82 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018b54:	69fb      	ldr	r3, [r7, #28]
 8018b56:	6819      	ldr	r1, [r3, #0]
 8018b58:	463b      	mov	r3, r7
 8018b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8018b5e:	4618      	mov	r0, r3
 8018b60:	f7ee ff0e 	bl	8007980 <osMessageGet>
 8018b64:	f107 0320 	add.w	r3, r7, #32
 8018b68:	463a      	mov	r2, r7
 8018b6a:	ca07      	ldmia	r2, {r0, r1, r2}
 8018b6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b72:	461a      	mov	r2, r3
 8018b74:	69bb      	ldr	r3, [r7, #24]
 8018b76:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018b78:	f7ee fd0a 	bl	8007590 <osKernelSysTick>
 8018b7c:	4602      	mov	r2, r0
 8018b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b80:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	3730      	adds	r7, #48	; 0x30
 8018b86:	46bd      	mov	sp, r7
 8018b88:	bd80      	pop	{r7, pc}

08018b8a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018b8a:	b480      	push	{r7}
 8018b8c:	b083      	sub	sp, #12
 8018b8e:	af00      	add	r7, sp, #0
 8018b90:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018b92:	687b      	ldr	r3, [r7, #4]
 8018b94:	681b      	ldr	r3, [r3, #0]
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d101      	bne.n	8018b9e <sys_mbox_valid+0x14>
    return 0;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	e000      	b.n	8018ba0 <sys_mbox_valid+0x16>
  else
    return 1;
 8018b9e:	2301      	movs	r3, #1
}
 8018ba0:	4618      	mov	r0, r3
 8018ba2:	370c      	adds	r7, #12
 8018ba4:	46bd      	mov	sp, r7
 8018ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018baa:	4770      	bx	lr

08018bac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018bb0:	4803      	ldr	r0, [pc, #12]	; (8018bc0 <sys_init+0x14>)
 8018bb2:	f7ee fd5d 	bl	8007670 <osMutexCreate>
 8018bb6:	4603      	mov	r3, r0
 8018bb8:	4a02      	ldr	r2, [pc, #8]	; (8018bc4 <sys_init+0x18>)
 8018bba:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018bbc:	bf00      	nop
 8018bbe:	bd80      	pop	{r7, pc}
 8018bc0:	0801f5dc 	.word	0x0801f5dc
 8018bc4:	2000d070 	.word	0x2000d070

08018bc8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018bc8:	b580      	push	{r7, lr}
 8018bca:	b084      	sub	sp, #16
 8018bcc:	af00      	add	r7, sp, #0
 8018bce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	60bb      	str	r3, [r7, #8]
 8018bd4:	2300      	movs	r3, #0
 8018bd6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018bd8:	f107 0308 	add.w	r3, r7, #8
 8018bdc:	4618      	mov	r0, r3
 8018bde:	f7ee fd47 	bl	8007670 <osMutexCreate>
 8018be2:	4602      	mov	r2, r0
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d102      	bne.n	8018bf6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bf4:	e000      	b.n	8018bf8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018bf6:	2300      	movs	r3, #0
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3710      	adds	r7, #16
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd80      	pop	{r7, pc}

08018c00 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b082      	sub	sp, #8
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	681b      	ldr	r3, [r3, #0]
 8018c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8018c10:	4618      	mov	r0, r3
 8018c12:	f7ee fd45 	bl	80076a0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018c16:	bf00      	nop
 8018c18:	3708      	adds	r7, #8
 8018c1a:	46bd      	mov	sp, r7
 8018c1c:	bd80      	pop	{r7, pc}

08018c1e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018c1e:	b580      	push	{r7, lr}
 8018c20:	b082      	sub	sp, #8
 8018c22:	af00      	add	r7, sp, #0
 8018c24:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018c26:	687b      	ldr	r3, [r7, #4]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	4618      	mov	r0, r3
 8018c2c:	f7ee fd86 	bl	800773c <osMutexRelease>
}
 8018c30:	bf00      	nop
 8018c32:	3708      	adds	r7, #8
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bd80      	pop	{r7, pc}

08018c38 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b08c      	sub	sp, #48	; 0x30
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	60f8      	str	r0, [r7, #12]
 8018c40:	60b9      	str	r1, [r7, #8]
 8018c42:	607a      	str	r2, [r7, #4]
 8018c44:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018c46:	f107 0314 	add.w	r3, r7, #20
 8018c4a:	2200      	movs	r2, #0
 8018c4c:	601a      	str	r2, [r3, #0]
 8018c4e:	605a      	str	r2, [r3, #4]
 8018c50:	609a      	str	r2, [r3, #8]
 8018c52:	60da      	str	r2, [r3, #12]
 8018c54:	611a      	str	r2, [r3, #16]
 8018c56:	615a      	str	r2, [r3, #20]
 8018c58:	619a      	str	r2, [r3, #24]
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	617b      	str	r3, [r7, #20]
 8018c5e:	68bb      	ldr	r3, [r7, #8]
 8018c60:	61bb      	str	r3, [r7, #24]
 8018c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018c64:	b21b      	sxth	r3, r3
 8018c66:	83bb      	strh	r3, [r7, #28]
 8018c68:	683b      	ldr	r3, [r7, #0]
 8018c6a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018c6c:	f107 0314 	add.w	r3, r7, #20
 8018c70:	6879      	ldr	r1, [r7, #4]
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7ee fc9c 	bl	80075b0 <osThreadCreate>
 8018c78:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018c7a:	4618      	mov	r0, r3
 8018c7c:	3730      	adds	r7, #48	; 0x30
 8018c7e:	46bd      	mov	sp, r7
 8018c80:	bd80      	pop	{r7, pc}
	...

08018c84 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018c88:	4b04      	ldr	r3, [pc, #16]	; (8018c9c <sys_arch_protect+0x18>)
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8018c90:	4618      	mov	r0, r3
 8018c92:	f7ee fd05 	bl	80076a0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018c96:	2301      	movs	r3, #1
}
 8018c98:	4618      	mov	r0, r3
 8018c9a:	bd80      	pop	{r7, pc}
 8018c9c:	2000d070 	.word	0x2000d070

08018ca0 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018ca0:	b580      	push	{r7, lr}
 8018ca2:	b082      	sub	sp, #8
 8018ca4:	af00      	add	r7, sp, #0
 8018ca6:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018ca8:	4b04      	ldr	r3, [pc, #16]	; (8018cbc <sys_arch_unprotect+0x1c>)
 8018caa:	681b      	ldr	r3, [r3, #0]
 8018cac:	4618      	mov	r0, r3
 8018cae:	f7ee fd45 	bl	800773c <osMutexRelease>
}
 8018cb2:	bf00      	nop
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	2000d070 	.word	0x2000d070

08018cc0 <atoi>:
 8018cc0:	220a      	movs	r2, #10
 8018cc2:	2100      	movs	r1, #0
 8018cc4:	f000 b8c0 	b.w	8018e48 <strtol>

08018cc8 <rand>:
 8018cc8:	4b16      	ldr	r3, [pc, #88]	; (8018d24 <rand+0x5c>)
 8018cca:	b510      	push	{r4, lr}
 8018ccc:	681c      	ldr	r4, [r3, #0]
 8018cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8018cd0:	b9b3      	cbnz	r3, 8018d00 <rand+0x38>
 8018cd2:	2018      	movs	r0, #24
 8018cd4:	f000 fa9c 	bl	8019210 <malloc>
 8018cd8:	4602      	mov	r2, r0
 8018cda:	6320      	str	r0, [r4, #48]	; 0x30
 8018cdc:	b920      	cbnz	r0, 8018ce8 <rand+0x20>
 8018cde:	4b12      	ldr	r3, [pc, #72]	; (8018d28 <rand+0x60>)
 8018ce0:	4812      	ldr	r0, [pc, #72]	; (8018d2c <rand+0x64>)
 8018ce2:	2152      	movs	r1, #82	; 0x52
 8018ce4:	f000 fa76 	bl	80191d4 <__assert_func>
 8018ce8:	4911      	ldr	r1, [pc, #68]	; (8018d30 <rand+0x68>)
 8018cea:	4b12      	ldr	r3, [pc, #72]	; (8018d34 <rand+0x6c>)
 8018cec:	e9c0 1300 	strd	r1, r3, [r0]
 8018cf0:	4b11      	ldr	r3, [pc, #68]	; (8018d38 <rand+0x70>)
 8018cf2:	6083      	str	r3, [r0, #8]
 8018cf4:	230b      	movs	r3, #11
 8018cf6:	8183      	strh	r3, [r0, #12]
 8018cf8:	2100      	movs	r1, #0
 8018cfa:	2001      	movs	r0, #1
 8018cfc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8018d00:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018d02:	480e      	ldr	r0, [pc, #56]	; (8018d3c <rand+0x74>)
 8018d04:	690b      	ldr	r3, [r1, #16]
 8018d06:	694c      	ldr	r4, [r1, #20]
 8018d08:	4a0d      	ldr	r2, [pc, #52]	; (8018d40 <rand+0x78>)
 8018d0a:	4358      	muls	r0, r3
 8018d0c:	fb02 0004 	mla	r0, r2, r4, r0
 8018d10:	fba3 3202 	umull	r3, r2, r3, r2
 8018d14:	3301      	adds	r3, #1
 8018d16:	eb40 0002 	adc.w	r0, r0, r2
 8018d1a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8018d1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018d22:	bd10      	pop	{r4, pc}
 8018d24:	200000a4 	.word	0x200000a4
 8018d28:	0801f5e4 	.word	0x0801f5e4
 8018d2c:	0801f5fb 	.word	0x0801f5fb
 8018d30:	abcd330e 	.word	0xabcd330e
 8018d34:	e66d1234 	.word	0xe66d1234
 8018d38:	0005deec 	.word	0x0005deec
 8018d3c:	5851f42d 	.word	0x5851f42d
 8018d40:	4c957f2d 	.word	0x4c957f2d

08018d44 <_strtol_l.constprop.0>:
 8018d44:	2b01      	cmp	r3, #1
 8018d46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d4a:	d001      	beq.n	8018d50 <_strtol_l.constprop.0+0xc>
 8018d4c:	2b24      	cmp	r3, #36	; 0x24
 8018d4e:	d906      	bls.n	8018d5e <_strtol_l.constprop.0+0x1a>
 8018d50:	f000 fa06 	bl	8019160 <__errno>
 8018d54:	2316      	movs	r3, #22
 8018d56:	6003      	str	r3, [r0, #0]
 8018d58:	2000      	movs	r0, #0
 8018d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018d5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018e44 <_strtol_l.constprop.0+0x100>
 8018d62:	460d      	mov	r5, r1
 8018d64:	462e      	mov	r6, r5
 8018d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018d6a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8018d6e:	f017 0708 	ands.w	r7, r7, #8
 8018d72:	d1f7      	bne.n	8018d64 <_strtol_l.constprop.0+0x20>
 8018d74:	2c2d      	cmp	r4, #45	; 0x2d
 8018d76:	d132      	bne.n	8018dde <_strtol_l.constprop.0+0x9a>
 8018d78:	782c      	ldrb	r4, [r5, #0]
 8018d7a:	2701      	movs	r7, #1
 8018d7c:	1cb5      	adds	r5, r6, #2
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d05b      	beq.n	8018e3a <_strtol_l.constprop.0+0xf6>
 8018d82:	2b10      	cmp	r3, #16
 8018d84:	d109      	bne.n	8018d9a <_strtol_l.constprop.0+0x56>
 8018d86:	2c30      	cmp	r4, #48	; 0x30
 8018d88:	d107      	bne.n	8018d9a <_strtol_l.constprop.0+0x56>
 8018d8a:	782c      	ldrb	r4, [r5, #0]
 8018d8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018d90:	2c58      	cmp	r4, #88	; 0x58
 8018d92:	d14d      	bne.n	8018e30 <_strtol_l.constprop.0+0xec>
 8018d94:	786c      	ldrb	r4, [r5, #1]
 8018d96:	2310      	movs	r3, #16
 8018d98:	3502      	adds	r5, #2
 8018d9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8018d9e:	f108 38ff 	add.w	r8, r8, #4294967295
 8018da2:	f04f 0e00 	mov.w	lr, #0
 8018da6:	fbb8 f9f3 	udiv	r9, r8, r3
 8018daa:	4676      	mov	r6, lr
 8018dac:	fb03 8a19 	mls	sl, r3, r9, r8
 8018db0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018db4:	f1bc 0f09 	cmp.w	ip, #9
 8018db8:	d816      	bhi.n	8018de8 <_strtol_l.constprop.0+0xa4>
 8018dba:	4664      	mov	r4, ip
 8018dbc:	42a3      	cmp	r3, r4
 8018dbe:	dd24      	ble.n	8018e0a <_strtol_l.constprop.0+0xc6>
 8018dc0:	f1be 3fff 	cmp.w	lr, #4294967295
 8018dc4:	d008      	beq.n	8018dd8 <_strtol_l.constprop.0+0x94>
 8018dc6:	45b1      	cmp	r9, r6
 8018dc8:	d31c      	bcc.n	8018e04 <_strtol_l.constprop.0+0xc0>
 8018dca:	d101      	bne.n	8018dd0 <_strtol_l.constprop.0+0x8c>
 8018dcc:	45a2      	cmp	sl, r4
 8018dce:	db19      	blt.n	8018e04 <_strtol_l.constprop.0+0xc0>
 8018dd0:	fb06 4603 	mla	r6, r6, r3, r4
 8018dd4:	f04f 0e01 	mov.w	lr, #1
 8018dd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018ddc:	e7e8      	b.n	8018db0 <_strtol_l.constprop.0+0x6c>
 8018dde:	2c2b      	cmp	r4, #43	; 0x2b
 8018de0:	bf04      	itt	eq
 8018de2:	782c      	ldrbeq	r4, [r5, #0]
 8018de4:	1cb5      	addeq	r5, r6, #2
 8018de6:	e7ca      	b.n	8018d7e <_strtol_l.constprop.0+0x3a>
 8018de8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018dec:	f1bc 0f19 	cmp.w	ip, #25
 8018df0:	d801      	bhi.n	8018df6 <_strtol_l.constprop.0+0xb2>
 8018df2:	3c37      	subs	r4, #55	; 0x37
 8018df4:	e7e2      	b.n	8018dbc <_strtol_l.constprop.0+0x78>
 8018df6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8018dfa:	f1bc 0f19 	cmp.w	ip, #25
 8018dfe:	d804      	bhi.n	8018e0a <_strtol_l.constprop.0+0xc6>
 8018e00:	3c57      	subs	r4, #87	; 0x57
 8018e02:	e7db      	b.n	8018dbc <_strtol_l.constprop.0+0x78>
 8018e04:	f04f 3eff 	mov.w	lr, #4294967295
 8018e08:	e7e6      	b.n	8018dd8 <_strtol_l.constprop.0+0x94>
 8018e0a:	f1be 3fff 	cmp.w	lr, #4294967295
 8018e0e:	d105      	bne.n	8018e1c <_strtol_l.constprop.0+0xd8>
 8018e10:	2322      	movs	r3, #34	; 0x22
 8018e12:	6003      	str	r3, [r0, #0]
 8018e14:	4646      	mov	r6, r8
 8018e16:	b942      	cbnz	r2, 8018e2a <_strtol_l.constprop.0+0xe6>
 8018e18:	4630      	mov	r0, r6
 8018e1a:	e79e      	b.n	8018d5a <_strtol_l.constprop.0+0x16>
 8018e1c:	b107      	cbz	r7, 8018e20 <_strtol_l.constprop.0+0xdc>
 8018e1e:	4276      	negs	r6, r6
 8018e20:	2a00      	cmp	r2, #0
 8018e22:	d0f9      	beq.n	8018e18 <_strtol_l.constprop.0+0xd4>
 8018e24:	f1be 0f00 	cmp.w	lr, #0
 8018e28:	d000      	beq.n	8018e2c <_strtol_l.constprop.0+0xe8>
 8018e2a:	1e69      	subs	r1, r5, #1
 8018e2c:	6011      	str	r1, [r2, #0]
 8018e2e:	e7f3      	b.n	8018e18 <_strtol_l.constprop.0+0xd4>
 8018e30:	2430      	movs	r4, #48	; 0x30
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d1b1      	bne.n	8018d9a <_strtol_l.constprop.0+0x56>
 8018e36:	2308      	movs	r3, #8
 8018e38:	e7af      	b.n	8018d9a <_strtol_l.constprop.0+0x56>
 8018e3a:	2c30      	cmp	r4, #48	; 0x30
 8018e3c:	d0a5      	beq.n	8018d8a <_strtol_l.constprop.0+0x46>
 8018e3e:	230a      	movs	r3, #10
 8018e40:	e7ab      	b.n	8018d9a <_strtol_l.constprop.0+0x56>
 8018e42:	bf00      	nop
 8018e44:	0801f654 	.word	0x0801f654

08018e48 <strtol>:
 8018e48:	4613      	mov	r3, r2
 8018e4a:	460a      	mov	r2, r1
 8018e4c:	4601      	mov	r1, r0
 8018e4e:	4802      	ldr	r0, [pc, #8]	; (8018e58 <strtol+0x10>)
 8018e50:	6800      	ldr	r0, [r0, #0]
 8018e52:	f7ff bf77 	b.w	8018d44 <_strtol_l.constprop.0>
 8018e56:	bf00      	nop
 8018e58:	200000a4 	.word	0x200000a4

08018e5c <std>:
 8018e5c:	2300      	movs	r3, #0
 8018e5e:	b510      	push	{r4, lr}
 8018e60:	4604      	mov	r4, r0
 8018e62:	e9c0 3300 	strd	r3, r3, [r0]
 8018e66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018e6a:	6083      	str	r3, [r0, #8]
 8018e6c:	8181      	strh	r1, [r0, #12]
 8018e6e:	6643      	str	r3, [r0, #100]	; 0x64
 8018e70:	81c2      	strh	r2, [r0, #14]
 8018e72:	6183      	str	r3, [r0, #24]
 8018e74:	4619      	mov	r1, r3
 8018e76:	2208      	movs	r2, #8
 8018e78:	305c      	adds	r0, #92	; 0x5c
 8018e7a:	f000 f904 	bl	8019086 <memset>
 8018e7e:	4b05      	ldr	r3, [pc, #20]	; (8018e94 <std+0x38>)
 8018e80:	6263      	str	r3, [r4, #36]	; 0x24
 8018e82:	4b05      	ldr	r3, [pc, #20]	; (8018e98 <std+0x3c>)
 8018e84:	62a3      	str	r3, [r4, #40]	; 0x28
 8018e86:	4b05      	ldr	r3, [pc, #20]	; (8018e9c <std+0x40>)
 8018e88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018e8a:	4b05      	ldr	r3, [pc, #20]	; (8018ea0 <std+0x44>)
 8018e8c:	6224      	str	r4, [r4, #32]
 8018e8e:	6323      	str	r3, [r4, #48]	; 0x30
 8018e90:	bd10      	pop	{r4, pc}
 8018e92:	bf00      	nop
 8018e94:	08018fe1 	.word	0x08018fe1
 8018e98:	08019003 	.word	0x08019003
 8018e9c:	0801903b 	.word	0x0801903b
 8018ea0:	0801905f 	.word	0x0801905f

08018ea4 <stdio_exit_handler>:
 8018ea4:	4a02      	ldr	r2, [pc, #8]	; (8018eb0 <stdio_exit_handler+0xc>)
 8018ea6:	4903      	ldr	r1, [pc, #12]	; (8018eb4 <stdio_exit_handler+0x10>)
 8018ea8:	4803      	ldr	r0, [pc, #12]	; (8018eb8 <stdio_exit_handler+0x14>)
 8018eaa:	f000 b869 	b.w	8018f80 <_fwalk_sglue>
 8018eae:	bf00      	nop
 8018eb0:	2000004c 	.word	0x2000004c
 8018eb4:	08019a2d 	.word	0x08019a2d
 8018eb8:	20000058 	.word	0x20000058

08018ebc <cleanup_stdio>:
 8018ebc:	6841      	ldr	r1, [r0, #4]
 8018ebe:	4b0c      	ldr	r3, [pc, #48]	; (8018ef0 <cleanup_stdio+0x34>)
 8018ec0:	4299      	cmp	r1, r3
 8018ec2:	b510      	push	{r4, lr}
 8018ec4:	4604      	mov	r4, r0
 8018ec6:	d001      	beq.n	8018ecc <cleanup_stdio+0x10>
 8018ec8:	f000 fdb0 	bl	8019a2c <_fflush_r>
 8018ecc:	68a1      	ldr	r1, [r4, #8]
 8018ece:	4b09      	ldr	r3, [pc, #36]	; (8018ef4 <cleanup_stdio+0x38>)
 8018ed0:	4299      	cmp	r1, r3
 8018ed2:	d002      	beq.n	8018eda <cleanup_stdio+0x1e>
 8018ed4:	4620      	mov	r0, r4
 8018ed6:	f000 fda9 	bl	8019a2c <_fflush_r>
 8018eda:	68e1      	ldr	r1, [r4, #12]
 8018edc:	4b06      	ldr	r3, [pc, #24]	; (8018ef8 <cleanup_stdio+0x3c>)
 8018ede:	4299      	cmp	r1, r3
 8018ee0:	d004      	beq.n	8018eec <cleanup_stdio+0x30>
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ee8:	f000 bda0 	b.w	8019a2c <_fflush_r>
 8018eec:	bd10      	pop	{r4, pc}
 8018eee:	bf00      	nop
 8018ef0:	2000d074 	.word	0x2000d074
 8018ef4:	2000d0dc 	.word	0x2000d0dc
 8018ef8:	2000d144 	.word	0x2000d144

08018efc <global_stdio_init.part.0>:
 8018efc:	b510      	push	{r4, lr}
 8018efe:	4b0b      	ldr	r3, [pc, #44]	; (8018f2c <global_stdio_init.part.0+0x30>)
 8018f00:	4c0b      	ldr	r4, [pc, #44]	; (8018f30 <global_stdio_init.part.0+0x34>)
 8018f02:	4a0c      	ldr	r2, [pc, #48]	; (8018f34 <global_stdio_init.part.0+0x38>)
 8018f04:	601a      	str	r2, [r3, #0]
 8018f06:	4620      	mov	r0, r4
 8018f08:	2200      	movs	r2, #0
 8018f0a:	2104      	movs	r1, #4
 8018f0c:	f7ff ffa6 	bl	8018e5c <std>
 8018f10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8018f14:	2201      	movs	r2, #1
 8018f16:	2109      	movs	r1, #9
 8018f18:	f7ff ffa0 	bl	8018e5c <std>
 8018f1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018f20:	2202      	movs	r2, #2
 8018f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f26:	2112      	movs	r1, #18
 8018f28:	f7ff bf98 	b.w	8018e5c <std>
 8018f2c:	2000d1ac 	.word	0x2000d1ac
 8018f30:	2000d074 	.word	0x2000d074
 8018f34:	08018ea5 	.word	0x08018ea5

08018f38 <__sfp_lock_acquire>:
 8018f38:	4801      	ldr	r0, [pc, #4]	; (8018f40 <__sfp_lock_acquire+0x8>)
 8018f3a:	f000 b93b 	b.w	80191b4 <__retarget_lock_acquire_recursive>
 8018f3e:	bf00      	nop
 8018f40:	2000d1b1 	.word	0x2000d1b1

08018f44 <__sfp_lock_release>:
 8018f44:	4801      	ldr	r0, [pc, #4]	; (8018f4c <__sfp_lock_release+0x8>)
 8018f46:	f000 b936 	b.w	80191b6 <__retarget_lock_release_recursive>
 8018f4a:	bf00      	nop
 8018f4c:	2000d1b1 	.word	0x2000d1b1

08018f50 <__sinit>:
 8018f50:	b510      	push	{r4, lr}
 8018f52:	4604      	mov	r4, r0
 8018f54:	f7ff fff0 	bl	8018f38 <__sfp_lock_acquire>
 8018f58:	6a23      	ldr	r3, [r4, #32]
 8018f5a:	b11b      	cbz	r3, 8018f64 <__sinit+0x14>
 8018f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f60:	f7ff bff0 	b.w	8018f44 <__sfp_lock_release>
 8018f64:	4b04      	ldr	r3, [pc, #16]	; (8018f78 <__sinit+0x28>)
 8018f66:	6223      	str	r3, [r4, #32]
 8018f68:	4b04      	ldr	r3, [pc, #16]	; (8018f7c <__sinit+0x2c>)
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d1f5      	bne.n	8018f5c <__sinit+0xc>
 8018f70:	f7ff ffc4 	bl	8018efc <global_stdio_init.part.0>
 8018f74:	e7f2      	b.n	8018f5c <__sinit+0xc>
 8018f76:	bf00      	nop
 8018f78:	08018ebd 	.word	0x08018ebd
 8018f7c:	2000d1ac 	.word	0x2000d1ac

08018f80 <_fwalk_sglue>:
 8018f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f84:	4607      	mov	r7, r0
 8018f86:	4688      	mov	r8, r1
 8018f88:	4614      	mov	r4, r2
 8018f8a:	2600      	movs	r6, #0
 8018f8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018f90:	f1b9 0901 	subs.w	r9, r9, #1
 8018f94:	d505      	bpl.n	8018fa2 <_fwalk_sglue+0x22>
 8018f96:	6824      	ldr	r4, [r4, #0]
 8018f98:	2c00      	cmp	r4, #0
 8018f9a:	d1f7      	bne.n	8018f8c <_fwalk_sglue+0xc>
 8018f9c:	4630      	mov	r0, r6
 8018f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018fa2:	89ab      	ldrh	r3, [r5, #12]
 8018fa4:	2b01      	cmp	r3, #1
 8018fa6:	d907      	bls.n	8018fb8 <_fwalk_sglue+0x38>
 8018fa8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018fac:	3301      	adds	r3, #1
 8018fae:	d003      	beq.n	8018fb8 <_fwalk_sglue+0x38>
 8018fb0:	4629      	mov	r1, r5
 8018fb2:	4638      	mov	r0, r7
 8018fb4:	47c0      	blx	r8
 8018fb6:	4306      	orrs	r6, r0
 8018fb8:	3568      	adds	r5, #104	; 0x68
 8018fba:	e7e9      	b.n	8018f90 <_fwalk_sglue+0x10>

08018fbc <iprintf>:
 8018fbc:	b40f      	push	{r0, r1, r2, r3}
 8018fbe:	b507      	push	{r0, r1, r2, lr}
 8018fc0:	4906      	ldr	r1, [pc, #24]	; (8018fdc <iprintf+0x20>)
 8018fc2:	ab04      	add	r3, sp, #16
 8018fc4:	6808      	ldr	r0, [r1, #0]
 8018fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8018fca:	6881      	ldr	r1, [r0, #8]
 8018fcc:	9301      	str	r3, [sp, #4]
 8018fce:	f000 f9fd 	bl	80193cc <_vfiprintf_r>
 8018fd2:	b003      	add	sp, #12
 8018fd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8018fd8:	b004      	add	sp, #16
 8018fda:	4770      	bx	lr
 8018fdc:	200000a4 	.word	0x200000a4

08018fe0 <__sread>:
 8018fe0:	b510      	push	{r4, lr}
 8018fe2:	460c      	mov	r4, r1
 8018fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018fe8:	f000 f896 	bl	8019118 <_read_r>
 8018fec:	2800      	cmp	r0, #0
 8018fee:	bfab      	itete	ge
 8018ff0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018ff2:	89a3      	ldrhlt	r3, [r4, #12]
 8018ff4:	181b      	addge	r3, r3, r0
 8018ff6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018ffa:	bfac      	ite	ge
 8018ffc:	6563      	strge	r3, [r4, #84]	; 0x54
 8018ffe:	81a3      	strhlt	r3, [r4, #12]
 8019000:	bd10      	pop	{r4, pc}

08019002 <__swrite>:
 8019002:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019006:	461f      	mov	r7, r3
 8019008:	898b      	ldrh	r3, [r1, #12]
 801900a:	05db      	lsls	r3, r3, #23
 801900c:	4605      	mov	r5, r0
 801900e:	460c      	mov	r4, r1
 8019010:	4616      	mov	r6, r2
 8019012:	d505      	bpl.n	8019020 <__swrite+0x1e>
 8019014:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019018:	2302      	movs	r3, #2
 801901a:	2200      	movs	r2, #0
 801901c:	f000 f86a 	bl	80190f4 <_lseek_r>
 8019020:	89a3      	ldrh	r3, [r4, #12]
 8019022:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019026:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801902a:	81a3      	strh	r3, [r4, #12]
 801902c:	4632      	mov	r2, r6
 801902e:	463b      	mov	r3, r7
 8019030:	4628      	mov	r0, r5
 8019032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019036:	f000 b881 	b.w	801913c <_write_r>

0801903a <__sseek>:
 801903a:	b510      	push	{r4, lr}
 801903c:	460c      	mov	r4, r1
 801903e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019042:	f000 f857 	bl	80190f4 <_lseek_r>
 8019046:	1c43      	adds	r3, r0, #1
 8019048:	89a3      	ldrh	r3, [r4, #12]
 801904a:	bf15      	itete	ne
 801904c:	6560      	strne	r0, [r4, #84]	; 0x54
 801904e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019052:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019056:	81a3      	strheq	r3, [r4, #12]
 8019058:	bf18      	it	ne
 801905a:	81a3      	strhne	r3, [r4, #12]
 801905c:	bd10      	pop	{r4, pc}

0801905e <__sclose>:
 801905e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019062:	f000 b837 	b.w	80190d4 <_close_r>

08019066 <memcmp>:
 8019066:	b510      	push	{r4, lr}
 8019068:	3901      	subs	r1, #1
 801906a:	4402      	add	r2, r0
 801906c:	4290      	cmp	r0, r2
 801906e:	d101      	bne.n	8019074 <memcmp+0xe>
 8019070:	2000      	movs	r0, #0
 8019072:	e005      	b.n	8019080 <memcmp+0x1a>
 8019074:	7803      	ldrb	r3, [r0, #0]
 8019076:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801907a:	42a3      	cmp	r3, r4
 801907c:	d001      	beq.n	8019082 <memcmp+0x1c>
 801907e:	1b18      	subs	r0, r3, r4
 8019080:	bd10      	pop	{r4, pc}
 8019082:	3001      	adds	r0, #1
 8019084:	e7f2      	b.n	801906c <memcmp+0x6>

08019086 <memset>:
 8019086:	4402      	add	r2, r0
 8019088:	4603      	mov	r3, r0
 801908a:	4293      	cmp	r3, r2
 801908c:	d100      	bne.n	8019090 <memset+0xa>
 801908e:	4770      	bx	lr
 8019090:	f803 1b01 	strb.w	r1, [r3], #1
 8019094:	e7f9      	b.n	801908a <memset+0x4>

08019096 <strchr>:
 8019096:	b2c9      	uxtb	r1, r1
 8019098:	4603      	mov	r3, r0
 801909a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801909e:	b11a      	cbz	r2, 80190a8 <strchr+0x12>
 80190a0:	428a      	cmp	r2, r1
 80190a2:	d1f9      	bne.n	8019098 <strchr+0x2>
 80190a4:	4618      	mov	r0, r3
 80190a6:	4770      	bx	lr
 80190a8:	2900      	cmp	r1, #0
 80190aa:	bf18      	it	ne
 80190ac:	2300      	movne	r3, #0
 80190ae:	e7f9      	b.n	80190a4 <strchr+0xe>

080190b0 <strncmp>:
 80190b0:	b510      	push	{r4, lr}
 80190b2:	b16a      	cbz	r2, 80190d0 <strncmp+0x20>
 80190b4:	3901      	subs	r1, #1
 80190b6:	1884      	adds	r4, r0, r2
 80190b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80190bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80190c0:	429a      	cmp	r2, r3
 80190c2:	d103      	bne.n	80190cc <strncmp+0x1c>
 80190c4:	42a0      	cmp	r0, r4
 80190c6:	d001      	beq.n	80190cc <strncmp+0x1c>
 80190c8:	2a00      	cmp	r2, #0
 80190ca:	d1f5      	bne.n	80190b8 <strncmp+0x8>
 80190cc:	1ad0      	subs	r0, r2, r3
 80190ce:	bd10      	pop	{r4, pc}
 80190d0:	4610      	mov	r0, r2
 80190d2:	e7fc      	b.n	80190ce <strncmp+0x1e>

080190d4 <_close_r>:
 80190d4:	b538      	push	{r3, r4, r5, lr}
 80190d6:	4d06      	ldr	r5, [pc, #24]	; (80190f0 <_close_r+0x1c>)
 80190d8:	2300      	movs	r3, #0
 80190da:	4604      	mov	r4, r0
 80190dc:	4608      	mov	r0, r1
 80190de:	602b      	str	r3, [r5, #0]
 80190e0:	f7e8 fa33 	bl	800154a <_close>
 80190e4:	1c43      	adds	r3, r0, #1
 80190e6:	d102      	bne.n	80190ee <_close_r+0x1a>
 80190e8:	682b      	ldr	r3, [r5, #0]
 80190ea:	b103      	cbz	r3, 80190ee <_close_r+0x1a>
 80190ec:	6023      	str	r3, [r4, #0]
 80190ee:	bd38      	pop	{r3, r4, r5, pc}
 80190f0:	2000d06c 	.word	0x2000d06c

080190f4 <_lseek_r>:
 80190f4:	b538      	push	{r3, r4, r5, lr}
 80190f6:	4d07      	ldr	r5, [pc, #28]	; (8019114 <_lseek_r+0x20>)
 80190f8:	4604      	mov	r4, r0
 80190fa:	4608      	mov	r0, r1
 80190fc:	4611      	mov	r1, r2
 80190fe:	2200      	movs	r2, #0
 8019100:	602a      	str	r2, [r5, #0]
 8019102:	461a      	mov	r2, r3
 8019104:	f7e8 fa48 	bl	8001598 <_lseek>
 8019108:	1c43      	adds	r3, r0, #1
 801910a:	d102      	bne.n	8019112 <_lseek_r+0x1e>
 801910c:	682b      	ldr	r3, [r5, #0]
 801910e:	b103      	cbz	r3, 8019112 <_lseek_r+0x1e>
 8019110:	6023      	str	r3, [r4, #0]
 8019112:	bd38      	pop	{r3, r4, r5, pc}
 8019114:	2000d06c 	.word	0x2000d06c

08019118 <_read_r>:
 8019118:	b538      	push	{r3, r4, r5, lr}
 801911a:	4d07      	ldr	r5, [pc, #28]	; (8019138 <_read_r+0x20>)
 801911c:	4604      	mov	r4, r0
 801911e:	4608      	mov	r0, r1
 8019120:	4611      	mov	r1, r2
 8019122:	2200      	movs	r2, #0
 8019124:	602a      	str	r2, [r5, #0]
 8019126:	461a      	mov	r2, r3
 8019128:	f7e8 f9d6 	bl	80014d8 <_read>
 801912c:	1c43      	adds	r3, r0, #1
 801912e:	d102      	bne.n	8019136 <_read_r+0x1e>
 8019130:	682b      	ldr	r3, [r5, #0]
 8019132:	b103      	cbz	r3, 8019136 <_read_r+0x1e>
 8019134:	6023      	str	r3, [r4, #0]
 8019136:	bd38      	pop	{r3, r4, r5, pc}
 8019138:	2000d06c 	.word	0x2000d06c

0801913c <_write_r>:
 801913c:	b538      	push	{r3, r4, r5, lr}
 801913e:	4d07      	ldr	r5, [pc, #28]	; (801915c <_write_r+0x20>)
 8019140:	4604      	mov	r4, r0
 8019142:	4608      	mov	r0, r1
 8019144:	4611      	mov	r1, r2
 8019146:	2200      	movs	r2, #0
 8019148:	602a      	str	r2, [r5, #0]
 801914a:	461a      	mov	r2, r3
 801914c:	f7e8 f9e1 	bl	8001512 <_write>
 8019150:	1c43      	adds	r3, r0, #1
 8019152:	d102      	bne.n	801915a <_write_r+0x1e>
 8019154:	682b      	ldr	r3, [r5, #0]
 8019156:	b103      	cbz	r3, 801915a <_write_r+0x1e>
 8019158:	6023      	str	r3, [r4, #0]
 801915a:	bd38      	pop	{r3, r4, r5, pc}
 801915c:	2000d06c 	.word	0x2000d06c

08019160 <__errno>:
 8019160:	4b01      	ldr	r3, [pc, #4]	; (8019168 <__errno+0x8>)
 8019162:	6818      	ldr	r0, [r3, #0]
 8019164:	4770      	bx	lr
 8019166:	bf00      	nop
 8019168:	200000a4 	.word	0x200000a4

0801916c <__libc_init_array>:
 801916c:	b570      	push	{r4, r5, r6, lr}
 801916e:	4d0d      	ldr	r5, [pc, #52]	; (80191a4 <__libc_init_array+0x38>)
 8019170:	4c0d      	ldr	r4, [pc, #52]	; (80191a8 <__libc_init_array+0x3c>)
 8019172:	1b64      	subs	r4, r4, r5
 8019174:	10a4      	asrs	r4, r4, #2
 8019176:	2600      	movs	r6, #0
 8019178:	42a6      	cmp	r6, r4
 801917a:	d109      	bne.n	8019190 <__libc_init_array+0x24>
 801917c:	4d0b      	ldr	r5, [pc, #44]	; (80191ac <__libc_init_array+0x40>)
 801917e:	4c0c      	ldr	r4, [pc, #48]	; (80191b0 <__libc_init_array+0x44>)
 8019180:	f000 fe50 	bl	8019e24 <_init>
 8019184:	1b64      	subs	r4, r4, r5
 8019186:	10a4      	asrs	r4, r4, #2
 8019188:	2600      	movs	r6, #0
 801918a:	42a6      	cmp	r6, r4
 801918c:	d105      	bne.n	801919a <__libc_init_array+0x2e>
 801918e:	bd70      	pop	{r4, r5, r6, pc}
 8019190:	f855 3b04 	ldr.w	r3, [r5], #4
 8019194:	4798      	blx	r3
 8019196:	3601      	adds	r6, #1
 8019198:	e7ee      	b.n	8019178 <__libc_init_array+0xc>
 801919a:	f855 3b04 	ldr.w	r3, [r5], #4
 801919e:	4798      	blx	r3
 80191a0:	3601      	adds	r6, #1
 80191a2:	e7f2      	b.n	801918a <__libc_init_array+0x1e>
 80191a4:	0801f7cc 	.word	0x0801f7cc
 80191a8:	0801f7cc 	.word	0x0801f7cc
 80191ac:	0801f7cc 	.word	0x0801f7cc
 80191b0:	0801f7d0 	.word	0x0801f7d0

080191b4 <__retarget_lock_acquire_recursive>:
 80191b4:	4770      	bx	lr

080191b6 <__retarget_lock_release_recursive>:
 80191b6:	4770      	bx	lr

080191b8 <memcpy>:
 80191b8:	440a      	add	r2, r1
 80191ba:	4291      	cmp	r1, r2
 80191bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80191c0:	d100      	bne.n	80191c4 <memcpy+0xc>
 80191c2:	4770      	bx	lr
 80191c4:	b510      	push	{r4, lr}
 80191c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80191ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80191ce:	4291      	cmp	r1, r2
 80191d0:	d1f9      	bne.n	80191c6 <memcpy+0xe>
 80191d2:	bd10      	pop	{r4, pc}

080191d4 <__assert_func>:
 80191d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80191d6:	4614      	mov	r4, r2
 80191d8:	461a      	mov	r2, r3
 80191da:	4b09      	ldr	r3, [pc, #36]	; (8019200 <__assert_func+0x2c>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	4605      	mov	r5, r0
 80191e0:	68d8      	ldr	r0, [r3, #12]
 80191e2:	b14c      	cbz	r4, 80191f8 <__assert_func+0x24>
 80191e4:	4b07      	ldr	r3, [pc, #28]	; (8019204 <__assert_func+0x30>)
 80191e6:	9100      	str	r1, [sp, #0]
 80191e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80191ec:	4906      	ldr	r1, [pc, #24]	; (8019208 <__assert_func+0x34>)
 80191ee:	462b      	mov	r3, r5
 80191f0:	f000 fc44 	bl	8019a7c <fiprintf>
 80191f4:	f000 fcfa 	bl	8019bec <abort>
 80191f8:	4b04      	ldr	r3, [pc, #16]	; (801920c <__assert_func+0x38>)
 80191fa:	461c      	mov	r4, r3
 80191fc:	e7f3      	b.n	80191e6 <__assert_func+0x12>
 80191fe:	bf00      	nop
 8019200:	200000a4 	.word	0x200000a4
 8019204:	0801f754 	.word	0x0801f754
 8019208:	0801f761 	.word	0x0801f761
 801920c:	0801f78f 	.word	0x0801f78f

08019210 <malloc>:
 8019210:	4b02      	ldr	r3, [pc, #8]	; (801921c <malloc+0xc>)
 8019212:	4601      	mov	r1, r0
 8019214:	6818      	ldr	r0, [r3, #0]
 8019216:	f000 b823 	b.w	8019260 <_malloc_r>
 801921a:	bf00      	nop
 801921c:	200000a4 	.word	0x200000a4

08019220 <sbrk_aligned>:
 8019220:	b570      	push	{r4, r5, r6, lr}
 8019222:	4e0e      	ldr	r6, [pc, #56]	; (801925c <sbrk_aligned+0x3c>)
 8019224:	460c      	mov	r4, r1
 8019226:	6831      	ldr	r1, [r6, #0]
 8019228:	4605      	mov	r5, r0
 801922a:	b911      	cbnz	r1, 8019232 <sbrk_aligned+0x12>
 801922c:	f000 fcce 	bl	8019bcc <_sbrk_r>
 8019230:	6030      	str	r0, [r6, #0]
 8019232:	4621      	mov	r1, r4
 8019234:	4628      	mov	r0, r5
 8019236:	f000 fcc9 	bl	8019bcc <_sbrk_r>
 801923a:	1c43      	adds	r3, r0, #1
 801923c:	d00a      	beq.n	8019254 <sbrk_aligned+0x34>
 801923e:	1cc4      	adds	r4, r0, #3
 8019240:	f024 0403 	bic.w	r4, r4, #3
 8019244:	42a0      	cmp	r0, r4
 8019246:	d007      	beq.n	8019258 <sbrk_aligned+0x38>
 8019248:	1a21      	subs	r1, r4, r0
 801924a:	4628      	mov	r0, r5
 801924c:	f000 fcbe 	bl	8019bcc <_sbrk_r>
 8019250:	3001      	adds	r0, #1
 8019252:	d101      	bne.n	8019258 <sbrk_aligned+0x38>
 8019254:	f04f 34ff 	mov.w	r4, #4294967295
 8019258:	4620      	mov	r0, r4
 801925a:	bd70      	pop	{r4, r5, r6, pc}
 801925c:	2000d1b8 	.word	0x2000d1b8

08019260 <_malloc_r>:
 8019260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019264:	1ccd      	adds	r5, r1, #3
 8019266:	f025 0503 	bic.w	r5, r5, #3
 801926a:	3508      	adds	r5, #8
 801926c:	2d0c      	cmp	r5, #12
 801926e:	bf38      	it	cc
 8019270:	250c      	movcc	r5, #12
 8019272:	2d00      	cmp	r5, #0
 8019274:	4607      	mov	r7, r0
 8019276:	db01      	blt.n	801927c <_malloc_r+0x1c>
 8019278:	42a9      	cmp	r1, r5
 801927a:	d905      	bls.n	8019288 <_malloc_r+0x28>
 801927c:	230c      	movs	r3, #12
 801927e:	603b      	str	r3, [r7, #0]
 8019280:	2600      	movs	r6, #0
 8019282:	4630      	mov	r0, r6
 8019284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019288:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801935c <_malloc_r+0xfc>
 801928c:	f000 f868 	bl	8019360 <__malloc_lock>
 8019290:	f8d8 3000 	ldr.w	r3, [r8]
 8019294:	461c      	mov	r4, r3
 8019296:	bb5c      	cbnz	r4, 80192f0 <_malloc_r+0x90>
 8019298:	4629      	mov	r1, r5
 801929a:	4638      	mov	r0, r7
 801929c:	f7ff ffc0 	bl	8019220 <sbrk_aligned>
 80192a0:	1c43      	adds	r3, r0, #1
 80192a2:	4604      	mov	r4, r0
 80192a4:	d155      	bne.n	8019352 <_malloc_r+0xf2>
 80192a6:	f8d8 4000 	ldr.w	r4, [r8]
 80192aa:	4626      	mov	r6, r4
 80192ac:	2e00      	cmp	r6, #0
 80192ae:	d145      	bne.n	801933c <_malloc_r+0xdc>
 80192b0:	2c00      	cmp	r4, #0
 80192b2:	d048      	beq.n	8019346 <_malloc_r+0xe6>
 80192b4:	6823      	ldr	r3, [r4, #0]
 80192b6:	4631      	mov	r1, r6
 80192b8:	4638      	mov	r0, r7
 80192ba:	eb04 0903 	add.w	r9, r4, r3
 80192be:	f000 fc85 	bl	8019bcc <_sbrk_r>
 80192c2:	4581      	cmp	r9, r0
 80192c4:	d13f      	bne.n	8019346 <_malloc_r+0xe6>
 80192c6:	6821      	ldr	r1, [r4, #0]
 80192c8:	1a6d      	subs	r5, r5, r1
 80192ca:	4629      	mov	r1, r5
 80192cc:	4638      	mov	r0, r7
 80192ce:	f7ff ffa7 	bl	8019220 <sbrk_aligned>
 80192d2:	3001      	adds	r0, #1
 80192d4:	d037      	beq.n	8019346 <_malloc_r+0xe6>
 80192d6:	6823      	ldr	r3, [r4, #0]
 80192d8:	442b      	add	r3, r5
 80192da:	6023      	str	r3, [r4, #0]
 80192dc:	f8d8 3000 	ldr.w	r3, [r8]
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d038      	beq.n	8019356 <_malloc_r+0xf6>
 80192e4:	685a      	ldr	r2, [r3, #4]
 80192e6:	42a2      	cmp	r2, r4
 80192e8:	d12b      	bne.n	8019342 <_malloc_r+0xe2>
 80192ea:	2200      	movs	r2, #0
 80192ec:	605a      	str	r2, [r3, #4]
 80192ee:	e00f      	b.n	8019310 <_malloc_r+0xb0>
 80192f0:	6822      	ldr	r2, [r4, #0]
 80192f2:	1b52      	subs	r2, r2, r5
 80192f4:	d41f      	bmi.n	8019336 <_malloc_r+0xd6>
 80192f6:	2a0b      	cmp	r2, #11
 80192f8:	d917      	bls.n	801932a <_malloc_r+0xca>
 80192fa:	1961      	adds	r1, r4, r5
 80192fc:	42a3      	cmp	r3, r4
 80192fe:	6025      	str	r5, [r4, #0]
 8019300:	bf18      	it	ne
 8019302:	6059      	strne	r1, [r3, #4]
 8019304:	6863      	ldr	r3, [r4, #4]
 8019306:	bf08      	it	eq
 8019308:	f8c8 1000 	streq.w	r1, [r8]
 801930c:	5162      	str	r2, [r4, r5]
 801930e:	604b      	str	r3, [r1, #4]
 8019310:	4638      	mov	r0, r7
 8019312:	f104 060b 	add.w	r6, r4, #11
 8019316:	f000 f829 	bl	801936c <__malloc_unlock>
 801931a:	f026 0607 	bic.w	r6, r6, #7
 801931e:	1d23      	adds	r3, r4, #4
 8019320:	1af2      	subs	r2, r6, r3
 8019322:	d0ae      	beq.n	8019282 <_malloc_r+0x22>
 8019324:	1b9b      	subs	r3, r3, r6
 8019326:	50a3      	str	r3, [r4, r2]
 8019328:	e7ab      	b.n	8019282 <_malloc_r+0x22>
 801932a:	42a3      	cmp	r3, r4
 801932c:	6862      	ldr	r2, [r4, #4]
 801932e:	d1dd      	bne.n	80192ec <_malloc_r+0x8c>
 8019330:	f8c8 2000 	str.w	r2, [r8]
 8019334:	e7ec      	b.n	8019310 <_malloc_r+0xb0>
 8019336:	4623      	mov	r3, r4
 8019338:	6864      	ldr	r4, [r4, #4]
 801933a:	e7ac      	b.n	8019296 <_malloc_r+0x36>
 801933c:	4634      	mov	r4, r6
 801933e:	6876      	ldr	r6, [r6, #4]
 8019340:	e7b4      	b.n	80192ac <_malloc_r+0x4c>
 8019342:	4613      	mov	r3, r2
 8019344:	e7cc      	b.n	80192e0 <_malloc_r+0x80>
 8019346:	230c      	movs	r3, #12
 8019348:	603b      	str	r3, [r7, #0]
 801934a:	4638      	mov	r0, r7
 801934c:	f000 f80e 	bl	801936c <__malloc_unlock>
 8019350:	e797      	b.n	8019282 <_malloc_r+0x22>
 8019352:	6025      	str	r5, [r4, #0]
 8019354:	e7dc      	b.n	8019310 <_malloc_r+0xb0>
 8019356:	605b      	str	r3, [r3, #4]
 8019358:	deff      	udf	#255	; 0xff
 801935a:	bf00      	nop
 801935c:	2000d1b4 	.word	0x2000d1b4

08019360 <__malloc_lock>:
 8019360:	4801      	ldr	r0, [pc, #4]	; (8019368 <__malloc_lock+0x8>)
 8019362:	f7ff bf27 	b.w	80191b4 <__retarget_lock_acquire_recursive>
 8019366:	bf00      	nop
 8019368:	2000d1b0 	.word	0x2000d1b0

0801936c <__malloc_unlock>:
 801936c:	4801      	ldr	r0, [pc, #4]	; (8019374 <__malloc_unlock+0x8>)
 801936e:	f7ff bf22 	b.w	80191b6 <__retarget_lock_release_recursive>
 8019372:	bf00      	nop
 8019374:	2000d1b0 	.word	0x2000d1b0

08019378 <__sfputc_r>:
 8019378:	6893      	ldr	r3, [r2, #8]
 801937a:	3b01      	subs	r3, #1
 801937c:	2b00      	cmp	r3, #0
 801937e:	b410      	push	{r4}
 8019380:	6093      	str	r3, [r2, #8]
 8019382:	da08      	bge.n	8019396 <__sfputc_r+0x1e>
 8019384:	6994      	ldr	r4, [r2, #24]
 8019386:	42a3      	cmp	r3, r4
 8019388:	db01      	blt.n	801938e <__sfputc_r+0x16>
 801938a:	290a      	cmp	r1, #10
 801938c:	d103      	bne.n	8019396 <__sfputc_r+0x1e>
 801938e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019392:	f000 bb85 	b.w	8019aa0 <__swbuf_r>
 8019396:	6813      	ldr	r3, [r2, #0]
 8019398:	1c58      	adds	r0, r3, #1
 801939a:	6010      	str	r0, [r2, #0]
 801939c:	7019      	strb	r1, [r3, #0]
 801939e:	4608      	mov	r0, r1
 80193a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80193a4:	4770      	bx	lr

080193a6 <__sfputs_r>:
 80193a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193a8:	4606      	mov	r6, r0
 80193aa:	460f      	mov	r7, r1
 80193ac:	4614      	mov	r4, r2
 80193ae:	18d5      	adds	r5, r2, r3
 80193b0:	42ac      	cmp	r4, r5
 80193b2:	d101      	bne.n	80193b8 <__sfputs_r+0x12>
 80193b4:	2000      	movs	r0, #0
 80193b6:	e007      	b.n	80193c8 <__sfputs_r+0x22>
 80193b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80193bc:	463a      	mov	r2, r7
 80193be:	4630      	mov	r0, r6
 80193c0:	f7ff ffda 	bl	8019378 <__sfputc_r>
 80193c4:	1c43      	adds	r3, r0, #1
 80193c6:	d1f3      	bne.n	80193b0 <__sfputs_r+0xa>
 80193c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080193cc <_vfiprintf_r>:
 80193cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193d0:	460d      	mov	r5, r1
 80193d2:	b09d      	sub	sp, #116	; 0x74
 80193d4:	4614      	mov	r4, r2
 80193d6:	4698      	mov	r8, r3
 80193d8:	4606      	mov	r6, r0
 80193da:	b118      	cbz	r0, 80193e4 <_vfiprintf_r+0x18>
 80193dc:	6a03      	ldr	r3, [r0, #32]
 80193de:	b90b      	cbnz	r3, 80193e4 <_vfiprintf_r+0x18>
 80193e0:	f7ff fdb6 	bl	8018f50 <__sinit>
 80193e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80193e6:	07d9      	lsls	r1, r3, #31
 80193e8:	d405      	bmi.n	80193f6 <_vfiprintf_r+0x2a>
 80193ea:	89ab      	ldrh	r3, [r5, #12]
 80193ec:	059a      	lsls	r2, r3, #22
 80193ee:	d402      	bmi.n	80193f6 <_vfiprintf_r+0x2a>
 80193f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80193f2:	f7ff fedf 	bl	80191b4 <__retarget_lock_acquire_recursive>
 80193f6:	89ab      	ldrh	r3, [r5, #12]
 80193f8:	071b      	lsls	r3, r3, #28
 80193fa:	d501      	bpl.n	8019400 <_vfiprintf_r+0x34>
 80193fc:	692b      	ldr	r3, [r5, #16]
 80193fe:	b99b      	cbnz	r3, 8019428 <_vfiprintf_r+0x5c>
 8019400:	4629      	mov	r1, r5
 8019402:	4630      	mov	r0, r6
 8019404:	f000 fb8a 	bl	8019b1c <__swsetup_r>
 8019408:	b170      	cbz	r0, 8019428 <_vfiprintf_r+0x5c>
 801940a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801940c:	07dc      	lsls	r4, r3, #31
 801940e:	d504      	bpl.n	801941a <_vfiprintf_r+0x4e>
 8019410:	f04f 30ff 	mov.w	r0, #4294967295
 8019414:	b01d      	add	sp, #116	; 0x74
 8019416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801941a:	89ab      	ldrh	r3, [r5, #12]
 801941c:	0598      	lsls	r0, r3, #22
 801941e:	d4f7      	bmi.n	8019410 <_vfiprintf_r+0x44>
 8019420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019422:	f7ff fec8 	bl	80191b6 <__retarget_lock_release_recursive>
 8019426:	e7f3      	b.n	8019410 <_vfiprintf_r+0x44>
 8019428:	2300      	movs	r3, #0
 801942a:	9309      	str	r3, [sp, #36]	; 0x24
 801942c:	2320      	movs	r3, #32
 801942e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019432:	f8cd 800c 	str.w	r8, [sp, #12]
 8019436:	2330      	movs	r3, #48	; 0x30
 8019438:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80195ec <_vfiprintf_r+0x220>
 801943c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019440:	f04f 0901 	mov.w	r9, #1
 8019444:	4623      	mov	r3, r4
 8019446:	469a      	mov	sl, r3
 8019448:	f813 2b01 	ldrb.w	r2, [r3], #1
 801944c:	b10a      	cbz	r2, 8019452 <_vfiprintf_r+0x86>
 801944e:	2a25      	cmp	r2, #37	; 0x25
 8019450:	d1f9      	bne.n	8019446 <_vfiprintf_r+0x7a>
 8019452:	ebba 0b04 	subs.w	fp, sl, r4
 8019456:	d00b      	beq.n	8019470 <_vfiprintf_r+0xa4>
 8019458:	465b      	mov	r3, fp
 801945a:	4622      	mov	r2, r4
 801945c:	4629      	mov	r1, r5
 801945e:	4630      	mov	r0, r6
 8019460:	f7ff ffa1 	bl	80193a6 <__sfputs_r>
 8019464:	3001      	adds	r0, #1
 8019466:	f000 80a9 	beq.w	80195bc <_vfiprintf_r+0x1f0>
 801946a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801946c:	445a      	add	r2, fp
 801946e:	9209      	str	r2, [sp, #36]	; 0x24
 8019470:	f89a 3000 	ldrb.w	r3, [sl]
 8019474:	2b00      	cmp	r3, #0
 8019476:	f000 80a1 	beq.w	80195bc <_vfiprintf_r+0x1f0>
 801947a:	2300      	movs	r3, #0
 801947c:	f04f 32ff 	mov.w	r2, #4294967295
 8019480:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019484:	f10a 0a01 	add.w	sl, sl, #1
 8019488:	9304      	str	r3, [sp, #16]
 801948a:	9307      	str	r3, [sp, #28]
 801948c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019490:	931a      	str	r3, [sp, #104]	; 0x68
 8019492:	4654      	mov	r4, sl
 8019494:	2205      	movs	r2, #5
 8019496:	f814 1b01 	ldrb.w	r1, [r4], #1
 801949a:	4854      	ldr	r0, [pc, #336]	; (80195ec <_vfiprintf_r+0x220>)
 801949c:	f7e6 fed0 	bl	8000240 <memchr>
 80194a0:	9a04      	ldr	r2, [sp, #16]
 80194a2:	b9d8      	cbnz	r0, 80194dc <_vfiprintf_r+0x110>
 80194a4:	06d1      	lsls	r1, r2, #27
 80194a6:	bf44      	itt	mi
 80194a8:	2320      	movmi	r3, #32
 80194aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194ae:	0713      	lsls	r3, r2, #28
 80194b0:	bf44      	itt	mi
 80194b2:	232b      	movmi	r3, #43	; 0x2b
 80194b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194b8:	f89a 3000 	ldrb.w	r3, [sl]
 80194bc:	2b2a      	cmp	r3, #42	; 0x2a
 80194be:	d015      	beq.n	80194ec <_vfiprintf_r+0x120>
 80194c0:	9a07      	ldr	r2, [sp, #28]
 80194c2:	4654      	mov	r4, sl
 80194c4:	2000      	movs	r0, #0
 80194c6:	f04f 0c0a 	mov.w	ip, #10
 80194ca:	4621      	mov	r1, r4
 80194cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80194d0:	3b30      	subs	r3, #48	; 0x30
 80194d2:	2b09      	cmp	r3, #9
 80194d4:	d94d      	bls.n	8019572 <_vfiprintf_r+0x1a6>
 80194d6:	b1b0      	cbz	r0, 8019506 <_vfiprintf_r+0x13a>
 80194d8:	9207      	str	r2, [sp, #28]
 80194da:	e014      	b.n	8019506 <_vfiprintf_r+0x13a>
 80194dc:	eba0 0308 	sub.w	r3, r0, r8
 80194e0:	fa09 f303 	lsl.w	r3, r9, r3
 80194e4:	4313      	orrs	r3, r2
 80194e6:	9304      	str	r3, [sp, #16]
 80194e8:	46a2      	mov	sl, r4
 80194ea:	e7d2      	b.n	8019492 <_vfiprintf_r+0xc6>
 80194ec:	9b03      	ldr	r3, [sp, #12]
 80194ee:	1d19      	adds	r1, r3, #4
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	9103      	str	r1, [sp, #12]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	bfbb      	ittet	lt
 80194f8:	425b      	neglt	r3, r3
 80194fa:	f042 0202 	orrlt.w	r2, r2, #2
 80194fe:	9307      	strge	r3, [sp, #28]
 8019500:	9307      	strlt	r3, [sp, #28]
 8019502:	bfb8      	it	lt
 8019504:	9204      	strlt	r2, [sp, #16]
 8019506:	7823      	ldrb	r3, [r4, #0]
 8019508:	2b2e      	cmp	r3, #46	; 0x2e
 801950a:	d10c      	bne.n	8019526 <_vfiprintf_r+0x15a>
 801950c:	7863      	ldrb	r3, [r4, #1]
 801950e:	2b2a      	cmp	r3, #42	; 0x2a
 8019510:	d134      	bne.n	801957c <_vfiprintf_r+0x1b0>
 8019512:	9b03      	ldr	r3, [sp, #12]
 8019514:	1d1a      	adds	r2, r3, #4
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	9203      	str	r2, [sp, #12]
 801951a:	2b00      	cmp	r3, #0
 801951c:	bfb8      	it	lt
 801951e:	f04f 33ff 	movlt.w	r3, #4294967295
 8019522:	3402      	adds	r4, #2
 8019524:	9305      	str	r3, [sp, #20]
 8019526:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80195fc <_vfiprintf_r+0x230>
 801952a:	7821      	ldrb	r1, [r4, #0]
 801952c:	2203      	movs	r2, #3
 801952e:	4650      	mov	r0, sl
 8019530:	f7e6 fe86 	bl	8000240 <memchr>
 8019534:	b138      	cbz	r0, 8019546 <_vfiprintf_r+0x17a>
 8019536:	9b04      	ldr	r3, [sp, #16]
 8019538:	eba0 000a 	sub.w	r0, r0, sl
 801953c:	2240      	movs	r2, #64	; 0x40
 801953e:	4082      	lsls	r2, r0
 8019540:	4313      	orrs	r3, r2
 8019542:	3401      	adds	r4, #1
 8019544:	9304      	str	r3, [sp, #16]
 8019546:	f814 1b01 	ldrb.w	r1, [r4], #1
 801954a:	4829      	ldr	r0, [pc, #164]	; (80195f0 <_vfiprintf_r+0x224>)
 801954c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019550:	2206      	movs	r2, #6
 8019552:	f7e6 fe75 	bl	8000240 <memchr>
 8019556:	2800      	cmp	r0, #0
 8019558:	d03f      	beq.n	80195da <_vfiprintf_r+0x20e>
 801955a:	4b26      	ldr	r3, [pc, #152]	; (80195f4 <_vfiprintf_r+0x228>)
 801955c:	bb1b      	cbnz	r3, 80195a6 <_vfiprintf_r+0x1da>
 801955e:	9b03      	ldr	r3, [sp, #12]
 8019560:	3307      	adds	r3, #7
 8019562:	f023 0307 	bic.w	r3, r3, #7
 8019566:	3308      	adds	r3, #8
 8019568:	9303      	str	r3, [sp, #12]
 801956a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801956c:	443b      	add	r3, r7
 801956e:	9309      	str	r3, [sp, #36]	; 0x24
 8019570:	e768      	b.n	8019444 <_vfiprintf_r+0x78>
 8019572:	fb0c 3202 	mla	r2, ip, r2, r3
 8019576:	460c      	mov	r4, r1
 8019578:	2001      	movs	r0, #1
 801957a:	e7a6      	b.n	80194ca <_vfiprintf_r+0xfe>
 801957c:	2300      	movs	r3, #0
 801957e:	3401      	adds	r4, #1
 8019580:	9305      	str	r3, [sp, #20]
 8019582:	4619      	mov	r1, r3
 8019584:	f04f 0c0a 	mov.w	ip, #10
 8019588:	4620      	mov	r0, r4
 801958a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801958e:	3a30      	subs	r2, #48	; 0x30
 8019590:	2a09      	cmp	r2, #9
 8019592:	d903      	bls.n	801959c <_vfiprintf_r+0x1d0>
 8019594:	2b00      	cmp	r3, #0
 8019596:	d0c6      	beq.n	8019526 <_vfiprintf_r+0x15a>
 8019598:	9105      	str	r1, [sp, #20]
 801959a:	e7c4      	b.n	8019526 <_vfiprintf_r+0x15a>
 801959c:	fb0c 2101 	mla	r1, ip, r1, r2
 80195a0:	4604      	mov	r4, r0
 80195a2:	2301      	movs	r3, #1
 80195a4:	e7f0      	b.n	8019588 <_vfiprintf_r+0x1bc>
 80195a6:	ab03      	add	r3, sp, #12
 80195a8:	9300      	str	r3, [sp, #0]
 80195aa:	462a      	mov	r2, r5
 80195ac:	4b12      	ldr	r3, [pc, #72]	; (80195f8 <_vfiprintf_r+0x22c>)
 80195ae:	a904      	add	r1, sp, #16
 80195b0:	4630      	mov	r0, r6
 80195b2:	f3af 8000 	nop.w
 80195b6:	4607      	mov	r7, r0
 80195b8:	1c78      	adds	r0, r7, #1
 80195ba:	d1d6      	bne.n	801956a <_vfiprintf_r+0x19e>
 80195bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80195be:	07d9      	lsls	r1, r3, #31
 80195c0:	d405      	bmi.n	80195ce <_vfiprintf_r+0x202>
 80195c2:	89ab      	ldrh	r3, [r5, #12]
 80195c4:	059a      	lsls	r2, r3, #22
 80195c6:	d402      	bmi.n	80195ce <_vfiprintf_r+0x202>
 80195c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80195ca:	f7ff fdf4 	bl	80191b6 <__retarget_lock_release_recursive>
 80195ce:	89ab      	ldrh	r3, [r5, #12]
 80195d0:	065b      	lsls	r3, r3, #25
 80195d2:	f53f af1d 	bmi.w	8019410 <_vfiprintf_r+0x44>
 80195d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80195d8:	e71c      	b.n	8019414 <_vfiprintf_r+0x48>
 80195da:	ab03      	add	r3, sp, #12
 80195dc:	9300      	str	r3, [sp, #0]
 80195de:	462a      	mov	r2, r5
 80195e0:	4b05      	ldr	r3, [pc, #20]	; (80195f8 <_vfiprintf_r+0x22c>)
 80195e2:	a904      	add	r1, sp, #16
 80195e4:	4630      	mov	r0, r6
 80195e6:	f000 f879 	bl	80196dc <_printf_i>
 80195ea:	e7e4      	b.n	80195b6 <_vfiprintf_r+0x1ea>
 80195ec:	0801f790 	.word	0x0801f790
 80195f0:	0801f79a 	.word	0x0801f79a
 80195f4:	00000000 	.word	0x00000000
 80195f8:	080193a7 	.word	0x080193a7
 80195fc:	0801f796 	.word	0x0801f796

08019600 <_printf_common>:
 8019600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019604:	4616      	mov	r6, r2
 8019606:	4699      	mov	r9, r3
 8019608:	688a      	ldr	r2, [r1, #8]
 801960a:	690b      	ldr	r3, [r1, #16]
 801960c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019610:	4293      	cmp	r3, r2
 8019612:	bfb8      	it	lt
 8019614:	4613      	movlt	r3, r2
 8019616:	6033      	str	r3, [r6, #0]
 8019618:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801961c:	4607      	mov	r7, r0
 801961e:	460c      	mov	r4, r1
 8019620:	b10a      	cbz	r2, 8019626 <_printf_common+0x26>
 8019622:	3301      	adds	r3, #1
 8019624:	6033      	str	r3, [r6, #0]
 8019626:	6823      	ldr	r3, [r4, #0]
 8019628:	0699      	lsls	r1, r3, #26
 801962a:	bf42      	ittt	mi
 801962c:	6833      	ldrmi	r3, [r6, #0]
 801962e:	3302      	addmi	r3, #2
 8019630:	6033      	strmi	r3, [r6, #0]
 8019632:	6825      	ldr	r5, [r4, #0]
 8019634:	f015 0506 	ands.w	r5, r5, #6
 8019638:	d106      	bne.n	8019648 <_printf_common+0x48>
 801963a:	f104 0a19 	add.w	sl, r4, #25
 801963e:	68e3      	ldr	r3, [r4, #12]
 8019640:	6832      	ldr	r2, [r6, #0]
 8019642:	1a9b      	subs	r3, r3, r2
 8019644:	42ab      	cmp	r3, r5
 8019646:	dc26      	bgt.n	8019696 <_printf_common+0x96>
 8019648:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801964c:	1e13      	subs	r3, r2, #0
 801964e:	6822      	ldr	r2, [r4, #0]
 8019650:	bf18      	it	ne
 8019652:	2301      	movne	r3, #1
 8019654:	0692      	lsls	r2, r2, #26
 8019656:	d42b      	bmi.n	80196b0 <_printf_common+0xb0>
 8019658:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801965c:	4649      	mov	r1, r9
 801965e:	4638      	mov	r0, r7
 8019660:	47c0      	blx	r8
 8019662:	3001      	adds	r0, #1
 8019664:	d01e      	beq.n	80196a4 <_printf_common+0xa4>
 8019666:	6823      	ldr	r3, [r4, #0]
 8019668:	6922      	ldr	r2, [r4, #16]
 801966a:	f003 0306 	and.w	r3, r3, #6
 801966e:	2b04      	cmp	r3, #4
 8019670:	bf02      	ittt	eq
 8019672:	68e5      	ldreq	r5, [r4, #12]
 8019674:	6833      	ldreq	r3, [r6, #0]
 8019676:	1aed      	subeq	r5, r5, r3
 8019678:	68a3      	ldr	r3, [r4, #8]
 801967a:	bf0c      	ite	eq
 801967c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019680:	2500      	movne	r5, #0
 8019682:	4293      	cmp	r3, r2
 8019684:	bfc4      	itt	gt
 8019686:	1a9b      	subgt	r3, r3, r2
 8019688:	18ed      	addgt	r5, r5, r3
 801968a:	2600      	movs	r6, #0
 801968c:	341a      	adds	r4, #26
 801968e:	42b5      	cmp	r5, r6
 8019690:	d11a      	bne.n	80196c8 <_printf_common+0xc8>
 8019692:	2000      	movs	r0, #0
 8019694:	e008      	b.n	80196a8 <_printf_common+0xa8>
 8019696:	2301      	movs	r3, #1
 8019698:	4652      	mov	r2, sl
 801969a:	4649      	mov	r1, r9
 801969c:	4638      	mov	r0, r7
 801969e:	47c0      	blx	r8
 80196a0:	3001      	adds	r0, #1
 80196a2:	d103      	bne.n	80196ac <_printf_common+0xac>
 80196a4:	f04f 30ff 	mov.w	r0, #4294967295
 80196a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80196ac:	3501      	adds	r5, #1
 80196ae:	e7c6      	b.n	801963e <_printf_common+0x3e>
 80196b0:	18e1      	adds	r1, r4, r3
 80196b2:	1c5a      	adds	r2, r3, #1
 80196b4:	2030      	movs	r0, #48	; 0x30
 80196b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80196ba:	4422      	add	r2, r4
 80196bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80196c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80196c4:	3302      	adds	r3, #2
 80196c6:	e7c7      	b.n	8019658 <_printf_common+0x58>
 80196c8:	2301      	movs	r3, #1
 80196ca:	4622      	mov	r2, r4
 80196cc:	4649      	mov	r1, r9
 80196ce:	4638      	mov	r0, r7
 80196d0:	47c0      	blx	r8
 80196d2:	3001      	adds	r0, #1
 80196d4:	d0e6      	beq.n	80196a4 <_printf_common+0xa4>
 80196d6:	3601      	adds	r6, #1
 80196d8:	e7d9      	b.n	801968e <_printf_common+0x8e>
	...

080196dc <_printf_i>:
 80196dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80196e0:	7e0f      	ldrb	r7, [r1, #24]
 80196e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80196e4:	2f78      	cmp	r7, #120	; 0x78
 80196e6:	4691      	mov	r9, r2
 80196e8:	4680      	mov	r8, r0
 80196ea:	460c      	mov	r4, r1
 80196ec:	469a      	mov	sl, r3
 80196ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80196f2:	d807      	bhi.n	8019704 <_printf_i+0x28>
 80196f4:	2f62      	cmp	r7, #98	; 0x62
 80196f6:	d80a      	bhi.n	801970e <_printf_i+0x32>
 80196f8:	2f00      	cmp	r7, #0
 80196fa:	f000 80d4 	beq.w	80198a6 <_printf_i+0x1ca>
 80196fe:	2f58      	cmp	r7, #88	; 0x58
 8019700:	f000 80c0 	beq.w	8019884 <_printf_i+0x1a8>
 8019704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019708:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801970c:	e03a      	b.n	8019784 <_printf_i+0xa8>
 801970e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019712:	2b15      	cmp	r3, #21
 8019714:	d8f6      	bhi.n	8019704 <_printf_i+0x28>
 8019716:	a101      	add	r1, pc, #4	; (adr r1, 801971c <_printf_i+0x40>)
 8019718:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801971c:	08019775 	.word	0x08019775
 8019720:	08019789 	.word	0x08019789
 8019724:	08019705 	.word	0x08019705
 8019728:	08019705 	.word	0x08019705
 801972c:	08019705 	.word	0x08019705
 8019730:	08019705 	.word	0x08019705
 8019734:	08019789 	.word	0x08019789
 8019738:	08019705 	.word	0x08019705
 801973c:	08019705 	.word	0x08019705
 8019740:	08019705 	.word	0x08019705
 8019744:	08019705 	.word	0x08019705
 8019748:	0801988d 	.word	0x0801988d
 801974c:	080197b5 	.word	0x080197b5
 8019750:	08019847 	.word	0x08019847
 8019754:	08019705 	.word	0x08019705
 8019758:	08019705 	.word	0x08019705
 801975c:	080198af 	.word	0x080198af
 8019760:	08019705 	.word	0x08019705
 8019764:	080197b5 	.word	0x080197b5
 8019768:	08019705 	.word	0x08019705
 801976c:	08019705 	.word	0x08019705
 8019770:	0801984f 	.word	0x0801984f
 8019774:	682b      	ldr	r3, [r5, #0]
 8019776:	1d1a      	adds	r2, r3, #4
 8019778:	681b      	ldr	r3, [r3, #0]
 801977a:	602a      	str	r2, [r5, #0]
 801977c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019780:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019784:	2301      	movs	r3, #1
 8019786:	e09f      	b.n	80198c8 <_printf_i+0x1ec>
 8019788:	6820      	ldr	r0, [r4, #0]
 801978a:	682b      	ldr	r3, [r5, #0]
 801978c:	0607      	lsls	r7, r0, #24
 801978e:	f103 0104 	add.w	r1, r3, #4
 8019792:	6029      	str	r1, [r5, #0]
 8019794:	d501      	bpl.n	801979a <_printf_i+0xbe>
 8019796:	681e      	ldr	r6, [r3, #0]
 8019798:	e003      	b.n	80197a2 <_printf_i+0xc6>
 801979a:	0646      	lsls	r6, r0, #25
 801979c:	d5fb      	bpl.n	8019796 <_printf_i+0xba>
 801979e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80197a2:	2e00      	cmp	r6, #0
 80197a4:	da03      	bge.n	80197ae <_printf_i+0xd2>
 80197a6:	232d      	movs	r3, #45	; 0x2d
 80197a8:	4276      	negs	r6, r6
 80197aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80197ae:	485a      	ldr	r0, [pc, #360]	; (8019918 <_printf_i+0x23c>)
 80197b0:	230a      	movs	r3, #10
 80197b2:	e012      	b.n	80197da <_printf_i+0xfe>
 80197b4:	682b      	ldr	r3, [r5, #0]
 80197b6:	6820      	ldr	r0, [r4, #0]
 80197b8:	1d19      	adds	r1, r3, #4
 80197ba:	6029      	str	r1, [r5, #0]
 80197bc:	0605      	lsls	r5, r0, #24
 80197be:	d501      	bpl.n	80197c4 <_printf_i+0xe8>
 80197c0:	681e      	ldr	r6, [r3, #0]
 80197c2:	e002      	b.n	80197ca <_printf_i+0xee>
 80197c4:	0641      	lsls	r1, r0, #25
 80197c6:	d5fb      	bpl.n	80197c0 <_printf_i+0xe4>
 80197c8:	881e      	ldrh	r6, [r3, #0]
 80197ca:	4853      	ldr	r0, [pc, #332]	; (8019918 <_printf_i+0x23c>)
 80197cc:	2f6f      	cmp	r7, #111	; 0x6f
 80197ce:	bf0c      	ite	eq
 80197d0:	2308      	moveq	r3, #8
 80197d2:	230a      	movne	r3, #10
 80197d4:	2100      	movs	r1, #0
 80197d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80197da:	6865      	ldr	r5, [r4, #4]
 80197dc:	60a5      	str	r5, [r4, #8]
 80197de:	2d00      	cmp	r5, #0
 80197e0:	bfa2      	ittt	ge
 80197e2:	6821      	ldrge	r1, [r4, #0]
 80197e4:	f021 0104 	bicge.w	r1, r1, #4
 80197e8:	6021      	strge	r1, [r4, #0]
 80197ea:	b90e      	cbnz	r6, 80197f0 <_printf_i+0x114>
 80197ec:	2d00      	cmp	r5, #0
 80197ee:	d04b      	beq.n	8019888 <_printf_i+0x1ac>
 80197f0:	4615      	mov	r5, r2
 80197f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80197f6:	fb03 6711 	mls	r7, r3, r1, r6
 80197fa:	5dc7      	ldrb	r7, [r0, r7]
 80197fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019800:	4637      	mov	r7, r6
 8019802:	42bb      	cmp	r3, r7
 8019804:	460e      	mov	r6, r1
 8019806:	d9f4      	bls.n	80197f2 <_printf_i+0x116>
 8019808:	2b08      	cmp	r3, #8
 801980a:	d10b      	bne.n	8019824 <_printf_i+0x148>
 801980c:	6823      	ldr	r3, [r4, #0]
 801980e:	07de      	lsls	r6, r3, #31
 8019810:	d508      	bpl.n	8019824 <_printf_i+0x148>
 8019812:	6923      	ldr	r3, [r4, #16]
 8019814:	6861      	ldr	r1, [r4, #4]
 8019816:	4299      	cmp	r1, r3
 8019818:	bfde      	ittt	le
 801981a:	2330      	movle	r3, #48	; 0x30
 801981c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019820:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019824:	1b52      	subs	r2, r2, r5
 8019826:	6122      	str	r2, [r4, #16]
 8019828:	f8cd a000 	str.w	sl, [sp]
 801982c:	464b      	mov	r3, r9
 801982e:	aa03      	add	r2, sp, #12
 8019830:	4621      	mov	r1, r4
 8019832:	4640      	mov	r0, r8
 8019834:	f7ff fee4 	bl	8019600 <_printf_common>
 8019838:	3001      	adds	r0, #1
 801983a:	d14a      	bne.n	80198d2 <_printf_i+0x1f6>
 801983c:	f04f 30ff 	mov.w	r0, #4294967295
 8019840:	b004      	add	sp, #16
 8019842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019846:	6823      	ldr	r3, [r4, #0]
 8019848:	f043 0320 	orr.w	r3, r3, #32
 801984c:	6023      	str	r3, [r4, #0]
 801984e:	4833      	ldr	r0, [pc, #204]	; (801991c <_printf_i+0x240>)
 8019850:	2778      	movs	r7, #120	; 0x78
 8019852:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019856:	6823      	ldr	r3, [r4, #0]
 8019858:	6829      	ldr	r1, [r5, #0]
 801985a:	061f      	lsls	r7, r3, #24
 801985c:	f851 6b04 	ldr.w	r6, [r1], #4
 8019860:	d402      	bmi.n	8019868 <_printf_i+0x18c>
 8019862:	065f      	lsls	r7, r3, #25
 8019864:	bf48      	it	mi
 8019866:	b2b6      	uxthmi	r6, r6
 8019868:	07df      	lsls	r7, r3, #31
 801986a:	bf48      	it	mi
 801986c:	f043 0320 	orrmi.w	r3, r3, #32
 8019870:	6029      	str	r1, [r5, #0]
 8019872:	bf48      	it	mi
 8019874:	6023      	strmi	r3, [r4, #0]
 8019876:	b91e      	cbnz	r6, 8019880 <_printf_i+0x1a4>
 8019878:	6823      	ldr	r3, [r4, #0]
 801987a:	f023 0320 	bic.w	r3, r3, #32
 801987e:	6023      	str	r3, [r4, #0]
 8019880:	2310      	movs	r3, #16
 8019882:	e7a7      	b.n	80197d4 <_printf_i+0xf8>
 8019884:	4824      	ldr	r0, [pc, #144]	; (8019918 <_printf_i+0x23c>)
 8019886:	e7e4      	b.n	8019852 <_printf_i+0x176>
 8019888:	4615      	mov	r5, r2
 801988a:	e7bd      	b.n	8019808 <_printf_i+0x12c>
 801988c:	682b      	ldr	r3, [r5, #0]
 801988e:	6826      	ldr	r6, [r4, #0]
 8019890:	6961      	ldr	r1, [r4, #20]
 8019892:	1d18      	adds	r0, r3, #4
 8019894:	6028      	str	r0, [r5, #0]
 8019896:	0635      	lsls	r5, r6, #24
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	d501      	bpl.n	80198a0 <_printf_i+0x1c4>
 801989c:	6019      	str	r1, [r3, #0]
 801989e:	e002      	b.n	80198a6 <_printf_i+0x1ca>
 80198a0:	0670      	lsls	r0, r6, #25
 80198a2:	d5fb      	bpl.n	801989c <_printf_i+0x1c0>
 80198a4:	8019      	strh	r1, [r3, #0]
 80198a6:	2300      	movs	r3, #0
 80198a8:	6123      	str	r3, [r4, #16]
 80198aa:	4615      	mov	r5, r2
 80198ac:	e7bc      	b.n	8019828 <_printf_i+0x14c>
 80198ae:	682b      	ldr	r3, [r5, #0]
 80198b0:	1d1a      	adds	r2, r3, #4
 80198b2:	602a      	str	r2, [r5, #0]
 80198b4:	681d      	ldr	r5, [r3, #0]
 80198b6:	6862      	ldr	r2, [r4, #4]
 80198b8:	2100      	movs	r1, #0
 80198ba:	4628      	mov	r0, r5
 80198bc:	f7e6 fcc0 	bl	8000240 <memchr>
 80198c0:	b108      	cbz	r0, 80198c6 <_printf_i+0x1ea>
 80198c2:	1b40      	subs	r0, r0, r5
 80198c4:	6060      	str	r0, [r4, #4]
 80198c6:	6863      	ldr	r3, [r4, #4]
 80198c8:	6123      	str	r3, [r4, #16]
 80198ca:	2300      	movs	r3, #0
 80198cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80198d0:	e7aa      	b.n	8019828 <_printf_i+0x14c>
 80198d2:	6923      	ldr	r3, [r4, #16]
 80198d4:	462a      	mov	r2, r5
 80198d6:	4649      	mov	r1, r9
 80198d8:	4640      	mov	r0, r8
 80198da:	47d0      	blx	sl
 80198dc:	3001      	adds	r0, #1
 80198de:	d0ad      	beq.n	801983c <_printf_i+0x160>
 80198e0:	6823      	ldr	r3, [r4, #0]
 80198e2:	079b      	lsls	r3, r3, #30
 80198e4:	d413      	bmi.n	801990e <_printf_i+0x232>
 80198e6:	68e0      	ldr	r0, [r4, #12]
 80198e8:	9b03      	ldr	r3, [sp, #12]
 80198ea:	4298      	cmp	r0, r3
 80198ec:	bfb8      	it	lt
 80198ee:	4618      	movlt	r0, r3
 80198f0:	e7a6      	b.n	8019840 <_printf_i+0x164>
 80198f2:	2301      	movs	r3, #1
 80198f4:	4632      	mov	r2, r6
 80198f6:	4649      	mov	r1, r9
 80198f8:	4640      	mov	r0, r8
 80198fa:	47d0      	blx	sl
 80198fc:	3001      	adds	r0, #1
 80198fe:	d09d      	beq.n	801983c <_printf_i+0x160>
 8019900:	3501      	adds	r5, #1
 8019902:	68e3      	ldr	r3, [r4, #12]
 8019904:	9903      	ldr	r1, [sp, #12]
 8019906:	1a5b      	subs	r3, r3, r1
 8019908:	42ab      	cmp	r3, r5
 801990a:	dcf2      	bgt.n	80198f2 <_printf_i+0x216>
 801990c:	e7eb      	b.n	80198e6 <_printf_i+0x20a>
 801990e:	2500      	movs	r5, #0
 8019910:	f104 0619 	add.w	r6, r4, #25
 8019914:	e7f5      	b.n	8019902 <_printf_i+0x226>
 8019916:	bf00      	nop
 8019918:	0801f7a1 	.word	0x0801f7a1
 801991c:	0801f7b2 	.word	0x0801f7b2

08019920 <__sflush_r>:
 8019920:	898a      	ldrh	r2, [r1, #12]
 8019922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019926:	4605      	mov	r5, r0
 8019928:	0710      	lsls	r0, r2, #28
 801992a:	460c      	mov	r4, r1
 801992c:	d458      	bmi.n	80199e0 <__sflush_r+0xc0>
 801992e:	684b      	ldr	r3, [r1, #4]
 8019930:	2b00      	cmp	r3, #0
 8019932:	dc05      	bgt.n	8019940 <__sflush_r+0x20>
 8019934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019936:	2b00      	cmp	r3, #0
 8019938:	dc02      	bgt.n	8019940 <__sflush_r+0x20>
 801993a:	2000      	movs	r0, #0
 801993c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019942:	2e00      	cmp	r6, #0
 8019944:	d0f9      	beq.n	801993a <__sflush_r+0x1a>
 8019946:	2300      	movs	r3, #0
 8019948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801994c:	682f      	ldr	r7, [r5, #0]
 801994e:	6a21      	ldr	r1, [r4, #32]
 8019950:	602b      	str	r3, [r5, #0]
 8019952:	d032      	beq.n	80199ba <__sflush_r+0x9a>
 8019954:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019956:	89a3      	ldrh	r3, [r4, #12]
 8019958:	075a      	lsls	r2, r3, #29
 801995a:	d505      	bpl.n	8019968 <__sflush_r+0x48>
 801995c:	6863      	ldr	r3, [r4, #4]
 801995e:	1ac0      	subs	r0, r0, r3
 8019960:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019962:	b10b      	cbz	r3, 8019968 <__sflush_r+0x48>
 8019964:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019966:	1ac0      	subs	r0, r0, r3
 8019968:	2300      	movs	r3, #0
 801996a:	4602      	mov	r2, r0
 801996c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801996e:	6a21      	ldr	r1, [r4, #32]
 8019970:	4628      	mov	r0, r5
 8019972:	47b0      	blx	r6
 8019974:	1c43      	adds	r3, r0, #1
 8019976:	89a3      	ldrh	r3, [r4, #12]
 8019978:	d106      	bne.n	8019988 <__sflush_r+0x68>
 801997a:	6829      	ldr	r1, [r5, #0]
 801997c:	291d      	cmp	r1, #29
 801997e:	d82b      	bhi.n	80199d8 <__sflush_r+0xb8>
 8019980:	4a29      	ldr	r2, [pc, #164]	; (8019a28 <__sflush_r+0x108>)
 8019982:	410a      	asrs	r2, r1
 8019984:	07d6      	lsls	r6, r2, #31
 8019986:	d427      	bmi.n	80199d8 <__sflush_r+0xb8>
 8019988:	2200      	movs	r2, #0
 801998a:	6062      	str	r2, [r4, #4]
 801998c:	04d9      	lsls	r1, r3, #19
 801998e:	6922      	ldr	r2, [r4, #16]
 8019990:	6022      	str	r2, [r4, #0]
 8019992:	d504      	bpl.n	801999e <__sflush_r+0x7e>
 8019994:	1c42      	adds	r2, r0, #1
 8019996:	d101      	bne.n	801999c <__sflush_r+0x7c>
 8019998:	682b      	ldr	r3, [r5, #0]
 801999a:	b903      	cbnz	r3, 801999e <__sflush_r+0x7e>
 801999c:	6560      	str	r0, [r4, #84]	; 0x54
 801999e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80199a0:	602f      	str	r7, [r5, #0]
 80199a2:	2900      	cmp	r1, #0
 80199a4:	d0c9      	beq.n	801993a <__sflush_r+0x1a>
 80199a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80199aa:	4299      	cmp	r1, r3
 80199ac:	d002      	beq.n	80199b4 <__sflush_r+0x94>
 80199ae:	4628      	mov	r0, r5
 80199b0:	f000 f924 	bl	8019bfc <_free_r>
 80199b4:	2000      	movs	r0, #0
 80199b6:	6360      	str	r0, [r4, #52]	; 0x34
 80199b8:	e7c0      	b.n	801993c <__sflush_r+0x1c>
 80199ba:	2301      	movs	r3, #1
 80199bc:	4628      	mov	r0, r5
 80199be:	47b0      	blx	r6
 80199c0:	1c41      	adds	r1, r0, #1
 80199c2:	d1c8      	bne.n	8019956 <__sflush_r+0x36>
 80199c4:	682b      	ldr	r3, [r5, #0]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d0c5      	beq.n	8019956 <__sflush_r+0x36>
 80199ca:	2b1d      	cmp	r3, #29
 80199cc:	d001      	beq.n	80199d2 <__sflush_r+0xb2>
 80199ce:	2b16      	cmp	r3, #22
 80199d0:	d101      	bne.n	80199d6 <__sflush_r+0xb6>
 80199d2:	602f      	str	r7, [r5, #0]
 80199d4:	e7b1      	b.n	801993a <__sflush_r+0x1a>
 80199d6:	89a3      	ldrh	r3, [r4, #12]
 80199d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199dc:	81a3      	strh	r3, [r4, #12]
 80199de:	e7ad      	b.n	801993c <__sflush_r+0x1c>
 80199e0:	690f      	ldr	r7, [r1, #16]
 80199e2:	2f00      	cmp	r7, #0
 80199e4:	d0a9      	beq.n	801993a <__sflush_r+0x1a>
 80199e6:	0793      	lsls	r3, r2, #30
 80199e8:	680e      	ldr	r6, [r1, #0]
 80199ea:	bf08      	it	eq
 80199ec:	694b      	ldreq	r3, [r1, #20]
 80199ee:	600f      	str	r7, [r1, #0]
 80199f0:	bf18      	it	ne
 80199f2:	2300      	movne	r3, #0
 80199f4:	eba6 0807 	sub.w	r8, r6, r7
 80199f8:	608b      	str	r3, [r1, #8]
 80199fa:	f1b8 0f00 	cmp.w	r8, #0
 80199fe:	dd9c      	ble.n	801993a <__sflush_r+0x1a>
 8019a00:	6a21      	ldr	r1, [r4, #32]
 8019a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a04:	4643      	mov	r3, r8
 8019a06:	463a      	mov	r2, r7
 8019a08:	4628      	mov	r0, r5
 8019a0a:	47b0      	blx	r6
 8019a0c:	2800      	cmp	r0, #0
 8019a0e:	dc06      	bgt.n	8019a1e <__sflush_r+0xfe>
 8019a10:	89a3      	ldrh	r3, [r4, #12]
 8019a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a16:	81a3      	strh	r3, [r4, #12]
 8019a18:	f04f 30ff 	mov.w	r0, #4294967295
 8019a1c:	e78e      	b.n	801993c <__sflush_r+0x1c>
 8019a1e:	4407      	add	r7, r0
 8019a20:	eba8 0800 	sub.w	r8, r8, r0
 8019a24:	e7e9      	b.n	80199fa <__sflush_r+0xda>
 8019a26:	bf00      	nop
 8019a28:	dfbffffe 	.word	0xdfbffffe

08019a2c <_fflush_r>:
 8019a2c:	b538      	push	{r3, r4, r5, lr}
 8019a2e:	690b      	ldr	r3, [r1, #16]
 8019a30:	4605      	mov	r5, r0
 8019a32:	460c      	mov	r4, r1
 8019a34:	b913      	cbnz	r3, 8019a3c <_fflush_r+0x10>
 8019a36:	2500      	movs	r5, #0
 8019a38:	4628      	mov	r0, r5
 8019a3a:	bd38      	pop	{r3, r4, r5, pc}
 8019a3c:	b118      	cbz	r0, 8019a46 <_fflush_r+0x1a>
 8019a3e:	6a03      	ldr	r3, [r0, #32]
 8019a40:	b90b      	cbnz	r3, 8019a46 <_fflush_r+0x1a>
 8019a42:	f7ff fa85 	bl	8018f50 <__sinit>
 8019a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d0f3      	beq.n	8019a36 <_fflush_r+0xa>
 8019a4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019a50:	07d0      	lsls	r0, r2, #31
 8019a52:	d404      	bmi.n	8019a5e <_fflush_r+0x32>
 8019a54:	0599      	lsls	r1, r3, #22
 8019a56:	d402      	bmi.n	8019a5e <_fflush_r+0x32>
 8019a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a5a:	f7ff fbab 	bl	80191b4 <__retarget_lock_acquire_recursive>
 8019a5e:	4628      	mov	r0, r5
 8019a60:	4621      	mov	r1, r4
 8019a62:	f7ff ff5d 	bl	8019920 <__sflush_r>
 8019a66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019a68:	07da      	lsls	r2, r3, #31
 8019a6a:	4605      	mov	r5, r0
 8019a6c:	d4e4      	bmi.n	8019a38 <_fflush_r+0xc>
 8019a6e:	89a3      	ldrh	r3, [r4, #12]
 8019a70:	059b      	lsls	r3, r3, #22
 8019a72:	d4e1      	bmi.n	8019a38 <_fflush_r+0xc>
 8019a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019a76:	f7ff fb9e 	bl	80191b6 <__retarget_lock_release_recursive>
 8019a7a:	e7dd      	b.n	8019a38 <_fflush_r+0xc>

08019a7c <fiprintf>:
 8019a7c:	b40e      	push	{r1, r2, r3}
 8019a7e:	b503      	push	{r0, r1, lr}
 8019a80:	4601      	mov	r1, r0
 8019a82:	ab03      	add	r3, sp, #12
 8019a84:	4805      	ldr	r0, [pc, #20]	; (8019a9c <fiprintf+0x20>)
 8019a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a8a:	6800      	ldr	r0, [r0, #0]
 8019a8c:	9301      	str	r3, [sp, #4]
 8019a8e:	f7ff fc9d 	bl	80193cc <_vfiprintf_r>
 8019a92:	b002      	add	sp, #8
 8019a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8019a98:	b003      	add	sp, #12
 8019a9a:	4770      	bx	lr
 8019a9c:	200000a4 	.word	0x200000a4

08019aa0 <__swbuf_r>:
 8019aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019aa2:	460e      	mov	r6, r1
 8019aa4:	4614      	mov	r4, r2
 8019aa6:	4605      	mov	r5, r0
 8019aa8:	b118      	cbz	r0, 8019ab2 <__swbuf_r+0x12>
 8019aaa:	6a03      	ldr	r3, [r0, #32]
 8019aac:	b90b      	cbnz	r3, 8019ab2 <__swbuf_r+0x12>
 8019aae:	f7ff fa4f 	bl	8018f50 <__sinit>
 8019ab2:	69a3      	ldr	r3, [r4, #24]
 8019ab4:	60a3      	str	r3, [r4, #8]
 8019ab6:	89a3      	ldrh	r3, [r4, #12]
 8019ab8:	071a      	lsls	r2, r3, #28
 8019aba:	d525      	bpl.n	8019b08 <__swbuf_r+0x68>
 8019abc:	6923      	ldr	r3, [r4, #16]
 8019abe:	b31b      	cbz	r3, 8019b08 <__swbuf_r+0x68>
 8019ac0:	6823      	ldr	r3, [r4, #0]
 8019ac2:	6922      	ldr	r2, [r4, #16]
 8019ac4:	1a98      	subs	r0, r3, r2
 8019ac6:	6963      	ldr	r3, [r4, #20]
 8019ac8:	b2f6      	uxtb	r6, r6
 8019aca:	4283      	cmp	r3, r0
 8019acc:	4637      	mov	r7, r6
 8019ace:	dc04      	bgt.n	8019ada <__swbuf_r+0x3a>
 8019ad0:	4621      	mov	r1, r4
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	f7ff ffaa 	bl	8019a2c <_fflush_r>
 8019ad8:	b9e0      	cbnz	r0, 8019b14 <__swbuf_r+0x74>
 8019ada:	68a3      	ldr	r3, [r4, #8]
 8019adc:	3b01      	subs	r3, #1
 8019ade:	60a3      	str	r3, [r4, #8]
 8019ae0:	6823      	ldr	r3, [r4, #0]
 8019ae2:	1c5a      	adds	r2, r3, #1
 8019ae4:	6022      	str	r2, [r4, #0]
 8019ae6:	701e      	strb	r6, [r3, #0]
 8019ae8:	6962      	ldr	r2, [r4, #20]
 8019aea:	1c43      	adds	r3, r0, #1
 8019aec:	429a      	cmp	r2, r3
 8019aee:	d004      	beq.n	8019afa <__swbuf_r+0x5a>
 8019af0:	89a3      	ldrh	r3, [r4, #12]
 8019af2:	07db      	lsls	r3, r3, #31
 8019af4:	d506      	bpl.n	8019b04 <__swbuf_r+0x64>
 8019af6:	2e0a      	cmp	r6, #10
 8019af8:	d104      	bne.n	8019b04 <__swbuf_r+0x64>
 8019afa:	4621      	mov	r1, r4
 8019afc:	4628      	mov	r0, r5
 8019afe:	f7ff ff95 	bl	8019a2c <_fflush_r>
 8019b02:	b938      	cbnz	r0, 8019b14 <__swbuf_r+0x74>
 8019b04:	4638      	mov	r0, r7
 8019b06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b08:	4621      	mov	r1, r4
 8019b0a:	4628      	mov	r0, r5
 8019b0c:	f000 f806 	bl	8019b1c <__swsetup_r>
 8019b10:	2800      	cmp	r0, #0
 8019b12:	d0d5      	beq.n	8019ac0 <__swbuf_r+0x20>
 8019b14:	f04f 37ff 	mov.w	r7, #4294967295
 8019b18:	e7f4      	b.n	8019b04 <__swbuf_r+0x64>
	...

08019b1c <__swsetup_r>:
 8019b1c:	b538      	push	{r3, r4, r5, lr}
 8019b1e:	4b2a      	ldr	r3, [pc, #168]	; (8019bc8 <__swsetup_r+0xac>)
 8019b20:	4605      	mov	r5, r0
 8019b22:	6818      	ldr	r0, [r3, #0]
 8019b24:	460c      	mov	r4, r1
 8019b26:	b118      	cbz	r0, 8019b30 <__swsetup_r+0x14>
 8019b28:	6a03      	ldr	r3, [r0, #32]
 8019b2a:	b90b      	cbnz	r3, 8019b30 <__swsetup_r+0x14>
 8019b2c:	f7ff fa10 	bl	8018f50 <__sinit>
 8019b30:	89a3      	ldrh	r3, [r4, #12]
 8019b32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b36:	0718      	lsls	r0, r3, #28
 8019b38:	d422      	bmi.n	8019b80 <__swsetup_r+0x64>
 8019b3a:	06d9      	lsls	r1, r3, #27
 8019b3c:	d407      	bmi.n	8019b4e <__swsetup_r+0x32>
 8019b3e:	2309      	movs	r3, #9
 8019b40:	602b      	str	r3, [r5, #0]
 8019b42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b46:	81a3      	strh	r3, [r4, #12]
 8019b48:	f04f 30ff 	mov.w	r0, #4294967295
 8019b4c:	e034      	b.n	8019bb8 <__swsetup_r+0x9c>
 8019b4e:	0758      	lsls	r0, r3, #29
 8019b50:	d512      	bpl.n	8019b78 <__swsetup_r+0x5c>
 8019b52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b54:	b141      	cbz	r1, 8019b68 <__swsetup_r+0x4c>
 8019b56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b5a:	4299      	cmp	r1, r3
 8019b5c:	d002      	beq.n	8019b64 <__swsetup_r+0x48>
 8019b5e:	4628      	mov	r0, r5
 8019b60:	f000 f84c 	bl	8019bfc <_free_r>
 8019b64:	2300      	movs	r3, #0
 8019b66:	6363      	str	r3, [r4, #52]	; 0x34
 8019b68:	89a3      	ldrh	r3, [r4, #12]
 8019b6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019b6e:	81a3      	strh	r3, [r4, #12]
 8019b70:	2300      	movs	r3, #0
 8019b72:	6063      	str	r3, [r4, #4]
 8019b74:	6923      	ldr	r3, [r4, #16]
 8019b76:	6023      	str	r3, [r4, #0]
 8019b78:	89a3      	ldrh	r3, [r4, #12]
 8019b7a:	f043 0308 	orr.w	r3, r3, #8
 8019b7e:	81a3      	strh	r3, [r4, #12]
 8019b80:	6923      	ldr	r3, [r4, #16]
 8019b82:	b94b      	cbnz	r3, 8019b98 <__swsetup_r+0x7c>
 8019b84:	89a3      	ldrh	r3, [r4, #12]
 8019b86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b8e:	d003      	beq.n	8019b98 <__swsetup_r+0x7c>
 8019b90:	4621      	mov	r1, r4
 8019b92:	4628      	mov	r0, r5
 8019b94:	f000 f8a4 	bl	8019ce0 <__smakebuf_r>
 8019b98:	89a0      	ldrh	r0, [r4, #12]
 8019b9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b9e:	f010 0301 	ands.w	r3, r0, #1
 8019ba2:	d00a      	beq.n	8019bba <__swsetup_r+0x9e>
 8019ba4:	2300      	movs	r3, #0
 8019ba6:	60a3      	str	r3, [r4, #8]
 8019ba8:	6963      	ldr	r3, [r4, #20]
 8019baa:	425b      	negs	r3, r3
 8019bac:	61a3      	str	r3, [r4, #24]
 8019bae:	6923      	ldr	r3, [r4, #16]
 8019bb0:	b943      	cbnz	r3, 8019bc4 <__swsetup_r+0xa8>
 8019bb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019bb6:	d1c4      	bne.n	8019b42 <__swsetup_r+0x26>
 8019bb8:	bd38      	pop	{r3, r4, r5, pc}
 8019bba:	0781      	lsls	r1, r0, #30
 8019bbc:	bf58      	it	pl
 8019bbe:	6963      	ldrpl	r3, [r4, #20]
 8019bc0:	60a3      	str	r3, [r4, #8]
 8019bc2:	e7f4      	b.n	8019bae <__swsetup_r+0x92>
 8019bc4:	2000      	movs	r0, #0
 8019bc6:	e7f7      	b.n	8019bb8 <__swsetup_r+0x9c>
 8019bc8:	200000a4 	.word	0x200000a4

08019bcc <_sbrk_r>:
 8019bcc:	b538      	push	{r3, r4, r5, lr}
 8019bce:	4d06      	ldr	r5, [pc, #24]	; (8019be8 <_sbrk_r+0x1c>)
 8019bd0:	2300      	movs	r3, #0
 8019bd2:	4604      	mov	r4, r0
 8019bd4:	4608      	mov	r0, r1
 8019bd6:	602b      	str	r3, [r5, #0]
 8019bd8:	f7e7 fcec 	bl	80015b4 <_sbrk>
 8019bdc:	1c43      	adds	r3, r0, #1
 8019bde:	d102      	bne.n	8019be6 <_sbrk_r+0x1a>
 8019be0:	682b      	ldr	r3, [r5, #0]
 8019be2:	b103      	cbz	r3, 8019be6 <_sbrk_r+0x1a>
 8019be4:	6023      	str	r3, [r4, #0]
 8019be6:	bd38      	pop	{r3, r4, r5, pc}
 8019be8:	2000d06c 	.word	0x2000d06c

08019bec <abort>:
 8019bec:	b508      	push	{r3, lr}
 8019bee:	2006      	movs	r0, #6
 8019bf0:	f000 f8da 	bl	8019da8 <raise>
 8019bf4:	2001      	movs	r0, #1
 8019bf6:	f7e7 fc65 	bl	80014c4 <_exit>
	...

08019bfc <_free_r>:
 8019bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bfe:	2900      	cmp	r1, #0
 8019c00:	d044      	beq.n	8019c8c <_free_r+0x90>
 8019c02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c06:	9001      	str	r0, [sp, #4]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	f1a1 0404 	sub.w	r4, r1, #4
 8019c0e:	bfb8      	it	lt
 8019c10:	18e4      	addlt	r4, r4, r3
 8019c12:	f7ff fba5 	bl	8019360 <__malloc_lock>
 8019c16:	4a1e      	ldr	r2, [pc, #120]	; (8019c90 <_free_r+0x94>)
 8019c18:	9801      	ldr	r0, [sp, #4]
 8019c1a:	6813      	ldr	r3, [r2, #0]
 8019c1c:	b933      	cbnz	r3, 8019c2c <_free_r+0x30>
 8019c1e:	6063      	str	r3, [r4, #4]
 8019c20:	6014      	str	r4, [r2, #0]
 8019c22:	b003      	add	sp, #12
 8019c24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019c28:	f7ff bba0 	b.w	801936c <__malloc_unlock>
 8019c2c:	42a3      	cmp	r3, r4
 8019c2e:	d908      	bls.n	8019c42 <_free_r+0x46>
 8019c30:	6825      	ldr	r5, [r4, #0]
 8019c32:	1961      	adds	r1, r4, r5
 8019c34:	428b      	cmp	r3, r1
 8019c36:	bf01      	itttt	eq
 8019c38:	6819      	ldreq	r1, [r3, #0]
 8019c3a:	685b      	ldreq	r3, [r3, #4]
 8019c3c:	1949      	addeq	r1, r1, r5
 8019c3e:	6021      	streq	r1, [r4, #0]
 8019c40:	e7ed      	b.n	8019c1e <_free_r+0x22>
 8019c42:	461a      	mov	r2, r3
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	b10b      	cbz	r3, 8019c4c <_free_r+0x50>
 8019c48:	42a3      	cmp	r3, r4
 8019c4a:	d9fa      	bls.n	8019c42 <_free_r+0x46>
 8019c4c:	6811      	ldr	r1, [r2, #0]
 8019c4e:	1855      	adds	r5, r2, r1
 8019c50:	42a5      	cmp	r5, r4
 8019c52:	d10b      	bne.n	8019c6c <_free_r+0x70>
 8019c54:	6824      	ldr	r4, [r4, #0]
 8019c56:	4421      	add	r1, r4
 8019c58:	1854      	adds	r4, r2, r1
 8019c5a:	42a3      	cmp	r3, r4
 8019c5c:	6011      	str	r1, [r2, #0]
 8019c5e:	d1e0      	bne.n	8019c22 <_free_r+0x26>
 8019c60:	681c      	ldr	r4, [r3, #0]
 8019c62:	685b      	ldr	r3, [r3, #4]
 8019c64:	6053      	str	r3, [r2, #4]
 8019c66:	440c      	add	r4, r1
 8019c68:	6014      	str	r4, [r2, #0]
 8019c6a:	e7da      	b.n	8019c22 <_free_r+0x26>
 8019c6c:	d902      	bls.n	8019c74 <_free_r+0x78>
 8019c6e:	230c      	movs	r3, #12
 8019c70:	6003      	str	r3, [r0, #0]
 8019c72:	e7d6      	b.n	8019c22 <_free_r+0x26>
 8019c74:	6825      	ldr	r5, [r4, #0]
 8019c76:	1961      	adds	r1, r4, r5
 8019c78:	428b      	cmp	r3, r1
 8019c7a:	bf04      	itt	eq
 8019c7c:	6819      	ldreq	r1, [r3, #0]
 8019c7e:	685b      	ldreq	r3, [r3, #4]
 8019c80:	6063      	str	r3, [r4, #4]
 8019c82:	bf04      	itt	eq
 8019c84:	1949      	addeq	r1, r1, r5
 8019c86:	6021      	streq	r1, [r4, #0]
 8019c88:	6054      	str	r4, [r2, #4]
 8019c8a:	e7ca      	b.n	8019c22 <_free_r+0x26>
 8019c8c:	b003      	add	sp, #12
 8019c8e:	bd30      	pop	{r4, r5, pc}
 8019c90:	2000d1b4 	.word	0x2000d1b4

08019c94 <__swhatbuf_r>:
 8019c94:	b570      	push	{r4, r5, r6, lr}
 8019c96:	460c      	mov	r4, r1
 8019c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019c9c:	2900      	cmp	r1, #0
 8019c9e:	b096      	sub	sp, #88	; 0x58
 8019ca0:	4615      	mov	r5, r2
 8019ca2:	461e      	mov	r6, r3
 8019ca4:	da0d      	bge.n	8019cc2 <__swhatbuf_r+0x2e>
 8019ca6:	89a3      	ldrh	r3, [r4, #12]
 8019ca8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8019cac:	f04f 0100 	mov.w	r1, #0
 8019cb0:	bf0c      	ite	eq
 8019cb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8019cb6:	2340      	movne	r3, #64	; 0x40
 8019cb8:	2000      	movs	r0, #0
 8019cba:	6031      	str	r1, [r6, #0]
 8019cbc:	602b      	str	r3, [r5, #0]
 8019cbe:	b016      	add	sp, #88	; 0x58
 8019cc0:	bd70      	pop	{r4, r5, r6, pc}
 8019cc2:	466a      	mov	r2, sp
 8019cc4:	f000 f878 	bl	8019db8 <_fstat_r>
 8019cc8:	2800      	cmp	r0, #0
 8019cca:	dbec      	blt.n	8019ca6 <__swhatbuf_r+0x12>
 8019ccc:	9901      	ldr	r1, [sp, #4]
 8019cce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8019cd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8019cd6:	4259      	negs	r1, r3
 8019cd8:	4159      	adcs	r1, r3
 8019cda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019cde:	e7eb      	b.n	8019cb8 <__swhatbuf_r+0x24>

08019ce0 <__smakebuf_r>:
 8019ce0:	898b      	ldrh	r3, [r1, #12]
 8019ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019ce4:	079d      	lsls	r5, r3, #30
 8019ce6:	4606      	mov	r6, r0
 8019ce8:	460c      	mov	r4, r1
 8019cea:	d507      	bpl.n	8019cfc <__smakebuf_r+0x1c>
 8019cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019cf0:	6023      	str	r3, [r4, #0]
 8019cf2:	6123      	str	r3, [r4, #16]
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	6163      	str	r3, [r4, #20]
 8019cf8:	b002      	add	sp, #8
 8019cfa:	bd70      	pop	{r4, r5, r6, pc}
 8019cfc:	ab01      	add	r3, sp, #4
 8019cfe:	466a      	mov	r2, sp
 8019d00:	f7ff ffc8 	bl	8019c94 <__swhatbuf_r>
 8019d04:	9900      	ldr	r1, [sp, #0]
 8019d06:	4605      	mov	r5, r0
 8019d08:	4630      	mov	r0, r6
 8019d0a:	f7ff faa9 	bl	8019260 <_malloc_r>
 8019d0e:	b948      	cbnz	r0, 8019d24 <__smakebuf_r+0x44>
 8019d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019d14:	059a      	lsls	r2, r3, #22
 8019d16:	d4ef      	bmi.n	8019cf8 <__smakebuf_r+0x18>
 8019d18:	f023 0303 	bic.w	r3, r3, #3
 8019d1c:	f043 0302 	orr.w	r3, r3, #2
 8019d20:	81a3      	strh	r3, [r4, #12]
 8019d22:	e7e3      	b.n	8019cec <__smakebuf_r+0xc>
 8019d24:	89a3      	ldrh	r3, [r4, #12]
 8019d26:	6020      	str	r0, [r4, #0]
 8019d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d2c:	81a3      	strh	r3, [r4, #12]
 8019d2e:	9b00      	ldr	r3, [sp, #0]
 8019d30:	6163      	str	r3, [r4, #20]
 8019d32:	9b01      	ldr	r3, [sp, #4]
 8019d34:	6120      	str	r0, [r4, #16]
 8019d36:	b15b      	cbz	r3, 8019d50 <__smakebuf_r+0x70>
 8019d38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d3c:	4630      	mov	r0, r6
 8019d3e:	f000 f84d 	bl	8019ddc <_isatty_r>
 8019d42:	b128      	cbz	r0, 8019d50 <__smakebuf_r+0x70>
 8019d44:	89a3      	ldrh	r3, [r4, #12]
 8019d46:	f023 0303 	bic.w	r3, r3, #3
 8019d4a:	f043 0301 	orr.w	r3, r3, #1
 8019d4e:	81a3      	strh	r3, [r4, #12]
 8019d50:	89a3      	ldrh	r3, [r4, #12]
 8019d52:	431d      	orrs	r5, r3
 8019d54:	81a5      	strh	r5, [r4, #12]
 8019d56:	e7cf      	b.n	8019cf8 <__smakebuf_r+0x18>

08019d58 <_raise_r>:
 8019d58:	291f      	cmp	r1, #31
 8019d5a:	b538      	push	{r3, r4, r5, lr}
 8019d5c:	4604      	mov	r4, r0
 8019d5e:	460d      	mov	r5, r1
 8019d60:	d904      	bls.n	8019d6c <_raise_r+0x14>
 8019d62:	2316      	movs	r3, #22
 8019d64:	6003      	str	r3, [r0, #0]
 8019d66:	f04f 30ff 	mov.w	r0, #4294967295
 8019d6a:	bd38      	pop	{r3, r4, r5, pc}
 8019d6c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8019d6e:	b112      	cbz	r2, 8019d76 <_raise_r+0x1e>
 8019d70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019d74:	b94b      	cbnz	r3, 8019d8a <_raise_r+0x32>
 8019d76:	4620      	mov	r0, r4
 8019d78:	f000 f852 	bl	8019e20 <_getpid_r>
 8019d7c:	462a      	mov	r2, r5
 8019d7e:	4601      	mov	r1, r0
 8019d80:	4620      	mov	r0, r4
 8019d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019d86:	f000 b839 	b.w	8019dfc <_kill_r>
 8019d8a:	2b01      	cmp	r3, #1
 8019d8c:	d00a      	beq.n	8019da4 <_raise_r+0x4c>
 8019d8e:	1c59      	adds	r1, r3, #1
 8019d90:	d103      	bne.n	8019d9a <_raise_r+0x42>
 8019d92:	2316      	movs	r3, #22
 8019d94:	6003      	str	r3, [r0, #0]
 8019d96:	2001      	movs	r0, #1
 8019d98:	e7e7      	b.n	8019d6a <_raise_r+0x12>
 8019d9a:	2400      	movs	r4, #0
 8019d9c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019da0:	4628      	mov	r0, r5
 8019da2:	4798      	blx	r3
 8019da4:	2000      	movs	r0, #0
 8019da6:	e7e0      	b.n	8019d6a <_raise_r+0x12>

08019da8 <raise>:
 8019da8:	4b02      	ldr	r3, [pc, #8]	; (8019db4 <raise+0xc>)
 8019daa:	4601      	mov	r1, r0
 8019dac:	6818      	ldr	r0, [r3, #0]
 8019dae:	f7ff bfd3 	b.w	8019d58 <_raise_r>
 8019db2:	bf00      	nop
 8019db4:	200000a4 	.word	0x200000a4

08019db8 <_fstat_r>:
 8019db8:	b538      	push	{r3, r4, r5, lr}
 8019dba:	4d07      	ldr	r5, [pc, #28]	; (8019dd8 <_fstat_r+0x20>)
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	4604      	mov	r4, r0
 8019dc0:	4608      	mov	r0, r1
 8019dc2:	4611      	mov	r1, r2
 8019dc4:	602b      	str	r3, [r5, #0]
 8019dc6:	f7e7 fbcc 	bl	8001562 <_fstat>
 8019dca:	1c43      	adds	r3, r0, #1
 8019dcc:	d102      	bne.n	8019dd4 <_fstat_r+0x1c>
 8019dce:	682b      	ldr	r3, [r5, #0]
 8019dd0:	b103      	cbz	r3, 8019dd4 <_fstat_r+0x1c>
 8019dd2:	6023      	str	r3, [r4, #0]
 8019dd4:	bd38      	pop	{r3, r4, r5, pc}
 8019dd6:	bf00      	nop
 8019dd8:	2000d06c 	.word	0x2000d06c

08019ddc <_isatty_r>:
 8019ddc:	b538      	push	{r3, r4, r5, lr}
 8019dde:	4d06      	ldr	r5, [pc, #24]	; (8019df8 <_isatty_r+0x1c>)
 8019de0:	2300      	movs	r3, #0
 8019de2:	4604      	mov	r4, r0
 8019de4:	4608      	mov	r0, r1
 8019de6:	602b      	str	r3, [r5, #0]
 8019de8:	f7e7 fbcb 	bl	8001582 <_isatty>
 8019dec:	1c43      	adds	r3, r0, #1
 8019dee:	d102      	bne.n	8019df6 <_isatty_r+0x1a>
 8019df0:	682b      	ldr	r3, [r5, #0]
 8019df2:	b103      	cbz	r3, 8019df6 <_isatty_r+0x1a>
 8019df4:	6023      	str	r3, [r4, #0]
 8019df6:	bd38      	pop	{r3, r4, r5, pc}
 8019df8:	2000d06c 	.word	0x2000d06c

08019dfc <_kill_r>:
 8019dfc:	b538      	push	{r3, r4, r5, lr}
 8019dfe:	4d07      	ldr	r5, [pc, #28]	; (8019e1c <_kill_r+0x20>)
 8019e00:	2300      	movs	r3, #0
 8019e02:	4604      	mov	r4, r0
 8019e04:	4608      	mov	r0, r1
 8019e06:	4611      	mov	r1, r2
 8019e08:	602b      	str	r3, [r5, #0]
 8019e0a:	f7e7 fb49 	bl	80014a0 <_kill>
 8019e0e:	1c43      	adds	r3, r0, #1
 8019e10:	d102      	bne.n	8019e18 <_kill_r+0x1c>
 8019e12:	682b      	ldr	r3, [r5, #0]
 8019e14:	b103      	cbz	r3, 8019e18 <_kill_r+0x1c>
 8019e16:	6023      	str	r3, [r4, #0]
 8019e18:	bd38      	pop	{r3, r4, r5, pc}
 8019e1a:	bf00      	nop
 8019e1c:	2000d06c 	.word	0x2000d06c

08019e20 <_getpid_r>:
 8019e20:	f7e7 bb36 	b.w	8001490 <_getpid>

08019e24 <_init>:
 8019e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e26:	bf00      	nop
 8019e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e2a:	bc08      	pop	{r3}
 8019e2c:	469e      	mov	lr, r3
 8019e2e:	4770      	bx	lr

08019e30 <_fini>:
 8019e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e32:	bf00      	nop
 8019e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e36:	bc08      	pop	{r3}
 8019e38:	469e      	mov	lr, r3
 8019e3a:	4770      	bx	lr
