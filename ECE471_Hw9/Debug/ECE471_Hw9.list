
ECE471_Hw9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018a5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005c2c  08018c2c  08018c2c  00028c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e858  0801e858  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801e858  0801e858  0002e858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e860  0801e860  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e860  0801e860  0002e860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e864  0801e864  0002e864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0801e868  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a0  0801e908  000300a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000140  0801e9a8  00030140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000cf38  200001e0  0801ea48  000301e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000d118  0801ea48  0003d118  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 15 .debug_info   00033761  00000000  00000000  00030253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000080d9  00000000  00000000  000639b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002738  00000000  00000000  0006ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001ef8  00000000  00000000  0006e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00038dbb  00000000  00000000  000700c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003de9e  00000000  00000000  000a8e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011be61  00000000  00000000  000e6d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000ac90  00000000  00000000  00202b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000070  00000000  00000000  0020d80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018c14 	.word	0x08018c14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	08018c14 	.word	0x08018c14

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005dc:	b480      	push	{r7}
 80005de:	b085      	sub	sp, #20
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	60f8      	str	r0, [r7, #12]
 80005e4:	60b9      	str	r1, [r7, #8]
 80005e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	4a07      	ldr	r2, [pc, #28]	; (8000608 <vApplicationGetIdleTaskMemory+0x2c>)
 80005ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	4a06      	ldr	r2, [pc, #24]	; (800060c <vApplicationGetIdleTaskMemory+0x30>)
 80005f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	200001fc 	.word	0x200001fc
 800060c:	20000250 	.word	0x20000250

08000610 <custom_SSI_handler>:
/* USER CODE BEGIN 0 */
#define custom_SSI_tag_num 4
const char* custom_SSI_tags[custom_SSI_tag_num] = {"lred", "lgreen", "lblue", "buser"};

uint16_t custom_SSI_handler(const char* ssi_tag_name, char *pcInsert, int iInsertLen)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  if ( iInsertLen < 10 ) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2b09      	cmp	r3, #9
 8000620:	dc02      	bgt.n	8000628 <custom_SSI_handler+0x18>
      // if the buffer size is smaller than the longest response then indicate an error
      return(-1);
 8000622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000626:	e093      	b.n	8000750 <custom_SSI_handler+0x140>
  }

  if (strcmp(ssi_tag_name, custom_SSI_tags[0])==0) {
 8000628:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <custom_SSI_handler+0x148>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	68f8      	ldr	r0, [r7, #12]
 8000630:	f7ff fdee 	bl	8000210 <strcmp>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d11a      	bne.n	8000670 <custom_SSI_handler+0x60>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) {
 800063a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800063e:	4847      	ldr	r0, [pc, #284]	; (800075c <custom_SSI_handler+0x14c>)
 8000640:	f002 fc8e 	bl	8002f60 <HAL_GPIO_ReadPin>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d006      	beq.n	8000658 <custom_SSI_handler+0x48>
          strcpy(pcInsert, "1");
 800064a:	68bb      	ldr	r3, [r7, #8]
 800064c:	4944      	ldr	r1, [pc, #272]	; (8000760 <custom_SSI_handler+0x150>)
 800064e:	461a      	mov	r2, r3
 8000650:	460b      	mov	r3, r1
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	8013      	strh	r3, [r2, #0]
 8000656:	e005      	b.n	8000664 <custom_SSI_handler+0x54>
      } else {
          strcpy(pcInsert, "0");
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4942      	ldr	r1, [pc, #264]	; (8000764 <custom_SSI_handler+0x154>)
 800065c:	461a      	mov	r2, r3
 800065e:	460b      	mov	r3, r1
 8000660:	881b      	ldrh	r3, [r3, #0]
 8000662:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 8000664:	68b8      	ldr	r0, [r7, #8]
 8000666:	f7ff fddd 	bl	8000224 <strlen>
 800066a:	4603      	mov	r3, r0
 800066c:	b29b      	uxth	r3, r3
 800066e:	e06f      	b.n	8000750 <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[1])==0) {
 8000670:	4b39      	ldr	r3, [pc, #228]	; (8000758 <custom_SSI_handler+0x148>)
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	4619      	mov	r1, r3
 8000676:	68f8      	ldr	r0, [r7, #12]
 8000678:	f7ff fdca 	bl	8000210 <strcmp>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d119      	bne.n	80006b6 <custom_SSI_handler+0xa6>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0)) {
 8000682:	2101      	movs	r1, #1
 8000684:	4835      	ldr	r0, [pc, #212]	; (800075c <custom_SSI_handler+0x14c>)
 8000686:	f002 fc6b 	bl	8002f60 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d006      	beq.n	800069e <custom_SSI_handler+0x8e>
          strcpy(pcInsert, "1");
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4933      	ldr	r1, [pc, #204]	; (8000760 <custom_SSI_handler+0x150>)
 8000694:	461a      	mov	r2, r3
 8000696:	460b      	mov	r3, r1
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	8013      	strh	r3, [r2, #0]
 800069c:	e005      	b.n	80006aa <custom_SSI_handler+0x9a>
      } else {
          strcpy(pcInsert, "0");
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	4930      	ldr	r1, [pc, #192]	; (8000764 <custom_SSI_handler+0x154>)
 80006a2:	461a      	mov	r2, r3
 80006a4:	460b      	mov	r3, r1
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 80006aa:	68b8      	ldr	r0, [r7, #8]
 80006ac:	f7ff fdba 	bl	8000224 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	e04c      	b.n	8000750 <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[2])==0) {
 80006b6:	4b28      	ldr	r3, [pc, #160]	; (8000758 <custom_SSI_handler+0x148>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	4619      	mov	r1, r3
 80006bc:	68f8      	ldr	r0, [r7, #12]
 80006be:	f7ff fda7 	bl	8000210 <strcmp>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d119      	bne.n	80006fc <custom_SSI_handler+0xec>
      if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7)) {
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	4824      	ldr	r0, [pc, #144]	; (800075c <custom_SSI_handler+0x14c>)
 80006cc:	f002 fc48 	bl	8002f60 <HAL_GPIO_ReadPin>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d006      	beq.n	80006e4 <custom_SSI_handler+0xd4>
          strcpy(pcInsert, "1");
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4921      	ldr	r1, [pc, #132]	; (8000760 <custom_SSI_handler+0x150>)
 80006da:	461a      	mov	r2, r3
 80006dc:	460b      	mov	r3, r1
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	8013      	strh	r3, [r2, #0]
 80006e2:	e005      	b.n	80006f0 <custom_SSI_handler+0xe0>
      } else {
          strcpy(pcInsert, "0");
 80006e4:	68bb      	ldr	r3, [r7, #8]
 80006e6:	491f      	ldr	r1, [pc, #124]	; (8000764 <custom_SSI_handler+0x154>)
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	8013      	strh	r3, [r2, #0]
      }
      return(strlen(pcInsert));
 80006f0:	68b8      	ldr	r0, [r7, #8]
 80006f2:	f7ff fd97 	bl	8000224 <strlen>
 80006f6:	4603      	mov	r3, r0
 80006f8:	b29b      	uxth	r3, r3
 80006fa:	e029      	b.n	8000750 <custom_SSI_handler+0x140>
  } else if (strcmp(ssi_tag_name, custom_SSI_tags[3])==0) {
 80006fc:	4b16      	ldr	r3, [pc, #88]	; (8000758 <custom_SSI_handler+0x148>)
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	4619      	mov	r1, r3
 8000702:	68f8      	ldr	r0, [r7, #12]
 8000704:	f7ff fd84 	bl	8000210 <strcmp>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d11e      	bne.n	800074c <custom_SSI_handler+0x13c>
      if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4815      	ldr	r0, [pc, #84]	; (8000768 <custom_SSI_handler+0x158>)
 8000714:	f002 fc24 	bl	8002f60 <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d007      	beq.n	800072e <custom_SSI_handler+0x11e>
          strcpy(pcInsert, "pressed");
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4912      	ldr	r1, [pc, #72]	; (800076c <custom_SSI_handler+0x15c>)
 8000722:	461a      	mov	r2, r3
 8000724:	460b      	mov	r3, r1
 8000726:	cb03      	ldmia	r3!, {r0, r1}
 8000728:	6010      	str	r0, [r2, #0]
 800072a:	6051      	str	r1, [r2, #4]
 800072c:	e008      	b.n	8000740 <custom_SSI_handler+0x130>
      } else {
          strcpy(pcInsert, "released");
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	490f      	ldr	r1, [pc, #60]	; (8000770 <custom_SSI_handler+0x160>)
 8000732:	461a      	mov	r2, r3
 8000734:	460b      	mov	r3, r1
 8000736:	cb03      	ldmia	r3!, {r0, r1}
 8000738:	6010      	str	r0, [r2, #0]
 800073a:	6051      	str	r1, [r2, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	7213      	strb	r3, [r2, #8]
      }
      return(strlen(pcInsert));
 8000740:	68b8      	ldr	r0, [r7, #8]
 8000742:	f7ff fd6f 	bl	8000224 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29b      	uxth	r3, r3
 800074a:	e001      	b.n	8000750 <custom_SSI_handler+0x140>
  } else {
      // otherwise, return unrecognized tag error
    return(-1);
 800074c:	f64f 73ff 	movw	r3, #65535	; 0xffff
  }

}
 8000750:	4618      	mov	r0, r3
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000000 	.word	0x20000000
 800075c:	40020400 	.word	0x40020400
 8000760:	08018c4c 	.word	0x08018c4c
 8000764:	08018c50 	.word	0x08018c50
 8000768:	40020800 	.word	0x40020800
 800076c:	08018c54 	.word	0x08018c54
 8000770:	08018c5c 	.word	0x08018c5c

08000774 <setRED>:
 * request being ignored.
 *
 */

const char * setRED(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	60f8      	str	r0, [r7, #12]
 800077c:	60b9      	str	r1, [r7, #8]
 800077e:	607a      	str	r2, [r7, #4]
 8000780:	603b      	str	r3, [r7, #0]
    if (iNumParams==1) {
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d114      	bne.n	80007b2 <setRED+0x3e>
        if (atoi(pcValue[0])==1) {
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f017 f98f 	bl	8017ab0 <atoi>
 8000792:	4603      	mov	r3, r0
 8000794:	2b01      	cmp	r3, #1
 8000796:	d106      	bne.n	80007a6 <setRED+0x32>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800079e:	4807      	ldr	r0, [pc, #28]	; (80007bc <setRED+0x48>)
 80007a0:	f002 fbf6 	bl	8002f90 <HAL_GPIO_WritePin>
 80007a4:	e005      	b.n	80007b2 <setRED+0x3e>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <setRED+0x48>)
 80007ae:	f002 fbef 	bl	8002f90 <HAL_GPIO_WritePin>
        }
    }
    return("/index.shtml");
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <setRED+0x4c>)
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3710      	adds	r7, #16
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40020400 	.word	0x40020400
 80007c0:	08018c68 	.word	0x08018c68

080007c4 <setGRN>:

const char * setGRN(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]
 80007d0:	603b      	str	r3, [r7, #0]
    if (iNumParams==1) {
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2b01      	cmp	r3, #1
 80007d6:	d112      	bne.n	80007fe <setGRN+0x3a>
        if (atoi(pcValue[0])==1) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4618      	mov	r0, r3
 80007de:	f017 f967 	bl	8017ab0 <atoi>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d105      	bne.n	80007f4 <setGRN+0x30>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2101      	movs	r1, #1
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <setGRN+0x44>)
 80007ee:	f002 fbcf 	bl	8002f90 <HAL_GPIO_WritePin>
 80007f2:	e004      	b.n	80007fe <setGRN+0x3a>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2101      	movs	r1, #1
 80007f8:	4803      	ldr	r0, [pc, #12]	; (8000808 <setGRN+0x44>)
 80007fa:	f002 fbc9 	bl	8002f90 <HAL_GPIO_WritePin>
        }
    }
    return("/index.shtml");
 80007fe:	4b03      	ldr	r3, [pc, #12]	; (800080c <setGRN+0x48>)
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40020400 	.word	0x40020400
 800080c:	08018c68 	.word	0x08018c68

08000810 <setBLU>:

const char * setBLU(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	603b      	str	r3, [r7, #0]
    if (iNumParams==1) {
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d112      	bne.n	800084a <setBLU+0x3a>
        if (atoi(pcValue[0])==1) {
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f017 f941 	bl	8017ab0 <atoi>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d105      	bne.n	8000840 <setBLU+0x30>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000834:	2201      	movs	r2, #1
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	4806      	ldr	r0, [pc, #24]	; (8000854 <setBLU+0x44>)
 800083a:	f002 fba9 	bl	8002f90 <HAL_GPIO_WritePin>
 800083e:	e004      	b.n	800084a <setBLU+0x3a>
        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000840:	2200      	movs	r2, #0
 8000842:	2180      	movs	r1, #128	; 0x80
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <setBLU+0x44>)
 8000846:	f002 fba3 	bl	8002f90 <HAL_GPIO_WritePin>
        }
    }
    return("/index.shtml");
 800084a:	4b03      	ldr	r3, [pc, #12]	; (8000858 <setBLU+0x48>)
}
 800084c:	4618      	mov	r0, r3
 800084e:	3710      	adds	r7, #16
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40020400 	.word	0x40020400
 8000858:	08018c68 	.word	0x08018c68

0800085c <setALL>:

const char * setALL(int iIndex, int iNumParams, char *pcParam[], char *pcValue[])
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	60f8      	str	r0, [r7, #12]
 8000864:	60b9      	str	r1, [r7, #8]
 8000866:	607a      	str	r2, [r7, #4]
 8000868:	603b      	str	r3, [r7, #0]
    // Warning: use atoi_r instead of atoi in case you also use this function inside a RTOS task
    for (int i=0; i<iNumParams; i++) {
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	e06c      	b.n	800094a <setALL+0xee>
        if (strcmp(pcParam[i],"red")==0) {
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4938      	ldr	r1, [pc, #224]	; (800095c <setALL+0x100>)
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fcc7 	bl	8000210 <strcmp>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d118      	bne.n	80008ba <setALL+0x5e>
            if (atoi(pcValue[i])==1) {
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	009b      	lsls	r3, r3, #2
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	4413      	add	r3, r2
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f017 f90c 	bl	8017ab0 <atoi>
 8000898:	4603      	mov	r3, r0
 800089a:	2b01      	cmp	r3, #1
 800089c:	d106      	bne.n	80008ac <setALL+0x50>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008a4:	482e      	ldr	r0, [pc, #184]	; (8000960 <setALL+0x104>)
 80008a6:	f002 fb73 	bl	8002f90 <HAL_GPIO_WritePin>
 80008aa:	e04b      	b.n	8000944 <setALL+0xe8>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b2:	482b      	ldr	r0, [pc, #172]	; (8000960 <setALL+0x104>)
 80008b4:	f002 fb6c 	bl	8002f90 <HAL_GPIO_WritePin>
 80008b8:	e044      	b.n	8000944 <setALL+0xe8>
            }
        } else if (strcmp(pcParam[i],"green")==0) {
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	4413      	add	r3, r2
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4927      	ldr	r1, [pc, #156]	; (8000964 <setALL+0x108>)
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fca2 	bl	8000210 <strcmp>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d116      	bne.n	8000900 <setALL+0xa4>
            if (atoi(pcValue[i])==1) {
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	683a      	ldr	r2, [r7, #0]
 80008d8:	4413      	add	r3, r2
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f017 f8e7 	bl	8017ab0 <atoi>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d105      	bne.n	80008f4 <setALL+0x98>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2101      	movs	r1, #1
 80008ec:	481c      	ldr	r0, [pc, #112]	; (8000960 <setALL+0x104>)
 80008ee:	f002 fb4f 	bl	8002f90 <HAL_GPIO_WritePin>
 80008f2:	e027      	b.n	8000944 <setALL+0xe8>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	2101      	movs	r1, #1
 80008f8:	4819      	ldr	r0, [pc, #100]	; (8000960 <setALL+0x104>)
 80008fa:	f002 fb49 	bl	8002f90 <HAL_GPIO_WritePin>
 80008fe:	e021      	b.n	8000944 <setALL+0xe8>
            }
        } else if (strcmp(pcParam[i],"blue")==0) {
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	4413      	add	r3, r2
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4917      	ldr	r1, [pc, #92]	; (8000968 <setALL+0x10c>)
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc7f 	bl	8000210 <strcmp>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d115      	bne.n	8000944 <setALL+0xe8>
            if (atoi(pcValue[i])==1) {
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	683a      	ldr	r2, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f017 f8c4 	bl	8017ab0 <atoi>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d105      	bne.n	800093a <setALL+0xde>
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800092e:	2201      	movs	r2, #1
 8000930:	2180      	movs	r1, #128	; 0x80
 8000932:	480b      	ldr	r0, [pc, #44]	; (8000960 <setALL+0x104>)
 8000934:	f002 fb2c 	bl	8002f90 <HAL_GPIO_WritePin>
 8000938:	e004      	b.n	8000944 <setALL+0xe8>
            } else {
                HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	4808      	ldr	r0, [pc, #32]	; (8000960 <setALL+0x104>)
 8000940:	f002 fb26 	bl	8002f90 <HAL_GPIO_WritePin>
    for (int i=0; i<iNumParams; i++) {
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	3301      	adds	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	697a      	ldr	r2, [r7, #20]
 800094c:	68bb      	ldr	r3, [r7, #8]
 800094e:	429a      	cmp	r2, r3
 8000950:	db8e      	blt.n	8000870 <setALL+0x14>
            }
        } // else invalid parameters are simply ignored in this example
    }
    // we return the status page as confirmation in this example
    return("/index.shtml");
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <setALL+0x110>)
}
 8000954:	4618      	mov	r0, r3
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	08018c78 	.word	0x08018c78
 8000960:	40020400 	.word	0x40020400
 8000964:	08018c7c 	.word	0x08018c7c
 8000968:	08018c84 	.word	0x08018c84
 800096c:	08018c68 	.word	0x08018c68

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b5b0      	push	{r4, r5, r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000976:	f000 fdc5 	bl	8001504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097a:	f000 f81f 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800097e:	f000 f8e3 	bl	8000b48 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000982:	f000 f883 	bl	8000a8c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000986:	f000 f8b1 	bl	8000aec <MX_USB_OTG_FS_PCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800098a:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <main+0x44>)
 800098c:	1d3c      	adds	r4, r7, #4
 800098e:	461d      	mov	r5, r3
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000994:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000998:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f005 fcfd 	bl	80063a0 <osThreadCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <main+0x48>)
 80009aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009ac:	f005 fce1 	bl	8006372 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x40>
 80009b2:	bf00      	nop
 80009b4:	08018cd0 	.word	0x08018cd0
 80009b8:	200009e0 	.word	0x200009e0

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b094      	sub	sp, #80	; 0x50
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0320 	add.w	r3, r7, #32
 80009c6:	2230      	movs	r2, #48	; 0x30
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f017 fa53 	bl	8017e76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	f107 030c 	add.w	r3, r7, #12
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009e0:	f002 fc38 	bl	8003254 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b27      	ldr	r3, [pc, #156]	; (8000a84 <SystemClock_Config+0xc8>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a26      	ldr	r2, [pc, #152]	; (8000a84 <SystemClock_Config+0xc8>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <SystemClock_Config+0xc8>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009fc:	4b22      	ldr	r3, [pc, #136]	; (8000a88 <SystemClock_Config+0xcc>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a20      	ldr	r2, [pc, #128]	; (8000a88 <SystemClock_Config+0xcc>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1e      	ldr	r3, [pc, #120]	; (8000a88 <SystemClock_Config+0xcc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a1c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a30:	2348      	movs	r3, #72	; 0x48
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f002 fc17 	bl	8003274 <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a4c:	f000 f949 	bl	8000ce2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f002 fea5 	bl	80037bc <HAL_RCC_ClockConfig>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a78:	f000 f933 	bl	8000ce2 <Error_Handler>
  }
}
 8000a7c:	bf00      	nop
 8000a7e:	3750      	adds	r7, #80	; 0x50
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	40007000 	.word	0x40007000

08000a8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <MX_USART3_UART_Init+0x5c>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_USART3_UART_Init+0x58>)
 8000ad0:	f003 ff9c 	bl	8004a0c <HAL_UART_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f902 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000450 	.word	0x20000450
 8000ae8:	40004800 	.word	0x40004800

08000aec <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000af6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000af8:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2206      	movs	r2, #6
 8000afc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	2202      	movs	r2, #2
 8000b02:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2201      	movs	r2, #1
 8000b26:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	f002 fa47 	bl	8002fc2 <HAL_PCD_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f8d2 	bl	8000ce2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200004d8 	.word	0x200004d8

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b47      	ldr	r3, [pc, #284]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a46      	ldr	r2, [pc, #280]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b44      	ldr	r3, [pc, #272]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b41      	ldr	r3, [pc, #260]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a40      	ldr	r2, [pc, #256]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b3e      	ldr	r3, [pc, #248]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b3b      	ldr	r3, [pc, #236]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a3a      	ldr	r2, [pc, #232]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b35      	ldr	r3, [pc, #212]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a34      	ldr	r2, [pc, #208]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b32      	ldr	r3, [pc, #200]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bbe:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a2e      	ldr	r2, [pc, #184]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b2c      	ldr	r3, [pc, #176]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a28      	ldr	r2, [pc, #160]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000bdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b26      	ldr	r3, [pc, #152]	; (8000c7c <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_GPIO_Init+0x138>)
 8000bf6:	f002 f9cb 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2140      	movs	r1, #64	; 0x40
 8000bfe:	4821      	ldr	r0, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x13c>)
 8000c00:	f002 f9c6 	bl	8002f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481b      	ldr	r0, [pc, #108]	; (8000c88 <MX_GPIO_Init+0x140>)
 8000c1c:	f001 fff4 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c20:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 031c 	add.w	r3, r7, #28
 8000c36:	4619      	mov	r1, r3
 8000c38:	4811      	ldr	r0, [pc, #68]	; (8000c80 <MX_GPIO_Init+0x138>)
 8000c3a:	f001 ffe5 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c3e:	2340      	movs	r3, #64	; 0x40
 8000c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	480b      	ldr	r0, [pc, #44]	; (8000c84 <MX_GPIO_Init+0x13c>)
 8000c56:	f001 ffd7 	bl	8002c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c5a:	2380      	movs	r3, #128	; 0x80
 8000c5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_GPIO_Init+0x13c>)
 8000c6e:	f001 ffcb 	bl	8002c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	40020400 	.word	0x40020400
 8000c84:	40021800 	.word	0x40021800
 8000c88:	40020800 	.word	0x40020800

08000c8c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c94:	f004 fe00 	bl	8005898 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  //set up the web server
  http_set_ssi_handler(custom_SSI_handler, custom_SSI_tags, custom_SSI_tag_num);
 8000c98:	2204      	movs	r2, #4
 8000c9a:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <StartDefaultTask+0x2c>)
 8000c9c:	4807      	ldr	r0, [pc, #28]	; (8000cbc <StartDefaultTask+0x30>)
 8000c9e:	f009 feb7 	bl	800aa10 <http_set_ssi_handler>
  http_set_cgi_handlers(custom_CGI_handlers, custon_CGI_handler_num);
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <StartDefaultTask+0x34>)
 8000ca6:	f009 fed3 	bl	800aa50 <http_set_cgi_handlers>
  //start the web server after MX_LWIP_Init() is called
  httpd_init();
 8000caa:	f009 fe91 	bl	800a9d0 <httpd_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cae:	2001      	movs	r0, #1
 8000cb0:	f005 fbc2 	bl	8006438 <osDelay>
 8000cb4:	e7fb      	b.n	8000cae <StartDefaultTask+0x22>
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	08000611 	.word	0x08000611
 8000cc0:	0801bea8 	.word	0x0801bea8

08000cc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cd4:	d101      	bne.n	8000cda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cd6:	f000 fc23 	bl	8001520 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce6:	b672      	cpsid	i
}
 8000ce8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cea:	e7fe      	b.n	8000cea <Error_Handler+0x8>

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a10      	ldr	r2, [pc, #64]	; (8000d38 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	607b      	str	r3, [r7, #4]
 8000d08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	210f      	movs	r1, #15
 8000d26:	f06f 0001 	mvn.w	r0, #1
 8000d2a:	f000 fcf5 	bl	8001718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023800 	.word	0x40023800

08000d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0aa      	sub	sp, #168	; 0xa8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0310 	add.w	r3, r7, #16
 8000d58:	2284      	movs	r2, #132	; 0x84
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f017 f88a 	bl	8017e76 <memset>
  if(huart->Instance==USART3)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <HAL_UART_MspInit+0xb4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d13c      	bne.n	8000de6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d70:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d76:	f107 0310 	add.w	r3, r7, #16
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 ff76 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d86:	f7ff ffac 	bl	8000ce2 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a19      	ldr	r2, [pc, #100]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a13      	ldr	r2, [pc, #76]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_UART_MspInit+0xb8>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dd4:	2307      	movs	r3, #7
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dda:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <HAL_UART_MspInit+0xbc>)
 8000de2:	f001 ff11 	bl	8002c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	37a8      	adds	r7, #168	; 0xa8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40004800 	.word	0x40004800
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020c00 	.word	0x40020c00

08000dfc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0ac      	sub	sp, #176	; 0xb0
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e14:	f107 0318 	add.w	r3, r7, #24
 8000e18:	2284      	movs	r2, #132	; 0x84
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f017 f82a 	bl	8017e76 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e2a:	d159      	bne.n	8000ee0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e38:	f107 0318 	add.w	r3, r7, #24
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 ff15 	bl	8003c6c <HAL_RCCEx_PeriphCLKConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000e48:	f7ff ff4b 	bl	8000ce2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4c:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	4a25      	ldr	r2, [pc, #148]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6313      	str	r3, [r2, #48]	; 0x30
 8000e58:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0301 	and.w	r3, r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000e64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000e68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e7e:	230a      	movs	r3, #10
 8000e80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4818      	ldr	r0, [pc, #96]	; (8000eec <HAL_PCD_MspInit+0xf0>)
 8000e8c:	f001 febc 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4810      	ldr	r0, [pc, #64]	; (8000eec <HAL_PCD_MspInit+0xf0>)
 8000eac:	f001 feac 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000eb0:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb4:	4a0c      	ldr	r2, [pc, #48]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eba:	6353      	str	r3, [r2, #52]	; 0x34
 8000ebc:	4b0a      	ldr	r3, [pc, #40]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed4:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <HAL_PCD_MspInit+0xec>)
 8000ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ee0:	bf00      	nop
 8000ee2:	37b0      	adds	r7, #176	; 0xb0
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40020000 	.word	0x40020000

08000ef0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08e      	sub	sp, #56	; 0x38
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <HAL_InitTick+0xe4>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	4a33      	ldr	r2, [pc, #204]	; (8000fd4 <HAL_InitTick+0xe4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0c:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <HAL_InitTick+0xe4>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f18:	f107 0210 	add.w	r2, r7, #16
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f002 fe70 	bl	8003c08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f28:	6a3b      	ldr	r3, [r7, #32]
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d103      	bne.n	8000f3a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f32:	f002 fe41 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8000f36:	6378      	str	r0, [r7, #52]	; 0x34
 8000f38:	e004      	b.n	8000f44 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f3a:	f002 fe3d 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f46:	4a24      	ldr	r2, [pc, #144]	; (8000fd8 <HAL_InitTick+0xe8>)
 8000f48:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4c:	0c9b      	lsrs	r3, r3, #18
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <HAL_InitTick+0xec>)
 8000f54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f58:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <HAL_InitTick+0xec>)
 8000f5c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f60:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f62:	4a1e      	ldr	r2, [pc, #120]	; (8000fdc <HAL_InitTick+0xec>)
 8000f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f66:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f68:	4b1c      	ldr	r3, [pc, #112]	; (8000fdc <HAL_InitTick+0xec>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <HAL_InitTick+0xec>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_InitTick+0xec>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000f7a:	4818      	ldr	r0, [pc, #96]	; (8000fdc <HAL_InitTick+0xec>)
 8000f7c:	f003 fa66 	bl	800444c <HAL_TIM_Base_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f86:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d11b      	bne.n	8000fc6 <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <HAL_InitTick+0xec>)
 8000f90:	f003 fabe 	bl	8004510 <HAL_TIM_Base_Start_IT>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d111      	bne.n	8000fc6 <HAL_InitTick+0xd6>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa2:	201c      	movs	r0, #28
 8000fa4:	f000 fbd4 	bl	8001750 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2b0f      	cmp	r3, #15
 8000fac:	d808      	bhi.n	8000fc0 <HAL_InitTick+0xd0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	f000 fbb0 	bl	8001718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb8:	4a09      	ldr	r2, [pc, #36]	; (8000fe0 <HAL_InitTick+0xf0>)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e002      	b.n	8000fc6 <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3738      	adds	r7, #56	; 0x38
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	431bde83 	.word	0x431bde83
 8000fdc:	200009e4 	.word	0x200009e4
 8000fe0:	20000014 	.word	0x20000014

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM2_IRQHandler+0x10>)
 8001016:	f003 faf3 	bl	8004600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	200009e4 	.word	0x200009e4

08001024 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <ETH_IRQHandler+0x10>)
 800102a:	f000 ff19 	bl	8001e60 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20005410 	.word	0x20005410

08001038 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return 1;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <_kill>:

int _kill(int pid, int sig)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001052:	4b05      	ldr	r3, [pc, #20]	; (8001068 <_kill+0x20>)
 8001054:	2216      	movs	r2, #22
 8001056:	601a      	str	r2, [r3, #0]
  return -1;
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800105c:	4618      	mov	r0, r3
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	2000cfc8 	.word	0x2000cfc8

0800106c <_exit>:

void _exit (int status)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f7ff ffe5 	bl	8001048 <_kill>
  while (1) {}    /* Make sure we hang here */
 800107e:	e7fe      	b.n	800107e <_exit+0x12>

08001080 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e00a      	b.n	80010a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001092:	f3af 8000 	nop.w
 8001096:	4601      	mov	r1, r0
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	60ba      	str	r2, [r7, #8]
 800109e:	b2ca      	uxtb	r2, r1
 80010a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbf0      	blt.n	8001092 <_read+0x12>
  }

  return len;
 80010b0:	687b      	ldr	r3, [r7, #4]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3718      	adds	r7, #24
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	60f8      	str	r0, [r7, #12]
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	2300      	movs	r3, #0
 80010c8:	617b      	str	r3, [r7, #20]
 80010ca:	e009      	b.n	80010e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	1c5a      	adds	r2, r3, #1
 80010d0:	60ba      	str	r2, [r7, #8]
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf1      	blt.n	80010cc <_write+0x12>
  }
  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_close>:

int _close(int file)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b083      	sub	sp, #12
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010fe:	4618      	mov	r0, r3
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr

0800110a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
 8001112:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800111a:	605a      	str	r2, [r3, #4]
  return 0;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_isatty>:

int _isatty(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001132:	2301      	movs	r3, #1
}
 8001134:	4618      	mov	r0, r3
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3714      	adds	r7, #20
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
	...

0800115c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001164:	4a14      	ldr	r2, [pc, #80]	; (80011b8 <_sbrk+0x5c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <_sbrk+0x60>)
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d102      	bne.n	800117e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001178:	4b11      	ldr	r3, [pc, #68]	; (80011c0 <_sbrk+0x64>)
 800117a:	4a12      	ldr	r2, [pc, #72]	; (80011c4 <_sbrk+0x68>)
 800117c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	429a      	cmp	r2, r3
 800118a:	d205      	bcs.n	8001198 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800118c:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <_sbrk+0x6c>)
 800118e:	220c      	movs	r2, #12
 8001190:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001192:	f04f 33ff 	mov.w	r3, #4294967295
 8001196:	e009      	b.n	80011ac <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <_sbrk+0x64>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800119e:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <_sbrk+0x64>)
 80011a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011aa:	68fb      	ldr	r3, [r7, #12]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	20050000 	.word	0x20050000
 80011bc:	00000400 	.word	0x00000400
 80011c0:	20000a30 	.word	0x20000a30
 80011c4:	2000d118 	.word	0x2000d118
 80011c8:	2000cfc8 	.word	0x2000cfc8

080011cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <SystemInit+0x20>)
 80011d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011d6:	4a05      	ldr	r2, [pc, #20]	; (80011ec <SystemInit+0x20>)
 80011d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000ed00 	.word	0xe000ed00

080011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011f4:	480d      	ldr	r0, [pc, #52]	; (800122c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011f6:	490e      	ldr	r1, [pc, #56]	; (8001230 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011f8:	4a0e      	ldr	r2, [pc, #56]	; (8001234 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800120c:	4c0b      	ldr	r4, [pc, #44]	; (800123c <LoopFillZerobss+0x26>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121a:	f7ff ffd7 	bl	80011cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f016 fe9d 	bl	8017f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001222:	f7ff fba5 	bl	8000970 <main>
  bx  lr    
 8001226:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001228:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800122c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001230:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001234:	0801e868 	.word	0x0801e868
  ldr r2, =_sbss
 8001238:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800123c:	2000d118 	.word	0x2000d118

08001240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC_IRQHandler>

08001242 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
 800124a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <LAN8742_RegisterBusIO+0x28>
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d007      	beq.n	800126a <LAN8742_RegisterBusIO+0x28>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <LAN8742_RegisterBusIO+0x28>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d102      	bne.n	8001270 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800126a:	f04f 33ff 	mov.w	r3, #4294967295
 800126e:	e014      	b.n	800129a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689a      	ldr	r2, [r3, #8]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b086      	sub	sp, #24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	2300      	movs	r3, #0
 80012b8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d17c      	bne.n	80013c0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2220      	movs	r2, #32
 80012d8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012da:	2300      	movs	r3, #0
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e01c      	b.n	800131a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	f107 0208 	add.w	r2, r7, #8
 80012e8:	2112      	movs	r1, #18
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	4798      	blx	r3
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	da03      	bge.n	80012fc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80012f4:	f06f 0304 	mvn.w	r3, #4
 80012f8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80012fa:	e00b      	b.n	8001314 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	697a      	ldr	r2, [r7, #20]
 8001304:	429a      	cmp	r2, r3
 8001306:	d105      	bne.n	8001314 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	697a      	ldr	r2, [r7, #20]
 800130c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800130e:	2300      	movs	r3, #0
 8001310:	613b      	str	r3, [r7, #16]
         break;
 8001312:	e005      	b.n	8001320 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	3301      	adds	r3, #1
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	2b1f      	cmp	r3, #31
 800131e:	d9df      	bls.n	80012e0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b1f      	cmp	r3, #31
 8001326:	d902      	bls.n	800132e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001328:	f06f 0302 	mvn.w	r3, #2
 800132c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d145      	bne.n	80013c0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6810      	ldr	r0, [r2, #0]
 800133c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001340:	2100      	movs	r1, #0
 8001342:	4798      	blx	r3
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	db37      	blt.n	80013ba <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	695b      	ldr	r3, [r3, #20]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	6810      	ldr	r0, [r2, #0]
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	2100      	movs	r1, #0
 8001358:	4798      	blx	r3
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	db28      	blt.n	80013b2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	4798      	blx	r3
 8001366:	4603      	mov	r3, r0
 8001368:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800136a:	e01c      	b.n	80013a6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4798      	blx	r3
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137e:	d80e      	bhi.n	800139e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6810      	ldr	r0, [r2, #0]
 8001388:	f107 0208 	add.w	r2, r7, #8
 800138c:	2100      	movs	r1, #0
 800138e:	4798      	blx	r3
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	da07      	bge.n	80013a6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001396:	f06f 0304 	mvn.w	r3, #4
 800139a:	613b      	str	r3, [r7, #16]
                 break;
 800139c:	e010      	b.n	80013c0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800139e:	f06f 0301 	mvn.w	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
               break;
 80013a4:	e00c      	b.n	80013c0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1dd      	bne.n	800136c <LAN8742_Init+0xc6>
 80013b0:	e006      	b.n	80013c0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013b2:	f06f 0304 	mvn.w	r3, #4
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	e002      	b.n	80013c0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013ba:	f06f 0303 	mvn.w	r3, #3
 80013be:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d112      	bne.n	80013ec <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	4798      	blx	r3
 80013cc:	4603      	mov	r3, r0
 80013ce:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013d0:	bf00      	nop
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	4798      	blx	r3
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013e4:	d9f5      	bls.n	80013d2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80013ec:	693b      	ldr	r3, [r7, #16]
 }
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6810      	ldr	r0, [r2, #0]
 800140a:	f107 020c 	add.w	r2, r7, #12
 800140e:	2101      	movs	r1, #1
 8001410:	4798      	blx	r3
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	da02      	bge.n	800141e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001418:	f06f 0304 	mvn.w	r3, #4
 800141c:	e06e      	b.n	80014fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	6810      	ldr	r0, [r2, #0]
 8001426:	f107 020c 	add.w	r2, r7, #12
 800142a:	2101      	movs	r1, #1
 800142c:	4798      	blx	r3
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	da02      	bge.n	800143a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001434:	f06f 0304 	mvn.w	r3, #4
 8001438:	e060      	b.n	80014fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001444:	2301      	movs	r3, #1
 8001446:	e059      	b.n	80014fc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	2100      	movs	r1, #0
 8001456:	4798      	blx	r3
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	da02      	bge.n	8001464 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800145e:	f06f 0304 	mvn.w	r3, #4
 8001462:	e04b      	b.n	80014fc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d11b      	bne.n	80014a6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <LAN8742_GetLinkState+0x90>
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001482:	2302      	movs	r3, #2
 8001484:	e03a      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001490:	2303      	movs	r3, #3
 8001492:	e033      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800149e:	2304      	movs	r3, #4
 80014a0:	e02c      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014a2:	2305      	movs	r3, #5
 80014a4:	e02a      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	6810      	ldr	r0, [r2, #0]
 80014ae:	f107 020c 	add.w	r2, r7, #12
 80014b2:	211f      	movs	r1, #31
 80014b4:	4798      	blx	r3
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	da02      	bge.n	80014c2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014bc:	f06f 0304 	mvn.w	r3, #4
 80014c0:	e01c      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d101      	bne.n	80014d0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014cc:	2306      	movs	r3, #6
 80014ce:	e015      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 031c 	and.w	r3, r3, #28
 80014d6:	2b18      	cmp	r3, #24
 80014d8:	d101      	bne.n	80014de <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014da:	2302      	movs	r3, #2
 80014dc:	e00e      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f003 031c 	and.w	r3, r3, #28
 80014e4:	2b08      	cmp	r3, #8
 80014e6:	d101      	bne.n	80014ec <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014e8:	2303      	movs	r3, #3
 80014ea:	e007      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f003 031c 	and.w	r3, r3, #28
 80014f2:	2b14      	cmp	r3, #20
 80014f4:	d101      	bne.n	80014fa <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014f6:	2304      	movs	r3, #4
 80014f8:	e000      	b.n	80014fc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014fa:	2305      	movs	r3, #5
    }				
  }
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001508:	2003      	movs	r0, #3
 800150a:	f000 f8fa 	bl	8001702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800150e:	200f      	movs	r0, #15
 8001510:	f7ff fcee 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001514:	f7ff fbea 	bl	8000cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x20>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	461a      	mov	r2, r3
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <HAL_IncTick+0x24>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4413      	add	r3, r2
 8001530:	4a04      	ldr	r2, [pc, #16]	; (8001544 <HAL_IncTick+0x24>)
 8001532:	6013      	str	r3, [r2, #0]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	20000018 	.word	0x20000018
 8001544:	20000a34 	.word	0x20000a34

08001548 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return uwTick;
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_GetTick+0x14>)
 800154e:	681b      	ldr	r3, [r3, #0]
}
 8001550:	4618      	mov	r0, r3
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	20000a34 	.word	0x20000a34

08001560 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001568:	f7ff ffee 	bl	8001548 <HAL_GetTick>
 800156c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001578:	d005      	beq.n	8001586 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_Delay+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	4413      	add	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001586:	bf00      	nop
 8001588:	f7ff ffde 	bl	8001548 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	429a      	cmp	r2, r3
 8001596:	d8f7      	bhi.n	8001588 <HAL_Delay+0x28>
  {
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000018 	.word	0x20000018

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x40>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00
 80015ec:	05fa0000 	.word	0x05fa0000

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	; (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	; (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	; (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	; (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	; 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	; 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff4c 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172a:	f7ff ff61 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800172e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f7ff ffb1 	bl	800169c <NVIC_EncodePriority>
 800173a:	4602      	mov	r2, r0
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff80 	bl	8001648 <__NVIC_SetPriority>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff54 	bl	800160c <__NVIC_EnableIRQ>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d101      	bne.n	800177e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e06a      	b.n	8001854 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001784:	2b00      	cmp	r3, #0
 8001786:	d106      	bne.n	8001796 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2223      	movs	r2, #35	; 0x23
 800178c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f004 fbab 	bl	8005eec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	4b31      	ldr	r3, [pc, #196]	; (800185c <HAL_ETH_Init+0xf0>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	4a30      	ldr	r2, [pc, #192]	; (800185c <HAL_ETH_Init+0xf0>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	; 0x44
 80017a2:	4b2e      	ldr	r3, [pc, #184]	; (800185c <HAL_ETH_Init+0xf0>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a2b      	ldr	r2, [pc, #172]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	4927      	ldr	r1, [pc, #156]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80017c8:	4b25      	ldr	r3, [pc, #148]	; (8001860 <HAL_ETH_Init+0xf4>)
 80017ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e4:	f7ff feb0 	bl	8001548 <HAL_GetTick>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80017ea:	e011      	b.n	8001810 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80017ec:	f7ff feac 	bl	8001548 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017fa:	d909      	bls.n	8001810 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2204      	movs	r2, #4
 8001800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	22e0      	movs	r2, #224	; 0xe0
 8001808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e021      	b.n	8001854 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1e4      	bne.n	80017ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 ff4c 	bl	80026c0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f000 fff3 	bl	8002814 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f001 f849 	bl	80028c6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	461a      	mov	r2, r3
 800183a:	2100      	movs	r1, #0
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f000 ffb1 	bl	80027a4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2210      	movs	r2, #16
 800184e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	40013800 	.word	0x40013800

08001864 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001872:	2b10      	cmp	r3, #16
 8001874:	d17b      	bne.n	800196e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2223      	movs	r2, #35	; 0x23
 800187a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2201      	movs	r2, #1
 8001882:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001892:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b35      	ldr	r3, [pc, #212]	; (8001978 <HAL_ETH_Start_IT+0x114>)
 80018a2:	430b      	orrs	r3, r1
 80018a4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80018b8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2204      	movs	r2, #4
 80018c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f000 f9fc 	bl	8001cc0 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f042 0208 	orr.w	r2, r2, #8
 80018d6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7ff fe3d 	bl	8001560 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0204 	orr.w	r2, r2, #4
 80018fc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001906:	2001      	movs	r0, #1
 8001908:	f7ff fe2a 	bl	8001560 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 fd74 	bl	8002402 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001922:	699b      	ldr	r3, [r3, #24]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800192c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001930:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001948:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001952:	69d9      	ldr	r1, [r3, #28]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <HAL_ETH_Start_IT+0x118>)
 800195a:	430b      	orrs	r3, r1
 800195c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001960:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2223      	movs	r2, #35	; 0x23
 8001966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e000      	b.n	8001970 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
  }
}
 8001970:	4618      	mov	r0, r3
 8001972:	3710      	adds	r7, #16
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	00020060 	.word	0x00020060
 800197c:	0001a0c1 	.word	0x0001a0c1

08001980 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800198e:	2b23      	cmp	r3, #35	; 0x23
 8001990:	d16e      	bne.n	8001a70 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2223      	movs	r2, #35	; 0x23
 8001996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019a2:	69d9      	ldr	r1, [r3, #28]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <HAL_ETH_Stop_IT+0xfc>)
 80019aa:	400b      	ands	r3, r1
 80019ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019b0:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019c8:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	f023 0302 	bic.w	r3, r3, #2
 80019dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80019e0:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0204 	bic.w	r2, r2, #4
 80019f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff fdb0 	bl	8001560 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fcfa 	bl	8002402 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 0208 	bic.w	r2, r2, #8
 8001a1c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f7ff fd9a 	bl	8001560 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	e00e      	b.n	8001a58 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	3212      	adds	r2, #18
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b03      	cmp	r3, #3
 8001a5c:	d9ed      	bls.n	8001a3a <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2210      	movs	r2, #16
 8001a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
  }
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	fffe5f3e 	.word	0xfffe5f3e

08001a80 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d109      	bne.n	8001aa4 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e045      	b.n	8001b30 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001aaa:	2b23      	cmp	r3, #35	; 0x23
 8001aac:	d13f      	bne.n	8001b2e <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	6839      	ldr	r1, [r7, #0]
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 ff70 	bl	80029a0 <ETH_Prepare_Tx_Descriptors>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d009      	beq.n	8001ada <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001acc:	f043 0202 	orr.w	r2, r3, #2
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e02a      	b.n	8001b30 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ada:	f3bf 8f4f 	dsb	sy
}
 8001ade:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d904      	bls.n	8001afc <HAL_ETH_Transmit_IT+0x7c>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	1f1a      	subs	r2, r3, #4
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d00d      	beq.n	8001b2a <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	461a      	mov	r2, r3
 8001b18:	2304      	movs	r3, #4
 8001b1a:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b24:	461a      	mov	r2, r3
 8001b26:	2300      	movs	r3, #0
 8001b28:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	e000      	b.n	8001b30 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
  }
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0a8      	b.n	8001cb6 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b6a:	2b23      	cmp	r3, #35	; 0x23
 8001b6c:	d001      	beq.n	8001b72 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e0a1      	b.n	8001cb6 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b76:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69fa      	ldr	r2, [r7, #28]
 8001b7c:	3212      	adds	r2, #18
 8001b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b82:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b88:	f1c3 0304 	rsb	r3, r3, #4
 8001b8c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001b8e:	e06a      	b.n	8001c66 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d007      	beq.n	8001bac <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	699a      	ldr	r2, [r3, #24]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	69da      	ldr	r2, [r3, #28]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d103      	bne.n	8001bc0 <HAL_ETH_ReadData+0x88>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d040      	beq.n	8001c42 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0c1b      	lsrs	r3, r3, #16
 8001bf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001bf4:	3b04      	subs	r3, #4
 8001bf6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001c04:	69bb      	ldr	r3, [r7, #24]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	f004 fb2f 	bl	8006284 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3301      	adds	r3, #1
 8001c46:	61fb      	str	r3, [r7, #28]
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d902      	bls.n	8001c54 <HAL_ETH_ReadData+0x11c>
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3b04      	subs	r3, #4
 8001c52:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	3212      	adds	r2, #18
 8001c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	3301      	adds	r3, #1
 8001c64:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	db06      	blt.n	8001c7c <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d202      	bcs.n	8001c7c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d089      	beq.n	8001b90 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	441a      	add	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f815 	bl	8001cc0 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d108      	bne.n	8001cb4 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e000      	b.n	8001cb6 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	3212      	adds	r2, #18
 8001cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ce6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ce8:	e040      	b.n	8001d6c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	6a1b      	ldr	r3, [r3, #32]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d112      	bne.n	8001d18 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f004 fa94 	bl	8006224 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d102      	bne.n	8001d08 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	74fb      	strb	r3, [r7, #19]
 8001d06:	e007      	b.n	8001d18 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	461a      	mov	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d026      	beq.n	8001d6c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	4a1e      	ldr	r2, [pc, #120]	; (8001da4 <ETH_UpdateDescriptor+0xe4>)
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	e003      	b.n	8001d36 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001d34:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001d36:	f3bf 8f5f 	dmb	sy
}
 8001d3a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d902      	bls.n	8001d5a <ETH_UpdateDescriptor+0x9a>
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3b04      	subs	r3, #4
 8001d58:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69fa      	ldr	r2, [r7, #28]
 8001d5e:	3212      	adds	r2, #18
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	617b      	str	r3, [r7, #20]
      desccount--;
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d002      	beq.n	8001d78 <ETH_UpdateDescriptor+0xb8>
 8001d72:	7cfb      	ldrb	r3, [r7, #19]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1b8      	bne.n	8001cea <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d00c      	beq.n	8001d9c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	80004600 	.word	0x80004600

08001da8 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3318      	adds	r3, #24
 8001db4:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dba:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc0:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001dc6:	e03f      	b.n	8001e48 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	3304      	adds	r3, #4
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	3301      	adds	r3, #1
 8001de6:	f003 0303 	and.w	r3, r3, #3
 8001dea:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001dec:	2300      	movs	r3, #0
 8001dee:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001df0:	7bbb      	ldrb	r3, [r7, #14]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d028      	beq.n	8001e48 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68d9      	ldr	r1, [r3, #12]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	440b      	add	r3, r1
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	db1b      	blt.n	8001e44 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001e0c:	68ba      	ldr	r2, [r7, #8]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3304      	adds	r3, #4
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4413      	add	r3, r2
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f004 fa75 	bl	8006308 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	3304      	adds	r3, #4
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	62da      	str	r2, [r3, #44]	; 0x2c
 8001e42:	e001      	b.n	8001e48 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <HAL_ETH_ReleaseTxPacket+0xac>
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1b9      	bne.n	8001dc8 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e76:	2b40      	cmp	r3, #64	; 0x40
 8001e78:	d112      	bne.n	8001ea0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e88:	2b40      	cmp	r3, #64	; 0x40
 8001e8a:	d109      	bne.n	8001ea0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b50      	ldr	r3, [pc, #320]	; (8001fd8 <HAL_ETH_IRQHandler+0x178>)
 8001e98:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f003 fd8a 	bl	80059b4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d113      	bne.n	8001eda <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d10a      	bne.n	8001eda <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	461a      	mov	r2, r3
 8001ece:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001ed2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f003 fd7d 	bl	80059d4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001eec:	d14c      	bne.n	8001f88 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f00:	d142      	bne.n	8001f88 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f08:	f043 0208 	orr.w	r2, r3, #8
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f1a:	695b      	ldr	r3, [r3, #20]
 8001f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f24:	d11a      	bne.n	8001f5c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f2e:	695a      	ldr	r2, [r3, #20]
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <HAL_ETH_IRQHandler+0x17c>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001f4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001f50:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	22e0      	movs	r2, #224	; 0xe0
 8001f56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001f5a:	e012      	b.n	8001f82 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	f248 6380 	movw	r3, #34432	; 0x8680
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f248 6380 	movw	r3, #34432	; 0x8680
 8001f80:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f003 fd36 	bl	80059f4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b08      	cmp	r3, #8
 8001f94:	d10e      	bne.n	8001fb4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f000 f81c 	bl	8001fe4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_ETH_IRQHandler+0x180>)
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <HAL_ETH_IRQHandler+0x180>)
 8001fc2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001fc6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 f815 	bl	8001ff8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	00010040 	.word	0x00010040
 8001fdc:	007e2000 	.word	0x007e2000
 8001fe0:	40013c00 	.word	0x40013c00

08001fe4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 031c 	and.w	r3, r3, #28
 8002028:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	02db      	lsls	r3, r3, #11
 800202e:	b29b      	uxth	r3, r3
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	4313      	orrs	r3, r2
 8002034:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	019b      	lsls	r3, r3, #6
 800203a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	4313      	orrs	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 0302 	bic.w	r3, r3, #2
 800204a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800205c:	f7ff fa74 	bl	8001548 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002062:	e00d      	b.n	8002080 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002064:	f7ff fa70 	bl	8001548 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002072:	d301      	bcc.n	8002078 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e010      	b.n	800209a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1ec      	bne.n	8002064 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	b29b      	uxth	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	60f8      	str	r0, [r7, #12]
 80020aa:	60b9      	str	r1, [r7, #8]
 80020ac:	607a      	str	r2, [r7, #4]
 80020ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f003 031c 	and.w	r3, r3, #28
 80020be:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	02db      	lsls	r3, r3, #11
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	697a      	ldr	r2, [r7, #20]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	019b      	lsls	r3, r3, #6
 80020d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f043 0302 	orr.w	r3, r3, #2
 80020e0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	b29a      	uxth	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff fa24 	bl	8001548 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002102:	e00d      	b.n	8002120 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002104:	f7ff fa20 	bl	8001548 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002112:	d301      	bcc.n	8002118 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e009      	b.n	800212c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1ec      	bne.n	8002104 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3718      	adds	r7, #24
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0d9      	b.n	80022fc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0310 	and.w	r3, r3, #16
 8002152:	2b00      	cmp	r3, #0
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217c:	2b00      	cmp	r3, #0
 800217e:	bf0c      	ite	eq
 8002180:	2301      	moveq	r3, #1
 8002182:	2300      	movne	r3, #0
 8002184:	b2db      	uxtb	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf0c      	ite	eq
 80021b6:	2301      	moveq	r3, #1
 80021b8:	2300      	movne	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	461a      	mov	r2, r3
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	bf14      	ite	ne
 80021d0:	2301      	movne	r3, #1
 80021d2:	2300      	moveq	r3, #0
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	461a      	mov	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf0c      	ite	eq
 8002206:	2301      	moveq	r3, #1
 8002208:	2300      	movne	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf0c      	ite	eq
 8002220:	2301      	moveq	r3, #1
 8002222:	2300      	movne	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	461a      	mov	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002236:	2b00      	cmp	r3, #0
 8002238:	bf14      	ite	ne
 800223a:	2301      	movne	r3, #1
 800223c:	2300      	moveq	r3, #0
 800223e:	b2db      	uxtb	r3, r3
 8002240:	461a      	mov	r2, r3
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225e:	2b00      	cmp	r3, #0
 8002260:	bf14      	ite	ne
 8002262:	2301      	movne	r3, #1
 8002264:	2300      	moveq	r3, #0
 8002266:	b2db      	uxtb	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf0c      	ite	eq
 8002298:	2301      	moveq	r3, #1
 800229a:	2300      	movne	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	461a      	mov	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	0c1b      	lsrs	r3, r3, #16
 80022bc:	b29a      	uxth	r2, r3
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	461a      	mov	r2, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e00b      	b.n	8002334 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002322:	2b10      	cmp	r3, #16
 8002324:	d105      	bne.n	8002332 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002326:	6839      	ldr	r1, [r7, #0]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f88f 	bl	800244c <ETH_SetMACConfig>

    return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f023 031c 	bic.w	r3, r3, #28
 8002352:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002354:	f001 fc24 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8002358:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4a1d      	ldr	r2, [pc, #116]	; (80023d4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d908      	bls.n	8002374 <HAL_ETH_SetMDIOClockRange+0x38>
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4a1c      	ldr	r2, [pc, #112]	; (80023d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d804      	bhi.n	8002374 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f043 0308 	orr.w	r3, r3, #8
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	e027      	b.n	80023c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d908      	bls.n	800238e <HAL_ETH_SetMDIOClockRange+0x52>
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	4a17      	ldr	r2, [pc, #92]	; (80023dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d204      	bcs.n	800238e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f043 030c 	orr.w	r3, r3, #12
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	e01a      	b.n	80023c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d303      	bcc.n	800239e <HAL_ETH_SetMDIOClockRange+0x62>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d911      	bls.n	80023c2 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d908      	bls.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x7c>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d804      	bhi.n	80023b8 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	60fb      	str	r3, [r7, #12]
 80023b6:	e005      	b.n	80023c4 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f043 0310 	orr.w	r3, r3, #16
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	e000      	b.n	80023c4 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80023c2:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68fa      	ldr	r2, [r7, #12]
 80023ca:	611a      	str	r2, [r3, #16]
}
 80023cc:	bf00      	nop
 80023ce:	3710      	adds	r7, #16
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	01312cff 	.word	0x01312cff
 80023d8:	02160ebf 	.word	0x02160ebf
 80023dc:	03938700 	.word	0x03938700
 80023e0:	05f5e0ff 	.word	0x05f5e0ff
 80023e4:	08f0d17f 	.word	0x08f0d17f

080023e8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b084      	sub	sp, #16
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002420:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002424:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002432:	2001      	movs	r0, #1
 8002434:	f7ff f894 	bl	8001560 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002442:	6193      	str	r3, [r2, #24]
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
 8002454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4b51      	ldr	r3, [pc, #324]	; (80025a8 <ETH_SetMACConfig+0x15c>)
 8002462:	4013      	ands	r3, r2
 8002464:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	7c1b      	ldrb	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d102      	bne.n	8002474 <ETH_SetMACConfig+0x28>
 800246e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002472:	e000      	b.n	8002476 <ETH_SetMACConfig+0x2a>
 8002474:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	7c5b      	ldrb	r3, [r3, #17]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d102      	bne.n	8002484 <ETH_SetMACConfig+0x38>
 800247e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002482:	e000      	b.n	8002486 <ETH_SetMACConfig+0x3a>
 8002484:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002486:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800248c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	7fdb      	ldrb	r3, [r3, #31]
 8002492:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002494:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800249a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	7f92      	ldrb	r2, [r2, #30]
 80024a0:	2a00      	cmp	r2, #0
 80024a2:	d102      	bne.n	80024aa <ETH_SetMACConfig+0x5e>
 80024a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024a8:	e000      	b.n	80024ac <ETH_SetMACConfig+0x60>
 80024aa:	2200      	movs	r2, #0
                        macconf->Speed |
 80024ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	7f1b      	ldrb	r3, [r3, #28]
 80024b2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80024b4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80024ba:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80024c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80024ca:	2a00      	cmp	r2, #0
 80024cc:	d102      	bne.n	80024d4 <ETH_SetMACConfig+0x88>
 80024ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d2:	e000      	b.n	80024d6 <ETH_SetMACConfig+0x8a>
 80024d4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80024d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	7bdb      	ldrb	r3, [r3, #15]
 80024dc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80024de:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80024e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80024ec:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff f82a 	bl	8001560 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002522:	4013      	ands	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002532:	2a00      	cmp	r2, #0
 8002534:	d101      	bne.n	800253a <ETH_SetMACConfig+0xee>
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	e000      	b.n	800253c <ETH_SetMACConfig+0xf0>
 800253a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800253c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002542:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800254a:	2a01      	cmp	r2, #1
 800254c:	d101      	bne.n	8002552 <ETH_SetMACConfig+0x106>
 800254e:	2208      	movs	r2, #8
 8002550:	e000      	b.n	8002554 <ETH_SetMACConfig+0x108>
 8002552:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002554:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800255c:	2a01      	cmp	r2, #1
 800255e:	d101      	bne.n	8002564 <ETH_SetMACConfig+0x118>
 8002560:	2204      	movs	r2, #4
 8002562:	e000      	b.n	8002566 <ETH_SetMACConfig+0x11a>
 8002564:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002566:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800256e:	2a01      	cmp	r2, #1
 8002570:	d101      	bne.n	8002576 <ETH_SetMACConfig+0x12a>
 8002572:	2202      	movs	r2, #2
 8002574:	e000      	b.n	8002578 <ETH_SetMACConfig+0x12c>
 8002576:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002578:	4313      	orrs	r3, r2
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68fa      	ldr	r2, [r7, #12]
 8002586:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002590:	2001      	movs	r0, #1
 8002592:	f7fe ffe5 	bl	8001560 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	ff20810f 	.word	0xff20810f

080025ac <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80025c2:	68fa      	ldr	r2, [r7, #12]
 80025c4:	4b3d      	ldr	r3, [pc, #244]	; (80026bc <ETH_SetDMAConfig+0x110>)
 80025c6:	4013      	ands	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7b1b      	ldrb	r3, [r3, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <ETH_SetDMAConfig+0x2c>
 80025d2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80025d6:	e000      	b.n	80025da <ETH_SetDMAConfig+0x2e>
 80025d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	7b5b      	ldrb	r3, [r3, #13]
 80025de:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80025e0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	7f52      	ldrb	r2, [r2, #29]
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d102      	bne.n	80025f0 <ETH_SetDMAConfig+0x44>
 80025ea:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80025ee:	e000      	b.n	80025f2 <ETH_SetDMAConfig+0x46>
 80025f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80025f2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	7b9b      	ldrb	r3, [r3, #14]
 80025f8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80025fa:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002600:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	7f1b      	ldrb	r3, [r3, #28]
 8002606:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002608:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	7f9b      	ldrb	r3, [r3, #30]
 800260e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002610:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002616:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800261e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002620:	4313      	orrs	r3, r2
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	4313      	orrs	r3, r2
 8002626:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002630:	461a      	mov	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002642:	2001      	movs	r0, #1
 8002644:	f7fe ff8c 	bl	8001560 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002650:	461a      	mov	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	791b      	ldrb	r3, [r3, #4]
 800265a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002660:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002666:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800266c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002674:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002676:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800267e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002684:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800268e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002692:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f7fe ff5d 	bl	8001560 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	f8de3f23 	.word	0xf8de3f23

080026c0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0a6      	sub	sp, #152	; 0x98
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80026d4:	2300      	movs	r3, #0
 80026d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80026de:	2301      	movs	r3, #1
 80026e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80026ea:	2301      	movs	r3, #1
 80026ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80026fc:	2300      	movs	r3, #0
 80026fe:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002700:	2300      	movs	r3, #0
 8002702:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002706:	2300      	movs	r3, #0
 8002708:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002710:	2300      	movs	r3, #0
 8002712:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002716:	2300      	movs	r3, #0
 8002718:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002722:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002726:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002728:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800272c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002734:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fe86 	bl	800244c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002740:	2301      	movs	r3, #1
 8002742:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002744:	2301      	movs	r3, #1
 8002746:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002748:	2301      	movs	r3, #1
 800274a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800274e:	2301      	movs	r3, #1
 8002750:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002756:	2300      	movs	r3, #0
 8002758:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800275c:	2300      	movs	r3, #0
 800275e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800276c:	2301      	movs	r3, #1
 800276e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002774:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800277a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800277c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002780:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800278c:	2300      	movs	r3, #0
 800278e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002790:	f107 0308 	add.w	r3, r7, #8
 8002794:	4619      	mov	r1, r3
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff08 	bl	80025ac <ETH_SetDMAConfig>
}
 800279c:	bf00      	nop
 800279e:	3798      	adds	r7, #152	; 0x98
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b087      	sub	sp, #28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3305      	adds	r3, #5
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	021b      	lsls	r3, r3, #8
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	3204      	adds	r2, #4
 80027bc:	7812      	ldrb	r2, [r2, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4b11      	ldr	r3, [pc, #68]	; (800280c <ETH_MACAddressConfig+0x68>)
 80027c6:	4413      	add	r3, r2
 80027c8:	461a      	mov	r2, r3
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3303      	adds	r3, #3
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	061a      	lsls	r2, r3, #24
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	3302      	adds	r3, #2
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3301      	adds	r3, #1
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	021b      	lsls	r3, r3, #8
 80027e8:	4313      	orrs	r3, r2
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	4b06      	ldr	r3, [pc, #24]	; (8002810 <ETH_MACAddressConfig+0x6c>)
 80027f6:	4413      	add	r3, r2
 80027f8:	461a      	mov	r2, r3
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	6013      	str	r3, [r2, #0]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	40028040 	.word	0x40028040
 8002810:	40028044 	.word	0x40028044

08002814 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800281c:	2300      	movs	r3, #0
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e03e      	b.n	80028a0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68d9      	ldr	r1, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	440b      	add	r3, r1
 8002832:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2200      	movs	r2, #0
 800283e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2200      	movs	r2, #0
 800284a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800284c:	68b9      	ldr	r1, [r7, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	3206      	adds	r2, #6
 8002854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d80c      	bhi.n	8002884 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1c5a      	adds	r2, r3, #1
 8002872:	4613      	mov	r3, r2
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	4413      	add	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	440b      	add	r3, r1
 800287c:	461a      	mov	r2, r3
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	e004      	b.n	800288e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	461a      	mov	r2, r3
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3301      	adds	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b03      	cmp	r3, #3
 80028a4:	d9bd      	bls.n	8002822 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b8:	611a      	str	r2, [r3, #16]
}
 80028ba:	bf00      	nop
 80028bc:	3714      	adds	r7, #20
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80028ce:	2300      	movs	r3, #0
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e046      	b.n	8002962 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	440b      	add	r3, r1
 80028e4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	2200      	movs	r2, #0
 80028f0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	2200      	movs	r2, #0
 80028fc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2200      	movs	r2, #0
 8002902:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002910:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002918:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	3212      	adds	r2, #18
 800292e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d80c      	bhi.n	8002952 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6919      	ldr	r1, [r3, #16]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	440b      	add	r3, r1
 800294a:	461a      	mov	r2, r3
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	60da      	str	r2, [r3, #12]
 8002950:	e004      	b.n	800295c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3301      	adds	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b03      	cmp	r3, #3
 8002966:	d9b5      	bls.n	80028d4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002992:	60da      	str	r2, [r3, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b08d      	sub	sp, #52	; 0x34
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	3318      	adds	r3, #24
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ca:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029e2:	d007      	beq.n	80029f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	3304      	adds	r3, #4
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0ff      	b.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	3301      	adds	r3, #1
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	6a3b      	ldr	r3, [r7, #32]
 8002a06:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	685a      	ldr	r2, [r3, #4]
 8002a0c:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	69fa      	ldr	r2, [r7, #28]
 8002a12:	6852      	ldr	r2, [r2, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	431a      	orrs	r2, r3
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002a7a:	f3bf 8f5f 	dmb	sy
}
 8002a7e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002a80:	6a3b      	ldr	r3, [r7, #32]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002a8c:	e082      	b.n	8002b94 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aa0:	6a3b      	ldr	r3, [r7, #32]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e005      	b.n	8002aba <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002abc:	3301      	adds	r3, #1
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d902      	bls.n	8002acc <ETH_Prepare_Tx_Descriptors+0x12c>
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	3b04      	subs	r3, #4
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002aee:	d007      	beq.n	8002b00 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af4:	3304      	adds	r3, #4
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d029      	beq.n	8002b54 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b0c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b12:	e019      	b.n	8002b48 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002b14:	f3bf 8f5f 	dmb	sy
}
 8002b18:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b28:	3301      	adds	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d902      	bls.n	8002b38 <ETH_Prepare_Tx_Descriptors+0x198>
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	3b04      	subs	r3, #4
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b44:	3301      	adds	r3, #1
 8002b46:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d3e1      	bcc.n	8002b14 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002b50:	2302      	movs	r3, #2
 8002b52:	e051      	b.n	8002bf8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b56:	3301      	adds	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	6852      	ldr	r2, [r2, #4]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	6a3b      	ldr	r3, [r7, #32]
 8002b7a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002b82:	f3bf 8f5f 	dmb	sy
}
 8002b86:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f47f af78 	bne.w	8002a8e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ba4:	6a3b      	ldr	r3, [r7, #32]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002bac:	6a3b      	ldr	r3, [r7, #32]
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e005      	b.n	8002bbe <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bba:	6a3b      	ldr	r3, [r7, #32]
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bce:	6979      	ldr	r1, [r7, #20]
 8002bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	440b      	add	r3, r1
 8002bd8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bde:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002be0:	b672      	cpsid	i
}
 8002be2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	4413      	add	r3, r2
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf2:	b662      	cpsie	i
}
 8002bf4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002bf6:	2300      	movs	r3, #0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3734      	adds	r7, #52	; 0x34
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	ffffe000 	.word	0xffffe000

08002c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b089      	sub	sp, #36	; 0x24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c12:	2300      	movs	r3, #0
 8002c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c16:	2300      	movs	r3, #0
 8002c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	61fb      	str	r3, [r7, #28]
 8002c26:	e175      	b.n	8002f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	697a      	ldr	r2, [r7, #20]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	f040 8164 	bne.w	8002f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d005      	beq.n	8002c5e <HAL_GPIO_Init+0x56>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d130      	bne.n	8002cc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	2203      	movs	r2, #3
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4013      	ands	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c94:	2201      	movs	r2, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	091b      	lsrs	r3, r3, #4
 8002caa:	f003 0201 	and.w	r2, r3, #1
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d017      	beq.n	8002cfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	43db      	mvns	r3, r3
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	d123      	bne.n	8002d50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	08da      	lsrs	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3208      	adds	r2, #8
 8002d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0307 	and.w	r3, r3, #7
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	220f      	movs	r2, #15
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	08da      	lsrs	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3208      	adds	r2, #8
 8002d4a:	69b9      	ldr	r1, [r7, #24]
 8002d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	005b      	lsls	r3, r3, #1
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0203 	and.w	r2, r3, #3
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80be 	beq.w	8002f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d92:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d96:	4a65      	ldr	r2, [pc, #404]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_GPIO_Init+0x324>)
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da6:	60fb      	str	r3, [r7, #12]
 8002da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002daa:	4a61      	ldr	r2, [pc, #388]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0303 	and.w	r3, r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	220f      	movs	r2, #15
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a58      	ldr	r2, [pc, #352]	; (8002f34 <HAL_GPIO_Init+0x32c>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d037      	beq.n	8002e46 <HAL_GPIO_Init+0x23e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a57      	ldr	r2, [pc, #348]	; (8002f38 <HAL_GPIO_Init+0x330>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d031      	beq.n	8002e42 <HAL_GPIO_Init+0x23a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a56      	ldr	r2, [pc, #344]	; (8002f3c <HAL_GPIO_Init+0x334>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d02b      	beq.n	8002e3e <HAL_GPIO_Init+0x236>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a55      	ldr	r2, [pc, #340]	; (8002f40 <HAL_GPIO_Init+0x338>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d025      	beq.n	8002e3a <HAL_GPIO_Init+0x232>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a54      	ldr	r2, [pc, #336]	; (8002f44 <HAL_GPIO_Init+0x33c>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01f      	beq.n	8002e36 <HAL_GPIO_Init+0x22e>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a53      	ldr	r2, [pc, #332]	; (8002f48 <HAL_GPIO_Init+0x340>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d019      	beq.n	8002e32 <HAL_GPIO_Init+0x22a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a52      	ldr	r2, [pc, #328]	; (8002f4c <HAL_GPIO_Init+0x344>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_GPIO_Init+0x226>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a51      	ldr	r2, [pc, #324]	; (8002f50 <HAL_GPIO_Init+0x348>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d00d      	beq.n	8002e2a <HAL_GPIO_Init+0x222>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a50      	ldr	r2, [pc, #320]	; (8002f54 <HAL_GPIO_Init+0x34c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d007      	beq.n	8002e26 <HAL_GPIO_Init+0x21e>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4f      	ldr	r2, [pc, #316]	; (8002f58 <HAL_GPIO_Init+0x350>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d101      	bne.n	8002e22 <HAL_GPIO_Init+0x21a>
 8002e1e:	2309      	movs	r3, #9
 8002e20:	e012      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e22:	230a      	movs	r3, #10
 8002e24:	e010      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e26:	2308      	movs	r3, #8
 8002e28:	e00e      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2a:	2307      	movs	r3, #7
 8002e2c:	e00c      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e2e:	2306      	movs	r3, #6
 8002e30:	e00a      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e32:	2305      	movs	r3, #5
 8002e34:	e008      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e006      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e004      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e3e:	2302      	movs	r3, #2
 8002e40:	e002      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e42:	2301      	movs	r3, #1
 8002e44:	e000      	b.n	8002e48 <HAL_GPIO_Init+0x240>
 8002e46:	2300      	movs	r3, #0
 8002e48:	69fa      	ldr	r2, [r7, #28]
 8002e4a:	f002 0203 	and.w	r2, r2, #3
 8002e4e:	0092      	lsls	r2, r2, #2
 8002e50:	4093      	lsls	r3, r2
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e58:	4935      	ldr	r1, [pc, #212]	; (8002f30 <HAL_GPIO_Init+0x328>)
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	089b      	lsrs	r3, r3, #2
 8002e5e:	3302      	adds	r3, #2
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e66:	4b3d      	ldr	r3, [pc, #244]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8a:	4a34      	ldr	r2, [pc, #208]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e90:	4b32      	ldr	r3, [pc, #200]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb4:	4a29      	ldr	r2, [pc, #164]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eba:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ede:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee4:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f08:	4a14      	ldr	r2, [pc, #80]	; (8002f5c <HAL_GPIO_Init+0x354>)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	3301      	adds	r3, #1
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b0f      	cmp	r3, #15
 8002f18:	f67f ae86 	bls.w	8002c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3724      	adds	r7, #36	; 0x24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40013800 	.word	0x40013800
 8002f34:	40020000 	.word	0x40020000
 8002f38:	40020400 	.word	0x40020400
 8002f3c:	40020800 	.word	0x40020800
 8002f40:	40020c00 	.word	0x40020c00
 8002f44:	40021000 	.word	0x40021000
 8002f48:	40021400 	.word	0x40021400
 8002f4c:	40021800 	.word	0x40021800
 8002f50:	40021c00 	.word	0x40021c00
 8002f54:	40022000 	.word	0x40022000
 8002f58:	40022400 	.word	0x40022400
 8002f5c:	40013c00 	.word	0x40013c00

08002f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	460b      	mov	r3, r1
 8002f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	887b      	ldrh	r3, [r7, #2]
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	73fb      	strb	r3, [r7, #15]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3714      	adds	r7, #20
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa0:	787b      	ldrb	r3, [r7, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fa6:	887a      	ldrh	r2, [r7, #2]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fac:	e003      	b.n	8002fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fae:	887b      	ldrh	r3, [r7, #2]
 8002fb0:	041a      	lsls	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc4:	b08f      	sub	sp, #60	; 0x3c
 8002fc6:	af0a      	add	r7, sp, #40	; 0x28
 8002fc8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d101      	bne.n	8002fd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e116      	b.n	8003202 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd ff04 	bl	8000dfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003004:	2b00      	cmp	r3, #0
 8003006:	d102      	bne.n	800300e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f002 f9a4 	bl	8005360 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	603b      	str	r3, [r7, #0]
 800301e:	687e      	ldr	r6, [r7, #4]
 8003020:	466d      	mov	r5, sp
 8003022:	f106 0410 	add.w	r4, r6, #16
 8003026:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003028:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800302c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800302e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003032:	e885 0003 	stmia.w	r5, {r0, r1}
 8003036:	1d33      	adds	r3, r6, #4
 8003038:	cb0e      	ldmia	r3, {r1, r2, r3}
 800303a:	6838      	ldr	r0, [r7, #0]
 800303c:	f002 f938 	bl	80052b0 <USB_CoreInit>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2202      	movs	r2, #2
 800304a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0d7      	b.n	8003202 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f002 f992 	bl	8005382 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800305e:	2300      	movs	r3, #0
 8003060:	73fb      	strb	r3, [r7, #15]
 8003062:	e04a      	b.n	80030fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003064:	7bfa      	ldrb	r2, [r7, #15]
 8003066:	6879      	ldr	r1, [r7, #4]
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	333d      	adds	r3, #61	; 0x3d
 8003074:	2201      	movs	r2, #1
 8003076:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003078:	7bfa      	ldrb	r2, [r7, #15]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	333c      	adds	r3, #60	; 0x3c
 8003088:	7bfa      	ldrb	r2, [r7, #15]
 800308a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800308c:	7bfa      	ldrb	r2, [r7, #15]
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	b298      	uxth	r0, r3
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3344      	adds	r3, #68	; 0x44
 80030a0:	4602      	mov	r2, r0
 80030a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80030a4:	7bfa      	ldrb	r2, [r7, #15]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	4413      	add	r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	3340      	adds	r3, #64	; 0x40
 80030b4:	2200      	movs	r2, #0
 80030b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b8:	7bfa      	ldrb	r2, [r7, #15]
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	4613      	mov	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3348      	adds	r3, #72	; 0x48
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030cc:	7bfa      	ldrb	r2, [r7, #15]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	440b      	add	r3, r1
 80030da:	334c      	adds	r3, #76	; 0x4c
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3354      	adds	r3, #84	; 0x54
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030f4:	7bfb      	ldrb	r3, [r7, #15]
 80030f6:	3301      	adds	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	d3af      	bcc.n	8003064 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003104:	2300      	movs	r3, #0
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e044      	b.n	8003194 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800310a:	7bfa      	ldrb	r2, [r7, #15]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800311c:	2200      	movs	r2, #0
 800311e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003120:	7bfa      	ldrb	r2, [r7, #15]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800314c:	7bfa      	ldrb	r2, [r7, #15]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003162:	7bfa      	ldrb	r2, [r7, #15]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003178:	7bfa      	ldrb	r2, [r7, #15]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800318e:	7bfb      	ldrb	r3, [r7, #15]
 8003190:	3301      	adds	r3, #1
 8003192:	73fb      	strb	r3, [r7, #15]
 8003194:	7bfa      	ldrb	r2, [r7, #15]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	429a      	cmp	r2, r3
 800319c:	d3b5      	bcc.n	800310a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	687e      	ldr	r6, [r7, #4]
 80031a6:	466d      	mov	r5, sp
 80031a8:	f106 0410 	add.w	r4, r6, #16
 80031ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80031bc:	1d33      	adds	r3, r6, #4
 80031be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c0:	6838      	ldr	r0, [r7, #0]
 80031c2:	f002 f92b 	bl	800541c <USB_DevInit>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2202      	movs	r2, #2
 80031d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e014      	b.n	8003202 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d102      	bne.n	80031f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f80b 	bl	800320c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f002 fae9 	bl	80057d2 <USB_DevDisconnect>

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800320c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800323a:	4b05      	ldr	r3, [pc, #20]	; (8003250 <HAL_PCDEx_ActivateLPM+0x44>)
 800323c:	4313      	orrs	r3, r2
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3714      	adds	r7, #20
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr
 8003250:	10000003 	.word	0x10000003

08003254 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a04      	ldr	r2, [pc, #16]	; (8003270 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800325e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003262:	6013      	str	r3, [r2, #0]
}
 8003264:	bf00      	nop
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40007000 	.word	0x40007000

08003274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b086      	sub	sp, #24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e291      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8087 	beq.w	80033a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003298:	4b96      	ldr	r3, [pc, #600]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d00c      	beq.n	80032be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032a4:	4b93      	ldr	r3, [pc, #588]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f003 030c 	and.w	r3, r3, #12
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d112      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62>
 80032b0:	4b90      	ldr	r3, [pc, #576]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032bc:	d10b      	bne.n	80032d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032be:	4b8d      	ldr	r3, [pc, #564]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d06c      	beq.n	80033a4 <HAL_RCC_OscConfig+0x130>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d168      	bne.n	80033a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e26b      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032de:	d106      	bne.n	80032ee <HAL_RCC_OscConfig+0x7a>
 80032e0:	4b84      	ldr	r3, [pc, #528]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a83      	ldr	r2, [pc, #524]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	e02e      	b.n	800334c <HAL_RCC_OscConfig+0xd8>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10c      	bne.n	8003310 <HAL_RCC_OscConfig+0x9c>
 80032f6:	4b7f      	ldr	r3, [pc, #508]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a7e      	ldr	r2, [pc, #504]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80032fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7b      	ldr	r2, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003308:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xd8>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0xc0>
 800331a:	4b76      	ldr	r3, [pc, #472]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a75      	ldr	r2, [pc, #468]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b73      	ldr	r3, [pc, #460]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a72      	ldr	r2, [pc, #456]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xd8>
 8003334:	4b6f      	ldr	r3, [pc, #444]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a6e      	ldr	r2, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b6c      	ldr	r3, [pc, #432]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a6b      	ldr	r2, [pc, #428]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe f8f8 	bl	8001548 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe f8f4 	bl	8001548 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e21f      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b61      	ldr	r3, [pc, #388]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xe8>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe f8e4 	bl	8001548 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe f8e0 	bl	8001548 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e20b      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b57      	ldr	r3, [pc, #348]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x110>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d069      	beq.n	8003486 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033b2:	4b50      	ldr	r3, [pc, #320]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b4d      	ldr	r3, [pc, #308]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x190>
 80033ca:	4b4a      	ldr	r3, [pc, #296]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x17a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1df      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b41      	ldr	r3, [pc, #260]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	493d      	ldr	r1, [pc, #244]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e040      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d023      	beq.n	8003454 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b39      	ldr	r3, [pc, #228]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a38      	ldr	r2, [pc, #224]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003412:	f043 0301 	orr.w	r3, r3, #1
 8003416:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fe f896 	bl	8001548 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003420:	f7fe f892 	bl	8001548 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e1bd      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003432:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0f0      	beq.n	8003420 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343e:	4b2d      	ldr	r3, [pc, #180]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4929      	ldr	r1, [pc, #164]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800344e:	4313      	orrs	r3, r2
 8003450:	600b      	str	r3, [r1, #0]
 8003452:	e018      	b.n	8003486 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003454:	4b27      	ldr	r3, [pc, #156]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a26      	ldr	r2, [pc, #152]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800345a:	f023 0301 	bic.w	r3, r3, #1
 800345e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe f872 	bl	8001548 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003468:	f7fe f86e 	bl	8001548 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e199      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800347a:	4b1e      	ldr	r3, [pc, #120]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d038      	beq.n	8003504 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d019      	beq.n	80034ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800349a:	4b16      	ldr	r3, [pc, #88]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 800349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800349e:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a6:	f7fe f84f 	bl	8001548 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034ae:	f7fe f84b 	bl	8001548 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e176      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c0:	4b0c      	ldr	r3, [pc, #48]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80034c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x23a>
 80034cc:	e01a      	b.n	8003504 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034ce:	4b09      	ldr	r3, [pc, #36]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	4a08      	ldr	r2, [pc, #32]	; (80034f4 <HAL_RCC_OscConfig+0x280>)
 80034d4:	f023 0301 	bic.w	r3, r3, #1
 80034d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034da:	f7fe f835 	bl	8001548 <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034e2:	f7fe f831 	bl	8001548 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d903      	bls.n	80034f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e15c      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
 80034f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f8:	4b91      	ldr	r3, [pc, #580]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80034fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1ee      	bne.n	80034e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	f000 80a4 	beq.w	800365a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003512:	4b8b      	ldr	r3, [pc, #556]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d10d      	bne.n	800353a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b88      	ldr	r3, [pc, #544]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003522:	4a87      	ldr	r2, [pc, #540]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	6413      	str	r3, [r2, #64]	; 0x40
 800352a:	4b85      	ldr	r3, [pc, #532]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003536:	2301      	movs	r3, #1
 8003538:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353a:	4b82      	ldr	r3, [pc, #520]	; (8003744 <HAL_RCC_OscConfig+0x4d0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003542:	2b00      	cmp	r3, #0
 8003544:	d118      	bne.n	8003578 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003546:	4b7f      	ldr	r3, [pc, #508]	; (8003744 <HAL_RCC_OscConfig+0x4d0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a7e      	ldr	r2, [pc, #504]	; (8003744 <HAL_RCC_OscConfig+0x4d0>)
 800354c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003550:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003552:	f7fd fff9 	bl	8001548 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800355a:	f7fd fff5 	bl	8001548 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b64      	cmp	r3, #100	; 0x64
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e120      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800356c:	4b75      	ldr	r3, [pc, #468]	; (8003744 <HAL_RCC_OscConfig+0x4d0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d106      	bne.n	800358e <HAL_RCC_OscConfig+0x31a>
 8003580:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	4a6e      	ldr	r2, [pc, #440]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6713      	str	r3, [r2, #112]	; 0x70
 800358c:	e02d      	b.n	80035ea <HAL_RCC_OscConfig+0x376>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10c      	bne.n	80035b0 <HAL_RCC_OscConfig+0x33c>
 8003596:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359a:	4a69      	ldr	r2, [pc, #420]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	6713      	str	r3, [r2, #112]	; 0x70
 80035a2:	4b67      	ldr	r3, [pc, #412]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	4a66      	ldr	r2, [pc, #408]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035a8:	f023 0304 	bic.w	r3, r3, #4
 80035ac:	6713      	str	r3, [r2, #112]	; 0x70
 80035ae:	e01c      	b.n	80035ea <HAL_RCC_OscConfig+0x376>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b05      	cmp	r3, #5
 80035b6:	d10c      	bne.n	80035d2 <HAL_RCC_OscConfig+0x35e>
 80035b8:	4b61      	ldr	r3, [pc, #388]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a60      	ldr	r2, [pc, #384]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035be:	f043 0304 	orr.w	r3, r3, #4
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	4b5e      	ldr	r3, [pc, #376]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c8:	4a5d      	ldr	r2, [pc, #372]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035ca:	f043 0301 	orr.w	r3, r3, #1
 80035ce:	6713      	str	r3, [r2, #112]	; 0x70
 80035d0:	e00b      	b.n	80035ea <HAL_RCC_OscConfig+0x376>
 80035d2:	4b5b      	ldr	r3, [pc, #364]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d6:	4a5a      	ldr	r2, [pc, #360]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	6713      	str	r3, [r2, #112]	; 0x70
 80035de:	4b58      	ldr	r3, [pc, #352]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e2:	4a57      	ldr	r2, [pc, #348]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80035e4:	f023 0304 	bic.w	r3, r3, #4
 80035e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d015      	beq.n	800361e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fd ffa9 	bl	8001548 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035fa:	f7fd ffa5 	bl	8001548 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	f241 3288 	movw	r2, #5000	; 0x1388
 8003608:	4293      	cmp	r3, r2
 800360a:	d901      	bls.n	8003610 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e0ce      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003610:	4b4b      	ldr	r3, [pc, #300]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d0ee      	beq.n	80035fa <HAL_RCC_OscConfig+0x386>
 800361c:	e014      	b.n	8003648 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361e:	f7fd ff93 	bl	8001548 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003624:	e00a      	b.n	800363c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003626:	f7fd ff8f 	bl	8001548 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	f241 3288 	movw	r2, #5000	; 0x1388
 8003634:	4293      	cmp	r3, r2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e0b8      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363c:	4b40      	ldr	r3, [pc, #256]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 800363e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003640:	f003 0302 	and.w	r3, r3, #2
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1ee      	bne.n	8003626 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003648:	7dfb      	ldrb	r3, [r7, #23]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d105      	bne.n	800365a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	4a3b      	ldr	r2, [pc, #236]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003658:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	2b00      	cmp	r3, #0
 8003660:	f000 80a4 	beq.w	80037ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 030c 	and.w	r3, r3, #12
 800366c:	2b08      	cmp	r3, #8
 800366e:	d06b      	beq.n	8003748 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d149      	bne.n	800370c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003678:	4b31      	ldr	r3, [pc, #196]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a30      	ldr	r2, [pc, #192]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 800367e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003684:	f7fd ff60 	bl	8001548 <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800368c:	f7fd ff5c 	bl	8001548 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b02      	cmp	r3, #2
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e087      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369e:	4b28      	ldr	r3, [pc, #160]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f0      	bne.n	800368c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69da      	ldr	r2, [r3, #28]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	431a      	orrs	r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	019b      	lsls	r3, r3, #6
 80036ba:	431a      	orrs	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c0:	085b      	lsrs	r3, r3, #1
 80036c2:	3b01      	subs	r3, #1
 80036c4:	041b      	lsls	r3, r3, #16
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	061b      	lsls	r3, r3, #24
 80036ce:	4313      	orrs	r3, r2
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d8:	4b19      	ldr	r3, [pc, #100]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a18      	ldr	r2, [pc, #96]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fd ff30 	bl	8001548 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ec:	f7fd ff2c 	bl	8001548 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e057      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x478>
 800370a:	e04f      	b.n	80037ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370c:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a0b      	ldr	r2, [pc, #44]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fd ff16 	bl	8001548 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003720:	f7fd ff12 	bl	8001548 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e03d      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b03      	ldr	r3, [pc, #12]	; (8003740 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x4ac>
 800373e:	e035      	b.n	80037ac <HAL_RCC_OscConfig+0x538>
 8003740:	40023800 	.word	0x40023800
 8003744:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <HAL_RCC_OscConfig+0x544>)
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d028      	beq.n	80037a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003760:	429a      	cmp	r2, r3
 8003762:	d121      	bne.n	80037a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800376e:	429a      	cmp	r2, r3
 8003770:	d11a      	bne.n	80037a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003778:	4013      	ands	r3, r2
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800377e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003780:	4293      	cmp	r3, r2
 8003782:	d111      	bne.n	80037a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	3b01      	subs	r3, #1
 8003792:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003794:	429a      	cmp	r2, r3
 8003796:	d107      	bne.n	80037a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d001      	beq.n	80037ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e000      	b.n	80037ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3718      	adds	r7, #24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800

080037bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0d0      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037d4:	4b6a      	ldr	r3, [pc, #424]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 030f 	and.w	r3, r3, #15
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d910      	bls.n	8003804 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037e2:	4b67      	ldr	r3, [pc, #412]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 020f 	bic.w	r2, r3, #15
 80037ea:	4965      	ldr	r1, [pc, #404]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f2:	4b63      	ldr	r3, [pc, #396]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 030f 	and.w	r3, r3, #15
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d001      	beq.n	8003804 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e0b8      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0302 	and.w	r3, r3, #2
 800380c:	2b00      	cmp	r3, #0
 800380e:	d020      	beq.n	8003852 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b00      	cmp	r3, #0
 800381a:	d005      	beq.n	8003828 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800381c:	4b59      	ldr	r3, [pc, #356]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	4a58      	ldr	r2, [pc, #352]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003822:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003826:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0308 	and.w	r3, r3, #8
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a52      	ldr	r2, [pc, #328]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800383a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800383e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003840:	4b50      	ldr	r3, [pc, #320]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	494d      	ldr	r1, [pc, #308]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d040      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b47      	ldr	r3, [pc, #284]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d115      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e07f      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b02      	cmp	r3, #2
 800387c:	d107      	bne.n	800388e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800387e:	4b41      	ldr	r3, [pc, #260]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e073      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388e:	4b3d      	ldr	r3, [pc, #244]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e06b      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800389e:	4b39      	ldr	r3, [pc, #228]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f023 0203 	bic.w	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	4936      	ldr	r1, [pc, #216]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b0:	f7fd fe4a 	bl	8001548 <HAL_GetTick>
 80038b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	e00a      	b.n	80038ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038b8:	f7fd fe46 	bl	8001548 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e053      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ce:	4b2d      	ldr	r3, [pc, #180]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 020c 	and.w	r2, r3, #12
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	429a      	cmp	r2, r3
 80038de:	d1eb      	bne.n	80038b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e0:	4b27      	ldr	r3, [pc, #156]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 030f 	and.w	r3, r3, #15
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d210      	bcs.n	8003910 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f023 020f 	bic.w	r2, r3, #15
 80038f6:	4922      	ldr	r1, [pc, #136]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	683a      	ldr	r2, [r7, #0]
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e032      	b.n	8003976 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0304 	and.w	r3, r3, #4
 8003918:	2b00      	cmp	r3, #0
 800391a:	d008      	beq.n	800392e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0308 	and.w	r3, r3, #8
 8003936:	2b00      	cmp	r3, #0
 8003938:	d009      	beq.n	800394e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800393a:	4b12      	ldr	r3, [pc, #72]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	490e      	ldr	r1, [pc, #56]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 800394a:	4313      	orrs	r3, r2
 800394c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800394e:	f000 f821 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8003952:	4602      	mov	r2, r0
 8003954:	4b0b      	ldr	r3, [pc, #44]	; (8003984 <HAL_RCC_ClockConfig+0x1c8>)
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	091b      	lsrs	r3, r3, #4
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	490a      	ldr	r1, [pc, #40]	; (8003988 <HAL_RCC_ClockConfig+0x1cc>)
 8003960:	5ccb      	ldrb	r3, [r1, r3]
 8003962:	fa22 f303 	lsr.w	r3, r2, r3
 8003966:	4a09      	ldr	r2, [pc, #36]	; (800398c <HAL_RCC_ClockConfig+0x1d0>)
 8003968:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1d4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fabe 	bl	8000ef0 <HAL_InitTick>

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00
 8003984:	40023800 	.word	0x40023800
 8003988:	0801bec8 	.word	0x0801bec8
 800398c:	20000010 	.word	0x20000010
 8003990:	20000014 	.word	0x20000014

08003994 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003998:	b094      	sub	sp, #80	; 0x50
 800399a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	647b      	str	r3, [r7, #68]	; 0x44
 80039a0:	2300      	movs	r3, #0
 80039a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039a4:	2300      	movs	r3, #0
 80039a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80039a8:	2300      	movs	r3, #0
 80039aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ac:	4b79      	ldr	r3, [pc, #484]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d00d      	beq.n	80039d4 <HAL_RCC_GetSysClockFreq+0x40>
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	f200 80e1 	bhi.w	8003b80 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d002      	beq.n	80039c8 <HAL_RCC_GetSysClockFreq+0x34>
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	d003      	beq.n	80039ce <HAL_RCC_GetSysClockFreq+0x3a>
 80039c6:	e0db      	b.n	8003b80 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039c8:	4b73      	ldr	r3, [pc, #460]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039cc:	e0db      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039ce:	4b73      	ldr	r3, [pc, #460]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x208>)
 80039d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039d2:	e0d8      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d4:	4b6f      	ldr	r3, [pc, #444]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80039de:	4b6d      	ldr	r3, [pc, #436]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d063      	beq.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	2200      	movs	r2, #0
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80039f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80039f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fc:	633b      	str	r3, [r7, #48]	; 0x30
 80039fe:	2300      	movs	r3, #0
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
 8003a02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a06:	4622      	mov	r2, r4
 8003a08:	462b      	mov	r3, r5
 8003a0a:	f04f 0000 	mov.w	r0, #0
 8003a0e:	f04f 0100 	mov.w	r1, #0
 8003a12:	0159      	lsls	r1, r3, #5
 8003a14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a18:	0150      	lsls	r0, r2, #5
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4621      	mov	r1, r4
 8003a20:	1a51      	subs	r1, r2, r1
 8003a22:	6139      	str	r1, [r7, #16]
 8003a24:	4629      	mov	r1, r5
 8003a26:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a38:	4659      	mov	r1, fp
 8003a3a:	018b      	lsls	r3, r1, #6
 8003a3c:	4651      	mov	r1, sl
 8003a3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a42:	4651      	mov	r1, sl
 8003a44:	018a      	lsls	r2, r1, #6
 8003a46:	4651      	mov	r1, sl
 8003a48:	ebb2 0801 	subs.w	r8, r2, r1
 8003a4c:	4659      	mov	r1, fp
 8003a4e:	eb63 0901 	sbc.w	r9, r3, r1
 8003a52:	f04f 0200 	mov.w	r2, #0
 8003a56:	f04f 0300 	mov.w	r3, #0
 8003a5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a66:	4690      	mov	r8, r2
 8003a68:	4699      	mov	r9, r3
 8003a6a:	4623      	mov	r3, r4
 8003a6c:	eb18 0303 	adds.w	r3, r8, r3
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	462b      	mov	r3, r5
 8003a74:	eb49 0303 	adc.w	r3, r9, r3
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	f04f 0300 	mov.w	r3, #0
 8003a82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a86:	4629      	mov	r1, r5
 8003a88:	024b      	lsls	r3, r1, #9
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a90:	4621      	mov	r1, r4
 8003a92:	024a      	lsls	r2, r1, #9
 8003a94:	4610      	mov	r0, r2
 8003a96:	4619      	mov	r1, r3
 8003a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003aa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aa4:	f7fc fc1c 	bl	80002e0 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4613      	mov	r3, r2
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	e058      	b.n	8003b64 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab2:	4b38      	ldr	r3, [pc, #224]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	2200      	movs	r2, #0
 8003aba:	4618      	mov	r0, r3
 8003abc:	4611      	mov	r1, r2
 8003abe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ac2:	623b      	str	r3, [r7, #32]
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003acc:	4642      	mov	r2, r8
 8003ace:	464b      	mov	r3, r9
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	f04f 0100 	mov.w	r1, #0
 8003ad8:	0159      	lsls	r1, r3, #5
 8003ada:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ade:	0150      	lsls	r0, r2, #5
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4641      	mov	r1, r8
 8003ae6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aea:	4649      	mov	r1, r9
 8003aec:	eb63 0b01 	sbc.w	fp, r3, r1
 8003af0:	f04f 0200 	mov.w	r2, #0
 8003af4:	f04f 0300 	mov.w	r3, #0
 8003af8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003afc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b00:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b04:	ebb2 040a 	subs.w	r4, r2, sl
 8003b08:	eb63 050b 	sbc.w	r5, r3, fp
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	f04f 0300 	mov.w	r3, #0
 8003b14:	00eb      	lsls	r3, r5, #3
 8003b16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b1a:	00e2      	lsls	r2, r4, #3
 8003b1c:	4614      	mov	r4, r2
 8003b1e:	461d      	mov	r5, r3
 8003b20:	4643      	mov	r3, r8
 8003b22:	18e3      	adds	r3, r4, r3
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	464b      	mov	r3, r9
 8003b28:	eb45 0303 	adc.w	r3, r5, r3
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b3a:	4629      	mov	r1, r5
 8003b3c:	028b      	lsls	r3, r1, #10
 8003b3e:	4621      	mov	r1, r4
 8003b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b44:	4621      	mov	r1, r4
 8003b46:	028a      	lsls	r2, r1, #10
 8003b48:	4610      	mov	r0, r2
 8003b4a:	4619      	mov	r1, r3
 8003b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b4e:	2200      	movs	r2, #0
 8003b50:	61bb      	str	r3, [r7, #24]
 8003b52:	61fa      	str	r2, [r7, #28]
 8003b54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b58:	f7fc fbc2 	bl	80002e0 <__aeabi_uldivmod>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4613      	mov	r3, r2
 8003b62:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	0c1b      	lsrs	r3, r3, #16
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	3301      	adds	r3, #1
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003b74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b7e:	e002      	b.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4b05      	ldr	r3, [pc, #20]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3750      	adds	r7, #80	; 0x50
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800
 8003b98:	00f42400 	.word	0x00f42400
 8003b9c:	007a1200 	.word	0x007a1200

08003ba0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	20000010 	.word	0x20000010

08003bb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bbc:	f7ff fff0 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	0a9b      	lsrs	r3, r3, #10
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	4903      	ldr	r1, [pc, #12]	; (8003bdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bce:	5ccb      	ldrb	r3, [r1, r3]
 8003bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	0801bed8 	.word	0x0801bed8

08003be0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003be4:	f7ff ffdc 	bl	8003ba0 <HAL_RCC_GetHCLKFreq>
 8003be8:	4602      	mov	r2, r0
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	0b5b      	lsrs	r3, r3, #13
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	4903      	ldr	r1, [pc, #12]	; (8003c04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bf6:	5ccb      	ldrb	r3, [r1, r3]
 8003bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40023800 	.word	0x40023800
 8003c04:	0801bed8 	.word	0x0801bed8

08003c08 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	220f      	movs	r2, #15
 8003c16:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c18:	4b12      	ldr	r3, [pc, #72]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f003 0203 	and.w	r2, r3, #3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c24:	4b0f      	ldr	r3, [pc, #60]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c30:	4b0c      	ldr	r3, [pc, #48]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c3c:	4b09      	ldr	r3, [pc, #36]	; (8003c64 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c4a:	4b07      	ldr	r3, [pc, #28]	; (8003c68 <HAL_RCC_GetClockConfig+0x60>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 020f 	and.w	r2, r3, #15
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	40023c00 	.word	0x40023c00

08003c6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003c84:	2300      	movs	r3, #0
 8003c86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d012      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c94:	4b69      	ldr	r3, [pc, #420]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4a68      	ldr	r2, [pc, #416]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003c9e:	6093      	str	r3, [r2, #8]
 8003ca0:	4b66      	ldr	r3, [pc, #408]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca8:	4964      	ldr	r1, [pc, #400]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc6:	4b5d      	ldr	r3, [pc, #372]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd4:	4959      	ldr	r1, [pc, #356]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce4:	d101      	bne.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d101      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d017      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d02:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	494a      	ldr	r1, [pc, #296]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d20:	d101      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d22:	2301      	movs	r3, #1
 8003d24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 808b 	beq.w	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d50:	4b3a      	ldr	r3, [pc, #232]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	4a39      	ldr	r2, [pc, #228]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d5c:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d68:	4b35      	ldr	r3, [pc, #212]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a34      	ldr	r2, [pc, #208]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d74:	f7fd fbe8 	bl	8001548 <HAL_GetTick>
 8003d78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d7c:	f7fd fbe4 	bl	8001548 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b64      	cmp	r3, #100	; 0x64
 8003d88:	d901      	bls.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e357      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d8e:	4b2c      	ldr	r3, [pc, #176]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d9a:	4b28      	ldr	r3, [pc, #160]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003da2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d035      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d02e      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003db8:	4b20      	ldr	r3, [pc, #128]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	4a1d      	ldr	r2, [pc, #116]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dcc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dce:	4b1b      	ldr	r3, [pc, #108]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	4a1a      	ldr	r2, [pc, #104]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dda:	4a18      	ldr	r2, [pc, #96]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003de0:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d114      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fd fbac 	bl	8001548 <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003df4:	f7fd fba8 	bl	8001548 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e319      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e0a:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0ee      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d111      	bne.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e30:	4b04      	ldr	r3, [pc, #16]	; (8003e44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e32:	400b      	ands	r3, r1
 8003e34:	4901      	ldr	r1, [pc, #4]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e3c:	40023800 	.word	0x40023800
 8003e40:	40007000 	.word	0x40007000
 8003e44:	0ffffcff 	.word	0x0ffffcff
 8003e48:	4baa      	ldr	r3, [pc, #680]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4aa9      	ldr	r2, [pc, #676]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e52:	6093      	str	r3, [r2, #8]
 8003e54:	4ba7      	ldr	r3, [pc, #668]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e60:	49a4      	ldr	r1, [pc, #656]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d010      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e72:	4ba0      	ldr	r3, [pc, #640]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e78:	4a9e      	ldr	r2, [pc, #632]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e82:	4b9c      	ldr	r3, [pc, #624]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	4999      	ldr	r1, [pc, #612]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ea0:	4b94      	ldr	r3, [pc, #592]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eae:	4991      	ldr	r1, [pc, #580]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00a      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ec2:	4b8c      	ldr	r3, [pc, #560]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ed0:	4988      	ldr	r1, [pc, #544]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ee4:	4b83      	ldr	r3, [pc, #524]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef2:	4980      	ldr	r1, [pc, #512]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f06:	4b7b      	ldr	r3, [pc, #492]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4977      	ldr	r1, [pc, #476]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f28:	4b72      	ldr	r3, [pc, #456]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	f023 0203 	bic.w	r2, r3, #3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	496f      	ldr	r1, [pc, #444]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f4a:	4b6a      	ldr	r3, [pc, #424]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f023 020c 	bic.w	r2, r3, #12
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	4966      	ldr	r1, [pc, #408]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d00a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f6c:	4b61      	ldr	r3, [pc, #388]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f7a:	495e      	ldr	r1, [pc, #376]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f8e:	4b59      	ldr	r3, [pc, #356]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f9c:	4955      	ldr	r1, [pc, #340]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d00a      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fb0:	4b50      	ldr	r3, [pc, #320]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbe:	494d      	ldr	r1, [pc, #308]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003fd2:	4b48      	ldr	r3, [pc, #288]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4944      	ldr	r1, [pc, #272]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ff4:	4b3f      	ldr	r3, [pc, #252]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004002:	493c      	ldr	r1, [pc, #240]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004016:	4b37      	ldr	r3, [pc, #220]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004024:	4933      	ldr	r1, [pc, #204]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004038:	4b2e      	ldr	r3, [pc, #184]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004046:	492b      	ldr	r1, [pc, #172]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d011      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800405c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004060:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004068:	4922      	ldr	r1, [pc, #136]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004074:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004078:	d101      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800407a:	2301      	movs	r3, #1
 800407c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800408a:	2301      	movs	r3, #1
 800408c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00a      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	4912      	ldr	r1, [pc, #72]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040bc:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040cc:	4909      	ldr	r1, [pc, #36]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d006      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f000 80d9 	beq.w	800429a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80040e8:	4b02      	ldr	r3, [pc, #8]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a01      	ldr	r2, [pc, #4]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040f2:	e001      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fa:	f7fd fa25 	bl	8001548 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004100:	e008      	b.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004102:	f7fd fa21 	bl	8001548 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b64      	cmp	r3, #100	; 0x64
 800410e:	d901      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e194      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004114:	4b6c      	ldr	r3, [pc, #432]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d021      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004130:	2b00      	cmp	r3, #0
 8004132:	d11d      	bne.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004134:	4b64      	ldr	r3, [pc, #400]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004136:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800413a:	0c1b      	lsrs	r3, r3, #16
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004142:	4b61      	ldr	r3, [pc, #388]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004148:	0e1b      	lsrs	r3, r3, #24
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	019a      	lsls	r2, r3, #6
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	041b      	lsls	r3, r3, #16
 800415a:	431a      	orrs	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	061b      	lsls	r3, r3, #24
 8004160:	431a      	orrs	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	071b      	lsls	r3, r3, #28
 8004168:	4957      	ldr	r1, [pc, #348]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004184:	d00a      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800418e:	2b00      	cmp	r3, #0
 8004190:	d02e      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800419a:	d129      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800419c:	4b4a      	ldr	r3, [pc, #296]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	0c1b      	lsrs	r3, r3, #16
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80041aa:	4b47      	ldr	r3, [pc, #284]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b0:	0f1b      	lsrs	r3, r3, #28
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	019a      	lsls	r2, r3, #6
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	431a      	orrs	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	071b      	lsls	r3, r3, #28
 80041d0:	493d      	ldr	r1, [pc, #244]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80041d8:	4b3b      	ldr	r3, [pc, #236]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041de:	f023 021f 	bic.w	r2, r3, #31
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	3b01      	subs	r3, #1
 80041e8:	4937      	ldr	r1, [pc, #220]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01d      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041fc:	4b32      	ldr	r3, [pc, #200]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004202:	0e1b      	lsrs	r3, r3, #24
 8004204:	f003 030f 	and.w	r3, r3, #15
 8004208:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800420a:	4b2f      	ldr	r3, [pc, #188]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800420c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004210:	0f1b      	lsrs	r3, r3, #28
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	019a      	lsls	r2, r3, #6
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	041b      	lsls	r3, r3, #16
 8004224:	431a      	orrs	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	061b      	lsls	r3, r3, #24
 800422a:	431a      	orrs	r2, r3
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	071b      	lsls	r3, r3, #28
 8004230:	4925      	ldr	r1, [pc, #148]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d011      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	019a      	lsls	r2, r3, #6
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	071b      	lsls	r3, r3, #28
 8004260:	4919      	ldr	r1, [pc, #100]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004268:	4b17      	ldr	r3, [pc, #92]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004274:	f7fd f968 	bl	8001548 <HAL_GetTick>
 8004278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800427a:	e008      	b.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800427c:	f7fd f964 	bl	8001548 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b64      	cmp	r3, #100	; 0x64
 8004288:	d901      	bls.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0d7      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800428e:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d0f0      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b01      	cmp	r3, #1
 800429e:	f040 80cd 	bne.w	800443c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80042a2:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a08      	ldr	r2, [pc, #32]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ae:	f7fd f94b 	bl	8001548 <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042b4:	e00a      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042b6:	f7fd f947 	bl	8001548 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d903      	bls.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e0ba      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80042c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80042cc:	4b5e      	ldr	r3, [pc, #376]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042d8:	d0ed      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x682>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d009      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d02e      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d12a      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004302:	4b51      	ldr	r3, [pc, #324]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	f003 0303 	and.w	r3, r3, #3
 800430e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004310:	4b4d      	ldr	r3, [pc, #308]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	0f1b      	lsrs	r3, r3, #28
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	019a      	lsls	r2, r3, #6
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	041b      	lsls	r3, r3, #16
 8004328:	431a      	orrs	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	061b      	lsls	r3, r3, #24
 8004330:	431a      	orrs	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	071b      	lsls	r3, r3, #28
 8004336:	4944      	ldr	r1, [pc, #272]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004338:	4313      	orrs	r3, r2
 800433a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800433e:	4b42      	ldr	r3, [pc, #264]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004344:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800434c:	3b01      	subs	r3, #1
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	493d      	ldr	r1, [pc, #244]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d022      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800436c:	d11d      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800436e:	4b36      	ldr	r3, [pc, #216]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004374:	0e1b      	lsrs	r3, r3, #24
 8004376:	f003 030f 	and.w	r3, r3, #15
 800437a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800437c:	4b32      	ldr	r3, [pc, #200]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	0f1b      	lsrs	r3, r3, #28
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	019a      	lsls	r2, r3, #6
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	431a      	orrs	r2, r3
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	061b      	lsls	r3, r3, #24
 800439c:	431a      	orrs	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	071b      	lsls	r3, r3, #28
 80043a2:	4929      	ldr	r1, [pc, #164]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d028      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043b6:	4b24      	ldr	r3, [pc, #144]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043bc:	0e1b      	lsrs	r3, r3, #24
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043c4:	4b20      	ldr	r3, [pc, #128]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	0c1b      	lsrs	r3, r3, #16
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	019a      	lsls	r2, r3, #6
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	041b      	lsls	r3, r3, #16
 80043dc:	431a      	orrs	r2, r3
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	071b      	lsls	r3, r3, #28
 80043ea:	4917      	ldr	r1, [pc, #92]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80043f2:	4b15      	ldr	r3, [pc, #84]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004400:	4911      	ldr	r1, [pc, #68]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004408:	4b0f      	ldr	r3, [pc, #60]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0e      	ldr	r2, [pc, #56]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800440e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004412:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004414:	f7fd f898 	bl	8001548 <HAL_GetTick>
 8004418:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800441a:	e008      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800441c:	f7fd f894 	bl	8001548 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e007      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004436:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800443a:	d1ef      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023800 	.word	0x40023800

0800444c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e049      	b.n	80044f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f000 f841 	bl	80044fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	3304      	adds	r3, #4
 8004488:	4619      	mov	r1, r3
 800448a:	4610      	mov	r0, r2
 800448c:	f000 fa00 	bl	8004890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2201      	movs	r2, #1
 80044d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3708      	adds	r7, #8
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}

080044fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004502:	bf00      	nop
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e054      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004552:	d01d      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a22      	ldr	r2, [pc, #136]	; (80045e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a21      	ldr	r2, [pc, #132]	; (80045e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1f      	ldr	r2, [pc, #124]	; (80045ec <HAL_TIM_Base_Start_IT+0xdc>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1e      	ldr	r2, [pc, #120]	; (80045f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a1b      	ldr	r2, [pc, #108]	; (80045f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d115      	bne.n	80045bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_TIM_Base_Start_IT+0xec>)
 8004598:	4013      	ands	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d015      	beq.n	80045ce <HAL_TIM_Base_Start_IT+0xbe>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a8:	d011      	beq.n	80045ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ba:	e008      	b.n	80045ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	e000      	b.n	80045d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	40010000 	.word	0x40010000
 80045e4:	40000400 	.word	0x40000400
 80045e8:	40000800 	.word	0x40000800
 80045ec:	40000c00 	.word	0x40000c00
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	40001800 	.word	0x40001800
 80045fc:	00010007 	.word	0x00010007

08004600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d122      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	2b02      	cmp	r3, #2
 8004622:	d11b      	bne.n	800465c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f06f 0202 	mvn.w	r2, #2
 800462c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f003 0303 	and.w	r3, r3, #3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d003      	beq.n	800464a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f905 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 8004648:	e005      	b.n	8004656 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f8f7 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f908 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b04      	cmp	r3, #4
 8004668:	d122      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d11b      	bne.n	80046b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f06f 0204 	mvn.w	r2, #4
 8004680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004692:	2b00      	cmp	r3, #0
 8004694:	d003      	beq.n	800469e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f8db 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 800469c:	e005      	b.n	80046aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f8cd 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f8de 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d122      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d11b      	bne.n	8004704 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0208 	mvn.w	r2, #8
 80046d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2204      	movs	r2, #4
 80046da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d003      	beq.n	80046f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f8b1 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 80046f0:	e005      	b.n	80046fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 f8a3 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8b4 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	f003 0310 	and.w	r3, r3, #16
 800470e:	2b10      	cmp	r3, #16
 8004710:	d122      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f003 0310 	and.w	r3, r3, #16
 800471c:	2b10      	cmp	r3, #16
 800471e:	d11b      	bne.n	8004758 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f06f 0210 	mvn.w	r2, #16
 8004728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2208      	movs	r2, #8
 800472e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 f887 	bl	8004852 <HAL_TIM_IC_CaptureCallback>
 8004744:	e005      	b.n	8004752 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f879 	bl	800483e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f000 f88a 	bl	8004866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d10e      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b01      	cmp	r3, #1
 8004772:	d107      	bne.n	8004784 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0201 	mvn.w	r2, #1
 800477c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fc faa0 	bl	8000cc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478e:	2b80      	cmp	r3, #128	; 0x80
 8004790:	d10e      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d107      	bne.n	80047b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f91a 	bl	80049e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d10e      	bne.n	80047de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ca:	2b80      	cmp	r3, #128	; 0x80
 80047cc:	d107      	bne.n	80047de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f90d 	bl	80049f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e8:	2b40      	cmp	r3, #64	; 0x40
 80047ea:	d10e      	bne.n	800480a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f6:	2b40      	cmp	r3, #64	; 0x40
 80047f8:	d107      	bne.n	800480a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f838 	bl	800487a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b20      	cmp	r3, #32
 8004816:	d10e      	bne.n	8004836 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f003 0320 	and.w	r3, r3, #32
 8004822:	2b20      	cmp	r3, #32
 8004824:	d107      	bne.n	8004836 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f06f 0220 	mvn.w	r2, #32
 800482e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f8cd 	bl	80049d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004836:	bf00      	nop
 8004838:	3708      	adds	r7, #8
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800483e:	b480      	push	{r7}
 8004840:	b083      	sub	sp, #12
 8004842:	af00      	add	r7, sp, #0
 8004844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr

08004852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004882:	bf00      	nop
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a40      	ldr	r2, [pc, #256]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d013      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ae:	d00f      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3d      	ldr	r2, [pc, #244]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d00b      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3b      	ldr	r2, [pc, #236]	; (80049b0 <TIM_Base_SetConfig+0x120>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3a      	ldr	r2, [pc, #232]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2f      	ldr	r2, [pc, #188]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d02b      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d027      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <TIM_Base_SetConfig+0x118>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d023      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2b      	ldr	r2, [pc, #172]	; (80049ac <TIM_Base_SetConfig+0x11c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01f      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <TIM_Base_SetConfig+0x120>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d01b      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a29      	ldr	r2, [pc, #164]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d017      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a28      	ldr	r2, [pc, #160]	; (80049b8 <TIM_Base_SetConfig+0x128>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d013      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a27      	ldr	r2, [pc, #156]	; (80049bc <TIM_Base_SetConfig+0x12c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00f      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a26      	ldr	r2, [pc, #152]	; (80049c0 <TIM_Base_SetConfig+0x130>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d00b      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a25      	ldr	r2, [pc, #148]	; (80049c4 <TIM_Base_SetConfig+0x134>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d007      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <TIM_Base_SetConfig+0x138>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d003      	beq.n	8004942 <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <TIM_Base_SetConfig+0x13c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d108      	bne.n	8004954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	4313      	orrs	r3, r2
 8004952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689a      	ldr	r2, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a0a      	ldr	r2, [pc, #40]	; (80049a4 <TIM_Base_SetConfig+0x114>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0xf8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <TIM_Base_SetConfig+0x124>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d103      	bne.n	8004990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	615a      	str	r2, [r3, #20]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40010000 	.word	0x40010000
 80049a8:	40000400 	.word	0x40000400
 80049ac:	40000800 	.word	0x40000800
 80049b0:	40000c00 	.word	0x40000c00
 80049b4:	40010400 	.word	0x40010400
 80049b8:	40014000 	.word	0x40014000
 80049bc:	40014400 	.word	0x40014400
 80049c0:	40014800 	.word	0x40014800
 80049c4:	40001800 	.word	0x40001800
 80049c8:	40001c00 	.word	0x40001c00
 80049cc:	40002000 	.word	0x40002000

080049d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b083      	sub	sp, #12
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049d8:	bf00      	nop
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b082      	sub	sp, #8
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d101      	bne.n	8004a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e040      	b.n	8004aa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d106      	bne.n	8004a34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7fc f984 	bl	8000d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2224      	movs	r2, #36	; 0x24
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f82c 	bl	8004aa8 <UART_SetConfig>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e022      	b.n	8004aa0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa84 	bl	8004f70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	689a      	ldr	r2, [r3, #8]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f042 0201 	orr.w	r2, r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fb0b 	bl	80050b4 <UART_CheckIdleState>
 8004a9e:	4603      	mov	r3, r0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	691b      	ldr	r3, [r3, #16]
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	4ba6      	ldr	r3, [pc, #664]	; (8004d6c <UART_SetConfig+0x2c4>)
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	6979      	ldr	r1, [r7, #20]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68da      	ldr	r2, [r3, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	430a      	orrs	r2, r1
 8004b18:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a94      	ldr	r2, [pc, #592]	; (8004d70 <UART_SetConfig+0x2c8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d120      	bne.n	8004b66 <UART_SetConfig+0xbe>
 8004b24:	4b93      	ldr	r3, [pc, #588]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	d816      	bhi.n	8004b60 <UART_SetConfig+0xb8>
 8004b32:	a201      	add	r2, pc, #4	; (adr r2, 8004b38 <UART_SetConfig+0x90>)
 8004b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b38:	08004b49 	.word	0x08004b49
 8004b3c:	08004b55 	.word	0x08004b55
 8004b40:	08004b4f 	.word	0x08004b4f
 8004b44:	08004b5b 	.word	0x08004b5b
 8004b48:	2301      	movs	r3, #1
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e150      	b.n	8004df0 <UART_SetConfig+0x348>
 8004b4e:	2302      	movs	r3, #2
 8004b50:	77fb      	strb	r3, [r7, #31]
 8004b52:	e14d      	b.n	8004df0 <UART_SetConfig+0x348>
 8004b54:	2304      	movs	r3, #4
 8004b56:	77fb      	strb	r3, [r7, #31]
 8004b58:	e14a      	b.n	8004df0 <UART_SetConfig+0x348>
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	77fb      	strb	r3, [r7, #31]
 8004b5e:	e147      	b.n	8004df0 <UART_SetConfig+0x348>
 8004b60:	2310      	movs	r3, #16
 8004b62:	77fb      	strb	r3, [r7, #31]
 8004b64:	e144      	b.n	8004df0 <UART_SetConfig+0x348>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a83      	ldr	r2, [pc, #524]	; (8004d78 <UART_SetConfig+0x2d0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d132      	bne.n	8004bd6 <UART_SetConfig+0x12e>
 8004b70:	4b80      	ldr	r3, [pc, #512]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f003 030c 	and.w	r3, r3, #12
 8004b7a:	2b0c      	cmp	r3, #12
 8004b7c:	d828      	bhi.n	8004bd0 <UART_SetConfig+0x128>
 8004b7e:	a201      	add	r2, pc, #4	; (adr r2, 8004b84 <UART_SetConfig+0xdc>)
 8004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bd1 	.word	0x08004bd1
 8004b8c:	08004bd1 	.word	0x08004bd1
 8004b90:	08004bd1 	.word	0x08004bd1
 8004b94:	08004bc5 	.word	0x08004bc5
 8004b98:	08004bd1 	.word	0x08004bd1
 8004b9c:	08004bd1 	.word	0x08004bd1
 8004ba0:	08004bd1 	.word	0x08004bd1
 8004ba4:	08004bbf 	.word	0x08004bbf
 8004ba8:	08004bd1 	.word	0x08004bd1
 8004bac:	08004bd1 	.word	0x08004bd1
 8004bb0:	08004bd1 	.word	0x08004bd1
 8004bb4:	08004bcb 	.word	0x08004bcb
 8004bb8:	2300      	movs	r3, #0
 8004bba:	77fb      	strb	r3, [r7, #31]
 8004bbc:	e118      	b.n	8004df0 <UART_SetConfig+0x348>
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	77fb      	strb	r3, [r7, #31]
 8004bc2:	e115      	b.n	8004df0 <UART_SetConfig+0x348>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e112      	b.n	8004df0 <UART_SetConfig+0x348>
 8004bca:	2308      	movs	r3, #8
 8004bcc:	77fb      	strb	r3, [r7, #31]
 8004bce:	e10f      	b.n	8004df0 <UART_SetConfig+0x348>
 8004bd0:	2310      	movs	r3, #16
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e10c      	b.n	8004df0 <UART_SetConfig+0x348>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a68      	ldr	r2, [pc, #416]	; (8004d7c <UART_SetConfig+0x2d4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d120      	bne.n	8004c22 <UART_SetConfig+0x17a>
 8004be0:	4b64      	ldr	r3, [pc, #400]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004bea:	2b30      	cmp	r3, #48	; 0x30
 8004bec:	d013      	beq.n	8004c16 <UART_SetConfig+0x16e>
 8004bee:	2b30      	cmp	r3, #48	; 0x30
 8004bf0:	d814      	bhi.n	8004c1c <UART_SetConfig+0x174>
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d009      	beq.n	8004c0a <UART_SetConfig+0x162>
 8004bf6:	2b20      	cmp	r3, #32
 8004bf8:	d810      	bhi.n	8004c1c <UART_SetConfig+0x174>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <UART_SetConfig+0x15c>
 8004bfe:	2b10      	cmp	r3, #16
 8004c00:	d006      	beq.n	8004c10 <UART_SetConfig+0x168>
 8004c02:	e00b      	b.n	8004c1c <UART_SetConfig+0x174>
 8004c04:	2300      	movs	r3, #0
 8004c06:	77fb      	strb	r3, [r7, #31]
 8004c08:	e0f2      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	77fb      	strb	r3, [r7, #31]
 8004c0e:	e0ef      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c10:	2304      	movs	r3, #4
 8004c12:	77fb      	strb	r3, [r7, #31]
 8004c14:	e0ec      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c16:	2308      	movs	r3, #8
 8004c18:	77fb      	strb	r3, [r7, #31]
 8004c1a:	e0e9      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	77fb      	strb	r3, [r7, #31]
 8004c20:	e0e6      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a56      	ldr	r2, [pc, #344]	; (8004d80 <UART_SetConfig+0x2d8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d120      	bne.n	8004c6e <UART_SetConfig+0x1c6>
 8004c2c:	4b51      	ldr	r3, [pc, #324]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c36:	2bc0      	cmp	r3, #192	; 0xc0
 8004c38:	d013      	beq.n	8004c62 <UART_SetConfig+0x1ba>
 8004c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c3c:	d814      	bhi.n	8004c68 <UART_SetConfig+0x1c0>
 8004c3e:	2b80      	cmp	r3, #128	; 0x80
 8004c40:	d009      	beq.n	8004c56 <UART_SetConfig+0x1ae>
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d810      	bhi.n	8004c68 <UART_SetConfig+0x1c0>
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <UART_SetConfig+0x1a8>
 8004c4a:	2b40      	cmp	r3, #64	; 0x40
 8004c4c:	d006      	beq.n	8004c5c <UART_SetConfig+0x1b4>
 8004c4e:	e00b      	b.n	8004c68 <UART_SetConfig+0x1c0>
 8004c50:	2300      	movs	r3, #0
 8004c52:	77fb      	strb	r3, [r7, #31]
 8004c54:	e0cc      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]
 8004c5a:	e0c9      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	77fb      	strb	r3, [r7, #31]
 8004c60:	e0c6      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c62:	2308      	movs	r3, #8
 8004c64:	77fb      	strb	r3, [r7, #31]
 8004c66:	e0c3      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c68:	2310      	movs	r3, #16
 8004c6a:	77fb      	strb	r3, [r7, #31]
 8004c6c:	e0c0      	b.n	8004df0 <UART_SetConfig+0x348>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a44      	ldr	r2, [pc, #272]	; (8004d84 <UART_SetConfig+0x2dc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d125      	bne.n	8004cc4 <UART_SetConfig+0x21c>
 8004c78:	4b3e      	ldr	r3, [pc, #248]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c86:	d017      	beq.n	8004cb8 <UART_SetConfig+0x210>
 8004c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c8c:	d817      	bhi.n	8004cbe <UART_SetConfig+0x216>
 8004c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c92:	d00b      	beq.n	8004cac <UART_SetConfig+0x204>
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d811      	bhi.n	8004cbe <UART_SetConfig+0x216>
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <UART_SetConfig+0x1fe>
 8004c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ca2:	d006      	beq.n	8004cb2 <UART_SetConfig+0x20a>
 8004ca4:	e00b      	b.n	8004cbe <UART_SetConfig+0x216>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	77fb      	strb	r3, [r7, #31]
 8004caa:	e0a1      	b.n	8004df0 <UART_SetConfig+0x348>
 8004cac:	2302      	movs	r3, #2
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e09e      	b.n	8004df0 <UART_SetConfig+0x348>
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e09b      	b.n	8004df0 <UART_SetConfig+0x348>
 8004cb8:	2308      	movs	r3, #8
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e098      	b.n	8004df0 <UART_SetConfig+0x348>
 8004cbe:	2310      	movs	r3, #16
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e095      	b.n	8004df0 <UART_SetConfig+0x348>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a2f      	ldr	r2, [pc, #188]	; (8004d88 <UART_SetConfig+0x2e0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d125      	bne.n	8004d1a <UART_SetConfig+0x272>
 8004cce:	4b29      	ldr	r3, [pc, #164]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cdc:	d017      	beq.n	8004d0e <UART_SetConfig+0x266>
 8004cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ce2:	d817      	bhi.n	8004d14 <UART_SetConfig+0x26c>
 8004ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce8:	d00b      	beq.n	8004d02 <UART_SetConfig+0x25a>
 8004cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cee:	d811      	bhi.n	8004d14 <UART_SetConfig+0x26c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <UART_SetConfig+0x254>
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d006      	beq.n	8004d08 <UART_SetConfig+0x260>
 8004cfa:	e00b      	b.n	8004d14 <UART_SetConfig+0x26c>
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	77fb      	strb	r3, [r7, #31]
 8004d00:	e076      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d02:	2302      	movs	r3, #2
 8004d04:	77fb      	strb	r3, [r7, #31]
 8004d06:	e073      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	77fb      	strb	r3, [r7, #31]
 8004d0c:	e070      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	77fb      	strb	r3, [r7, #31]
 8004d12:	e06d      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d14:	2310      	movs	r3, #16
 8004d16:	77fb      	strb	r3, [r7, #31]
 8004d18:	e06a      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a1b      	ldr	r2, [pc, #108]	; (8004d8c <UART_SetConfig+0x2e4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d138      	bne.n	8004d96 <UART_SetConfig+0x2ee>
 8004d24:	4b13      	ldr	r3, [pc, #76]	; (8004d74 <UART_SetConfig+0x2cc>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d32:	d017      	beq.n	8004d64 <UART_SetConfig+0x2bc>
 8004d34:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d38:	d82a      	bhi.n	8004d90 <UART_SetConfig+0x2e8>
 8004d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3e:	d00b      	beq.n	8004d58 <UART_SetConfig+0x2b0>
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d44:	d824      	bhi.n	8004d90 <UART_SetConfig+0x2e8>
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d003      	beq.n	8004d52 <UART_SetConfig+0x2aa>
 8004d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4e:	d006      	beq.n	8004d5e <UART_SetConfig+0x2b6>
 8004d50:	e01e      	b.n	8004d90 <UART_SetConfig+0x2e8>
 8004d52:	2300      	movs	r3, #0
 8004d54:	77fb      	strb	r3, [r7, #31]
 8004d56:	e04b      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e048      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d5e:	2304      	movs	r3, #4
 8004d60:	77fb      	strb	r3, [r7, #31]
 8004d62:	e045      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d64:	2308      	movs	r3, #8
 8004d66:	77fb      	strb	r3, [r7, #31]
 8004d68:	e042      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d6a:	bf00      	nop
 8004d6c:	efff69f3 	.word	0xefff69f3
 8004d70:	40011000 	.word	0x40011000
 8004d74:	40023800 	.word	0x40023800
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	40004800 	.word	0x40004800
 8004d80:	40004c00 	.word	0x40004c00
 8004d84:	40005000 	.word	0x40005000
 8004d88:	40011400 	.word	0x40011400
 8004d8c:	40007800 	.word	0x40007800
 8004d90:	2310      	movs	r3, #16
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e02c      	b.n	8004df0 <UART_SetConfig+0x348>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a72      	ldr	r2, [pc, #456]	; (8004f64 <UART_SetConfig+0x4bc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d125      	bne.n	8004dec <UART_SetConfig+0x344>
 8004da0:	4b71      	ldr	r3, [pc, #452]	; (8004f68 <UART_SetConfig+0x4c0>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004daa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004dae:	d017      	beq.n	8004de0 <UART_SetConfig+0x338>
 8004db0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004db4:	d817      	bhi.n	8004de6 <UART_SetConfig+0x33e>
 8004db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dba:	d00b      	beq.n	8004dd4 <UART_SetConfig+0x32c>
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc0:	d811      	bhi.n	8004de6 <UART_SetConfig+0x33e>
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <UART_SetConfig+0x326>
 8004dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dca:	d006      	beq.n	8004dda <UART_SetConfig+0x332>
 8004dcc:	e00b      	b.n	8004de6 <UART_SetConfig+0x33e>
 8004dce:	2300      	movs	r3, #0
 8004dd0:	77fb      	strb	r3, [r7, #31]
 8004dd2:	e00d      	b.n	8004df0 <UART_SetConfig+0x348>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e00a      	b.n	8004df0 <UART_SetConfig+0x348>
 8004dda:	2304      	movs	r3, #4
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e007      	b.n	8004df0 <UART_SetConfig+0x348>
 8004de0:	2308      	movs	r3, #8
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e004      	b.n	8004df0 <UART_SetConfig+0x348>
 8004de6:	2310      	movs	r3, #16
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e001      	b.n	8004df0 <UART_SetConfig+0x348>
 8004dec:	2310      	movs	r3, #16
 8004dee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df8:	d15b      	bne.n	8004eb2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004dfa:	7ffb      	ldrb	r3, [r7, #31]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d828      	bhi.n	8004e52 <UART_SetConfig+0x3aa>
 8004e00:	a201      	add	r2, pc, #4	; (adr r2, 8004e08 <UART_SetConfig+0x360>)
 8004e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e06:	bf00      	nop
 8004e08:	08004e2d 	.word	0x08004e2d
 8004e0c:	08004e35 	.word	0x08004e35
 8004e10:	08004e3d 	.word	0x08004e3d
 8004e14:	08004e53 	.word	0x08004e53
 8004e18:	08004e43 	.word	0x08004e43
 8004e1c:	08004e53 	.word	0x08004e53
 8004e20:	08004e53 	.word	0x08004e53
 8004e24:	08004e53 	.word	0x08004e53
 8004e28:	08004e4b 	.word	0x08004e4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e2c:	f7fe fec4 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004e30:	61b8      	str	r0, [r7, #24]
        break;
 8004e32:	e013      	b.n	8004e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e34:	f7fe fed4 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8004e38:	61b8      	str	r0, [r7, #24]
        break;
 8004e3a:	e00f      	b.n	8004e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <UART_SetConfig+0x4c4>)
 8004e3e:	61bb      	str	r3, [r7, #24]
        break;
 8004e40:	e00c      	b.n	8004e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e42:	f7fe fda7 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8004e46:	61b8      	str	r0, [r7, #24]
        break;
 8004e48:	e008      	b.n	8004e5c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4e:	61bb      	str	r3, [r7, #24]
        break;
 8004e50:	e004      	b.n	8004e5c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	77bb      	strb	r3, [r7, #30]
        break;
 8004e5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d074      	beq.n	8004f4c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	005a      	lsls	r2, r3, #1
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	085b      	lsrs	r3, r3, #1
 8004e6c:	441a      	add	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e76:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b0f      	cmp	r3, #15
 8004e7c:	d916      	bls.n	8004eac <UART_SetConfig+0x404>
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e84:	d212      	bcs.n	8004eac <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	f023 030f 	bic.w	r3, r3, #15
 8004e8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f003 0307 	and.w	r3, r3, #7
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	89fb      	ldrh	r3, [r7, #14]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	89fa      	ldrh	r2, [r7, #14]
 8004ea8:	60da      	str	r2, [r3, #12]
 8004eaa:	e04f      	b.n	8004f4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	77bb      	strb	r3, [r7, #30]
 8004eb0:	e04c      	b.n	8004f4c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d828      	bhi.n	8004f0a <UART_SetConfig+0x462>
 8004eb8:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x418>)
 8004eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ebe:	bf00      	nop
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004f0b 	.word	0x08004f0b
 8004ed0:	08004efb 	.word	0x08004efb
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004f0b 	.word	0x08004f0b
 8004edc:	08004f0b 	.word	0x08004f0b
 8004ee0:	08004f03 	.word	0x08004f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7fe fe68 	bl	8003bb8 <HAL_RCC_GetPCLK1Freq>
 8004ee8:	61b8      	str	r0, [r7, #24]
        break;
 8004eea:	e013      	b.n	8004f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7fe fe78 	bl	8003be0 <HAL_RCC_GetPCLK2Freq>
 8004ef0:	61b8      	str	r0, [r7, #24]
        break;
 8004ef2:	e00f      	b.n	8004f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef4:	4b1d      	ldr	r3, [pc, #116]	; (8004f6c <UART_SetConfig+0x4c4>)
 8004ef6:	61bb      	str	r3, [r7, #24]
        break;
 8004ef8:	e00c      	b.n	8004f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efa:	f7fe fd4b 	bl	8003994 <HAL_RCC_GetSysClockFreq>
 8004efe:	61b8      	str	r0, [r7, #24]
        break;
 8004f00:	e008      	b.n	8004f14 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f06:	61bb      	str	r3, [r7, #24]
        break;
 8004f08:	e004      	b.n	8004f14 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	77bb      	strb	r3, [r7, #30]
        break;
 8004f12:	bf00      	nop
    }

    if (pclk != 0U)
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d018      	beq.n	8004f4c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	085a      	lsrs	r2, r3, #1
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	441a      	add	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b0f      	cmp	r3, #15
 8004f32:	d909      	bls.n	8004f48 <UART_SetConfig+0x4a0>
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3a:	d205      	bcs.n	8004f48 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	b29a      	uxth	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	e001      	b.n	8004f4c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f58:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3720      	adds	r7, #32
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40007c00 	.word	0x40007c00
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	00f42400 	.word	0x00f42400

08004f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00a      	beq.n	8004f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00a      	beq.n	8004fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	430a      	orrs	r2, r1
 8004fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00a      	beq.n	8005000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	f003 0310 	and.w	r3, r3, #16
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00a      	beq.n	8005022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d01a      	beq.n	8005086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800506e:	d10a      	bne.n	8005086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c4:	f7fc fa40 	bl	8001548 <HAL_GetTick>
 80050c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0308 	and.w	r3, r3, #8
 80050d4:	2b08      	cmp	r3, #8
 80050d6:	d10e      	bne.n	80050f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f81b 	bl	8005122 <UART_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e011      	b.n	800511a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2220      	movs	r2, #32
 80050fa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b09c      	sub	sp, #112	; 0x70
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4613      	mov	r3, r2
 8005130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005132:	e0a7      	b.n	8005284 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800513a:	f000 80a3 	beq.w	8005284 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800513e:	f7fc fa03 	bl	8001548 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800514a:	429a      	cmp	r2, r3
 800514c:	d302      	bcc.n	8005154 <UART_WaitOnFlagUntilTimeout+0x32>
 800514e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005150:	2b00      	cmp	r3, #0
 8005152:	d13f      	bne.n	80051d4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515c:	e853 3f00 	ldrex	r3, [r3]
 8005160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005168:	667b      	str	r3, [r7, #100]	; 0x64
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005174:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800517a:	e841 2300 	strex	r3, r2, [r1]
 800517e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005182:	2b00      	cmp	r3, #0
 8005184:	d1e6      	bne.n	8005154 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	3308      	adds	r3, #8
 800518c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005190:	e853 3f00 	ldrex	r3, [r3]
 8005194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005198:	f023 0301 	bic.w	r3, r3, #1
 800519c:	663b      	str	r3, [r7, #96]	; 0x60
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	3308      	adds	r3, #8
 80051a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80051a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80051ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051ae:	e841 2300 	strex	r3, r2, [r1]
 80051b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80051b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1e5      	bne.n	8005186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2220      	movs	r2, #32
 80051be:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2220      	movs	r2, #32
 80051c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e068      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0304 	and.w	r3, r3, #4
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d050      	beq.n	8005284 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051f0:	d148      	bne.n	8005284 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051fa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	e853 3f00 	ldrex	r3, [r3]
 8005208:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800521a:	637b      	str	r3, [r7, #52]	; 0x34
 800521c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005222:	e841 2300 	strex	r3, r2, [r1]
 8005226:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1e6      	bne.n	80051fc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	3308      	adds	r3, #8
 8005234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	e853 3f00 	ldrex	r3, [r3]
 800523c:	613b      	str	r3, [r7, #16]
   return(result);
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	f023 0301 	bic.w	r3, r3, #1
 8005244:	66bb      	str	r3, [r7, #104]	; 0x68
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800524e:	623a      	str	r2, [r7, #32]
 8005250:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005252:	69f9      	ldr	r1, [r7, #28]
 8005254:	6a3a      	ldr	r2, [r7, #32]
 8005256:	e841 2300 	strex	r3, r2, [r1]
 800525a:	61bb      	str	r3, [r7, #24]
   return(result);
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e5      	bne.n	800522e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2220      	movs	r2, #32
 8005266:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2220      	movs	r2, #32
 8005274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e010      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	4013      	ands	r3, r2
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	429a      	cmp	r2, r3
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	429a      	cmp	r2, r3
 80052a0:	f43f af48 	beq.w	8005134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3770      	adds	r7, #112	; 0x70
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80052b0:	b084      	sub	sp, #16
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b084      	sub	sp, #16
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	f107 001c 	add.w	r0, r7, #28
 80052be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d120      	bne.n	800530a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	4b20      	ldr	r3, [pc, #128]	; (800535c <USB_CoreInit+0xac>)
 80052da:	4013      	ands	r3, r2
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80052ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d105      	bne.n	80052fe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa96 	bl	8005830 <USB_CoreReset>
 8005304:	4603      	mov	r3, r0
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	e010      	b.n	800532c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fa8a 	bl	8005830 <USB_CoreReset>
 800531c:	4603      	mov	r3, r0
 800531e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005324:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800532c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532e:	2b01      	cmp	r3, #1
 8005330:	d10b      	bne.n	800534a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f043 0206 	orr.w	r2, r3, #6
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f043 0220 	orr.w	r2, r3, #32
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800534a:	7bfb      	ldrb	r3, [r7, #15]
}
 800534c:	4618      	mov	r0, r3
 800534e:	3710      	adds	r7, #16
 8005350:	46bd      	mov	sp, r7
 8005352:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005356:	b004      	add	sp, #16
 8005358:	4770      	bx	lr
 800535a:	bf00      	nop
 800535c:	ffbdffbf 	.word	0xffbdffbf

08005360 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f023 0201 	bic.w	r2, r3, #1
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
 800538a:	460b      	mov	r3, r1
 800538c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800539e:	78fb      	ldrb	r3, [r7, #3]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d115      	bne.n	80053d0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053b0:	2001      	movs	r0, #1
 80053b2:	f7fc f8d5 	bl	8001560 <HAL_Delay>
      ms++;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fa29 	bl	8005814 <USB_GetMode>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d01e      	beq.n	8005406 <USB_SetCurrentMode+0x84>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b31      	cmp	r3, #49	; 0x31
 80053cc:	d9f0      	bls.n	80053b0 <USB_SetCurrentMode+0x2e>
 80053ce:	e01a      	b.n	8005406 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80053d0:	78fb      	ldrb	r3, [r7, #3]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d115      	bne.n	8005402 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7fc f8bc 	bl	8001560 <HAL_Delay>
      ms++;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fa10 	bl	8005814 <USB_GetMode>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d005      	beq.n	8005406 <USB_SetCurrentMode+0x84>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b31      	cmp	r3, #49	; 0x31
 80053fe:	d9f0      	bls.n	80053e2 <USB_SetCurrentMode+0x60>
 8005400:	e001      	b.n	8005406 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e005      	b.n	8005412 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2b32      	cmp	r3, #50	; 0x32
 800540a:	d101      	bne.n	8005410 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e000      	b.n	8005412 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
	...

0800541c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800541c:	b084      	sub	sp, #16
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
 8005426:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800542a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800542e:	2300      	movs	r3, #0
 8005430:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	e009      	b.n	8005450 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	3340      	adds	r3, #64	; 0x40
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	2200      	movs	r2, #0
 8005448:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	3301      	adds	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b0e      	cmp	r3, #14
 8005454:	d9f2      	bls.n	800543c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d11c      	bne.n	8005496 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546a:	f043 0302 	orr.w	r3, r3, #2
 800546e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	e005      	b.n	80054a2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054a8:	461a      	mov	r2, r3
 80054aa:	2300      	movs	r3, #0
 80054ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b4:	4619      	mov	r1, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054bc:	461a      	mov	r2, r3
 80054be:	680b      	ldr	r3, [r1, #0]
 80054c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d10c      	bne.n	80054e2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d104      	bne.n	80054d8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80054ce:	2100      	movs	r1, #0
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f965 	bl	80057a0 <USB_SetDevSpeed>
 80054d6:	e008      	b.n	80054ea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80054d8:	2101      	movs	r1, #1
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f960 	bl	80057a0 <USB_SetDevSpeed>
 80054e0:	e003      	b.n	80054ea <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80054e2:	2103      	movs	r1, #3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f95b 	bl	80057a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054ea:	2110      	movs	r1, #16
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8f3 	bl	80056d8 <USB_FlushTxFifo>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d001      	beq.n	80054fc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 f91f 	bl	8005740 <USB_FlushRxFifo>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	461a      	mov	r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800551e:	461a      	mov	r2, r3
 8005520:	2300      	movs	r3, #0
 8005522:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800552a:	461a      	mov	r2, r3
 800552c:	2300      	movs	r3, #0
 800552e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005530:	2300      	movs	r3, #0
 8005532:	613b      	str	r3, [r7, #16]
 8005534:	e043      	b.n	80055be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005548:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800554c:	d118      	bne.n	8005580 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005560:	461a      	mov	r2, r3
 8005562:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	e013      	b.n	8005592 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005576:	461a      	mov	r2, r3
 8005578:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e008      	b.n	8005592 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	461a      	mov	r2, r3
 800558e:	2300      	movs	r3, #0
 8005590:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4413      	add	r3, r2
 800559a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800559e:	461a      	mov	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b0:	461a      	mov	r2, r3
 80055b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3301      	adds	r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d3b7      	bcc.n	8005536 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c6:	2300      	movs	r3, #0
 80055c8:	613b      	str	r3, [r7, #16]
 80055ca:	e043      	b.n	8005654 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055e2:	d118      	bne.n	8005616 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d10a      	bne.n	8005600 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f6:	461a      	mov	r2, r3
 80055f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	e013      	b.n	8005628 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560c:	461a      	mov	r2, r3
 800560e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005612:	6013      	str	r3, [r2, #0]
 8005614:	e008      	b.n	8005628 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	015a      	lsls	r2, r3, #5
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	4413      	add	r3, r2
 800561e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005622:	461a      	mov	r2, r3
 8005624:	2300      	movs	r3, #0
 8005626:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005634:	461a      	mov	r2, r3
 8005636:	2300      	movs	r3, #0
 8005638:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	461a      	mov	r2, r3
 8005648:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800564c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	3301      	adds	r3, #1
 8005652:	613b      	str	r3, [r7, #16]
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	429a      	cmp	r2, r3
 800565a:	d3b7      	bcc.n	80055cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800566e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800567c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f043 0210 	orr.w	r2, r3, #16
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699a      	ldr	r2, [r3, #24]
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <USB_DevInit+0x2b4>)
 8005696:	4313      	orrs	r3, r2
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800569c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d005      	beq.n	80056ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f043 0208 	orr.w	r2, r3, #8
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80056ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d105      	bne.n	80056c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699a      	ldr	r2, [r3, #24]
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <USB_DevInit+0x2b8>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056cc:	b004      	add	sp, #16
 80056ce:	4770      	bx	lr
 80056d0:	803c3800 	.word	0x803c3800
 80056d4:	40000004 	.word	0x40000004

080056d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4a13      	ldr	r2, [pc, #76]	; (800573c <USB_FlushTxFifo+0x64>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d901      	bls.n	80056f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e01b      	b.n	8005730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	daf2      	bge.n	80056e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	019b      	lsls	r3, r3, #6
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	3301      	adds	r3, #1
 8005714:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a08      	ldr	r2, [pc, #32]	; (800573c <USB_FlushTxFifo+0x64>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d901      	bls.n	8005722 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e006      	b.n	8005730 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b20      	cmp	r3, #32
 800572c:	d0f0      	beq.n	8005710 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	00030d40 	.word	0x00030d40

08005740 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4a11      	ldr	r2, [pc, #68]	; (800579c <USB_FlushRxFifo+0x5c>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d901      	bls.n	800575e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e018      	b.n	8005790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	2b00      	cmp	r3, #0
 8005764:	daf2      	bge.n	800574c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2210      	movs	r2, #16
 800576e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3301      	adds	r3, #1
 8005774:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	4a08      	ldr	r2, [pc, #32]	; (800579c <USB_FlushRxFifo+0x5c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d901      	bls.n	8005782 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e006      	b.n	8005790 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d0f0      	beq.n	8005770 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3714      	adds	r7, #20
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	00030d40 	.word	0x00030d40

080057a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057c0:	4313      	orrs	r3, r2
 80057c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057ec:	f023 0303 	bic.w	r3, r3, #3
 80057f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005800:	f043 0302 	orr.w	r3, r3, #2
 8005804:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	f003 0301 	and.w	r3, r3, #1
}
 8005824:	4618      	mov	r0, r3
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005838:	2300      	movs	r3, #0
 800583a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3301      	adds	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	4a13      	ldr	r2, [pc, #76]	; (8005894 <USB_CoreReset+0x64>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e01b      	b.n	8005886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	691b      	ldr	r3, [r3, #16]
 8005852:	2b00      	cmp	r3, #0
 8005854:	daf2      	bge.n	800583c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3301      	adds	r3, #1
 800586a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4a09      	ldr	r2, [pc, #36]	; (8005894 <USB_CoreReset+0x64>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d901      	bls.n	8005878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b01      	cmp	r3, #1
 8005882:	d0f0      	beq.n	8005866 <USB_CoreReset+0x36>

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	00030d40 	.word	0x00030d40

08005898 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8005898:	b5b0      	push	{r4, r5, r7, lr}
 800589a:	b08c      	sub	sp, #48	; 0x30
 800589c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800589e:	2100      	movs	r1, #0
 80058a0:	2000      	movs	r0, #0
 80058a2:	f003 fdc3 	bl	800942c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80058a6:	4b20      	ldr	r3, [pc, #128]	; (8005928 <MX_LWIP_Init+0x90>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80058ac:	4b1f      	ldr	r3, [pc, #124]	; (800592c <MX_LWIP_Init+0x94>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80058b2:	4b1f      	ldr	r3, [pc, #124]	; (8005930 <MX_LWIP_Init+0x98>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80058b8:	4b1e      	ldr	r3, [pc, #120]	; (8005934 <MX_LWIP_Init+0x9c>)
 80058ba:	9302      	str	r3, [sp, #8]
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <MX_LWIP_Init+0xa0>)
 80058be:	9301      	str	r3, [sp, #4]
 80058c0:	2300      	movs	r3, #0
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <MX_LWIP_Init+0x98>)
 80058c6:	4a19      	ldr	r2, [pc, #100]	; (800592c <MX_LWIP_Init+0x94>)
 80058c8:	4917      	ldr	r1, [pc, #92]	; (8005928 <MX_LWIP_Init+0x90>)
 80058ca:	481c      	ldr	r0, [pc, #112]	; (800593c <MX_LWIP_Init+0xa4>)
 80058cc:	f005 fea6 	bl	800b61c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80058d0:	481a      	ldr	r0, [pc, #104]	; (800593c <MX_LWIP_Init+0xa4>)
 80058d2:	f006 f85d 	bl	800b990 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80058d6:	4b19      	ldr	r3, [pc, #100]	; (800593c <MX_LWIP_Init+0xa4>)
 80058d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80058dc:	089b      	lsrs	r3, r3, #2
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80058e8:	4814      	ldr	r0, [pc, #80]	; (800593c <MX_LWIP_Init+0xa4>)
 80058ea:	f006 f861 	bl	800b9b0 <netif_set_up>
 80058ee:	e002      	b.n	80058f6 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80058f0:	4812      	ldr	r0, [pc, #72]	; (800593c <MX_LWIP_Init+0xa4>)
 80058f2:	f006 f8c9 	bl	800ba88 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80058f6:	4912      	ldr	r1, [pc, #72]	; (8005940 <MX_LWIP_Init+0xa8>)
 80058f8:	4810      	ldr	r0, [pc, #64]	; (800593c <MX_LWIP_Init+0xa4>)
 80058fa:	f006 f95f 	bl	800bbbc <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <MX_LWIP_Init+0xac>)
 8005900:	1d3c      	adds	r4, r7, #4
 8005902:	461d      	mov	r5, r3
 8005904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005908:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800590c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 8005910:	1d3b      	adds	r3, r7, #4
 8005912:	490a      	ldr	r1, [pc, #40]	; (800593c <MX_LWIP_Init+0xa4>)
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fd43 	bl	80063a0 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800591a:	4808      	ldr	r0, [pc, #32]	; (800593c <MX_LWIP_Init+0xa4>)
 800591c:	f00e f9b4 	bl	8013c88 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005920:	bf00      	nop
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bdb0      	pop	{r4, r5, r7, pc}
 8005928:	20000a70 	.word	0x20000a70
 800592c:	20000a74 	.word	0x20000a74
 8005930:	20000a78 	.word	0x20000a78
 8005934:	08009369 	.word	0x08009369
 8005938:	08005e41 	.word	0x08005e41
 800593c:	20000a38 	.word	0x20000a38
 8005940:	08005949 	.word	0x08005949
 8005944:	08018cf4 	.word	0x08018cf4

08005948 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800596e:	2320      	movs	r3, #32
 8005970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005972:	f3bf 8f4f 	dsb	sy
}
 8005976:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005978:	e00b      	b.n	8005992 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800597a:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	dcf0      	bgt.n	800597a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005998:	f3bf 8f4f 	dsb	sy
}
 800599c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800599e:	f3bf 8f6f 	isb	sy
}
 80059a2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000ed00 	.word	0xe000ed00

080059b4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <HAL_ETH_RxCpltCallback+0x1c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fe37 	bl	8006634 <osSemaphoreRelease>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20005408 	.word	0x20005408

080059d4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_ETH_TxCpltCallback+0x1c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fe27 	bl	8006634 <osSemaphoreRelease>
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	2000540c 	.word	0x2000540c

080059f4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fc fcf3 	bl	80023e8 <HAL_ETH_GetDMAError>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d104      	bne.n	8005a16 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_ETH_ErrorCallback+0x2c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f000 fe0f 	bl	8006634 <osSemaphoreRelease>
  }
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20005408 	.word	0x20005408

08005a24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b0a8      	sub	sp, #160	; 0xa0
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 8005a3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a42:	2264      	movs	r2, #100	; 0x64
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f012 fa15 	bl	8017e76 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a4c:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <low_level_init+0x240>)
 8005a4e:	4a86      	ldr	r2, [pc, #536]	; (8005c68 <low_level_init+0x244>)
 8005a50:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005a58:	2380      	movs	r3, #128	; 0x80
 8005a5a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 8005a5e:	23e1      	movs	r3, #225	; 0xe1
 8005a60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005a64:	2300      	movs	r3, #0
 8005a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005a70:	2300      	movs	r3, #0
 8005a72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005a76:	4a7b      	ldr	r2, [pc, #492]	; (8005c64 <low_level_init+0x240>)
 8005a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a7e:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <low_level_init+0x240>)
 8005a80:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a84:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a86:	4b77      	ldr	r3, [pc, #476]	; (8005c64 <low_level_init+0x240>)
 8005a88:	4a78      	ldr	r2, [pc, #480]	; (8005c6c <low_level_init+0x248>)
 8005a8a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a8c:	4b75      	ldr	r3, [pc, #468]	; (8005c64 <low_level_init+0x240>)
 8005a8e:	4a78      	ldr	r2, [pc, #480]	; (8005c70 <low_level_init+0x24c>)
 8005a90:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a92:	4b74      	ldr	r3, [pc, #464]	; (8005c64 <low_level_init+0x240>)
 8005a94:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005a98:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a9a:	4872      	ldr	r0, [pc, #456]	; (8005c64 <low_level_init+0x240>)
 8005a9c:	f7fb fe66 	bl	800176c <HAL_ETH_Init>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005aa6:	2238      	movs	r2, #56	; 0x38
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4872      	ldr	r0, [pc, #456]	; (8005c74 <low_level_init+0x250>)
 8005aac:	f012 f9e3 	bl	8017e76 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005ab0:	4b70      	ldr	r3, [pc, #448]	; (8005c74 <low_level_init+0x250>)
 8005ab2:	2221      	movs	r2, #33	; 0x21
 8005ab4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005ab6:	4b6f      	ldr	r3, [pc, #444]	; (8005c74 <low_level_init+0x250>)
 8005ab8:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005abc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005abe:	4b6d      	ldr	r3, [pc, #436]	; (8005c74 <low_level_init+0x250>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005ac4:	486c      	ldr	r0, [pc, #432]	; (8005c78 <low_level_init+0x254>)
 8005ac6:	f005 fc63 	bl	800b390 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2206      	movs	r2, #6
 8005ace:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ad2:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <low_level_init+0x240>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	781a      	ldrb	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ade:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <low_level_init+0x240>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	785a      	ldrb	r2, [r3, #1]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005aea:	4b5e      	ldr	r3, [pc, #376]	; (8005c64 <low_level_init+0x240>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	789a      	ldrb	r2, [r3, #2]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005af6:	4b5b      	ldr	r3, [pc, #364]	; (8005c64 <low_level_init+0x240>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	78da      	ldrb	r2, [r3, #3]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005b02:	4b58      	ldr	r3, [pc, #352]	; (8005c64 <low_level_init+0x240>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	791a      	ldrb	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005b0e:	4b55      	ldr	r3, [pc, #340]	; (8005c64 <low_level_init+0x240>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	795a      	ldrb	r2, [r3, #5]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b20:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b28:	f043 030a 	orr.w	r3, r3, #10
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005b34:	2203      	movs	r2, #3
 8005b36:	2100      	movs	r1, #0
 8005b38:	2001      	movs	r0, #1
 8005b3a:	f001 f82d 	bl	8006b98 <xQueueGenericCreate>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	4a4e      	ldr	r2, [pc, #312]	; (8005c7c <low_level_init+0x258>)
 8005b42:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005b44:	2203      	movs	r2, #3
 8005b46:	2100      	movs	r1, #0
 8005b48:	2001      	movs	r0, #1
 8005b4a:	f001 f825 	bl	8006b98 <xQueueGenericCreate>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	4a4b      	ldr	r2, [pc, #300]	; (8005c80 <low_level_init+0x25c>)
 8005b52:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005b54:	4b4b      	ldr	r3, [pc, #300]	; (8005c84 <low_level_init+0x260>)
 8005b56:	f107 0408 	add.w	r4, r7, #8
 8005b5a:	461d      	mov	r5, r3
 8005b5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005b68:	f107 0308 	add.w	r3, r7, #8
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fc16 	bl	80063a0 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b74:	4944      	ldr	r1, [pc, #272]	; (8005c88 <low_level_init+0x264>)
 8005b76:	4845      	ldr	r0, [pc, #276]	; (8005c8c <low_level_init+0x268>)
 8005b78:	f7fb fb63 	bl	8001242 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005b7c:	4843      	ldr	r0, [pc, #268]	; (8005c8c <low_level_init+0x268>)
 8005b7e:	f7fb fb92 	bl	80012a6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005b82:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d165      	bne.n	8005c56 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b8a:	4840      	ldr	r0, [pc, #256]	; (8005c8c <low_level_init+0x268>)
 8005b8c:	f7fb fc33 	bl	80013f6 <LAN8742_GetLinkState>
 8005b90:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005b94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	dc06      	bgt.n	8005baa <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f005 ffdd 	bl	800bb5c <netif_set_link_down>
      netif_set_down(netif);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f005 ff70 	bl	800ba88 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005ba8:	e057      	b.n	8005c5a <low_level_init+0x236>
      switch (PHYLinkState)
 8005baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005bae:	3b02      	subs	r3, #2
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d82b      	bhi.n	8005c0c <low_level_init+0x1e8>
 8005bb4:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <low_level_init+0x198>)
 8005bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bba:	bf00      	nop
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bdf 	.word	0x08005bdf
 8005bc4:	08005bef 	.word	0x08005bef
 8005bc8:	08005bff 	.word	0x08005bff
        duplex = ETH_FULLDUPLEX_MODE;
 8005bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005bdc:	e01f      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005be8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005bec:	e017      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bf2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005bfc:	e00f      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c0a:	e008      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8005c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8005c1c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c22:	4619      	mov	r1, r3
 8005c24:	480f      	ldr	r0, [pc, #60]	; (8005c64 <low_level_init+0x240>)
 8005c26:	f7fc fa85 	bl	8002134 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c2e:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c34:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4809      	ldr	r0, [pc, #36]	; (8005c64 <low_level_init+0x240>)
 8005c3e:	f7fc fb63 	bl	8002308 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005c42:	4808      	ldr	r0, [pc, #32]	; (8005c64 <low_level_init+0x240>)
 8005c44:	f7fb fe0e 	bl	8001864 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f005 feb1 	bl	800b9b0 <netif_set_up>
    netif_set_link_up(netif);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f005 ff4c 	bl	800baec <netif_set_link_up>
}
 8005c54:	e001      	b.n	8005c5a <low_level_init+0x236>
    Error_Handler();
 8005c56:	f7fb f844 	bl	8000ce2 <Error_Handler>
}
 8005c5a:	bf00      	nop
 8005c5c:	37a0      	adds	r7, #160	; 0xa0
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bdb0      	pop	{r4, r5, r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20005410 	.word	0x20005410
 8005c68:	40028000 	.word	0x40028000
 8005c6c:	20000140 	.word	0x20000140
 8005c70:	200000a0 	.word	0x200000a0
 8005c74:	200054c0 	.word	0x200054c0
 8005c78:	0801bee0 	.word	0x0801bee0
 8005c7c:	20005408 	.word	0x20005408
 8005c80:	2000540c 	.word	0x2000540c
 8005c84:	08018d18 	.word	0x08018d18
 8005c88:	2000001c 	.word	0x2000001c
 8005c8c:	200054f8 	.word	0x200054f8

08005c90 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b092      	sub	sp, #72	; 0x48
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005ca8:	f107 030c 	add.w	r3, r7, #12
 8005cac:	2230      	movs	r2, #48	; 0x30
 8005cae:	2100      	movs	r1, #0
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f012 f8e0 	bl	8017e76 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005cb6:	f107 030c 	add.w	r3, r7, #12
 8005cba:	2230      	movs	r2, #48	; 0x30
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f012 f8d9 	bl	8017e76 <memset>

  for(q = p; q != NULL; q = q->next)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005cc8:	e045      	b.n	8005d56 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005cca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ccc:	2b03      	cmp	r3, #3
 8005cce:	d902      	bls.n	8005cd6 <low_level_output+0x46>
      return ERR_IF;
 8005cd0:	f06f 030b 	mvn.w	r3, #11
 8005cd4:	e065      	b.n	8005da2 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd8:	6859      	ldr	r1, [r3, #4]
 8005cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	3348      	adds	r3, #72	; 0x48
 8005ce6:	443b      	add	r3, r7
 8005ce8:	3b3c      	subs	r3, #60	; 0x3c
 8005cea:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005cec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cee:	895b      	ldrh	r3, [r3, #10]
 8005cf0:	4619      	mov	r1, r3
 8005cf2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	3348      	adds	r3, #72	; 0x48
 8005cfe:	443b      	add	r3, r7
 8005d00:	3b38      	subs	r3, #56	; 0x38
 8005d02:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d011      	beq.n	8005d2e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005d0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0c:	1e5a      	subs	r2, r3, #1
 8005d0e:	f107 000c 	add.w	r0, r7, #12
 8005d12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d14:	460b      	mov	r3, r1
 8005d16:	005b      	lsls	r3, r3, #1
 8005d18:	440b      	add	r3, r1
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	18c1      	adds	r1, r0, r3
 8005d1e:	4613      	mov	r3, r2
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	3348      	adds	r3, #72	; 0x48
 8005d28:	443b      	add	r3, r7
 8005d2a:	3b34      	subs	r3, #52	; 0x34
 8005d2c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005d2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d38:	4613      	mov	r3, r2
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	4413      	add	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	3348      	adds	r3, #72	; 0x48
 8005d42:	443b      	add	r3, r7
 8005d44:	3b34      	subs	r3, #52	; 0x34
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1b6      	bne.n	8005cca <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	891b      	ldrh	r3, [r3, #8]
 8005d60:	461a      	mov	r2, r3
 8005d62:	4b12      	ldr	r3, [pc, #72]	; (8005dac <low_level_output+0x11c>)
 8005d64:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d66:	4a11      	ldr	r2, [pc, #68]	; (8005dac <low_level_output+0x11c>)
 8005d68:	f107 030c 	add.w	r3, r7, #12
 8005d6c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d6e:	4a0f      	ldr	r2, [pc, #60]	; (8005dac <low_level_output+0x11c>)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005d74:	6838      	ldr	r0, [r7, #0]
 8005d76:	f006 fb75 	bl	800c464 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005d7a:	490c      	ldr	r1, [pc, #48]	; (8005dac <low_level_output+0x11c>)
 8005d7c:	480c      	ldr	r0, [pc, #48]	; (8005db0 <low_level_output+0x120>)
 8005d7e:	f7fb fe7f 	bl	8001a80 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005d82:	bf00      	nop
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <low_level_output+0x124>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f04f 31ff 	mov.w	r1, #4294967295
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fc03 	bl	8006598 <osSemaphoreWait>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f5      	bne.n	8005d84 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005d98:	4805      	ldr	r0, [pc, #20]	; (8005db0 <low_level_output+0x120>)
 8005d9a:	f7fc f805 	bl	8001da8 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005d9e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3748      	adds	r7, #72	; 0x48
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	200054c0 	.word	0x200054c0
 8005db0:	20005410 	.word	0x20005410
 8005db4:	2000540c 	.word	0x2000540c

08005db8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005dc4:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <low_level_input+0x2c>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d105      	bne.n	8005dd8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005dcc:	f107 030c 	add.w	r3, r7, #12
 8005dd0:	4619      	mov	r1, r3
 8005dd2:	4805      	ldr	r0, [pc, #20]	; (8005de8 <low_level_input+0x30>)
 8005dd4:	f7fb feb0 	bl	8001b38 <HAL_ETH_ReadData>
  }

  return p;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20005404 	.word	0x20005404
 8005de8:	20005410 	.word	0x20005410

08005dec <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005dfc:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <ethernetif_input+0x50>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f04f 31ff 	mov.w	r1, #4294967295
 8005e04:	4618      	mov	r0, r3
 8005e06:	f000 fbc7 	bl	8006598 <osSemaphoreWait>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f5      	bne.n	8005dfc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005e10:	68b8      	ldr	r0, [r7, #8]
 8005e12:	f7ff ffd1 	bl	8005db8 <low_level_input>
 8005e16:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	68b9      	ldr	r1, [r7, #8]
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	4798      	blx	r3
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f006 fa72 	bl	800c318 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1ea      	bne.n	8005e10 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e3a:	e7df      	b.n	8005dfc <ethernetif_input+0x10>
 8005e3c:	20005408 	.word	0x20005408

08005e40 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <ethernetif_init+0x1c>
 8005e4e:	4b0e      	ldr	r3, [pc, #56]	; (8005e88 <ethernetif_init+0x48>)
 8005e50:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005e54:	490d      	ldr	r1, [pc, #52]	; (8005e8c <ethernetif_init+0x4c>)
 8005e56:	480e      	ldr	r0, [pc, #56]	; (8005e90 <ethernetif_init+0x50>)
 8005e58:	f011 ffa8 	bl	8017dac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2273      	movs	r2, #115	; 0x73
 8005e60:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2274      	movs	r2, #116	; 0x74
 8005e68:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <ethernetif_init+0x54>)
 8005e70:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a08      	ldr	r2, [pc, #32]	; (8005e98 <ethernetif_init+0x58>)
 8005e76:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f7ff fdd3 	bl	8005a24 <low_level_init>

  return ERR_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3708      	adds	r7, #8
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	08018d34 	.word	0x08018d34
 8005e8c:	08018d50 	.word	0x08018d50
 8005e90:	08018d60 	.word	0x08018d60
 8005e94:	08015b55 	.word	0x08015b55
 8005e98:	08005c91 	.word	0x08005c91

08005e9c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005ea8:	68f9      	ldr	r1, [r7, #12]
 8005eaa:	4809      	ldr	r0, [pc, #36]	; (8005ed0 <pbuf_free_custom+0x34>)
 8005eac:	f005 fb60 	bl	800b570 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005eb0:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <pbuf_free_custom+0x38>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d107      	bne.n	8005ec8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <pbuf_free_custom+0x38>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <pbuf_free_custom+0x3c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fbb6 	bl	8006634 <osSemaphoreRelease>
  }
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}
 8005ed0:	0801bee0 	.word	0x0801bee0
 8005ed4:	20005404 	.word	0x20005404
 8005ed8:	20005408 	.word	0x20005408

08005edc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ee0:	f7fb fb32 	bl	8001548 <HAL_GetTick>
 8005ee4:	4603      	mov	r3, r0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b08e      	sub	sp, #56	; 0x38
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	605a      	str	r2, [r3, #4]
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	60da      	str	r2, [r3, #12]
 8005f02:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a52      	ldr	r2, [pc, #328]	; (8006054 <HAL_ETH_MspInit+0x168>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	f040 809e 	bne.w	800604c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f10:	4b51      	ldr	r3, [pc, #324]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	4a50      	ldr	r2, [pc, #320]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f1c:	4b4e      	ldr	r3, [pc, #312]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f24:	623b      	str	r3, [r7, #32]
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	4b4b      	ldr	r3, [pc, #300]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	4a4a      	ldr	r2, [pc, #296]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f32:	6313      	str	r3, [r2, #48]	; 0x30
 8005f34:	4b48      	ldr	r3, [pc, #288]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	4b45      	ldr	r3, [pc, #276]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	4a44      	ldr	r2, [pc, #272]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f4c:	4b42      	ldr	r3, [pc, #264]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f54:	61bb      	str	r3, [r7, #24]
 8005f56:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f58:	4b3f      	ldr	r3, [pc, #252]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5c:	4a3e      	ldr	r2, [pc, #248]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f5e:	f043 0304 	orr.w	r3, r3, #4
 8005f62:	6313      	str	r3, [r2, #48]	; 0x30
 8005f64:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	617b      	str	r3, [r7, #20]
 8005f6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f70:	4b39      	ldr	r3, [pc, #228]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f74:	4a38      	ldr	r2, [pc, #224]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f76:	f043 0301 	orr.w	r3, r3, #1
 8005f7a:	6313      	str	r3, [r2, #48]	; 0x30
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	613b      	str	r3, [r7, #16]
 8005f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f88:	4b33      	ldr	r3, [pc, #204]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8c:	4a32      	ldr	r2, [pc, #200]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f8e:	f043 0302 	orr.w	r3, r3, #2
 8005f92:	6313      	str	r3, [r2, #48]	; 0x30
 8005f94:	4b30      	ldr	r3, [pc, #192]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fa0:	4b2d      	ldr	r3, [pc, #180]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa4:	4a2c      	ldr	r2, [pc, #176]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005faa:	6313      	str	r3, [r2, #48]	; 0x30
 8005fac:	4b2a      	ldr	r3, [pc, #168]	; (8006058 <HAL_ETH_MspInit+0x16c>)
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb4:	60bb      	str	r3, [r7, #8]
 8005fb6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005fb8:	2332      	movs	r3, #50	; 0x32
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fc8:	230b      	movs	r3, #11
 8005fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4822      	ldr	r0, [pc, #136]	; (800605c <HAL_ETH_MspInit+0x170>)
 8005fd4:	f7fc fe18 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8005fd8:	2386      	movs	r3, #134	; 0x86
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fdc:	2302      	movs	r3, #2
 8005fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe4:	2303      	movs	r3, #3
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fe8:	230b      	movs	r3, #11
 8005fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	481b      	ldr	r0, [pc, #108]	; (8006060 <HAL_ETH_MspInit+0x174>)
 8005ff4:	f7fc fe08 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8005ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ffe:	2302      	movs	r3, #2
 8006000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006002:	2300      	movs	r3, #0
 8006004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006006:	2303      	movs	r3, #3
 8006008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800600a:	230b      	movs	r3, #11
 800600c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800600e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006012:	4619      	mov	r1, r3
 8006014:	4813      	ldr	r0, [pc, #76]	; (8006064 <HAL_ETH_MspInit+0x178>)
 8006016:	f7fc fdf7 	bl	8002c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800601a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006020:	2302      	movs	r3, #2
 8006022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006024:	2300      	movs	r3, #0
 8006026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006028:	2303      	movs	r3, #3
 800602a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800602c:	230b      	movs	r3, #11
 800602e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006034:	4619      	mov	r1, r3
 8006036:	480c      	ldr	r0, [pc, #48]	; (8006068 <HAL_ETH_MspInit+0x17c>)
 8006038:	f7fc fde6 	bl	8002c08 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800603c:	2200      	movs	r2, #0
 800603e:	2105      	movs	r1, #5
 8006040:	203d      	movs	r0, #61	; 0x3d
 8006042:	f7fb fb69 	bl	8001718 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006046:	203d      	movs	r0, #61	; 0x3d
 8006048:	f7fb fb82 	bl	8001750 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800604c:	bf00      	nop
 800604e:	3738      	adds	r7, #56	; 0x38
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	40028000 	.word	0x40028000
 8006058:	40023800 	.word	0x40023800
 800605c:	40020800 	.word	0x40020800
 8006060:	40020000 	.word	0x40020000
 8006064:	40020400 	.word	0x40020400
 8006068:	40021800 	.word	0x40021800

0800606c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006070:	4802      	ldr	r0, [pc, #8]	; (800607c <ETH_PHY_IO_Init+0x10>)
 8006072:	f7fc f963 	bl	800233c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	bd80      	pop	{r7, pc}
 800607c:	20005410 	.word	0x20005410

08006080 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	68f9      	ldr	r1, [r7, #12]
 80060a2:	4807      	ldr	r0, [pc, #28]	; (80060c0 <ETH_PHY_IO_ReadReg+0x30>)
 80060a4:	f7fb ffb2 	bl	800200c <HAL_ETH_ReadPHYRegister>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80060ae:	f04f 33ff 	mov.w	r3, #4294967295
 80060b2:	e000      	b.n	80060b6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20005410 	.word	0x20005410

080060c4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	4807      	ldr	r0, [pc, #28]	; (80060f4 <ETH_PHY_IO_WriteReg+0x30>)
 80060d8:	f7fb ffe3 	bl	80020a2 <HAL_ETH_WritePHYRegister>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d002      	beq.n	80060e8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80060e2:	f04f 33ff 	mov.w	r3, #4294967295
 80060e6:	e000      	b.n	80060ea <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80060e8:	2300      	movs	r3, #0
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}
 80060f2:	bf00      	nop
 80060f4:	20005410 	.word	0x20005410

080060f8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80060fc:	f7fb fa24 	bl	8001548 <HAL_GetTick>
 8006100:	4603      	mov	r3, r0
}
 8006102:	4618      	mov	r0, r3
 8006104:	bd80      	pop	{r7, pc}
	...

08006108 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b0a0      	sub	sp, #128	; 0x80
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006110:	f107 0308 	add.w	r3, r7, #8
 8006114:	2264      	movs	r2, #100	; 0x64
 8006116:	2100      	movs	r1, #0
 8006118:	4618      	mov	r0, r3
 800611a:	f011 feac 	bl	8017e76 <memset>
  int32_t PHYLinkState = 0;
 800611e:	2300      	movs	r3, #0
 8006120:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006126:	2300      	movs	r3, #0
 8006128:	67bb      	str	r3, [r7, #120]	; 0x78
 800612a:	2300      	movs	r3, #0
 800612c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006132:	483a      	ldr	r0, [pc, #232]	; (800621c <ethernet_link_thread+0x114>)
 8006134:	f7fb f95f 	bl	80013f6 <LAN8742_GetLinkState>
 8006138:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800613a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800613c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00c      	beq.n	8006166 <ethernet_link_thread+0x5e>
 800614c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800614e:	2b01      	cmp	r3, #1
 8006150:	dc09      	bgt.n	8006166 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006152:	4833      	ldr	r0, [pc, #204]	; (8006220 <ethernet_link_thread+0x118>)
 8006154:	f7fb fc14 	bl	8001980 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006158:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800615a:	f005 fc95 	bl	800ba88 <netif_set_down>
    netif_set_link_down(netif);
 800615e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006160:	f005 fcfc 	bl	800bb5c <netif_set_link_down>
 8006164:	e055      	b.n	8006212 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b00      	cmp	r3, #0
 8006172:	d14e      	bne.n	8006212 <ethernet_link_thread+0x10a>
 8006174:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006176:	2b01      	cmp	r3, #1
 8006178:	dd4b      	ble.n	8006212 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800617a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617c:	3b02      	subs	r3, #2
 800617e:	2b03      	cmp	r3, #3
 8006180:	d82a      	bhi.n	80061d8 <ethernet_link_thread+0xd0>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <ethernet_link_thread+0x80>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	08006199 	.word	0x08006199
 800618c:	080061ab 	.word	0x080061ab
 8006190:	080061bb 	.word	0x080061bb
 8006194:	080061cb 	.word	0x080061cb
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800619c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800619e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061a4:	2301      	movs	r3, #1
 80061a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061a8:	e017      	b.n	80061da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061aa:	2300      	movs	r3, #0
 80061ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80061ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061b4:	2301      	movs	r3, #1
 80061b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061b8:	e00f      	b.n	80061da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80061ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061be:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80061c0:	2300      	movs	r3, #0
 80061c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061c4:	2301      	movs	r3, #1
 80061c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061c8:	e007      	b.n	80061da <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061ca:	2300      	movs	r3, #0
 80061cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80061ce:	2300      	movs	r3, #0
 80061d0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061d2:	2301      	movs	r3, #1
 80061d4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061d6:	e000      	b.n	80061da <ethernet_link_thread+0xd2>
    default:
      break;
 80061d8:	bf00      	nop
    }

    if(linkchanged)
 80061da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d018      	beq.n	8006212 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80061e0:	f107 0308 	add.w	r3, r7, #8
 80061e4:	4619      	mov	r1, r3
 80061e6:	480e      	ldr	r0, [pc, #56]	; (8006220 <ethernet_link_thread+0x118>)
 80061e8:	f7fb ffa4 	bl	8002134 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80061ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061ee:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80061f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80061f4:	f107 0308 	add.w	r3, r7, #8
 80061f8:	4619      	mov	r1, r3
 80061fa:	4809      	ldr	r0, [pc, #36]	; (8006220 <ethernet_link_thread+0x118>)
 80061fc:	f7fc f884 	bl	8002308 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006200:	4807      	ldr	r0, [pc, #28]	; (8006220 <ethernet_link_thread+0x118>)
 8006202:	f7fb fb2f 	bl	8001864 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006206:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006208:	f005 fbd2 	bl	800b9b0 <netif_set_up>
      netif_set_link_up(netif);
 800620c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800620e:	f005 fc6d 	bl	800baec <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006212:	2064      	movs	r0, #100	; 0x64
 8006214:	f000 f910 	bl	8006438 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006218:	e78b      	b.n	8006132 <ethernet_link_thread+0x2a>
 800621a:	bf00      	nop
 800621c:	200054f8 	.word	0x200054f8
 8006220:	20005410 	.word	0x20005410

08006224 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af02      	add	r7, sp, #8
 800622a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800622c:	4812      	ldr	r0, [pc, #72]	; (8006278 <HAL_ETH_RxAllocateCallback+0x54>)
 800622e:	f005 f92b 	bl	800b488 <memp_malloc_pool>
 8006232:	60f8      	str	r0, [r7, #12]
  if (p)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d014      	beq.n	8006264 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f103 0220 	add.w	r2, r3, #32
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	4a0d      	ldr	r2, [pc, #52]	; (800627c <HAL_ETH_RxAllocateCallback+0x58>)
 8006248:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006252:	9201      	str	r2, [sp, #4]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2241      	movs	r2, #65	; 0x41
 800625a:	2100      	movs	r1, #0
 800625c:	2000      	movs	r0, #0
 800625e:	f005 fea1 	bl	800bfa4 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006262:	e005      	b.n	8006270 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006264:	4b06      	ldr	r3, [pc, #24]	; (8006280 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006266:	2201      	movs	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
}
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	0801bee0 	.word	0x0801bee0
 800627c:	08005e9d 	.word	0x08005e9d
 8006280:	20005404 	.word	0x20005404

08006284 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b088      	sub	sp, #32
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3b20      	subs	r3, #32
 80062a2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	2200      	movs	r2, #0
 80062ae:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	887a      	ldrh	r2, [r7, #2]
 80062b4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e003      	b.n	80062ce <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	69fa      	ldr	r2, [r7, #28]
 80062cc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	61fb      	str	r3, [r7, #28]
 80062da:	e009      	b.n	80062f0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	891a      	ldrh	r2, [r3, #8]
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	4413      	add	r3, r2
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f2      	bne.n	80062dc <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80062f6:	887b      	ldrh	r3, [r7, #2]
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff fb2e 	bl	800595c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006300:	bf00      	nop
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b082      	sub	sp, #8
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f006 f801 	bl	800c318 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800631e:	b480      	push	{r7}
 8006320:	b085      	sub	sp, #20
 8006322:	af00      	add	r7, sp, #0
 8006324:	4603      	mov	r3, r0
 8006326:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006328:	2300      	movs	r3, #0
 800632a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800632c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006330:	2b84      	cmp	r3, #132	; 0x84
 8006332:	d005      	beq.n	8006340 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006334:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	3303      	adds	r3, #3
 800633e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006354:	f3ef 8305 	mrs	r3, IPSR
 8006358:	607b      	str	r3, [r7, #4]
  return(result);
 800635a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800635c:	2b00      	cmp	r3, #0
 800635e:	bf14      	ite	ne
 8006360:	2301      	movne	r3, #1
 8006362:	2300      	moveq	r3, #0
 8006364:	b2db      	uxtb	r3, r3
}
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006376:	f001 fc73 	bl	8007c60 <vTaskStartScheduler>
  
  return osOK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	bd80      	pop	{r7, pc}

08006380 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006384:	f7ff ffe3 	bl	800634e <inHandlerMode>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d003      	beq.n	8006396 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800638e:	f001 fd87 	bl	8007ea0 <xTaskGetTickCountFromISR>
 8006392:	4603      	mov	r3, r0
 8006394:	e002      	b.n	800639c <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006396:	f001 fd73 	bl	8007e80 <xTaskGetTickCount>
 800639a:	4603      	mov	r3, r0
  }
}
 800639c:	4618      	mov	r0, r3
 800639e:	bd80      	pop	{r7, pc}

080063a0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063a2:	b089      	sub	sp, #36	; 0x24
 80063a4:	af04      	add	r7, sp, #16
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695b      	ldr	r3, [r3, #20]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d020      	beq.n	80063f4 <osThreadCreate+0x54>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d01c      	beq.n	80063f4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	685c      	ldr	r4, [r3, #4]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	691e      	ldr	r6, [r3, #16]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff ffa6 	bl	800631e <makeFreeRtosPriority>
 80063d2:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063dc:	9202      	str	r2, [sp, #8]
 80063de:	9301      	str	r3, [sp, #4]
 80063e0:	9100      	str	r1, [sp, #0]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	4632      	mov	r2, r6
 80063e6:	4629      	mov	r1, r5
 80063e8:	4620      	mov	r0, r4
 80063ea:	f001 fa67 	bl	80078bc <xTaskCreateStatic>
 80063ee:	4603      	mov	r3, r0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	e01c      	b.n	800642e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685c      	ldr	r4, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006400:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006408:	4618      	mov	r0, r3
 800640a:	f7ff ff88 	bl	800631e <makeFreeRtosPriority>
 800640e:	4602      	mov	r2, r0
 8006410:	f107 030c 	add.w	r3, r7, #12
 8006414:	9301      	str	r3, [sp, #4]
 8006416:	9200      	str	r2, [sp, #0]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	4632      	mov	r2, r6
 800641c:	4629      	mov	r1, r5
 800641e:	4620      	mov	r0, r4
 8006420:	f001 faaf 	bl	8007982 <xTaskCreate>
 8006424:	4603      	mov	r3, r0
 8006426:	2b01      	cmp	r3, #1
 8006428:	d001      	beq.n	800642e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800642a:	2300      	movs	r3, #0
 800642c:	e000      	b.n	8006430 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800642e:	68fb      	ldr	r3, [r7, #12]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006438 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <osDelay+0x16>
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	e000      	b.n	8006450 <osDelay+0x18>
 800644e:	2301      	movs	r3, #1
 8006450:	4618      	mov	r0, r3
 8006452:	f001 fbcf 	bl	8007bf4 <vTaskDelay>
  
  return osOK;
 8006456:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b082      	sub	sp, #8
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4619      	mov	r1, r3
 8006476:	2001      	movs	r0, #1
 8006478:	f000 fc21 	bl	8006cbe <xQueueCreateMutexStatic>
 800647c:	4603      	mov	r3, r0
 800647e:	e003      	b.n	8006488 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006480:	2001      	movs	r0, #1
 8006482:	f000 fc04 	bl	8006c8e <xQueueCreateMutex>
 8006486:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006488:	4618      	mov	r0, r3
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}

08006490 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <osMutexWait+0x18>
    return osErrorParameter;
 80064a4:	2380      	movs	r3, #128	; 0x80
 80064a6:	e03a      	b.n	800651e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b2:	d103      	bne.n	80064bc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	60fb      	str	r3, [r7, #12]
 80064ba:	e009      	b.n	80064d0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d006      	beq.n	80064d0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <osMutexWait+0x40>
      ticks = 1;
 80064cc:	2301      	movs	r3, #1
 80064ce:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80064d0:	f7ff ff3d 	bl	800634e <inHandlerMode>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d017      	beq.n	800650a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80064da:	f107 0308 	add.w	r3, r7, #8
 80064de:	461a      	mov	r2, r3
 80064e0:	2100      	movs	r1, #0
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 f83c 	bl	8007560 <xQueueReceiveFromISR>
 80064e8:	4603      	mov	r3, r0
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d001      	beq.n	80064f2 <osMutexWait+0x62>
      return osErrorOS;
 80064ee:	23ff      	movs	r3, #255	; 0xff
 80064f0:	e015      	b.n	800651e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d011      	beq.n	800651c <osMutexWait+0x8c>
 80064f8:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <osMutexWait+0x98>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	e008      	b.n	800651c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800650a:	68f9      	ldr	r1, [r7, #12]
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f000 ff13 	bl	8007338 <xQueueSemaphoreTake>
 8006512:	4603      	mov	r3, r0
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <osMutexWait+0x8c>
    return osErrorOS;
 8006518:	23ff      	movs	r3, #255	; 0xff
 800651a:	e000      	b.n	800651e <osMutexWait+0x8e>
  }
  
  return osOK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	e000ed04 	.word	0xe000ed04

0800652c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006534:	2300      	movs	r3, #0
 8006536:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006538:	2300      	movs	r3, #0
 800653a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800653c:	f7ff ff07 	bl	800634e <inHandlerMode>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d016      	beq.n	8006574 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006546:	f107 0308 	add.w	r3, r7, #8
 800654a:	4619      	mov	r1, r3
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fd77 	bl	8007040 <xQueueGiveFromISR>
 8006552:	4603      	mov	r3, r0
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <osMutexRelease+0x30>
      return osErrorOS;
 8006558:	23ff      	movs	r3, #255	; 0xff
 800655a:	e017      	b.n	800658c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d013      	beq.n	800658a <osMutexRelease+0x5e>
 8006562:	4b0c      	ldr	r3, [pc, #48]	; (8006594 <osMutexRelease+0x68>)
 8006564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	e00a      	b.n	800658a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006574:	2300      	movs	r3, #0
 8006576:	2200      	movs	r2, #0
 8006578:	2100      	movs	r1, #0
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 fbba 	bl	8006cf4 <xQueueGenericSend>
 8006580:	4603      	mov	r3, r0
 8006582:	2b01      	cmp	r3, #1
 8006584:	d001      	beq.n	800658a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006586:	23ff      	movs	r3, #255	; 0xff
 8006588:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800658a:	68fb      	ldr	r3, [r7, #12]
}
 800658c:	4618      	mov	r0, r3
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	e000ed04 	.word	0xe000ed04

08006598 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d101      	bne.n	80065b0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	e03a      	b.n	8006626 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ba:	d103      	bne.n	80065c4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80065bc:	f04f 33ff 	mov.w	r3, #4294967295
 80065c0:	60fb      	str	r3, [r7, #12]
 80065c2:	e009      	b.n	80065d8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d006      	beq.n	80065d8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d101      	bne.n	80065d8 <osSemaphoreWait+0x40>
      ticks = 1;
 80065d4:	2301      	movs	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80065d8:	f7ff feb9 	bl	800634e <inHandlerMode>
 80065dc:	4603      	mov	r3, r0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d017      	beq.n	8006612 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80065e2:	f107 0308 	add.w	r3, r7, #8
 80065e6:	461a      	mov	r2, r3
 80065e8:	2100      	movs	r1, #0
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 ffb8 	bl	8007560 <xQueueReceiveFromISR>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d001      	beq.n	80065fa <osSemaphoreWait+0x62>
      return osErrorOS;
 80065f6:	23ff      	movs	r3, #255	; 0xff
 80065f8:	e015      	b.n	8006626 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d011      	beq.n	8006624 <osSemaphoreWait+0x8c>
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <osSemaphoreWait+0x98>)
 8006602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	e008      	b.n	8006624 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8006612:	68f9      	ldr	r1, [r7, #12]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f000 fe8f 	bl	8007338 <xQueueSemaphoreTake>
 800661a:	4603      	mov	r3, r0
 800661c:	2b01      	cmp	r3, #1
 800661e:	d001      	beq.n	8006624 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8006620:	23ff      	movs	r3, #255	; 0xff
 8006622:	e000      	b.n	8006626 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3710      	adds	r7, #16
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	e000ed04 	.word	0xe000ed04

08006634 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800663c:	2300      	movs	r3, #0
 800663e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006640:	2300      	movs	r3, #0
 8006642:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8006644:	f7ff fe83 	bl	800634e <inHandlerMode>
 8006648:	4603      	mov	r3, r0
 800664a:	2b00      	cmp	r3, #0
 800664c:	d016      	beq.n	800667c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800664e:	f107 0308 	add.w	r3, r7, #8
 8006652:	4619      	mov	r1, r3
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fcf3 	bl	8007040 <xQueueGiveFromISR>
 800665a:	4603      	mov	r3, r0
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8006660:	23ff      	movs	r3, #255	; 0xff
 8006662:	e017      	b.n	8006694 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d013      	beq.n	8006692 <osSemaphoreRelease+0x5e>
 800666a:	4b0c      	ldr	r3, [pc, #48]	; (800669c <osSemaphoreRelease+0x68>)
 800666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006670:	601a      	str	r2, [r3, #0]
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	f3bf 8f6f 	isb	sy
 800667a:	e00a      	b.n	8006692 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800667c:	2300      	movs	r3, #0
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb36 	bl	8006cf4 <xQueueGenericSend>
 8006688:	4603      	mov	r3, r0
 800668a:	2b01      	cmp	r3, #1
 800668c:	d001      	beq.n	8006692 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800668e:	23ff      	movs	r3, #255	; 0xff
 8006690:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8006692:	68fb      	ldr	r3, [r7, #12]
}
 8006694:	4618      	mov	r0, r3
 8006696:	3710      	adds	r7, #16
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	e000ed04 	.word	0xe000ed04

080066a0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af02      	add	r7, sp, #8
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d011      	beq.n	80066d6 <osMessageCreate+0x36>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00d      	beq.n	80066d6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6818      	ldr	r0, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6859      	ldr	r1, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	689a      	ldr	r2, [r3, #8]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	2400      	movs	r4, #0
 80066cc:	9400      	str	r4, [sp, #0]
 80066ce:	f000 f9e1 	bl	8006a94 <xQueueGenericCreateStatic>
 80066d2:	4603      	mov	r3, r0
 80066d4:	e008      	b.n	80066e8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	4619      	mov	r1, r3
 80066e2:	f000 fa59 	bl	8006b98 <xQueueGenericCreate>
 80066e6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd90      	pop	{r4, r7, pc}

080066f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b086      	sub	sp, #24
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <osMessagePut+0x1e>
    ticks = 1;
 800670a:	2301      	movs	r3, #1
 800670c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800670e:	f7ff fe1e 	bl	800634e <inHandlerMode>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d018      	beq.n	800674a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006718:	f107 0210 	add.w	r2, r7, #16
 800671c:	f107 0108 	add.w	r1, r7, #8
 8006720:	2300      	movs	r3, #0
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f000 fbec 	bl	8006f00 <xQueueGenericSendFromISR>
 8006728:	4603      	mov	r3, r0
 800672a:	2b01      	cmp	r3, #1
 800672c:	d001      	beq.n	8006732 <osMessagePut+0x42>
      return osErrorOS;
 800672e:	23ff      	movs	r3, #255	; 0xff
 8006730:	e018      	b.n	8006764 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d014      	beq.n	8006762 <osMessagePut+0x72>
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <osMessagePut+0x7c>)
 800673a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	f3bf 8f6f 	isb	sy
 8006748:	e00b      	b.n	8006762 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800674a:	f107 0108 	add.w	r1, r7, #8
 800674e:	2300      	movs	r3, #0
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 face 	bl	8006cf4 <xQueueGenericSend>
 8006758:	4603      	mov	r3, r0
 800675a:	2b01      	cmp	r3, #1
 800675c:	d001      	beq.n	8006762 <osMessagePut+0x72>
      return osErrorOS;
 800675e:	23ff      	movs	r3, #255	; 0xff
 8006760:	e000      	b.n	8006764 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	e000ed04 	.word	0xe000ed04

08006770 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8006770:	b590      	push	{r4, r7, lr}
 8006772:	b08b      	sub	sp, #44	; 0x2c
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800678a:	2380      	movs	r3, #128	; 0x80
 800678c:	617b      	str	r3, [r7, #20]
    return event;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	461c      	mov	r4, r3
 8006792:	f107 0314 	add.w	r3, r7, #20
 8006796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800679a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800679e:	e054      	b.n	800684a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80067a0:	2300      	movs	r3, #0
 80067a2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80067a4:	2300      	movs	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ae:	d103      	bne.n	80067b8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80067b0:	f04f 33ff 	mov.w	r3, #4294967295
 80067b4:	627b      	str	r3, [r7, #36]	; 0x24
 80067b6:	e009      	b.n	80067cc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d006      	beq.n	80067cc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80067c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <osMessageGet+0x5c>
      ticks = 1;
 80067c8:	2301      	movs	r3, #1
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80067cc:	f7ff fdbf 	bl	800634e <inHandlerMode>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d01c      	beq.n	8006810 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80067d6:	f107 0220 	add.w	r2, r7, #32
 80067da:	f107 0314 	add.w	r3, r7, #20
 80067de:	3304      	adds	r3, #4
 80067e0:	4619      	mov	r1, r3
 80067e2:	68b8      	ldr	r0, [r7, #8]
 80067e4:	f000 febc 	bl	8007560 <xQueueReceiveFromISR>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d102      	bne.n	80067f4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80067ee:	2310      	movs	r3, #16
 80067f0:	617b      	str	r3, [r7, #20]
 80067f2:	e001      	b.n	80067f8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d01d      	beq.n	800683a <osMessageGet+0xca>
 80067fe:	4b15      	ldr	r3, [pc, #84]	; (8006854 <osMessageGet+0xe4>)
 8006800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	e014      	b.n	800683a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8006810:	f107 0314 	add.w	r3, r7, #20
 8006814:	3304      	adds	r3, #4
 8006816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006818:	4619      	mov	r1, r3
 800681a:	68b8      	ldr	r0, [r7, #8]
 800681c:	f000 fca6 	bl	800716c <xQueueReceive>
 8006820:	4603      	mov	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d102      	bne.n	800682c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006826:	2310      	movs	r3, #16
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	e006      	b.n	800683a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d101      	bne.n	8006836 <osMessageGet+0xc6>
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <osMessageGet+0xc8>
 8006836:	2340      	movs	r3, #64	; 0x40
 8006838:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	461c      	mov	r4, r3
 800683e:	f107 0314 	add.w	r3, r7, #20
 8006842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006846:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	372c      	adds	r7, #44	; 0x2c
 800684e:	46bd      	mov	sp, r7
 8006850:	bd90      	pop	{r4, r7, pc}
 8006852:	bf00      	nop
 8006854:	e000ed04 	.word	0xe000ed04

08006858 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f103 0208 	add.w	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f103 0208 	add.w	r2, r3, #8
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f103 0208 	add.w	r2, r3, #8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80068a6:	bf00      	nop
 80068a8:	370c      	adds	r7, #12
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068b2:	b480      	push	{r7}
 80068b4:	b085      	sub	sp, #20
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	6078      	str	r0, [r7, #4]
 80068ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	689a      	ldr	r2, [r3, #8]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	601a      	str	r2, [r3, #0]
}
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
 8006902:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006910:	d103      	bne.n	800691a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	e00c      	b.n	8006934 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3308      	adds	r3, #8
 800691e:	60fb      	str	r3, [r7, #12]
 8006920:	e002      	b.n	8006928 <vListInsert+0x2e>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	68ba      	ldr	r2, [r7, #8]
 8006930:	429a      	cmp	r2, r3
 8006932:	d2f6      	bcs.n	8006922 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	601a      	str	r2, [r3, #0]
}
 8006960:	bf00      	nop
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800696c:	b480      	push	{r7}
 800696e:	b085      	sub	sp, #20
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	6892      	ldr	r2, [r2, #8]
 8006982:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	6852      	ldr	r2, [r2, #4]
 800698c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	429a      	cmp	r2, r3
 8006996:	d103      	bne.n	80069a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689a      	ldr	r2, [r3, #8]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3714      	adds	r7, #20
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d10c      	bne.n	80069ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	b672      	cpsid	i
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	b662      	cpsie	i
 80069e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80069ea:	bf00      	nop
 80069ec:	e7fe      	b.n	80069ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80069ee:	f002 f8b5 	bl	8008b5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fa:	68f9      	ldr	r1, [r7, #12]
 80069fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80069fe:	fb01 f303 	mul.w	r3, r1, r3
 8006a02:	441a      	add	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	68f9      	ldr	r1, [r7, #12]
 8006a22:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	441a      	add	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	22ff      	movs	r2, #255	; 0xff
 8006a32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	22ff      	movs	r2, #255	; 0xff
 8006a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d114      	bne.n	8006a6e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01a      	beq.n	8006a82 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	3310      	adds	r3, #16
 8006a50:	4618      	mov	r0, r3
 8006a52:	f001 fb75 	bl	8008140 <xTaskRemoveFromEventList>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d012      	beq.n	8006a82 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006a5c:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <xQueueGenericReset+0xd0>)
 8006a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a62:	601a      	str	r2, [r3, #0]
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	e009      	b.n	8006a82 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3310      	adds	r3, #16
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7ff fef0 	bl	8006858 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff feeb 	bl	8006858 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006a82:	f002 f89f 	bl	8008bc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006a86:	2301      	movs	r3, #1
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af02      	add	r7, sp, #8
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	b672      	cpsid	i
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	b662      	cpsie	i
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10c      	bne.n	8006ae2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006acc:	b672      	cpsid	i
 8006ace:	f383 8811 	msr	BASEPRI, r3
 8006ad2:	f3bf 8f6f 	isb	sy
 8006ad6:	f3bf 8f4f 	dsb	sy
 8006ada:	b662      	cpsie	i
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ade:	bf00      	nop
 8006ae0:	e7fe      	b.n	8006ae0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <xQueueGenericCreateStatic+0x5a>
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <xQueueGenericCreateStatic+0x5e>
 8006aee:	2301      	movs	r3, #1
 8006af0:	e000      	b.n	8006af4 <xQueueGenericCreateStatic+0x60>
 8006af2:	2300      	movs	r3, #0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10c      	bne.n	8006b12 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	b672      	cpsid	i
 8006afe:	f383 8811 	msr	BASEPRI, r3
 8006b02:	f3bf 8f6f 	isb	sy
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	b662      	cpsie	i
 8006b0c:	623b      	str	r3, [r7, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d102      	bne.n	8006b1e <xQueueGenericCreateStatic+0x8a>
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <xQueueGenericCreateStatic+0x8e>
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e000      	b.n	8006b24 <xQueueGenericCreateStatic+0x90>
 8006b22:	2300      	movs	r3, #0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10c      	bne.n	8006b42 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	b672      	cpsid	i
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	b662      	cpsie	i
 8006b3c:	61fb      	str	r3, [r7, #28]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006b42:	2348      	movs	r3, #72	; 0x48
 8006b44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	2b48      	cmp	r3, #72	; 0x48
 8006b4a:	d00c      	beq.n	8006b66 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	b672      	cpsid	i
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	b662      	cpsie	i
 8006b60:	61bb      	str	r3, [r7, #24]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00d      	beq.n	8006b8e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b74:	2201      	movs	r2, #1
 8006b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006b7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	4613      	mov	r3, r2
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	68b9      	ldr	r1, [r7, #8]
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f847 	bl	8006c1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3730      	adds	r7, #48	; 0x30
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d10c      	bne.n	8006bc6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	b672      	cpsid	i
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	b662      	cpsie	i
 8006bc0:	613b      	str	r3, [r7, #16]
}
 8006bc2:	bf00      	nop
 8006bc4:	e7fe      	b.n	8006bc4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	e004      	b.n	8006bdc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	3348      	adds	r3, #72	; 0x48
 8006be0:	4618      	mov	r0, r3
 8006be2:	f002 f8e7 	bl	8008db4 <pvPortMalloc>
 8006be6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d011      	beq.n	8006c12 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	3348      	adds	r3, #72	; 0x48
 8006bf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c00:	79fa      	ldrb	r2, [r7, #7]
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f805 	bl	8006c1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c12:	69bb      	ldr	r3, [r7, #24]
	}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d103      	bne.n	8006c38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	601a      	str	r2, [r3, #0]
 8006c36:	e002      	b.n	8006c3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	687a      	ldr	r2, [r7, #4]
 8006c3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c4a:	2101      	movs	r1, #1
 8006c4c:	69b8      	ldr	r0, [r7, #24]
 8006c4e:	f7ff feb7 	bl	80069c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b082      	sub	sp, #8
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00e      	beq.n	8006c86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f837 	bl	8006cf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006c86:	bf00      	nop
 8006c88:	3708      	adds	r7, #8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b086      	sub	sp, #24
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	4603      	mov	r3, r0
 8006c96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006ca0:	79fb      	ldrb	r3, [r7, #7]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6939      	ldr	r1, [r7, #16]
 8006ca6:	6978      	ldr	r0, [r7, #20]
 8006ca8:	f7ff ff76 	bl	8006b98 <xQueueGenericCreate>
 8006cac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7ff ffd3 	bl	8006c5a <prvInitialiseMutex>

		return xNewQueue;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
	}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3718      	adds	r7, #24
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006cbe:	b580      	push	{r7, lr}
 8006cc0:	b088      	sub	sp, #32
 8006cc2:	af02      	add	r7, sp, #8
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	6039      	str	r1, [r7, #0]
 8006cc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	6939      	ldr	r1, [r7, #16]
 8006cdc:	6978      	ldr	r0, [r7, #20]
 8006cde:	f7ff fed9 	bl	8006a94 <xQueueGenericCreateStatic>
 8006ce2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f7ff ffb8 	bl	8006c5a <prvInitialiseMutex>

		return xNewQueue;
 8006cea:	68fb      	ldr	r3, [r7, #12]
	}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08e      	sub	sp, #56	; 0x38
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006d02:	2300      	movs	r3, #0
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10c      	bne.n	8006d2a <xQueueGenericSend+0x36>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d14:	b672      	cpsid	i
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	b662      	cpsie	i
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <xQueueGenericSend+0x44>
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <xQueueGenericSend+0x48>
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e000      	b.n	8006d3e <xQueueGenericSend+0x4a>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10c      	bne.n	8006d5c <xQueueGenericSend+0x68>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	b672      	cpsid	i
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	b662      	cpsie	i
 8006d56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d58:	bf00      	nop
 8006d5a:	e7fe      	b.n	8006d5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d103      	bne.n	8006d6a <xQueueGenericSend+0x76>
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <xQueueGenericSend+0x7a>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e000      	b.n	8006d70 <xQueueGenericSend+0x7c>
 8006d6e:	2300      	movs	r3, #0
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10c      	bne.n	8006d8e <xQueueGenericSend+0x9a>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	b672      	cpsid	i
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	b662      	cpsie	i
 8006d88:	623b      	str	r3, [r7, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d8e:	f001 fb9b 	bl	80084c8 <xTaskGetSchedulerState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <xQueueGenericSend+0xaa>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <xQueueGenericSend+0xae>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <xQueueGenericSend+0xb0>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10c      	bne.n	8006dc2 <xQueueGenericSend+0xce>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	b672      	cpsid	i
 8006dae:	f383 8811 	msr	BASEPRI, r3
 8006db2:	f3bf 8f6f 	isb	sy
 8006db6:	f3bf 8f4f 	dsb	sy
 8006dba:	b662      	cpsie	i
 8006dbc:	61fb      	str	r3, [r7, #28]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dc2:	f001 fecb 	bl	8008b5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <xQueueGenericSend+0xe4>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d129      	bne.n	8006e2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	68b9      	ldr	r1, [r7, #8]
 8006ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006dde:	f000 fc5d 	bl	800769c <prvCopyDataToQueue>
 8006de2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d010      	beq.n	8006e0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dee:	3324      	adds	r3, #36	; 0x24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f001 f9a5 	bl	8008140 <xTaskRemoveFromEventList>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d013      	beq.n	8006e24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <xQueueGenericSend+0x208>)
 8006dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	f3bf 8f6f 	isb	sy
 8006e0c:	e00a      	b.n	8006e24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d007      	beq.n	8006e24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006e14:	4b39      	ldr	r3, [pc, #228]	; (8006efc <xQueueGenericSend+0x208>)
 8006e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006e24:	f001 fece 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e063      	b.n	8006ef4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d103      	bne.n	8006e3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e32:	f001 fec7 	bl	8008bc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e05c      	b.n	8006ef4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d106      	bne.n	8006e4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e40:	f107 0314 	add.w	r3, r7, #20
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f9df 	bl	8008208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e4e:	f001 feb9 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e52:	f000 ff69 	bl	8007d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e56:	f001 fe81 	bl	8008b5c <vPortEnterCritical>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e66:	d103      	bne.n	8006e70 <xQueueGenericSend+0x17c>
 8006e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7c:	d103      	bne.n	8006e86 <xQueueGenericSend+0x192>
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e86:	f001 fe9d 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e8a:	1d3a      	adds	r2, r7, #4
 8006e8c:	f107 0314 	add.w	r3, r7, #20
 8006e90:	4611      	mov	r1, r2
 8006e92:	4618      	mov	r0, r3
 8006e94:	f001 f9ce 	bl	8008234 <xTaskCheckForTimeOut>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d124      	bne.n	8006ee8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ea0:	f000 fcf4 	bl	800788c <prvIsQueueFull>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d018      	beq.n	8006edc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	3310      	adds	r3, #16
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 f91e 	bl	80080f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eba:	f000 fc7f 	bl	80077bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006ebe:	f000 ff41 	bl	8007d44 <xTaskResumeAll>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f47f af7c 	bne.w	8006dc2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8006eca:	4b0c      	ldr	r3, [pc, #48]	; (8006efc <xQueueGenericSend+0x208>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	e772      	b.n	8006dc2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ede:	f000 fc6d 	bl	80077bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ee2:	f000 ff2f 	bl	8007d44 <xTaskResumeAll>
 8006ee6:	e76c      	b.n	8006dc2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006eea:	f000 fc67 	bl	80077bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eee:	f000 ff29 	bl	8007d44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3738      	adds	r7, #56	; 0x38
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	e000ed04 	.word	0xe000ed04

08006f00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b08e      	sub	sp, #56	; 0x38
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	607a      	str	r2, [r7, #4]
 8006f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10c      	bne.n	8006f32 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	b672      	cpsid	i
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	b662      	cpsie	i
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d103      	bne.n	8006f40 <xQueueGenericSendFromISR+0x40>
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <xQueueGenericSendFromISR+0x44>
 8006f40:	2301      	movs	r3, #1
 8006f42:	e000      	b.n	8006f46 <xQueueGenericSendFromISR+0x46>
 8006f44:	2300      	movs	r3, #0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10c      	bne.n	8006f64 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	b672      	cpsid	i
 8006f50:	f383 8811 	msr	BASEPRI, r3
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	f3bf 8f4f 	dsb	sy
 8006f5c:	b662      	cpsie	i
 8006f5e:	623b      	str	r3, [r7, #32]
}
 8006f60:	bf00      	nop
 8006f62:	e7fe      	b.n	8006f62 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b02      	cmp	r3, #2
 8006f68:	d103      	bne.n	8006f72 <xQueueGenericSendFromISR+0x72>
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <xQueueGenericSendFromISR+0x76>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <xQueueGenericSendFromISR+0x78>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10c      	bne.n	8006f96 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f80:	b672      	cpsid	i
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	b662      	cpsie	i
 8006f90:	61fb      	str	r3, [r7, #28]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f96:	f001 fec9 	bl	8008d2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f9a:	f3ef 8211 	mrs	r2, BASEPRI
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	b672      	cpsid	i
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	b662      	cpsie	i
 8006fb2:	61ba      	str	r2, [r7, #24]
 8006fb4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006fb6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d302      	bcc.n	8006fcc <xQueueGenericSendFromISR+0xcc>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d12c      	bne.n	8007026 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006fd6:	683a      	ldr	r2, [r7, #0]
 8006fd8:	68b9      	ldr	r1, [r7, #8]
 8006fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fdc:	f000 fb5e 	bl	800769c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fe0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe8:	d112      	bne.n	8007010 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d016      	beq.n	8007020 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f001 f8a2 	bl	8008140 <xTaskRemoveFromEventList>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d00e      	beq.n	8007020 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
 800700e:	e007      	b.n	8007020 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007010:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007014:	3301      	adds	r3, #1
 8007016:	b2db      	uxtb	r3, r3
 8007018:	b25a      	sxtb	r2, r3
 800701a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800701c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007020:	2301      	movs	r3, #1
 8007022:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007024:	e001      	b.n	800702a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007026:	2300      	movs	r3, #0
 8007028:	637b      	str	r3, [r7, #52]	; 0x34
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007034:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007038:	4618      	mov	r0, r3
 800703a:	3738      	adds	r7, #56	; 0x38
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08e      	sub	sp, #56	; 0x38
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10c      	bne.n	800706e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007058:	b672      	cpsid	i
 800705a:	f383 8811 	msr	BASEPRI, r3
 800705e:	f3bf 8f6f 	isb	sy
 8007062:	f3bf 8f4f 	dsb	sy
 8007066:	b662      	cpsie	i
 8007068:	623b      	str	r3, [r7, #32]
}
 800706a:	bf00      	nop
 800706c:	e7fe      	b.n	800706c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00c      	beq.n	8007090 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707a:	b672      	cpsid	i
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	b662      	cpsie	i
 800708a:	61fb      	str	r3, [r7, #28]
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <xQueueGiveFromISR+0x60>
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueGiveFromISR+0x64>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueGiveFromISR+0x66>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10c      	bne.n	80070c4 <xQueueGiveFromISR+0x84>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	b672      	cpsid	i
 80070b0:	f383 8811 	msr	BASEPRI, r3
 80070b4:	f3bf 8f6f 	isb	sy
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	b662      	cpsie	i
 80070be:	61bb      	str	r3, [r7, #24]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c4:	f001 fe32 	bl	8008d2c <vPortValidateInterruptPriority>
	__asm volatile
 80070c8:	f3ef 8211 	mrs	r2, BASEPRI
 80070cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d0:	b672      	cpsid	i
 80070d2:	f383 8811 	msr	BASEPRI, r3
 80070d6:	f3bf 8f6f 	isb	sy
 80070da:	f3bf 8f4f 	dsb	sy
 80070de:	b662      	cpsie	i
 80070e0:	617a      	str	r2, [r7, #20]
 80070e2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80070e4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ec:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d22b      	bcs.n	8007150 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007108:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800710a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d112      	bne.n	800713a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d016      	beq.n	800714a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800711c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711e:	3324      	adds	r3, #36	; 0x24
 8007120:	4618      	mov	r0, r3
 8007122:	f001 f80d 	bl	8008140 <xTaskRemoveFromEventList>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00e      	beq.n	800714a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2201      	movs	r2, #1
 8007136:	601a      	str	r2, [r3, #0]
 8007138:	e007      	b.n	800714a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800713a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800713e:	3301      	adds	r3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	b25a      	sxtb	r2, r3
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800714a:	2301      	movs	r3, #1
 800714c:	637b      	str	r3, [r7, #52]	; 0x34
 800714e:	e001      	b.n	8007154 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007150:	2300      	movs	r3, #0
 8007152:	637b      	str	r3, [r7, #52]	; 0x34
 8007154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007156:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f383 8811 	msr	BASEPRI, r3
}
 800715e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007162:	4618      	mov	r0, r3
 8007164:	3738      	adds	r7, #56	; 0x38
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b08c      	sub	sp, #48	; 0x30
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007178:	2300      	movs	r3, #0
 800717a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007182:	2b00      	cmp	r3, #0
 8007184:	d10c      	bne.n	80071a0 <xQueueReceive+0x34>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	b672      	cpsid	i
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	b662      	cpsie	i
 800719a:	623b      	str	r3, [r7, #32]
}
 800719c:	bf00      	nop
 800719e:	e7fe      	b.n	800719e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <xQueueReceive+0x42>
 80071a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <xQueueReceive+0x46>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <xQueueReceive+0x48>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <xQueueReceive+0x66>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	b672      	cpsid	i
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	b662      	cpsie	i
 80071cc:	61fb      	str	r3, [r7, #28]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071d2:	f001 f979 	bl	80084c8 <xTaskGetSchedulerState>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d102      	bne.n	80071e2 <xQueueReceive+0x76>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d101      	bne.n	80071e6 <xQueueReceive+0x7a>
 80071e2:	2301      	movs	r3, #1
 80071e4:	e000      	b.n	80071e8 <xQueueReceive+0x7c>
 80071e6:	2300      	movs	r3, #0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10c      	bne.n	8007206 <xQueueReceive+0x9a>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	b672      	cpsid	i
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	b662      	cpsie	i
 8007200:	61bb      	str	r3, [r7, #24]
}
 8007202:	bf00      	nop
 8007204:	e7fe      	b.n	8007204 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007206:	f001 fca9 	bl	8008b5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800720a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01f      	beq.n	8007256 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007216:	68b9      	ldr	r1, [r7, #8]
 8007218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800721a:	f000 faa9 	bl	8007770 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800721e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007220:	1e5a      	subs	r2, r3, #1
 8007222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007224:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800722e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007230:	3310      	adds	r3, #16
 8007232:	4618      	mov	r0, r3
 8007234:	f000 ff84 	bl	8008140 <xTaskRemoveFromEventList>
 8007238:	4603      	mov	r3, r0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d007      	beq.n	800724e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800723e:	4b3d      	ldr	r3, [pc, #244]	; (8007334 <xQueueReceive+0x1c8>)
 8007240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800724e:	f001 fcb9 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 8007252:	2301      	movs	r3, #1
 8007254:	e069      	b.n	800732a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d103      	bne.n	8007264 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800725c:	f001 fcb2 	bl	8008bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007260:	2300      	movs	r3, #0
 8007262:	e062      	b.n	800732a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 ffca 	bl	8008208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007274:	2301      	movs	r3, #1
 8007276:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007278:	f001 fca4 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800727c:	f000 fd54 	bl	8007d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007280:	f001 fc6c 	bl	8008b5c <vPortEnterCritical>
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800728a:	b25b      	sxtb	r3, r3
 800728c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007290:	d103      	bne.n	800729a <xQueueReceive+0x12e>
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a0:	b25b      	sxtb	r3, r3
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d103      	bne.n	80072b0 <xQueueReceive+0x144>
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072b0:	f001 fc88 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072b4:	1d3a      	adds	r2, r7, #4
 80072b6:	f107 0310 	add.w	r3, r7, #16
 80072ba:	4611      	mov	r1, r2
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 ffb9 	bl	8008234 <xTaskCheckForTimeOut>
 80072c2:	4603      	mov	r3, r0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d123      	bne.n	8007310 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072ca:	f000 fac9 	bl	8007860 <prvIsQueueEmpty>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d017      	beq.n	8007304 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d6:	3324      	adds	r3, #36	; 0x24
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	4611      	mov	r1, r2
 80072dc:	4618      	mov	r0, r3
 80072de:	f000 ff09 	bl	80080f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e4:	f000 fa6a 	bl	80077bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072e8:	f000 fd2c 	bl	8007d44 <xTaskResumeAll>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d189      	bne.n	8007206 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80072f2:	4b10      	ldr	r3, [pc, #64]	; (8007334 <xQueueReceive+0x1c8>)
 80072f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072f8:	601a      	str	r2, [r3, #0]
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	e780      	b.n	8007206 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007306:	f000 fa59 	bl	80077bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800730a:	f000 fd1b 	bl	8007d44 <xTaskResumeAll>
 800730e:	e77a      	b.n	8007206 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007312:	f000 fa53 	bl	80077bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007316:	f000 fd15 	bl	8007d44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800731a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800731c:	f000 faa0 	bl	8007860 <prvIsQueueEmpty>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	f43f af6f 	beq.w	8007206 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007328:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800732a:	4618      	mov	r0, r3
 800732c:	3730      	adds	r7, #48	; 0x30
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	e000ed04 	.word	0xe000ed04

08007338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b08e      	sub	sp, #56	; 0x38
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007342:	2300      	movs	r3, #0
 8007344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800734a:	2300      	movs	r3, #0
 800734c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10c      	bne.n	800736e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007358:	b672      	cpsid	i
 800735a:	f383 8811 	msr	BASEPRI, r3
 800735e:	f3bf 8f6f 	isb	sy
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	b662      	cpsie	i
 8007368:	623b      	str	r3, [r7, #32]
}
 800736a:	bf00      	nop
 800736c:	e7fe      	b.n	800736c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00c      	beq.n	8007390 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737a:	b672      	cpsid	i
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	b662      	cpsie	i
 800738a:	61fb      	str	r3, [r7, #28]
}
 800738c:	bf00      	nop
 800738e:	e7fe      	b.n	800738e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007390:	f001 f89a 	bl	80084c8 <xTaskGetSchedulerState>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d102      	bne.n	80073a0 <xQueueSemaphoreTake+0x68>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <xQueueSemaphoreTake+0x6c>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <xQueueSemaphoreTake+0x6e>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10c      	bne.n	80073c4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	b672      	cpsid	i
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	b662      	cpsie	i
 80073be:	61bb      	str	r3, [r7, #24]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073c4:	f001 fbca 	bl	8008b5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80073c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80073ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d024      	beq.n	800741e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80073d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d6:	1e5a      	subs	r2, r3, #1
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d104      	bne.n	80073ee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80073e4:	f001 fa36 	bl	8008854 <pvTaskIncrementMutexHeldCount>
 80073e8:	4602      	mov	r2, r0
 80073ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80073ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00f      	beq.n	8007416 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	3310      	adds	r3, #16
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 fea0 	bl	8008140 <xTaskRemoveFromEventList>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d007      	beq.n	8007416 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007406:	4b55      	ldr	r3, [pc, #340]	; (800755c <xQueueSemaphoreTake+0x224>)
 8007408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800740c:	601a      	str	r2, [r3, #0]
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007416:	f001 fbd5 	bl	8008bc4 <vPortExitCritical>
				return pdPASS;
 800741a:	2301      	movs	r3, #1
 800741c:	e099      	b.n	8007552 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d113      	bne.n	800744c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00c      	beq.n	8007444 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	b672      	cpsid	i
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	b662      	cpsie	i
 800743e:	617b      	str	r3, [r7, #20]
}
 8007440:	bf00      	nop
 8007442:	e7fe      	b.n	8007442 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007444:	f001 fbbe 	bl	8008bc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007448:	2300      	movs	r3, #0
 800744a:	e082      	b.n	8007552 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800744c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	d106      	bne.n	8007460 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007452:	f107 030c 	add.w	r3, r7, #12
 8007456:	4618      	mov	r0, r3
 8007458:	f000 fed6 	bl	8008208 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800745c:	2301      	movs	r3, #1
 800745e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007460:	f001 fbb0 	bl	8008bc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007464:	f000 fc60 	bl	8007d28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007468:	f001 fb78 	bl	8008b5c <vPortEnterCritical>
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007472:	b25b      	sxtb	r3, r3
 8007474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007478:	d103      	bne.n	8007482 <xQueueSemaphoreTake+0x14a>
 800747a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007488:	b25b      	sxtb	r3, r3
 800748a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800748e:	d103      	bne.n	8007498 <xQueueSemaphoreTake+0x160>
 8007490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007498:	f001 fb94 	bl	8008bc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800749c:	463a      	mov	r2, r7
 800749e:	f107 030c 	add.w	r3, r7, #12
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 fec5 	bl	8008234 <xTaskCheckForTimeOut>
 80074aa:	4603      	mov	r3, r0
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d132      	bne.n	8007516 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074b2:	f000 f9d5 	bl	8007860 <prvIsQueueEmpty>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d026      	beq.n	800750a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80074bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d109      	bne.n	80074d8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80074c4:	f001 fb4a 	bl	8008b5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80074c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f001 f819 	bl	8008504 <xTaskPriorityInherit>
 80074d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80074d4:	f001 fb76 	bl	8008bc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074da:	3324      	adds	r3, #36	; 0x24
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fe07 	bl	80080f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80074e8:	f000 f968 	bl	80077bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074ec:	f000 fc2a 	bl	8007d44 <xTaskResumeAll>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f47f af66 	bne.w	80073c4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80074f8:	4b18      	ldr	r3, [pc, #96]	; (800755c <xQueueSemaphoreTake+0x224>)
 80074fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	e75c      	b.n	80073c4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800750a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800750c:	f000 f956 	bl	80077bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007510:	f000 fc18 	bl	8007d44 <xTaskResumeAll>
 8007514:	e756      	b.n	80073c4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007518:	f000 f950 	bl	80077bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800751c:	f000 fc12 	bl	8007d44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007522:	f000 f99d 	bl	8007860 <prvIsQueueEmpty>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	f43f af4b 	beq.w	80073c4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00d      	beq.n	8007550 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007534:	f001 fb12 	bl	8008b5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800753a:	f000 f897 	bl	800766c <prvGetDisinheritPriorityAfterTimeout>
 800753e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007546:	4618      	mov	r0, r3
 8007548:	f001 f8e6 	bl	8008718 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800754c:	f001 fb3a 	bl	8008bc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007552:	4618      	mov	r0, r3
 8007554:	3738      	adds	r7, #56	; 0x38
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b08e      	sub	sp, #56	; 0x38
 8007564:	af00      	add	r7, sp, #0
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	60b9      	str	r1, [r7, #8]
 800756a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10c      	bne.n	8007590 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800757a:	b672      	cpsid	i
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	b662      	cpsie	i
 800758a:	623b      	str	r3, [r7, #32]
}
 800758c:	bf00      	nop
 800758e:	e7fe      	b.n	800758e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d103      	bne.n	800759e <xQueueReceiveFromISR+0x3e>
 8007596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <xQueueReceiveFromISR+0x42>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <xQueueReceiveFromISR+0x44>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10c      	bne.n	80075c2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	b672      	cpsid	i
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	b662      	cpsie	i
 80075bc:	61fb      	str	r3, [r7, #28]
}
 80075be:	bf00      	nop
 80075c0:	e7fe      	b.n	80075c0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075c2:	f001 fbb3 	bl	8008d2c <vPortValidateInterruptPriority>
	__asm volatile
 80075c6:	f3ef 8211 	mrs	r2, BASEPRI
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	61ba      	str	r2, [r7, #24]
 80075e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80075e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d02f      	beq.n	8007652 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075fc:	68b9      	ldr	r1, [r7, #8]
 80075fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007600:	f000 f8b6 	bl	8007770 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	1e5a      	subs	r2, r3, #1
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800760c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007614:	d112      	bne.n	800763c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d016      	beq.n	800764c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	3310      	adds	r3, #16
 8007622:	4618      	mov	r0, r3
 8007624:	f000 fd8c 	bl	8008140 <xTaskRemoveFromEventList>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d00e      	beq.n	800764c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00b      	beq.n	800764c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e007      	b.n	800764c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800763c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007640:	3301      	adds	r3, #1
 8007642:	b2db      	uxtb	r3, r3
 8007644:	b25a      	sxtb	r2, r3
 8007646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800764c:	2301      	movs	r3, #1
 800764e:	637b      	str	r3, [r7, #52]	; 0x34
 8007650:	e001      	b.n	8007656 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007652:	2300      	movs	r3, #0
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	613b      	str	r3, [r7, #16]
	__asm volatile
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f383 8811 	msr	BASEPRI, r3
}
 8007660:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007664:	4618      	mov	r0, r3
 8007666:	3738      	adds	r7, #56	; 0x38
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007678:	2b00      	cmp	r3, #0
 800767a:	d006      	beq.n	800768a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f1c3 0307 	rsb	r3, r3, #7
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	e001      	b.n	800768e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800768a:	2300      	movs	r3, #0
 800768c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800768e:	68fb      	ldr	r3, [r7, #12]
	}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10d      	bne.n	80076d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d14d      	bne.n	800775e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 ff9c 	bl	8008604 <xTaskPriorityDisinherit>
 80076cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	609a      	str	r2, [r3, #8]
 80076d4:	e043      	b.n	800775e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d119      	bne.n	8007710 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6858      	ldr	r0, [r3, #4]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	461a      	mov	r2, r3
 80076e6:	68b9      	ldr	r1, [r7, #8]
 80076e8:	f010 fc5e 	bl	8017fa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	441a      	add	r2, r3
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	429a      	cmp	r2, r3
 8007704:	d32b      	bcc.n	800775e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	605a      	str	r2, [r3, #4]
 800770e:	e026      	b.n	800775e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	68d8      	ldr	r0, [r3, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	461a      	mov	r2, r3
 800771a:	68b9      	ldr	r1, [r7, #8]
 800771c:	f010 fc44 	bl	8017fa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68da      	ldr	r2, [r3, #12]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007728:	425b      	negs	r3, r3
 800772a:	441a      	add	r2, r3
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68da      	ldr	r2, [r3, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d207      	bcs.n	800774c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	689a      	ldr	r2, [r3, #8]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	425b      	negs	r3, r3
 8007746:	441a      	add	r2, r3
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b02      	cmp	r3, #2
 8007750:	d105      	bne.n	800775e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	3b01      	subs	r3, #1
 800775c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007766:	697b      	ldr	r3, [r7, #20]
}
 8007768:	4618      	mov	r0, r3
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b082      	sub	sp, #8
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d018      	beq.n	80077b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68da      	ldr	r2, [r3, #12]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	441a      	add	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68da      	ldr	r2, [r3, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	689b      	ldr	r3, [r3, #8]
 8007798:	429a      	cmp	r2, r3
 800779a:	d303      	bcc.n	80077a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68d9      	ldr	r1, [r3, #12]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ac:	461a      	mov	r2, r3
 80077ae:	6838      	ldr	r0, [r7, #0]
 80077b0:	f010 fbfa 	bl	8017fa8 <memcpy>
	}
}
 80077b4:	bf00      	nop
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077c4:	f001 f9ca 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077d0:	e011      	b.n	80077f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d012      	beq.n	8007800 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3324      	adds	r3, #36	; 0x24
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 fcae 	bl	8008140 <xTaskRemoveFromEventList>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80077ea:	f000 fd89 	bl	8008300 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	dce9      	bgt.n	80077d2 <prvUnlockQueue+0x16>
 80077fe:	e000      	b.n	8007802 <prvUnlockQueue+0x46>
					break;
 8007800:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	22ff      	movs	r2, #255	; 0xff
 8007806:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800780a:	f001 f9db 	bl	8008bc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800780e:	f001 f9a5 	bl	8008b5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007818:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800781a:	e011      	b.n	8007840 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	691b      	ldr	r3, [r3, #16]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d012      	beq.n	800784a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3310      	adds	r3, #16
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fc89 	bl	8008140 <xTaskRemoveFromEventList>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007834:	f000 fd64 	bl	8008300 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007838:	7bbb      	ldrb	r3, [r7, #14]
 800783a:	3b01      	subs	r3, #1
 800783c:	b2db      	uxtb	r3, r3
 800783e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007840:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	dce9      	bgt.n	800781c <prvUnlockQueue+0x60>
 8007848:	e000      	b.n	800784c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800784a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	22ff      	movs	r2, #255	; 0xff
 8007850:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007854:	f001 f9b6 	bl	8008bc4 <vPortExitCritical>
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007868:	f001 f978 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	2b00      	cmp	r3, #0
 8007872:	d102      	bne.n	800787a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007874:	2301      	movs	r3, #1
 8007876:	60fb      	str	r3, [r7, #12]
 8007878:	e001      	b.n	800787e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800787a:	2300      	movs	r3, #0
 800787c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800787e:	f001 f9a1 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 8007882:	68fb      	ldr	r3, [r7, #12]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007894:	f001 f962 	bl	8008b5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d102      	bne.n	80078aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078a4:	2301      	movs	r3, #1
 80078a6:	60fb      	str	r3, [r7, #12]
 80078a8:	e001      	b.n	80078ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078aa:	2300      	movs	r3, #0
 80078ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ae:	f001 f989 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 80078b2:	68fb      	ldr	r3, [r7, #12]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3710      	adds	r7, #16
 80078b8:	46bd      	mov	sp, r7
 80078ba:	bd80      	pop	{r7, pc}

080078bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af04      	add	r7, sp, #16
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80078ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10c      	bne.n	80078ea <xTaskCreateStatic+0x2e>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	b672      	cpsid	i
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	b662      	cpsie	i
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d10c      	bne.n	800790a <xTaskCreateStatic+0x4e>
	__asm volatile
 80078f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f4:	b672      	cpsid	i
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	b662      	cpsie	i
 8007904:	61fb      	str	r3, [r7, #28]
}
 8007906:	bf00      	nop
 8007908:	e7fe      	b.n	8007908 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800790a:	2354      	movs	r3, #84	; 0x54
 800790c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	2b54      	cmp	r3, #84	; 0x54
 8007912:	d00c      	beq.n	800792e <xTaskCreateStatic+0x72>
	__asm volatile
 8007914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007918:	b672      	cpsid	i
 800791a:	f383 8811 	msr	BASEPRI, r3
 800791e:	f3bf 8f6f 	isb	sy
 8007922:	f3bf 8f4f 	dsb	sy
 8007926:	b662      	cpsie	i
 8007928:	61bb      	str	r3, [r7, #24]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800792e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007932:	2b00      	cmp	r3, #0
 8007934:	d01e      	beq.n	8007974 <xTaskCreateStatic+0xb8>
 8007936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007938:	2b00      	cmp	r3, #0
 800793a:	d01b      	beq.n	8007974 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007942:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007944:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007948:	2202      	movs	r2, #2
 800794a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800794e:	2300      	movs	r3, #0
 8007950:	9303      	str	r3, [sp, #12]
 8007952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007954:	9302      	str	r3, [sp, #8]
 8007956:	f107 0314 	add.w	r3, r7, #20
 800795a:	9301      	str	r3, [sp, #4]
 800795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 f850 	bl	8007a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800796c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800796e:	f000 f8d7 	bl	8007b20 <prvAddNewTaskToReadyList>
 8007972:	e001      	b.n	8007978 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007974:	2300      	movs	r3, #0
 8007976:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007978:	697b      	ldr	r3, [r7, #20]
	}
 800797a:	4618      	mov	r0, r3
 800797c:	3728      	adds	r7, #40	; 0x28
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007982:	b580      	push	{r7, lr}
 8007984:	b08c      	sub	sp, #48	; 0x30
 8007986:	af04      	add	r7, sp, #16
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007992:	88fb      	ldrh	r3, [r7, #6]
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	4618      	mov	r0, r3
 8007998:	f001 fa0c 	bl	8008db4 <pvPortMalloc>
 800799c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d00e      	beq.n	80079c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079a4:	2054      	movs	r0, #84	; 0x54
 80079a6:	f001 fa05 	bl	8008db4 <pvPortMalloc>
 80079aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	631a      	str	r2, [r3, #48]	; 0x30
 80079b8:	e005      	b.n	80079c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80079ba:	6978      	ldr	r0, [r7, #20]
 80079bc:	f001 fac4 	bl	8008f48 <vPortFree>
 80079c0:	e001      	b.n	80079c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d017      	beq.n	80079fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80079d4:	88fa      	ldrh	r2, [r7, #6]
 80079d6:	2300      	movs	r3, #0
 80079d8:	9303      	str	r3, [sp, #12]
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	9302      	str	r3, [sp, #8]
 80079de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e0:	9301      	str	r3, [sp, #4]
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	9300      	str	r3, [sp, #0]
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68b9      	ldr	r1, [r7, #8]
 80079ea:	68f8      	ldr	r0, [r7, #12]
 80079ec:	f000 f80e 	bl	8007a0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079f0:	69f8      	ldr	r0, [r7, #28]
 80079f2:	f000 f895 	bl	8007b20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079f6:	2301      	movs	r3, #1
 80079f8:	61bb      	str	r3, [r7, #24]
 80079fa:	e002      	b.n	8007a02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079fc:	f04f 33ff 	mov.w	r3, #4294967295
 8007a00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007a02:	69bb      	ldr	r3, [r7, #24]
	}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3720      	adds	r7, #32
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	607a      	str	r2, [r7, #4]
 8007a18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007a24:	440b      	add	r3, r1
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	f023 0307 	bic.w	r3, r3, #7
 8007a32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	f003 0307 	and.w	r3, r3, #7
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	b672      	cpsid	i
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	b662      	cpsie	i
 8007a52:	617b      	str	r3, [r7, #20]
}
 8007a54:	bf00      	nop
 8007a56:	e7fe      	b.n	8007a56 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01f      	beq.n	8007a9e <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a5e:	2300      	movs	r3, #0
 8007a60:	61fb      	str	r3, [r7, #28]
 8007a62:	e012      	b.n	8007a8a <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	4413      	add	r3, r2
 8007a6a:	7819      	ldrb	r1, [r3, #0]
 8007a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	4413      	add	r3, r2
 8007a72:	3334      	adds	r3, #52	; 0x34
 8007a74:	460a      	mov	r2, r1
 8007a76:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a78:	68ba      	ldr	r2, [r7, #8]
 8007a7a:	69fb      	ldr	r3, [r7, #28]
 8007a7c:	4413      	add	r3, r2
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d006      	beq.n	8007a92 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	3301      	adds	r3, #1
 8007a88:	61fb      	str	r3, [r7, #28]
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b0f      	cmp	r3, #15
 8007a8e:	d9e9      	bls.n	8007a64 <prvInitialiseNewTask+0x58>
 8007a90:	e000      	b.n	8007a94 <prvInitialiseNewTask+0x88>
			{
				break;
 8007a92:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a9c:	e003      	b.n	8007aa6 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aa8:	2b06      	cmp	r3, #6
 8007aaa:	d901      	bls.n	8007ab0 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007aac:	2306      	movs	r3, #6
 8007aae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ab4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abe:	2200      	movs	r2, #0
 8007ac0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fee6 	bl	8006898 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ace:	3318      	adds	r3, #24
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	f7fe fee1 	bl	8006898 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ada:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ade:	f1c3 0207 	rsb	r2, r3, #7
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aee:	2200      	movs	r2, #0
 8007af0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	68f9      	ldr	r1, [r7, #12]
 8007afe:	69b8      	ldr	r0, [r7, #24]
 8007b00:	f000 ff22 	bl	8008948 <pxPortInitialiseStack>
 8007b04:	4602      	mov	r2, r0
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b16:	bf00      	nop
 8007b18:	3720      	adds	r7, #32
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007b28:	f001 f818 	bl	8008b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b2c:	4b2a      	ldr	r3, [pc, #168]	; (8007bd8 <prvAddNewTaskToReadyList+0xb8>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3301      	adds	r3, #1
 8007b32:	4a29      	ldr	r2, [pc, #164]	; (8007bd8 <prvAddNewTaskToReadyList+0xb8>)
 8007b34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b36:	4b29      	ldr	r3, [pc, #164]	; (8007bdc <prvAddNewTaskToReadyList+0xbc>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d109      	bne.n	8007b52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b3e:	4a27      	ldr	r2, [pc, #156]	; (8007bdc <prvAddNewTaskToReadyList+0xbc>)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b44:	4b24      	ldr	r3, [pc, #144]	; (8007bd8 <prvAddNewTaskToReadyList+0xb8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d110      	bne.n	8007b6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b4c:	f000 fbfc 	bl	8008348 <prvInitialiseTaskLists>
 8007b50:	e00d      	b.n	8007b6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b52:	4b23      	ldr	r3, [pc, #140]	; (8007be0 <prvAddNewTaskToReadyList+0xc0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <prvAddNewTaskToReadyList+0xbc>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d802      	bhi.n	8007b6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b68:	4a1c      	ldr	r2, [pc, #112]	; (8007bdc <prvAddNewTaskToReadyList+0xbc>)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <prvAddNewTaskToReadyList+0xc4>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3301      	adds	r3, #1
 8007b74:	4a1b      	ldr	r2, [pc, #108]	; (8007be4 <prvAddNewTaskToReadyList+0xc4>)
 8007b76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	409a      	lsls	r2, r3
 8007b80:	4b19      	ldr	r3, [pc, #100]	; (8007be8 <prvAddNewTaskToReadyList+0xc8>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <prvAddNewTaskToReadyList+0xc8>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8e:	4613      	mov	r3, r2
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <prvAddNewTaskToReadyList+0xcc>)
 8007b98:	441a      	add	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fe fe86 	bl	80068b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ba6:	f001 f80d 	bl	8008bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007baa:	4b0d      	ldr	r3, [pc, #52]	; (8007be0 <prvAddNewTaskToReadyList+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	; (8007bdc <prvAddNewTaskToReadyList+0xbc>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d207      	bcs.n	8007bd0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007bc0:	4b0b      	ldr	r3, [pc, #44]	; (8007bf0 <prvAddNewTaskToReadyList+0xd0>)
 8007bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc6:	601a      	str	r2, [r3, #0]
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bd0:	bf00      	nop
 8007bd2:	3708      	adds	r7, #8
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	20005618 	.word	0x20005618
 8007bdc:	20005518 	.word	0x20005518
 8007be0:	20005624 	.word	0x20005624
 8007be4:	20005634 	.word	0x20005634
 8007be8:	20005620 	.word	0x20005620
 8007bec:	2000551c 	.word	0x2000551c
 8007bf0:	e000ed04 	.word	0xe000ed04

08007bf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d019      	beq.n	8007c3a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c06:	4b14      	ldr	r3, [pc, #80]	; (8007c58 <vTaskDelay+0x64>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00c      	beq.n	8007c28 <vTaskDelay+0x34>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c12:	b672      	cpsid	i
 8007c14:	f383 8811 	msr	BASEPRI, r3
 8007c18:	f3bf 8f6f 	isb	sy
 8007c1c:	f3bf 8f4f 	dsb	sy
 8007c20:	b662      	cpsie	i
 8007c22:	60bb      	str	r3, [r7, #8]
}
 8007c24:	bf00      	nop
 8007c26:	e7fe      	b.n	8007c26 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007c28:	f000 f87e 	bl	8007d28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 fe24 	bl	800887c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c34:	f000 f886 	bl	8007d44 <xTaskResumeAll>
 8007c38:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d107      	bne.n	8007c50 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <vTaskDelay+0x68>)
 8007c42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c46:	601a      	str	r2, [r3, #0]
 8007c48:	f3bf 8f4f 	dsb	sy
 8007c4c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c50:	bf00      	nop
 8007c52:	3710      	adds	r7, #16
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20005640 	.word	0x20005640
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b08a      	sub	sp, #40	; 0x28
 8007c64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c6e:	463a      	mov	r2, r7
 8007c70:	1d39      	adds	r1, r7, #4
 8007c72:	f107 0308 	add.w	r3, r7, #8
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7f8 fcb0 	bl	80005dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68ba      	ldr	r2, [r7, #8]
 8007c82:	9202      	str	r2, [sp, #8]
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	2300      	movs	r3, #0
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	460a      	mov	r2, r1
 8007c8e:	4920      	ldr	r1, [pc, #128]	; (8007d10 <vTaskStartScheduler+0xb0>)
 8007c90:	4820      	ldr	r0, [pc, #128]	; (8007d14 <vTaskStartScheduler+0xb4>)
 8007c92:	f7ff fe13 	bl	80078bc <xTaskCreateStatic>
 8007c96:	4603      	mov	r3, r0
 8007c98:	4a1f      	ldr	r2, [pc, #124]	; (8007d18 <vTaskStartScheduler+0xb8>)
 8007c9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c9c:	4b1e      	ldr	r3, [pc, #120]	; (8007d18 <vTaskStartScheduler+0xb8>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d002      	beq.n	8007caa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e001      	b.n	8007cae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d118      	bne.n	8007ce6 <vTaskStartScheduler+0x86>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	b672      	cpsid	i
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	b662      	cpsie	i
 8007cc8:	613b      	str	r3, [r7, #16]
}
 8007cca:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ccc:	4b13      	ldr	r3, [pc, #76]	; (8007d1c <vTaskStartScheduler+0xbc>)
 8007cce:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007cd4:	4b12      	ldr	r3, [pc, #72]	; (8007d20 <vTaskStartScheduler+0xc0>)
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007cda:	4b12      	ldr	r3, [pc, #72]	; (8007d24 <vTaskStartScheduler+0xc4>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007ce0:	f000 febe 	bl	8008a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ce4:	e010      	b.n	8007d08 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cec:	d10c      	bne.n	8007d08 <vTaskStartScheduler+0xa8>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf2:	b672      	cpsid	i
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	b662      	cpsie	i
 8007d02:	60fb      	str	r3, [r7, #12]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <vTaskStartScheduler+0xa6>
}
 8007d08:	bf00      	nop
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	08018d88 	.word	0x08018d88
 8007d14:	08008319 	.word	0x08008319
 8007d18:	2000563c 	.word	0x2000563c
 8007d1c:	20005638 	.word	0x20005638
 8007d20:	20005624 	.word	0x20005624
 8007d24:	2000561c 	.word	0x2000561c

08007d28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d2c:	4b04      	ldr	r3, [pc, #16]	; (8007d40 <vTaskSuspendAll+0x18>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	3301      	adds	r3, #1
 8007d32:	4a03      	ldr	r2, [pc, #12]	; (8007d40 <vTaskSuspendAll+0x18>)
 8007d34:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007d36:	bf00      	nop
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	20005640 	.word	0x20005640

08007d44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d52:	4b42      	ldr	r3, [pc, #264]	; (8007e5c <xTaskResumeAll+0x118>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10c      	bne.n	8007d74 <xTaskResumeAll+0x30>
	__asm volatile
 8007d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d5e:	b672      	cpsid	i
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	b662      	cpsie	i
 8007d6e:	603b      	str	r3, [r7, #0]
}
 8007d70:	bf00      	nop
 8007d72:	e7fe      	b.n	8007d72 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d74:	f000 fef2 	bl	8008b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d78:	4b38      	ldr	r3, [pc, #224]	; (8007e5c <xTaskResumeAll+0x118>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	4a37      	ldr	r2, [pc, #220]	; (8007e5c <xTaskResumeAll+0x118>)
 8007d80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d82:	4b36      	ldr	r3, [pc, #216]	; (8007e5c <xTaskResumeAll+0x118>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d161      	bne.n	8007e4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d8a:	4b35      	ldr	r3, [pc, #212]	; (8007e60 <xTaskResumeAll+0x11c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05d      	beq.n	8007e4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d92:	e02e      	b.n	8007df2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d94:	4b33      	ldr	r3, [pc, #204]	; (8007e64 <xTaskResumeAll+0x120>)
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	68db      	ldr	r3, [r3, #12]
 8007d9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3318      	adds	r3, #24
 8007da0:	4618      	mov	r0, r3
 8007da2:	f7fe fde3 	bl	800696c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	3304      	adds	r3, #4
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fdde 	bl	800696c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	2201      	movs	r2, #1
 8007db6:	409a      	lsls	r2, r3
 8007db8:	4b2b      	ldr	r3, [pc, #172]	; (8007e68 <xTaskResumeAll+0x124>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	4a2a      	ldr	r2, [pc, #168]	; (8007e68 <xTaskResumeAll+0x124>)
 8007dc0:	6013      	str	r3, [r2, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	4a27      	ldr	r2, [pc, #156]	; (8007e6c <xTaskResumeAll+0x128>)
 8007dd0:	441a      	add	r2, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3304      	adds	r3, #4
 8007dd6:	4619      	mov	r1, r3
 8007dd8:	4610      	mov	r0, r2
 8007dda:	f7fe fd6a 	bl	80068b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de2:	4b23      	ldr	r3, [pc, #140]	; (8007e70 <xTaskResumeAll+0x12c>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d302      	bcc.n	8007df2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007dec:	4b21      	ldr	r3, [pc, #132]	; (8007e74 <xTaskResumeAll+0x130>)
 8007dee:	2201      	movs	r2, #1
 8007df0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007df2:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <xTaskResumeAll+0x120>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1cc      	bne.n	8007d94 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d001      	beq.n	8007e04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e00:	f000 fb42 	bl	8008488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007e04:	4b1c      	ldr	r3, [pc, #112]	; (8007e78 <xTaskResumeAll+0x134>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d010      	beq.n	8007e32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e10:	f000 f858 	bl	8007ec4 <xTaskIncrementTick>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007e1a:	4b16      	ldr	r3, [pc, #88]	; (8007e74 <xTaskResumeAll+0x130>)
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d1f1      	bne.n	8007e10 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007e2c:	4b12      	ldr	r3, [pc, #72]	; (8007e78 <xTaskResumeAll+0x134>)
 8007e2e:	2200      	movs	r2, #0
 8007e30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e32:	4b10      	ldr	r3, [pc, #64]	; (8007e74 <xTaskResumeAll+0x130>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d009      	beq.n	8007e4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <xTaskResumeAll+0x138>)
 8007e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e44:	601a      	str	r2, [r3, #0]
 8007e46:	f3bf 8f4f 	dsb	sy
 8007e4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e4e:	f000 feb9 	bl	8008bc4 <vPortExitCritical>

	return xAlreadyYielded;
 8007e52:	68bb      	ldr	r3, [r7, #8]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	20005640 	.word	0x20005640
 8007e60:	20005618 	.word	0x20005618
 8007e64:	200055d8 	.word	0x200055d8
 8007e68:	20005620 	.word	0x20005620
 8007e6c:	2000551c 	.word	0x2000551c
 8007e70:	20005518 	.word	0x20005518
 8007e74:	2000562c 	.word	0x2000562c
 8007e78:	20005628 	.word	0x20005628
 8007e7c:	e000ed04 	.word	0xe000ed04

08007e80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007e86:	4b05      	ldr	r3, [pc, #20]	; (8007e9c <xTaskGetTickCount+0x1c>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007e8c:	687b      	ldr	r3, [r7, #4]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	2000561c 	.word	0x2000561c

08007ea0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ea6:	f000 ff41 	bl	8008d2c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007eaa:	2300      	movs	r3, #0
 8007eac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007eae:	4b04      	ldr	r3, [pc, #16]	; (8007ec0 <xTaskGetTickCountFromISR+0x20>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eb4:	683b      	ldr	r3, [r7, #0]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3708      	adds	r7, #8
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	2000561c 	.word	0x2000561c

08007ec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ece:	4b4f      	ldr	r3, [pc, #316]	; (800800c <xTaskIncrementTick+0x148>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	f040 808a 	bne.w	8007fec <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ed8:	4b4d      	ldr	r3, [pc, #308]	; (8008010 <xTaskIncrementTick+0x14c>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3301      	adds	r3, #1
 8007ede:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ee0:	4a4b      	ldr	r2, [pc, #300]	; (8008010 <xTaskIncrementTick+0x14c>)
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d122      	bne.n	8007f32 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8007eec:	4b49      	ldr	r3, [pc, #292]	; (8008014 <xTaskIncrementTick+0x150>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00c      	beq.n	8007f10 <xTaskIncrementTick+0x4c>
	__asm volatile
 8007ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efa:	b672      	cpsid	i
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	b662      	cpsie	i
 8007f0a:	603b      	str	r3, [r7, #0]
}
 8007f0c:	bf00      	nop
 8007f0e:	e7fe      	b.n	8007f0e <xTaskIncrementTick+0x4a>
 8007f10:	4b40      	ldr	r3, [pc, #256]	; (8008014 <xTaskIncrementTick+0x150>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	4b40      	ldr	r3, [pc, #256]	; (8008018 <xTaskIncrementTick+0x154>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a3e      	ldr	r2, [pc, #248]	; (8008014 <xTaskIncrementTick+0x150>)
 8007f1c:	6013      	str	r3, [r2, #0]
 8007f1e:	4a3e      	ldr	r2, [pc, #248]	; (8008018 <xTaskIncrementTick+0x154>)
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	6013      	str	r3, [r2, #0]
 8007f24:	4b3d      	ldr	r3, [pc, #244]	; (800801c <xTaskIncrementTick+0x158>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3301      	adds	r3, #1
 8007f2a:	4a3c      	ldr	r2, [pc, #240]	; (800801c <xTaskIncrementTick+0x158>)
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	f000 faab 	bl	8008488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f32:	4b3b      	ldr	r3, [pc, #236]	; (8008020 <xTaskIncrementTick+0x15c>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	693a      	ldr	r2, [r7, #16]
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d348      	bcc.n	8007fce <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f3c:	4b35      	ldr	r3, [pc, #212]	; (8008014 <xTaskIncrementTick+0x150>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d104      	bne.n	8007f50 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f46:	4b36      	ldr	r3, [pc, #216]	; (8008020 <xTaskIncrementTick+0x15c>)
 8007f48:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4c:	601a      	str	r2, [r3, #0]
					break;
 8007f4e:	e03e      	b.n	8007fce <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f50:	4b30      	ldr	r3, [pc, #192]	; (8008014 <xTaskIncrementTick+0x150>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	68db      	ldr	r3, [r3, #12]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d203      	bcs.n	8007f70 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f68:	4a2d      	ldr	r2, [pc, #180]	; (8008020 <xTaskIncrementTick+0x15c>)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f6e:	e02e      	b.n	8007fce <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	3304      	adds	r3, #4
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe fcf9 	bl	800696c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d004      	beq.n	8007f8c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	3318      	adds	r3, #24
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fe fcf0 	bl	800696c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f90:	2201      	movs	r2, #1
 8007f92:	409a      	lsls	r2, r3
 8007f94:	4b23      	ldr	r3, [pc, #140]	; (8008024 <xTaskIncrementTick+0x160>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	4a22      	ldr	r2, [pc, #136]	; (8008024 <xTaskIncrementTick+0x160>)
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fa2:	4613      	mov	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	4413      	add	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4a1f      	ldr	r2, [pc, #124]	; (8008028 <xTaskIncrementTick+0x164>)
 8007fac:	441a      	add	r2, r3
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	4610      	mov	r0, r2
 8007fb6:	f7fe fc7c 	bl	80068b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fbe:	4b1b      	ldr	r3, [pc, #108]	; (800802c <xTaskIncrementTick+0x168>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d3b9      	bcc.n	8007f3c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007fcc:	e7b6      	b.n	8007f3c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007fce:	4b17      	ldr	r3, [pc, #92]	; (800802c <xTaskIncrementTick+0x168>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd4:	4914      	ldr	r1, [pc, #80]	; (8008028 <xTaskIncrementTick+0x164>)
 8007fd6:	4613      	mov	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	4413      	add	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	440b      	add	r3, r1
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d907      	bls.n	8007ff6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	617b      	str	r3, [r7, #20]
 8007fea:	e004      	b.n	8007ff6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007fec:	4b10      	ldr	r3, [pc, #64]	; (8008030 <xTaskIncrementTick+0x16c>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	4a0f      	ldr	r2, [pc, #60]	; (8008030 <xTaskIncrementTick+0x16c>)
 8007ff4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ff6:	4b0f      	ldr	r3, [pc, #60]	; (8008034 <xTaskIncrementTick+0x170>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008002:	697b      	ldr	r3, [r7, #20]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20005640 	.word	0x20005640
 8008010:	2000561c 	.word	0x2000561c
 8008014:	200055d0 	.word	0x200055d0
 8008018:	200055d4 	.word	0x200055d4
 800801c:	20005630 	.word	0x20005630
 8008020:	20005638 	.word	0x20005638
 8008024:	20005620 	.word	0x20005620
 8008028:	2000551c 	.word	0x2000551c
 800802c:	20005518 	.word	0x20005518
 8008030:	20005628 	.word	0x20005628
 8008034:	2000562c 	.word	0x2000562c

08008038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008038:	b480      	push	{r7}
 800803a:	b087      	sub	sp, #28
 800803c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800803e:	4b28      	ldr	r3, [pc, #160]	; (80080e0 <vTaskSwitchContext+0xa8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <vTaskSwitchContext+0xac>)
 8008048:	2201      	movs	r2, #1
 800804a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800804c:	e041      	b.n	80080d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800804e:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <vTaskSwitchContext+0xac>)
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008054:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <vTaskSwitchContext+0xb0>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	fab3 f383 	clz	r3, r3
 8008060:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008062:	7afb      	ldrb	r3, [r7, #11]
 8008064:	f1c3 031f 	rsb	r3, r3, #31
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	4920      	ldr	r1, [pc, #128]	; (80080ec <vTaskSwitchContext+0xb4>)
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	440b      	add	r3, r1
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10c      	bne.n	8008098 <vTaskSwitchContext+0x60>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	b672      	cpsid	i
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	b662      	cpsie	i
 8008092:	607b      	str	r3, [r7, #4]
}
 8008094:	bf00      	nop
 8008096:	e7fe      	b.n	8008096 <vTaskSwitchContext+0x5e>
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4a12      	ldr	r2, [pc, #72]	; (80080ec <vTaskSwitchContext+0xb4>)
 80080a4:	4413      	add	r3, r2
 80080a6:	613b      	str	r3, [r7, #16]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	685a      	ldr	r2, [r3, #4]
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3308      	adds	r3, #8
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d104      	bne.n	80080c8 <vTaskSwitchContext+0x90>
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	605a      	str	r2, [r3, #4]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	68db      	ldr	r3, [r3, #12]
 80080ce:	4a08      	ldr	r2, [pc, #32]	; (80080f0 <vTaskSwitchContext+0xb8>)
 80080d0:	6013      	str	r3, [r2, #0]
}
 80080d2:	bf00      	nop
 80080d4:	371c      	adds	r7, #28
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	20005640 	.word	0x20005640
 80080e4:	2000562c 	.word	0x2000562c
 80080e8:	20005620 	.word	0x20005620
 80080ec:	2000551c 	.word	0x2000551c
 80080f0:	20005518 	.word	0x20005518

080080f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10c      	bne.n	800811e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008108:	b672      	cpsid	i
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	b662      	cpsie	i
 8008118:	60fb      	str	r3, [r7, #12]
}
 800811a:	bf00      	nop
 800811c:	e7fe      	b.n	800811c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800811e:	4b07      	ldr	r3, [pc, #28]	; (800813c <vTaskPlaceOnEventList+0x48>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3318      	adds	r3, #24
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7fe fbe7 	bl	80068fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800812c:	2101      	movs	r1, #1
 800812e:	6838      	ldr	r0, [r7, #0]
 8008130:	f000 fba4 	bl	800887c <prvAddCurrentTaskToDelayedList>
}
 8008134:	bf00      	nop
 8008136:	3710      	adds	r7, #16
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20005518 	.word	0x20005518

08008140 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b086      	sub	sp, #24
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10c      	bne.n	8008170 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815a:	b672      	cpsid	i
 800815c:	f383 8811 	msr	BASEPRI, r3
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	f3bf 8f4f 	dsb	sy
 8008168:	b662      	cpsie	i
 800816a:	60fb      	str	r3, [r7, #12]
}
 800816c:	bf00      	nop
 800816e:	e7fe      	b.n	800816e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	3318      	adds	r3, #24
 8008174:	4618      	mov	r0, r3
 8008176:	f7fe fbf9 	bl	800696c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800817a:	4b1d      	ldr	r3, [pc, #116]	; (80081f0 <xTaskRemoveFromEventList+0xb0>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d11c      	bne.n	80081bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	3304      	adds	r3, #4
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe fbf0 	bl	800696c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	2201      	movs	r2, #1
 8008192:	409a      	lsls	r2, r3
 8008194:	4b17      	ldr	r3, [pc, #92]	; (80081f4 <xTaskRemoveFromEventList+0xb4>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4313      	orrs	r3, r2
 800819a:	4a16      	ldr	r2, [pc, #88]	; (80081f4 <xTaskRemoveFromEventList+0xb4>)
 800819c:	6013      	str	r3, [r2, #0]
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a2:	4613      	mov	r3, r2
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	4a13      	ldr	r2, [pc, #76]	; (80081f8 <xTaskRemoveFromEventList+0xb8>)
 80081ac:	441a      	add	r2, r3
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	3304      	adds	r3, #4
 80081b2:	4619      	mov	r1, r3
 80081b4:	4610      	mov	r0, r2
 80081b6:	f7fe fb7c 	bl	80068b2 <vListInsertEnd>
 80081ba:	e005      	b.n	80081c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	3318      	adds	r3, #24
 80081c0:	4619      	mov	r1, r3
 80081c2:	480e      	ldr	r0, [pc, #56]	; (80081fc <xTaskRemoveFromEventList+0xbc>)
 80081c4:	f7fe fb75 	bl	80068b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081cc:	4b0c      	ldr	r3, [pc, #48]	; (8008200 <xTaskRemoveFromEventList+0xc0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d905      	bls.n	80081e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80081da:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <xTaskRemoveFromEventList+0xc4>)
 80081dc:	2201      	movs	r2, #1
 80081de:	601a      	str	r2, [r3, #0]
 80081e0:	e001      	b.n	80081e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80081e6:	697b      	ldr	r3, [r7, #20]
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3718      	adds	r7, #24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20005640 	.word	0x20005640
 80081f4:	20005620 	.word	0x20005620
 80081f8:	2000551c 	.word	0x2000551c
 80081fc:	200055d8 	.word	0x200055d8
 8008200:	20005518 	.word	0x20005518
 8008204:	2000562c 	.word	0x2000562c

08008208 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <vTaskInternalSetTimeOutState+0x24>)
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008218:	4b05      	ldr	r3, [pc, #20]	; (8008230 <vTaskInternalSetTimeOutState+0x28>)
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	605a      	str	r2, [r3, #4]
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr
 800822c:	20005630 	.word	0x20005630
 8008230:	2000561c 	.word	0x2000561c

08008234 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b088      	sub	sp, #32
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10c      	bne.n	800825e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008248:	b672      	cpsid	i
 800824a:	f383 8811 	msr	BASEPRI, r3
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	b662      	cpsie	i
 8008258:	613b      	str	r3, [r7, #16]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10c      	bne.n	800827e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008268:	b672      	cpsid	i
 800826a:	f383 8811 	msr	BASEPRI, r3
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f3bf 8f4f 	dsb	sy
 8008276:	b662      	cpsie	i
 8008278:	60fb      	str	r3, [r7, #12]
}
 800827a:	bf00      	nop
 800827c:	e7fe      	b.n	800827c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800827e:	f000 fc6d 	bl	8008b5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008282:	4b1d      	ldr	r3, [pc, #116]	; (80082f8 <xTaskCheckForTimeOut+0xc4>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	69ba      	ldr	r2, [r7, #24]
 800828e:	1ad3      	subs	r3, r2, r3
 8008290:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800829a:	d102      	bne.n	80082a2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e023      	b.n	80082ea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	4b15      	ldr	r3, [pc, #84]	; (80082fc <xTaskCheckForTimeOut+0xc8>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d007      	beq.n	80082be <xTaskCheckForTimeOut+0x8a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	69ba      	ldr	r2, [r7, #24]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d302      	bcc.n	80082be <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	61fb      	str	r3, [r7, #28]
 80082bc:	e015      	b.n	80082ea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	697a      	ldr	r2, [r7, #20]
 80082c4:	429a      	cmp	r2, r3
 80082c6:	d20b      	bcs.n	80082e0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f7ff ff97 	bl	8008208 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	e004      	b.n	80082ea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	2200      	movs	r2, #0
 80082e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80082ea:	f000 fc6b 	bl	8008bc4 <vPortExitCritical>

	return xReturn;
 80082ee:	69fb      	ldr	r3, [r7, #28]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3720      	adds	r7, #32
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	2000561c 	.word	0x2000561c
 80082fc:	20005630 	.word	0x20005630

08008300 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008300:	b480      	push	{r7}
 8008302:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008304:	4b03      	ldr	r3, [pc, #12]	; (8008314 <vTaskMissedYield+0x14>)
 8008306:	2201      	movs	r2, #1
 8008308:	601a      	str	r2, [r3, #0]
}
 800830a:	bf00      	nop
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr
 8008314:	2000562c 	.word	0x2000562c

08008318 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008320:	f000 f852 	bl	80083c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008324:	4b06      	ldr	r3, [pc, #24]	; (8008340 <prvIdleTask+0x28>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b01      	cmp	r3, #1
 800832a:	d9f9      	bls.n	8008320 <prvIdleTask+0x8>
			{
				taskYIELD();
 800832c:	4b05      	ldr	r3, [pc, #20]	; (8008344 <prvIdleTask+0x2c>)
 800832e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008332:	601a      	str	r2, [r3, #0]
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800833c:	e7f0      	b.n	8008320 <prvIdleTask+0x8>
 800833e:	bf00      	nop
 8008340:	2000551c 	.word	0x2000551c
 8008344:	e000ed04 	.word	0xe000ed04

08008348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800834e:	2300      	movs	r3, #0
 8008350:	607b      	str	r3, [r7, #4]
 8008352:	e00c      	b.n	800836e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	4613      	mov	r3, r2
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4413      	add	r3, r2
 800835c:	009b      	lsls	r3, r3, #2
 800835e:	4a12      	ldr	r2, [pc, #72]	; (80083a8 <prvInitialiseTaskLists+0x60>)
 8008360:	4413      	add	r3, r2
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fa78 	bl	8006858 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	3301      	adds	r3, #1
 800836c:	607b      	str	r3, [r7, #4]
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2b06      	cmp	r3, #6
 8008372:	d9ef      	bls.n	8008354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008374:	480d      	ldr	r0, [pc, #52]	; (80083ac <prvInitialiseTaskLists+0x64>)
 8008376:	f7fe fa6f 	bl	8006858 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800837a:	480d      	ldr	r0, [pc, #52]	; (80083b0 <prvInitialiseTaskLists+0x68>)
 800837c:	f7fe fa6c 	bl	8006858 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008380:	480c      	ldr	r0, [pc, #48]	; (80083b4 <prvInitialiseTaskLists+0x6c>)
 8008382:	f7fe fa69 	bl	8006858 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008386:	480c      	ldr	r0, [pc, #48]	; (80083b8 <prvInitialiseTaskLists+0x70>)
 8008388:	f7fe fa66 	bl	8006858 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800838c:	480b      	ldr	r0, [pc, #44]	; (80083bc <prvInitialiseTaskLists+0x74>)
 800838e:	f7fe fa63 	bl	8006858 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008392:	4b0b      	ldr	r3, [pc, #44]	; (80083c0 <prvInitialiseTaskLists+0x78>)
 8008394:	4a05      	ldr	r2, [pc, #20]	; (80083ac <prvInitialiseTaskLists+0x64>)
 8008396:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008398:	4b0a      	ldr	r3, [pc, #40]	; (80083c4 <prvInitialiseTaskLists+0x7c>)
 800839a:	4a05      	ldr	r2, [pc, #20]	; (80083b0 <prvInitialiseTaskLists+0x68>)
 800839c:	601a      	str	r2, [r3, #0]
}
 800839e:	bf00      	nop
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	2000551c 	.word	0x2000551c
 80083ac:	200055a8 	.word	0x200055a8
 80083b0:	200055bc 	.word	0x200055bc
 80083b4:	200055d8 	.word	0x200055d8
 80083b8:	200055ec 	.word	0x200055ec
 80083bc:	20005604 	.word	0x20005604
 80083c0:	200055d0 	.word	0x200055d0
 80083c4:	200055d4 	.word	0x200055d4

080083c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80083ce:	e019      	b.n	8008404 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80083d0:	f000 fbc4 	bl	8008b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083d4:	4b10      	ldr	r3, [pc, #64]	; (8008418 <prvCheckTasksWaitingTermination+0x50>)
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fe fac3 	bl	800696c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <prvCheckTasksWaitingTermination+0x54>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4a0b      	ldr	r2, [pc, #44]	; (800841c <prvCheckTasksWaitingTermination+0x54>)
 80083ee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80083f0:	4b0b      	ldr	r3, [pc, #44]	; (8008420 <prvCheckTasksWaitingTermination+0x58>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <prvCheckTasksWaitingTermination+0x58>)
 80083f8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80083fa:	f000 fbe3 	bl	8008bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f810 	bl	8008424 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008404:	4b06      	ldr	r3, [pc, #24]	; (8008420 <prvCheckTasksWaitingTermination+0x58>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e1      	bne.n	80083d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	3708      	adds	r7, #8
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
 8008416:	bf00      	nop
 8008418:	200055ec 	.word	0x200055ec
 800841c:	20005618 	.word	0x20005618
 8008420:	20005600 	.word	0x20005600

08008424 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008432:	2b00      	cmp	r3, #0
 8008434:	d108      	bne.n	8008448 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fd84 	bl	8008f48 <vPortFree>
				vPortFree( pxTCB );
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fd81 	bl	8008f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008446:	e01a      	b.n	800847e <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800844e:	2b01      	cmp	r3, #1
 8008450:	d103      	bne.n	800845a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fd78 	bl	8008f48 <vPortFree>
	}
 8008458:	e011      	b.n	800847e <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008460:	2b02      	cmp	r3, #2
 8008462:	d00c      	beq.n	800847e <prvDeleteTCB+0x5a>
	__asm volatile
 8008464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008468:	b672      	cpsid	i
 800846a:	f383 8811 	msr	BASEPRI, r3
 800846e:	f3bf 8f6f 	isb	sy
 8008472:	f3bf 8f4f 	dsb	sy
 8008476:	b662      	cpsie	i
 8008478:	60fb      	str	r3, [r7, #12]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <prvDeleteTCB+0x58>
	}
 800847e:	bf00      	nop
 8008480:	3710      	adds	r7, #16
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
	...

08008488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008488:	b480      	push	{r7}
 800848a:	b083      	sub	sp, #12
 800848c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <prvResetNextTaskUnblockTime+0x38>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d104      	bne.n	80084a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008498:	4b0a      	ldr	r3, [pc, #40]	; (80084c4 <prvResetNextTaskUnblockTime+0x3c>)
 800849a:	f04f 32ff 	mov.w	r2, #4294967295
 800849e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80084a0:	e008      	b.n	80084b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084a2:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <prvResetNextTaskUnblockTime+0x38>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	68db      	ldr	r3, [r3, #12]
 80084aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <prvResetNextTaskUnblockTime+0x3c>)
 80084b2:	6013      	str	r3, [r2, #0]
}
 80084b4:	bf00      	nop
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	200055d0 	.word	0x200055d0
 80084c4:	20005638 	.word	0x20005638

080084c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80084ce:	4b0b      	ldr	r3, [pc, #44]	; (80084fc <xTaskGetSchedulerState+0x34>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d102      	bne.n	80084dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80084d6:	2301      	movs	r3, #1
 80084d8:	607b      	str	r3, [r7, #4]
 80084da:	e008      	b.n	80084ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084dc:	4b08      	ldr	r3, [pc, #32]	; (8008500 <xTaskGetSchedulerState+0x38>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80084e4:	2302      	movs	r3, #2
 80084e6:	607b      	str	r3, [r7, #4]
 80084e8:	e001      	b.n	80084ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80084ea:	2300      	movs	r3, #0
 80084ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80084ee:	687b      	ldr	r3, [r7, #4]
	}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	20005624 	.word	0x20005624
 8008500:	20005640 	.word	0x20005640

08008504 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008510:	2300      	movs	r3, #0
 8008512:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d069      	beq.n	80085ee <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851e:	4b36      	ldr	r3, [pc, #216]	; (80085f8 <xTaskPriorityInherit+0xf4>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008524:	429a      	cmp	r2, r3
 8008526:	d259      	bcs.n	80085dc <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	699b      	ldr	r3, [r3, #24]
 800852c:	2b00      	cmp	r3, #0
 800852e:	db06      	blt.n	800853e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008530:	4b31      	ldr	r3, [pc, #196]	; (80085f8 <xTaskPriorityInherit+0xf4>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008536:	f1c3 0207 	rsb	r2, r3, #7
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	6959      	ldr	r1, [r3, #20]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008546:	4613      	mov	r3, r2
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	4413      	add	r3, r2
 800854c:	009b      	lsls	r3, r3, #2
 800854e:	4a2b      	ldr	r2, [pc, #172]	; (80085fc <xTaskPriorityInherit+0xf8>)
 8008550:	4413      	add	r3, r2
 8008552:	4299      	cmp	r1, r3
 8008554:	d13a      	bne.n	80085cc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	3304      	adds	r3, #4
 800855a:	4618      	mov	r0, r3
 800855c:	f7fe fa06 	bl	800696c <uxListRemove>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d115      	bne.n	8008592 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800856a:	4924      	ldr	r1, [pc, #144]	; (80085fc <xTaskPriorityInherit+0xf8>)
 800856c:	4613      	mov	r3, r2
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	440b      	add	r3, r1
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d10a      	bne.n	8008592 <xTaskPriorityInherit+0x8e>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	2201      	movs	r2, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	43da      	mvns	r2, r3
 8008588:	4b1d      	ldr	r3, [pc, #116]	; (8008600 <xTaskPriorityInherit+0xfc>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4013      	ands	r3, r2
 800858e:	4a1c      	ldr	r2, [pc, #112]	; (8008600 <xTaskPriorityInherit+0xfc>)
 8008590:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008592:	4b19      	ldr	r3, [pc, #100]	; (80085f8 <xTaskPriorityInherit+0xf4>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	2201      	movs	r2, #1
 80085a2:	409a      	lsls	r2, r3
 80085a4:	4b16      	ldr	r3, [pc, #88]	; (8008600 <xTaskPriorityInherit+0xfc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	4a15      	ldr	r2, [pc, #84]	; (8008600 <xTaskPriorityInherit+0xfc>)
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4a10      	ldr	r2, [pc, #64]	; (80085fc <xTaskPriorityInherit+0xf8>)
 80085bc:	441a      	add	r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	3304      	adds	r3, #4
 80085c2:	4619      	mov	r1, r3
 80085c4:	4610      	mov	r0, r2
 80085c6:	f7fe f974 	bl	80068b2 <vListInsertEnd>
 80085ca:	e004      	b.n	80085d6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80085cc:	4b0a      	ldr	r3, [pc, #40]	; (80085f8 <xTaskPriorityInherit+0xf4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80085d6:	2301      	movs	r3, #1
 80085d8:	60fb      	str	r3, [r7, #12]
 80085da:	e008      	b.n	80085ee <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085e0:	4b05      	ldr	r3, [pc, #20]	; (80085f8 <xTaskPriorityInherit+0xf4>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d201      	bcs.n	80085ee <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80085ea:	2301      	movs	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80085ee:	68fb      	ldr	r3, [r7, #12]
	}
 80085f0:	4618      	mov	r0, r3
 80085f2:	3710      	adds	r7, #16
 80085f4:	46bd      	mov	sp, r7
 80085f6:	bd80      	pop	{r7, pc}
 80085f8:	20005518 	.word	0x20005518
 80085fc:	2000551c 	.word	0x2000551c
 8008600:	20005620 	.word	0x20005620

08008604 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008604:	b580      	push	{r7, lr}
 8008606:	b086      	sub	sp, #24
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008610:	2300      	movs	r3, #0
 8008612:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d072      	beq.n	8008700 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800861a:	4b3c      	ldr	r3, [pc, #240]	; (800870c <xTaskPriorityDisinherit+0x108>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	693a      	ldr	r2, [r7, #16]
 8008620:	429a      	cmp	r2, r3
 8008622:	d00c      	beq.n	800863e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008628:	b672      	cpsid	i
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	b662      	cpsie	i
 8008638:	60fb      	str	r3, [r7, #12]
}
 800863a:	bf00      	nop
 800863c:	e7fe      	b.n	800863c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10c      	bne.n	8008660 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864a:	b672      	cpsid	i
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	b662      	cpsie	i
 800865a:	60bb      	str	r3, [r7, #8]
}
 800865c:	bf00      	nop
 800865e:	e7fe      	b.n	800865e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008664:	1e5a      	subs	r2, r3, #1
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	429a      	cmp	r2, r3
 8008674:	d044      	beq.n	8008700 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800867a:	2b00      	cmp	r3, #0
 800867c:	d140      	bne.n	8008700 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	3304      	adds	r3, #4
 8008682:	4618      	mov	r0, r3
 8008684:	f7fe f972 	bl	800696c <uxListRemove>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d115      	bne.n	80086ba <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	491f      	ldr	r1, [pc, #124]	; (8008710 <xTaskPriorityDisinherit+0x10c>)
 8008694:	4613      	mov	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	4413      	add	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	440b      	add	r3, r1
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <xTaskPriorityDisinherit+0xb6>
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a8:	2201      	movs	r2, #1
 80086aa:	fa02 f303 	lsl.w	r3, r2, r3
 80086ae:	43da      	mvns	r2, r3
 80086b0:	4b18      	ldr	r3, [pc, #96]	; (8008714 <xTaskPriorityDisinherit+0x110>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	4013      	ands	r3, r2
 80086b6:	4a17      	ldr	r2, [pc, #92]	; (8008714 <xTaskPriorityDisinherit+0x110>)
 80086b8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c6:	f1c3 0207 	rsb	r2, r3, #7
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d2:	2201      	movs	r2, #1
 80086d4:	409a      	lsls	r2, r3
 80086d6:	4b0f      	ldr	r3, [pc, #60]	; (8008714 <xTaskPriorityDisinherit+0x110>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4313      	orrs	r3, r2
 80086dc:	4a0d      	ldr	r2, [pc, #52]	; (8008714 <xTaskPriorityDisinherit+0x110>)
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e4:	4613      	mov	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	4413      	add	r3, r2
 80086ea:	009b      	lsls	r3, r3, #2
 80086ec:	4a08      	ldr	r2, [pc, #32]	; (8008710 <xTaskPriorityDisinherit+0x10c>)
 80086ee:	441a      	add	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f7fe f8db 	bl	80068b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008700:	697b      	ldr	r3, [r7, #20]
	}
 8008702:	4618      	mov	r0, r3
 8008704:	3718      	adds	r7, #24
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20005518 	.word	0x20005518
 8008710:	2000551c 	.word	0x2000551c
 8008714:	20005620 	.word	0x20005620

08008718 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008718:	b580      	push	{r7, lr}
 800871a:	b088      	sub	sp, #32
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008726:	2301      	movs	r3, #1
 8008728:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8087 	beq.w	8008840 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10c      	bne.n	8008754 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873e:	b672      	cpsid	i
 8008740:	f383 8811 	msr	BASEPRI, r3
 8008744:	f3bf 8f6f 	isb	sy
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	b662      	cpsie	i
 800874e:	60fb      	str	r3, [r7, #12]
}
 8008750:	bf00      	nop
 8008752:	e7fe      	b.n	8008752 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d902      	bls.n	8008764 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	61fb      	str	r3, [r7, #28]
 8008762:	e002      	b.n	800876a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800876e:	69fa      	ldr	r2, [r7, #28]
 8008770:	429a      	cmp	r2, r3
 8008772:	d065      	beq.n	8008840 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008774:	69bb      	ldr	r3, [r7, #24]
 8008776:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008778:	697a      	ldr	r2, [r7, #20]
 800877a:	429a      	cmp	r2, r3
 800877c:	d160      	bne.n	8008840 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800877e:	4b32      	ldr	r3, [pc, #200]	; (8008848 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	429a      	cmp	r2, r3
 8008786:	d10c      	bne.n	80087a2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	b672      	cpsid	i
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	b662      	cpsie	i
 800879c:	60bb      	str	r3, [r7, #8]
}
 800879e:	bf00      	nop
 80087a0:	e7fe      	b.n	80087a0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	69fa      	ldr	r2, [r7, #28]
 80087ac:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	db04      	blt.n	80087c0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087b6:	69fb      	ldr	r3, [r7, #28]
 80087b8:	f1c3 0207 	rsb	r2, r3, #7
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	6959      	ldr	r1, [r3, #20]
 80087c4:	693a      	ldr	r2, [r7, #16]
 80087c6:	4613      	mov	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4413      	add	r3, r2
 80087cc:	009b      	lsls	r3, r3, #2
 80087ce:	4a1f      	ldr	r2, [pc, #124]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80087d0:	4413      	add	r3, r2
 80087d2:	4299      	cmp	r1, r3
 80087d4:	d134      	bne.n	8008840 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	3304      	adds	r3, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe f8c6 	bl	800696c <uxListRemove>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d115      	bne.n	8008812 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	4918      	ldr	r1, [pc, #96]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10a      	bne.n	8008812 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008800:	2201      	movs	r2, #1
 8008802:	fa02 f303 	lsl.w	r3, r2, r3
 8008806:	43da      	mvns	r2, r3
 8008808:	4b11      	ldr	r3, [pc, #68]	; (8008850 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4013      	ands	r3, r2
 800880e:	4a10      	ldr	r2, [pc, #64]	; (8008850 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008810:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	2201      	movs	r2, #1
 8008818:	409a      	lsls	r2, r3
 800881a:	4b0d      	ldr	r3, [pc, #52]	; (8008850 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4313      	orrs	r3, r2
 8008820:	4a0b      	ldr	r2, [pc, #44]	; (8008850 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008828:	4613      	mov	r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	4413      	add	r3, r2
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	4a06      	ldr	r2, [pc, #24]	; (800884c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8008832:	441a      	add	r2, r3
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	3304      	adds	r3, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4610      	mov	r0, r2
 800883c:	f7fe f839 	bl	80068b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008840:	bf00      	nop
 8008842:	3720      	adds	r7, #32
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20005518 	.word	0x20005518
 800884c:	2000551c 	.word	0x2000551c
 8008850:	20005620 	.word	0x20005620

08008854 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008858:	4b07      	ldr	r3, [pc, #28]	; (8008878 <pvTaskIncrementMutexHeldCount+0x24>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d004      	beq.n	800886a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008860:	4b05      	ldr	r3, [pc, #20]	; (8008878 <pvTaskIncrementMutexHeldCount+0x24>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008866:	3201      	adds	r2, #1
 8008868:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800886a:	4b03      	ldr	r3, [pc, #12]	; (8008878 <pvTaskIncrementMutexHeldCount+0x24>)
 800886c:	681b      	ldr	r3, [r3, #0]
	}
 800886e:	4618      	mov	r0, r3
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20005518 	.word	0x20005518

0800887c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008886:	4b29      	ldr	r3, [pc, #164]	; (800892c <prvAddCurrentTaskToDelayedList+0xb0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800888c:	4b28      	ldr	r3, [pc, #160]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3304      	adds	r3, #4
 8008892:	4618      	mov	r0, r3
 8008894:	f7fe f86a 	bl	800696c <uxListRemove>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10b      	bne.n	80088b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800889e:	4b24      	ldr	r3, [pc, #144]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a4:	2201      	movs	r2, #1
 80088a6:	fa02 f303 	lsl.w	r3, r2, r3
 80088aa:	43da      	mvns	r2, r3
 80088ac:	4b21      	ldr	r3, [pc, #132]	; (8008934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4013      	ands	r3, r2
 80088b2:	4a20      	ldr	r2, [pc, #128]	; (8008934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80088b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088bc:	d10a      	bne.n	80088d4 <prvAddCurrentTaskToDelayedList+0x58>
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088c4:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	3304      	adds	r3, #4
 80088ca:	4619      	mov	r1, r3
 80088cc:	481a      	ldr	r0, [pc, #104]	; (8008938 <prvAddCurrentTaskToDelayedList+0xbc>)
 80088ce:	f7fd fff0 	bl	80068b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088d2:	e026      	b.n	8008922 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088d4:	68fa      	ldr	r2, [r7, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4413      	add	r3, r2
 80088da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088dc:	4b14      	ldr	r3, [pc, #80]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d209      	bcs.n	8008900 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088ec:	4b13      	ldr	r3, [pc, #76]	; (800893c <prvAddCurrentTaskToDelayedList+0xc0>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4619      	mov	r1, r3
 80088f8:	4610      	mov	r0, r2
 80088fa:	f7fd fffe 	bl	80068fa <vListInsert>
}
 80088fe:	e010      	b.n	8008922 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008900:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	4b0a      	ldr	r3, [pc, #40]	; (8008930 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3304      	adds	r3, #4
 800890a:	4619      	mov	r1, r3
 800890c:	4610      	mov	r0, r2
 800890e:	f7fd fff4 	bl	80068fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008912:	4b0c      	ldr	r3, [pc, #48]	; (8008944 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	429a      	cmp	r2, r3
 800891a:	d202      	bcs.n	8008922 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800891c:	4a09      	ldr	r2, [pc, #36]	; (8008944 <prvAddCurrentTaskToDelayedList+0xc8>)
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	6013      	str	r3, [r2, #0]
}
 8008922:	bf00      	nop
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	2000561c 	.word	0x2000561c
 8008930:	20005518 	.word	0x20005518
 8008934:	20005620 	.word	0x20005620
 8008938:	20005604 	.word	0x20005604
 800893c:	200055d4 	.word	0x200055d4
 8008940:	200055d0 	.word	0x200055d0
 8008944:	20005638 	.word	0x20005638

08008948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	3b04      	subs	r3, #4
 8008958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	3b04      	subs	r3, #4
 8008966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	f023 0201 	bic.w	r2, r3, #1
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3b04      	subs	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008978:	4a0c      	ldr	r2, [pc, #48]	; (80089ac <pxPortInitialiseStack+0x64>)
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b14      	subs	r3, #20
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b04      	subs	r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f06f 0202 	mvn.w	r2, #2
 8008996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	3b20      	subs	r3, #32
 800899c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800899e:	68fb      	ldr	r3, [r7, #12]
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3714      	adds	r7, #20
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	080089b1 	.word	0x080089b1

080089b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	b085      	sub	sp, #20
 80089b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089b6:	2300      	movs	r3, #0
 80089b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ba:	4b14      	ldr	r3, [pc, #80]	; (8008a0c <prvTaskExitError+0x5c>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089c2:	d00c      	beq.n	80089de <prvTaskExitError+0x2e>
	__asm volatile
 80089c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c8:	b672      	cpsid	i
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	b662      	cpsie	i
 80089d8:	60fb      	str	r3, [r7, #12]
}
 80089da:	bf00      	nop
 80089dc:	e7fe      	b.n	80089dc <prvTaskExitError+0x2c>
	__asm volatile
 80089de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e2:	b672      	cpsid	i
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	b662      	cpsie	i
 80089f2:	60bb      	str	r3, [r7, #8]
}
 80089f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089f6:	bf00      	nop
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d0fc      	beq.n	80089f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	3714      	adds	r7, #20
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr
 8008a0c:	20000030 	.word	0x20000030

08008a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a10:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <pxCurrentTCBConst2>)
 8008a12:	6819      	ldr	r1, [r3, #0]
 8008a14:	6808      	ldr	r0, [r1, #0]
 8008a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1a:	f380 8809 	msr	PSP, r0
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f04f 0000 	mov.w	r0, #0
 8008a26:	f380 8811 	msr	BASEPRI, r0
 8008a2a:	4770      	bx	lr
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst2>:
 8008a30:	20005518 	.word	0x20005518
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a38:	4808      	ldr	r0, [pc, #32]	; (8008a5c <prvPortStartFirstTask+0x24>)
 8008a3a:	6800      	ldr	r0, [r0, #0]
 8008a3c:	6800      	ldr	r0, [r0, #0]
 8008a3e:	f380 8808 	msr	MSP, r0
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8814 	msr	CONTROL, r0
 8008a4a:	b662      	cpsie	i
 8008a4c:	b661      	cpsie	f
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	f3bf 8f6f 	isb	sy
 8008a56:	df00      	svc	0
 8008a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a5a:	bf00      	nop
 8008a5c:	e000ed08 	.word	0xe000ed08

08008a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a66:	4b37      	ldr	r3, [pc, #220]	; (8008b44 <xPortStartScheduler+0xe4>)
 8008a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b2db      	uxtb	r3, r3
 8008a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	22ff      	movs	r2, #255	; 0xff
 8008a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a80:	78fb      	ldrb	r3, [r7, #3]
 8008a82:	b2db      	uxtb	r3, r3
 8008a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	4b2f      	ldr	r3, [pc, #188]	; (8008b48 <xPortStartScheduler+0xe8>)
 8008a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a8e:	4b2f      	ldr	r3, [pc, #188]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a90:	2207      	movs	r2, #7
 8008a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a94:	e009      	b.n	8008aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a96:	4b2d      	ldr	r3, [pc, #180]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	4a2b      	ldr	r2, [pc, #172]	; (8008b4c <xPortStartScheduler+0xec>)
 8008a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa0:	78fb      	ldrb	r3, [r7, #3]
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	005b      	lsls	r3, r3, #1
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aaa:	78fb      	ldrb	r3, [r7, #3]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ab2:	2b80      	cmp	r3, #128	; 0x80
 8008ab4:	d0ef      	beq.n	8008a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab6:	4b25      	ldr	r3, [pc, #148]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f1c3 0307 	rsb	r3, r3, #7
 8008abe:	2b04      	cmp	r3, #4
 8008ac0:	d00c      	beq.n	8008adc <xPortStartScheduler+0x7c>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	b672      	cpsid	i
 8008ac8:	f383 8811 	msr	BASEPRI, r3
 8008acc:	f3bf 8f6f 	isb	sy
 8008ad0:	f3bf 8f4f 	dsb	sy
 8008ad4:	b662      	cpsie	i
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	e7fe      	b.n	8008ada <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	021b      	lsls	r3, r3, #8
 8008ae2:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ae4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae6:	4b19      	ldr	r3, [pc, #100]	; (8008b4c <xPortStartScheduler+0xec>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008aee:	4a17      	ldr	r2, [pc, #92]	; (8008b4c <xPortStartScheduler+0xec>)
 8008af0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	b2da      	uxtb	r2, r3
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008afa:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a11      	ldr	r2, [pc, #68]	; (8008b50 <xPortStartScheduler+0xf0>)
 8008b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b12:	f000 f8dd 	bl	8008cd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <xPortStartScheduler+0xf4>)
 8008b18:	2200      	movs	r2, #0
 8008b1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b1c:	f000 f8fc 	bl	8008d18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b20:	4b0d      	ldr	r3, [pc, #52]	; (8008b58 <xPortStartScheduler+0xf8>)
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0c      	ldr	r2, [pc, #48]	; (8008b58 <xPortStartScheduler+0xf8>)
 8008b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b2c:	f7ff ff84 	bl	8008a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b30:	f7ff fa82 	bl	8008038 <vTaskSwitchContext>
	prvTaskExitError();
 8008b34:	f7ff ff3c 	bl	80089b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	e000e400 	.word	0xe000e400
 8008b48:	20005644 	.word	0x20005644
 8008b4c:	20005648 	.word	0x20005648
 8008b50:	e000ed20 	.word	0xe000ed20
 8008b54:	20000030 	.word	0x20000030
 8008b58:	e000ef34 	.word	0xe000ef34

08008b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	b672      	cpsid	i
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	b662      	cpsie	i
 8008b76:	607b      	str	r3, [r7, #4]
}
 8008b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b7a:	4b10      	ldr	r3, [pc, #64]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3301      	adds	r3, #1
 8008b80:	4a0e      	ldr	r2, [pc, #56]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b84:	4b0d      	ldr	r3, [pc, #52]	; (8008bbc <vPortEnterCritical+0x60>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d111      	bne.n	8008bb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <vPortEnterCritical+0x64>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d00c      	beq.n	8008bb0 <vPortEnterCritical+0x54>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9a:	b672      	cpsid	i
 8008b9c:	f383 8811 	msr	BASEPRI, r3
 8008ba0:	f3bf 8f6f 	isb	sy
 8008ba4:	f3bf 8f4f 	dsb	sy
 8008ba8:	b662      	cpsie	i
 8008baa:	603b      	str	r3, [r7, #0]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vPortEnterCritical+0x52>
	}
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr
 8008bbc:	20000030 	.word	0x20000030
 8008bc0:	e000ed04 	.word	0xe000ed04

08008bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bca:	4b13      	ldr	r3, [pc, #76]	; (8008c18 <vPortExitCritical+0x54>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10c      	bne.n	8008bec <vPortExitCritical+0x28>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	b672      	cpsid	i
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	b662      	cpsie	i
 8008be6:	607b      	str	r3, [r7, #4]
}
 8008be8:	bf00      	nop
 8008bea:	e7fe      	b.n	8008bea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <vPortExitCritical+0x54>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4a09      	ldr	r2, [pc, #36]	; (8008c18 <vPortExitCritical+0x54>)
 8008bf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bf6:	4b08      	ldr	r3, [pc, #32]	; (8008c18 <vPortExitCritical+0x54>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d105      	bne.n	8008c0a <vPortExitCritical+0x46>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	f383 8811 	msr	BASEPRI, r3
}
 8008c08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c14:	4770      	bx	lr
 8008c16:	bf00      	nop
 8008c18:	20000030 	.word	0x20000030
 8008c1c:	00000000 	.word	0x00000000

08008c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c20:	f3ef 8009 	mrs	r0, PSP
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4b15      	ldr	r3, [pc, #84]	; (8008c80 <pxCurrentTCBConst>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	f01e 0f10 	tst.w	lr, #16
 8008c30:	bf08      	it	eq
 8008c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c44:	b672      	cpsid	i
 8008c46:	f380 8811 	msr	BASEPRI, r0
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	f3bf 8f6f 	isb	sy
 8008c52:	b662      	cpsie	i
 8008c54:	f7ff f9f0 	bl	8008038 <vTaskSwitchContext>
 8008c58:	f04f 0000 	mov.w	r0, #0
 8008c5c:	f380 8811 	msr	BASEPRI, r0
 8008c60:	bc09      	pop	{r0, r3}
 8008c62:	6819      	ldr	r1, [r3, #0]
 8008c64:	6808      	ldr	r0, [r1, #0]
 8008c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c6a:	f01e 0f10 	tst.w	lr, #16
 8008c6e:	bf08      	it	eq
 8008c70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c74:	f380 8809 	msr	PSP, r0
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop

08008c80 <pxCurrentTCBConst>:
 8008c80:	20005518 	.word	0x20005518
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c92:	b672      	cpsid	i
 8008c94:	f383 8811 	msr	BASEPRI, r3
 8008c98:	f3bf 8f6f 	isb	sy
 8008c9c:	f3bf 8f4f 	dsb	sy
 8008ca0:	b662      	cpsie	i
 8008ca2:	607b      	str	r3, [r7, #4]
}
 8008ca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ca6:	f7ff f90d 	bl	8007ec4 <xTaskIncrementTick>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <SysTick_Handler+0x44>)
 8008cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cb6:	601a      	str	r2, [r3, #0]
 8008cb8:	2300      	movs	r3, #0
 8008cba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	f383 8811 	msr	BASEPRI, r3
}
 8008cc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cc4:	bf00      	nop
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	e000ed04 	.word	0xe000ed04

08008cd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd4:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <vPortSetupTimerInterrupt+0x34>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <vPortSetupTimerInterrupt+0x38>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ce0:	4b0a      	ldr	r3, [pc, #40]	; (8008d0c <vPortSetupTimerInterrupt+0x3c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a0a      	ldr	r2, [pc, #40]	; (8008d10 <vPortSetupTimerInterrupt+0x40>)
 8008ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8008cea:	099b      	lsrs	r3, r3, #6
 8008cec:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <vPortSetupTimerInterrupt+0x44>)
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cf2:	4b04      	ldr	r3, [pc, #16]	; (8008d04 <vPortSetupTimerInterrupt+0x34>)
 8008cf4:	2207      	movs	r2, #7
 8008cf6:	601a      	str	r2, [r3, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	e000e010 	.word	0xe000e010
 8008d08:	e000e018 	.word	0xe000e018
 8008d0c:	20000010 	.word	0x20000010
 8008d10:	10624dd3 	.word	0x10624dd3
 8008d14:	e000e014 	.word	0xe000e014

08008d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d28 <vPortEnableVFP+0x10>
 8008d1c:	6801      	ldr	r1, [r0, #0]
 8008d1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d22:	6001      	str	r1, [r0, #0]
 8008d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d26:	bf00      	nop
 8008d28:	e000ed88 	.word	0xe000ed88

08008d2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b085      	sub	sp, #20
 8008d30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d32:	f3ef 8305 	mrs	r3, IPSR
 8008d36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	2b0f      	cmp	r3, #15
 8008d3c:	d916      	bls.n	8008d6c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d3e:	4a19      	ldr	r2, [pc, #100]	; (8008da4 <vPortValidateInterruptPriority+0x78>)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	4413      	add	r3, r2
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d48:	4b17      	ldr	r3, [pc, #92]	; (8008da8 <vPortValidateInterruptPriority+0x7c>)
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	7afa      	ldrb	r2, [r7, #11]
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d20c      	bcs.n	8008d6c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d56:	b672      	cpsid	i
 8008d58:	f383 8811 	msr	BASEPRI, r3
 8008d5c:	f3bf 8f6f 	isb	sy
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	b662      	cpsie	i
 8008d66:	607b      	str	r3, [r7, #4]
}
 8008d68:	bf00      	nop
 8008d6a:	e7fe      	b.n	8008d6a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d6c:	4b0f      	ldr	r3, [pc, #60]	; (8008dac <vPortValidateInterruptPriority+0x80>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d74:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <vPortValidateInterruptPriority+0x84>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	429a      	cmp	r2, r3
 8008d7a:	d90c      	bls.n	8008d96 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	603b      	str	r3, [r7, #0]
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <vPortValidateInterruptPriority+0x68>
	}
 8008d96:	bf00      	nop
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr
 8008da2:	bf00      	nop
 8008da4:	e000e3f0 	.word	0xe000e3f0
 8008da8:	20005644 	.word	0x20005644
 8008dac:	e000ed0c 	.word	0xe000ed0c
 8008db0:	20005648 	.word	0x20005648

08008db4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b08a      	sub	sp, #40	; 0x28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008dc0:	f7fe ffb2 	bl	8007d28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dc4:	4b5b      	ldr	r3, [pc, #364]	; (8008f34 <pvPortMalloc+0x180>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d101      	bne.n	8008dd0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dcc:	f000 f91a 	bl	8009004 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dd0:	4b59      	ldr	r3, [pc, #356]	; (8008f38 <pvPortMalloc+0x184>)
 8008dd2:	681a      	ldr	r2, [r3, #0]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	f040 8092 	bne.w	8008f02 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d01f      	beq.n	8008e24 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8008de4:	2208      	movs	r2, #8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f003 0307 	and.w	r3, r3, #7
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d016      	beq.n	8008e24 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f023 0307 	bic.w	r3, r3, #7
 8008dfc:	3308      	adds	r3, #8
 8008dfe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f003 0307 	and.w	r3, r3, #7
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00c      	beq.n	8008e24 <pvPortMalloc+0x70>
	__asm volatile
 8008e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0e:	b672      	cpsid	i
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	b662      	cpsie	i
 8008e1e:	617b      	str	r3, [r7, #20]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d06b      	beq.n	8008f02 <pvPortMalloc+0x14e>
 8008e2a:	4b44      	ldr	r3, [pc, #272]	; (8008f3c <pvPortMalloc+0x188>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d866      	bhi.n	8008f02 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e34:	4b42      	ldr	r3, [pc, #264]	; (8008f40 <pvPortMalloc+0x18c>)
 8008e36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e38:	4b41      	ldr	r3, [pc, #260]	; (8008f40 <pvPortMalloc+0x18c>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e3e:	e004      	b.n	8008e4a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	687a      	ldr	r2, [r7, #4]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d903      	bls.n	8008e5c <pvPortMalloc+0xa8>
 8008e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1f1      	bne.n	8008e40 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e5c:	4b35      	ldr	r3, [pc, #212]	; (8008f34 <pvPortMalloc+0x180>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d04d      	beq.n	8008f02 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e66:	6a3b      	ldr	r3, [r7, #32]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	4413      	add	r3, r2
 8008e6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	1ad2      	subs	r2, r2, r3
 8008e80:	2308      	movs	r3, #8
 8008e82:	005b      	lsls	r3, r3, #1
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d921      	bls.n	8008ecc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4413      	add	r3, r2
 8008e8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e90:	69bb      	ldr	r3, [r7, #24]
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d00c      	beq.n	8008eb4 <pvPortMalloc+0x100>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	b672      	cpsid	i
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	b662      	cpsie	i
 8008eae:	613b      	str	r3, [r7, #16]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1ad2      	subs	r2, r2, r3
 8008ebc:	69bb      	ldr	r3, [r7, #24]
 8008ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008ec6:	69b8      	ldr	r0, [r7, #24]
 8008ec8:	f000 f8fe 	bl	80090c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ecc:	4b1b      	ldr	r3, [pc, #108]	; (8008f3c <pvPortMalloc+0x188>)
 8008ece:	681a      	ldr	r2, [r3, #0]
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	1ad3      	subs	r3, r2, r3
 8008ed6:	4a19      	ldr	r2, [pc, #100]	; (8008f3c <pvPortMalloc+0x188>)
 8008ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eda:	4b18      	ldr	r3, [pc, #96]	; (8008f3c <pvPortMalloc+0x188>)
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b19      	ldr	r3, [pc, #100]	; (8008f44 <pvPortMalloc+0x190>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d203      	bcs.n	8008eee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ee6:	4b15      	ldr	r3, [pc, #84]	; (8008f3c <pvPortMalloc+0x188>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a16      	ldr	r2, [pc, #88]	; (8008f44 <pvPortMalloc+0x190>)
 8008eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef0:	685a      	ldr	r2, [r3, #4]
 8008ef2:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <pvPortMalloc+0x184>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efe:	2200      	movs	r2, #0
 8008f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f02:	f7fe ff1f 	bl	8007d44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	f003 0307 	and.w	r3, r3, #7
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00c      	beq.n	8008f2a <pvPortMalloc+0x176>
	__asm volatile
 8008f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f14:	b672      	cpsid	i
 8008f16:	f383 8811 	msr	BASEPRI, r3
 8008f1a:	f3bf 8f6f 	isb	sy
 8008f1e:	f3bf 8f4f 	dsb	sy
 8008f22:	b662      	cpsie	i
 8008f24:	60fb      	str	r3, [r7, #12]
}
 8008f26:	bf00      	nop
 8008f28:	e7fe      	b.n	8008f28 <pvPortMalloc+0x174>
	return pvReturn;
 8008f2a:	69fb      	ldr	r3, [r7, #28]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3728      	adds	r7, #40	; 0x28
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}
 8008f34:	20009254 	.word	0x20009254
 8008f38:	20009260 	.word	0x20009260
 8008f3c:	20009258 	.word	0x20009258
 8008f40:	2000924c 	.word	0x2000924c
 8008f44:	2000925c 	.word	0x2000925c

08008f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04c      	beq.n	8008ff4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f5a:	2308      	movs	r3, #8
 8008f5c:	425b      	negs	r3, r3
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4b23      	ldr	r3, [pc, #140]	; (8008ffc <vPortFree+0xb4>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10c      	bne.n	8008f90 <vPortFree+0x48>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	b672      	cpsid	i
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	b662      	cpsie	i
 8008f8a:	60fb      	str	r3, [r7, #12]
}
 8008f8c:	bf00      	nop
 8008f8e:	e7fe      	b.n	8008f8e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <vPortFree+0x6a>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	b672      	cpsid	i
 8008f9e:	f383 8811 	msr	BASEPRI, r3
 8008fa2:	f3bf 8f6f 	isb	sy
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	b662      	cpsie	i
 8008fac:	60bb      	str	r3, [r7, #8]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <vPortFree+0xb4>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d019      	beq.n	8008ff4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d115      	bne.n	8008ff4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <vPortFree+0xb4>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	43db      	mvns	r3, r3
 8008fd2:	401a      	ands	r2, r3
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fd8:	f7fe fea6 	bl	8007d28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	685a      	ldr	r2, [r3, #4]
 8008fe0:	4b07      	ldr	r3, [pc, #28]	; (8009000 <vPortFree+0xb8>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4413      	add	r3, r2
 8008fe6:	4a06      	ldr	r2, [pc, #24]	; (8009000 <vPortFree+0xb8>)
 8008fe8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fea:	6938      	ldr	r0, [r7, #16]
 8008fec:	f000 f86c 	bl	80090c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008ff0:	f7fe fea8 	bl	8007d44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ff4:	bf00      	nop
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	20009260 	.word	0x20009260
 8009000:	20009258 	.word	0x20009258

08009004 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800900a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800900e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009010:	4b27      	ldr	r3, [pc, #156]	; (80090b0 <prvHeapInit+0xac>)
 8009012:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	2b00      	cmp	r3, #0
 800901c:	d00c      	beq.n	8009038 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	3307      	adds	r3, #7
 8009022:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f023 0307 	bic.w	r3, r3, #7
 800902a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	1ad3      	subs	r3, r2, r3
 8009032:	4a1f      	ldr	r2, [pc, #124]	; (80090b0 <prvHeapInit+0xac>)
 8009034:	4413      	add	r3, r2
 8009036:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <prvHeapInit+0xb0>)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009042:	4b1c      	ldr	r3, [pc, #112]	; (80090b4 <prvHeapInit+0xb0>)
 8009044:	2200      	movs	r2, #0
 8009046:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	4413      	add	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009050:	2208      	movs	r2, #8
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	1a9b      	subs	r3, r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0307 	bic.w	r3, r3, #7
 800905e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	4a15      	ldr	r2, [pc, #84]	; (80090b8 <prvHeapInit+0xb4>)
 8009064:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009066:	4b14      	ldr	r3, [pc, #80]	; (80090b8 <prvHeapInit+0xb4>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2200      	movs	r2, #0
 800906c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800906e:	4b12      	ldr	r3, [pc, #72]	; (80090b8 <prvHeapInit+0xb4>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	68fa      	ldr	r2, [r7, #12]
 800907e:	1ad2      	subs	r2, r2, r3
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <prvHeapInit+0xb4>)
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	685b      	ldr	r3, [r3, #4]
 8009090:	4a0a      	ldr	r2, [pc, #40]	; (80090bc <prvHeapInit+0xb8>)
 8009092:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4a09      	ldr	r2, [pc, #36]	; (80090c0 <prvHeapInit+0xbc>)
 800909a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800909c:	4b09      	ldr	r3, [pc, #36]	; (80090c4 <prvHeapInit+0xc0>)
 800909e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80090a2:	601a      	str	r2, [r3, #0]
}
 80090a4:	bf00      	nop
 80090a6:	3714      	adds	r7, #20
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr
 80090b0:	2000564c 	.word	0x2000564c
 80090b4:	2000924c 	.word	0x2000924c
 80090b8:	20009254 	.word	0x20009254
 80090bc:	2000925c 	.word	0x2000925c
 80090c0:	20009258 	.word	0x20009258
 80090c4:	20009260 	.word	0x20009260

080090c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090d0:	4b28      	ldr	r3, [pc, #160]	; (8009174 <prvInsertBlockIntoFreeList+0xac>)
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <prvInsertBlockIntoFreeList+0x14>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d8f7      	bhi.n	80090d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	685b      	ldr	r3, [r3, #4]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	4413      	add	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d108      	bne.n	800910a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	441a      	add	r2, r3
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	441a      	add	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	429a      	cmp	r2, r3
 800911c:	d118      	bne.n	8009150 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	4b15      	ldr	r3, [pc, #84]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d00d      	beq.n	8009146 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	441a      	add	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	e008      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <prvInsertBlockIntoFreeList+0xb0>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e003      	b.n	8009158 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	429a      	cmp	r2, r3
 800915e:	d002      	beq.n	8009166 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009166:	bf00      	nop
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	2000924c 	.word	0x2000924c
 8009178:	20009254 	.word	0x20009254

0800917c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8009186:	f009 fd0d 	bl	8012ba4 <sys_timeouts_sleeptime>
 800918a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009192:	d10b      	bne.n	80091ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8009194:	4813      	ldr	r0, [pc, #76]	; (80091e4 <tcpip_timeouts_mbox_fetch+0x68>)
 8009196:	f00e fc3a 	bl	8017a0e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800919a:	2200      	movs	r2, #0
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f00e fbac 	bl	80178fc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80091a4:	480f      	ldr	r0, [pc, #60]	; (80091e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80091a6:	f00e fc23 	bl	80179f0 <sys_mutex_lock>
    return;
 80091aa:	e018      	b.n	80091de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d102      	bne.n	80091b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80091b2:	f009 fcbd 	bl	8012b30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80091b6:	e7e6      	b.n	8009186 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80091b8:	480a      	ldr	r0, [pc, #40]	; (80091e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80091ba:	f00e fc28 	bl	8017a0e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	6839      	ldr	r1, [r7, #0]
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f00e fb9a 	bl	80178fc <sys_arch_mbox_fetch>
 80091c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80091ca:	4806      	ldr	r0, [pc, #24]	; (80091e4 <tcpip_timeouts_mbox_fetch+0x68>)
 80091cc:	f00e fc10 	bl	80179f0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d102      	bne.n	80091de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80091d8:	f009 fcaa 	bl	8012b30 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80091dc:	e7d3      	b.n	8009186 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80091de:	3710      	adds	r7, #16
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20009270 	.word	0x20009270

080091e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b084      	sub	sp, #16
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80091f0:	4810      	ldr	r0, [pc, #64]	; (8009234 <tcpip_thread+0x4c>)
 80091f2:	f00e fbfd 	bl	80179f0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80091f6:	4b10      	ldr	r3, [pc, #64]	; (8009238 <tcpip_thread+0x50>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d005      	beq.n	800920a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80091fe:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <tcpip_thread+0x50>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a0e      	ldr	r2, [pc, #56]	; (800923c <tcpip_thread+0x54>)
 8009204:	6812      	ldr	r2, [r2, #0]
 8009206:	4610      	mov	r0, r2
 8009208:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800920a:	f107 030c 	add.w	r3, r7, #12
 800920e:	4619      	mov	r1, r3
 8009210:	480b      	ldr	r0, [pc, #44]	; (8009240 <tcpip_thread+0x58>)
 8009212:	f7ff ffb3 	bl	800917c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d106      	bne.n	800922a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800921c:	4b09      	ldr	r3, [pc, #36]	; (8009244 <tcpip_thread+0x5c>)
 800921e:	2291      	movs	r2, #145	; 0x91
 8009220:	4909      	ldr	r1, [pc, #36]	; (8009248 <tcpip_thread+0x60>)
 8009222:	480a      	ldr	r0, [pc, #40]	; (800924c <tcpip_thread+0x64>)
 8009224:	f00e fdc2 	bl	8017dac <iprintf>
      continue;
 8009228:	e003      	b.n	8009232 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	4618      	mov	r0, r3
 800922e:	f000 f80f 	bl	8009250 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8009232:	e7ea      	b.n	800920a <tcpip_thread+0x22>
 8009234:	20009270 	.word	0x20009270
 8009238:	20009264 	.word	0x20009264
 800923c:	20009268 	.word	0x20009268
 8009240:	2000926c 	.word	0x2000926c
 8009244:	08018d90 	.word	0x08018d90
 8009248:	08018dc0 	.word	0x08018dc0
 800924c:	08018de0 	.word	0x08018de0

08009250 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d026      	beq.n	80092ae <tcpip_thread_handle_msg+0x5e>
 8009260:	2b02      	cmp	r3, #2
 8009262:	dc2b      	bgt.n	80092bc <tcpip_thread_handle_msg+0x6c>
 8009264:	2b00      	cmp	r3, #0
 8009266:	d002      	beq.n	800926e <tcpip_thread_handle_msg+0x1e>
 8009268:	2b01      	cmp	r3, #1
 800926a:	d015      	beq.n	8009298 <tcpip_thread_handle_msg+0x48>
 800926c:	e026      	b.n	80092bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	6850      	ldr	r0, [r2, #4]
 8009276:	687a      	ldr	r2, [r7, #4]
 8009278:	6892      	ldr	r2, [r2, #8]
 800927a:	4611      	mov	r1, r2
 800927c:	4798      	blx	r3
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d004      	beq.n	800928e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	4618      	mov	r0, r3
 800928a:	f003 f845 	bl	800c318 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800928e:	6879      	ldr	r1, [r7, #4]
 8009290:	2009      	movs	r0, #9
 8009292:	f002 f991 	bl	800b5b8 <memp_free>
      break;
 8009296:	e018      	b.n	80092ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	6892      	ldr	r2, [r2, #8]
 80092a0:	4610      	mov	r0, r2
 80092a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	2008      	movs	r0, #8
 80092a8:	f002 f986 	bl	800b5b8 <memp_free>
      break;
 80092ac:	e00d      	b.n	80092ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	6892      	ldr	r2, [r2, #8]
 80092b6:	4610      	mov	r0, r2
 80092b8:	4798      	blx	r3
      break;
 80092ba:	e006      	b.n	80092ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80092bc:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <tcpip_thread_handle_msg+0x84>)
 80092be:	22cf      	movs	r2, #207	; 0xcf
 80092c0:	4905      	ldr	r1, [pc, #20]	; (80092d8 <tcpip_thread_handle_msg+0x88>)
 80092c2:	4806      	ldr	r0, [pc, #24]	; (80092dc <tcpip_thread_handle_msg+0x8c>)
 80092c4:	f00e fd72 	bl	8017dac <iprintf>
      break;
 80092c8:	bf00      	nop
  }
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	08018d90 	.word	0x08018d90
 80092d8:	08018dc0 	.word	0x08018dc0
 80092dc:	08018de0 	.word	0x08018de0

080092e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80092ec:	481a      	ldr	r0, [pc, #104]	; (8009358 <tcpip_inpkt+0x78>)
 80092ee:	f00e fb44 	bl	801797a <sys_mbox_valid>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d105      	bne.n	8009304 <tcpip_inpkt+0x24>
 80092f8:	4b18      	ldr	r3, [pc, #96]	; (800935c <tcpip_inpkt+0x7c>)
 80092fa:	22fc      	movs	r2, #252	; 0xfc
 80092fc:	4918      	ldr	r1, [pc, #96]	; (8009360 <tcpip_inpkt+0x80>)
 80092fe:	4819      	ldr	r0, [pc, #100]	; (8009364 <tcpip_inpkt+0x84>)
 8009300:	f00e fd54 	bl	8017dac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009304:	2009      	movs	r0, #9
 8009306:	f002 f8e1 	bl	800b4cc <memp_malloc>
 800930a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d102      	bne.n	8009318 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009312:	f04f 33ff 	mov.w	r3, #4294967295
 8009316:	e01a      	b.n	800934e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2200      	movs	r2, #0
 800931c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009330:	6979      	ldr	r1, [r7, #20]
 8009332:	4809      	ldr	r0, [pc, #36]	; (8009358 <tcpip_inpkt+0x78>)
 8009334:	f00e fac8 	bl	80178c8 <sys_mbox_trypost>
 8009338:	4603      	mov	r3, r0
 800933a:	2b00      	cmp	r3, #0
 800933c:	d006      	beq.n	800934c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800933e:	6979      	ldr	r1, [r7, #20]
 8009340:	2009      	movs	r0, #9
 8009342:	f002 f939 	bl	800b5b8 <memp_free>
    return ERR_MEM;
 8009346:	f04f 33ff 	mov.w	r3, #4294967295
 800934a:	e000      	b.n	800934e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800934c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800934e:	4618      	mov	r0, r3
 8009350:	3718      	adds	r7, #24
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	2000926c 	.word	0x2000926c
 800935c:	08018d90 	.word	0x08018d90
 8009360:	08018e08 	.word	0x08018e08
 8009364:	08018de0 	.word	0x08018de0

08009368 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009378:	f003 0318 	and.w	r3, r3, #24
 800937c:	2b00      	cmp	r3, #0
 800937e:	d006      	beq.n	800938e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009380:	4a08      	ldr	r2, [pc, #32]	; (80093a4 <tcpip_input+0x3c>)
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f7ff ffab 	bl	80092e0 <tcpip_inpkt>
 800938a:	4603      	mov	r3, r0
 800938c:	e005      	b.n	800939a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800938e:	4a06      	ldr	r2, [pc, #24]	; (80093a8 <tcpip_input+0x40>)
 8009390:	6839      	ldr	r1, [r7, #0]
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f7ff ffa4 	bl	80092e0 <tcpip_inpkt>
 8009398:	4603      	mov	r3, r0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3708      	adds	r7, #8
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}
 80093a2:	bf00      	nop
 80093a4:	080176d9 	.word	0x080176d9
 80093a8:	080165a5 	.word	0x080165a5

080093ac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b084      	sub	sp, #16
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80093b6:	4819      	ldr	r0, [pc, #100]	; (800941c <tcpip_try_callback+0x70>)
 80093b8:	f00e fadf 	bl	801797a <sys_mbox_valid>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <tcpip_try_callback+0x24>
 80093c2:	4b17      	ldr	r3, [pc, #92]	; (8009420 <tcpip_try_callback+0x74>)
 80093c4:	f240 125d 	movw	r2, #349	; 0x15d
 80093c8:	4916      	ldr	r1, [pc, #88]	; (8009424 <tcpip_try_callback+0x78>)
 80093ca:	4817      	ldr	r0, [pc, #92]	; (8009428 <tcpip_try_callback+0x7c>)
 80093cc:	f00e fcee 	bl	8017dac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80093d0:	2008      	movs	r0, #8
 80093d2:	f002 f87b 	bl	800b4cc <memp_malloc>
 80093d6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d102      	bne.n	80093e4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80093de:	f04f 33ff 	mov.w	r3, #4294967295
 80093e2:	e017      	b.n	8009414 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2201      	movs	r2, #1
 80093e8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	687a      	ldr	r2, [r7, #4]
 80093ee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	683a      	ldr	r2, [r7, #0]
 80093f4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80093f6:	68f9      	ldr	r1, [r7, #12]
 80093f8:	4808      	ldr	r0, [pc, #32]	; (800941c <tcpip_try_callback+0x70>)
 80093fa:	f00e fa65 	bl	80178c8 <sys_mbox_trypost>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d006      	beq.n	8009412 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009404:	68f9      	ldr	r1, [r7, #12]
 8009406:	2008      	movs	r0, #8
 8009408:	f002 f8d6 	bl	800b5b8 <memp_free>
    return ERR_MEM;
 800940c:	f04f 33ff 	mov.w	r3, #4294967295
 8009410:	e000      	b.n	8009414 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3710      	adds	r7, #16
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	2000926c 	.word	0x2000926c
 8009420:	08018d90 	.word	0x08018d90
 8009424:	08018e08 	.word	0x08018e08
 8009428:	08018de0 	.word	0x08018de0

0800942c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af02      	add	r7, sp, #8
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009436:	f001 fb9f 	bl	800ab78 <lwip_init>

  tcpip_init_done = initfunc;
 800943a:	4a17      	ldr	r2, [pc, #92]	; (8009498 <tcpip_init+0x6c>)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009440:	4a16      	ldr	r2, [pc, #88]	; (800949c <tcpip_init+0x70>)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009446:	2106      	movs	r1, #6
 8009448:	4815      	ldr	r0, [pc, #84]	; (80094a0 <tcpip_init+0x74>)
 800944a:	f00e fa1b 	bl	8017884 <sys_mbox_new>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d006      	beq.n	8009462 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009454:	4b13      	ldr	r3, [pc, #76]	; (80094a4 <tcpip_init+0x78>)
 8009456:	f240 2261 	movw	r2, #609	; 0x261
 800945a:	4913      	ldr	r1, [pc, #76]	; (80094a8 <tcpip_init+0x7c>)
 800945c:	4813      	ldr	r0, [pc, #76]	; (80094ac <tcpip_init+0x80>)
 800945e:	f00e fca5 	bl	8017dac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009462:	4813      	ldr	r0, [pc, #76]	; (80094b0 <tcpip_init+0x84>)
 8009464:	f00e faa8 	bl	80179b8 <sys_mutex_new>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d006      	beq.n	800947c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800946e:	4b0d      	ldr	r3, [pc, #52]	; (80094a4 <tcpip_init+0x78>)
 8009470:	f240 2265 	movw	r2, #613	; 0x265
 8009474:	490f      	ldr	r1, [pc, #60]	; (80094b4 <tcpip_init+0x88>)
 8009476:	480d      	ldr	r0, [pc, #52]	; (80094ac <tcpip_init+0x80>)
 8009478:	f00e fc98 	bl	8017dac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800947c:	2300      	movs	r3, #0
 800947e:	9300      	str	r3, [sp, #0]
 8009480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009484:	2200      	movs	r2, #0
 8009486:	490c      	ldr	r1, [pc, #48]	; (80094b8 <tcpip_init+0x8c>)
 8009488:	480c      	ldr	r0, [pc, #48]	; (80094bc <tcpip_init+0x90>)
 800948a:	f00e facd 	bl	8017a28 <sys_thread_new>
}
 800948e:	bf00      	nop
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
 8009496:	bf00      	nop
 8009498:	20009264 	.word	0x20009264
 800949c:	20009268 	.word	0x20009268
 80094a0:	2000926c 	.word	0x2000926c
 80094a4:	08018d90 	.word	0x08018d90
 80094a8:	08018e18 	.word	0x08018e18
 80094ac:	08018de0 	.word	0x08018de0
 80094b0:	20009270 	.word	0x20009270
 80094b4:	08018e3c 	.word	0x08018e3c
 80094b8:	080091e9 	.word	0x080091e9
 80094bc:	08018e60 	.word	0x08018e60

080094c0 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b084      	sub	sp, #16
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d002      	beq.n	80094d6 <fs_open+0x16>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <fs_open+0x1c>
    return ERR_ARG;
 80094d6:	f06f 030f 	mvn.w	r3, #15
 80094da:	e028      	b.n	800952e <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 80094dc:	4b16      	ldr	r3, [pc, #88]	; (8009538 <fs_open+0x78>)
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	e020      	b.n	8009524 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	4619      	mov	r1, r3
 80094e8:	6838      	ldr	r0, [r7, #0]
 80094ea:	f7f6 fe91 	bl	8000210 <strcmp>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d114      	bne.n	800951e <fs_open+0x5e>
      file->data = (const char *)f->data;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	7c1a      	ldrb	r2, [r3, #16]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800951a:	2300      	movs	r3, #0
 800951c:	e007      	b.n	800952e <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60fb      	str	r3, [r7, #12]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1db      	bne.n	80094e2 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800952a:	f06f 0305 	mvn.w	r3, #5
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	0801e4ec 	.word	0x0801e4ec

0800953c <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800953c:	b480      	push	{r7}
 800953e:	b083      	sub	sp, #12
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <fs_bytes_left>:
}
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  return file->len - file->index;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685a      	ldr	r2, [r3, #4]
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	689b      	ldr	r3, [r3, #8]
 8009560:	1ad3      	subs	r3, r2, r3
}
 8009562:	4618      	mov	r0, r3
 8009564:	370c      	adds	r7, #12
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr

0800956e <http_ssi_state_alloc>:

#if LWIP_HTTPD_SSI
/** Allocate as struct http_ssi_state. */
static struct http_ssi_state *
http_ssi_state_alloc(void)
{
 800956e:	b580      	push	{r7, lr}
 8009570:	b082      	sub	sp, #8
 8009572:	af00      	add	r7, sp, #0
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8009574:	20e0      	movs	r0, #224	; 0xe0
 8009576:	f001 fe05 	bl	800b184 <mem_malloc>
 800957a:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(1);
    ret = HTTP_ALLOC_SSI_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <http_ssi_state_alloc+0x1e>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8009582:	22e0      	movs	r2, #224	; 0xe0
 8009584:	2100      	movs	r1, #0
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f00e fc75 	bl	8017e76 <memset>
  }
  return ret;
 800958c:	687b      	ldr	r3, [r7, #4]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3708      	adds	r7, #8
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <http_ssi_state_free>:

/** Free a struct http_ssi_state. */
static void
http_ssi_state_free(struct http_ssi_state *ssi)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  if (ssi != NULL) {
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <http_ssi_state_free+0x14>
    HTTP_FREE_SSI_STATE(ssi);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f001 fc53 	bl	800ae50 <mem_free>
  }
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}

080095b2 <http_state_init>:

/** Initialize a struct http_state.
 */
static void
http_state_init(struct http_state *hs)
{
 80095b2:	b580      	push	{r7, lr}
 80095b4:	b082      	sub	sp, #8
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  /* Initialize the structure. */
  memset(hs, 0, sizeof(struct http_state));
 80095ba:	22b0      	movs	r2, #176	; 0xb0
 80095bc:	2100      	movs	r1, #0
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f00e fc59 	bl	8017e76 <memset>
#if LWIP_HTTPD_DYNAMIC_HEADERS
  /* Indicate that the headers are not yet valid */
  hs->hdr_index = NUM_FILE_HDR_STRINGS;
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <http_state_alloc>:

/** Allocate a struct http_state. */
static struct http_state *
http_state_alloc(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b082      	sub	sp, #8
 80095d0:	af00      	add	r7, sp, #0
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 80095d2:	20b0      	movs	r0, #176	; 0xb0
 80095d4:	f001 fdd6 	bl	800b184 <mem_malloc>
 80095d8:	6078      	str	r0, [r7, #4]
  if (ret == NULL) {
    http_kill_oldest_connection(0);
    ret = HTTP_ALLOC_HTTP_STATE();
  }
#endif /* LWIP_HTTPD_KILL_OLD_ON_CONNECTIONS_EXCEEDED */
  if (ret != NULL) {
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <http_state_alloc+0x1a>
    http_state_init(ret);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f7ff ffe6 	bl	80095b2 <http_state_init>
    http_add_connection(ret);
  }
  return ret;
 80095e6:	687b      	ldr	r3, [r7, #4]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <http_state_eof>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_eof(struct http_state *hs)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  if (hs->handle) {
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d007      	beq.n	8009610 <http_state_eof+0x20>
    u32_t ms_needed = sys_now() - hs->time_started;
    u32_t needed = LWIP_MAX(1, (ms_needed / 100));
    LWIP_DEBUGF(HTTPD_DEBUG_TIMING, ("httpd: needed %"U32_F" ms to send file of %d bytes -> %"U32_F" bytes/sec\n",
                                     ms_needed, hs->handle->len, ((((u32_t)hs->handle->len) * 10) / needed)));
#endif /* LWIP_HTTPD_TIMING */
    fs_close(hs->handle);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff ff99 	bl	800953c <fs_close>
    hs->handle = NULL;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	615a      	str	r2, [r3, #20]
    mem_free(hs->buf);
    hs->buf = NULL;
  }
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */
#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009614:	2b00      	cmp	r3, #0
 8009616:	d007      	beq.n	8009628 <http_state_eof+0x38>
    http_ssi_state_free(hs->ssi);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	4618      	mov	r0, r3
 800961e:	f7ff ffba 	bl	8009596 <http_ssi_state_free>
    hs->ssi = NULL;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	62da      	str	r2, [r3, #44]	; 0x2c
  }
#endif /* LWIP_HTTPD_SSI */
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  if (hs->req) {
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <http_state_eof+0x50>
    pbuf_free(hs->req);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	4618      	mov	r0, r3
 8009636:	f002 fe6f 	bl	800c318 <pbuf_free>
    hs->req = NULL;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2200      	movs	r2, #0
 800963e:	621a      	str	r2, [r3, #32]
  }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <http_state_free>:
/** Free a struct http_state.
 * Also frees the file data if dynamic.
 */
static void
http_state_free(struct http_state *hs)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  if (hs != NULL) {
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d005      	beq.n	8009662 <http_state_free+0x1a>
    http_state_eof(hs);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff ffca 	bl	80095f0 <http_state_eof>
    http_remove_connection(hs);
    HTTP_FREE_HTTP_STATE(hs);
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f001 fbf7 	bl	800ae50 <mem_free>
  }
}
 8009662:	bf00      	nop
 8009664:	3708      	adds	r7, #8
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
	...

0800966c <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af00      	add	r7, sp, #0
 8009672:	60f8      	str	r0, [r7, #12]
 8009674:	60b9      	str	r1, [r7, #8]
 8009676:	607a      	str	r2, [r7, #4]
 8009678:	70fb      	strb	r3, [r7, #3]
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d106      	bne.n	800968e <http_write+0x22>
 8009680:	4b2c      	ldr	r3, [pc, #176]	; (8009734 <http_write+0xc8>)
 8009682:	f240 2219 	movw	r2, #537	; 0x219
 8009686:	492c      	ldr	r1, [pc, #176]	; (8009738 <http_write+0xcc>)
 8009688:	482c      	ldr	r0, [pc, #176]	; (800973c <http_write+0xd0>)
 800968a:	f00e fb8f 	bl	8017dac <iprintf>
  len = *length;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	82fb      	strh	r3, [r7, #22]
  if (len == 0) {
 8009694:	8afb      	ldrh	r3, [r7, #22]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d101      	bne.n	800969e <http_write+0x32>
    return ERR_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	e045      	b.n	800972a <http_write+0xbe>
  }
  /* We cannot send more data than space available in the send buffer. */
  max_len = altcp_sndbuf(pcb);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80096a4:	82bb      	strh	r3, [r7, #20]
  if (max_len < len) {
 80096a6:	8aba      	ldrh	r2, [r7, #20]
 80096a8:	8afb      	ldrh	r3, [r7, #22]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d201      	bcs.n	80096b2 <http_write+0x46>
    len = max_len;
 80096ae:	8abb      	ldrh	r3, [r7, #20]
 80096b0:	82fb      	strh	r3, [r7, #22]
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	82bb      	strh	r3, [r7, #20]
  if (len > max_len) {
 80096ba:	8afa      	ldrh	r2, [r7, #22]
 80096bc:	8abb      	ldrh	r3, [r7, #20]
 80096be:	429a      	cmp	r2, r3
 80096c0:	d901      	bls.n	80096c6 <http_write+0x5a>
    len = max_len;
 80096c2:	8abb      	ldrh	r3, [r7, #20]
 80096c4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80096c6:	78fb      	ldrb	r3, [r7, #3]
 80096c8:	8afa      	ldrh	r2, [r7, #22]
 80096ca:	68b9      	ldr	r1, [r7, #8]
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f007 fbc7 	bl	8010e60 <tcp_write>
 80096d2:	4603      	mov	r3, r0
 80096d4:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_MEM) {
 80096d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80096da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096de:	d10f      	bne.n	8009700 <http_write+0x94>
      if ((altcp_sndbuf(pcb) == 0) ||
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <http_write+0x88>
          (altcp_sndqueuelen(pcb) >= TCP_SND_QUEUELEN)) {
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      if ((altcp_sndbuf(pcb) == 0) ||
 80096f0:	2b08      	cmp	r3, #8
 80096f2:	d902      	bls.n	80096fa <http_write+0x8e>
        /* no need to try smaller sizes */
        len = 1;
 80096f4:	2301      	movs	r3, #1
 80096f6:	82fb      	strh	r3, [r7, #22]
 80096f8:	e002      	b.n	8009700 <http_write+0x94>
      } else {
        len /= 2;
 80096fa:	8afb      	ldrh	r3, [r7, #22]
 80096fc:	085b      	lsrs	r3, r3, #1
 80096fe:	82fb      	strh	r3, [r7, #22]
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));
 8009700:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009708:	d102      	bne.n	8009710 <http_write+0xa4>
 800970a:	8afb      	ldrh	r3, [r7, #22]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d8da      	bhi.n	80096c6 <http_write+0x5a>

  if (err == ERR_OK) {
 8009710:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d103      	bne.n	8009720 <http_write+0xb4>
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Sent %d bytes\n", len));
    *length = len;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	8afa      	ldrh	r2, [r7, #22]
 800971c:	801a      	strh	r2, [r3, #0]
 800971e:	e002      	b.n	8009726 <http_write+0xba>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
    *length = 0;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	801a      	strh	r2, [r3, #0]
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
#endif

  return err;
 8009726:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800972a:	4618      	mov	r0, r3
 800972c:	3718      	adds	r7, #24
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	08018eec 	.word	0x08018eec
 8009738:	08018f24 	.word	0x08018f24
 800973c:	08018f34 	.word	0x08018f34

08009740 <http_close_or_abort_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	4613      	mov	r3, r2
 800974c:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_POST*/


  altcp_arg(pcb, NULL);
 800974e:	2100      	movs	r1, #0
 8009750:	68f8      	ldr	r0, [r7, #12]
 8009752:	f004 fc43 	bl	800dfdc <tcp_arg>
  altcp_recv(pcb, NULL);
 8009756:	2100      	movs	r1, #0
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f004 fc51 	bl	800e000 <tcp_recv>
  altcp_err(pcb, NULL);
 800975e:	2100      	movs	r1, #0
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f004 fc91 	bl	800e088 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8009766:	2200      	movs	r2, #0
 8009768:	2100      	movs	r1, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f004 fcc6 	bl	800e0fc <tcp_poll>
  altcp_sent(pcb, NULL);
 8009770:	2100      	movs	r1, #0
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f004 fc66 	bl	800e044 <tcp_sent>
  if (hs != NULL) {
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <http_close_or_abort_conn+0x44>
    http_state_free(hs);
 800977e:	68b8      	ldr	r0, [r7, #8]
 8009780:	f7ff ff62 	bl	8009648 <http_state_free>
  }

  if (abort_conn) {
 8009784:	79fb      	ldrb	r3, [r7, #7]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d004      	beq.n	8009794 <http_close_or_abort_conn+0x54>
    altcp_abort(pcb);
 800978a:	68f8      	ldr	r0, [r7, #12]
 800978c:	f003 fb68 	bl	800ce60 <tcp_abort>
    return ERR_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	e00f      	b.n	80097b4 <http_close_or_abort_conn+0x74>
  }
  err = altcp_close(pcb);
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f003 fa79 	bl	800cc8c <tcp_close>
 800979a:	4603      	mov	r3, r0
 800979c:	75fb      	strb	r3, [r7, #23]
  if (err != ERR_OK) {
 800979e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d004      	beq.n	80097b0 <http_close_or_abort_conn+0x70>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Error %d closing %p\n", err, (void *)pcb));
    /* error closing, try again later in poll */
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80097a6:	2204      	movs	r2, #4
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <http_close_or_abort_conn+0x7c>)
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f004 fca6 	bl	800e0fc <tcp_poll>
  }
  return err;
 80097b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	3718      	adds	r7, #24
 80097b8:	46bd      	mov	sp, r7
 80097ba:	bd80      	pop	{r7, pc}
 80097bc:	0800a743 	.word	0x0800a743

080097c0 <http_close_conn>:
 * @param pcb the tcp pcb to reset callbacks
 * @param hs connection state to free
 */
static err_t
http_close_conn(struct altcp_pcb *pcb, struct http_state *hs)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
  return http_close_or_abort_conn(pcb, hs, 0);
 80097ca:	2200      	movs	r2, #0
 80097cc:	6839      	ldr	r1, [r7, #0]
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7ff ffb6 	bl	8009740 <http_close_or_abort_conn>
 80097d4:	4603      	mov	r3, r0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3708      	adds	r7, #8
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <http_eof>:
/** End of file: either close the connection (Connection: close) or
 * close the file (Connection: keep-alive)
 */
static void
http_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b082      	sub	sp, #8
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	6078      	str	r0, [r7, #4]
 80097e6:	6039      	str	r1, [r7, #0]
    /* ensure nagle doesn't interfere with sending all data as fast as possible: */
    altcp_nagle_disable(pcb);
  } else
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  {
    http_close_conn(pcb, hs);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7ff ffe8 	bl	80097c0 <http_close_conn>
  }
}
 80097f0:	bf00      	nop
 80097f2:	3708      	adds	r7, #8
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <extract_uri_parameters>:
 * @param params pointer to the NULL-terminated parameter string from the URI
 * @return number of parameters extracted
 */
static int
extract_uri_parameters(struct http_state *hs, char *params)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b086      	sub	sp, #24
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  int loop;

  LWIP_UNUSED_ARG(hs);

  /* If we have no parameters at all, return immediately. */
  if (!params || (params[0] == '\0')) {
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d003      	beq.n	8009810 <extract_uri_parameters+0x18>
 8009808:	683b      	ldr	r3, [r7, #0]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d101      	bne.n	8009814 <extract_uri_parameters+0x1c>
    return (0);
 8009810:	2300      	movs	r3, #0
 8009812:	e04b      	b.n	80098ac <extract_uri_parameters+0xb4>
  }

  /* Get a pointer to our first parameter */
  pair = params;
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	617b      	str	r3, [r7, #20]

  /* Parse up to LWIP_HTTPD_MAX_CGI_PARAMETERS from the passed string and ignore the
   * remainder (if any) */
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8009818:	2300      	movs	r3, #0
 800981a:	613b      	str	r3, [r7, #16]
 800981c:	e03f      	b.n	800989e <extract_uri_parameters+0xa6>

    /* Save the name of the parameter */
    http_cgi_params[loop] = pair;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	693a      	ldr	r2, [r7, #16]
 8009822:	320c      	adds	r2, #12
 8009824:	6979      	ldr	r1, [r7, #20]
 8009826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Remember the start of this name=value pair */
    equals = pair;
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	60fb      	str	r3, [r7, #12]

    /* Find the start of the next name=value pair and replace the delimiter
     * with a 0 to terminate the previous pair string. */
    pair = strchr(pair, '&');
 800982e:	2126      	movs	r1, #38	; 0x26
 8009830:	6978      	ldr	r0, [r7, #20]
 8009832:	f00e fb28 	bl	8017e86 <strchr>
 8009836:	6178      	str	r0, [r7, #20]
    if (pair) {
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d006      	beq.n	800984c <extract_uri_parameters+0x54>
      *pair = '\0';
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	2200      	movs	r2, #0
 8009842:	701a      	strb	r2, [r3, #0]
      pair++;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	3301      	adds	r3, #1
 8009848:	617b      	str	r3, [r7, #20]
 800984a:	e00c      	b.n	8009866 <extract_uri_parameters+0x6e>
    } else {
      /* We didn't find a new parameter so find the end of the URI and
       * replace the space with a '\0' */
      pair = strchr(equals, ' ');
 800984c:	2120      	movs	r1, #32
 800984e:	68f8      	ldr	r0, [r7, #12]
 8009850:	f00e fb19 	bl	8017e86 <strchr>
 8009854:	6178      	str	r0, [r7, #20]
      if (pair) {
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d002      	beq.n	8009862 <extract_uri_parameters+0x6a>
        *pair = '\0';
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	2200      	movs	r2, #0
 8009860:	701a      	strb	r2, [r3, #0]
      }

      /* Revert to NULL so that we exit the loop as expected. */
      pair = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	617b      	str	r3, [r7, #20]
    }

    /* Now find the '=' in the previous pair, replace it with '\0' and save
     * the parameter value string. */
    equals = strchr(equals, '=');
 8009866:	213d      	movs	r1, #61	; 0x3d
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f00e fb0c 	bl	8017e86 <strchr>
 800986e:	60f8      	str	r0, [r7, #12]
    if (equals) {
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <extract_uri_parameters+0x94>
      *equals = '\0';
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
      http_cgi_param_vals[loop] = equals + 1;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	1c59      	adds	r1, r3, #1
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	693a      	ldr	r2, [r7, #16]
 8009884:	321c      	adds	r2, #28
 8009886:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800988a:	e005      	b.n	8009898 <extract_uri_parameters+0xa0>
    } else {
      http_cgi_param_vals[loop] = NULL;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	693a      	ldr	r2, [r7, #16]
 8009890:	321c      	adds	r2, #28
 8009892:	2100      	movs	r1, #0
 8009894:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	3301      	adds	r3, #1
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	2b0f      	cmp	r3, #15
 80098a2:	dc02      	bgt.n	80098aa <extract_uri_parameters+0xb2>
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1b9      	bne.n	800981e <extract_uri_parameters+0x26>
    }
  }

  return loop;
 80098aa:	693b      	ldr	r3, [r7, #16]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <get_tag_insert>:
 *
 * @param hs http connection state
 */
static void
get_tag_insert(struct http_state *hs)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  struct http_ssi_state *ssi;
#if LWIP_HTTPD_SSI_MULTIPART
  u16_t current_tag_part;
#endif /* LWIP_HTTPD_SSI_MULTIPART */

  LWIP_ASSERT("hs != NULL", hs != NULL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d106      	bne.n	80098d0 <get_tag_insert+0x1c>
 80098c2:	4b45      	ldr	r3, [pc, #276]	; (80099d8 <get_tag_insert+0x124>)
 80098c4:	f44f 7241 	mov.w	r2, #772	; 0x304
 80098c8:	4944      	ldr	r1, [pc, #272]	; (80099dc <get_tag_insert+0x128>)
 80098ca:	4845      	ldr	r0, [pc, #276]	; (80099e0 <get_tag_insert+0x12c>)
 80098cc:	f00e fa6e 	bl	8017dac <iprintf>
  ssi = hs->ssi;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098d4:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d106      	bne.n	80098ea <get_tag_insert+0x36>
 80098dc:	4b3e      	ldr	r3, [pc, #248]	; (80099d8 <get_tag_insert+0x124>)
 80098de:	f240 3206 	movw	r2, #774	; 0x306
 80098e2:	4940      	ldr	r1, [pc, #256]	; (80099e4 <get_tag_insert+0x130>)
 80098e4:	483e      	ldr	r0, [pc, #248]	; (80099e0 <get_tag_insert+0x12c>)
 80098e6:	f00e fa61 	bl	8017dac <iprintf>
#if LWIP_HTTPD_SSI_MULTIPART
  current_tag_part = ssi->tag_part;
  ssi->tag_part = HTTPD_LAST_TAG_PART;
#endif /* LWIP_HTTPD_SSI_MULTIPART */
#if LWIP_HTTPD_SSI_RAW
  tag = ssi->tag_name;
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	3312      	adds	r3, #18
 80098ee:	613b      	str	r3, [r7, #16]
#endif

  if (httpd_ssi_handler
 80098f0:	4b3d      	ldr	r3, [pc, #244]	; (80099e8 <get_tag_insert+0x134>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d011      	beq.n	800991c <get_tag_insert+0x68>
#else /* LWIP_HTTPD_SSI_RAW */
    for (tag = 0; tag < httpd_num_tags; tag++) {
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
#endif /* LWIP_HTTPD_SSI_RAW */
      {
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 80098f8:	4b3b      	ldr	r3, [pc, #236]	; (80099e8 <get_tag_insert+0x134>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	697a      	ldr	r2, [r7, #20]
 80098fe:	f102 011b 	add.w	r1, r2, #27
 8009902:	22c0      	movs	r2, #192	; 0xc0
 8009904:	6938      	ldr	r0, [r7, #16]
 8009906:	4798      	blx	r3
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	81da      	strh	r2, [r3, #14]
#if LWIP_HTTPD_FILE_STATE
                                              , (hs->handle ? hs->handle->state : NULL)
#endif /* LWIP_HTTPD_FILE_STATE */
                                             );
#if LWIP_HTTPD_SSI_RAW
        if (ssi->tag_insert_len != HTTPD_SSI_TAG_UNKNOWN)
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	89db      	ldrh	r3, [r3, #14]
 8009914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009918:	4293      	cmp	r3, r2
 800991a:	d159      	bne.n	80099d0 <get_tag_insert+0x11c>
   * marker. */
#define UNKNOWN_TAG1_TEXT "<b>***UNKNOWN TAG "
#define UNKNOWN_TAG1_LEN  18
#define UNKNOWN_TAG2_TEXT "***</b>"
#define UNKNOWN_TAG2_LEN  7
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	3312      	adds	r3, #18
 8009920:	4618      	mov	r0, r3
 8009922:	f7f6 fc7f 	bl	8000224 <strlen>
 8009926:	4603      	mov	r3, r0
 8009928:	2ba6      	cmp	r3, #166	; 0xa6
 800992a:	d818      	bhi.n	800995e <get_tag_insert+0xaa>
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	3312      	adds	r3, #18
 8009930:	4618      	mov	r0, r3
 8009932:	f7f6 fc77 	bl	8000224 <strlen>
 8009936:	4603      	mov	r3, r0
 8009938:	2b09      	cmp	r3, #9
 800993a:	d810      	bhi.n	800995e <get_tag_insert+0xaa>
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	3312      	adds	r3, #18
 8009940:	4618      	mov	r0, r3
 8009942:	f7f6 fc6f 	bl	8000224 <strlen>
 8009946:	4603      	mov	r3, r0
 8009948:	2ba6      	cmp	r3, #166	; 0xa6
 800994a:	d806      	bhi.n	800995a <get_tag_insert+0xa6>
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	3312      	adds	r3, #18
 8009950:	4618      	mov	r0, r3
 8009952:	f7f6 fc67 	bl	8000224 <strlen>
 8009956:	4603      	mov	r3, r0
 8009958:	e002      	b.n	8009960 <get_tag_insert+0xac>
 800995a:	23a7      	movs	r3, #167	; 0xa7
 800995c:	e000      	b.n	8009960 <get_tag_insert+0xac>
 800995e:	2309      	movs	r3, #9
 8009960:	60fb      	str	r3, [r7, #12]
                 LWIP_HTTPD_MAX_TAG_INSERT_LEN - (UNKNOWN_TAG1_LEN + UNKNOWN_TAG2_LEN)));
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	331b      	adds	r3, #27
 8009966:	2212      	movs	r2, #18
 8009968:	4920      	ldr	r1, [pc, #128]	; (80099ec <get_tag_insert+0x138>)
 800996a:	4618      	mov	r0, r3
 800996c:	f00e fb1c 	bl	8017fa8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	3312      	adds	r3, #18
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4619      	mov	r1, r3
 800997e:	f00e fb13 	bl	8017fa8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3312      	adds	r3, #18
 8009986:	3318      	adds	r3, #24
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4413      	add	r3, r2
 800998c:	3303      	adds	r3, #3
 800998e:	2207      	movs	r2, #7
 8009990:	4917      	ldr	r1, [pc, #92]	; (80099f0 <get_tag_insert+0x13c>)
 8009992:	4618      	mov	r0, r3
 8009994:	f00e fb08 	bl	8017fa8 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	3319      	adds	r3, #25
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	4413      	add	r3, r2
 80099a0:	2200      	movs	r2, #0
 80099a2:	76da      	strb	r2, [r3, #27]

  len = strlen(ssi->tag_insert);
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	331b      	adds	r3, #27
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f6 fc3b 	bl	8000224 <strlen>
 80099ae:	60f8      	str	r0, [r7, #12]
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b6:	d306      	bcc.n	80099c6 <get_tag_insert+0x112>
 80099b8:	4b07      	ldr	r3, [pc, #28]	; (80099d8 <get_tag_insert+0x124>)
 80099ba:	f240 323f 	movw	r2, #831	; 0x33f
 80099be:	490d      	ldr	r1, [pc, #52]	; (80099f4 <get_tag_insert+0x140>)
 80099c0:	4807      	ldr	r0, [pc, #28]	; (80099e0 <get_tag_insert+0x12c>)
 80099c2:	f00e f9f3 	bl	8017dac <iprintf>
  ssi->tag_insert_len = (u16_t)len;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	81da      	strh	r2, [r3, #14]
 80099ce:	e000      	b.n	80099d2 <get_tag_insert+0x11e>
          return;
 80099d0:	bf00      	nop
}
 80099d2:	3718      	adds	r7, #24
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	08018eec 	.word	0x08018eec
 80099dc:	08018f5c 	.word	0x08018f5c
 80099e0:	08018f34 	.word	0x08018f34
 80099e4:	08018f68 	.word	0x08018f68
 80099e8:	200096b4 	.word	0x200096b4
 80099ec:	08018f74 	.word	0x08018f74
 80099f0:	08018f88 	.word	0x08018f88
 80099f4:	08018f90 	.word	0x08018f90

080099f8 <http_check_eof>:
 * @returns: 0 if the file is finished or no data has been read
 *           1 if the file is not finished and data has been read
 */
static u8_t
http_check_eof(struct altcp_pcb *pcb, struct http_state *hs)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	6039      	str	r1, [r7, #0]
  int max_write_len;
#endif /* HTTPD_MAX_WRITE_LEN */
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ */

  /* Do we have a valid file handle? */
  if (hs->handle == NULL) {
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d105      	bne.n	8009a16 <http_check_eof+0x1e>
    /* No - close the connection. */
    http_eof(pcb, hs);
 8009a0a:	6839      	ldr	r1, [r7, #0]
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f7ff fee6 	bl	80097de <http_eof>
    return 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e016      	b.n	8009a44 <http_check_eof+0x4c>
  }
  bytes_left = fs_bytes_left(hs->handle);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	695b      	ldr	r3, [r3, #20]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff fd98 	bl	8009550 <fs_bytes_left>
 8009a20:	60f8      	str	r0, [r7, #12]
  if (bytes_left <= 0) {
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	dc05      	bgt.n	8009a34 <http_check_eof+0x3c>
    /* We reached the end of the file so this request is done. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7ff fed7 	bl	80097de <http_eof>
    return 0;
 8009a30:	2300      	movs	r3, #0
 8009a32:	e007      	b.n	8009a44 <http_check_eof+0x4c>
    hs->ssi->parse_left = count;
    hs->ssi->parsed = hs->buf;
  }
#endif /* LWIP_HTTPD_SSI */
#else /* LWIP_HTTPD_DYNAMIC_FILE_READ */
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 8009a34:	4b05      	ldr	r3, [pc, #20]	; (8009a4c <http_check_eof+0x54>)
 8009a36:	f240 429d 	movw	r2, #1181	; 0x49d
 8009a3a:	4905      	ldr	r1, [pc, #20]	; (8009a50 <http_check_eof+0x58>)
 8009a3c:	4805      	ldr	r0, [pc, #20]	; (8009a54 <http_check_eof+0x5c>)
 8009a3e:	f00e f9b5 	bl	8017dac <iprintf>
#endif /* LWIP_HTTPD_SSI || LWIP_HTTPD_DYNAMIC_HEADERS */
  return 1;
 8009a42:	2301      	movs	r3, #1
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	3710      	adds	r7, #16
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	08018eec 	.word	0x08018eec
 8009a50:	08018fa0 	.word	0x08018fa0
 8009a54:	08018f34 	.word	0x08018f34

08009a58 <http_send_data_nonssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_nonssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b084      	sub	sp, #16
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  err_t err;
  u16_t len;
  u8_t data_to_send = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	73fb      	strb	r3, [r7, #15]

  /* We are not processing an SHTML file so no tag checking is necessary.
   * Just send the data as we received it from the file. */
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d803      	bhi.n	8009a7a <http_send_data_nonssi+0x22>
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	e001      	b.n	8009a7e <http_send_data_nonssi+0x26>
 8009a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009a7e:	81bb      	strh	r3, [r7, #12]

  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	6999      	ldr	r1, [r3, #24]
 8009a84:	f107 020c 	add.w	r2, r7, #12
 8009a88:	2300      	movs	r3, #0
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fdee 	bl	800966c <http_write>
 8009a90:	4603      	mov	r3, r0
 8009a92:	73bb      	strb	r3, [r7, #14]
  if (err == ERR_OK) {
 8009a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d10d      	bne.n	8009ab8 <http_send_data_nonssi+0x60>
    data_to_send = 1;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	73fb      	strb	r3, [r7, #15]
    hs->file += len;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	699b      	ldr	r3, [r3, #24]
 8009aa4:	89ba      	ldrh	r2, [r7, #12]
 8009aa6:	441a      	add	r2, r3
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	619a      	str	r2, [r3, #24]
    hs->left -= len;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab0:	89ba      	ldrh	r2, [r7, #12]
 8009ab2:	1a9a      	subs	r2, r3, r2
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	625a      	str	r2, [r3, #36]	; 0x24
  }

  return data_to_send;
 8009ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <http_send_data_ssi>:
 * @returns: - 1: data has been written (so call tcp_ouput)
 *           - 0: no data has been written (no need to call tcp_output)
 */
static u8_t
http_send_data_ssi(struct altcp_pcb *pcb, struct http_state *hs)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	75fb      	strb	r3, [r7, #23]
  u16_t len;
  u8_t data_to_send = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	75bb      	strb	r3, [r7, #22]
  u8_t tag_type;

  struct http_ssi_state *ssi = hs->ssi;
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ada:	613b      	str	r3, [r7, #16]
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d106      	bne.n	8009af0 <http_send_data_ssi+0x2c>
 8009ae2:	4b87      	ldr	r3, [pc, #540]	; (8009d00 <http_send_data_ssi+0x23c>)
 8009ae4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8009ae8:	4986      	ldr	r1, [pc, #536]	; (8009d04 <http_send_data_ssi+0x240>)
 8009aea:	4887      	ldr	r0, [pc, #540]	; (8009d08 <http_send_data_ssi+0x244>)
 8009aec:	f00e f95e 	bl	8017dac <iprintf>
   * them with insert strings. We need to be careful here since a tag may
   * straddle the boundary of two blocks read from the file and we may also
   * have to split the insert string between two tcp_write operations. */

  /* How much data could we send? */
  len = altcp_sndbuf(pcb);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009af6:	81fb      	strh	r3, [r7, #14]

  /* Do we have remaining data to send before parsing more? */
  if (ssi->parsed > hs->file) {
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	681a      	ldr	r2, [r3, #0]
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	699b      	ldr	r3, [r3, #24]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	f240 826f 	bls.w	8009fe4 <http_send_data_ssi+0x520>
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	681a      	ldr	r2, [r3, #0]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b14:	4293      	cmp	r3, r2
 8009b16:	dc06      	bgt.n	8009b26 <http_send_data_ssi+0x62>
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	681a      	ldr	r2, [r3, #0]
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	b29b      	uxth	r3, r3
 8009b24:	e001      	b.n	8009b2a <http_send_data_ssi+0x66>
 8009b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009b2a:	81fb      	strh	r3, [r7, #14]

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	6999      	ldr	r1, [r3, #24]
 8009b30:	f107 020e 	add.w	r2, r7, #14
 8009b34:	2300      	movs	r3, #0
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fd98 	bl	800966c <http_write>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 8009b40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10d      	bne.n	8009b64 <http_send_data_ssi+0xa0>
      data_to_send = 1;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	699b      	ldr	r3, [r3, #24]
 8009b50:	89fa      	ldrh	r2, [r7, #14]
 8009b52:	441a      	add	r2, r3
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5c:	89fa      	ldrh	r2, [r7, #14]
 8009b5e:	1a9a      	subs	r2, r3, r2
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* If the send buffer is full, return now. */
    if (altcp_sndbuf(pcb) == 0) {
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	f040 823a 	bne.w	8009fe4 <http_send_data_ssi+0x520>
      return data_to_send;
 8009b70:	7dbb      	ldrb	r3, [r7, #22]
 8009b72:	e280      	b.n	800a076 <http_send_data_ssi+0x5b2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("State %d, %d left\n", ssi->tag_state, (int)ssi->parse_left));

  /* We have sent all the data that was already parsed so continue parsing
   * the buffer contents looking for SSI tags. */
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
    if (len == 0) {
 8009b74:	89fb      	ldrh	r3, [r7, #14]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <http_send_data_ssi+0xba>
      return data_to_send;
 8009b7a:	7dbb      	ldrb	r3, [r7, #22]
 8009b7c:	e27b      	b.n	800a076 <http_send_data_ssi+0x5b2>
    }
    switch (ssi->tag_state) {
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009b84:	2b04      	cmp	r3, #4
 8009b86:	f200 822c 	bhi.w	8009fe2 <http_send_data_ssi+0x51e>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <http_send_data_ssi+0xcc>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009ba5 	.word	0x08009ba5
 8009b94:	08009bf7 	.word	0x08009bf7
 8009b98:	08009c69 	.word	0x08009c69
 8009b9c:	08009db1 	.word	0x08009db1
 8009ba0:	08009ef9 	.word	0x08009ef9
      case TAG_NONE:
        /* We are not currently processing an SSI tag so scan for the
         * start of the lead-in marker. */
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	757b      	strb	r3, [r7, #21]
 8009ba8:	e017      	b.n	8009bda <http_send_data_ssi+0x116>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	7d7b      	ldrb	r3, [r7, #21]
 8009bb2:	4956      	ldr	r1, [pc, #344]	; (8009d0c <http_send_data_ssi+0x248>)
 8009bb4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8009bb8:	781b      	ldrb	r3, [r3, #0]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d10a      	bne.n	8009bd4 <http_send_data_ssi+0x110>
            /* We found what could be the lead-in for a new tag so change
             * state appropriately. */
            ssi->tag_type = tag_type;
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	7d7a      	ldrb	r2, [r7, #21]
 8009bc2:	741a      	strb	r2, [r3, #16]
            ssi->tag_state = TAG_LEADIN;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_index = 1;
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	819a      	strh	r2, [r3, #12]
  #if !LWIP_HTTPD_SSI_INCLUDE_TAG
            ssi->tag_started = ssi->parsed;
  #endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG */
            break;
 8009bd2:	e005      	b.n	8009be0 <http_send_data_ssi+0x11c>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8009bd4:	7d7b      	ldrb	r3, [r7, #21]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	757b      	strb	r3, [r7, #21]
 8009bda:	7d7b      	ldrb	r3, [r7, #21]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	d9e4      	bls.n	8009baa <http_send_data_ssi+0xe6>
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	1e5a      	subs	r2, r3, #1
 8009be6:	693b      	ldr	r3, [r7, #16]
 8009be8:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	601a      	str	r2, [r3, #0]
        break;
 8009bf4:	e1f6      	b.n	8009fe4 <http_send_data_ssi+0x520>
      case TAG_LEADIN:
        /* We are processing the lead-in marker, looking for the start of
         * the tag name. */

        /* Have we reached the end of the leadin? */
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	7c1b      	ldrb	r3, [r3, #16]
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4b43      	ldr	r3, [pc, #268]	; (8009d0c <http_send_data_ssi+0x248>)
 8009bfe:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	8992      	ldrh	r2, [r2, #12]
 8009c06:	4413      	add	r3, r2
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d107      	bne.n	8009c1e <http_send_data_ssi+0x15a>
          ssi->tag_index = 0;
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2200      	movs	r2, #0
 8009c12:	819a      	strh	r2, [r3, #12]
          ssi->tag_state = TAG_FOUND;
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	2202      	movs	r2, #2
 8009c18:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8009c1c:	e1e2      	b.n	8009fe4 <http_send_data_ssi+0x520>
        } else {
          /* Have we found the next character we expect for the tag leadin? */
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	781a      	ldrb	r2, [r3, #0]
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	7c1b      	ldrb	r3, [r3, #16]
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4b38      	ldr	r3, [pc, #224]	; (8009d0c <http_send_data_ssi+0x248>)
 8009c2c:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
 8009c30:	6939      	ldr	r1, [r7, #16]
 8009c32:	8989      	ldrh	r1, [r1, #12]
 8009c34:	440b      	add	r3, r1
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	429a      	cmp	r2, r3
 8009c3a:	d106      	bne.n	8009c4a <http_send_data_ssi+0x186>
            /* Yes - move to the next one unless we have found the complete
             * leadin, in which case we start looking for the tag itself */
            ssi->tag_index++;
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	899b      	ldrh	r3, [r3, #12]
 8009c40:	3301      	adds	r3, #1
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	819a      	strh	r2, [r3, #12]
 8009c48:	e003      	b.n	8009c52 <http_send_data_ssi+0x18e>
          } else {
            /* We found an unexpected character so this is not a tag. Move
             * back to idle state. */
            ssi->tag_state = TAG_NONE;
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009c52:	693b      	ldr	r3, [r7, #16]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	1e5a      	subs	r2, r3, #1
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	1c5a      	adds	r2, r3, #1
 8009c62:	693b      	ldr	r3, [r7, #16]
 8009c64:	601a      	str	r2, [r3, #0]
        }
        break;
 8009c66:	e1bd      	b.n	8009fe4 <http_send_data_ssi+0x520>
        /* We are reading the tag name, looking for the start of the
         * lead-out marker and removing any whitespace found. */

        /* Remove leading whitespace between the tag leading and the first
         * tag name character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	899b      	ldrh	r3, [r3, #12]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d11e      	bne.n	8009cae <http_send_data_ssi+0x1ea>
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d00e      	beq.n	8009c98 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009c80:	2b09      	cmp	r3, #9
 8009c82:	d009      	beq.n	8009c98 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	2b0a      	cmp	r3, #10
 8009c8c:	d004      	beq.n	8009c98 <http_send_data_ssi+0x1d4>
                                      (*ssi->parsed == '\r'))) {
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009c94:	2b0d      	cmp	r3, #13
 8009c96:	d10a      	bne.n	8009cae <http_send_data_ssi+0x1ea>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	1e5a      	subs	r2, r3, #1
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009ca2:	693b      	ldr	r3, [r7, #16]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	601a      	str	r2, [r3, #0]
          break;
 8009cac:	e19a      	b.n	8009fe4 <http_send_data_ssi+0x520>
        }

        /* Have we found the end of the tag name? This is signalled by
         * us finding the first leadout character or whitespace */
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	781a      	ldrb	r2, [r3, #0]
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	7c1b      	ldrb	r3, [r3, #16]
 8009cb8:	4914      	ldr	r1, [pc, #80]	; (8009d0c <http_send_data_ssi+0x248>)
 8009cba:	00db      	lsls	r3, r3, #3
 8009cbc:	440b      	add	r3, r1
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	429a      	cmp	r2, r3
 8009cc4:	d013      	beq.n	8009cee <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d00e      	beq.n	8009cee <http_send_data_ssi+0x22a>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	2b09      	cmp	r3, #9
 8009cd8:	d009      	beq.n	8009cee <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8009ce0:	2b0a      	cmp	r3, #10
 8009ce2:	d004      	beq.n	8009cee <http_send_data_ssi+0x22a>
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	781b      	ldrb	r3, [r3, #0]
 8009cea:	2b0d      	cmp	r3, #13
 8009cec:	d13f      	bne.n	8009d6e <http_send_data_ssi+0x2aa>

          if (ssi->tag_index == 0) {
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	899b      	ldrh	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d10c      	bne.n	8009d10 <http_send_data_ssi+0x24c>
            /* We read a zero length tag so ignore it. */
            ssi->tag_state = TAG_NONE;
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          if (ssi->tag_index == 0) {
 8009cfe:	e04c      	b.n	8009d9a <http_send_data_ssi+0x2d6>
 8009d00:	08018eec 	.word	0x08018eec
 8009d04:	08018f68 	.word	0x08018f68
 8009d08:	08018f34 	.word	0x08018f34
 8009d0c:	0801e528 	.word	0x0801e528
          } else {
            /* We read a non-empty tag so go ahead and look for the
             * leadout string. */
            ssi->tag_state = TAG_LEADOUT;
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2203      	movs	r2, #3
 8009d14:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	899b      	ldrh	r3, [r3, #12]
 8009d1c:	2bff      	cmp	r3, #255	; 0xff
 8009d1e:	d906      	bls.n	8009d2e <http_send_data_ssi+0x26a>
 8009d20:	4b93      	ldr	r3, [pc, #588]	; (8009f70 <http_send_data_ssi+0x4ac>)
 8009d22:	f240 523a 	movw	r2, #1338	; 0x53a
 8009d26:	4993      	ldr	r1, [pc, #588]	; (8009f74 <http_send_data_ssi+0x4b0>)
 8009d28:	4893      	ldr	r0, [pc, #588]	; (8009f78 <http_send_data_ssi+0x4b4>)
 8009d2a:	f00e f83f 	bl	8017dac <iprintf>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	899b      	ldrh	r3, [r3, #12]
 8009d32:	b2da      	uxtb	r2, r3
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	745a      	strb	r2, [r3, #17]
            ssi->tag_name[ssi->tag_index] = '\0';
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	899b      	ldrh	r3, [r3, #12]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	4413      	add	r3, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	749a      	strb	r2, [r3, #18]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8009d46:	693b      	ldr	r3, [r7, #16]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	781a      	ldrb	r2, [r3, #0]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	7c1b      	ldrb	r3, [r3, #16]
 8009d50:	498a      	ldr	r1, [pc, #552]	; (8009f7c <http_send_data_ssi+0x4b8>)
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	440b      	add	r3, r1
 8009d56:	685b      	ldr	r3, [r3, #4]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d103      	bne.n	8009d66 <http_send_data_ssi+0x2a2>
              ssi->tag_index = 1;
 8009d5e:	693b      	ldr	r3, [r7, #16]
 8009d60:	2201      	movs	r2, #1
 8009d62:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8009d64:	e019      	b.n	8009d9a <http_send_data_ssi+0x2d6>
            } else {
              ssi->tag_index = 0;
 8009d66:	693b      	ldr	r3, [r7, #16]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	819a      	strh	r2, [r3, #12]
          if (ssi->tag_index == 0) {
 8009d6c:	e015      	b.n	8009d9a <http_send_data_ssi+0x2d6>
            }
          }
        } else {
          /* This character is part of the tag name so save it */
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	899b      	ldrh	r3, [r3, #12]
 8009d72:	2b07      	cmp	r3, #7
 8009d74:	d80d      	bhi.n	8009d92 <http_send_data_ssi+0x2ce>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	681a      	ldr	r2, [r3, #0]
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	899b      	ldrh	r3, [r3, #12]
 8009d7e:	1c59      	adds	r1, r3, #1
 8009d80:	b288      	uxth	r0, r1
 8009d82:	6939      	ldr	r1, [r7, #16]
 8009d84:	8188      	strh	r0, [r1, #12]
 8009d86:	4619      	mov	r1, r3
 8009d88:	7812      	ldrb	r2, [r2, #0]
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	440b      	add	r3, r1
 8009d8e:	749a      	strb	r2, [r3, #18]
 8009d90:	e003      	b.n	8009d9a <http_send_data_ssi+0x2d6>
          } else {
            /* The tag was too long so ignore it. */
            ssi->tag_state = TAG_NONE;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	2200      	movs	r2, #0
 8009d96:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
          }
        }

        /* Move on to the next character in the buffer */
        ssi->parse_left--;
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	1e5a      	subs	r2, r3, #1
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	609a      	str	r2, [r3, #8]
        ssi->parsed++;
 8009da4:	693b      	ldr	r3, [r7, #16]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	1c5a      	adds	r2, r3, #1
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	601a      	str	r2, [r3, #0]

        break;
 8009dae:	e119      	b.n	8009fe4 <http_send_data_ssi+0x520>

      /* We are looking for the end of the lead-out marker. */
      case TAG_LEADOUT:
        /* Remove leading whitespace between the tag leading and the first
         * tag leadout character. */
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	899b      	ldrh	r3, [r3, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d11e      	bne.n	8009df6 <http_send_data_ssi+0x332>
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d00e      	beq.n	8009de0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	781b      	ldrb	r3, [r3, #0]
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8009dc8:	2b09      	cmp	r3, #9
 8009dca:	d009      	beq.n	8009de0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b0a      	cmp	r3, #10
 8009dd4:	d004      	beq.n	8009de0 <http_send_data_ssi+0x31c>
                                      (*ssi->parsed == '\r'))) {
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8009ddc:	2b0d      	cmp	r3, #13
 8009dde:	d10a      	bne.n	8009df6 <http_send_data_ssi+0x332>
          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	1c5a      	adds	r2, r3, #1
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	601a      	str	r2, [r3, #0]
          break;
 8009df4:	e0f6      	b.n	8009fe4 <http_send_data_ssi+0x520>
        }

        /* Have we found the next character we expect for the tag leadout? */
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	781a      	ldrb	r2, [r3, #0]
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	7c1b      	ldrb	r3, [r3, #16]
 8009e00:	495e      	ldr	r1, [pc, #376]	; (8009f7c <http_send_data_ssi+0x4b8>)
 8009e02:	00db      	lsls	r3, r3, #3
 8009e04:	440b      	add	r3, r1
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	6939      	ldr	r1, [r7, #16]
 8009e0a:	8989      	ldrh	r1, [r1, #12]
 8009e0c:	440b      	add	r3, r1
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d162      	bne.n	8009eda <http_send_data_ssi+0x416>
          /* Yes - move to the next one unless we have found the complete
           * leadout, in which case we need to call the client to process
           * the tag. */

          /* Move on to the next character in the buffer */
          ssi->parse_left--;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	1e5a      	subs	r2, r3, #1
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009e1e:	693b      	ldr	r3, [r7, #16]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	601a      	str	r2, [r3, #0]
          ssi->tag_index++;
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	899b      	ldrh	r3, [r3, #12]
 8009e2c:	3301      	adds	r3, #1
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	819a      	strh	r2, [r3, #12]

          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	7c1b      	ldrb	r3, [r3, #16]
 8009e38:	4a50      	ldr	r2, [pc, #320]	; (8009f7c <http_send_data_ssi+0x4b8>)
 8009e3a:	00db      	lsls	r3, r3, #3
 8009e3c:	4413      	add	r3, r2
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	693a      	ldr	r2, [r7, #16]
 8009e42:	8992      	ldrh	r2, [r2, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f040 80cb 	bne.w	8009fe4 <http_send_data_ssi+0x520>
            /* Call the client to ask for the insert string for the
             * tag we just found. */
#if LWIP_HTTPD_SSI_MULTIPART
            ssi->tag_part = 0; /* start with tag part 0 */
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            get_tag_insert(hs);
 8009e4e:	6838      	ldr	r0, [r7, #0]
 8009e50:	f7ff fd30 	bl	80098b4 <get_tag_insert>

            /* Next time through, we are going to be sending data
             * immediately, either the end of the block we start
             * sending here or the insert string. */
            ssi->tag_index = 0;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	2200      	movs	r2, #0
 8009e58:	819a      	strh	r2, [r3, #12]
            ssi->tag_state = TAG_SENDING;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	2204      	movs	r2, #4
 8009e5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
            ssi->tag_end = ssi->parsed;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	605a      	str	r2, [r3, #4]
            ssi->parsed = ssi->tag_started;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/

            /* If there is any unsent data in the buffer prior to the
             * tag, we need to send it now. */
            if (ssi->tag_end > hs->file) {
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	f240 80b6 	bls.w	8009fe4 <http_send_data_ssi+0x520>
              /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
              len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	685a      	ldr	r2, [r3, #4]
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e86:	4293      	cmp	r3, r2
 8009e88:	dc06      	bgt.n	8009e98 <http_send_data_ssi+0x3d4>
 8009e8a:	693b      	ldr	r3, [r7, #16]
 8009e8c:	685a      	ldr	r2, [r3, #4]
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	1ad3      	subs	r3, r2, r3
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	e001      	b.n	8009e9c <http_send_data_ssi+0x3d8>
 8009e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e9c:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
              /* we would include the tag in sending */
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/

              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	6999      	ldr	r1, [r3, #24]
 8009ea2:	f107 020e 	add.w	r2, r7, #14
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f7ff fbdf 	bl	800966c <http_write>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
              if (err == ERR_OK) {
 8009eb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f040 8094 	bne.w	8009fe4 <http_send_data_ssi+0x520>
                data_to_send = 1;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	75bb      	strb	r3, [r7, #22]
                if (ssi->tag_started <= hs->file) {
                  /* pretend to have sent the tag, too */
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
                }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
                hs->file += len;
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	89fa      	ldrh	r2, [r7, #14]
 8009ec6:	441a      	add	r2, r3
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	619a      	str	r2, [r3, #24]
                hs->left -= len;
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ed0:	89fa      	ldrh	r2, [r7, #14]
 8009ed2:	1a9a      	subs	r2, r3, r2
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	625a      	str	r2, [r3, #36]	; 0x24
 8009ed8:	e084      	b.n	8009fe4 <http_send_data_ssi+0x520>
            }
          }
        } else {
          /* We found an unexpected character so this is not a tag. Move
           * back to idle state. */
          ssi->parse_left--;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	1e5a      	subs	r2, r3, #1
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	609a      	str	r2, [r3, #8]
          ssi->parsed++;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	693b      	ldr	r3, [r7, #16]
 8009eec:	601a      	str	r2, [r3, #0]
          ssi->tag_state = TAG_NONE;
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        }
        break;
 8009ef6:	e075      	b.n	8009fe4 <http_send_data_ssi+0x520>
       * from the file prior to the insert point or the insert string itself.
       */
      case TAG_SENDING:
        /* Do we have any remaining file data to send from the buffer prior
         * to the tag? */
        if (ssi->tag_end > hs->file) {
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	685a      	ldr	r2, [r3, #4]
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	699b      	ldr	r3, [r3, #24]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d93d      	bls.n	8009f80 <http_send_data_ssi+0x4bc>
          /* How much of the data can we send? */
#if LWIP_HTTPD_SSI_INCLUDE_TAG
          len = (u16_t)LWIP_MIN(ssi->tag_end - hs->file, 0xffff);
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009f12:	4293      	cmp	r3, r2
 8009f14:	dc06      	bgt.n	8009f24 <http_send_data_ssi+0x460>
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	b29b      	uxth	r3, r3
 8009f22:	e001      	b.n	8009f28 <http_send_data_ssi+0x464>
 8009f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f28:	81fb      	strh	r3, [r7, #14]
#else /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
          /* we would include the tag in sending */
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
#endif /* LWIP_HTTPD_SSI_INCLUDE_TAG*/
          if (len != 0) {
 8009f2a:	89fb      	ldrh	r3, [r7, #14]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d00a      	beq.n	8009f46 <http_send_data_ssi+0x482>
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	6999      	ldr	r1, [r3, #24]
 8009f34:	f107 020e 	add.w	r2, r7, #14
 8009f38:	2300      	movs	r3, #0
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7ff fb96 	bl	800966c <http_write>
 8009f40:	4603      	mov	r3, r0
 8009f42:	75fb      	strb	r3, [r7, #23]
 8009f44:	e001      	b.n	8009f4a <http_send_data_ssi+0x486>
          } else {
            err = ERR_OK;
 8009f46:	2300      	movs	r3, #0
 8009f48:	75fb      	strb	r3, [r7, #23]
          }
          if (err == ERR_OK) {
 8009f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d148      	bne.n	8009fe4 <http_send_data_ssi+0x520>
            data_to_send = 1;
 8009f52:	2301      	movs	r3, #1
 8009f54:	75bb      	strb	r3, [r7, #22]
            if (ssi->tag_started <= hs->file) {
              /* pretend to have sent the tag, too */
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
            }
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            hs->file += len;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	699b      	ldr	r3, [r3, #24]
 8009f5a:	89fa      	ldrh	r2, [r7, #14]
 8009f5c:	441a      	add	r2, r3
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	619a      	str	r2, [r3, #24]
            hs->left -= len;
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f66:	89fa      	ldrh	r2, [r7, #14]
 8009f68:	1a9a      	subs	r2, r3, r2
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24
 8009f6e:	e039      	b.n	8009fe4 <http_send_data_ssi+0x520>
 8009f70:	08018eec 	.word	0x08018eec
 8009f74:	08018fd8 	.word	0x08018fd8
 8009f78:	08018f34 	.word	0x08018f34
 8009f7c:	0801e528 	.word	0x0801e528
            }
          }
#endif /* LWIP_HTTPD_SSI_MULTIPART */

          /* Do we still have insert data left to send? */
          if (ssi->tag_index < ssi->tag_insert_len) {
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	899a      	ldrh	r2, [r3, #12]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	89db      	ldrh	r3, [r3, #14]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d222      	bcs.n	8009fd2 <http_send_data_ssi+0x50e>
            /* We are sending the insert string itself. How much of the
             * insert can we send? */
            len = (ssi->tag_insert_len - ssi->tag_index);
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	89da      	ldrh	r2, [r3, #14]
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	899b      	ldrh	r3, [r3, #12]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	81fb      	strh	r3, [r7, #14]

            /* Note that we set the copy flag here since we only have a
             * single tag insert buffer per connection. If we don't do
             * this, insert corruption can occur if more than one insert
             * is processed before we call tcp_output. */
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	899b      	ldrh	r3, [r3, #12]
 8009f9e:	3318      	adds	r3, #24
 8009fa0:	693a      	ldr	r2, [r7, #16]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	1cd9      	adds	r1, r3, #3
 8009fa6:	f107 020e 	add.w	r2, r7, #14
 8009faa:	2301      	movs	r3, #1
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7ff fb5d 	bl	800966c <http_write>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75fb      	strb	r3, [r7, #23]
                             HTTP_IS_TAG_VOLATILE(hs));
            if (err == ERR_OK) {
 8009fb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d112      	bne.n	8009fe4 <http_send_data_ssi+0x520>
              data_to_send = 1;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	75bb      	strb	r3, [r7, #22]
              ssi->tag_index += len;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	899a      	ldrh	r2, [r3, #12]
 8009fc6:	89fb      	ldrh	r3, [r7, #14]
 8009fc8:	4413      	add	r3, r2
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	819a      	strh	r2, [r3, #12]
 8009fd0:	e008      	b.n	8009fe4 <http_send_data_ssi+0x520>
#endif /* LWIP_HTTPD_SSI_MULTIPART */
            {
              /* We have sent all the insert data so go back to looking for
               * a new tag. */
              LWIP_DEBUGF(HTTPD_DEBUG, ("Everything sent.\n"));
              ssi->tag_index = 0;
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	819a      	strh	r2, [r3, #12]
              ssi->tag_state = TAG_NONE;
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
#if !LWIP_HTTPD_SSI_INCLUDE_TAG
              ssi->parsed = ssi->tag_end;
#endif /* !LWIP_HTTPD_SSI_INCLUDE_TAG*/
            }
          }
          break;
 8009fe0:	e000      	b.n	8009fe4 <http_send_data_ssi+0x520>
        default:
          break;
 8009fe2:	bf00      	nop
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d003      	beq.n	8009ff6 <http_send_data_ssi+0x532>
 8009fee:	693b      	ldr	r3, [r7, #16]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d004      	beq.n	800a000 <http_send_data_ssi+0x53c>
 8009ff6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f43f adba 	beq.w	8009b74 <http_send_data_ssi+0xb0>
  }

  /* If we drop out of the end of the for loop, this implies we must have
   * file data to send so send it now. In TAG_SENDING state, we've already
   * handled this so skip the send if that's the case. */
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 800a006:	2b04      	cmp	r3, #4
 800a008:	d034      	beq.n	800a074 <http_send_data_ssi+0x5b0>
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	429a      	cmp	r2, r3
 800a014:	d92e      	bls.n	800a074 <http_send_data_ssi+0x5b0>
      ssi->parsed = ssi->tag_started;
      ssi->tag_started = hs->buf;
    } else
#endif /* LWIP_HTTPD_DYNAMIC_FILE_READ && !LWIP_HTTPD_SSI_INCLUDE_TAG */
    {
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	699b      	ldr	r3, [r3, #24]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a024:	4293      	cmp	r3, r2
 800a026:	dc06      	bgt.n	800a036 <http_send_data_ssi+0x572>
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	1ad3      	subs	r3, r2, r3
 800a032:	b29b      	uxth	r3, r3
 800a034:	e001      	b.n	800a03a <http_send_data_ssi+0x576>
 800a036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a03a:	81fb      	strh	r3, [r7, #14]
    }

    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	6999      	ldr	r1, [r3, #24]
 800a040:	f107 020e 	add.w	r2, r7, #14
 800a044:	2300      	movs	r3, #0
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7ff fb10 	bl	800966c <http_write>
 800a04c:	4603      	mov	r3, r0
 800a04e:	75fb      	strb	r3, [r7, #23]
    if (err == ERR_OK) {
 800a050:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10d      	bne.n	800a074 <http_send_data_ssi+0x5b0>
      data_to_send = 1;
 800a058:	2301      	movs	r3, #1
 800a05a:	75bb      	strb	r3, [r7, #22]
      hs->file += len;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	699b      	ldr	r3, [r3, #24]
 800a060:	89fa      	ldrh	r2, [r7, #14]
 800a062:	441a      	add	r2, r3
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	619a      	str	r2, [r3, #24]
      hs->left -= len;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a06c:	89fa      	ldrh	r2, [r7, #14]
 800a06e:	1a9a      	subs	r2, r3, r2
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }
  return data_to_send;
 800a074:	7dbb      	ldrb	r3, [r7, #22]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop

0800a080 <http_send>:
 * @param pcb the pcb to send data
 * @param hs connection state
 */
static u8_t
http_send(struct altcp_pcb *pcb, struct http_state *hs)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  u8_t data_to_send = HTTP_NO_DATA_TO_SEND;
 800a08a:	2300      	movs	r3, #0
 800a08c:	73fb      	strb	r3, [r7, #15]
    return 0;
  }
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */

  /* If we were passed a NULL state structure pointer, ignore the call. */
  if (hs == NULL) {
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <http_send+0x18>
    return 0;
 800a094:	2300      	movs	r3, #0
 800a096:	e030      	b.n	800a0fa <http_send+0x7a>
  }
#endif /* LWIP_HTTPD_DYNAMIC_HEADERS */

  /* Have we run out of file data to send? If so, we need to read the next
   * block from the file. */
  if (hs->left == 0) {
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d108      	bne.n	800a0b2 <http_send+0x32>
    if (!http_check_eof(pcb, hs)) {
 800a0a0:	6839      	ldr	r1, [r7, #0]
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f7ff fca8 	bl	80099f8 <http_check_eof>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d101      	bne.n	800a0b2 <http_send+0x32>
      return 0;
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	e023      	b.n	800a0fa <http_send+0x7a>
    }
  }

#if LWIP_HTTPD_SSI
  if (hs->ssi) {
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d006      	beq.n	800a0c8 <http_send+0x48>
    data_to_send = http_send_data_ssi(pcb, hs);
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f7ff fd01 	bl	8009ac4 <http_send_data_ssi>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]
 800a0c6:	e005      	b.n	800a0d4 <http_send+0x54>
  } else
#endif /* LWIP_HTTPD_SSI */
  {
    data_to_send = http_send_data_nonssi(pcb, hs);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fcc4 	bl	8009a58 <http_send_data_nonssi>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	73fb      	strb	r3, [r7, #15]
  }

  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10d      	bne.n	800a0f8 <http_send+0x78>
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f7ff fa35 	bl	8009550 <fs_bytes_left>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dc05      	bgt.n	800a0f8 <http_send+0x78>
    /* We reached the end of the file so this request is done.
     * This adds the FIN flag right into the last data segment. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("End of file.\n"));
    http_eof(pcb, hs);
 800a0ec:	6839      	ldr	r1, [r7, #0]
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f7ff fb75 	bl	80097de <http_eof>
    return 0;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e000      	b.n	800a0fa <http_send+0x7a>
  }
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("send_data end.\n"));
  return data_to_send;
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
 800a10c:	6039      	str	r1, [r7, #0]
  err_t err;

  *uri = "/404.html";
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <http_get_404_file+0x80>)
 800a112:	601a      	str	r2, [r3, #0]
  err = fs_open(&hs->file_handle, *uri);
 800a114:	687a      	ldr	r2, [r7, #4]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4619      	mov	r1, r3
 800a11c:	4610      	mov	r0, r2
 800a11e:	f7ff f9cf 	bl	80094c0 <fs_open>
 800a122:	4603      	mov	r3, r0
 800a124:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d024      	beq.n	800a178 <http_get_404_file+0x74>
    /* 404.html doesn't exist. Try 404.htm instead. */
    *uri = "/404.htm";
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	4a15      	ldr	r2, [pc, #84]	; (800a188 <http_get_404_file+0x84>)
 800a132:	601a      	str	r2, [r3, #0]
    err = fs_open(&hs->file_handle, *uri);
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4619      	mov	r1, r3
 800a13c:	4610      	mov	r0, r2
 800a13e:	f7ff f9bf 	bl	80094c0 <fs_open>
 800a142:	4603      	mov	r3, r0
 800a144:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800a146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d014      	beq.n	800a178 <http_get_404_file+0x74>
      /* 404.htm doesn't exist either. Try 404.shtml instead. */
      *uri = "/404.shtml";
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	4a0e      	ldr	r2, [pc, #56]	; (800a18c <http_get_404_file+0x88>)
 800a152:	601a      	str	r2, [r3, #0]
      err = fs_open(&hs->file_handle, *uri);
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f7ff f9af 	bl	80094c0 <fs_open>
 800a162:	4603      	mov	r3, r0
 800a164:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 800a166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d004      	beq.n	800a178 <http_get_404_file+0x74>
        /* 404.htm doesn't exist either. Indicate to the caller that it should
         * send back a default 404 page.
         */
        *uri = NULL;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
        return NULL;
 800a174:	2300      	movs	r3, #0
 800a176:	e000      	b.n	800a17a <http_get_404_file+0x76>
      }
    }
  }

  return &hs->file_handle;
 800a178:	687b      	ldr	r3, [r7, #4]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3710      	adds	r7, #16
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	08018ff0 	.word	0x08018ff0
 800a188:	08018ffc 	.word	0x08018ffc
 800a18c:	08019008 	.word	0x08019008

0800a190 <http_parse_request>:
 *         ERR_INPROGRESS if request was OK so far but not fully received
 *         another err_t otherwise
 */
static err_t
http_parse_request(struct pbuf *inp, struct http_state *hs, struct altcp_pcb *pcb)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08e      	sub	sp, #56	; 0x38
 800a194:	af00      	add	r7, sp, #0
 800a196:	60f8      	str	r0, [r7, #12]
 800a198:	60b9      	str	r1, [r7, #8]
 800a19a:	607a      	str	r2, [r7, #4]
  char *data;
  char *crlf;
  u16_t data_len;
  struct pbuf *p = inp;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	627b      	str	r3, [r7, #36]	; 0x24
#if LWIP_HTTPD_SUPPORT_POST
  err_t err;
#endif /* LWIP_HTTPD_SUPPORT_POST */

  LWIP_UNUSED_ARG(pcb); /* only used for post */
  LWIP_ASSERT("p != NULL", p != NULL);
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d106      	bne.n	800a1b4 <http_parse_request+0x24>
 800a1a6:	4b65      	ldr	r3, [pc, #404]	; (800a33c <http_parse_request+0x1ac>)
 800a1a8:	f240 72ae 	movw	r2, #1966	; 0x7ae
 800a1ac:	4964      	ldr	r1, [pc, #400]	; (800a340 <http_parse_request+0x1b0>)
 800a1ae:	4865      	ldr	r0, [pc, #404]	; (800a344 <http_parse_request+0x1b4>)
 800a1b0:	f00d fdfc 	bl	8017dac <iprintf>
  LWIP_ASSERT("hs != NULL", hs != NULL);
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d106      	bne.n	800a1c8 <http_parse_request+0x38>
 800a1ba:	4b60      	ldr	r3, [pc, #384]	; (800a33c <http_parse_request+0x1ac>)
 800a1bc:	f240 72af 	movw	r2, #1967	; 0x7af
 800a1c0:	4961      	ldr	r1, [pc, #388]	; (800a348 <http_parse_request+0x1b8>)
 800a1c2:	4860      	ldr	r0, [pc, #384]	; (800a344 <http_parse_request+0x1b4>)
 800a1c4:	f00d fdf2 	bl	8017dac <iprintf>

  if ((hs->handle != NULL) || (hs->file != NULL)) {
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	695b      	ldr	r3, [r3, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <http_parse_request+0x48>
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <http_parse_request+0x4e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("Received data while sending a file\n"));
    /* already sending a file */
    /* @todo: abort? */
    return ERR_USE;
 800a1d8:	f06f 0307 	mvn.w	r3, #7
 800a1dc:	e0a9      	b.n	800a332 <http_parse_request+0x1a2>
  LWIP_DEBUGF(HTTPD_DEBUG, ("Received %"U16_F" bytes\n", p->tot_len));

  /* first check allowed characters in this pbuf? */

  /* enqueue the pbuf */
  if (hs->req == NULL) {
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6a1b      	ldr	r3, [r3, #32]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d103      	bne.n	800a1ee <http_parse_request+0x5e>
    LWIP_DEBUGF(HTTPD_DEBUG, ("First pbuf\n"));
    hs->req = p;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1ea:	621a      	str	r2, [r3, #32]
 800a1ec:	e005      	b.n	800a1fa <http_parse_request+0x6a>
  } else {
    LWIP_DEBUGF(HTTPD_DEBUG, ("pbuf enqueued\n"));
    pbuf_cat(hs->req, p);
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	6a1b      	ldr	r3, [r3, #32]
 800a1f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f002 f95d 	bl	800c4b4 <pbuf_cat>
  }
  /* increase pbuf ref counter as it is freed when we return but we want to
     keep it on the req list */
  pbuf_ref(p);
 800a1fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1fc:	f002 f932 	bl	800c464 <pbuf_ref>

  if (hs->req->next != NULL) {
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d012      	beq.n	800a230 <http_parse_request+0xa0>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	6a1b      	ldr	r3, [r3, #32]
 800a20e:	891b      	ldrh	r3, [r3, #8]
 800a210:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a214:	4293      	cmp	r3, r2
 800a216:	bf28      	it	cs
 800a218:	4613      	movcs	r3, r2
 800a21a:	867b      	strh	r3, [r7, #50]	; 0x32
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6a18      	ldr	r0, [r3, #32]
 800a220:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a222:	2300      	movs	r3, #0
 800a224:	4949      	ldr	r1, [pc, #292]	; (800a34c <http_parse_request+0x1bc>)
 800a226:	f002 fa7d 	bl	800c724 <pbuf_copy_partial>
    data = httpd_req_buf;
 800a22a:	4b48      	ldr	r3, [pc, #288]	; (800a34c <http_parse_request+0x1bc>)
 800a22c:	637b      	str	r3, [r7, #52]	; 0x34
 800a22e:	e005      	b.n	800a23c <http_parse_request+0xac>
  } else
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
  {
    data = (char *)p->payload;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	637b      	str	r3, [r7, #52]	; 0x34
    data_len = p->len;
 800a236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a238:	895b      	ldrh	r3, [r3, #10]
 800a23a:	867b      	strh	r3, [r7, #50]	; 0x32
      LWIP_DEBUGF(HTTPD_DEBUG, ("Warning: incomplete header due to chained pbufs\n"));
    }
  }

  /* received enough data for minimal request? */
  if (data_len >= MIN_REQ_LEN) {
 800a23c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a23e:	2b06      	cmp	r3, #6
 800a240:	d962      	bls.n	800a308 <http_parse_request+0x178>
    /* wait for CRLF before parsing anything */
    crlf = lwip_strnstr(data, CRLF, data_len);
 800a242:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a244:	461a      	mov	r2, r3
 800a246:	4942      	ldr	r1, [pc, #264]	; (800a350 <http_parse_request+0x1c0>)
 800a248:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a24a:	f000 fc5f 	bl	800ab0c <lwip_strnstr>
 800a24e:	6238      	str	r0, [r7, #32]
    if (crlf != NULL) {
 800a250:	6a3b      	ldr	r3, [r7, #32]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d058      	beq.n	800a308 <http_parse_request+0x178>
#if LWIP_HTTPD_SUPPORT_POST
      int is_post = 0;
#endif /* LWIP_HTTPD_SUPPORT_POST */
      int is_09 = 0;
 800a256:	2300      	movs	r3, #0
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
      char *sp1, *sp2;
      u16_t left_len, uri_len;
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("CRLF received, parsing request\n"));
      /* parse method */
      if (!strncmp(data, "GET ", 4)) {
 800a25a:	2204      	movs	r2, #4
 800a25c:	493d      	ldr	r1, [pc, #244]	; (800a354 <http_parse_request+0x1c4>)
 800a25e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a260:	f00d fe1e 	bl	8017ea0 <strncmp>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d116      	bne.n	800a298 <http_parse_request+0x108>
        sp1 = data + 3;
 800a26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a26c:	3303      	adds	r3, #3
 800a26e:	61fb      	str	r3, [r7, #28]
        LWIP_DEBUGF(HTTPD_DEBUG, ("Unsupported request method (not implemented): \"%s\"\n",
                                  data));
        return http_find_error_file(hs, 501);
      }
      /* if we come here, method is OK, parse URI */
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a276:	1ad3      	subs	r3, r2, r3
 800a278:	b29b      	uxth	r3, r3
 800a27a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800a27c:	1ad3      	subs	r3, r2, r3
 800a27e:	837b      	strh	r3, [r7, #26]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	3301      	adds	r3, #1
 800a284:	8b7a      	ldrh	r2, [r7, #26]
 800a286:	4934      	ldr	r1, [pc, #208]	; (800a358 <http_parse_request+0x1c8>)
 800a288:	4618      	mov	r0, r3
 800a28a:	f000 fc3f 	bl	800ab0c <lwip_strnstr>
 800a28e:	62b8      	str	r0, [r7, #40]	; 0x28
#if LWIP_HTTPD_SUPPORT_V09
      if (sp2 == NULL) {
 800a290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a292:	2b00      	cmp	r3, #0
 800a294:	d111      	bne.n	800a2ba <http_parse_request+0x12a>
 800a296:	e006      	b.n	800a2a6 <http_parse_request+0x116>
        data[4] = 0;
 800a298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a29a:	3304      	adds	r3, #4
 800a29c:	2200      	movs	r2, #0
 800a29e:	701a      	strb	r2, [r3, #0]
        return http_find_error_file(hs, 501);
 800a2a0:	f06f 030f 	mvn.w	r3, #15
 800a2a4:	e045      	b.n	800a332 <http_parse_request+0x1a2>
        /* HTTP 0.9: respond with correct protocol version */
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 800a2a6:	69fb      	ldr	r3, [r7, #28]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	8b7a      	ldrh	r2, [r7, #26]
 800a2ac:	4928      	ldr	r1, [pc, #160]	; (800a350 <http_parse_request+0x1c0>)
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fc2c 	bl	800ab0c <lwip_strnstr>
 800a2b4:	62b8      	str	r0, [r7, #40]	; 0x28
        is_09 = 1;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
          goto badrequest;
        }
#endif /* LWIP_HTTPD_SUPPORT_POST */
      }
#endif /* LWIP_HTTPD_SUPPORT_V09 */
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	3301      	adds	r3, #1
 800a2be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	833b      	strh	r3, [r7, #24]
      if ((sp2 != 0) && (sp2 > sp1)) {
 800a2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d01e      	beq.n	800a308 <http_parse_request+0x178>
 800a2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d91a      	bls.n	800a308 <http_parse_request+0x178>
        /* wait for CRLFCRLF (indicating end of HTTP headers) before parsing anything */
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 800a2d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4921      	ldr	r1, [pc, #132]	; (800a35c <http_parse_request+0x1cc>)
 800a2d8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a2da:	f000 fc17 	bl	800ab0c <lwip_strnstr>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d011      	beq.n	800a308 <http_parse_request+0x178>
          char *uri = sp1 + 1;
 800a2e4:	69fb      	ldr	r3, [r7, #28]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	617b      	str	r3, [r7, #20]
          } else {
            hs->keepalive = 0;
          }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
          /* null-terminate the METHOD (pbuf is freed anyway wen returning) */
          *sp1 = 0;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	701a      	strb	r2, [r3, #0]
          uri[uri_len] = 0;
 800a2f0:	8b3b      	ldrh	r3, [r7, #24]
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	701a      	strb	r2, [r3, #0]
            }
            return err;
          } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
          {
            return http_find_file(hs, uri, is_09);
 800a2fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2fc:	6979      	ldr	r1, [r7, #20]
 800a2fe:	68b8      	ldr	r0, [r7, #8]
 800a300:	f000 f82e 	bl	800a360 <http_find_file>
 800a304:	4603      	mov	r3, r0
 800a306:	e014      	b.n	800a332 <http_parse_request+0x1a2>
      }
    }
  }

#if LWIP_HTTPD_SUPPORT_REQUESTLIST
  clen = pbuf_clen(hs->req);
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	4618      	mov	r0, r3
 800a30e:	f002 f891 	bl	800c434 <pbuf_clen>
 800a312:	4603      	mov	r3, r0
 800a314:	827b      	strh	r3, [r7, #18]
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	6a1b      	ldr	r3, [r3, #32]
 800a31a:	891b      	ldrh	r3, [r3, #8]
 800a31c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a320:	d205      	bcs.n	800a32e <http_parse_request+0x19e>
 800a322:	8a7b      	ldrh	r3, [r7, #18]
 800a324:	2b05      	cmp	r3, #5
 800a326:	d802      	bhi.n	800a32e <http_parse_request+0x19e>
      (clen <= LWIP_HTTPD_REQ_QUEUELEN)) {
    /* request not fully received (too short or CRLF is missing) */
    return ERR_INPROGRESS;
 800a328:	f06f 0304 	mvn.w	r3, #4
 800a32c:	e001      	b.n	800a332 <http_parse_request+0x1a2>
#if LWIP_HTTPD_SUPPORT_POST
badrequest:
#endif /* LWIP_HTTPD_SUPPORT_POST */
    LWIP_DEBUGF(HTTPD_DEBUG, ("bad request\n"));
    /* could not parse request */
    return http_find_error_file(hs, 400);
 800a32e:	f06f 030f 	mvn.w	r3, #15
  }
}
 800a332:	4618      	mov	r0, r3
 800a334:	3738      	adds	r7, #56	; 0x38
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	08018eec 	.word	0x08018eec
 800a340:	08019014 	.word	0x08019014
 800a344:	08018f34 	.word	0x08018f34
 800a348:	08018f5c 	.word	0x08018f5c
 800a34c:	20009274 	.word	0x20009274
 800a350:	08019020 	.word	0x08019020
 800a354:	08019024 	.word	0x08019024
 800a358:	0801902c 	.word	0x0801902c
 800a35c:	08019030 	.word	0x08019030

0800a360 <http_find_file>:
 * @return ERR_OK if file was found and hs has been initialized correctly
 *         another err_t otherwise
 */
static err_t
http_find_file(struct http_state *hs, const char *uri, int is_09)
{
 800a360:	b590      	push	{r4, r7, lr}
 800a362:	b093      	sub	sp, #76	; 0x4c
 800a364:	af02      	add	r7, sp, #8
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  size_t loop;
  struct fs_file *file = NULL;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63bb      	str	r3, [r7, #56]	; 0x38
  char *params = NULL;
 800a370:	2300      	movs	r3, #0
 800a372:	637b      	str	r3, [r7, #52]	; 0x34
#endif /* LWIP_HTTPD_CGI */
#if !LWIP_HTTPD_SSI
  const
#endif /* !LWIP_HTTPD_SSI */
  /* By default, assume we will not be processing server-side-includes tags */
  u8_t tag_check = 0;
 800a374:	2300      	movs	r3, #0
 800a376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Have we been asked for the default file (in root or a directory) ? */
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
  size_t uri_len = strlen(uri);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7f5 ff51 	bl	8000224 <strlen>
 800a382:	6278      	str	r0, [r7, #36]	; 0x24
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a386:	2b00      	cmp	r3, #0
 800a388:	d072      	beq.n	800a470 <http_find_file+0x110>
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	3b01      	subs	r3, #1
 800a390:	4413      	add	r3, r2
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	2b2f      	cmp	r3, #47	; 0x2f
 800a396:	d16b      	bne.n	800a470 <http_find_file+0x110>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a398:	68bb      	ldr	r3, [r7, #8]
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 800a39a:	4a7b      	ldr	r2, [pc, #492]	; (800a588 <http_find_file+0x228>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d102      	bne.n	800a3a6 <http_find_file+0x46>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 800a3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d164      	bne.n	800a470 <http_find_file+0x110>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 800a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	2b3f      	cmp	r3, #63	; 0x3f
 800a3ac:	bf28      	it	cs
 800a3ae:	233f      	movcs	r3, #63	; 0x3f
 800a3b0:	623b      	str	r3, [r7, #32]
    if (copy_len > 0) {
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00a      	beq.n	800a3ce <http_find_file+0x6e>
      MEMCPY(http_uri_buf, uri, copy_len);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	6a3a      	ldr	r2, [r7, #32]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4872      	ldr	r0, [pc, #456]	; (800a588 <http_find_file+0x228>)
 800a3c0:	f00d fdf2 	bl	8017fa8 <memcpy>
      http_uri_buf[copy_len] = 0;
 800a3c4:	4a70      	ldr	r2, [pc, #448]	; (800a588 <http_find_file+0x228>)
 800a3c6:	6a3b      	ldr	r3, [r7, #32]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	701a      	strb	r2, [r3, #0]
#else /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
  if ((uri[0] == '/') &&  (uri[1] == 0)) {
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
    /* Try each of the configured default filenames until we find one
       that exists. */
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3d2:	e04a      	b.n	800a46a <http_find_file+0x10a>
      const char *file_name;
#if LWIP_HTTPD_MAX_REQUEST_URI_LEN
      if (copy_len > 0) {
 800a3d4:	6a3b      	ldr	r3, [r7, #32]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d028      	beq.n	800a42c <http_find_file+0xcc>
        size_t len_left = sizeof(http_uri_buf) - copy_len - 1;
 800a3da:	6a3b      	ldr	r3, [r7, #32]
 800a3dc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800a3e0:	61fb      	str	r3, [r7, #28]
        if (len_left > 0) {
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d01e      	beq.n	800a426 <http_find_file+0xc6>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 800a3e8:	4a68      	ldr	r2, [pc, #416]	; (800a58c <http_find_file+0x22c>)
 800a3ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f7f5 ff17 	bl	8000224 <strlen>
 800a3f6:	61b8      	str	r0, [r7, #24]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 800a3f8:	69ba      	ldr	r2, [r7, #24]
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	bf28      	it	cs
 800a400:	4613      	movcs	r3, r2
 800a402:	617b      	str	r3, [r7, #20]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 800a404:	6a3b      	ldr	r3, [r7, #32]
 800a406:	4a60      	ldr	r2, [pc, #384]	; (800a588 <http_find_file+0x228>)
 800a408:	1898      	adds	r0, r3, r2
 800a40a:	4a60      	ldr	r2, [pc, #384]	; (800a58c <http_find_file+0x22c>)
 800a40c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a40e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	4619      	mov	r1, r3
 800a416:	f00d fdc7 	bl	8017fa8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 800a41a:	6a3a      	ldr	r2, [r7, #32]
 800a41c:	697b      	ldr	r3, [r7, #20]
 800a41e:	4413      	add	r3, r2
 800a420:	4a59      	ldr	r2, [pc, #356]	; (800a588 <http_find_file+0x228>)
 800a422:	2100      	movs	r1, #0
 800a424:	54d1      	strb	r1, [r2, r3]
        }
        file_name = http_uri_buf;
 800a426:	4b58      	ldr	r3, [pc, #352]	; (800a588 <http_find_file+0x228>)
 800a428:	62bb      	str	r3, [r7, #40]	; 0x28
 800a42a:	e004      	b.n	800a436 <http_find_file+0xd6>
      } else
#endif /* LWIP_HTTPD_MAX_REQUEST_URI_LEN */
      {
        file_name = httpd_default_filenames[loop].name;
 800a42c:	4a57      	ldr	r2, [pc, #348]	; (800a58c <http_find_file+0x22c>)
 800a42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a430:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a434:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Looking for %s...\n", file_name));
      err = fs_open(&hs->file_handle, file_name);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7ff f840 	bl	80094c0 <fs_open>
 800a440:	4603      	mov	r3, r0
 800a442:	74fb      	strb	r3, [r7, #19]
      if (err == ERR_OK) {
 800a444:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <http_find_file+0x104>
        uri = file_name;
 800a44c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a44e:	60bb      	str	r3, [r7, #8]
        file = &hs->file_handle;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	63bb      	str	r3, [r7, #56]	; 0x38
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opened.\n"));
#if LWIP_HTTPD_SSI
        tag_check = httpd_default_filenames[loop].shtml;
 800a454:	4a4d      	ldr	r2, [pc, #308]	; (800a58c <http_find_file+0x22c>)
 800a456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a458:	00db      	lsls	r3, r3, #3
 800a45a:	4413      	add	r3, r2
 800a45c:	791b      	ldrb	r3, [r3, #4]
 800a45e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI */
        break;
 800a462:	e005      	b.n	800a470 <http_find_file+0x110>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 800a464:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a466:	3301      	adds	r3, #1
 800a468:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46c:	2b04      	cmp	r3, #4
 800a46e:	d9b1      	bls.n	800a3d4 <http_find_file+0x74>
      }
    }
  }
  if (file == NULL) {
 800a470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a472:	2b00      	cmp	r3, #0
 800a474:	d16d      	bne.n	800a552 <http_find_file+0x1f2>
    /* No - we've been asked for a specific file. */
    /* First, isolate the base URI (without any parameters) */
    params = (char *)strchr(uri, '?');
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	213f      	movs	r1, #63	; 0x3f
 800a47a:	4618      	mov	r0, r3
 800a47c:	f00d fd03 	bl	8017e86 <strchr>
 800a480:	6378      	str	r0, [r7, #52]	; 0x34
    if (params != NULL) {
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	2b00      	cmp	r3, #0
 800a486:	d005      	beq.n	800a494 <http_find_file+0x134>
      /* URI contains parameters. NULL-terminate the base URI */
      *params = '\0';
 800a488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48a:	2200      	movs	r2, #0
 800a48c:	701a      	strb	r2, [r3, #0]
      params++;
 800a48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a490:	3301      	adds	r3, #1
 800a492:	637b      	str	r3, [r7, #52]	; 0x34
    }

#if LWIP_HTTPD_CGI
    http_cgi_paramcount = -1;
 800a494:	4b3e      	ldr	r3, [pc, #248]	; (800a590 <http_find_file+0x230>)
 800a496:	f04f 32ff 	mov.w	r2, #4294967295
 800a49a:	601a      	str	r2, [r3, #0]
    /* Does the base URI we have isolated correspond to a CGI handler? */
    if (httpd_num_cgis && httpd_cgis) {
 800a49c:	4b3d      	ldr	r3, [pc, #244]	; (800a594 <http_find_file+0x234>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d034      	beq.n	800a50e <http_find_file+0x1ae>
 800a4a4:	4b3c      	ldr	r3, [pc, #240]	; (800a598 <http_find_file+0x238>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d030      	beq.n	800a50e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	633b      	str	r3, [r7, #48]	; 0x30
 800a4b0:	e028      	b.n	800a504 <http_find_file+0x1a4>
        if (strcmp(uri, httpd_cgis[i].pcCGIName) == 0) {
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	4b38      	ldr	r3, [pc, #224]	; (800a598 <http_find_file+0x238>)
 800a4b6:	681a      	ldr	r2, [r3, #0]
 800a4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ba:	00db      	lsls	r3, r3, #3
 800a4bc:	4413      	add	r3, r2
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	4619      	mov	r1, r3
 800a4c2:	f7f5 fea5 	bl	8000210 <strcmp>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d118      	bne.n	800a4fe <http_find_file+0x19e>
          /*
           * We found a CGI that handles this URI so extract the
           * parameters and call the handler.
           */
          http_cgi_paramcount = extract_uri_parameters(hs, params);
 800a4cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f7ff f992 	bl	80097f8 <extract_uri_parameters>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	4a2e      	ldr	r2, [pc, #184]	; (800a590 <http_find_file+0x230>)
 800a4d8:	6013      	str	r3, [r2, #0]
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a4da:	4b2f      	ldr	r3, [pc, #188]	; (800a598 <http_find_file+0x238>)
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	00db      	lsls	r3, r3, #3
 800a4e2:	4413      	add	r3, r2
 800a4e4:	685c      	ldr	r4, [r3, #4]
 800a4e6:	4b2a      	ldr	r3, [pc, #168]	; (800a590 <http_find_file+0x230>)
 800a4e8:	6819      	ldr	r1, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	f103 0230 	add.w	r2, r3, #48	; 0x30
                                         hs->param_vals);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3370      	adds	r3, #112	; 0x70
          uri = httpd_cgis[i].pfnCGIHandler(i, http_cgi_paramcount, hs->params,
 800a4f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4f6:	47a0      	blx	r4
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	60bb      	str	r3, [r7, #8]
          break;
 800a4fc:	e007      	b.n	800a50e <http_find_file+0x1ae>
      for (i = 0; i < httpd_num_cgis; i++) {
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a500:	3301      	adds	r3, #1
 800a502:	633b      	str	r3, [r7, #48]	; 0x30
 800a504:	4b23      	ldr	r3, [pc, #140]	; (800a594 <http_find_file+0x234>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a50a:	429a      	cmp	r2, r3
 800a50c:	dbd1      	blt.n	800a4b2 <http_find_file+0x152>
    }
#endif /* LWIP_HTTPD_CGI */

    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Opening %s\n", uri));

    err = fs_open(&hs->file_handle, uri);
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	4611      	mov	r1, r2
 800a514:	4618      	mov	r0, r3
 800a516:	f7fe ffd3 	bl	80094c0 <fs_open>
 800a51a:	4603      	mov	r3, r0
 800a51c:	74fb      	strb	r3, [r7, #19]
    if (err == ERR_OK) {
 800a51e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <http_find_file+0x1cc>
      file = &hs->file_handle;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	63bb      	str	r3, [r7, #56]	; 0x38
 800a52a:	e006      	b.n	800a53a <http_find_file+0x1da>
    } else {
      file = http_get_404_file(hs, &uri);
 800a52c:	f107 0308 	add.w	r3, r7, #8
 800a530:	4619      	mov	r1, r3
 800a532:	68f8      	ldr	r0, [r7, #12]
 800a534:	f7ff fde6 	bl	800a104 <http_get_404_file>
 800a538:	63b8      	str	r0, [r7, #56]	; 0x38
    }
#if LWIP_HTTPD_SSI
    if (file != NULL) {
 800a53a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d008      	beq.n	800a552 <http_find_file+0x1f2>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 800a540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a542:	7c1b      	ldrb	r3, [r3, #16]
 800a544:	f003 0308 	and.w	r3, r3, #8
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <http_find_file+0x1f2>
        tag_check = 1;
 800a54c:	2301      	movs	r3, #1
 800a54e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
#endif /* LWIP_HTTPD_SSI_BY_FILE_EXTENSION */
      }
    }
#endif /* LWIP_HTTPD_SSI */
  }
  if (file == NULL) {
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	2b00      	cmp	r3, #0
 800a556:	d106      	bne.n	800a566 <http_find_file+0x206>
    /* None of the default filenames exist so send back a 404 page */
    file = http_get_404_file(hs, &uri);
 800a558:	f107 0308 	add.w	r3, r7, #8
 800a55c:	4619      	mov	r1, r3
 800a55e:	68f8      	ldr	r0, [r7, #12]
 800a560:	f7ff fdd0 	bl	800a104 <http_get_404_file>
 800a564:	63b8      	str	r0, [r7, #56]	; 0x38
  }
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a56a:	9301      	str	r3, [sp, #4]
 800a56c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	4613      	mov	r3, r2
 800a574:	687a      	ldr	r2, [r7, #4]
 800a576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 f80f 	bl	800a59c <http_init_file>
 800a57e:	4603      	mov	r3, r0
}
 800a580:	4618      	mov	r0, r3
 800a582:	3744      	adds	r7, #68	; 0x44
 800a584:	46bd      	mov	sp, r7
 800a586:	bd90      	pop	{r4, r7, pc}
 800a588:	20009674 	.word	0x20009674
 800a58c:	0801e500 	.word	0x0801e500
 800a590:	200096c0 	.word	0x200096c0
 800a594:	200096bc 	.word	0x200096bc
 800a598:	200096b8 	.word	0x200096b8

0800a59c <http_init_file>:
 *         another err_t otherwise
 */
static err_t
http_init_file(struct http_state *hs, struct fs_file *file, int is_09, const char *uri,
               u8_t tag_check, char *params)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b088      	sub	sp, #32
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	60f8      	str	r0, [r7, #12]
 800a5a4:	60b9      	str	r1, [r7, #8]
 800a5a6:	607a      	str	r2, [r7, #4]
 800a5a8:	603b      	str	r3, [r7, #0]
#if !LWIP_HTTPD_SUPPORT_V09
  LWIP_UNUSED_ARG(is_09);
#endif
  if (file != NULL) {
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d07d      	beq.n	800a6ac <http_init_file+0x110>
    /* file opened, initialise struct http_state */
#if !LWIP_HTTPD_DYNAMIC_FILE_READ
    /* If dynamic read is disabled, file data must be in one piece and available now */
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d106      	bne.n	800a5c6 <http_init_file+0x2a>
 800a5b8:	4b45      	ldr	r3, [pc, #276]	; (800a6d0 <http_init_file+0x134>)
 800a5ba:	f640 120b 	movw	r2, #2315	; 0x90b
 800a5be:	4945      	ldr	r1, [pc, #276]	; (800a6d4 <http_init_file+0x138>)
 800a5c0:	4845      	ldr	r0, [pc, #276]	; (800a6d8 <http_init_file+0x13c>)
 800a5c2:	f00d fbf3 	bl	8017dac <iprintf>
#endif

#if LWIP_HTTPD_SSI
    if (tag_check) {
 800a5c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d01c      	beq.n	800a608 <http_init_file+0x6c>
      struct http_ssi_state *ssi = http_ssi_state_alloc();
 800a5ce:	f7fe ffce 	bl	800956e <http_ssi_state_alloc>
 800a5d2:	61f8      	str	r0, [r7, #28]
      if (ssi != NULL) {
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d016      	beq.n	800a608 <http_init_file+0x6c>
        ssi->tag_index = 0;
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	819a      	strh	r2, [r3, #12]
        ssi->tag_state = TAG_NONE;
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
        ssi->parsed = file->data;
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	601a      	str	r2, [r3, #0]
        ssi->parse_left = file->len;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	461a      	mov	r2, r3
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	609a      	str	r2, [r3, #8]
        ssi->tag_end = file->data;
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	69fb      	ldr	r3, [r7, #28]
 800a600:	605a      	str	r2, [r3, #4]
        hs->ssi = ssi;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	69fa      	ldr	r2, [r7, #28]
 800a606:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
#else /* LWIP_HTTPD_SSI */
    LWIP_UNUSED_ARG(tag_check);
#endif /* LWIP_HTTPD_SSI */
    hs->handle = file;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68ba      	ldr	r2, [r7, #8]
 800a60c:	615a      	str	r2, [r3, #20]
                       );
    }
#else /* LWIP_HTTPD_CGI_SSI */
    LWIP_UNUSED_ARG(params);
#endif /* LWIP_HTTPD_CGI_SSI */
    hs->file = file->data;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	619a      	str	r2, [r3, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 800a616:	68bb      	ldr	r3, [r7, #8]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da06      	bge.n	800a62c <http_init_file+0x90>
 800a61e:	4b2c      	ldr	r3, [pc, #176]	; (800a6d0 <http_init_file+0x134>)
 800a620:	f640 1234 	movw	r2, #2356	; 0x934
 800a624:	492d      	ldr	r1, [pc, #180]	; (800a6dc <http_init_file+0x140>)
 800a626:	482c      	ldr	r0, [pc, #176]	; (800a6d8 <http_init_file+0x13c>)
 800a628:	f00d fbc0 	bl	8017dac <iprintf>
      /* custom file, need to read data first (via fs_read_custom) */
      hs->left = 0;
    } else
#endif /* LWIP_HTTPD_CUSTOM_FILES */
    {
      hs->left = (u32_t)file->len;
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	461a      	mov	r2, r3
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	625a      	str	r2, [r3, #36]	; 0x24
    }
    hs->retries = 0;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#if LWIP_HTTPD_TIMING
    hs->time_started = sys_now();
#endif /* LWIP_HTTPD_TIMING */
#if !LWIP_HTTPD_DYNAMIC_HEADERS
    LWIP_ASSERT("HTTP headers not included in file system",
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	695b      	ldr	r3, [r3, #20]
 800a642:	7c1b      	ldrb	r3, [r3, #16]
 800a644:	f003 0301 	and.w	r3, r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d106      	bne.n	800a65a <http_init_file+0xbe>
 800a64c:	4b20      	ldr	r3, [pc, #128]	; (800a6d0 <http_init_file+0x134>)
 800a64e:	f640 1243 	movw	r2, #2371	; 0x943
 800a652:	4923      	ldr	r1, [pc, #140]	; (800a6e0 <http_init_file+0x144>)
 800a654:	4820      	ldr	r0, [pc, #128]	; (800a6d8 <http_init_file+0x13c>)
 800a656:	f00d fba9 	bl	8017dac <iprintf>
                (hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0);
#endif /* !LWIP_HTTPD_DYNAMIC_HEADERS */
#if LWIP_HTTPD_SUPPORT_V09
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d032      	beq.n	800a6c6 <http_init_file+0x12a>
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	695b      	ldr	r3, [r3, #20]
 800a664:	7c1b      	ldrb	r3, [r3, #16]
 800a666:	f003 0301 	and.w	r3, r3, #1
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d02b      	beq.n	800a6c6 <http_init_file+0x12a>
      /* HTTP/0.9 responses are sent without HTTP header,
         search for the end of the header. */
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6998      	ldr	r0, [r3, #24]
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a676:	461a      	mov	r2, r3
 800a678:	491a      	ldr	r1, [pc, #104]	; (800a6e4 <http_init_file+0x148>)
 800a67a:	f000 fa47 	bl	800ab0c <lwip_strnstr>
 800a67e:	61b8      	str	r0, [r7, #24]
      if (file_start != NULL) {
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d01f      	beq.n	800a6c6 <http_init_file+0x12a>
        int diff = file_start + 4 - hs->file;
 800a686:	69bb      	ldr	r3, [r7, #24]
 800a688:	1d1a      	adds	r2, r3, #4
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	1ad3      	subs	r3, r2, r3
 800a690:	617b      	str	r3, [r7, #20]
        hs->file += diff;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	699a      	ldr	r2, [r3, #24]
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	441a      	add	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	619a      	str	r2, [r3, #24]
        hs->left -= (u32_t)diff;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	1ad2      	subs	r2, r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	625a      	str	r2, [r3, #36]	; 0x24
 800a6aa:	e00c      	b.n	800a6c6 <http_init_file+0x12a>
      }
    }
#endif /* LWIP_HTTPD_SUPPORT_V09*/
  } else {
    hs->handle = NULL;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	615a      	str	r2, [r3, #20]
    hs->file = NULL;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	619a      	str	r2, [r3, #24]
    hs->left = 0;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	625a      	str	r2, [r3, #36]	; 0x24
    hs->retries = 0;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        hs->keepalive = 0;
      }
    }
  }
#endif /* LWIP_HTTPD_SUPPORT_11_KEEPALIVE */
  return ERR_OK;
 800a6c6:	2300      	movs	r3, #0
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3720      	adds	r7, #32
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}
 800a6d0:	08018eec 	.word	0x08018eec
 800a6d4:	08019038 	.word	0x08019038
 800a6d8:	08018f34 	.word	0x08018f34
 800a6dc:	0801904c 	.word	0x0801904c
 800a6e0:	0801906c 	.word	0x0801906c
 800a6e4:	08019030 	.word	0x08019030

0800a6e8 <http_err>:
 * The pcb had an error and is already deallocated.
 * The argument might still be valid (if != NULL).
 */
static void
http_err(void *arg, err_t err)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b084      	sub	sp, #16
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err);

  LWIP_DEBUGF(HTTPD_DEBUG, ("http_err: %s", lwip_strerr(err)));

  if (hs != NULL) {
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <http_err+0x1c>
    http_state_free(hs);
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f7fe ffa2 	bl	8009648 <http_state_free>
  }
}
 800a704:	bf00      	nop
 800a706:	3710      	adds	r7, #16
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <http_sent>:
 * Data has been sent and acknowledged by the remote host.
 * This means that more data can be sent.
 */
static err_t
http_sent(void *arg, struct altcp_pcb *pcb, u16_t len)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b086      	sub	sp, #24
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	4613      	mov	r3, r2
 800a718:	80fb      	strh	r3, [r7, #6]
  struct http_state *hs = (struct http_state *)arg;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	617b      	str	r3, [r7, #20]

  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_sent %p\n", (void *)pcb));

  LWIP_UNUSED_ARG(len);

  if (hs == NULL) {
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d101      	bne.n	800a728 <http_sent+0x1c>
    return ERR_OK;
 800a724:	2300      	movs	r3, #0
 800a726:	e008      	b.n	800a73a <http_sent+0x2e>
  }

  hs->retries = 0;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  http_send(pcb, hs);
 800a730:	6979      	ldr	r1, [r7, #20]
 800a732:	68b8      	ldr	r0, [r7, #8]
 800a734:	f7ff fca4 	bl	800a080 <http_send>

  return ERR_OK;
 800a738:	2300      	movs	r3, #0
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <http_poll>:
 *
 * This could be increased, but we don't want to waste resources for bad connections.
 */
static err_t
http_poll(void *arg, struct altcp_pcb *pcb)
{
 800a742:	b580      	push	{r7, lr}
 800a744:	b084      	sub	sp, #16
 800a746:	af00      	add	r7, sp, #0
 800a748:	6078      	str	r0, [r7, #4]
 800a74a:	6039      	str	r1, [r7, #0]
  struct http_state *hs = (struct http_state *)arg;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: pcb=%p hs=%p pcb_state=%s\n",
              (void *)pcb, (void *)hs, tcp_debug_state_str(altcp_dbg_get_tcp_state(pcb))));

  if (hs == NULL) {
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d107      	bne.n	800a766 <http_poll+0x24>
    err_t closed;
    /* arg is null, close. */
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: arg is NULL, close\n"));
    closed = http_close_conn(pcb, NULL);
 800a756:	2100      	movs	r1, #0
 800a758:	6838      	ldr	r0, [r7, #0]
 800a75a:	f7ff f831 	bl	80097c0 <http_close_conn>
 800a75e:	4603      	mov	r3, r0
 800a760:	72fb      	strb	r3, [r7, #11]
    if (closed == ERR_MEM) {
      altcp_abort(pcb);
      return ERR_ABRT;
    }
#endif /* LWIP_HTTPD_ABORT_ON_CLOSE_MEM_ERROR */
    return ERR_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e021      	b.n	800a7aa <http_poll+0x68>
  } else {
    hs->retries++;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a76c:	3301      	adds	r3, #1
 800a76e:	b2da      	uxtb	r2, r3
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	d105      	bne.n	800a78c <http_poll+0x4a>
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_poll: too many retries, close\n"));
      http_close_conn(pcb, hs);
 800a780:	68f9      	ldr	r1, [r7, #12]
 800a782:	6838      	ldr	r0, [r7, #0]
 800a784:	f7ff f81c 	bl	80097c0 <http_close_conn>
      return ERR_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	e00e      	b.n	800a7aa <http_poll+0x68>
    }

    /* If this connection has a file open, try to send some more data. If
     * it has not yet received a GET request, don't do this since it will
     * cause the connection to close immediately. */
    if (hs->handle) {
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	695b      	ldr	r3, [r3, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d009      	beq.n	800a7a8 <http_poll+0x66>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_poll: try to send more data\n"));
      if (http_send(pcb, hs)) {
 800a794:	68f9      	ldr	r1, [r7, #12]
 800a796:	6838      	ldr	r0, [r7, #0]
 800a798:	f7ff fc72 	bl	800a080 <http_send>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d002      	beq.n	800a7a8 <http_poll+0x66>
        /* If we wrote anything to be sent, go ahead and send it now. */
        LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("tcp_output\n"));
        altcp_output(pcb);
 800a7a2:	6838      	ldr	r0, [r7, #0]
 800a7a4:	f007 f946 	bl	8011a34 <tcp_output>
      }
    }
  }

  return ERR_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}
	...

0800a7b4 <http_recv>:
 * Data has been received on this pcb.
 * For HTTP 1.0, this should normally only happen once (if the request fits in one packet).
 */
static err_t
http_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a7b4:	b580      	push	{r7, lr}
 800a7b6:	b086      	sub	sp, #24
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	60f8      	str	r0, [r7, #12]
 800a7bc:	60b9      	str	r1, [r7, #8]
 800a7be:	607a      	str	r2, [r7, #4]
 800a7c0:	70fb      	strb	r3, [r7, #3]
  struct http_state *hs = (struct http_state *)arg;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: pcb=%p pbuf=%p err=%s\n", (void *)pcb,
              (void *)p, lwip_strerr(err)));

  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 800a7c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d105      	bne.n	800a7da <http_recv+0x26>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <http_recv+0x26>
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d111      	bne.n	800a7fe <http_recv+0x4a>
    /* error or closed by other side? */
    if (p != NULL) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d008      	beq.n	800a7f2 <http_recv+0x3e>
      /* Inform TCP that we have taken the data. */
      altcp_recved(pcb, p->tot_len);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	891b      	ldrh	r3, [r3, #8]
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	68b8      	ldr	r0, [r7, #8]
 800a7e8:	f002 fd14 	bl	800d214 <tcp_recved>
      pbuf_free(p);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f001 fd93 	bl	800c318 <pbuf_free>
    }
    if (hs == NULL) {
      /* this should not happen, only to be robust */
      LWIP_DEBUGF(HTTPD_DEBUG, ("Error, http_recv: hs is NULL, close\n"));
    }
    http_close_conn(pcb, hs);
 800a7f2:	6979      	ldr	r1, [r7, #20]
 800a7f4:	68b8      	ldr	r0, [r7, #8]
 800a7f6:	f7fe ffe3 	bl	80097c0 <http_close_conn>
    return ERR_OK;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	e055      	b.n	800a8aa <http_recv+0xf6>
    hs->unrecved_bytes += p->tot_len;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST && LWIP_HTTPD_POST_MANUAL_WND */
  {
    /* Inform TCP that we have taken the data. */
    altcp_recved(pcb, p->tot_len);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	891b      	ldrh	r3, [r3, #8]
 800a802:	4619      	mov	r1, r3
 800a804:	68b8      	ldr	r0, [r7, #8]
 800a806:	f002 fd05 	bl	800d214 <tcp_recved>
    }
    return ERR_OK;
  } else
#endif /* LWIP_HTTPD_SUPPORT_POST */
  {
    if (hs->handle == NULL) {
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d147      	bne.n	800a8a2 <http_recv+0xee>
      err_t parsed = http_parse_request(p, hs, pcb);
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	6979      	ldr	r1, [r7, #20]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f7ff fcba 	bl	800a190 <http_parse_request>
 800a81c:	4603      	mov	r3, r0
 800a81e:	74fb      	strb	r3, [r7, #19]
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 800a820:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d015      	beq.n	800a854 <http_recv+0xa0>
 800a828:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a82c:	f113 0f05 	cmn.w	r3, #5
 800a830:	d010      	beq.n	800a854 <http_recv+0xa0>
 800a832:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a836:	f113 0f10 	cmn.w	r3, #16
 800a83a:	d00b      	beq.n	800a854 <http_recv+0xa0>
 800a83c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a840:	f113 0f08 	cmn.w	r3, #8
 800a844:	d006      	beq.n	800a854 <http_recv+0xa0>
 800a846:	4b1b      	ldr	r3, [pc, #108]	; (800a8b4 <http_recv+0x100>)
 800a848:	f640 2204 	movw	r2, #2564	; 0xa04
 800a84c:	491a      	ldr	r1, [pc, #104]	; (800a8b8 <http_recv+0x104>)
 800a84e:	481b      	ldr	r0, [pc, #108]	; (800a8bc <http_recv+0x108>)
 800a850:	f00d faac 	bl	8017dac <iprintf>
                  || parsed == ERR_INPROGRESS || parsed == ERR_ARG || parsed == ERR_USE);
#if LWIP_HTTPD_SUPPORT_REQUESTLIST
      if (parsed != ERR_INPROGRESS) {
 800a854:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a858:	f113 0f05 	cmn.w	r3, #5
 800a85c:	d00b      	beq.n	800a876 <http_recv+0xc2>
        /* request fully parsed or error */
        if (hs->req != NULL) {
 800a85e:	697b      	ldr	r3, [r7, #20]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d007      	beq.n	800a876 <http_recv+0xc2>
          pbuf_free(hs->req);
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	6a1b      	ldr	r3, [r3, #32]
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 fd54 	bl	800c318 <pbuf_free>
          hs->req = NULL;
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	2200      	movs	r2, #0
 800a874:	621a      	str	r2, [r3, #32]
        }
      }
#endif /* LWIP_HTTPD_SUPPORT_REQUESTLIST */
      pbuf_free(p);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f001 fd4e 	bl	800c318 <pbuf_free>
      if (parsed == ERR_OK) {
 800a87c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <http_recv+0xda>
#if LWIP_HTTPD_SUPPORT_POST
        if (hs->post_content_len_left == 0)
#endif /* LWIP_HTTPD_SUPPORT_POST */
        {
          LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("http_recv: data %p len %"S32_F"\n", (const void *)hs->file, hs->left));
          http_send(pcb, hs);
 800a884:	6979      	ldr	r1, [r7, #20]
 800a886:	68b8      	ldr	r0, [r7, #8]
 800a888:	f7ff fbfa 	bl	800a080 <http_send>
 800a88c:	e00c      	b.n	800a8a8 <http_recv+0xf4>
        }
      } else if (parsed == ERR_ARG) {
 800a88e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a892:	f113 0f10 	cmn.w	r3, #16
 800a896:	d107      	bne.n	800a8a8 <http_recv+0xf4>
        /* @todo: close on ERR_USE? */
        http_close_conn(pcb, hs);
 800a898:	6979      	ldr	r1, [r7, #20]
 800a89a:	68b8      	ldr	r0, [r7, #8]
 800a89c:	f7fe ff90 	bl	80097c0 <http_close_conn>
 800a8a0:	e002      	b.n	800a8a8 <http_recv+0xf4>
      }
    } else {
      LWIP_DEBUGF(HTTPD_DEBUG, ("http_recv: already sending data\n"));
      /* already sending but still receiving data, we might want to RST here? */
      pbuf_free(p);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fd38 	bl	800c318 <pbuf_free>
    }
  }
  return ERR_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3718      	adds	r7, #24
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	08018eec 	.word	0x08018eec
 800a8b8:	08019098 	.word	0x08019098
 800a8bc:	08018f34 	.word	0x08018f34

0800a8c0 <http_accept>:
/**
 * A new incoming connection has been accepted.
 */
static err_t
http_accept(void *arg, struct altcp_pcb *pcb, err_t err)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b086      	sub	sp, #24
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	71fb      	strb	r3, [r7, #7]
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 800a8ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d102      	bne.n	800a8dc <http_accept+0x1c>
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <http_accept+0x22>
    return ERR_VAL;
 800a8dc:	f06f 0305 	mvn.w	r3, #5
 800a8e0:	e025      	b.n	800a92e <http_accept+0x6e>
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a8e2:	2101      	movs	r1, #1
 800a8e4:	68b8      	ldr	r0, [r7, #8]
 800a8e6:	f003 f979 	bl	800dbdc <tcp_setprio>

  /* Allocate memory for the structure that holds the state of the
     connection - initialized by that function. */
  hs = http_state_alloc();
 800a8ea:	f7fe fe6f 	bl	80095cc <http_state_alloc>
 800a8ee:	6178      	str	r0, [r7, #20]
  if (hs == NULL) {
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d102      	bne.n	800a8fc <http_accept+0x3c>
    LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept: Out of memory, RST\n"));
    return ERR_MEM;
 800a8f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fa:	e018      	b.n	800a92e <http_accept+0x6e>
  }
  hs->pcb = pcb;
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	61da      	str	r2, [r3, #28]

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 800a902:	6979      	ldr	r1, [r7, #20]
 800a904:	68b8      	ldr	r0, [r7, #8]
 800a906:	f003 fb69 	bl	800dfdc <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 800a90a:	490b      	ldr	r1, [pc, #44]	; (800a938 <http_accept+0x78>)
 800a90c:	68b8      	ldr	r0, [r7, #8]
 800a90e:	f003 fb77 	bl	800e000 <tcp_recv>
  altcp_err(pcb, http_err);
 800a912:	490a      	ldr	r1, [pc, #40]	; (800a93c <http_accept+0x7c>)
 800a914:	68b8      	ldr	r0, [r7, #8]
 800a916:	f003 fbb7 	bl	800e088 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 800a91a:	2204      	movs	r2, #4
 800a91c:	4908      	ldr	r1, [pc, #32]	; (800a940 <http_accept+0x80>)
 800a91e:	68b8      	ldr	r0, [r7, #8]
 800a920:	f003 fbec 	bl	800e0fc <tcp_poll>
  altcp_sent(pcb, http_sent);
 800a924:	4907      	ldr	r1, [pc, #28]	; (800a944 <http_accept+0x84>)
 800a926:	68b8      	ldr	r0, [r7, #8]
 800a928:	f003 fb8c 	bl	800e044 <tcp_sent>

  return ERR_OK;
 800a92c:	2300      	movs	r3, #0
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	0800a7b5 	.word	0x0800a7b5
 800a93c:	0800a6e9 	.word	0x0800a6e9
 800a940:	0800a743 	.word	0x0800a743
 800a944:	0800a70d 	.word	0x0800a70d

0800a948 <httpd_init_pcb>:

static void
httpd_init_pcb(struct altcp_pcb *pcb, u16_t port)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	807b      	strh	r3, [r7, #2]
  err_t err;

  if (pcb) {
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d029      	beq.n	800a9ae <httpd_init_pcb+0x66>
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 800a95a:	2101      	movs	r1, #1
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f003 f93d 	bl	800dbdc <tcp_setprio>
    /* set SOF_REUSEADDR here to explicitly bind httpd to multiple interfaces */
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 800a962:	887b      	ldrh	r3, [r7, #2]
 800a964:	461a      	mov	r2, r3
 800a966:	4914      	ldr	r1, [pc, #80]	; (800a9b8 <httpd_init_pcb+0x70>)
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f002 fa85 	bl	800ce78 <tcp_bind>
 800a96e:	4603      	mov	r3, r0
 800a970:	73fb      	strb	r3, [r7, #15]
    LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 800a972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d006      	beq.n	800a988 <httpd_init_pcb+0x40>
 800a97a:	4b10      	ldr	r3, [pc, #64]	; (800a9bc <httpd_init_pcb+0x74>)
 800a97c:	f640 2257 	movw	r2, #2647	; 0xa57
 800a980:	490f      	ldr	r1, [pc, #60]	; (800a9c0 <httpd_init_pcb+0x78>)
 800a982:	4810      	ldr	r0, [pc, #64]	; (800a9c4 <httpd_init_pcb+0x7c>)
 800a984:	f00d fa12 	bl	8017dac <iprintf>
    pcb = altcp_listen(pcb);
 800a988:	21ff      	movs	r1, #255	; 0xff
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f002 fb2c 	bl	800cfe8 <tcp_listen_with_backlog>
 800a990:	6078      	str	r0, [r7, #4]
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d106      	bne.n	800a9a6 <httpd_init_pcb+0x5e>
 800a998:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <httpd_init_pcb+0x74>)
 800a99a:	f640 2259 	movw	r2, #2649	; 0xa59
 800a99e:	490a      	ldr	r1, [pc, #40]	; (800a9c8 <httpd_init_pcb+0x80>)
 800a9a0:	4808      	ldr	r0, [pc, #32]	; (800a9c4 <httpd_init_pcb+0x7c>)
 800a9a2:	f00d fa03 	bl	8017dac <iprintf>
    altcp_accept(pcb, http_accept);
 800a9a6:	4909      	ldr	r1, [pc, #36]	; (800a9cc <httpd_init_pcb+0x84>)
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f003 fb8f 	bl	800e0cc <tcp_accept>
  }
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	0801e658 	.word	0x0801e658
 800a9bc:	08018eec 	.word	0x08018eec
 800a9c0:	080190c4 	.word	0x080190c4
 800a9c4:	08018f34 	.word	0x08018f34
 800a9c8:	080190e0 	.word	0x080190e0
 800a9cc:	0800a8c1 	.word	0x0800a8c1

0800a9d0 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 800a9d6:	202e      	movs	r0, #46	; 0x2e
 800a9d8:	f003 faf2 	bl	800dfc0 <tcp_new_ip_type>
 800a9dc:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d106      	bne.n	800a9f2 <httpd_init+0x22>
 800a9e4:	4b07      	ldr	r3, [pc, #28]	; (800aa04 <httpd_init+0x34>)
 800a9e6:	f640 2272 	movw	r2, #2674	; 0xa72
 800a9ea:	4907      	ldr	r1, [pc, #28]	; (800aa08 <httpd_init+0x38>)
 800a9ec:	4807      	ldr	r0, [pc, #28]	; (800aa0c <httpd_init+0x3c>)
 800a9ee:	f00d f9dd 	bl	8017dac <iprintf>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 800a9f2:	2150      	movs	r1, #80	; 0x50
 800a9f4:	6878      	ldr	r0, [r7, #4]
 800a9f6:	f7ff ffa7 	bl	800a948 <httpd_init_pcb>
}
 800a9fa:	bf00      	nop
 800a9fc:	3708      	adds	r7, #8
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}
 800aa02:	bf00      	nop
 800aa04:	08018eec 	.word	0x08018eec
 800aa08:	08019100 	.word	0x08019100
 800aa0c:	08018f34 	.word	0x08018f34

0800aa10 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	60f8      	str	r0, [r7, #12]
 800aa18:	60b9      	str	r1, [r7, #8]
 800aa1a:	607a      	str	r2, [r7, #4]
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d106      	bne.n	800aa30 <http_set_ssi_handler+0x20>
 800aa22:	4b07      	ldr	r3, [pc, #28]	; (800aa40 <http_set_ssi_handler+0x30>)
 800aa24:	f640 2297 	movw	r2, #2711	; 0xa97
 800aa28:	4906      	ldr	r1, [pc, #24]	; (800aa44 <http_set_ssi_handler+0x34>)
 800aa2a:	4807      	ldr	r0, [pc, #28]	; (800aa48 <http_set_ssi_handler+0x38>)
 800aa2c:	f00d f9be 	bl	8017dac <iprintf>
  httpd_ssi_handler = ssi_handler;
 800aa30:	4a06      	ldr	r2, [pc, #24]	; (800aa4c <http_set_ssi_handler+0x3c>)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6013      	str	r3, [r2, #0]
  LWIP_ASSERT("invalid number of tags", num_tags > 0);

  httpd_tags = tags;
  httpd_num_tags = num_tags;
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}
 800aa3e:	bf00      	nop
 800aa40:	08018eec 	.word	0x08018eec
 800aa44:	0801911c 	.word	0x0801911c
 800aa48:	08018f34 	.word	0x08018f34
 800aa4c:	200096b4 	.word	0x200096b4

0800aa50 <http_set_cgi_handlers>:
 * @param cgis an array of CGI filenames/handler functions
 * @param num_handlers number of elements in the 'cgis' array
 */
void
http_set_cgi_handlers(const tCGI *cgis, int num_handlers)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b082      	sub	sp, #8
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
 800aa58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("no cgis given", cgis != NULL);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d106      	bne.n	800aa6e <http_set_cgi_handlers+0x1e>
 800aa60:	4b0d      	ldr	r3, [pc, #52]	; (800aa98 <http_set_cgi_handlers+0x48>)
 800aa62:	f640 22b2 	movw	r2, #2738	; 0xab2
 800aa66:	490d      	ldr	r1, [pc, #52]	; (800aa9c <http_set_cgi_handlers+0x4c>)
 800aa68:	480d      	ldr	r0, [pc, #52]	; (800aaa0 <http_set_cgi_handlers+0x50>)
 800aa6a:	f00d f99f 	bl	8017dac <iprintf>
  LWIP_ASSERT("invalid number of handlers", num_handlers > 0);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	dc06      	bgt.n	800aa82 <http_set_cgi_handlers+0x32>
 800aa74:	4b08      	ldr	r3, [pc, #32]	; (800aa98 <http_set_cgi_handlers+0x48>)
 800aa76:	f640 22b3 	movw	r2, #2739	; 0xab3
 800aa7a:	490a      	ldr	r1, [pc, #40]	; (800aaa4 <http_set_cgi_handlers+0x54>)
 800aa7c:	4808      	ldr	r0, [pc, #32]	; (800aaa0 <http_set_cgi_handlers+0x50>)
 800aa7e:	f00d f995 	bl	8017dac <iprintf>

  httpd_cgis = cgis;
 800aa82:	4a09      	ldr	r2, [pc, #36]	; (800aaa8 <http_set_cgi_handlers+0x58>)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6013      	str	r3, [r2, #0]
  httpd_num_cgis = num_handlers;
 800aa88:	4a08      	ldr	r2, [pc, #32]	; (800aaac <http_set_cgi_handlers+0x5c>)
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	6013      	str	r3, [r2, #0]
}
 800aa8e:	bf00      	nop
 800aa90:	3708      	adds	r7, #8
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	08018eec 	.word	0x08018eec
 800aa9c:	08019134 	.word	0x08019134
 800aaa0:	08018f34 	.word	0x08018f34
 800aaa4:	08019144 	.word	0x08019144
 800aaa8:	200096b8 	.word	0x200096b8
 800aaac:	200096bc 	.word	0x200096bc

0800aab0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	4603      	mov	r3, r0
 800aab8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800aaba:	88fb      	ldrh	r3, [r7, #6]
 800aabc:	021b      	lsls	r3, r3, #8
 800aabe:	b21a      	sxth	r2, r3
 800aac0:	88fb      	ldrh	r3, [r7, #6]
 800aac2:	0a1b      	lsrs	r3, r3, #8
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	b21b      	sxth	r3, r3
 800aac8:	4313      	orrs	r3, r2
 800aaca:	b21b      	sxth	r3, r3
 800aacc:	b29b      	uxth	r3, r3
}
 800aace:	4618      	mov	r0, r3
 800aad0:	370c      	adds	r7, #12
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800aada:	b480      	push	{r7}
 800aadc:	b083      	sub	sp, #12
 800aade:	af00      	add	r7, sp, #0
 800aae0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	061a      	lsls	r2, r3, #24
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	021b      	lsls	r3, r3, #8
 800aaea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	0a1b      	lsrs	r3, r3, #8
 800aaf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aaf8:	431a      	orrs	r2, r3
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	0e1b      	lsrs	r3, r3, #24
 800aafe:	4313      	orrs	r3, r2
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t tokenlen = strlen(token);
 800ab18:	68b8      	ldr	r0, [r7, #8]
 800ab1a:	f7f5 fb83 	bl	8000224 <strlen>
 800ab1e:	6138      	str	r0, [r7, #16]
  if (tokenlen == 0) {
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <lwip_strnstr+0x1e>
    return LWIP_CONST_CAST(char *, buffer);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	e022      	b.n	800ab70 <lwip_strnstr+0x64>
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	e012      	b.n	800ab56 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	781a      	ldrb	r2, [r3, #0]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	781b      	ldrb	r3, [r3, #0]
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d109      	bne.n	800ab50 <lwip_strnstr+0x44>
 800ab3c:	693a      	ldr	r2, [r7, #16]
 800ab3e:	68b9      	ldr	r1, [r7, #8]
 800ab40:	6978      	ldr	r0, [r7, #20]
 800ab42:	f00d f9ad 	bl	8017ea0 <strncmp>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d101      	bne.n	800ab50 <lwip_strnstr+0x44>
      return LWIP_CONST_CAST(char *, p);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	e00f      	b.n	800ab70 <lwip_strnstr+0x64>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	3301      	adds	r3, #1
 800ab54:	617b      	str	r3, [r7, #20]
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d007      	beq.n	800ab6e <lwip_strnstr+0x62>
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	441a      	add	r2, r3
 800ab64:	68f9      	ldr	r1, [r7, #12]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	440b      	add	r3, r1
 800ab6a:	429a      	cmp	r2, r3
 800ab6c:	d9e0      	bls.n	800ab30 <lwip_strnstr+0x24>
    }
  }
  return NULL;
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3718      	adds	r7, #24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ab82:	f00c ff0b 	bl	801799c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ab86:	f000 f8d5 	bl	800ad34 <mem_init>
  memp_init();
 800ab8a:	f000 fc31 	bl	800b3f0 <memp_init>
  pbuf_init();
  netif_init();
 800ab8e:	f000 fd3d 	bl	800b60c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ab92:	f008 f83f 	bl	8012c14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ab96:	f001 fe69 	bl	800c86c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ab9a:	f007 ff81 	bl	8012aa0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ab9e:	bf00      	nop
 800aba0:	3708      	adds	r7, #8
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}
	...

0800aba8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b083      	sub	sp, #12
 800abac:	af00      	add	r7, sp, #0
 800abae:	4603      	mov	r3, r0
 800abb0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <ptr_to_mem+0x20>)
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	88fb      	ldrh	r3, [r7, #6]
 800abb8:	4413      	add	r3, r2
}
 800abba:	4618      	mov	r0, r3
 800abbc:	370c      	adds	r7, #12
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	20009d30 	.word	0x20009d30

0800abcc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800abd4:	4b05      	ldr	r3, [pc, #20]	; (800abec <mem_to_ptr+0x20>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	1ad3      	subs	r3, r2, r3
 800abdc:	b29b      	uxth	r3, r3
}
 800abde:	4618      	mov	r0, r3
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	20009d30 	.word	0x20009d30

0800abf0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800abf8:	4b45      	ldr	r3, [pc, #276]	; (800ad10 <plug_holes+0x120>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d206      	bcs.n	800ac10 <plug_holes+0x20>
 800ac02:	4b44      	ldr	r3, [pc, #272]	; (800ad14 <plug_holes+0x124>)
 800ac04:	f240 12df 	movw	r2, #479	; 0x1df
 800ac08:	4943      	ldr	r1, [pc, #268]	; (800ad18 <plug_holes+0x128>)
 800ac0a:	4844      	ldr	r0, [pc, #272]	; (800ad1c <plug_holes+0x12c>)
 800ac0c:	f00d f8ce 	bl	8017dac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ac10:	4b43      	ldr	r3, [pc, #268]	; (800ad20 <plug_holes+0x130>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d306      	bcc.n	800ac28 <plug_holes+0x38>
 800ac1a:	4b3e      	ldr	r3, [pc, #248]	; (800ad14 <plug_holes+0x124>)
 800ac1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ac20:	4940      	ldr	r1, [pc, #256]	; (800ad24 <plug_holes+0x134>)
 800ac22:	483e      	ldr	r0, [pc, #248]	; (800ad1c <plug_holes+0x12c>)
 800ac24:	f00d f8c2 	bl	8017dac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	791b      	ldrb	r3, [r3, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d006      	beq.n	800ac3e <plug_holes+0x4e>
 800ac30:	4b38      	ldr	r3, [pc, #224]	; (800ad14 <plug_holes+0x124>)
 800ac32:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ac36:	493c      	ldr	r1, [pc, #240]	; (800ad28 <plug_holes+0x138>)
 800ac38:	4838      	ldr	r0, [pc, #224]	; (800ad1c <plug_holes+0x12c>)
 800ac3a:	f00d f8b7 	bl	8017dac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	881b      	ldrh	r3, [r3, #0]
 800ac42:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac46:	d906      	bls.n	800ac56 <plug_holes+0x66>
 800ac48:	4b32      	ldr	r3, [pc, #200]	; (800ad14 <plug_holes+0x124>)
 800ac4a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ac4e:	4937      	ldr	r1, [pc, #220]	; (800ad2c <plug_holes+0x13c>)
 800ac50:	4832      	ldr	r0, [pc, #200]	; (800ad1c <plug_holes+0x12c>)
 800ac52:	f00d f8ab 	bl	8017dac <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f7ff ffa4 	bl	800aba8 <ptr_to_mem>
 800ac60:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ac62:	687a      	ldr	r2, [r7, #4]
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d024      	beq.n	800acb4 <plug_holes+0xc4>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	791b      	ldrb	r3, [r3, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d120      	bne.n	800acb4 <plug_holes+0xc4>
 800ac72:	4b2b      	ldr	r3, [pc, #172]	; (800ad20 <plug_holes+0x130>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d01b      	beq.n	800acb4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ac7c:	4b2c      	ldr	r3, [pc, #176]	; (800ad30 <plug_holes+0x140>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d102      	bne.n	800ac8c <plug_holes+0x9c>
      lfree = mem;
 800ac86:	4a2a      	ldr	r2, [pc, #168]	; (800ad30 <plug_holes+0x140>)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	881a      	ldrh	r2, [r3, #0]
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	881b      	ldrh	r3, [r3, #0]
 800ac98:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ac9c:	d00a      	beq.n	800acb4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	881b      	ldrh	r3, [r3, #0]
 800aca2:	4618      	mov	r0, r3
 800aca4:	f7ff ff80 	bl	800aba8 <ptr_to_mem>
 800aca8:	4604      	mov	r4, r0
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff ff8e 	bl	800abcc <mem_to_ptr>
 800acb0:	4603      	mov	r3, r0
 800acb2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	885b      	ldrh	r3, [r3, #2]
 800acb8:	4618      	mov	r0, r3
 800acba:	f7ff ff75 	bl	800aba8 <ptr_to_mem>
 800acbe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800acc0:	68ba      	ldr	r2, [r7, #8]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d01f      	beq.n	800ad08 <plug_holes+0x118>
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	791b      	ldrb	r3, [r3, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d11b      	bne.n	800ad08 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800acd0:	4b17      	ldr	r3, [pc, #92]	; (800ad30 <plug_holes+0x140>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d102      	bne.n	800ace0 <plug_holes+0xf0>
      lfree = pmem;
 800acda:	4a15      	ldr	r2, [pc, #84]	; (800ad30 <plug_holes+0x140>)
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	881a      	ldrh	r2, [r3, #0]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	881b      	ldrh	r3, [r3, #0]
 800acec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acf0:	d00a      	beq.n	800ad08 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	4618      	mov	r0, r3
 800acf8:	f7ff ff56 	bl	800aba8 <ptr_to_mem>
 800acfc:	4604      	mov	r4, r0
 800acfe:	68b8      	ldr	r0, [r7, #8]
 800ad00:	f7ff ff64 	bl	800abcc <mem_to_ptr>
 800ad04:	4603      	mov	r3, r0
 800ad06:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ad08:	bf00      	nop
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd90      	pop	{r4, r7, pc}
 800ad10:	20009d30 	.word	0x20009d30
 800ad14:	08019160 	.word	0x08019160
 800ad18:	08019190 	.word	0x08019190
 800ad1c:	080191a8 	.word	0x080191a8
 800ad20:	20009d34 	.word	0x20009d34
 800ad24:	080191d0 	.word	0x080191d0
 800ad28:	080191ec 	.word	0x080191ec
 800ad2c:	08019208 	.word	0x08019208
 800ad30:	20009d3c 	.word	0x20009d3c

0800ad34 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ad3a:	4b1f      	ldr	r3, [pc, #124]	; (800adb8 <mem_init+0x84>)
 800ad3c:	3303      	adds	r3, #3
 800ad3e:	f023 0303 	bic.w	r3, r3, #3
 800ad42:	461a      	mov	r2, r3
 800ad44:	4b1d      	ldr	r3, [pc, #116]	; (800adbc <mem_init+0x88>)
 800ad46:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ad48:	4b1c      	ldr	r3, [pc, #112]	; (800adbc <mem_init+0x88>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad54:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2200      	movs	r2, #0
 800ad60:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ad62:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ad66:	f7ff ff1f 	bl	800aba8 <ptr_to_mem>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	4a14      	ldr	r2, [pc, #80]	; (800adc0 <mem_init+0x8c>)
 800ad6e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ad70:	4b13      	ldr	r3, [pc, #76]	; (800adc0 <mem_init+0x8c>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	2201      	movs	r2, #1
 800ad76:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ad78:	4b11      	ldr	r3, [pc, #68]	; (800adc0 <mem_init+0x8c>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad80:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ad82:	4b0f      	ldr	r3, [pc, #60]	; (800adc0 <mem_init+0x8c>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ad8a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ad8c:	4b0b      	ldr	r3, [pc, #44]	; (800adbc <mem_init+0x88>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a0c      	ldr	r2, [pc, #48]	; (800adc4 <mem_init+0x90>)
 800ad92:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ad94:	480c      	ldr	r0, [pc, #48]	; (800adc8 <mem_init+0x94>)
 800ad96:	f00c fe0f 	bl	80179b8 <sys_mutex_new>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d006      	beq.n	800adae <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ada0:	4b0a      	ldr	r3, [pc, #40]	; (800adcc <mem_init+0x98>)
 800ada2:	f240 221f 	movw	r2, #543	; 0x21f
 800ada6:	490a      	ldr	r1, [pc, #40]	; (800add0 <mem_init+0x9c>)
 800ada8:	480a      	ldr	r0, [pc, #40]	; (800add4 <mem_init+0xa0>)
 800adaa:	f00c ffff 	bl	8017dac <iprintf>
  }
}
 800adae:	bf00      	nop
 800adb0:	3708      	adds	r7, #8
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	200096dc 	.word	0x200096dc
 800adbc:	20009d30 	.word	0x20009d30
 800adc0:	20009d34 	.word	0x20009d34
 800adc4:	20009d3c 	.word	0x20009d3c
 800adc8:	20009d38 	.word	0x20009d38
 800adcc:	08019160 	.word	0x08019160
 800add0:	08019234 	.word	0x08019234
 800add4:	080191a8 	.word	0x080191a8

0800add8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f7ff fef3 	bl	800abcc <mem_to_ptr>
 800ade6:	4603      	mov	r3, r0
 800ade8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	4618      	mov	r0, r3
 800adf0:	f7ff feda 	bl	800aba8 <ptr_to_mem>
 800adf4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	885b      	ldrh	r3, [r3, #2]
 800adfa:	4618      	mov	r0, r3
 800adfc:	f7ff fed4 	bl	800aba8 <ptr_to_mem>
 800ae00:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	881b      	ldrh	r3, [r3, #0]
 800ae06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae0a:	d818      	bhi.n	800ae3e <mem_link_valid+0x66>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	885b      	ldrh	r3, [r3, #2]
 800ae10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae14:	d813      	bhi.n	800ae3e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800ae1a:	8afa      	ldrh	r2, [r7, #22]
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d004      	beq.n	800ae2a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	881b      	ldrh	r3, [r3, #0]
 800ae24:	8afa      	ldrh	r2, [r7, #22]
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d109      	bne.n	800ae3e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae2a:	4b08      	ldr	r3, [pc, #32]	; (800ae4c <mem_link_valid+0x74>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d006      	beq.n	800ae42 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	885b      	ldrh	r3, [r3, #2]
 800ae38:	8afa      	ldrh	r2, [r7, #22]
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	d001      	beq.n	800ae42 <mem_link_valid+0x6a>
    return 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	e000      	b.n	800ae44 <mem_link_valid+0x6c>
  }
  return 1;
 800ae42:	2301      	movs	r3, #1
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3718      	adds	r7, #24
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	20009d34 	.word	0x20009d34

0800ae50 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d070      	beq.n	800af40 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	f003 0303 	and.w	r3, r3, #3
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00d      	beq.n	800ae84 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ae68:	4b37      	ldr	r3, [pc, #220]	; (800af48 <mem_free+0xf8>)
 800ae6a:	f240 2273 	movw	r2, #627	; 0x273
 800ae6e:	4937      	ldr	r1, [pc, #220]	; (800af4c <mem_free+0xfc>)
 800ae70:	4837      	ldr	r0, [pc, #220]	; (800af50 <mem_free+0x100>)
 800ae72:	f00c ff9b 	bl	8017dac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ae76:	f00c fdfd 	bl	8017a74 <sys_arch_protect>
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f00c fe07 	bl	8017a90 <sys_arch_unprotect>
    return;
 800ae82:	e05e      	b.n	800af42 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3b08      	subs	r3, #8
 800ae88:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ae8a:	4b32      	ldr	r3, [pc, #200]	; (800af54 <mem_free+0x104>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	69fa      	ldr	r2, [r7, #28]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d306      	bcc.n	800aea2 <mem_free+0x52>
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f103 020c 	add.w	r2, r3, #12
 800ae9a:	4b2f      	ldr	r3, [pc, #188]	; (800af58 <mem_free+0x108>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d90d      	bls.n	800aebe <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aea2:	4b29      	ldr	r3, [pc, #164]	; (800af48 <mem_free+0xf8>)
 800aea4:	f240 227f 	movw	r2, #639	; 0x27f
 800aea8:	492c      	ldr	r1, [pc, #176]	; (800af5c <mem_free+0x10c>)
 800aeaa:	4829      	ldr	r0, [pc, #164]	; (800af50 <mem_free+0x100>)
 800aeac:	f00c ff7e 	bl	8017dac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aeb0:	f00c fde0 	bl	8017a74 <sys_arch_protect>
 800aeb4:	6138      	str	r0, [r7, #16]
 800aeb6:	6938      	ldr	r0, [r7, #16]
 800aeb8:	f00c fdea 	bl	8017a90 <sys_arch_unprotect>
    return;
 800aebc:	e041      	b.n	800af42 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aebe:	4828      	ldr	r0, [pc, #160]	; (800af60 <mem_free+0x110>)
 800aec0:	f00c fd96 	bl	80179f0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	791b      	ldrb	r3, [r3, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d110      	bne.n	800aeee <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800aecc:	4b1e      	ldr	r3, [pc, #120]	; (800af48 <mem_free+0xf8>)
 800aece:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800aed2:	4924      	ldr	r1, [pc, #144]	; (800af64 <mem_free+0x114>)
 800aed4:	481e      	ldr	r0, [pc, #120]	; (800af50 <mem_free+0x100>)
 800aed6:	f00c ff69 	bl	8017dac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800aeda:	4821      	ldr	r0, [pc, #132]	; (800af60 <mem_free+0x110>)
 800aedc:	f00c fd97 	bl	8017a0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aee0:	f00c fdc8 	bl	8017a74 <sys_arch_protect>
 800aee4:	6178      	str	r0, [r7, #20]
 800aee6:	6978      	ldr	r0, [r7, #20]
 800aee8:	f00c fdd2 	bl	8017a90 <sys_arch_unprotect>
    return;
 800aeec:	e029      	b.n	800af42 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800aeee:	69f8      	ldr	r0, [r7, #28]
 800aef0:	f7ff ff72 	bl	800add8 <mem_link_valid>
 800aef4:	4603      	mov	r3, r0
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d110      	bne.n	800af1c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800aefa:	4b13      	ldr	r3, [pc, #76]	; (800af48 <mem_free+0xf8>)
 800aefc:	f240 2295 	movw	r2, #661	; 0x295
 800af00:	4919      	ldr	r1, [pc, #100]	; (800af68 <mem_free+0x118>)
 800af02:	4813      	ldr	r0, [pc, #76]	; (800af50 <mem_free+0x100>)
 800af04:	f00c ff52 	bl	8017dac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800af08:	4815      	ldr	r0, [pc, #84]	; (800af60 <mem_free+0x110>)
 800af0a:	f00c fd80 	bl	8017a0e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800af0e:	f00c fdb1 	bl	8017a74 <sys_arch_protect>
 800af12:	61b8      	str	r0, [r7, #24]
 800af14:	69b8      	ldr	r0, [r7, #24]
 800af16:	f00c fdbb 	bl	8017a90 <sys_arch_unprotect>
    return;
 800af1a:	e012      	b.n	800af42 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	2200      	movs	r2, #0
 800af20:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800af22:	4b12      	ldr	r3, [pc, #72]	; (800af6c <mem_free+0x11c>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d202      	bcs.n	800af32 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800af2c:	4a0f      	ldr	r2, [pc, #60]	; (800af6c <mem_free+0x11c>)
 800af2e:	69fb      	ldr	r3, [r7, #28]
 800af30:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800af32:	69f8      	ldr	r0, [r7, #28]
 800af34:	f7ff fe5c 	bl	800abf0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800af38:	4809      	ldr	r0, [pc, #36]	; (800af60 <mem_free+0x110>)
 800af3a:	f00c fd68 	bl	8017a0e <sys_mutex_unlock>
 800af3e:	e000      	b.n	800af42 <mem_free+0xf2>
    return;
 800af40:	bf00      	nop
}
 800af42:	3720      	adds	r7, #32
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}
 800af48:	08019160 	.word	0x08019160
 800af4c:	08019250 	.word	0x08019250
 800af50:	080191a8 	.word	0x080191a8
 800af54:	20009d30 	.word	0x20009d30
 800af58:	20009d34 	.word	0x20009d34
 800af5c:	08019274 	.word	0x08019274
 800af60:	20009d38 	.word	0x20009d38
 800af64:	08019290 	.word	0x08019290
 800af68:	080192b8 	.word	0x080192b8
 800af6c:	20009d3c 	.word	0x20009d3c

0800af70 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b088      	sub	sp, #32
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800af7c:	887b      	ldrh	r3, [r7, #2]
 800af7e:	3303      	adds	r3, #3
 800af80:	b29b      	uxth	r3, r3
 800af82:	f023 0303 	bic.w	r3, r3, #3
 800af86:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800af88:	8bfb      	ldrh	r3, [r7, #30]
 800af8a:	2b0b      	cmp	r3, #11
 800af8c:	d801      	bhi.n	800af92 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800af8e:	230c      	movs	r3, #12
 800af90:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800af92:	8bfb      	ldrh	r3, [r7, #30]
 800af94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af98:	d803      	bhi.n	800afa2 <mem_trim+0x32>
 800af9a:	8bfa      	ldrh	r2, [r7, #30]
 800af9c:	887b      	ldrh	r3, [r7, #2]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d201      	bcs.n	800afa6 <mem_trim+0x36>
    return NULL;
 800afa2:	2300      	movs	r3, #0
 800afa4:	e0d8      	b.n	800b158 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800afa6:	4b6e      	ldr	r3, [pc, #440]	; (800b160 <mem_trim+0x1f0>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	687a      	ldr	r2, [r7, #4]
 800afac:	429a      	cmp	r2, r3
 800afae:	d304      	bcc.n	800afba <mem_trim+0x4a>
 800afb0:	4b6c      	ldr	r3, [pc, #432]	; (800b164 <mem_trim+0x1f4>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d306      	bcc.n	800afc8 <mem_trim+0x58>
 800afba:	4b6b      	ldr	r3, [pc, #428]	; (800b168 <mem_trim+0x1f8>)
 800afbc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800afc0:	496a      	ldr	r1, [pc, #424]	; (800b16c <mem_trim+0x1fc>)
 800afc2:	486b      	ldr	r0, [pc, #428]	; (800b170 <mem_trim+0x200>)
 800afc4:	f00c fef2 	bl	8017dac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800afc8:	4b65      	ldr	r3, [pc, #404]	; (800b160 <mem_trim+0x1f0>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d304      	bcc.n	800afdc <mem_trim+0x6c>
 800afd2:	4b64      	ldr	r3, [pc, #400]	; (800b164 <mem_trim+0x1f4>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d307      	bcc.n	800afec <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800afdc:	f00c fd4a 	bl	8017a74 <sys_arch_protect>
 800afe0:	60b8      	str	r0, [r7, #8]
 800afe2:	68b8      	ldr	r0, [r7, #8]
 800afe4:	f00c fd54 	bl	8017a90 <sys_arch_unprotect>
    return rmem;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	e0b5      	b.n	800b158 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	3b08      	subs	r3, #8
 800aff0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aff2:	69b8      	ldr	r0, [r7, #24]
 800aff4:	f7ff fdea 	bl	800abcc <mem_to_ptr>
 800aff8:	4603      	mov	r3, r0
 800affa:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800affc:	69bb      	ldr	r3, [r7, #24]
 800affe:	881a      	ldrh	r2, [r3, #0]
 800b000:	8afb      	ldrh	r3, [r7, #22]
 800b002:	1ad3      	subs	r3, r2, r3
 800b004:	b29b      	uxth	r3, r3
 800b006:	3b08      	subs	r3, #8
 800b008:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b00a:	8bfa      	ldrh	r2, [r7, #30]
 800b00c:	8abb      	ldrh	r3, [r7, #20]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d906      	bls.n	800b020 <mem_trim+0xb0>
 800b012:	4b55      	ldr	r3, [pc, #340]	; (800b168 <mem_trim+0x1f8>)
 800b014:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800b018:	4956      	ldr	r1, [pc, #344]	; (800b174 <mem_trim+0x204>)
 800b01a:	4855      	ldr	r0, [pc, #340]	; (800b170 <mem_trim+0x200>)
 800b01c:	f00c fec6 	bl	8017dac <iprintf>
  if (newsize > size) {
 800b020:	8bfa      	ldrh	r2, [r7, #30]
 800b022:	8abb      	ldrh	r3, [r7, #20]
 800b024:	429a      	cmp	r2, r3
 800b026:	d901      	bls.n	800b02c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800b028:	2300      	movs	r3, #0
 800b02a:	e095      	b.n	800b158 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800b02c:	8bfa      	ldrh	r2, [r7, #30]
 800b02e:	8abb      	ldrh	r3, [r7, #20]
 800b030:	429a      	cmp	r2, r3
 800b032:	d101      	bne.n	800b038 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	e08f      	b.n	800b158 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b038:	484f      	ldr	r0, [pc, #316]	; (800b178 <mem_trim+0x208>)
 800b03a:	f00c fcd9 	bl	80179f0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	881b      	ldrh	r3, [r3, #0]
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff fdb0 	bl	800aba8 <ptr_to_mem>
 800b048:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	791b      	ldrb	r3, [r3, #4]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d13f      	bne.n	800b0d2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	881b      	ldrh	r3, [r3, #0]
 800b056:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b05a:	d106      	bne.n	800b06a <mem_trim+0xfa>
 800b05c:	4b42      	ldr	r3, [pc, #264]	; (800b168 <mem_trim+0x1f8>)
 800b05e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800b062:	4946      	ldr	r1, [pc, #280]	; (800b17c <mem_trim+0x20c>)
 800b064:	4842      	ldr	r0, [pc, #264]	; (800b170 <mem_trim+0x200>)
 800b066:	f00c fea1 	bl	8017dac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800b06a:	693b      	ldr	r3, [r7, #16]
 800b06c:	881b      	ldrh	r3, [r3, #0]
 800b06e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b070:	8afa      	ldrh	r2, [r7, #22]
 800b072:	8bfb      	ldrh	r3, [r7, #30]
 800b074:	4413      	add	r3, r2
 800b076:	b29b      	uxth	r3, r3
 800b078:	3308      	adds	r3, #8
 800b07a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b07c:	4b40      	ldr	r3, [pc, #256]	; (800b180 <mem_trim+0x210>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	693a      	ldr	r2, [r7, #16]
 800b082:	429a      	cmp	r2, r3
 800b084:	d106      	bne.n	800b094 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800b086:	89fb      	ldrh	r3, [r7, #14]
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff fd8d 	bl	800aba8 <ptr_to_mem>
 800b08e:	4603      	mov	r3, r0
 800b090:	4a3b      	ldr	r2, [pc, #236]	; (800b180 <mem_trim+0x210>)
 800b092:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b094:	89fb      	ldrh	r3, [r7, #14]
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff fd86 	bl	800aba8 <ptr_to_mem>
 800b09c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	89ba      	ldrh	r2, [r7, #12]
 800b0a8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	8afa      	ldrh	r2, [r7, #22]
 800b0ae:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	89fa      	ldrh	r2, [r7, #14]
 800b0b4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	881b      	ldrh	r3, [r3, #0]
 800b0ba:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0be:	d047      	beq.n	800b150 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	881b      	ldrh	r3, [r3, #0]
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f7ff fd6f 	bl	800aba8 <ptr_to_mem>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	89fb      	ldrh	r3, [r7, #14]
 800b0ce:	8053      	strh	r3, [r2, #2]
 800b0d0:	e03e      	b.n	800b150 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b0d2:	8bfb      	ldrh	r3, [r7, #30]
 800b0d4:	f103 0214 	add.w	r2, r3, #20
 800b0d8:	8abb      	ldrh	r3, [r7, #20]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d838      	bhi.n	800b150 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b0de:	8afa      	ldrh	r2, [r7, #22]
 800b0e0:	8bfb      	ldrh	r3, [r7, #30]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	b29b      	uxth	r3, r3
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b0ea:	69bb      	ldr	r3, [r7, #24]
 800b0ec:	881b      	ldrh	r3, [r3, #0]
 800b0ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0f2:	d106      	bne.n	800b102 <mem_trim+0x192>
 800b0f4:	4b1c      	ldr	r3, [pc, #112]	; (800b168 <mem_trim+0x1f8>)
 800b0f6:	f240 3216 	movw	r2, #790	; 0x316
 800b0fa:	4920      	ldr	r1, [pc, #128]	; (800b17c <mem_trim+0x20c>)
 800b0fc:	481c      	ldr	r0, [pc, #112]	; (800b170 <mem_trim+0x200>)
 800b0fe:	f00c fe55 	bl	8017dac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800b102:	89fb      	ldrh	r3, [r7, #14]
 800b104:	4618      	mov	r0, r3
 800b106:	f7ff fd4f 	bl	800aba8 <ptr_to_mem>
 800b10a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b10c:	4b1c      	ldr	r3, [pc, #112]	; (800b180 <mem_trim+0x210>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	693a      	ldr	r2, [r7, #16]
 800b112:	429a      	cmp	r2, r3
 800b114:	d202      	bcs.n	800b11c <mem_trim+0x1ac>
      lfree = mem2;
 800b116:	4a1a      	ldr	r2, [pc, #104]	; (800b180 <mem_trim+0x210>)
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b11c:	693b      	ldr	r3, [r7, #16]
 800b11e:	2200      	movs	r2, #0
 800b120:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	881a      	ldrh	r2, [r3, #0]
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b12a:	693b      	ldr	r3, [r7, #16]
 800b12c:	8afa      	ldrh	r2, [r7, #22]
 800b12e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b130:	69bb      	ldr	r3, [r7, #24]
 800b132:	89fa      	ldrh	r2, [r7, #14]
 800b134:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	881b      	ldrh	r3, [r3, #0]
 800b13a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b13e:	d007      	beq.n	800b150 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	4618      	mov	r0, r3
 800b146:	f7ff fd2f 	bl	800aba8 <ptr_to_mem>
 800b14a:	4602      	mov	r2, r0
 800b14c:	89fb      	ldrh	r3, [r7, #14]
 800b14e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b150:	4809      	ldr	r0, [pc, #36]	; (800b178 <mem_trim+0x208>)
 800b152:	f00c fc5c 	bl	8017a0e <sys_mutex_unlock>
  return rmem;
 800b156:	687b      	ldr	r3, [r7, #4]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3720      	adds	r7, #32
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20009d30 	.word	0x20009d30
 800b164:	20009d34 	.word	0x20009d34
 800b168:	08019160 	.word	0x08019160
 800b16c:	080192ec 	.word	0x080192ec
 800b170:	080191a8 	.word	0x080191a8
 800b174:	08019304 	.word	0x08019304
 800b178:	20009d38 	.word	0x20009d38
 800b17c:	08019324 	.word	0x08019324
 800b180:	20009d3c 	.word	0x20009d3c

0800b184 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b088      	sub	sp, #32
 800b188:	af00      	add	r7, sp, #0
 800b18a:	4603      	mov	r3, r0
 800b18c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b18e:	88fb      	ldrh	r3, [r7, #6]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d101      	bne.n	800b198 <mem_malloc+0x14>
    return NULL;
 800b194:	2300      	movs	r3, #0
 800b196:	e0e2      	b.n	800b35e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b198:	88fb      	ldrh	r3, [r7, #6]
 800b19a:	3303      	adds	r3, #3
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	f023 0303 	bic.w	r3, r3, #3
 800b1a2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b1a4:	8bbb      	ldrh	r3, [r7, #28]
 800b1a6:	2b0b      	cmp	r3, #11
 800b1a8:	d801      	bhi.n	800b1ae <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b1ae:	8bbb      	ldrh	r3, [r7, #28]
 800b1b0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b1b4:	d803      	bhi.n	800b1be <mem_malloc+0x3a>
 800b1b6:	8bba      	ldrh	r2, [r7, #28]
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d201      	bcs.n	800b1c2 <mem_malloc+0x3e>
    return NULL;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	e0cd      	b.n	800b35e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b1c2:	4869      	ldr	r0, [pc, #420]	; (800b368 <mem_malloc+0x1e4>)
 800b1c4:	f00c fc14 	bl	80179f0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b1c8:	4b68      	ldr	r3, [pc, #416]	; (800b36c <mem_malloc+0x1e8>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7ff fcfd 	bl	800abcc <mem_to_ptr>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	83fb      	strh	r3, [r7, #30]
 800b1d6:	e0b7      	b.n	800b348 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b1d8:	8bfb      	ldrh	r3, [r7, #30]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fce4 	bl	800aba8 <ptr_to_mem>
 800b1e0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	791b      	ldrb	r3, [r3, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	f040 80a7 	bne.w	800b33a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	881b      	ldrh	r3, [r3, #0]
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	8bfb      	ldrh	r3, [r7, #30]
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	f1a3 0208 	sub.w	r2, r3, #8
 800b1fa:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	f0c0 809c 	bcc.w	800b33a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	881b      	ldrh	r3, [r3, #0]
 800b206:	461a      	mov	r2, r3
 800b208:	8bfb      	ldrh	r3, [r7, #30]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f1a3 0208 	sub.w	r2, r3, #8
 800b210:	8bbb      	ldrh	r3, [r7, #28]
 800b212:	3314      	adds	r3, #20
 800b214:	429a      	cmp	r2, r3
 800b216:	d333      	bcc.n	800b280 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b218:	8bfa      	ldrh	r2, [r7, #30]
 800b21a:	8bbb      	ldrh	r3, [r7, #28]
 800b21c:	4413      	add	r3, r2
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3308      	adds	r3, #8
 800b222:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b224:	8a7b      	ldrh	r3, [r7, #18]
 800b226:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b22a:	d106      	bne.n	800b23a <mem_malloc+0xb6>
 800b22c:	4b50      	ldr	r3, [pc, #320]	; (800b370 <mem_malloc+0x1ec>)
 800b22e:	f240 3287 	movw	r2, #903	; 0x387
 800b232:	4950      	ldr	r1, [pc, #320]	; (800b374 <mem_malloc+0x1f0>)
 800b234:	4850      	ldr	r0, [pc, #320]	; (800b378 <mem_malloc+0x1f4>)
 800b236:	f00c fdb9 	bl	8017dac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b23a:	8a7b      	ldrh	r3, [r7, #18]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f7ff fcb3 	bl	800aba8 <ptr_to_mem>
 800b242:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	2200      	movs	r2, #0
 800b248:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	881a      	ldrh	r2, [r3, #0]
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	8bfa      	ldrh	r2, [r7, #30]
 800b256:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	8a7a      	ldrh	r2, [r7, #18]
 800b25c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	2201      	movs	r2, #1
 800b262:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b26c:	d00b      	beq.n	800b286 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	881b      	ldrh	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fc98 	bl	800aba8 <ptr_to_mem>
 800b278:	4602      	mov	r2, r0
 800b27a:	8a7b      	ldrh	r3, [r7, #18]
 800b27c:	8053      	strh	r3, [r2, #2]
 800b27e:	e002      	b.n	800b286 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	2201      	movs	r2, #1
 800b284:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b286:	4b39      	ldr	r3, [pc, #228]	; (800b36c <mem_malloc+0x1e8>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	697a      	ldr	r2, [r7, #20]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d127      	bne.n	800b2e0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b290:	4b36      	ldr	r3, [pc, #216]	; (800b36c <mem_malloc+0x1e8>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b296:	e005      	b.n	800b2a4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f7ff fc83 	bl	800aba8 <ptr_to_mem>
 800b2a2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	791b      	ldrb	r3, [r3, #4]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <mem_malloc+0x132>
 800b2ac:	4b33      	ldr	r3, [pc, #204]	; (800b37c <mem_malloc+0x1f8>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	69ba      	ldr	r2, [r7, #24]
 800b2b2:	429a      	cmp	r2, r3
 800b2b4:	d1f0      	bne.n	800b298 <mem_malloc+0x114>
          }
          lfree = cur;
 800b2b6:	4a2d      	ldr	r2, [pc, #180]	; (800b36c <mem_malloc+0x1e8>)
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b2bc:	4b2b      	ldr	r3, [pc, #172]	; (800b36c <mem_malloc+0x1e8>)
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	4b2e      	ldr	r3, [pc, #184]	; (800b37c <mem_malloc+0x1f8>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	429a      	cmp	r2, r3
 800b2c6:	d00b      	beq.n	800b2e0 <mem_malloc+0x15c>
 800b2c8:	4b28      	ldr	r3, [pc, #160]	; (800b36c <mem_malloc+0x1e8>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	791b      	ldrb	r3, [r3, #4]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d006      	beq.n	800b2e0 <mem_malloc+0x15c>
 800b2d2:	4b27      	ldr	r3, [pc, #156]	; (800b370 <mem_malloc+0x1ec>)
 800b2d4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b2d8:	4929      	ldr	r1, [pc, #164]	; (800b380 <mem_malloc+0x1fc>)
 800b2da:	4827      	ldr	r0, [pc, #156]	; (800b378 <mem_malloc+0x1f4>)
 800b2dc:	f00c fd66 	bl	8017dac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b2e0:	4821      	ldr	r0, [pc, #132]	; (800b368 <mem_malloc+0x1e4>)
 800b2e2:	f00c fb94 	bl	8017a0e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b2e6:	8bba      	ldrh	r2, [r7, #28]
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	3308      	adds	r3, #8
 800b2ee:	4a23      	ldr	r2, [pc, #140]	; (800b37c <mem_malloc+0x1f8>)
 800b2f0:	6812      	ldr	r2, [r2, #0]
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d906      	bls.n	800b304 <mem_malloc+0x180>
 800b2f6:	4b1e      	ldr	r3, [pc, #120]	; (800b370 <mem_malloc+0x1ec>)
 800b2f8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b2fc:	4921      	ldr	r1, [pc, #132]	; (800b384 <mem_malloc+0x200>)
 800b2fe:	481e      	ldr	r0, [pc, #120]	; (800b378 <mem_malloc+0x1f4>)
 800b300:	f00c fd54 	bl	8017dac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b304:	697b      	ldr	r3, [r7, #20]
 800b306:	f003 0303 	and.w	r3, r3, #3
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d006      	beq.n	800b31c <mem_malloc+0x198>
 800b30e:	4b18      	ldr	r3, [pc, #96]	; (800b370 <mem_malloc+0x1ec>)
 800b310:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b314:	491c      	ldr	r1, [pc, #112]	; (800b388 <mem_malloc+0x204>)
 800b316:	4818      	ldr	r0, [pc, #96]	; (800b378 <mem_malloc+0x1f4>)
 800b318:	f00c fd48 	bl	8017dac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	f003 0303 	and.w	r3, r3, #3
 800b322:	2b00      	cmp	r3, #0
 800b324:	d006      	beq.n	800b334 <mem_malloc+0x1b0>
 800b326:	4b12      	ldr	r3, [pc, #72]	; (800b370 <mem_malloc+0x1ec>)
 800b328:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b32c:	4917      	ldr	r1, [pc, #92]	; (800b38c <mem_malloc+0x208>)
 800b32e:	4812      	ldr	r0, [pc, #72]	; (800b378 <mem_malloc+0x1f4>)
 800b330:	f00c fd3c 	bl	8017dac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	3308      	adds	r3, #8
 800b338:	e011      	b.n	800b35e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b33a:	8bfb      	ldrh	r3, [r7, #30]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff fc33 	bl	800aba8 <ptr_to_mem>
 800b342:	4603      	mov	r3, r0
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b348:	8bfa      	ldrh	r2, [r7, #30]
 800b34a:	8bbb      	ldrh	r3, [r7, #28]
 800b34c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b350:	429a      	cmp	r2, r3
 800b352:	f4ff af41 	bcc.w	800b1d8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b356:	4804      	ldr	r0, [pc, #16]	; (800b368 <mem_malloc+0x1e4>)
 800b358:	f00c fb59 	bl	8017a0e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	20009d38 	.word	0x20009d38
 800b36c:	20009d3c 	.word	0x20009d3c
 800b370:	08019160 	.word	0x08019160
 800b374:	08019324 	.word	0x08019324
 800b378:	080191a8 	.word	0x080191a8
 800b37c:	20009d34 	.word	0x20009d34
 800b380:	08019338 	.word	0x08019338
 800b384:	08019354 	.word	0x08019354
 800b388:	08019384 	.word	0x08019384
 800b38c:	080193b4 	.word	0x080193b4

0800b390 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b390:	b480      	push	{r7}
 800b392:	b085      	sub	sp, #20
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	689b      	ldr	r3, [r3, #8]
 800b39c:	2200      	movs	r2, #0
 800b39e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	3303      	adds	r3, #3
 800b3a6:	f023 0303 	bic.w	r3, r3, #3
 800b3aa:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	60fb      	str	r3, [r7, #12]
 800b3b0:	e011      	b.n	800b3d6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	681a      	ldr	r2, [r3, #0]
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	881b      	ldrh	r3, [r3, #0]
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	3301      	adds	r3, #1
 800b3d4:	60fb      	str	r3, [r7, #12]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	885b      	ldrh	r3, [r3, #2]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	dbe7      	blt.n	800b3b2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b3e2:	bf00      	nop
 800b3e4:	bf00      	nop
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	80fb      	strh	r3, [r7, #6]
 800b3fa:	e009      	b.n	800b410 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b3fc:	88fb      	ldrh	r3, [r7, #6]
 800b3fe:	4a08      	ldr	r2, [pc, #32]	; (800b420 <memp_init+0x30>)
 800b400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b404:	4618      	mov	r0, r3
 800b406:	f7ff ffc3 	bl	800b390 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b40a:	88fb      	ldrh	r3, [r7, #6]
 800b40c:	3301      	adds	r3, #1
 800b40e:	80fb      	strh	r3, [r7, #6]
 800b410:	88fb      	ldrh	r3, [r7, #6]
 800b412:	2b0c      	cmp	r3, #12
 800b414:	d9f2      	bls.n	800b3fc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b416:	bf00      	nop
 800b418:	bf00      	nop
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}
 800b420:	0801e5d4 	.word	0x0801e5d4

0800b424 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b084      	sub	sp, #16
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b42c:	f00c fb22 	bl	8017a74 <sys_arch_protect>
 800b430:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d015      	beq.n	800b46c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	6812      	ldr	r2, [r2, #0]
 800b448:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f003 0303 	and.w	r3, r3, #3
 800b450:	2b00      	cmp	r3, #0
 800b452:	d006      	beq.n	800b462 <do_memp_malloc_pool+0x3e>
 800b454:	4b09      	ldr	r3, [pc, #36]	; (800b47c <do_memp_malloc_pool+0x58>)
 800b456:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b45a:	4909      	ldr	r1, [pc, #36]	; (800b480 <do_memp_malloc_pool+0x5c>)
 800b45c:	4809      	ldr	r0, [pc, #36]	; (800b484 <do_memp_malloc_pool+0x60>)
 800b45e:	f00c fca5 	bl	8017dac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f00c fb14 	bl	8017a90 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	e003      	b.n	800b474 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b46c:	68f8      	ldr	r0, [r7, #12]
 800b46e:	f00c fb0f 	bl	8017a90 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b472:	2300      	movs	r3, #0
}
 800b474:	4618      	mov	r0, r3
 800b476:	3710      	adds	r7, #16
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}
 800b47c:	080193d8 	.word	0x080193d8
 800b480:	08019408 	.word	0x08019408
 800b484:	0801942c 	.word	0x0801942c

0800b488 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d106      	bne.n	800b4a4 <memp_malloc_pool+0x1c>
 800b496:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <memp_malloc_pool+0x38>)
 800b498:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b49c:	4909      	ldr	r1, [pc, #36]	; (800b4c4 <memp_malloc_pool+0x3c>)
 800b49e:	480a      	ldr	r0, [pc, #40]	; (800b4c8 <memp_malloc_pool+0x40>)
 800b4a0:	f00c fc84 	bl	8017dac <iprintf>
  if (desc == NULL) {
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d101      	bne.n	800b4ae <memp_malloc_pool+0x26>
    return NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e003      	b.n	800b4b6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7ff ffb8 	bl	800b424 <do_memp_malloc_pool>
 800b4b4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	080193d8 	.word	0x080193d8
 800b4c4:	08019454 	.word	0x08019454
 800b4c8:	0801942c 	.word	0x0801942c

0800b4cc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	4603      	mov	r3, r0
 800b4d4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b4d6:	79fb      	ldrb	r3, [r7, #7]
 800b4d8:	2b0c      	cmp	r3, #12
 800b4da:	d908      	bls.n	800b4ee <memp_malloc+0x22>
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <memp_malloc+0x3c>)
 800b4de:	f240 1257 	movw	r2, #343	; 0x157
 800b4e2:	490a      	ldr	r1, [pc, #40]	; (800b50c <memp_malloc+0x40>)
 800b4e4:	480a      	ldr	r0, [pc, #40]	; (800b510 <memp_malloc+0x44>)
 800b4e6:	f00c fc61 	bl	8017dac <iprintf>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e008      	b.n	800b500 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	4a08      	ldr	r2, [pc, #32]	; (800b514 <memp_malloc+0x48>)
 800b4f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7ff ff94 	bl	800b424 <do_memp_malloc_pool>
 800b4fc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3710      	adds	r7, #16
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	080193d8 	.word	0x080193d8
 800b50c:	08019468 	.word	0x08019468
 800b510:	0801942c 	.word	0x0801942c
 800b514:	0801e5d4 	.word	0x0801e5d4

0800b518 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	f003 0303 	and.w	r3, r3, #3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d006      	beq.n	800b53a <do_memp_free_pool+0x22>
 800b52c:	4b0d      	ldr	r3, [pc, #52]	; (800b564 <do_memp_free_pool+0x4c>)
 800b52e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b532:	490d      	ldr	r1, [pc, #52]	; (800b568 <do_memp_free_pool+0x50>)
 800b534:	480d      	ldr	r0, [pc, #52]	; (800b56c <do_memp_free_pool+0x54>)
 800b536:	f00c fc39 	bl	8017dac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b53e:	f00c fa99 	bl	8017a74 <sys_arch_protect>
 800b542:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	681a      	ldr	r2, [r3, #0]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	68fa      	ldr	r2, [r7, #12]
 800b554:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b556:	68b8      	ldr	r0, [r7, #8]
 800b558:	f00c fa9a 	bl	8017a90 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	080193d8 	.word	0x080193d8
 800b568:	08019488 	.word	0x08019488
 800b56c:	0801942c 	.word	0x0801942c

0800b570 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d106      	bne.n	800b58e <memp_free_pool+0x1e>
 800b580:	4b0a      	ldr	r3, [pc, #40]	; (800b5ac <memp_free_pool+0x3c>)
 800b582:	f240 1295 	movw	r2, #405	; 0x195
 800b586:	490a      	ldr	r1, [pc, #40]	; (800b5b0 <memp_free_pool+0x40>)
 800b588:	480a      	ldr	r0, [pc, #40]	; (800b5b4 <memp_free_pool+0x44>)
 800b58a:	f00c fc0f 	bl	8017dac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d007      	beq.n	800b5a4 <memp_free_pool+0x34>
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d004      	beq.n	800b5a4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b59a:	6839      	ldr	r1, [r7, #0]
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f7ff ffbb 	bl	800b518 <do_memp_free_pool>
 800b5a2:	e000      	b.n	800b5a6 <memp_free_pool+0x36>
    return;
 800b5a4:	bf00      	nop
}
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	080193d8 	.word	0x080193d8
 800b5b0:	08019454 	.word	0x08019454
 800b5b4:	0801942c 	.word	0x0801942c

0800b5b8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b082      	sub	sp, #8
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	4603      	mov	r3, r0
 800b5c0:	6039      	str	r1, [r7, #0]
 800b5c2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b5c4:	79fb      	ldrb	r3, [r7, #7]
 800b5c6:	2b0c      	cmp	r3, #12
 800b5c8:	d907      	bls.n	800b5da <memp_free+0x22>
 800b5ca:	4b0c      	ldr	r3, [pc, #48]	; (800b5fc <memp_free+0x44>)
 800b5cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b5d0:	490b      	ldr	r1, [pc, #44]	; (800b600 <memp_free+0x48>)
 800b5d2:	480c      	ldr	r0, [pc, #48]	; (800b604 <memp_free+0x4c>)
 800b5d4:	f00c fbea 	bl	8017dac <iprintf>
 800b5d8:	e00c      	b.n	800b5f4 <memp_free+0x3c>

  if (mem == NULL) {
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d008      	beq.n	800b5f2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b5e0:	79fb      	ldrb	r3, [r7, #7]
 800b5e2:	4a09      	ldr	r2, [pc, #36]	; (800b608 <memp_free+0x50>)
 800b5e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5e8:	6839      	ldr	r1, [r7, #0]
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7ff ff94 	bl	800b518 <do_memp_free_pool>
 800b5f0:	e000      	b.n	800b5f4 <memp_free+0x3c>
    return;
 800b5f2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	080193d8 	.word	0x080193d8
 800b600:	080194a8 	.word	0x080194a8
 800b604:	0801942c 	.word	0x0801942c
 800b608:	0801e5d4 	.word	0x0801e5d4

0800b60c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b60c:	b480      	push	{r7}
 800b60e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b610:	bf00      	nop
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
	...

0800b61c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b086      	sub	sp, #24
 800b620:	af00      	add	r7, sp, #0
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d108      	bne.n	800b642 <netif_add+0x26>
 800b630:	4b5b      	ldr	r3, [pc, #364]	; (800b7a0 <netif_add+0x184>)
 800b632:	f240 1227 	movw	r2, #295	; 0x127
 800b636:	495b      	ldr	r1, [pc, #364]	; (800b7a4 <netif_add+0x188>)
 800b638:	485b      	ldr	r0, [pc, #364]	; (800b7a8 <netif_add+0x18c>)
 800b63a:	f00c fbb7 	bl	8017dac <iprintf>
 800b63e:	2300      	movs	r3, #0
 800b640:	e0a9      	b.n	800b796 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	2b00      	cmp	r3, #0
 800b646:	d108      	bne.n	800b65a <netif_add+0x3e>
 800b648:	4b55      	ldr	r3, [pc, #340]	; (800b7a0 <netif_add+0x184>)
 800b64a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b64e:	4957      	ldr	r1, [pc, #348]	; (800b7ac <netif_add+0x190>)
 800b650:	4855      	ldr	r0, [pc, #340]	; (800b7a8 <netif_add+0x18c>)
 800b652:	f00c fbab 	bl	8017dac <iprintf>
 800b656:	2300      	movs	r3, #0
 800b658:	e09d      	b.n	800b796 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d101      	bne.n	800b664 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b660:	4b53      	ldr	r3, [pc, #332]	; (800b7b0 <netif_add+0x194>)
 800b662:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b66a:	4b51      	ldr	r3, [pc, #324]	; (800b7b0 <netif_add+0x194>)
 800b66c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d101      	bne.n	800b678 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b674:	4b4e      	ldr	r3, [pc, #312]	; (800b7b0 <netif_add+0x194>)
 800b676:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	2200      	movs	r2, #0
 800b67c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2200      	movs	r2, #0
 800b682:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2200      	movs	r2, #0
 800b688:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	4a49      	ldr	r2, [pc, #292]	; (800b7b4 <netif_add+0x198>)
 800b68e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2200      	movs	r2, #0
 800b69a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3324      	adds	r3, #36	; 0x24
 800b6a2:	2204      	movs	r2, #4
 800b6a4:	2100      	movs	r1, #0
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f00c fbe5 	bl	8017e76 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	6a3a      	ldr	r2, [r7, #32]
 800b6b6:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b6b8:	4b3f      	ldr	r3, [pc, #252]	; (800b7b8 <netif_add+0x19c>)
 800b6ba:	781a      	ldrb	r2, [r3, #0]
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f000 f914 	bl	800b8fc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	4798      	blx	r3
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <netif_add+0xc8>
    return NULL;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e058      	b.n	800b796 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6ea:	2bff      	cmp	r3, #255	; 0xff
 800b6ec:	d103      	bne.n	800b6f6 <netif_add+0xda>
        netif->num = 0;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b6fa:	4b30      	ldr	r3, [pc, #192]	; (800b7bc <netif_add+0x1a0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	617b      	str	r3, [r7, #20]
 800b700:	e02b      	b.n	800b75a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	429a      	cmp	r2, r3
 800b708:	d106      	bne.n	800b718 <netif_add+0xfc>
 800b70a:	4b25      	ldr	r3, [pc, #148]	; (800b7a0 <netif_add+0x184>)
 800b70c:	f240 128b 	movw	r2, #395	; 0x18b
 800b710:	492b      	ldr	r1, [pc, #172]	; (800b7c0 <netif_add+0x1a4>)
 800b712:	4825      	ldr	r0, [pc, #148]	; (800b7a8 <netif_add+0x18c>)
 800b714:	f00c fb4a 	bl	8017dac <iprintf>
        num_netifs++;
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	3301      	adds	r3, #1
 800b71c:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	2bff      	cmp	r3, #255	; 0xff
 800b722:	dd06      	ble.n	800b732 <netif_add+0x116>
 800b724:	4b1e      	ldr	r3, [pc, #120]	; (800b7a0 <netif_add+0x184>)
 800b726:	f240 128d 	movw	r2, #397	; 0x18d
 800b72a:	4926      	ldr	r1, [pc, #152]	; (800b7c4 <netif_add+0x1a8>)
 800b72c:	481e      	ldr	r0, [pc, #120]	; (800b7a8 <netif_add+0x18c>)
 800b72e:	f00c fb3d 	bl	8017dac <iprintf>
        if (netif2->num == netif->num) {
 800b732:	697b      	ldr	r3, [r7, #20]
 800b734:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b73e:	429a      	cmp	r2, r3
 800b740:	d108      	bne.n	800b754 <netif_add+0x138>
          netif->num++;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b748:	3301      	adds	r3, #1
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800b752:	e005      	b.n	800b760 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	697b      	ldr	r3, [r7, #20]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d1d0      	bne.n	800b702 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800b760:	697b      	ldr	r3, [r7, #20]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d1be      	bne.n	800b6e4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b76c:	2bfe      	cmp	r3, #254	; 0xfe
 800b76e:	d103      	bne.n	800b778 <netif_add+0x15c>
    netif_num = 0;
 800b770:	4b11      	ldr	r3, [pc, #68]	; (800b7b8 <netif_add+0x19c>)
 800b772:	2200      	movs	r2, #0
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	e006      	b.n	800b786 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b77e:	3301      	adds	r3, #1
 800b780:	b2da      	uxtb	r2, r3
 800b782:	4b0d      	ldr	r3, [pc, #52]	; (800b7b8 <netif_add+0x19c>)
 800b784:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b786:	4b0d      	ldr	r3, [pc, #52]	; (800b7bc <netif_add+0x1a0>)
 800b788:	681a      	ldr	r2, [r3, #0]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b78e:	4a0b      	ldr	r2, [pc, #44]	; (800b7bc <netif_add+0x1a0>)
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b794:	68fb      	ldr	r3, [r7, #12]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	080194c4 	.word	0x080194c4
 800b7a4:	08019558 	.word	0x08019558
 800b7a8:	08019514 	.word	0x08019514
 800b7ac:	08019574 	.word	0x08019574
 800b7b0:	0801e658 	.word	0x0801e658
 800b7b4:	0800bbdf 	.word	0x0800bbdf
 800b7b8:	2000ce34 	.word	0x2000ce34
 800b7bc:	2000ce2c 	.word	0x2000ce2c
 800b7c0:	08019598 	.word	0x08019598
 800b7c4:	080195ac 	.word	0x080195ac

0800b7c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b7d2:	6839      	ldr	r1, [r7, #0]
 800b7d4:	6878      	ldr	r0, [r7, #4]
 800b7d6:	f002 fe37 	bl	800e448 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f007 fea5 	bl	801352c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b7e2:	bf00      	nop
 800b7e4:	3708      	adds	r7, #8
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
	...

0800b7ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b086      	sub	sp, #24
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d106      	bne.n	800b80c <netif_do_set_ipaddr+0x20>
 800b7fe:	4b1d      	ldr	r3, [pc, #116]	; (800b874 <netif_do_set_ipaddr+0x88>)
 800b800:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b804:	491c      	ldr	r1, [pc, #112]	; (800b878 <netif_do_set_ipaddr+0x8c>)
 800b806:	481d      	ldr	r0, [pc, #116]	; (800b87c <netif_do_set_ipaddr+0x90>)
 800b808:	f00c fad0 	bl	8017dac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d106      	bne.n	800b820 <netif_do_set_ipaddr+0x34>
 800b812:	4b18      	ldr	r3, [pc, #96]	; (800b874 <netif_do_set_ipaddr+0x88>)
 800b814:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b818:	4917      	ldr	r1, [pc, #92]	; (800b878 <netif_do_set_ipaddr+0x8c>)
 800b81a:	4818      	ldr	r0, [pc, #96]	; (800b87c <netif_do_set_ipaddr+0x90>)
 800b81c:	f00c fac6 	bl	8017dac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	3304      	adds	r3, #4
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d01c      	beq.n	800b868 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	3304      	adds	r3, #4
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b83e:	f107 0314 	add.w	r3, r7, #20
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f7ff ffbf 	bl	800b7c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d002      	beq.n	800b856 <netif_do_set_ipaddr+0x6a>
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	e000      	b.n	800b858 <netif_do_set_ipaddr+0x6c>
 800b856:	2300      	movs	r3, #0
 800b858:	68fa      	ldr	r2, [r7, #12]
 800b85a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b85c:	2101      	movs	r1, #1
 800b85e:	68f8      	ldr	r0, [r7, #12]
 800b860:	f000 f8d2 	bl	800ba08 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b864:	2301      	movs	r3, #1
 800b866:	e000      	b.n	800b86a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3718      	adds	r7, #24
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	080194c4 	.word	0x080194c4
 800b878:	080195dc 	.word	0x080195dc
 800b87c:	08019514 	.word	0x08019514

0800b880 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	681a      	ldr	r2, [r3, #0]
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	3308      	adds	r3, #8
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	429a      	cmp	r2, r3
 800b898:	d00a      	beq.n	800b8b0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d002      	beq.n	800b8a6 <netif_do_set_netmask+0x26>
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	e000      	b.n	800b8a8 <netif_do_set_netmask+0x28>
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e000      	b.n	800b8b2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b8b0:	2300      	movs	r3, #0
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	681a      	ldr	r2, [r3, #0]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	330c      	adds	r3, #12
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d00a      	beq.n	800b8ee <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d002      	beq.n	800b8e4 <netif_do_set_gw+0x26>
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	e000      	b.n	800b8e6 <netif_do_set_gw+0x28>
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e000      	b.n	800b8f0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b90a:	2300      	movs	r3, #0
 800b90c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b90e:	2300      	movs	r3, #0
 800b910:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b918:	4b1c      	ldr	r3, [pc, #112]	; (800b98c <netif_set_addr+0x90>)
 800b91a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d101      	bne.n	800b926 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b922:	4b1a      	ldr	r3, [pc, #104]	; (800b98c <netif_set_addr+0x90>)
 800b924:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d101      	bne.n	800b930 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b92c:	4b17      	ldr	r3, [pc, #92]	; (800b98c <netif_set_addr+0x90>)
 800b92e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b930:	68bb      	ldr	r3, [r7, #8]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d003      	beq.n	800b93e <netif_set_addr+0x42>
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d101      	bne.n	800b942 <netif_set_addr+0x46>
 800b93e:	2301      	movs	r3, #1
 800b940:	e000      	b.n	800b944 <netif_set_addr+0x48>
 800b942:	2300      	movs	r3, #0
 800b944:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b946:	697b      	ldr	r3, [r7, #20]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d006      	beq.n	800b95a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b94c:	f107 0310 	add.w	r3, r7, #16
 800b950:	461a      	mov	r2, r3
 800b952:	68b9      	ldr	r1, [r7, #8]
 800b954:	68f8      	ldr	r0, [r7, #12]
 800b956:	f7ff ff49 	bl	800b7ec <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b95a:	69fa      	ldr	r2, [r7, #28]
 800b95c:	6879      	ldr	r1, [r7, #4]
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7ff ff8e 	bl	800b880 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b964:	69ba      	ldr	r2, [r7, #24]
 800b966:	6839      	ldr	r1, [r7, #0]
 800b968:	68f8      	ldr	r0, [r7, #12]
 800b96a:	f7ff ffa8 	bl	800b8be <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d106      	bne.n	800b982 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b974:	f107 0310 	add.w	r3, r7, #16
 800b978:	461a      	mov	r2, r3
 800b97a:	68b9      	ldr	r1, [r7, #8]
 800b97c:	68f8      	ldr	r0, [r7, #12]
 800b97e:	f7ff ff35 	bl	800b7ec <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b982:	bf00      	nop
 800b984:	3720      	adds	r7, #32
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	0801e658 	.word	0x0801e658

0800b990 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b990:	b480      	push	{r7}
 800b992:	b083      	sub	sp, #12
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b998:	4a04      	ldr	r2, [pc, #16]	; (800b9ac <netif_set_default+0x1c>)
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr
 800b9aa:	bf00      	nop
 800b9ac:	2000ce30 	.word	0x2000ce30

0800b9b0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d107      	bne.n	800b9ce <netif_set_up+0x1e>
 800b9be:	4b0f      	ldr	r3, [pc, #60]	; (800b9fc <netif_set_up+0x4c>)
 800b9c0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b9c4:	490e      	ldr	r1, [pc, #56]	; (800ba00 <netif_set_up+0x50>)
 800b9c6:	480f      	ldr	r0, [pc, #60]	; (800ba04 <netif_set_up+0x54>)
 800b9c8:	f00c f9f0 	bl	8017dac <iprintf>
 800b9cc:	e013      	b.n	800b9f6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10c      	bne.n	800b9f6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b9e2:	f043 0301 	orr.w	r3, r3, #1
 800b9e6:	b2da      	uxtb	r2, r3
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b9ee:	2103      	movs	r1, #3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f809 	bl	800ba08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b9f6:	3708      	adds	r7, #8
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}
 800b9fc:	080194c4 	.word	0x080194c4
 800ba00:	0801964c 	.word	0x0801964c
 800ba04:	08019514 	.word	0x08019514

0800ba08 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	460b      	mov	r3, r1
 800ba12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d106      	bne.n	800ba28 <netif_issue_reports+0x20>
 800ba1a:	4b18      	ldr	r3, [pc, #96]	; (800ba7c <netif_issue_reports+0x74>)
 800ba1c:	f240 326d 	movw	r2, #877	; 0x36d
 800ba20:	4917      	ldr	r1, [pc, #92]	; (800ba80 <netif_issue_reports+0x78>)
 800ba22:	4818      	ldr	r0, [pc, #96]	; (800ba84 <netif_issue_reports+0x7c>)
 800ba24:	f00c f9c2 	bl	8017dac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba2e:	f003 0304 	and.w	r3, r3, #4
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d01e      	beq.n	800ba74 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba3c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d017      	beq.n	800ba74 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	f003 0301 	and.w	r3, r3, #1
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d013      	beq.n	800ba76 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	3304      	adds	r3, #4
 800ba52:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00e      	beq.n	800ba76 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba5e:	f003 0308 	and.w	r3, r3, #8
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d007      	beq.n	800ba76 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	3304      	adds	r3, #4
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f00a fb5f 	bl	8016130 <etharp_request>
 800ba72:	e000      	b.n	800ba76 <netif_issue_reports+0x6e>
    return;
 800ba74:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ba76:	3708      	adds	r7, #8
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}
 800ba7c:	080194c4 	.word	0x080194c4
 800ba80:	08019668 	.word	0x08019668
 800ba84:	08019514 	.word	0x08019514

0800ba88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d107      	bne.n	800baa6 <netif_set_down+0x1e>
 800ba96:	4b12      	ldr	r3, [pc, #72]	; (800bae0 <netif_set_down+0x58>)
 800ba98:	f240 329b 	movw	r2, #923	; 0x39b
 800ba9c:	4911      	ldr	r1, [pc, #68]	; (800bae4 <netif_set_down+0x5c>)
 800ba9e:	4812      	ldr	r0, [pc, #72]	; (800bae8 <netif_set_down+0x60>)
 800baa0:	f00c f984 	bl	8017dac <iprintf>
 800baa4:	e019      	b.n	800bada <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800baac:	f003 0301 	and.w	r3, r3, #1
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d012      	beq.n	800bada <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800baba:	f023 0301 	bic.w	r3, r3, #1
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bacc:	f003 0308 	and.w	r3, r3, #8
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d002      	beq.n	800bada <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f009 fee5 	bl	80158a4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bada:	3708      	adds	r7, #8
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}
 800bae0:	080194c4 	.word	0x080194c4
 800bae4:	0801968c 	.word	0x0801968c
 800bae8:	08019514 	.word	0x08019514

0800baec <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d107      	bne.n	800bb0a <netif_set_link_up+0x1e>
 800bafa:	4b15      	ldr	r3, [pc, #84]	; (800bb50 <netif_set_link_up+0x64>)
 800bafc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800bb00:	4914      	ldr	r1, [pc, #80]	; (800bb54 <netif_set_link_up+0x68>)
 800bb02:	4815      	ldr	r0, [pc, #84]	; (800bb58 <netif_set_link_up+0x6c>)
 800bb04:	f00c f952 	bl	8017dac <iprintf>
 800bb08:	e01e      	b.n	800bb48 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb10:	f003 0304 	and.w	r3, r3, #4
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d117      	bne.n	800bb48 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb1e:	f043 0304 	orr.w	r3, r3, #4
 800bb22:	b2da      	uxtb	r2, r3
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f008 f92a 	bl	8013d84 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bb30:	2103      	movs	r1, #3
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7ff ff68 	bl	800ba08 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d003      	beq.n	800bb48 <netif_set_link_up+0x5c>
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	69db      	ldr	r3, [r3, #28]
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	080194c4 	.word	0x080194c4
 800bb54:	080196ac 	.word	0x080196ac
 800bb58:	08019514 	.word	0x08019514

0800bb5c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d107      	bne.n	800bb7a <netif_set_link_down+0x1e>
 800bb6a:	4b11      	ldr	r3, [pc, #68]	; (800bbb0 <netif_set_link_down+0x54>)
 800bb6c:	f240 4206 	movw	r2, #1030	; 0x406
 800bb70:	4910      	ldr	r1, [pc, #64]	; (800bbb4 <netif_set_link_down+0x58>)
 800bb72:	4811      	ldr	r0, [pc, #68]	; (800bbb8 <netif_set_link_down+0x5c>)
 800bb74:	f00c f91a 	bl	8017dac <iprintf>
 800bb78:	e017      	b.n	800bbaa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d010      	beq.n	800bbaa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bb8e:	f023 0304 	bic.w	r3, r3, #4
 800bb92:	b2da      	uxtb	r2, r3
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d003      	beq.n	800bbaa <netif_set_link_down+0x4e>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bbaa:	3708      	adds	r7, #8
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	080194c4 	.word	0x080194c4
 800bbb4:	080196d0 	.word	0x080196d0
 800bbb8:	08019514 	.word	0x08019514

0800bbbc <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	61da      	str	r2, [r3, #28]
  }
}
 800bbd2:	bf00      	nop
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b085      	sub	sp, #20
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	60f8      	str	r0, [r7, #12]
 800bbe6:	60b9      	str	r1, [r7, #8]
 800bbe8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bbea:	f06f 030b 	mvn.w	r3, #11
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3714      	adds	r7, #20
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr
	...

0800bbfc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bc06:	79fb      	ldrb	r3, [r7, #7]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d013      	beq.n	800bc34 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bc0c:	4b0d      	ldr	r3, [pc, #52]	; (800bc44 <netif_get_by_index+0x48>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e00c      	b.n	800bc2e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	79fa      	ldrb	r2, [r7, #7]
 800bc20:	429a      	cmp	r2, r3
 800bc22:	d101      	bne.n	800bc28 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	e006      	b.n	800bc36 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	60fb      	str	r3, [r7, #12]
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d1ef      	bne.n	800bc14 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	2000ce2c 	.word	0x2000ce2c

0800bc48 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b082      	sub	sp, #8
 800bc4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bc4e:	f00b ff11 	bl	8017a74 <sys_arch_protect>
 800bc52:	6038      	str	r0, [r7, #0]
 800bc54:	4b0d      	ldr	r3, [pc, #52]	; (800bc8c <pbuf_free_ooseq+0x44>)
 800bc56:	2200      	movs	r2, #0
 800bc58:	701a      	strb	r2, [r3, #0]
 800bc5a:	6838      	ldr	r0, [r7, #0]
 800bc5c:	f00b ff18 	bl	8017a90 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc60:	4b0b      	ldr	r3, [pc, #44]	; (800bc90 <pbuf_free_ooseq+0x48>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	607b      	str	r3, [r7, #4]
 800bc66:	e00a      	b.n	800bc7e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f002 fc27 	bl	800e4c4 <tcp_free_ooseq>
      return;
 800bc76:	e005      	b.n	800bc84 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	68db      	ldr	r3, [r3, #12]
 800bc7c:	607b      	str	r3, [r7, #4]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d1f1      	bne.n	800bc68 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bc84:	3708      	adds	r7, #8
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	2000ce35 	.word	0x2000ce35
 800bc90:	2000ce44 	.word	0x2000ce44

0800bc94 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bc9c:	f7ff ffd4 	bl	800bc48 <pbuf_free_ooseq>
}
 800bca0:	bf00      	nop
 800bca2:	3708      	adds	r7, #8
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bcae:	f00b fee1 	bl	8017a74 <sys_arch_protect>
 800bcb2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bcb4:	4b0f      	ldr	r3, [pc, #60]	; (800bcf4 <pbuf_pool_is_empty+0x4c>)
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bcba:	4b0e      	ldr	r3, [pc, #56]	; (800bcf4 <pbuf_pool_is_empty+0x4c>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bcc0:	6878      	ldr	r0, [r7, #4]
 800bcc2:	f00b fee5 	bl	8017a90 <sys_arch_unprotect>

  if (!queued) {
 800bcc6:	78fb      	ldrb	r3, [r7, #3]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d10f      	bne.n	800bcec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bccc:	2100      	movs	r1, #0
 800bcce:	480a      	ldr	r0, [pc, #40]	; (800bcf8 <pbuf_pool_is_empty+0x50>)
 800bcd0:	f7fd fb6c 	bl	80093ac <tcpip_try_callback>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d008      	beq.n	800bcec <pbuf_pool_is_empty+0x44>
 800bcda:	f00b fecb 	bl	8017a74 <sys_arch_protect>
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	4b04      	ldr	r3, [pc, #16]	; (800bcf4 <pbuf_pool_is_empty+0x4c>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f00b fed2 	bl	8017a90 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bcec:	bf00      	nop
 800bcee:	3708      	adds	r7, #8
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	2000ce35 	.word	0x2000ce35
 800bcf8:	0800bc95 	.word	0x0800bc95

0800bcfc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b085      	sub	sp, #20
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4611      	mov	r1, r2
 800bd08:	461a      	mov	r2, r3
 800bd0a:	460b      	mov	r3, r1
 800bd0c:	80fb      	strh	r3, [r7, #6]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2200      	movs	r2, #0
 800bd16:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	88fa      	ldrh	r2, [r7, #6]
 800bd22:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	88ba      	ldrh	r2, [r7, #4]
 800bd28:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bd2a:	8b3b      	ldrh	r3, [r7, #24]
 800bd2c:	b2da      	uxtb	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	7f3a      	ldrb	r2, [r7, #28]
 800bd36:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2200      	movs	r2, #0
 800bd42:	73da      	strb	r2, [r3, #15]
}
 800bd44:	bf00      	nop
 800bd46:	3714      	adds	r7, #20
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08c      	sub	sp, #48	; 0x30
 800bd54:	af02      	add	r7, sp, #8
 800bd56:	4603      	mov	r3, r0
 800bd58:	71fb      	strb	r3, [r7, #7]
 800bd5a:	460b      	mov	r3, r1
 800bd5c:	80bb      	strh	r3, [r7, #4]
 800bd5e:	4613      	mov	r3, r2
 800bd60:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bd62:	79fb      	ldrb	r3, [r7, #7]
 800bd64:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bd66:	887b      	ldrh	r3, [r7, #2]
 800bd68:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bd6c:	d07f      	beq.n	800be6e <pbuf_alloc+0x11e>
 800bd6e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bd72:	f300 80c8 	bgt.w	800bf06 <pbuf_alloc+0x1b6>
 800bd76:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bd7a:	d010      	beq.n	800bd9e <pbuf_alloc+0x4e>
 800bd7c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bd80:	f300 80c1 	bgt.w	800bf06 <pbuf_alloc+0x1b6>
 800bd84:	2b01      	cmp	r3, #1
 800bd86:	d002      	beq.n	800bd8e <pbuf_alloc+0x3e>
 800bd88:	2b41      	cmp	r3, #65	; 0x41
 800bd8a:	f040 80bc 	bne.w	800bf06 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bd8e:	887a      	ldrh	r2, [r7, #2]
 800bd90:	88bb      	ldrh	r3, [r7, #4]
 800bd92:	4619      	mov	r1, r3
 800bd94:	2000      	movs	r0, #0
 800bd96:	f000 f8d1 	bl	800bf3c <pbuf_alloc_reference>
 800bd9a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bd9c:	e0bd      	b.n	800bf1a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bda2:	2300      	movs	r3, #0
 800bda4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bda6:	88bb      	ldrh	r3, [r7, #4]
 800bda8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bdaa:	200c      	movs	r0, #12
 800bdac:	f7ff fb8e 	bl	800b4cc <memp_malloc>
 800bdb0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bdb2:	693b      	ldr	r3, [r7, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d109      	bne.n	800bdcc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bdb8:	f7ff ff76 	bl	800bca8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <pbuf_alloc+0x78>
            pbuf_free(p);
 800bdc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdc4:	f000 faa8 	bl	800c318 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	e0a7      	b.n	800bf1c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bdcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdce:	3303      	adds	r3, #3
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	f023 0303 	bic.w	r3, r3, #3
 800bdd6:	b29b      	uxth	r3, r3
 800bdd8:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	8b7a      	ldrh	r2, [r7, #26]
 800bde0:	4293      	cmp	r3, r2
 800bde2:	bf28      	it	cs
 800bde4:	4613      	movcs	r3, r2
 800bde6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bde8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdea:	3310      	adds	r3, #16
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	4413      	add	r3, r2
 800bdf0:	3303      	adds	r3, #3
 800bdf2:	f023 0303 	bic.w	r3, r3, #3
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	89f9      	ldrh	r1, [r7, #14]
 800bdfa:	8b7a      	ldrh	r2, [r7, #26]
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	9301      	str	r3, [sp, #4]
 800be00:	887b      	ldrh	r3, [r7, #2]
 800be02:	9300      	str	r3, [sp, #0]
 800be04:	460b      	mov	r3, r1
 800be06:	4601      	mov	r1, r0
 800be08:	6938      	ldr	r0, [r7, #16]
 800be0a:	f7ff ff77 	bl	800bcfc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	f003 0303 	and.w	r3, r3, #3
 800be16:	2b00      	cmp	r3, #0
 800be18:	d006      	beq.n	800be28 <pbuf_alloc+0xd8>
 800be1a:	4b42      	ldr	r3, [pc, #264]	; (800bf24 <pbuf_alloc+0x1d4>)
 800be1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800be20:	4941      	ldr	r1, [pc, #260]	; (800bf28 <pbuf_alloc+0x1d8>)
 800be22:	4842      	ldr	r0, [pc, #264]	; (800bf2c <pbuf_alloc+0x1dc>)
 800be24:	f00b ffc2 	bl	8017dac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800be28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be2a:	3303      	adds	r3, #3
 800be2c:	f023 0303 	bic.w	r3, r3, #3
 800be30:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800be34:	d106      	bne.n	800be44 <pbuf_alloc+0xf4>
 800be36:	4b3b      	ldr	r3, [pc, #236]	; (800bf24 <pbuf_alloc+0x1d4>)
 800be38:	f44f 7281 	mov.w	r2, #258	; 0x102
 800be3c:	493c      	ldr	r1, [pc, #240]	; (800bf30 <pbuf_alloc+0x1e0>)
 800be3e:	483b      	ldr	r0, [pc, #236]	; (800bf2c <pbuf_alloc+0x1dc>)
 800be40:	f00b ffb4 	bl	8017dac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800be44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800be4a:	693b      	ldr	r3, [r7, #16]
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
 800be4e:	e002      	b.n	800be56 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800be5a:	8b7a      	ldrh	r2, [r7, #26]
 800be5c:	89fb      	ldrh	r3, [r7, #14]
 800be5e:	1ad3      	subs	r3, r2, r3
 800be60:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800be62:	2300      	movs	r3, #0
 800be64:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800be66:	8b7b      	ldrh	r3, [r7, #26]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d19e      	bne.n	800bdaa <pbuf_alloc+0x5a>
      break;
 800be6c:	e055      	b.n	800bf1a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800be6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be70:	3303      	adds	r3, #3
 800be72:	b29b      	uxth	r3, r3
 800be74:	f023 0303 	bic.w	r3, r3, #3
 800be78:	b29a      	uxth	r2, r3
 800be7a:	88bb      	ldrh	r3, [r7, #4]
 800be7c:	3303      	adds	r3, #3
 800be7e:	b29b      	uxth	r3, r3
 800be80:	f023 0303 	bic.w	r3, r3, #3
 800be84:	b29b      	uxth	r3, r3
 800be86:	4413      	add	r3, r2
 800be88:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800be8a:	8b3b      	ldrh	r3, [r7, #24]
 800be8c:	3310      	adds	r3, #16
 800be8e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800be90:	8b3a      	ldrh	r2, [r7, #24]
 800be92:	88bb      	ldrh	r3, [r7, #4]
 800be94:	3303      	adds	r3, #3
 800be96:	f023 0303 	bic.w	r3, r3, #3
 800be9a:	429a      	cmp	r2, r3
 800be9c:	d306      	bcc.n	800beac <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800be9e:	8afa      	ldrh	r2, [r7, #22]
 800bea0:	88bb      	ldrh	r3, [r7, #4]
 800bea2:	3303      	adds	r3, #3
 800bea4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d201      	bcs.n	800beb0 <pbuf_alloc+0x160>
        return NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	e035      	b.n	800bf1c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800beb0:	8afb      	ldrh	r3, [r7, #22]
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7ff f966 	bl	800b184 <mem_malloc>
 800beb8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <pbuf_alloc+0x174>
        return NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	e02b      	b.n	800bf1c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bec6:	3310      	adds	r3, #16
 800bec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beca:	4413      	add	r3, r2
 800becc:	3303      	adds	r3, #3
 800bece:	f023 0303 	bic.w	r3, r3, #3
 800bed2:	4618      	mov	r0, r3
 800bed4:	88b9      	ldrh	r1, [r7, #4]
 800bed6:	88ba      	ldrh	r2, [r7, #4]
 800bed8:	2300      	movs	r3, #0
 800beda:	9301      	str	r3, [sp, #4]
 800bedc:	887b      	ldrh	r3, [r7, #2]
 800bede:	9300      	str	r3, [sp, #0]
 800bee0:	460b      	mov	r3, r1
 800bee2:	4601      	mov	r1, r0
 800bee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bee6:	f7ff ff09 	bl	800bcfc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	f003 0303 	and.w	r3, r3, #3
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d010      	beq.n	800bf18 <pbuf_alloc+0x1c8>
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <pbuf_alloc+0x1d4>)
 800bef8:	f44f 7291 	mov.w	r2, #290	; 0x122
 800befc:	490d      	ldr	r1, [pc, #52]	; (800bf34 <pbuf_alloc+0x1e4>)
 800befe:	480b      	ldr	r0, [pc, #44]	; (800bf2c <pbuf_alloc+0x1dc>)
 800bf00:	f00b ff54 	bl	8017dac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bf04:	e008      	b.n	800bf18 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bf06:	4b07      	ldr	r3, [pc, #28]	; (800bf24 <pbuf_alloc+0x1d4>)
 800bf08:	f240 1227 	movw	r2, #295	; 0x127
 800bf0c:	490a      	ldr	r1, [pc, #40]	; (800bf38 <pbuf_alloc+0x1e8>)
 800bf0e:	4807      	ldr	r0, [pc, #28]	; (800bf2c <pbuf_alloc+0x1dc>)
 800bf10:	f00b ff4c 	bl	8017dac <iprintf>
      return NULL;
 800bf14:	2300      	movs	r3, #0
 800bf16:	e001      	b.n	800bf1c <pbuf_alloc+0x1cc>
      break;
 800bf18:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bf1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3728      	adds	r7, #40	; 0x28
 800bf20:	46bd      	mov	sp, r7
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	080196f4 	.word	0x080196f4
 800bf28:	08019724 	.word	0x08019724
 800bf2c:	08019754 	.word	0x08019754
 800bf30:	0801977c 	.word	0x0801977c
 800bf34:	080197b0 	.word	0x080197b0
 800bf38:	080197dc 	.word	0x080197dc

0800bf3c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b086      	sub	sp, #24
 800bf40:	af02      	add	r7, sp, #8
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	807b      	strh	r3, [r7, #2]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bf4c:	883b      	ldrh	r3, [r7, #0]
 800bf4e:	2b41      	cmp	r3, #65	; 0x41
 800bf50:	d009      	beq.n	800bf66 <pbuf_alloc_reference+0x2a>
 800bf52:	883b      	ldrh	r3, [r7, #0]
 800bf54:	2b01      	cmp	r3, #1
 800bf56:	d006      	beq.n	800bf66 <pbuf_alloc_reference+0x2a>
 800bf58:	4b0f      	ldr	r3, [pc, #60]	; (800bf98 <pbuf_alloc_reference+0x5c>)
 800bf5a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800bf5e:	490f      	ldr	r1, [pc, #60]	; (800bf9c <pbuf_alloc_reference+0x60>)
 800bf60:	480f      	ldr	r0, [pc, #60]	; (800bfa0 <pbuf_alloc_reference+0x64>)
 800bf62:	f00b ff23 	bl	8017dac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800bf66:	200b      	movs	r0, #11
 800bf68:	f7ff fab0 	bl	800b4cc <memp_malloc>
 800bf6c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d101      	bne.n	800bf78 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800bf74:	2300      	movs	r3, #0
 800bf76:	e00b      	b.n	800bf90 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800bf78:	8879      	ldrh	r1, [r7, #2]
 800bf7a:	887a      	ldrh	r2, [r7, #2]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	9301      	str	r3, [sp, #4]
 800bf80:	883b      	ldrh	r3, [r7, #0]
 800bf82:	9300      	str	r3, [sp, #0]
 800bf84:	460b      	mov	r3, r1
 800bf86:	6879      	ldr	r1, [r7, #4]
 800bf88:	68f8      	ldr	r0, [r7, #12]
 800bf8a:	f7ff feb7 	bl	800bcfc <pbuf_init_alloced_pbuf>
  return p;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}
 800bf98:	080196f4 	.word	0x080196f4
 800bf9c:	080197f8 	.word	0x080197f8
 800bfa0:	08019754 	.word	0x08019754

0800bfa4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b088      	sub	sp, #32
 800bfa8:	af02      	add	r7, sp, #8
 800bfaa:	607b      	str	r3, [r7, #4]
 800bfac:	4603      	mov	r3, r0
 800bfae:	73fb      	strb	r3, [r7, #15]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	81bb      	strh	r3, [r7, #12]
 800bfb4:	4613      	mov	r3, r2
 800bfb6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800bfb8:	7bfb      	ldrb	r3, [r7, #15]
 800bfba:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800bfbc:	8a7b      	ldrh	r3, [r7, #18]
 800bfbe:	3303      	adds	r3, #3
 800bfc0:	f023 0203 	bic.w	r2, r3, #3
 800bfc4:	89bb      	ldrh	r3, [r7, #12]
 800bfc6:	441a      	add	r2, r3
 800bfc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d901      	bls.n	800bfd2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	e018      	b.n	800c004 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bfd2:	6a3b      	ldr	r3, [r7, #32]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d007      	beq.n	800bfe8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800bfd8:	8a7b      	ldrh	r3, [r7, #18]
 800bfda:	3303      	adds	r3, #3
 800bfdc:	f023 0303 	bic.w	r3, r3, #3
 800bfe0:	6a3a      	ldr	r2, [r7, #32]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	617b      	str	r3, [r7, #20]
 800bfe6:	e001      	b.n	800bfec <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	89b9      	ldrh	r1, [r7, #12]
 800bff0:	89ba      	ldrh	r2, [r7, #12]
 800bff2:	2302      	movs	r3, #2
 800bff4:	9301      	str	r3, [sp, #4]
 800bff6:	897b      	ldrh	r3, [r7, #10]
 800bff8:	9300      	str	r3, [sp, #0]
 800bffa:	460b      	mov	r3, r1
 800bffc:	6979      	ldr	r1, [r7, #20]
 800bffe:	f7ff fe7d 	bl	800bcfc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c002:	687b      	ldr	r3, [r7, #4]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3718      	adds	r7, #24
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d106      	bne.n	800c02c <pbuf_realloc+0x20>
 800c01e:	4b3a      	ldr	r3, [pc, #232]	; (800c108 <pbuf_realloc+0xfc>)
 800c020:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c024:	4939      	ldr	r1, [pc, #228]	; (800c10c <pbuf_realloc+0x100>)
 800c026:	483a      	ldr	r0, [pc, #232]	; (800c110 <pbuf_realloc+0x104>)
 800c028:	f00b fec0 	bl	8017dac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	891b      	ldrh	r3, [r3, #8]
 800c030:	887a      	ldrh	r2, [r7, #2]
 800c032:	429a      	cmp	r2, r3
 800c034:	d263      	bcs.n	800c0fe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	891a      	ldrh	r2, [r3, #8]
 800c03a:	887b      	ldrh	r3, [r7, #2]
 800c03c:	1ad3      	subs	r3, r2, r3
 800c03e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c040:	887b      	ldrh	r3, [r7, #2]
 800c042:	817b      	strh	r3, [r7, #10]
  q = p;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c048:	e018      	b.n	800c07c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	895b      	ldrh	r3, [r3, #10]
 800c04e:	897a      	ldrh	r2, [r7, #10]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	891a      	ldrh	r2, [r3, #8]
 800c058:	893b      	ldrh	r3, [r7, #8]
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d106      	bne.n	800c07c <pbuf_realloc+0x70>
 800c06e:	4b26      	ldr	r3, [pc, #152]	; (800c108 <pbuf_realloc+0xfc>)
 800c070:	f240 12af 	movw	r2, #431	; 0x1af
 800c074:	4927      	ldr	r1, [pc, #156]	; (800c114 <pbuf_realloc+0x108>)
 800c076:	4826      	ldr	r0, [pc, #152]	; (800c110 <pbuf_realloc+0x104>)
 800c078:	f00b fe98 	bl	8017dac <iprintf>
  while (rem_len > q->len) {
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	895b      	ldrh	r3, [r3, #10]
 800c080:	897a      	ldrh	r2, [r7, #10]
 800c082:	429a      	cmp	r2, r3
 800c084:	d8e1      	bhi.n	800c04a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	7b1b      	ldrb	r3, [r3, #12]
 800c08a:	f003 030f 	and.w	r3, r3, #15
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d121      	bne.n	800c0d6 <pbuf_realloc+0xca>
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	895b      	ldrh	r3, [r3, #10]
 800c096:	897a      	ldrh	r2, [r7, #10]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d01c      	beq.n	800c0d6 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	7b5b      	ldrb	r3, [r3, #13]
 800c0a0:	f003 0302 	and.w	r3, r3, #2
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d116      	bne.n	800c0d6 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	b29a      	uxth	r2, r3
 800c0b2:	897b      	ldrh	r3, [r7, #10]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	b29b      	uxth	r3, r3
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	68f8      	ldr	r0, [r7, #12]
 800c0bc:	f7fe ff58 	bl	800af70 <mem_trim>
 800c0c0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d106      	bne.n	800c0d6 <pbuf_realloc+0xca>
 800c0c8:	4b0f      	ldr	r3, [pc, #60]	; (800c108 <pbuf_realloc+0xfc>)
 800c0ca:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c0ce:	4912      	ldr	r1, [pc, #72]	; (800c118 <pbuf_realloc+0x10c>)
 800c0d0:	480f      	ldr	r0, [pc, #60]	; (800c110 <pbuf_realloc+0x104>)
 800c0d2:	f00b fe6b 	bl	8017dac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	897a      	ldrh	r2, [r7, #10]
 800c0da:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	895a      	ldrh	r2, [r3, #10]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d004      	beq.n	800c0f6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 f911 	bl	800c318 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2200      	movs	r2, #0
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	e000      	b.n	800c100 <pbuf_realloc+0xf4>
    return;
 800c0fe:	bf00      	nop

}
 800c100:	3710      	adds	r7, #16
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	080196f4 	.word	0x080196f4
 800c10c:	0801980c 	.word	0x0801980c
 800c110:	08019754 	.word	0x08019754
 800c114:	08019824 	.word	0x08019824
 800c118:	0801983c 	.word	0x0801983c

0800c11c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	4613      	mov	r3, r2
 800c128:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d106      	bne.n	800c13e <pbuf_add_header_impl+0x22>
 800c130:	4b2b      	ldr	r3, [pc, #172]	; (800c1e0 <pbuf_add_header_impl+0xc4>)
 800c132:	f240 12df 	movw	r2, #479	; 0x1df
 800c136:	492b      	ldr	r1, [pc, #172]	; (800c1e4 <pbuf_add_header_impl+0xc8>)
 800c138:	482b      	ldr	r0, [pc, #172]	; (800c1e8 <pbuf_add_header_impl+0xcc>)
 800c13a:	f00b fe37 	bl	8017dac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d003      	beq.n	800c14c <pbuf_add_header_impl+0x30>
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c14a:	d301      	bcc.n	800c150 <pbuf_add_header_impl+0x34>
    return 1;
 800c14c:	2301      	movs	r3, #1
 800c14e:	e043      	b.n	800c1d8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c150:	68bb      	ldr	r3, [r7, #8]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d101      	bne.n	800c15a <pbuf_add_header_impl+0x3e>
    return 0;
 800c156:	2300      	movs	r3, #0
 800c158:	e03e      	b.n	800c1d8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	891a      	ldrh	r2, [r3, #8]
 800c162:	8a7b      	ldrh	r3, [r7, #18]
 800c164:	4413      	add	r3, r2
 800c166:	b29b      	uxth	r3, r3
 800c168:	8a7a      	ldrh	r2, [r7, #18]
 800c16a:	429a      	cmp	r2, r3
 800c16c:	d901      	bls.n	800c172 <pbuf_add_header_impl+0x56>
    return 1;
 800c16e:	2301      	movs	r3, #1
 800c170:	e032      	b.n	800c1d8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	7b1b      	ldrb	r3, [r3, #12]
 800c176:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c178:	8a3b      	ldrh	r3, [r7, #16]
 800c17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d00c      	beq.n	800c19c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	685a      	ldr	r2, [r3, #4]
 800c186:	68bb      	ldr	r3, [r7, #8]
 800c188:	425b      	negs	r3, r3
 800c18a:	4413      	add	r3, r2
 800c18c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3310      	adds	r3, #16
 800c192:	697a      	ldr	r2, [r7, #20]
 800c194:	429a      	cmp	r2, r3
 800c196:	d20d      	bcs.n	800c1b4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c198:	2301      	movs	r3, #1
 800c19a:	e01d      	b.n	800c1d8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c19c:	79fb      	ldrb	r3, [r7, #7]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d006      	beq.n	800c1b0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	685a      	ldr	r2, [r3, #4]
 800c1a6:	68bb      	ldr	r3, [r7, #8]
 800c1a8:	425b      	negs	r3, r3
 800c1aa:	4413      	add	r3, r2
 800c1ac:	617b      	str	r3, [r7, #20]
 800c1ae:	e001      	b.n	800c1b4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	e011      	b.n	800c1d8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	697a      	ldr	r2, [r7, #20]
 800c1b8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	895a      	ldrh	r2, [r3, #10]
 800c1be:	8a7b      	ldrh	r3, [r7, #18]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	b29a      	uxth	r2, r3
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	891a      	ldrh	r2, [r3, #8]
 800c1cc:	8a7b      	ldrh	r3, [r7, #18]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	b29a      	uxth	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	811a      	strh	r2, [r3, #8]


  return 0;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	080196f4 	.word	0x080196f4
 800c1e4:	08019858 	.word	0x08019858
 800c1e8:	08019754 	.word	0x08019754

0800c1ec <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	6078      	str	r0, [r7, #4]
 800c1f4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff ff8e 	bl	800c11c <pbuf_add_header_impl>
 800c200:	4603      	mov	r3, r0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d106      	bne.n	800c22a <pbuf_remove_header+0x1e>
 800c21c:	4b20      	ldr	r3, [pc, #128]	; (800c2a0 <pbuf_remove_header+0x94>)
 800c21e:	f240 224b 	movw	r2, #587	; 0x24b
 800c222:	4920      	ldr	r1, [pc, #128]	; (800c2a4 <pbuf_remove_header+0x98>)
 800c224:	4820      	ldr	r0, [pc, #128]	; (800c2a8 <pbuf_remove_header+0x9c>)
 800c226:	f00b fdc1 	bl	8017dac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d003      	beq.n	800c238 <pbuf_remove_header+0x2c>
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c236:	d301      	bcc.n	800c23c <pbuf_remove_header+0x30>
    return 1;
 800c238:	2301      	movs	r3, #1
 800c23a:	e02c      	b.n	800c296 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d101      	bne.n	800c246 <pbuf_remove_header+0x3a>
    return 0;
 800c242:	2300      	movs	r3, #0
 800c244:	e027      	b.n	800c296 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	895b      	ldrh	r3, [r3, #10]
 800c24e:	89fa      	ldrh	r2, [r7, #14]
 800c250:	429a      	cmp	r2, r3
 800c252:	d908      	bls.n	800c266 <pbuf_remove_header+0x5a>
 800c254:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <pbuf_remove_header+0x94>)
 800c256:	f240 2255 	movw	r2, #597	; 0x255
 800c25a:	4914      	ldr	r1, [pc, #80]	; (800c2ac <pbuf_remove_header+0xa0>)
 800c25c:	4812      	ldr	r0, [pc, #72]	; (800c2a8 <pbuf_remove_header+0x9c>)
 800c25e:	f00b fda5 	bl	8017dac <iprintf>
 800c262:	2301      	movs	r3, #1
 800c264:	e017      	b.n	800c296 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	685a      	ldr	r2, [r3, #4]
 800c270:	683b      	ldr	r3, [r7, #0]
 800c272:	441a      	add	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	895a      	ldrh	r2, [r3, #10]
 800c27c:	89fb      	ldrh	r3, [r7, #14]
 800c27e:	1ad3      	subs	r3, r2, r3
 800c280:	b29a      	uxth	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	891a      	ldrh	r2, [r3, #8]
 800c28a:	89fb      	ldrh	r3, [r7, #14]
 800c28c:	1ad3      	subs	r3, r2, r3
 800c28e:	b29a      	uxth	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c294:	2300      	movs	r3, #0
}
 800c296:	4618      	mov	r0, r3
 800c298:	3710      	adds	r7, #16
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	080196f4 	.word	0x080196f4
 800c2a4:	08019858 	.word	0x08019858
 800c2a8:	08019754 	.word	0x08019754
 800c2ac:	08019864 	.word	0x08019864

0800c2b0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b082      	sub	sp, #8
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	460b      	mov	r3, r1
 800c2ba:	807b      	strh	r3, [r7, #2]
 800c2bc:	4613      	mov	r3, r2
 800c2be:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c2c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	da08      	bge.n	800c2da <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c2c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2cc:	425b      	negs	r3, r3
 800c2ce:	4619      	mov	r1, r3
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f7ff ff9b 	bl	800c20c <pbuf_remove_header>
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	e007      	b.n	800c2ea <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c2da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c2de:	787a      	ldrb	r2, [r7, #1]
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff ff1a 	bl	800c11c <pbuf_add_header_impl>
 800c2e8:	4603      	mov	r3, r0
  }
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c2fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c302:	2201      	movs	r2, #1
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f7ff ffd2 	bl	800c2b0 <pbuf_header_impl>
 800c30c:	4603      	mov	r3, r0
}
 800c30e:	4618      	mov	r0, r3
 800c310:	3708      	adds	r7, #8
 800c312:	46bd      	mov	sp, r7
 800c314:	bd80      	pop	{r7, pc}
	...

0800c318 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b088      	sub	sp, #32
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d10b      	bne.n	800c33e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d106      	bne.n	800c33a <pbuf_free+0x22>
 800c32c:	4b3b      	ldr	r3, [pc, #236]	; (800c41c <pbuf_free+0x104>)
 800c32e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c332:	493b      	ldr	r1, [pc, #236]	; (800c420 <pbuf_free+0x108>)
 800c334:	483b      	ldr	r0, [pc, #236]	; (800c424 <pbuf_free+0x10c>)
 800c336:	f00b fd39 	bl	8017dac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c33a:	2300      	movs	r3, #0
 800c33c:	e069      	b.n	800c412 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c342:	e062      	b.n	800c40a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c344:	f00b fb96 	bl	8017a74 <sys_arch_protect>
 800c348:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	7b9b      	ldrb	r3, [r3, #14]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d106      	bne.n	800c360 <pbuf_free+0x48>
 800c352:	4b32      	ldr	r3, [pc, #200]	; (800c41c <pbuf_free+0x104>)
 800c354:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c358:	4933      	ldr	r1, [pc, #204]	; (800c428 <pbuf_free+0x110>)
 800c35a:	4832      	ldr	r0, [pc, #200]	; (800c424 <pbuf_free+0x10c>)
 800c35c:	f00b fd26 	bl	8017dac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	7b9b      	ldrb	r3, [r3, #14]
 800c364:	3b01      	subs	r3, #1
 800c366:	b2da      	uxtb	r2, r3
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	739a      	strb	r2, [r3, #14]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	7b9b      	ldrb	r3, [r3, #14]
 800c370:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c372:	69b8      	ldr	r0, [r7, #24]
 800c374:	f00b fb8c 	bl	8017a90 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c378:	7dfb      	ldrb	r3, [r7, #23]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d143      	bne.n	800c406 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	7b1b      	ldrb	r3, [r3, #12]
 800c388:	f003 030f 	and.w	r3, r3, #15
 800c38c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7b5b      	ldrb	r3, [r3, #13]
 800c392:	f003 0302 	and.w	r3, r3, #2
 800c396:	2b00      	cmp	r3, #0
 800c398:	d011      	beq.n	800c3be <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c39e:	68bb      	ldr	r3, [r7, #8]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d106      	bne.n	800c3b4 <pbuf_free+0x9c>
 800c3a6:	4b1d      	ldr	r3, [pc, #116]	; (800c41c <pbuf_free+0x104>)
 800c3a8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c3ac:	491f      	ldr	r1, [pc, #124]	; (800c42c <pbuf_free+0x114>)
 800c3ae:	481d      	ldr	r0, [pc, #116]	; (800c424 <pbuf_free+0x10c>)
 800c3b0:	f00b fcfc 	bl	8017dac <iprintf>
        pc->custom_free_function(p);
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	691b      	ldr	r3, [r3, #16]
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	4798      	blx	r3
 800c3bc:	e01d      	b.n	800c3fa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c3be:	7bfb      	ldrb	r3, [r7, #15]
 800c3c0:	2b02      	cmp	r3, #2
 800c3c2:	d104      	bne.n	800c3ce <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c3c4:	6879      	ldr	r1, [r7, #4]
 800c3c6:	200c      	movs	r0, #12
 800c3c8:	f7ff f8f6 	bl	800b5b8 <memp_free>
 800c3cc:	e015      	b.n	800c3fa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c3ce:	7bfb      	ldrb	r3, [r7, #15]
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d104      	bne.n	800c3de <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c3d4:	6879      	ldr	r1, [r7, #4]
 800c3d6:	200b      	movs	r0, #11
 800c3d8:	f7ff f8ee 	bl	800b5b8 <memp_free>
 800c3dc:	e00d      	b.n	800c3fa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c3de:	7bfb      	ldrb	r3, [r7, #15]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d103      	bne.n	800c3ec <pbuf_free+0xd4>
          mem_free(p);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f7fe fd33 	bl	800ae50 <mem_free>
 800c3ea:	e006      	b.n	800c3fa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c3ec:	4b0b      	ldr	r3, [pc, #44]	; (800c41c <pbuf_free+0x104>)
 800c3ee:	f240 320f 	movw	r2, #783	; 0x30f
 800c3f2:	490f      	ldr	r1, [pc, #60]	; (800c430 <pbuf_free+0x118>)
 800c3f4:	480b      	ldr	r0, [pc, #44]	; (800c424 <pbuf_free+0x10c>)
 800c3f6:	f00b fcd9 	bl	8017dac <iprintf>
        }
      }
      count++;
 800c3fa:	7ffb      	ldrb	r3, [r7, #31]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	607b      	str	r3, [r7, #4]
 800c404:	e001      	b.n	800c40a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c406:	2300      	movs	r3, #0
 800c408:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d199      	bne.n	800c344 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c410:	7ffb      	ldrb	r3, [r7, #31]
}
 800c412:	4618      	mov	r0, r3
 800c414:	3720      	adds	r7, #32
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	080196f4 	.word	0x080196f4
 800c420:	08019858 	.word	0x08019858
 800c424:	08019754 	.word	0x08019754
 800c428:	08019884 	.word	0x08019884
 800c42c:	0801989c 	.word	0x0801989c
 800c430:	080198c0 	.word	0x080198c0

0800c434 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c440:	e005      	b.n	800c44e <pbuf_clen+0x1a>
    ++len;
 800c442:	89fb      	ldrh	r3, [r7, #14]
 800c444:	3301      	adds	r3, #1
 800c446:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d1f6      	bne.n	800c442 <pbuf_clen+0xe>
  }
  return len;
 800c454:	89fb      	ldrh	r3, [r7, #14]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
	...

0800c464 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d016      	beq.n	800c4a0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c472:	f00b faff 	bl	8017a74 <sys_arch_protect>
 800c476:	60f8      	str	r0, [r7, #12]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	7b9b      	ldrb	r3, [r3, #14]
 800c47c:	3301      	adds	r3, #1
 800c47e:	b2da      	uxtb	r2, r3
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	739a      	strb	r2, [r3, #14]
 800c484:	68f8      	ldr	r0, [r7, #12]
 800c486:	f00b fb03 	bl	8017a90 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	7b9b      	ldrb	r3, [r3, #14]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d106      	bne.n	800c4a0 <pbuf_ref+0x3c>
 800c492:	4b05      	ldr	r3, [pc, #20]	; (800c4a8 <pbuf_ref+0x44>)
 800c494:	f240 3242 	movw	r2, #834	; 0x342
 800c498:	4904      	ldr	r1, [pc, #16]	; (800c4ac <pbuf_ref+0x48>)
 800c49a:	4805      	ldr	r0, [pc, #20]	; (800c4b0 <pbuf_ref+0x4c>)
 800c49c:	f00b fc86 	bl	8017dac <iprintf>
  }
}
 800c4a0:	bf00      	nop
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	080196f4 	.word	0x080196f4
 800c4ac:	080198d4 	.word	0x080198d4
 800c4b0:	08019754 	.word	0x08019754

0800c4b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <pbuf_cat+0x16>
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d107      	bne.n	800c4da <pbuf_cat+0x26>
 800c4ca:	4b20      	ldr	r3, [pc, #128]	; (800c54c <pbuf_cat+0x98>)
 800c4cc:	f240 3259 	movw	r2, #857	; 0x359
 800c4d0:	491f      	ldr	r1, [pc, #124]	; (800c550 <pbuf_cat+0x9c>)
 800c4d2:	4820      	ldr	r0, [pc, #128]	; (800c554 <pbuf_cat+0xa0>)
 800c4d4:	f00b fc6a 	bl	8017dac <iprintf>
 800c4d8:	e034      	b.n	800c544 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	60fb      	str	r3, [r7, #12]
 800c4de:	e00a      	b.n	800c4f6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	891a      	ldrh	r2, [r3, #8]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	891b      	ldrh	r3, [r3, #8]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	b29a      	uxth	r2, r3
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	60fb      	str	r3, [r7, #12]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1f0      	bne.n	800c4e0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	891a      	ldrh	r2, [r3, #8]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	895b      	ldrh	r3, [r3, #10]
 800c506:	429a      	cmp	r2, r3
 800c508:	d006      	beq.n	800c518 <pbuf_cat+0x64>
 800c50a:	4b10      	ldr	r3, [pc, #64]	; (800c54c <pbuf_cat+0x98>)
 800c50c:	f240 3262 	movw	r2, #866	; 0x362
 800c510:	4911      	ldr	r1, [pc, #68]	; (800c558 <pbuf_cat+0xa4>)
 800c512:	4810      	ldr	r0, [pc, #64]	; (800c554 <pbuf_cat+0xa0>)
 800c514:	f00b fc4a 	bl	8017dac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d006      	beq.n	800c52e <pbuf_cat+0x7a>
 800c520:	4b0a      	ldr	r3, [pc, #40]	; (800c54c <pbuf_cat+0x98>)
 800c522:	f240 3263 	movw	r2, #867	; 0x363
 800c526:	490d      	ldr	r1, [pc, #52]	; (800c55c <pbuf_cat+0xa8>)
 800c528:	480a      	ldr	r0, [pc, #40]	; (800c554 <pbuf_cat+0xa0>)
 800c52a:	f00b fc3f 	bl	8017dac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	891a      	ldrh	r2, [r3, #8]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	891b      	ldrh	r3, [r3, #8]
 800c536:	4413      	add	r3, r2
 800c538:	b29a      	uxth	r2, r3
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	683a      	ldr	r2, [r7, #0]
 800c542:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	080196f4 	.word	0x080196f4
 800c550:	080198e8 	.word	0x080198e8
 800c554:	08019754 	.word	0x08019754
 800c558:	08019920 	.word	0x08019920
 800c55c:	08019950 	.word	0x08019950

0800c560 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b082      	sub	sp, #8
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c56a:	6839      	ldr	r1, [r7, #0]
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f7ff ffa1 	bl	800c4b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c572:	6838      	ldr	r0, [r7, #0]
 800c574:	f7ff ff76 	bl	800c464 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c578:	bf00      	nop
 800c57a:	3708      	adds	r7, #8
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c58a:	2300      	movs	r3, #0
 800c58c:	617b      	str	r3, [r7, #20]
 800c58e:	2300      	movs	r3, #0
 800c590:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d008      	beq.n	800c5aa <pbuf_copy+0x2a>
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d005      	beq.n	800c5aa <pbuf_copy+0x2a>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	891a      	ldrh	r2, [r3, #8]
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	891b      	ldrh	r3, [r3, #8]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d209      	bcs.n	800c5be <pbuf_copy+0x3e>
 800c5aa:	4b57      	ldr	r3, [pc, #348]	; (800c708 <pbuf_copy+0x188>)
 800c5ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c5b0:	4956      	ldr	r1, [pc, #344]	; (800c70c <pbuf_copy+0x18c>)
 800c5b2:	4857      	ldr	r0, [pc, #348]	; (800c710 <pbuf_copy+0x190>)
 800c5b4:	f00b fbfa 	bl	8017dac <iprintf>
 800c5b8:	f06f 030f 	mvn.w	r3, #15
 800c5bc:	e09f      	b.n	800c6fe <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	895b      	ldrh	r3, [r3, #10]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	895b      	ldrh	r3, [r3, #10]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	1acb      	subs	r3, r1, r3
 800c5d2:	429a      	cmp	r2, r3
 800c5d4:	d306      	bcc.n	800c5e4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	895b      	ldrh	r3, [r3, #10]
 800c5da:	461a      	mov	r2, r3
 800c5dc:	693b      	ldr	r3, [r7, #16]
 800c5de:	1ad3      	subs	r3, r2, r3
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e005      	b.n	800c5f0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	895b      	ldrh	r3, [r3, #10]
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	1ad3      	subs	r3, r2, r3
 800c5ee:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	685a      	ldr	r2, [r3, #4]
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	18d0      	adds	r0, r2, r3
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	685a      	ldr	r2, [r3, #4]
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	4413      	add	r3, r2
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	4619      	mov	r1, r3
 800c604:	f00b fcd0 	bl	8017fa8 <memcpy>
    offset_to += len;
 800c608:	697a      	ldr	r2, [r7, #20]
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	4413      	add	r3, r2
 800c60e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c610:	693a      	ldr	r2, [r7, #16]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	4413      	add	r3, r2
 800c616:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	895b      	ldrh	r3, [r3, #10]
 800c61c:	461a      	mov	r2, r3
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	4293      	cmp	r3, r2
 800c622:	d906      	bls.n	800c632 <pbuf_copy+0xb2>
 800c624:	4b38      	ldr	r3, [pc, #224]	; (800c708 <pbuf_copy+0x188>)
 800c626:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c62a:	493a      	ldr	r1, [pc, #232]	; (800c714 <pbuf_copy+0x194>)
 800c62c:	4838      	ldr	r0, [pc, #224]	; (800c710 <pbuf_copy+0x190>)
 800c62e:	f00b fbbd 	bl	8017dac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	895b      	ldrh	r3, [r3, #10]
 800c636:	461a      	mov	r2, r3
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d906      	bls.n	800c64c <pbuf_copy+0xcc>
 800c63e:	4b32      	ldr	r3, [pc, #200]	; (800c708 <pbuf_copy+0x188>)
 800c640:	f240 32da 	movw	r2, #986	; 0x3da
 800c644:	4934      	ldr	r1, [pc, #208]	; (800c718 <pbuf_copy+0x198>)
 800c646:	4832      	ldr	r0, [pc, #200]	; (800c710 <pbuf_copy+0x190>)
 800c648:	f00b fbb0 	bl	8017dac <iprintf>
    if (offset_from >= p_from->len) {
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	895b      	ldrh	r3, [r3, #10]
 800c650:	461a      	mov	r2, r3
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	4293      	cmp	r3, r2
 800c656:	d304      	bcc.n	800c662 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	895b      	ldrh	r3, [r3, #10]
 800c666:	461a      	mov	r2, r3
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	4293      	cmp	r3, r2
 800c66c:	d114      	bne.n	800c698 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d10c      	bne.n	800c698 <pbuf_copy+0x118>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d009      	beq.n	800c698 <pbuf_copy+0x118>
 800c684:	4b20      	ldr	r3, [pc, #128]	; (800c708 <pbuf_copy+0x188>)
 800c686:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c68a:	4924      	ldr	r1, [pc, #144]	; (800c71c <pbuf_copy+0x19c>)
 800c68c:	4820      	ldr	r0, [pc, #128]	; (800c710 <pbuf_copy+0x190>)
 800c68e:	f00b fb8d 	bl	8017dac <iprintf>
 800c692:	f06f 030f 	mvn.w	r3, #15
 800c696:	e032      	b.n	800c6fe <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d013      	beq.n	800c6c6 <pbuf_copy+0x146>
 800c69e:	683b      	ldr	r3, [r7, #0]
 800c6a0:	895a      	ldrh	r2, [r3, #10]
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	891b      	ldrh	r3, [r3, #8]
 800c6a6:	429a      	cmp	r2, r3
 800c6a8:	d10d      	bne.n	800c6c6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d009      	beq.n	800c6c6 <pbuf_copy+0x146>
 800c6b2:	4b15      	ldr	r3, [pc, #84]	; (800c708 <pbuf_copy+0x188>)
 800c6b4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c6b8:	4919      	ldr	r1, [pc, #100]	; (800c720 <pbuf_copy+0x1a0>)
 800c6ba:	4815      	ldr	r0, [pc, #84]	; (800c710 <pbuf_copy+0x190>)
 800c6bc:	f00b fb76 	bl	8017dac <iprintf>
 800c6c0:	f06f 0305 	mvn.w	r3, #5
 800c6c4:	e01b      	b.n	800c6fe <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d013      	beq.n	800c6f4 <pbuf_copy+0x174>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	895a      	ldrh	r2, [r3, #10]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	891b      	ldrh	r3, [r3, #8]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d10d      	bne.n	800c6f4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d009      	beq.n	800c6f4 <pbuf_copy+0x174>
 800c6e0:	4b09      	ldr	r3, [pc, #36]	; (800c708 <pbuf_copy+0x188>)
 800c6e2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c6e6:	490e      	ldr	r1, [pc, #56]	; (800c720 <pbuf_copy+0x1a0>)
 800c6e8:	4809      	ldr	r0, [pc, #36]	; (800c710 <pbuf_copy+0x190>)
 800c6ea:	f00b fb5f 	bl	8017dac <iprintf>
 800c6ee:	f06f 0305 	mvn.w	r3, #5
 800c6f2:	e004      	b.n	800c6fe <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	f47f af61 	bne.w	800c5be <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3718      	adds	r7, #24
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
 800c706:	bf00      	nop
 800c708:	080196f4 	.word	0x080196f4
 800c70c:	0801999c 	.word	0x0801999c
 800c710:	08019754 	.word	0x08019754
 800c714:	080199cc 	.word	0x080199cc
 800c718:	080199e4 	.word	0x080199e4
 800c71c:	08019a00 	.word	0x08019a00
 800c720:	08019a10 	.word	0x08019a10

0800c724 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b088      	sub	sp, #32
 800c728:	af00      	add	r7, sp, #0
 800c72a:	60f8      	str	r0, [r7, #12]
 800c72c:	60b9      	str	r1, [r7, #8]
 800c72e:	4611      	mov	r1, r2
 800c730:	461a      	mov	r2, r3
 800c732:	460b      	mov	r3, r1
 800c734:	80fb      	strh	r3, [r7, #6]
 800c736:	4613      	mov	r3, r2
 800c738:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c73a:	2300      	movs	r3, #0
 800c73c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c73e:	2300      	movs	r3, #0
 800c740:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d108      	bne.n	800c75a <pbuf_copy_partial+0x36>
 800c748:	4b2b      	ldr	r3, [pc, #172]	; (800c7f8 <pbuf_copy_partial+0xd4>)
 800c74a:	f240 420a 	movw	r2, #1034	; 0x40a
 800c74e:	492b      	ldr	r1, [pc, #172]	; (800c7fc <pbuf_copy_partial+0xd8>)
 800c750:	482b      	ldr	r0, [pc, #172]	; (800c800 <pbuf_copy_partial+0xdc>)
 800c752:	f00b fb2b 	bl	8017dac <iprintf>
 800c756:	2300      	movs	r3, #0
 800c758:	e04a      	b.n	800c7f0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d108      	bne.n	800c772 <pbuf_copy_partial+0x4e>
 800c760:	4b25      	ldr	r3, [pc, #148]	; (800c7f8 <pbuf_copy_partial+0xd4>)
 800c762:	f240 420b 	movw	r2, #1035	; 0x40b
 800c766:	4927      	ldr	r1, [pc, #156]	; (800c804 <pbuf_copy_partial+0xe0>)
 800c768:	4825      	ldr	r0, [pc, #148]	; (800c800 <pbuf_copy_partial+0xdc>)
 800c76a:	f00b fb1f 	bl	8017dac <iprintf>
 800c76e:	2300      	movs	r3, #0
 800c770:	e03e      	b.n	800c7f0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	61fb      	str	r3, [r7, #28]
 800c776:	e034      	b.n	800c7e2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c778:	88bb      	ldrh	r3, [r7, #4]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00a      	beq.n	800c794 <pbuf_copy_partial+0x70>
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	895b      	ldrh	r3, [r3, #10]
 800c782:	88ba      	ldrh	r2, [r7, #4]
 800c784:	429a      	cmp	r2, r3
 800c786:	d305      	bcc.n	800c794 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c788:	69fb      	ldr	r3, [r7, #28]
 800c78a:	895b      	ldrh	r3, [r3, #10]
 800c78c:	88ba      	ldrh	r2, [r7, #4]
 800c78e:	1ad3      	subs	r3, r2, r3
 800c790:	80bb      	strh	r3, [r7, #4]
 800c792:	e023      	b.n	800c7dc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	895a      	ldrh	r2, [r3, #10]
 800c798:	88bb      	ldrh	r3, [r7, #4]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c79e:	8b3a      	ldrh	r2, [r7, #24]
 800c7a0:	88fb      	ldrh	r3, [r7, #6]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d901      	bls.n	800c7aa <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c7a6:	88fb      	ldrh	r3, [r7, #6]
 800c7a8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c7aa:	8b7b      	ldrh	r3, [r7, #26]
 800c7ac:	68ba      	ldr	r2, [r7, #8]
 800c7ae:	18d0      	adds	r0, r2, r3
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	88bb      	ldrh	r3, [r7, #4]
 800c7b6:	4413      	add	r3, r2
 800c7b8:	8b3a      	ldrh	r2, [r7, #24]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	f00b fbf4 	bl	8017fa8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c7c0:	8afa      	ldrh	r2, [r7, #22]
 800c7c2:	8b3b      	ldrh	r3, [r7, #24]
 800c7c4:	4413      	add	r3, r2
 800c7c6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c7c8:	8b7a      	ldrh	r2, [r7, #26]
 800c7ca:	8b3b      	ldrh	r3, [r7, #24]
 800c7cc:	4413      	add	r3, r2
 800c7ce:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c7d0:	88fa      	ldrh	r2, [r7, #6]
 800c7d2:	8b3b      	ldrh	r3, [r7, #24]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	61fb      	str	r3, [r7, #28]
 800c7e2:	88fb      	ldrh	r3, [r7, #6]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <pbuf_copy_partial+0xca>
 800c7e8:	69fb      	ldr	r3, [r7, #28]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d1c4      	bne.n	800c778 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c7ee:	8afb      	ldrh	r3, [r7, #22]
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3720      	adds	r7, #32
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}
 800c7f8:	080196f4 	.word	0x080196f4
 800c7fc:	08019a3c 	.word	0x08019a3c
 800c800:	08019754 	.word	0x08019754
 800c804:	08019a5c 	.word	0x08019a5c

0800c808 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	4603      	mov	r3, r0
 800c810:	603a      	str	r2, [r7, #0]
 800c812:	71fb      	strb	r3, [r7, #7]
 800c814:	460b      	mov	r3, r1
 800c816:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	8919      	ldrh	r1, [r3, #8]
 800c81c:	88ba      	ldrh	r2, [r7, #4]
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff fa95 	bl	800bd50 <pbuf_alloc>
 800c826:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <pbuf_clone+0x2a>
    return NULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	e011      	b.n	800c856 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c832:	6839      	ldr	r1, [r7, #0]
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff fea3 	bl	800c580 <pbuf_copy>
 800c83a:	4603      	mov	r3, r0
 800c83c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c83e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d006      	beq.n	800c854 <pbuf_clone+0x4c>
 800c846:	4b06      	ldr	r3, [pc, #24]	; (800c860 <pbuf_clone+0x58>)
 800c848:	f240 5224 	movw	r2, #1316	; 0x524
 800c84c:	4905      	ldr	r1, [pc, #20]	; (800c864 <pbuf_clone+0x5c>)
 800c84e:	4806      	ldr	r0, [pc, #24]	; (800c868 <pbuf_clone+0x60>)
 800c850:	f00b faac 	bl	8017dac <iprintf>
  return q;
 800c854:	68fb      	ldr	r3, [r7, #12]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3710      	adds	r7, #16
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	080196f4 	.word	0x080196f4
 800c864:	08019b68 	.word	0x08019b68
 800c868:	08019754 	.word	0x08019754

0800c86c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c870:	f00b f922 	bl	8017ab8 <rand>
 800c874:	4603      	mov	r3, r0
 800c876:	b29b      	uxth	r3, r3
 800c878:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c882:	b29a      	uxth	r2, r3
 800c884:	4b01      	ldr	r3, [pc, #4]	; (800c88c <tcp_init+0x20>)
 800c886:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c888:	bf00      	nop
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	20000034 	.word	0x20000034

0800c890 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b082      	sub	sp, #8
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	7d1b      	ldrb	r3, [r3, #20]
 800c89c:	2b01      	cmp	r3, #1
 800c89e:	d105      	bne.n	800c8ac <tcp_free+0x1c>
 800c8a0:	4b06      	ldr	r3, [pc, #24]	; (800c8bc <tcp_free+0x2c>)
 800c8a2:	22d4      	movs	r2, #212	; 0xd4
 800c8a4:	4906      	ldr	r1, [pc, #24]	; (800c8c0 <tcp_free+0x30>)
 800c8a6:	4807      	ldr	r0, [pc, #28]	; (800c8c4 <tcp_free+0x34>)
 800c8a8:	f00b fa80 	bl	8017dac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c8ac:	6879      	ldr	r1, [r7, #4]
 800c8ae:	2001      	movs	r0, #1
 800c8b0:	f7fe fe82 	bl	800b5b8 <memp_free>
}
 800c8b4:	bf00      	nop
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	08019bf4 	.word	0x08019bf4
 800c8c0:	08019c24 	.word	0x08019c24
 800c8c4:	08019c38 	.word	0x08019c38

0800c8c8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	7d1b      	ldrb	r3, [r3, #20]
 800c8d4:	2b01      	cmp	r3, #1
 800c8d6:	d105      	bne.n	800c8e4 <tcp_free_listen+0x1c>
 800c8d8:	4b06      	ldr	r3, [pc, #24]	; (800c8f4 <tcp_free_listen+0x2c>)
 800c8da:	22df      	movs	r2, #223	; 0xdf
 800c8dc:	4906      	ldr	r1, [pc, #24]	; (800c8f8 <tcp_free_listen+0x30>)
 800c8de:	4807      	ldr	r0, [pc, #28]	; (800c8fc <tcp_free_listen+0x34>)
 800c8e0:	f00b fa64 	bl	8017dac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c8e4:	6879      	ldr	r1, [r7, #4]
 800c8e6:	2002      	movs	r0, #2
 800c8e8:	f7fe fe66 	bl	800b5b8 <memp_free>
}
 800c8ec:	bf00      	nop
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	08019bf4 	.word	0x08019bf4
 800c8f8:	08019c60 	.word	0x08019c60
 800c8fc:	08019c38 	.word	0x08019c38

0800c900 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c904:	f001 f85c 	bl	800d9c0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c908:	4b07      	ldr	r3, [pc, #28]	; (800c928 <tcp_tmr+0x28>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	3301      	adds	r3, #1
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	4b05      	ldr	r3, [pc, #20]	; (800c928 <tcp_tmr+0x28>)
 800c912:	701a      	strb	r2, [r3, #0]
 800c914:	4b04      	ldr	r3, [pc, #16]	; (800c928 <tcp_tmr+0x28>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	f003 0301 	and.w	r3, r3, #1
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c920:	f000 fd0e 	bl	800d340 <tcp_slowtmr>
  }
}
 800c924:	bf00      	nop
 800c926:	bd80      	pop	{r7, pc}
 800c928:	2000ce4d 	.word	0x2000ce4d

0800c92c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]
 800c934:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d105      	bne.n	800c948 <tcp_remove_listener+0x1c>
 800c93c:	4b0d      	ldr	r3, [pc, #52]	; (800c974 <tcp_remove_listener+0x48>)
 800c93e:	22ff      	movs	r2, #255	; 0xff
 800c940:	490d      	ldr	r1, [pc, #52]	; (800c978 <tcp_remove_listener+0x4c>)
 800c942:	480e      	ldr	r0, [pc, #56]	; (800c97c <tcp_remove_listener+0x50>)
 800c944:	f00b fa32 	bl	8017dac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	60fb      	str	r3, [r7, #12]
 800c94c:	e00a      	b.n	800c964 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c952:	683a      	ldr	r2, [r7, #0]
 800c954:	429a      	cmp	r2, r3
 800c956:	d102      	bne.n	800c95e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2200      	movs	r2, #0
 800c95c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	68db      	ldr	r3, [r3, #12]
 800c962:	60fb      	str	r3, [r7, #12]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d1f1      	bne.n	800c94e <tcp_remove_listener+0x22>
    }
  }
}
 800c96a:	bf00      	nop
 800c96c:	bf00      	nop
 800c96e:	3710      	adds	r7, #16
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}
 800c974:	08019bf4 	.word	0x08019bf4
 800c978:	08019c7c 	.word	0x08019c7c
 800c97c:	08019c38 	.word	0x08019c38

0800c980 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b084      	sub	sp, #16
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d106      	bne.n	800c99c <tcp_listen_closed+0x1c>
 800c98e:	4b14      	ldr	r3, [pc, #80]	; (800c9e0 <tcp_listen_closed+0x60>)
 800c990:	f240 1211 	movw	r2, #273	; 0x111
 800c994:	4913      	ldr	r1, [pc, #76]	; (800c9e4 <tcp_listen_closed+0x64>)
 800c996:	4814      	ldr	r0, [pc, #80]	; (800c9e8 <tcp_listen_closed+0x68>)
 800c998:	f00b fa08 	bl	8017dac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	7d1b      	ldrb	r3, [r3, #20]
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d006      	beq.n	800c9b2 <tcp_listen_closed+0x32>
 800c9a4:	4b0e      	ldr	r3, [pc, #56]	; (800c9e0 <tcp_listen_closed+0x60>)
 800c9a6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c9aa:	4910      	ldr	r1, [pc, #64]	; (800c9ec <tcp_listen_closed+0x6c>)
 800c9ac:	480e      	ldr	r0, [pc, #56]	; (800c9e8 <tcp_listen_closed+0x68>)
 800c9ae:	f00b f9fd 	bl	8017dac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	e00b      	b.n	800c9d0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c9b8:	4a0d      	ldr	r2, [pc, #52]	; (800c9f0 <tcp_listen_closed+0x70>)
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6879      	ldr	r1, [r7, #4]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f7ff ffb1 	bl	800c92c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	60fb      	str	r3, [r7, #12]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	2b03      	cmp	r3, #3
 800c9d4:	d9f0      	bls.n	800c9b8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c9d6:	bf00      	nop
 800c9d8:	bf00      	nop
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	08019bf4 	.word	0x08019bf4
 800c9e4:	08019ca4 	.word	0x08019ca4
 800c9e8:	08019c38 	.word	0x08019c38
 800c9ec:	08019cb0 	.word	0x08019cb0
 800c9f0:	0801e620 	.word	0x0801e620

0800c9f4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c9f4:	b5b0      	push	{r4, r5, r7, lr}
 800c9f6:	b088      	sub	sp, #32
 800c9f8:	af04      	add	r7, sp, #16
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	460b      	mov	r3, r1
 800c9fe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d106      	bne.n	800ca14 <tcp_close_shutdown+0x20>
 800ca06:	4b63      	ldr	r3, [pc, #396]	; (800cb94 <tcp_close_shutdown+0x1a0>)
 800ca08:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800ca0c:	4962      	ldr	r1, [pc, #392]	; (800cb98 <tcp_close_shutdown+0x1a4>)
 800ca0e:	4863      	ldr	r0, [pc, #396]	; (800cb9c <tcp_close_shutdown+0x1a8>)
 800ca10:	f00b f9cc 	bl	8017dac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ca14:	78fb      	ldrb	r3, [r7, #3]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d066      	beq.n	800cae8 <tcp_close_shutdown+0xf4>
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	7d1b      	ldrb	r3, [r3, #20]
 800ca1e:	2b04      	cmp	r3, #4
 800ca20:	d003      	beq.n	800ca2a <tcp_close_shutdown+0x36>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	7d1b      	ldrb	r3, [r3, #20]
 800ca26:	2b07      	cmp	r3, #7
 800ca28:	d15e      	bne.n	800cae8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d104      	bne.n	800ca3c <tcp_close_shutdown+0x48>
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca36:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ca3a:	d055      	beq.n	800cae8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	8b5b      	ldrh	r3, [r3, #26]
 800ca40:	f003 0310 	and.w	r3, r3, #16
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d106      	bne.n	800ca56 <tcp_close_shutdown+0x62>
 800ca48:	4b52      	ldr	r3, [pc, #328]	; (800cb94 <tcp_close_shutdown+0x1a0>)
 800ca4a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ca4e:	4954      	ldr	r1, [pc, #336]	; (800cba0 <tcp_close_shutdown+0x1ac>)
 800ca50:	4852      	ldr	r0, [pc, #328]	; (800cb9c <tcp_close_shutdown+0x1a8>)
 800ca52:	f00b f9ab 	bl	8017dac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ca5e:	687d      	ldr	r5, [r7, #4]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3304      	adds	r3, #4
 800ca64:	687a      	ldr	r2, [r7, #4]
 800ca66:	8ad2      	ldrh	r2, [r2, #22]
 800ca68:	6879      	ldr	r1, [r7, #4]
 800ca6a:	8b09      	ldrh	r1, [r1, #24]
 800ca6c:	9102      	str	r1, [sp, #8]
 800ca6e:	9201      	str	r2, [sp, #4]
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	462b      	mov	r3, r5
 800ca74:	4622      	mov	r2, r4
 800ca76:	4601      	mov	r1, r0
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f005 fd8f 	bl	801259c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 fb6c 	bl	800e15c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ca84:	4b47      	ldr	r3, [pc, #284]	; (800cba4 <tcp_close_shutdown+0x1b0>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d105      	bne.n	800ca9a <tcp_close_shutdown+0xa6>
 800ca8e:	4b45      	ldr	r3, [pc, #276]	; (800cba4 <tcp_close_shutdown+0x1b0>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	68db      	ldr	r3, [r3, #12]
 800ca94:	4a43      	ldr	r2, [pc, #268]	; (800cba4 <tcp_close_shutdown+0x1b0>)
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	e013      	b.n	800cac2 <tcp_close_shutdown+0xce>
 800ca9a:	4b42      	ldr	r3, [pc, #264]	; (800cba4 <tcp_close_shutdown+0x1b0>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	60fb      	str	r3, [r7, #12]
 800caa0:	e00c      	b.n	800cabc <tcp_close_shutdown+0xc8>
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	68db      	ldr	r3, [r3, #12]
 800caa6:	687a      	ldr	r2, [r7, #4]
 800caa8:	429a      	cmp	r2, r3
 800caaa:	d104      	bne.n	800cab6 <tcp_close_shutdown+0xc2>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	68da      	ldr	r2, [r3, #12]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	60da      	str	r2, [r3, #12]
 800cab4:	e005      	b.n	800cac2 <tcp_close_shutdown+0xce>
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	68db      	ldr	r3, [r3, #12]
 800caba:	60fb      	str	r3, [r7, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d1ef      	bne.n	800caa2 <tcp_close_shutdown+0xae>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	60da      	str	r2, [r3, #12]
 800cac8:	4b37      	ldr	r3, [pc, #220]	; (800cba8 <tcp_close_shutdown+0x1b4>)
 800caca:	2201      	movs	r2, #1
 800cacc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cace:	4b37      	ldr	r3, [pc, #220]	; (800cbac <tcp_close_shutdown+0x1b8>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	687a      	ldr	r2, [r7, #4]
 800cad4:	429a      	cmp	r2, r3
 800cad6:	d102      	bne.n	800cade <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cad8:	f004 f804 	bl	8010ae4 <tcp_trigger_input_pcb_close>
 800cadc:	e002      	b.n	800cae4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff fed6 	bl	800c890 <tcp_free>
      }
      return ERR_OK;
 800cae4:	2300      	movs	r3, #0
 800cae6:	e050      	b.n	800cb8a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	7d1b      	ldrb	r3, [r3, #20]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d03b      	beq.n	800cb68 <tcp_close_shutdown+0x174>
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	dc44      	bgt.n	800cb7e <tcp_close_shutdown+0x18a>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <tcp_close_shutdown+0x10a>
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d02a      	beq.n	800cb52 <tcp_close_shutdown+0x15e>
 800cafc:	e03f      	b.n	800cb7e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	8adb      	ldrh	r3, [r3, #22]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d021      	beq.n	800cb4a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cb06:	4b2a      	ldr	r3, [pc, #168]	; (800cbb0 <tcp_close_shutdown+0x1bc>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d105      	bne.n	800cb1c <tcp_close_shutdown+0x128>
 800cb10:	4b27      	ldr	r3, [pc, #156]	; (800cbb0 <tcp_close_shutdown+0x1bc>)
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	4a26      	ldr	r2, [pc, #152]	; (800cbb0 <tcp_close_shutdown+0x1bc>)
 800cb18:	6013      	str	r3, [r2, #0]
 800cb1a:	e013      	b.n	800cb44 <tcp_close_shutdown+0x150>
 800cb1c:	4b24      	ldr	r3, [pc, #144]	; (800cbb0 <tcp_close_shutdown+0x1bc>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	60bb      	str	r3, [r7, #8]
 800cb22:	e00c      	b.n	800cb3e <tcp_close_shutdown+0x14a>
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	429a      	cmp	r2, r3
 800cb2c:	d104      	bne.n	800cb38 <tcp_close_shutdown+0x144>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	60da      	str	r2, [r3, #12]
 800cb36:	e005      	b.n	800cb44 <tcp_close_shutdown+0x150>
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	60bb      	str	r3, [r7, #8]
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1ef      	bne.n	800cb24 <tcp_close_shutdown+0x130>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f7ff fea0 	bl	800c890 <tcp_free>
      break;
 800cb50:	e01a      	b.n	800cb88 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff ff14 	bl	800c980 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cb58:	6879      	ldr	r1, [r7, #4]
 800cb5a:	4816      	ldr	r0, [pc, #88]	; (800cbb4 <tcp_close_shutdown+0x1c0>)
 800cb5c:	f001 fb4e 	bl	800e1fc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cb60:	6878      	ldr	r0, [r7, #4]
 800cb62:	f7ff feb1 	bl	800c8c8 <tcp_free_listen>
      break;
 800cb66:	e00f      	b.n	800cb88 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cb68:	6879      	ldr	r1, [r7, #4]
 800cb6a:	480e      	ldr	r0, [pc, #56]	; (800cba4 <tcp_close_shutdown+0x1b0>)
 800cb6c:	f001 fb46 	bl	800e1fc <tcp_pcb_remove>
 800cb70:	4b0d      	ldr	r3, [pc, #52]	; (800cba8 <tcp_close_shutdown+0x1b4>)
 800cb72:	2201      	movs	r2, #1
 800cb74:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fe8a 	bl	800c890 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cb7c:	e004      	b.n	800cb88 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f000 f81a 	bl	800cbb8 <tcp_close_shutdown_fin>
 800cb84:	4603      	mov	r3, r0
 800cb86:	e000      	b.n	800cb8a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bdb0      	pop	{r4, r5, r7, pc}
 800cb92:	bf00      	nop
 800cb94:	08019bf4 	.word	0x08019bf4
 800cb98:	08019cc8 	.word	0x08019cc8
 800cb9c:	08019c38 	.word	0x08019c38
 800cba0:	08019ce8 	.word	0x08019ce8
 800cba4:	2000ce44 	.word	0x2000ce44
 800cba8:	2000ce4c 	.word	0x2000ce4c
 800cbac:	2000ce84 	.word	0x2000ce84
 800cbb0:	2000ce3c 	.word	0x2000ce3c
 800cbb4:	2000ce40 	.word	0x2000ce40

0800cbb8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b084      	sub	sp, #16
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d106      	bne.n	800cbd4 <tcp_close_shutdown_fin+0x1c>
 800cbc6:	4b2e      	ldr	r3, [pc, #184]	; (800cc80 <tcp_close_shutdown_fin+0xc8>)
 800cbc8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cbcc:	492d      	ldr	r1, [pc, #180]	; (800cc84 <tcp_close_shutdown_fin+0xcc>)
 800cbce:	482e      	ldr	r0, [pc, #184]	; (800cc88 <tcp_close_shutdown_fin+0xd0>)
 800cbd0:	f00b f8ec 	bl	8017dac <iprintf>

  switch (pcb->state) {
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	7d1b      	ldrb	r3, [r3, #20]
 800cbd8:	2b07      	cmp	r3, #7
 800cbda:	d020      	beq.n	800cc1e <tcp_close_shutdown_fin+0x66>
 800cbdc:	2b07      	cmp	r3, #7
 800cbde:	dc2b      	bgt.n	800cc38 <tcp_close_shutdown_fin+0x80>
 800cbe0:	2b03      	cmp	r3, #3
 800cbe2:	d002      	beq.n	800cbea <tcp_close_shutdown_fin+0x32>
 800cbe4:	2b04      	cmp	r3, #4
 800cbe6:	d00d      	beq.n	800cc04 <tcp_close_shutdown_fin+0x4c>
 800cbe8:	e026      	b.n	800cc38 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f004 fde4 	bl	80117b8 <tcp_send_fin>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d11f      	bne.n	800cc3c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2205      	movs	r2, #5
 800cc00:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc02:	e01b      	b.n	800cc3c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f004 fdd7 	bl	80117b8 <tcp_send_fin>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d114      	bne.n	800cc40 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2205      	movs	r2, #5
 800cc1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc1c:	e010      	b.n	800cc40 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f004 fdca 	bl	80117b8 <tcp_send_fin>
 800cc24:	4603      	mov	r3, r0
 800cc26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d109      	bne.n	800cc44 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2209      	movs	r2, #9
 800cc34:	751a      	strb	r2, [r3, #20]
      }
      break;
 800cc36:	e005      	b.n	800cc44 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	e01c      	b.n	800cc76 <tcp_close_shutdown_fin+0xbe>
      break;
 800cc3c:	bf00      	nop
 800cc3e:	e002      	b.n	800cc46 <tcp_close_shutdown_fin+0x8e>
      break;
 800cc40:	bf00      	nop
 800cc42:	e000      	b.n	800cc46 <tcp_close_shutdown_fin+0x8e>
      break;
 800cc44:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cc46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d103      	bne.n	800cc56 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f004 fef0 	bl	8011a34 <tcp_output>
 800cc54:	e00d      	b.n	800cc72 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800cc56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5e:	d108      	bne.n	800cc72 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	8b5b      	ldrh	r3, [r3, #26]
 800cc64:	f043 0308 	orr.w	r3, r3, #8
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	e001      	b.n	800cc76 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cc72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cc76:	4618      	mov	r0, r3
 800cc78:	3710      	adds	r7, #16
 800cc7a:	46bd      	mov	sp, r7
 800cc7c:	bd80      	pop	{r7, pc}
 800cc7e:	bf00      	nop
 800cc80:	08019bf4 	.word	0x08019bf4
 800cc84:	08019ca4 	.word	0x08019ca4
 800cc88:	08019c38 	.word	0x08019c38

0800cc8c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <tcp_close+0x22>
 800cc9a:	4b0f      	ldr	r3, [pc, #60]	; (800ccd8 <tcp_close+0x4c>)
 800cc9c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cca0:	490e      	ldr	r1, [pc, #56]	; (800ccdc <tcp_close+0x50>)
 800cca2:	480f      	ldr	r0, [pc, #60]	; (800cce0 <tcp_close+0x54>)
 800cca4:	f00b f882 	bl	8017dac <iprintf>
 800cca8:	f06f 030f 	mvn.w	r3, #15
 800ccac:	e00f      	b.n	800ccce <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	7d1b      	ldrb	r3, [r3, #20]
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d006      	beq.n	800ccc4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	8b5b      	ldrh	r3, [r3, #26]
 800ccba:	f043 0310 	orr.w	r3, r3, #16
 800ccbe:	b29a      	uxth	r2, r3
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800ccc4:	2101      	movs	r1, #1
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff fe94 	bl	800c9f4 <tcp_close_shutdown>
 800cccc:	4603      	mov	r3, r0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3708      	adds	r7, #8
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	08019bf4 	.word	0x08019bf4
 800ccdc:	08019d04 	.word	0x08019d04
 800cce0:	08019c38 	.word	0x08019c38

0800cce4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08e      	sub	sp, #56	; 0x38
 800cce8:	af04      	add	r7, sp, #16
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d107      	bne.n	800cd04 <tcp_abandon+0x20>
 800ccf4:	4b52      	ldr	r3, [pc, #328]	; (800ce40 <tcp_abandon+0x15c>)
 800ccf6:	f240 223d 	movw	r2, #573	; 0x23d
 800ccfa:	4952      	ldr	r1, [pc, #328]	; (800ce44 <tcp_abandon+0x160>)
 800ccfc:	4852      	ldr	r0, [pc, #328]	; (800ce48 <tcp_abandon+0x164>)
 800ccfe:	f00b f855 	bl	8017dac <iprintf>
 800cd02:	e099      	b.n	800ce38 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7d1b      	ldrb	r3, [r3, #20]
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d106      	bne.n	800cd1a <tcp_abandon+0x36>
 800cd0c:	4b4c      	ldr	r3, [pc, #304]	; (800ce40 <tcp_abandon+0x15c>)
 800cd0e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cd12:	494e      	ldr	r1, [pc, #312]	; (800ce4c <tcp_abandon+0x168>)
 800cd14:	484c      	ldr	r0, [pc, #304]	; (800ce48 <tcp_abandon+0x164>)
 800cd16:	f00b f849 	bl	8017dac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	7d1b      	ldrb	r3, [r3, #20]
 800cd1e:	2b0a      	cmp	r3, #10
 800cd20:	d107      	bne.n	800cd32 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cd22:	6879      	ldr	r1, [r7, #4]
 800cd24:	484a      	ldr	r0, [pc, #296]	; (800ce50 <tcp_abandon+0x16c>)
 800cd26:	f001 fa69 	bl	800e1fc <tcp_pcb_remove>
    tcp_free(pcb);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f7ff fdb0 	bl	800c890 <tcp_free>
 800cd30:	e082      	b.n	800ce38 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cd36:	2300      	movs	r3, #0
 800cd38:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd3e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd44:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd4c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	691b      	ldr	r3, [r3, #16]
 800cd52:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	7d1b      	ldrb	r3, [r3, #20]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d126      	bne.n	800cdaa <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	8adb      	ldrh	r3, [r3, #22]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d02e      	beq.n	800cdc2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd64:	4b3b      	ldr	r3, [pc, #236]	; (800ce54 <tcp_abandon+0x170>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d105      	bne.n	800cd7a <tcp_abandon+0x96>
 800cd6e:	4b39      	ldr	r3, [pc, #228]	; (800ce54 <tcp_abandon+0x170>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68db      	ldr	r3, [r3, #12]
 800cd74:	4a37      	ldr	r2, [pc, #220]	; (800ce54 <tcp_abandon+0x170>)
 800cd76:	6013      	str	r3, [r2, #0]
 800cd78:	e013      	b.n	800cda2 <tcp_abandon+0xbe>
 800cd7a:	4b36      	ldr	r3, [pc, #216]	; (800ce54 <tcp_abandon+0x170>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	61fb      	str	r3, [r7, #28]
 800cd80:	e00c      	b.n	800cd9c <tcp_abandon+0xb8>
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d104      	bne.n	800cd96 <tcp_abandon+0xb2>
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	68da      	ldr	r2, [r3, #12]
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	60da      	str	r2, [r3, #12]
 800cd94:	e005      	b.n	800cda2 <tcp_abandon+0xbe>
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	68db      	ldr	r3, [r3, #12]
 800cd9a:	61fb      	str	r3, [r7, #28]
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d1ef      	bne.n	800cd82 <tcp_abandon+0x9e>
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	60da      	str	r2, [r3, #12]
 800cda8:	e00b      	b.n	800cdc2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	8adb      	ldrh	r3, [r3, #22]
 800cdb2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	4828      	ldr	r0, [pc, #160]	; (800ce58 <tcp_abandon+0x174>)
 800cdb8:	f001 fa20 	bl	800e1fc <tcp_pcb_remove>
 800cdbc:	4b27      	ldr	r3, [pc, #156]	; (800ce5c <tcp_abandon+0x178>)
 800cdbe:	2201      	movs	r2, #1
 800cdc0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d004      	beq.n	800cdd4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdce:	4618      	mov	r0, r3
 800cdd0:	f000 fed6 	bl	800db80 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cde0:	4618      	mov	r0, r3
 800cde2:	f000 fecd 	bl	800db80 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d004      	beq.n	800cdf8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 fec4 	bl	800db80 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00e      	beq.n	800ce1c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	3304      	adds	r3, #4
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	8b12      	ldrh	r2, [r2, #24]
 800ce08:	9202      	str	r2, [sp, #8]
 800ce0a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ce0c:	9201      	str	r2, [sp, #4]
 800ce0e:	9300      	str	r3, [sp, #0]
 800ce10:	460b      	mov	r3, r1
 800ce12:	697a      	ldr	r2, [r7, #20]
 800ce14:	69b9      	ldr	r1, [r7, #24]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f005 fbc0 	bl	801259c <tcp_rst>
    }
    last_state = pcb->state;
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	7d1b      	ldrb	r3, [r3, #20]
 800ce20:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f7ff fd34 	bl	800c890 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d004      	beq.n	800ce38 <tcp_abandon+0x154>
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	f06f 010c 	mvn.w	r1, #12
 800ce34:	68f8      	ldr	r0, [r7, #12]
 800ce36:	4798      	blx	r3
  }
}
 800ce38:	3728      	adds	r7, #40	; 0x28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	08019bf4 	.word	0x08019bf4
 800ce44:	08019d38 	.word	0x08019d38
 800ce48:	08019c38 	.word	0x08019c38
 800ce4c:	08019d54 	.word	0x08019d54
 800ce50:	2000ce48 	.word	0x2000ce48
 800ce54:	2000ce3c 	.word	0x2000ce3c
 800ce58:	2000ce44 	.word	0x2000ce44
 800ce5c:	2000ce4c 	.word	0x2000ce4c

0800ce60 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800ce68:	2101      	movs	r1, #1
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f7ff ff3a 	bl	800cce4 <tcp_abandon>
}
 800ce70:	bf00      	nop
 800ce72:	3708      	adds	r7, #8
 800ce74:	46bd      	mov	sp, r7
 800ce76:	bd80      	pop	{r7, pc}

0800ce78 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b088      	sub	sp, #32
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	4613      	mov	r3, r2
 800ce84:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800ce86:	2304      	movs	r3, #4
 800ce88:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800ce90:	4b3e      	ldr	r3, [pc, #248]	; (800cf8c <tcp_bind+0x114>)
 800ce92:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d109      	bne.n	800ceae <tcp_bind+0x36>
 800ce9a:	4b3d      	ldr	r3, [pc, #244]	; (800cf90 <tcp_bind+0x118>)
 800ce9c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800cea0:	493c      	ldr	r1, [pc, #240]	; (800cf94 <tcp_bind+0x11c>)
 800cea2:	483d      	ldr	r0, [pc, #244]	; (800cf98 <tcp_bind+0x120>)
 800cea4:	f00a ff82 	bl	8017dac <iprintf>
 800cea8:	f06f 030f 	mvn.w	r3, #15
 800ceac:	e06a      	b.n	800cf84 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	7d1b      	ldrb	r3, [r3, #20]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d009      	beq.n	800ceca <tcp_bind+0x52>
 800ceb6:	4b36      	ldr	r3, [pc, #216]	; (800cf90 <tcp_bind+0x118>)
 800ceb8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800cebc:	4937      	ldr	r1, [pc, #220]	; (800cf9c <tcp_bind+0x124>)
 800cebe:	4836      	ldr	r0, [pc, #216]	; (800cf98 <tcp_bind+0x120>)
 800cec0:	f00a ff74 	bl	8017dac <iprintf>
 800cec4:	f06f 0305 	mvn.w	r3, #5
 800cec8:	e05c      	b.n	800cf84 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800ceca:	88fb      	ldrh	r3, [r7, #6]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d109      	bne.n	800cee4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800ced0:	f000 f9f0 	bl	800d2b4 <tcp_new_port>
 800ced4:	4603      	mov	r3, r0
 800ced6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800ced8:	88fb      	ldrh	r3, [r7, #6]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d135      	bne.n	800cf4a <tcp_bind+0xd2>
      return ERR_BUF;
 800cede:	f06f 0301 	mvn.w	r3, #1
 800cee2:	e04f      	b.n	800cf84 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800cee4:	2300      	movs	r3, #0
 800cee6:	61fb      	str	r3, [r7, #28]
 800cee8:	e02b      	b.n	800cf42 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ceea:	4a2d      	ldr	r2, [pc, #180]	; (800cfa0 <tcp_bind+0x128>)
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	61bb      	str	r3, [r7, #24]
 800cef6:	e01e      	b.n	800cf36 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800cef8:	69bb      	ldr	r3, [r7, #24]
 800cefa:	8adb      	ldrh	r3, [r3, #22]
 800cefc:	88fa      	ldrh	r2, [r7, #6]
 800cefe:	429a      	cmp	r2, r3
 800cf00:	d116      	bne.n	800cf30 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800cf02:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d010      	beq.n	800cf2a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800cf08:	69bb      	ldr	r3, [r7, #24]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00c      	beq.n	800cf2a <tcp_bind+0xb2>
 800cf10:	68bb      	ldr	r3, [r7, #8]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d009      	beq.n	800cf2a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d005      	beq.n	800cf2a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	681a      	ldr	r2, [r3, #0]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d102      	bne.n	800cf30 <tcp_bind+0xb8>
              return ERR_USE;
 800cf2a:	f06f 0307 	mvn.w	r3, #7
 800cf2e:	e029      	b.n	800cf84 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	68db      	ldr	r3, [r3, #12]
 800cf34:	61bb      	str	r3, [r7, #24]
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1dd      	bne.n	800cef8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800cf3c:	69fb      	ldr	r3, [r7, #28]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	61fb      	str	r3, [r7, #28]
 800cf42:	69fa      	ldr	r2, [r7, #28]
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	dbcf      	blt.n	800ceea <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00c      	beq.n	800cf6a <tcp_bind+0xf2>
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d008      	beq.n	800cf6a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d002      	beq.n	800cf64 <tcp_bind+0xec>
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	e000      	b.n	800cf66 <tcp_bind+0xee>
 800cf64:	2300      	movs	r3, #0
 800cf66:	68fa      	ldr	r2, [r7, #12]
 800cf68:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	88fa      	ldrh	r2, [r7, #6]
 800cf6e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800cf70:	4b0c      	ldr	r3, [pc, #48]	; (800cfa4 <tcp_bind+0x12c>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	60da      	str	r2, [r3, #12]
 800cf78:	4a0a      	ldr	r2, [pc, #40]	; (800cfa4 <tcp_bind+0x12c>)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	6013      	str	r3, [r2, #0]
 800cf7e:	f005 fccf 	bl	8012920 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3720      	adds	r7, #32
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}
 800cf8c:	0801e658 	.word	0x0801e658
 800cf90:	08019bf4 	.word	0x08019bf4
 800cf94:	08019d88 	.word	0x08019d88
 800cf98:	08019c38 	.word	0x08019c38
 800cf9c:	08019da0 	.word	0x08019da0
 800cfa0:	0801e620 	.word	0x0801e620
 800cfa4:	2000ce3c 	.word	0x2000ce3c

0800cfa8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b084      	sub	sp, #16
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <tcp_accept_null+0x22>
 800cfbc:	4b07      	ldr	r3, [pc, #28]	; (800cfdc <tcp_accept_null+0x34>)
 800cfbe:	f240 320f 	movw	r2, #783	; 0x30f
 800cfc2:	4907      	ldr	r1, [pc, #28]	; (800cfe0 <tcp_accept_null+0x38>)
 800cfc4:	4807      	ldr	r0, [pc, #28]	; (800cfe4 <tcp_accept_null+0x3c>)
 800cfc6:	f00a fef1 	bl	8017dac <iprintf>

  tcp_abort(pcb);
 800cfca:	68b8      	ldr	r0, [r7, #8]
 800cfcc:	f7ff ff48 	bl	800ce60 <tcp_abort>

  return ERR_ABRT;
 800cfd0:	f06f 030c 	mvn.w	r3, #12
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	08019bf4 	.word	0x08019bf4
 800cfe0:	08019dc8 	.word	0x08019dc8
 800cfe4:	08019c38 	.word	0x08019c38

0800cfe8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	2200      	movs	r2, #0
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 f806 	bl	800d00c <tcp_listen_with_backlog_and_err>
 800d000:	4603      	mov	r3, r0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3708      	adds	r7, #8
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b088      	sub	sp, #32
 800d010:	af00      	add	r7, sp, #0
 800d012:	60f8      	str	r0, [r7, #12]
 800d014:	460b      	mov	r3, r1
 800d016:	607a      	str	r2, [r7, #4]
 800d018:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d01a:	2300      	movs	r3, #0
 800d01c:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d109      	bne.n	800d038 <tcp_listen_with_backlog_and_err+0x2c>
 800d024:	4b47      	ldr	r3, [pc, #284]	; (800d144 <tcp_listen_with_backlog_and_err+0x138>)
 800d026:	f240 3259 	movw	r2, #857	; 0x359
 800d02a:	4947      	ldr	r1, [pc, #284]	; (800d148 <tcp_listen_with_backlog_and_err+0x13c>)
 800d02c:	4847      	ldr	r0, [pc, #284]	; (800d14c <tcp_listen_with_backlog_and_err+0x140>)
 800d02e:	f00a febd 	bl	8017dac <iprintf>
 800d032:	23f0      	movs	r3, #240	; 0xf0
 800d034:	76fb      	strb	r3, [r7, #27]
 800d036:	e079      	b.n	800d12c <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	7d1b      	ldrb	r3, [r3, #20]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d009      	beq.n	800d054 <tcp_listen_with_backlog_and_err+0x48>
 800d040:	4b40      	ldr	r3, [pc, #256]	; (800d144 <tcp_listen_with_backlog_and_err+0x138>)
 800d042:	f240 325a 	movw	r2, #858	; 0x35a
 800d046:	4942      	ldr	r1, [pc, #264]	; (800d150 <tcp_listen_with_backlog_and_err+0x144>)
 800d048:	4840      	ldr	r0, [pc, #256]	; (800d14c <tcp_listen_with_backlog_and_err+0x140>)
 800d04a:	f00a feaf 	bl	8017dac <iprintf>
 800d04e:	23f1      	movs	r3, #241	; 0xf1
 800d050:	76fb      	strb	r3, [r7, #27]
 800d052:	e06b      	b.n	800d12c <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	7d1b      	ldrb	r3, [r3, #20]
 800d058:	2b01      	cmp	r3, #1
 800d05a:	d104      	bne.n	800d066 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d060:	23f7      	movs	r3, #247	; 0xf7
 800d062:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d064:	e062      	b.n	800d12c <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d066:	2002      	movs	r0, #2
 800d068:	f7fe fa30 	bl	800b4cc <memp_malloc>
 800d06c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800d074:	23ff      	movs	r3, #255	; 0xff
 800d076:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d078:	e058      	b.n	800d12c <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	691a      	ldr	r2, [r3, #16]
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	8ada      	ldrh	r2, [r3, #22]
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	2201      	movs	r2, #1
 800d08e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	7d5a      	ldrb	r2, [r3, #21]
 800d094:	69fb      	ldr	r3, [r7, #28]
 800d096:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	7a5a      	ldrb	r2, [r3, #9]
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d0a0:	69fb      	ldr	r3, [r7, #28]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	7ada      	ldrb	r2, [r3, #11]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	7a9a      	ldrb	r2, [r3, #10]
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	8adb      	ldrh	r3, [r3, #22]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d021      	beq.n	800d10a <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d0c6:	4b23      	ldr	r3, [pc, #140]	; (800d154 <tcp_listen_with_backlog_and_err+0x148>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d105      	bne.n	800d0dc <tcp_listen_with_backlog_and_err+0xd0>
 800d0d0:	4b20      	ldr	r3, [pc, #128]	; (800d154 <tcp_listen_with_backlog_and_err+0x148>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68db      	ldr	r3, [r3, #12]
 800d0d6:	4a1f      	ldr	r2, [pc, #124]	; (800d154 <tcp_listen_with_backlog_and_err+0x148>)
 800d0d8:	6013      	str	r3, [r2, #0]
 800d0da:	e013      	b.n	800d104 <tcp_listen_with_backlog_and_err+0xf8>
 800d0dc:	4b1d      	ldr	r3, [pc, #116]	; (800d154 <tcp_listen_with_backlog_and_err+0x148>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	617b      	str	r3, [r7, #20]
 800d0e2:	e00c      	b.n	800d0fe <tcp_listen_with_backlog_and_err+0xf2>
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	68db      	ldr	r3, [r3, #12]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d104      	bne.n	800d0f8 <tcp_listen_with_backlog_and_err+0xec>
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	68da      	ldr	r2, [r3, #12]
 800d0f2:	697b      	ldr	r3, [r7, #20]
 800d0f4:	60da      	str	r2, [r3, #12]
 800d0f6:	e005      	b.n	800d104 <tcp_listen_with_backlog_and_err+0xf8>
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	617b      	str	r3, [r7, #20]
 800d0fe:	697b      	ldr	r3, [r7, #20]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d1ef      	bne.n	800d0e4 <tcp_listen_with_backlog_and_err+0xd8>
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2200      	movs	r2, #0
 800d108:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f7ff fbc0 	bl	800c890 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	4a11      	ldr	r2, [pc, #68]	; (800d158 <tcp_listen_with_backlog_and_err+0x14c>)
 800d114:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d116:	4b11      	ldr	r3, [pc, #68]	; (800d15c <tcp_listen_with_backlog_and_err+0x150>)
 800d118:	681a      	ldr	r2, [r3, #0]
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	60da      	str	r2, [r3, #12]
 800d11e:	4a0f      	ldr	r2, [pc, #60]	; (800d15c <tcp_listen_with_backlog_and_err+0x150>)
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	6013      	str	r3, [r2, #0]
 800d124:	f005 fbfc 	bl	8012920 <tcp_timer_needed>
  res = ERR_OK;
 800d128:	2300      	movs	r3, #0
 800d12a:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d002      	beq.n	800d138 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	7efa      	ldrb	r2, [r7, #27]
 800d136:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d138:	69fb      	ldr	r3, [r7, #28]
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3720      	adds	r7, #32
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	08019bf4 	.word	0x08019bf4
 800d148:	08019de8 	.word	0x08019de8
 800d14c:	08019c38 	.word	0x08019c38
 800d150:	08019e18 	.word	0x08019e18
 800d154:	2000ce3c 	.word	0x2000ce3c
 800d158:	0800cfa9 	.word	0x0800cfa9
 800d15c:	2000ce40 	.word	0x2000ce40

0800d160 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b084      	sub	sp, #16
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d106      	bne.n	800d17c <tcp_update_rcv_ann_wnd+0x1c>
 800d16e:	4b25      	ldr	r3, [pc, #148]	; (800d204 <tcp_update_rcv_ann_wnd+0xa4>)
 800d170:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d174:	4924      	ldr	r1, [pc, #144]	; (800d208 <tcp_update_rcv_ann_wnd+0xa8>)
 800d176:	4825      	ldr	r0, [pc, #148]	; (800d20c <tcp_update_rcv_ann_wnd+0xac>)
 800d178:	f00a fe18 	bl	8017dac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d184:	4413      	add	r3, r2
 800d186:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d190:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d194:	bf28      	it	cs
 800d196:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d19a:	b292      	uxth	r2, r2
 800d19c:	4413      	add	r3, r2
 800d19e:	68fa      	ldr	r2, [r7, #12]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	db08      	blt.n	800d1b8 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	1ad3      	subs	r3, r2, r3
 800d1b6:	e020      	b.n	800d1fa <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	1ad3      	subs	r3, r2, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	dd03      	ble.n	800d1ce <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d1cc:	e014      	b.n	800d1f8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d1da:	68bb      	ldr	r3, [r7, #8]
 800d1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1e0:	d306      	bcc.n	800d1f0 <tcp_update_rcv_ann_wnd+0x90>
 800d1e2:	4b08      	ldr	r3, [pc, #32]	; (800d204 <tcp_update_rcv_ann_wnd+0xa4>)
 800d1e4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d1e8:	4909      	ldr	r1, [pc, #36]	; (800d210 <tcp_update_rcv_ann_wnd+0xb0>)
 800d1ea:	4808      	ldr	r0, [pc, #32]	; (800d20c <tcp_update_rcv_ann_wnd+0xac>)
 800d1ec:	f00a fdde 	bl	8017dac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	b29a      	uxth	r2, r3
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d1f8:	2300      	movs	r3, #0
  }
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
 800d202:	bf00      	nop
 800d204:	08019bf4 	.word	0x08019bf4
 800d208:	08019e50 	.word	0x08019e50
 800d20c:	08019c38 	.word	0x08019c38
 800d210:	08019e74 	.word	0x08019e74

0800d214 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	6078      	str	r0, [r7, #4]
 800d21c:	460b      	mov	r3, r1
 800d21e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d107      	bne.n	800d236 <tcp_recved+0x22>
 800d226:	4b1f      	ldr	r3, [pc, #124]	; (800d2a4 <tcp_recved+0x90>)
 800d228:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d22c:	491e      	ldr	r1, [pc, #120]	; (800d2a8 <tcp_recved+0x94>)
 800d22e:	481f      	ldr	r0, [pc, #124]	; (800d2ac <tcp_recved+0x98>)
 800d230:	f00a fdbc 	bl	8017dac <iprintf>
 800d234:	e032      	b.n	800d29c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	7d1b      	ldrb	r3, [r3, #20]
 800d23a:	2b01      	cmp	r3, #1
 800d23c:	d106      	bne.n	800d24c <tcp_recved+0x38>
 800d23e:	4b19      	ldr	r3, [pc, #100]	; (800d2a4 <tcp_recved+0x90>)
 800d240:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d244:	491a      	ldr	r1, [pc, #104]	; (800d2b0 <tcp_recved+0x9c>)
 800d246:	4819      	ldr	r0, [pc, #100]	; (800d2ac <tcp_recved+0x98>)
 800d248:	f00a fdb0 	bl	8017dac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d250:	887b      	ldrh	r3, [r7, #2]
 800d252:	4413      	add	r3, r2
 800d254:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d256:	89fb      	ldrh	r3, [r7, #14]
 800d258:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d25c:	d804      	bhi.n	800d268 <tcp_recved+0x54>
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d262:	89fa      	ldrh	r2, [r7, #14]
 800d264:	429a      	cmp	r2, r3
 800d266:	d204      	bcs.n	800d272 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d26e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d270:	e002      	b.n	800d278 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	89fa      	ldrh	r2, [r7, #14]
 800d276:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff ff71 	bl	800d160 <tcp_update_rcv_ann_wnd>
 800d27e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d286:	d309      	bcc.n	800d29c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	8b5b      	ldrh	r3, [r3, #26]
 800d28c:	f043 0302 	orr.w	r3, r3, #2
 800d290:	b29a      	uxth	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f004 fbcc 	bl	8011a34 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop
 800d2a4:	08019bf4 	.word	0x08019bf4
 800d2a8:	08019e90 	.word	0x08019e90
 800d2ac:	08019c38 	.word	0x08019c38
 800d2b0:	08019ea8 	.word	0x08019ea8

0800d2b4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d2be:	4b1e      	ldr	r3, [pc, #120]	; (800d338 <tcp_new_port+0x84>)
 800d2c0:	881b      	ldrh	r3, [r3, #0]
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	b29a      	uxth	r2, r3
 800d2c6:	4b1c      	ldr	r3, [pc, #112]	; (800d338 <tcp_new_port+0x84>)
 800d2c8:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d2ca:	4b1b      	ldr	r3, [pc, #108]	; (800d338 <tcp_new_port+0x84>)
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d103      	bne.n	800d2de <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d2d6:	4b18      	ldr	r3, [pc, #96]	; (800d338 <tcp_new_port+0x84>)
 800d2d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d2dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d2de:	2300      	movs	r3, #0
 800d2e0:	71fb      	strb	r3, [r7, #7]
 800d2e2:	e01e      	b.n	800d322 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d2e4:	79fb      	ldrb	r3, [r7, #7]
 800d2e6:	4a15      	ldr	r2, [pc, #84]	; (800d33c <tcp_new_port+0x88>)
 800d2e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	603b      	str	r3, [r7, #0]
 800d2f0:	e011      	b.n	800d316 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	8ada      	ldrh	r2, [r3, #22]
 800d2f6:	4b10      	ldr	r3, [pc, #64]	; (800d338 <tcp_new_port+0x84>)
 800d2f8:	881b      	ldrh	r3, [r3, #0]
 800d2fa:	429a      	cmp	r2, r3
 800d2fc:	d108      	bne.n	800d310 <tcp_new_port+0x5c>
        n++;
 800d2fe:	88bb      	ldrh	r3, [r7, #4]
 800d300:	3301      	adds	r3, #1
 800d302:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d304:	88bb      	ldrh	r3, [r7, #4]
 800d306:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d30a:	d3d8      	bcc.n	800d2be <tcp_new_port+0xa>
          return 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	e00d      	b.n	800d32c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	603b      	str	r3, [r7, #0]
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d1ea      	bne.n	800d2f2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d31c:	79fb      	ldrb	r3, [r7, #7]
 800d31e:	3301      	adds	r3, #1
 800d320:	71fb      	strb	r3, [r7, #7]
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	2b03      	cmp	r3, #3
 800d326:	d9dd      	bls.n	800d2e4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d328:	4b03      	ldr	r3, [pc, #12]	; (800d338 <tcp_new_port+0x84>)
 800d32a:	881b      	ldrh	r3, [r3, #0]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	20000034 	.word	0x20000034
 800d33c:	0801e620 	.word	0x0801e620

0800d340 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d340:	b5b0      	push	{r4, r5, r7, lr}
 800d342:	b090      	sub	sp, #64	; 0x40
 800d344:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d346:	2300      	movs	r3, #0
 800d348:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d34c:	4b94      	ldr	r3, [pc, #592]	; (800d5a0 <tcp_slowtmr+0x260>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3301      	adds	r3, #1
 800d352:	4a93      	ldr	r2, [pc, #588]	; (800d5a0 <tcp_slowtmr+0x260>)
 800d354:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d356:	4b93      	ldr	r3, [pc, #588]	; (800d5a4 <tcp_slowtmr+0x264>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	3301      	adds	r3, #1
 800d35c:	b2da      	uxtb	r2, r3
 800d35e:	4b91      	ldr	r3, [pc, #580]	; (800d5a4 <tcp_slowtmr+0x264>)
 800d360:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d362:	2300      	movs	r3, #0
 800d364:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d366:	4b90      	ldr	r3, [pc, #576]	; (800d5a8 <tcp_slowtmr+0x268>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d36c:	e29d      	b.n	800d8aa <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d370:	7d1b      	ldrb	r3, [r3, #20]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d106      	bne.n	800d384 <tcp_slowtmr+0x44>
 800d376:	4b8d      	ldr	r3, [pc, #564]	; (800d5ac <tcp_slowtmr+0x26c>)
 800d378:	f240 42be 	movw	r2, #1214	; 0x4be
 800d37c:	498c      	ldr	r1, [pc, #560]	; (800d5b0 <tcp_slowtmr+0x270>)
 800d37e:	488d      	ldr	r0, [pc, #564]	; (800d5b4 <tcp_slowtmr+0x274>)
 800d380:	f00a fd14 	bl	8017dac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	7d1b      	ldrb	r3, [r3, #20]
 800d388:	2b01      	cmp	r3, #1
 800d38a:	d106      	bne.n	800d39a <tcp_slowtmr+0x5a>
 800d38c:	4b87      	ldr	r3, [pc, #540]	; (800d5ac <tcp_slowtmr+0x26c>)
 800d38e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d392:	4989      	ldr	r1, [pc, #548]	; (800d5b8 <tcp_slowtmr+0x278>)
 800d394:	4887      	ldr	r0, [pc, #540]	; (800d5b4 <tcp_slowtmr+0x274>)
 800d396:	f00a fd09 	bl	8017dac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39c:	7d1b      	ldrb	r3, [r3, #20]
 800d39e:	2b0a      	cmp	r3, #10
 800d3a0:	d106      	bne.n	800d3b0 <tcp_slowtmr+0x70>
 800d3a2:	4b82      	ldr	r3, [pc, #520]	; (800d5ac <tcp_slowtmr+0x26c>)
 800d3a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d3a8:	4984      	ldr	r1, [pc, #528]	; (800d5bc <tcp_slowtmr+0x27c>)
 800d3aa:	4882      	ldr	r0, [pc, #520]	; (800d5b4 <tcp_slowtmr+0x274>)
 800d3ac:	f00a fcfe 	bl	8017dac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b2:	7f9a      	ldrb	r2, [r3, #30]
 800d3b4:	4b7b      	ldr	r3, [pc, #492]	; (800d5a4 <tcp_slowtmr+0x264>)
 800d3b6:	781b      	ldrb	r3, [r3, #0]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d105      	bne.n	800d3c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d3c6:	e270      	b.n	800d8aa <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d3c8:	4b76      	ldr	r3, [pc, #472]	; (800d5a4 <tcp_slowtmr+0x264>)
 800d3ca:	781a      	ldrb	r2, [r3, #0]
 800d3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	7d1b      	ldrb	r3, [r3, #20]
 800d3e0:	2b02      	cmp	r3, #2
 800d3e2:	d10a      	bne.n	800d3fa <tcp_slowtmr+0xba>
 800d3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d3ea:	2b05      	cmp	r3, #5
 800d3ec:	d905      	bls.n	800d3fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d3ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3f2:	3301      	adds	r3, #1
 800d3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d3f8:	e11e      	b.n	800d638 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d400:	2b0b      	cmp	r3, #11
 800d402:	d905      	bls.n	800d410 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d408:	3301      	adds	r3, #1
 800d40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d40e:	e113      	b.n	800d638 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d416:	2b00      	cmp	r3, #0
 800d418:	d075      	beq.n	800d506 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d41a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d41c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d006      	beq.n	800d430 <tcp_slowtmr+0xf0>
 800d422:	4b62      	ldr	r3, [pc, #392]	; (800d5ac <tcp_slowtmr+0x26c>)
 800d424:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d428:	4965      	ldr	r1, [pc, #404]	; (800d5c0 <tcp_slowtmr+0x280>)
 800d42a:	4862      	ldr	r0, [pc, #392]	; (800d5b4 <tcp_slowtmr+0x274>)
 800d42c:	f00a fcbe 	bl	8017dac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d434:	2b00      	cmp	r3, #0
 800d436:	d106      	bne.n	800d446 <tcp_slowtmr+0x106>
 800d438:	4b5c      	ldr	r3, [pc, #368]	; (800d5ac <tcp_slowtmr+0x26c>)
 800d43a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d43e:	4961      	ldr	r1, [pc, #388]	; (800d5c4 <tcp_slowtmr+0x284>)
 800d440:	485c      	ldr	r0, [pc, #368]	; (800d5b4 <tcp_slowtmr+0x274>)
 800d442:	f00a fcb3 	bl	8017dac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d44c:	2b0b      	cmp	r3, #11
 800d44e:	d905      	bls.n	800d45c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d454:	3301      	adds	r3, #1
 800d456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d45a:	e0ed      	b.n	800d638 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d462:	3b01      	subs	r3, #1
 800d464:	4a58      	ldr	r2, [pc, #352]	; (800d5c8 <tcp_slowtmr+0x288>)
 800d466:	5cd3      	ldrb	r3, [r2, r3]
 800d468:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d46a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d46c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d470:	7c7a      	ldrb	r2, [r7, #17]
 800d472:	429a      	cmp	r2, r3
 800d474:	d907      	bls.n	800d486 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d478:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d47c:	3301      	adds	r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d48c:	7c7a      	ldrb	r2, [r7, #17]
 800d48e:	429a      	cmp	r2, r3
 800d490:	f200 80d2 	bhi.w	800d638 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d494:	2301      	movs	r3, #1
 800d496:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d49a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d108      	bne.n	800d4b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d4a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4a4:	f005 f96e 	bl	8012784 <tcp_zero_window_probe>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d014      	beq.n	800d4d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	623b      	str	r3, [r7, #32]
 800d4b2:	e011      	b.n	800d4d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4be:	f004 f833 	bl	8011528 <tcp_split_unsent_seg>
 800d4c2:	4603      	mov	r3, r0
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d107      	bne.n	800d4d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d4c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4ca:	f004 fab3 	bl	8011a34 <tcp_output>
 800d4ce:	4603      	mov	r3, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d101      	bne.n	800d4d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	f000 80ac 	beq.w	800d638 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4ee:	2b06      	cmp	r3, #6
 800d4f0:	f200 80a2 	bhi.w	800d638 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d504:	e098      	b.n	800d638 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d508:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	db0f      	blt.n	800d530 <tcp_slowtmr+0x1f0>
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d516:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d51a:	4293      	cmp	r3, r2
 800d51c:	d008      	beq.n	800d530 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d520:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d524:	b29b      	uxth	r3, r3
 800d526:	3301      	adds	r3, #1
 800d528:	b29b      	uxth	r3, r3
 800d52a:	b21a      	sxth	r2, r3
 800d52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d52e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d532:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d538:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d53c:	429a      	cmp	r2, r3
 800d53e:	db7b      	blt.n	800d638 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d540:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d542:	f004 fd6b 	bl	801201c <tcp_rexmit_rto_prepare>
 800d546:	4603      	mov	r3, r0
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d007      	beq.n	800d55c <tcp_slowtmr+0x21c>
 800d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d550:	2b00      	cmp	r3, #0
 800d552:	d171      	bne.n	800d638 <tcp_slowtmr+0x2f8>
 800d554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d06d      	beq.n	800d638 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d55e:	7d1b      	ldrb	r3, [r3, #20]
 800d560:	2b02      	cmp	r3, #2
 800d562:	d03a      	beq.n	800d5da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d56a:	2b0c      	cmp	r3, #12
 800d56c:	bf28      	it	cs
 800d56e:	230c      	movcs	r3, #12
 800d570:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d578:	10db      	asrs	r3, r3, #3
 800d57a:	b21b      	sxth	r3, r3
 800d57c:	461a      	mov	r2, r3
 800d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d580:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d584:	4413      	add	r3, r2
 800d586:	7efa      	ldrb	r2, [r7, #27]
 800d588:	4910      	ldr	r1, [pc, #64]	; (800d5cc <tcp_slowtmr+0x28c>)
 800d58a:	5c8a      	ldrb	r2, [r1, r2]
 800d58c:	4093      	lsls	r3, r2
 800d58e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d596:	4293      	cmp	r3, r2
 800d598:	dc1a      	bgt.n	800d5d0 <tcp_slowtmr+0x290>
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	b21a      	sxth	r2, r3
 800d59e:	e019      	b.n	800d5d4 <tcp_slowtmr+0x294>
 800d5a0:	2000ce38 	.word	0x2000ce38
 800d5a4:	2000ce4e 	.word	0x2000ce4e
 800d5a8:	2000ce44 	.word	0x2000ce44
 800d5ac:	08019bf4 	.word	0x08019bf4
 800d5b0:	08019f38 	.word	0x08019f38
 800d5b4:	08019c38 	.word	0x08019c38
 800d5b8:	08019f64 	.word	0x08019f64
 800d5bc:	08019f90 	.word	0x08019f90
 800d5c0:	08019fc0 	.word	0x08019fc0
 800d5c4:	08019ff4 	.word	0x08019ff4
 800d5c8:	0801e618 	.word	0x0801e618
 800d5cc:	0801e608 	.word	0x0801e608
 800d5d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5dc:	2200      	movs	r2, #0
 800d5de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d5ec:	4293      	cmp	r3, r2
 800d5ee:	bf28      	it	cs
 800d5f0:	4613      	movcs	r3, r2
 800d5f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d5f4:	8a7b      	ldrh	r3, [r7, #18]
 800d5f6:	085b      	lsrs	r3, r3, #1
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d602:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d60a:	005b      	lsls	r3, r3, #1
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	429a      	cmp	r2, r3
 800d610:	d206      	bcs.n	800d620 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d614:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d616:	005b      	lsls	r3, r3, #1
 800d618:	b29a      	uxth	r2, r3
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d626:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62c:	2200      	movs	r2, #0
 800d62e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d634:	f004 fd62 	bl	80120fc <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d63a:	7d1b      	ldrb	r3, [r3, #20]
 800d63c:	2b06      	cmp	r3, #6
 800d63e:	d111      	bne.n	800d664 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d642:	8b5b      	ldrh	r3, [r3, #26]
 800d644:	f003 0310 	and.w	r3, r3, #16
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00b      	beq.n	800d664 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d64c:	4b9c      	ldr	r3, [pc, #624]	; (800d8c0 <tcp_slowtmr+0x580>)
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	6a1b      	ldr	r3, [r3, #32]
 800d654:	1ad3      	subs	r3, r2, r3
 800d656:	2b28      	cmp	r3, #40	; 0x28
 800d658:	d904      	bls.n	800d664 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d65a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d65e:	3301      	adds	r3, #1
 800d660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d666:	7a5b      	ldrb	r3, [r3, #9]
 800d668:	f003 0308 	and.w	r3, r3, #8
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d04a      	beq.n	800d706 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d672:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d674:	2b04      	cmp	r3, #4
 800d676:	d003      	beq.n	800d680 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d67c:	2b07      	cmp	r3, #7
 800d67e:	d142      	bne.n	800d706 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d680:	4b8f      	ldr	r3, [pc, #572]	; (800d8c0 <tcp_slowtmr+0x580>)
 800d682:	681a      	ldr	r2, [r3, #0]
 800d684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d686:	6a1b      	ldr	r3, [r3, #32]
 800d688:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d68c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d690:	4b8c      	ldr	r3, [pc, #560]	; (800d8c4 <tcp_slowtmr+0x584>)
 800d692:	440b      	add	r3, r1
 800d694:	498c      	ldr	r1, [pc, #560]	; (800d8c8 <tcp_slowtmr+0x588>)
 800d696:	fba1 1303 	umull	r1, r3, r1, r3
 800d69a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d69c:	429a      	cmp	r2, r3
 800d69e:	d90a      	bls.n	800d6b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6a4:	3301      	adds	r3, #1
 800d6a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d6aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6ae:	3301      	adds	r3, #1
 800d6b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d6b4:	e027      	b.n	800d706 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6b6:	4b82      	ldr	r3, [pc, #520]	; (800d8c0 <tcp_slowtmr+0x580>)
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	4b7f      	ldr	r3, [pc, #508]	; (800d8cc <tcp_slowtmr+0x58c>)
 800d6d0:	fb00 f303 	mul.w	r3, r0, r3
 800d6d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d6d6:	497c      	ldr	r1, [pc, #496]	; (800d8c8 <tcp_slowtmr+0x588>)
 800d6d8:	fba1 1303 	umull	r1, r3, r1, r3
 800d6dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6de:	429a      	cmp	r2, r3
 800d6e0:	d911      	bls.n	800d706 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d6e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d6e4:	f005 f80e 	bl	8012704 <tcp_keepalive>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d6ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d107      	bne.n	800d706 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	b2da      	uxtb	r2, r3
 800d700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d702:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d011      	beq.n	800d732 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d70e:	4b6c      	ldr	r3, [pc, #432]	; (800d8c0 <tcp_slowtmr+0x580>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	1ad2      	subs	r2, r2, r3
 800d718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d71e:	4619      	mov	r1, r3
 800d720:	460b      	mov	r3, r1
 800d722:	005b      	lsls	r3, r3, #1
 800d724:	440b      	add	r3, r1
 800d726:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d728:	429a      	cmp	r2, r3
 800d72a:	d302      	bcc.n	800d732 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d72c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d72e:	f000 fec9 	bl	800e4c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d734:	7d1b      	ldrb	r3, [r3, #20]
 800d736:	2b03      	cmp	r3, #3
 800d738:	d10b      	bne.n	800d752 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d73a:	4b61      	ldr	r3, [pc, #388]	; (800d8c0 <tcp_slowtmr+0x580>)
 800d73c:	681a      	ldr	r2, [r3, #0]
 800d73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	1ad3      	subs	r3, r2, r3
 800d744:	2b28      	cmp	r3, #40	; 0x28
 800d746:	d904      	bls.n	800d752 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d748:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d74c:	3301      	adds	r3, #1
 800d74e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d754:	7d1b      	ldrb	r3, [r3, #20]
 800d756:	2b09      	cmp	r3, #9
 800d758:	d10b      	bne.n	800d772 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d75a:	4b59      	ldr	r3, [pc, #356]	; (800d8c0 <tcp_slowtmr+0x580>)
 800d75c:	681a      	ldr	r2, [r3, #0]
 800d75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	1ad3      	subs	r3, r2, r3
 800d764:	2bf0      	cmp	r3, #240	; 0xf0
 800d766:	d904      	bls.n	800d772 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d768:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d76c:	3301      	adds	r3, #1
 800d76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d776:	2b00      	cmp	r3, #0
 800d778:	d060      	beq.n	800d83c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d780:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d784:	f000 fcea 	bl	800e15c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d010      	beq.n	800d7b0 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d78e:	4b50      	ldr	r3, [pc, #320]	; (800d8d0 <tcp_slowtmr+0x590>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d794:	429a      	cmp	r2, r3
 800d796:	d106      	bne.n	800d7a6 <tcp_slowtmr+0x466>
 800d798:	4b4e      	ldr	r3, [pc, #312]	; (800d8d4 <tcp_slowtmr+0x594>)
 800d79a:	f240 526d 	movw	r2, #1389	; 0x56d
 800d79e:	494e      	ldr	r1, [pc, #312]	; (800d8d8 <tcp_slowtmr+0x598>)
 800d7a0:	484e      	ldr	r0, [pc, #312]	; (800d8dc <tcp_slowtmr+0x59c>)
 800d7a2:	f00a fb03 	bl	8017dac <iprintf>
        prev->next = pcb->next;
 800d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a8:	68da      	ldr	r2, [r3, #12]
 800d7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7ac:	60da      	str	r2, [r3, #12]
 800d7ae:	e00f      	b.n	800d7d0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d7b0:	4b47      	ldr	r3, [pc, #284]	; (800d8d0 <tcp_slowtmr+0x590>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7b6:	429a      	cmp	r2, r3
 800d7b8:	d006      	beq.n	800d7c8 <tcp_slowtmr+0x488>
 800d7ba:	4b46      	ldr	r3, [pc, #280]	; (800d8d4 <tcp_slowtmr+0x594>)
 800d7bc:	f240 5271 	movw	r2, #1393	; 0x571
 800d7c0:	4947      	ldr	r1, [pc, #284]	; (800d8e0 <tcp_slowtmr+0x5a0>)
 800d7c2:	4846      	ldr	r0, [pc, #280]	; (800d8dc <tcp_slowtmr+0x59c>)
 800d7c4:	f00a faf2 	bl	8017dac <iprintf>
        tcp_active_pcbs = pcb->next;
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	68db      	ldr	r3, [r3, #12]
 800d7cc:	4a40      	ldr	r2, [pc, #256]	; (800d8d0 <tcp_slowtmr+0x590>)
 800d7ce:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d7d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d013      	beq.n	800d800 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d7dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d7e0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7e8:	8ad2      	ldrh	r2, [r2, #22]
 800d7ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7ec:	8b09      	ldrh	r1, [r1, #24]
 800d7ee:	9102      	str	r1, [sp, #8]
 800d7f0:	9201      	str	r2, [sp, #4]
 800d7f2:	9300      	str	r3, [sp, #0]
 800d7f4:	462b      	mov	r3, r5
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	4601      	mov	r1, r0
 800d7fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7fc:	f004 fece 	bl	801259c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d802:	691b      	ldr	r3, [r3, #16]
 800d804:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	7d1b      	ldrb	r3, [r3, #20]
 800d80a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d80c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d80e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d816:	6838      	ldr	r0, [r7, #0]
 800d818:	f7ff f83a 	bl	800c890 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d81c:	4b31      	ldr	r3, [pc, #196]	; (800d8e4 <tcp_slowtmr+0x5a4>)
 800d81e:	2200      	movs	r2, #0
 800d820:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d004      	beq.n	800d832 <tcp_slowtmr+0x4f2>
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f06f 010c 	mvn.w	r1, #12
 800d82e:	68b8      	ldr	r0, [r7, #8]
 800d830:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d832:	4b2c      	ldr	r3, [pc, #176]	; (800d8e4 <tcp_slowtmr+0x5a4>)
 800d834:	781b      	ldrb	r3, [r3, #0]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d037      	beq.n	800d8aa <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d83a:	e592      	b.n	800d362 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d83c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d83e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d848:	7f1b      	ldrb	r3, [r3, #28]
 800d84a:	3301      	adds	r3, #1
 800d84c:	b2da      	uxtb	r2, r3
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d854:	7f1a      	ldrb	r2, [r3, #28]
 800d856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d858:	7f5b      	ldrb	r3, [r3, #29]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d325      	bcc.n	800d8aa <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	2200      	movs	r2, #0
 800d862:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d864:	4b1f      	ldr	r3, [pc, #124]	; (800d8e4 <tcp_slowtmr+0x5a4>)
 800d866:	2200      	movs	r2, #0
 800d868:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00b      	beq.n	800d88c <tcp_slowtmr+0x54c>
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d87a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d87c:	6912      	ldr	r2, [r2, #16]
 800d87e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d880:	4610      	mov	r0, r2
 800d882:	4798      	blx	r3
 800d884:	4603      	mov	r3, r0
 800d886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d88a:	e002      	b.n	800d892 <tcp_slowtmr+0x552>
 800d88c:	2300      	movs	r3, #0
 800d88e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d892:	4b14      	ldr	r3, [pc, #80]	; (800d8e4 <tcp_slowtmr+0x5a4>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d000      	beq.n	800d89c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d89a:	e562      	b.n	800d362 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d89c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d102      	bne.n	800d8aa <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d8a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8a6:	f004 f8c5 	bl	8011a34 <tcp_output>
  while (pcb != NULL) {
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	f47f ad5e 	bne.w	800d36e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d8b6:	4b0c      	ldr	r3, [pc, #48]	; (800d8e8 <tcp_slowtmr+0x5a8>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d8bc:	e069      	b.n	800d992 <tcp_slowtmr+0x652>
 800d8be:	bf00      	nop
 800d8c0:	2000ce38 	.word	0x2000ce38
 800d8c4:	000a4cb8 	.word	0x000a4cb8
 800d8c8:	10624dd3 	.word	0x10624dd3
 800d8cc:	000124f8 	.word	0x000124f8
 800d8d0:	2000ce44 	.word	0x2000ce44
 800d8d4:	08019bf4 	.word	0x08019bf4
 800d8d8:	0801a02c 	.word	0x0801a02c
 800d8dc:	08019c38 	.word	0x08019c38
 800d8e0:	0801a058 	.word	0x0801a058
 800d8e4:	2000ce4c 	.word	0x2000ce4c
 800d8e8:	2000ce48 	.word	0x2000ce48
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d8ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ee:	7d1b      	ldrb	r3, [r3, #20]
 800d8f0:	2b0a      	cmp	r3, #10
 800d8f2:	d006      	beq.n	800d902 <tcp_slowtmr+0x5c2>
 800d8f4:	4b2b      	ldr	r3, [pc, #172]	; (800d9a4 <tcp_slowtmr+0x664>)
 800d8f6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d8fa:	492b      	ldr	r1, [pc, #172]	; (800d9a8 <tcp_slowtmr+0x668>)
 800d8fc:	482b      	ldr	r0, [pc, #172]	; (800d9ac <tcp_slowtmr+0x66c>)
 800d8fe:	f00a fa55 	bl	8017dac <iprintf>
    pcb_remove = 0;
 800d902:	2300      	movs	r3, #0
 800d904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d908:	4b29      	ldr	r3, [pc, #164]	; (800d9b0 <tcp_slowtmr+0x670>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2bf0      	cmp	r3, #240	; 0xf0
 800d914:	d904      	bls.n	800d920 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d91a:	3301      	adds	r3, #1
 800d91c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d920:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d924:	2b00      	cmp	r3, #0
 800d926:	d02f      	beq.n	800d988 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d92a:	f000 fc17 	bl	800e15c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	2b00      	cmp	r3, #0
 800d932:	d010      	beq.n	800d956 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d934:	4b1f      	ldr	r3, [pc, #124]	; (800d9b4 <tcp_slowtmr+0x674>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d93a:	429a      	cmp	r2, r3
 800d93c:	d106      	bne.n	800d94c <tcp_slowtmr+0x60c>
 800d93e:	4b19      	ldr	r3, [pc, #100]	; (800d9a4 <tcp_slowtmr+0x664>)
 800d940:	f240 52af 	movw	r2, #1455	; 0x5af
 800d944:	491c      	ldr	r1, [pc, #112]	; (800d9b8 <tcp_slowtmr+0x678>)
 800d946:	4819      	ldr	r0, [pc, #100]	; (800d9ac <tcp_slowtmr+0x66c>)
 800d948:	f00a fa30 	bl	8017dac <iprintf>
        prev->next = pcb->next;
 800d94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d94e:	68da      	ldr	r2, [r3, #12]
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	60da      	str	r2, [r3, #12]
 800d954:	e00f      	b.n	800d976 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d956:	4b17      	ldr	r3, [pc, #92]	; (800d9b4 <tcp_slowtmr+0x674>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d95c:	429a      	cmp	r2, r3
 800d95e:	d006      	beq.n	800d96e <tcp_slowtmr+0x62e>
 800d960:	4b10      	ldr	r3, [pc, #64]	; (800d9a4 <tcp_slowtmr+0x664>)
 800d962:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d966:	4915      	ldr	r1, [pc, #84]	; (800d9bc <tcp_slowtmr+0x67c>)
 800d968:	4810      	ldr	r0, [pc, #64]	; (800d9ac <tcp_slowtmr+0x66c>)
 800d96a:	f00a fa1f 	bl	8017dac <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	4a10      	ldr	r2, [pc, #64]	; (800d9b4 <tcp_slowtmr+0x674>)
 800d974:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d978:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d97c:	68db      	ldr	r3, [r3, #12]
 800d97e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d980:	69f8      	ldr	r0, [r7, #28]
 800d982:	f7fe ff85 	bl	800c890 <tcp_free>
 800d986:	e004      	b.n	800d992 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d98c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d1a9      	bne.n	800d8ec <tcp_slowtmr+0x5ac>
    }
  }
}
 800d998:	bf00      	nop
 800d99a:	bf00      	nop
 800d99c:	3730      	adds	r7, #48	; 0x30
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bdb0      	pop	{r4, r5, r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	08019bf4 	.word	0x08019bf4
 800d9a8:	0801a084 	.word	0x0801a084
 800d9ac:	08019c38 	.word	0x08019c38
 800d9b0:	2000ce38 	.word	0x2000ce38
 800d9b4:	2000ce48 	.word	0x2000ce48
 800d9b8:	0801a0b4 	.word	0x0801a0b4
 800d9bc:	0801a0dc 	.word	0x0801a0dc

0800d9c0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d9c6:	4b2d      	ldr	r3, [pc, #180]	; (800da7c <tcp_fasttmr+0xbc>)
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	4b2b      	ldr	r3, [pc, #172]	; (800da7c <tcp_fasttmr+0xbc>)
 800d9d0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d9d2:	4b2b      	ldr	r3, [pc, #172]	; (800da80 <tcp_fasttmr+0xc0>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d9d8:	e048      	b.n	800da6c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	7f9a      	ldrb	r2, [r3, #30]
 800d9de:	4b27      	ldr	r3, [pc, #156]	; (800da7c <tcp_fasttmr+0xbc>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	429a      	cmp	r2, r3
 800d9e4:	d03f      	beq.n	800da66 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d9e6:	4b25      	ldr	r3, [pc, #148]	; (800da7c <tcp_fasttmr+0xbc>)
 800d9e8:	781a      	ldrb	r2, [r3, #0]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	8b5b      	ldrh	r3, [r3, #26]
 800d9f2:	f003 0301 	and.w	r3, r3, #1
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d010      	beq.n	800da1c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	8b5b      	ldrh	r3, [r3, #26]
 800d9fe:	f043 0302 	orr.w	r3, r3, #2
 800da02:	b29a      	uxth	r2, r3
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f004 f813 	bl	8011a34 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	8b5b      	ldrh	r3, [r3, #26]
 800da12:	f023 0303 	bic.w	r3, r3, #3
 800da16:	b29a      	uxth	r2, r3
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	8b5b      	ldrh	r3, [r3, #26]
 800da20:	f003 0308 	and.w	r3, r3, #8
 800da24:	2b00      	cmp	r3, #0
 800da26:	d009      	beq.n	800da3c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	8b5b      	ldrh	r3, [r3, #26]
 800da2c:	f023 0308 	bic.w	r3, r3, #8
 800da30:	b29a      	uxth	r2, r3
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f7ff f8be 	bl	800cbb8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	68db      	ldr	r3, [r3, #12]
 800da40:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da46:	2b00      	cmp	r3, #0
 800da48:	d00a      	beq.n	800da60 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800da4a:	4b0e      	ldr	r3, [pc, #56]	; (800da84 <tcp_fasttmr+0xc4>)
 800da4c:	2200      	movs	r2, #0
 800da4e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 f819 	bl	800da88 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800da56:	4b0b      	ldr	r3, [pc, #44]	; (800da84 <tcp_fasttmr+0xc4>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d000      	beq.n	800da60 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800da5e:	e7b8      	b.n	800d9d2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	607b      	str	r3, [r7, #4]
 800da64:	e002      	b.n	800da6c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1b3      	bne.n	800d9da <tcp_fasttmr+0x1a>
    }
  }
}
 800da72:	bf00      	nop
 800da74:	bf00      	nop
 800da76:	3708      	adds	r7, #8
 800da78:	46bd      	mov	sp, r7
 800da7a:	bd80      	pop	{r7, pc}
 800da7c:	2000ce4e 	.word	0x2000ce4e
 800da80:	2000ce44 	.word	0x2000ce44
 800da84:	2000ce4c 	.word	0x2000ce4c

0800da88 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800da88:	b590      	push	{r4, r7, lr}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d109      	bne.n	800daaa <tcp_process_refused_data+0x22>
 800da96:	4b37      	ldr	r3, [pc, #220]	; (800db74 <tcp_process_refused_data+0xec>)
 800da98:	f240 6209 	movw	r2, #1545	; 0x609
 800da9c:	4936      	ldr	r1, [pc, #216]	; (800db78 <tcp_process_refused_data+0xf0>)
 800da9e:	4837      	ldr	r0, [pc, #220]	; (800db7c <tcp_process_refused_data+0xf4>)
 800daa0:	f00a f984 	bl	8017dac <iprintf>
 800daa4:	f06f 030f 	mvn.w	r3, #15
 800daa8:	e060      	b.n	800db6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800daae:	7b5b      	ldrb	r3, [r3, #13]
 800dab0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dab6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2200      	movs	r2, #0
 800dabc:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00b      	beq.n	800dae0 <tcp_process_refused_data+0x58>
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6918      	ldr	r0, [r3, #16]
 800dad2:	2300      	movs	r3, #0
 800dad4:	68ba      	ldr	r2, [r7, #8]
 800dad6:	6879      	ldr	r1, [r7, #4]
 800dad8:	47a0      	blx	r4
 800dada:	4603      	mov	r3, r0
 800dadc:	73fb      	strb	r3, [r7, #15]
 800dade:	e007      	b.n	800daf0 <tcp_process_refused_data+0x68>
 800dae0:	2300      	movs	r3, #0
 800dae2:	68ba      	ldr	r2, [r7, #8]
 800dae4:	6879      	ldr	r1, [r7, #4]
 800dae6:	2000      	movs	r0, #0
 800dae8:	f000 f8c2 	bl	800dc70 <tcp_recv_null>
 800daec:	4603      	mov	r3, r0
 800daee:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800daf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d12a      	bne.n	800db4e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800daf8:	7bbb      	ldrb	r3, [r7, #14]
 800dafa:	f003 0320 	and.w	r3, r3, #32
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d033      	beq.n	800db6a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db06:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db0a:	d005      	beq.n	800db18 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db10:	3301      	adds	r3, #1
 800db12:	b29a      	uxth	r2, r3
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00b      	beq.n	800db3a <tcp_process_refused_data+0xb2>
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6918      	ldr	r0, [r3, #16]
 800db2c:	2300      	movs	r3, #0
 800db2e:	2200      	movs	r2, #0
 800db30:	6879      	ldr	r1, [r7, #4]
 800db32:	47a0      	blx	r4
 800db34:	4603      	mov	r3, r0
 800db36:	73fb      	strb	r3, [r7, #15]
 800db38:	e001      	b.n	800db3e <tcp_process_refused_data+0xb6>
 800db3a:	2300      	movs	r3, #0
 800db3c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800db3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db42:	f113 0f0d 	cmn.w	r3, #13
 800db46:	d110      	bne.n	800db6a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800db48:	f06f 030c 	mvn.w	r3, #12
 800db4c:	e00e      	b.n	800db6c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800db4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db52:	f113 0f0d 	cmn.w	r3, #13
 800db56:	d102      	bne.n	800db5e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800db58:	f06f 030c 	mvn.w	r3, #12
 800db5c:	e006      	b.n	800db6c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800db64:	f06f 0304 	mvn.w	r3, #4
 800db68:	e000      	b.n	800db6c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800db6a:	2300      	movs	r3, #0
}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3714      	adds	r7, #20
 800db70:	46bd      	mov	sp, r7
 800db72:	bd90      	pop	{r4, r7, pc}
 800db74:	08019bf4 	.word	0x08019bf4
 800db78:	0801a104 	.word	0x0801a104
 800db7c:	08019c38 	.word	0x08019c38

0800db80 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800db88:	e007      	b.n	800db9a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f80a 	bl	800dbaa <tcp_seg_free>
    seg = next;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1f4      	bne.n	800db8a <tcp_segs_free+0xa>
  }
}
 800dba0:	bf00      	nop
 800dba2:	bf00      	nop
 800dba4:	3710      	adds	r7, #16
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b082      	sub	sp, #8
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00c      	beq.n	800dbd2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	685b      	ldr	r3, [r3, #4]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d004      	beq.n	800dbca <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fba7 	bl	800c318 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	2003      	movs	r0, #3
 800dbce:	f7fd fcf3 	bl	800b5b8 <memp_free>
  }
}
 800dbd2:	bf00      	nop
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
	...

0800dbdc <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b082      	sub	sp, #8
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	460b      	mov	r3, r1
 800dbe6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d107      	bne.n	800dbfe <tcp_setprio+0x22>
 800dbee:	4b07      	ldr	r3, [pc, #28]	; (800dc0c <tcp_setprio+0x30>)
 800dbf0:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 800dbf4:	4906      	ldr	r1, [pc, #24]	; (800dc10 <tcp_setprio+0x34>)
 800dbf6:	4807      	ldr	r0, [pc, #28]	; (800dc14 <tcp_setprio+0x38>)
 800dbf8:	f00a f8d8 	bl	8017dac <iprintf>
 800dbfc:	e002      	b.n	800dc04 <tcp_setprio+0x28>

  pcb->prio = prio;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	78fa      	ldrb	r2, [r7, #3]
 800dc02:	755a      	strb	r2, [r3, #21]
}
 800dc04:	3708      	adds	r7, #8
 800dc06:	46bd      	mov	sp, r7
 800dc08:	bd80      	pop	{r7, pc}
 800dc0a:	bf00      	nop
 800dc0c:	08019bf4 	.word	0x08019bf4
 800dc10:	0801a12c 	.word	0x0801a12c
 800dc14:	08019c38 	.word	0x08019c38

0800dc18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d106      	bne.n	800dc34 <tcp_seg_copy+0x1c>
 800dc26:	4b0f      	ldr	r3, [pc, #60]	; (800dc64 <tcp_seg_copy+0x4c>)
 800dc28:	f240 6282 	movw	r2, #1666	; 0x682
 800dc2c:	490e      	ldr	r1, [pc, #56]	; (800dc68 <tcp_seg_copy+0x50>)
 800dc2e:	480f      	ldr	r0, [pc, #60]	; (800dc6c <tcp_seg_copy+0x54>)
 800dc30:	f00a f8bc 	bl	8017dac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dc34:	2003      	movs	r0, #3
 800dc36:	f7fd fc49 	bl	800b4cc <memp_malloc>
 800dc3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d101      	bne.n	800dc46 <tcp_seg_copy+0x2e>
    return NULL;
 800dc42:	2300      	movs	r3, #0
 800dc44:	e00a      	b.n	800dc5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dc46:	2210      	movs	r2, #16
 800dc48:	6879      	ldr	r1, [r7, #4]
 800dc4a:	68f8      	ldr	r0, [r7, #12]
 800dc4c:	f00a f9ac 	bl	8017fa8 <memcpy>
  pbuf_ref(cseg->p);
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	4618      	mov	r0, r3
 800dc56:	f7fe fc05 	bl	800c464 <pbuf_ref>
  return cseg;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	08019bf4 	.word	0x08019bf4
 800dc68:	0801a148 	.word	0x0801a148
 800dc6c:	08019c38 	.word	0x08019c38

0800dc70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b084      	sub	sp, #16
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d109      	bne.n	800dc98 <tcp_recv_null+0x28>
 800dc84:	4b12      	ldr	r3, [pc, #72]	; (800dcd0 <tcp_recv_null+0x60>)
 800dc86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dc8a:	4912      	ldr	r1, [pc, #72]	; (800dcd4 <tcp_recv_null+0x64>)
 800dc8c:	4812      	ldr	r0, [pc, #72]	; (800dcd8 <tcp_recv_null+0x68>)
 800dc8e:	f00a f88d 	bl	8017dac <iprintf>
 800dc92:	f06f 030f 	mvn.w	r3, #15
 800dc96:	e016      	b.n	800dcc6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d009      	beq.n	800dcb2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	891b      	ldrh	r3, [r3, #8]
 800dca2:	4619      	mov	r1, r3
 800dca4:	68b8      	ldr	r0, [r7, #8]
 800dca6:	f7ff fab5 	bl	800d214 <tcp_recved>
    pbuf_free(p);
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	f7fe fb34 	bl	800c318 <pbuf_free>
 800dcb0:	e008      	b.n	800dcc4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800dcb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d104      	bne.n	800dcc4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800dcba:	68b8      	ldr	r0, [r7, #8]
 800dcbc:	f7fe ffe6 	bl	800cc8c <tcp_close>
 800dcc0:	4603      	mov	r3, r0
 800dcc2:	e000      	b.n	800dcc6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	3710      	adds	r7, #16
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd80      	pop	{r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	08019bf4 	.word	0x08019bf4
 800dcd4:	0801a164 	.word	0x0801a164
 800dcd8:	08019c38 	.word	0x08019c38

0800dcdc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	4603      	mov	r3, r0
 800dce4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	db01      	blt.n	800dcf2 <tcp_kill_prio+0x16>
 800dcee:	79fb      	ldrb	r3, [r7, #7]
 800dcf0:	e000      	b.n	800dcf4 <tcp_kill_prio+0x18>
 800dcf2:	237f      	movs	r3, #127	; 0x7f
 800dcf4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800dcf6:	7afb      	ldrb	r3, [r7, #11]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d034      	beq.n	800dd66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800dcfc:	7afb      	ldrb	r3, [r7, #11]
 800dcfe:	3b01      	subs	r3, #1
 800dd00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800dd02:	2300      	movs	r3, #0
 800dd04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd06:	2300      	movs	r3, #0
 800dd08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd0a:	4b19      	ldr	r3, [pc, #100]	; (800dd70 <tcp_kill_prio+0x94>)
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	617b      	str	r3, [r7, #20]
 800dd10:	e01f      	b.n	800dd52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	7d5b      	ldrb	r3, [r3, #21]
 800dd16:	7afa      	ldrb	r2, [r7, #11]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d80c      	bhi.n	800dd36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800dd20:	7afa      	ldrb	r2, [r7, #11]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d112      	bne.n	800dd4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800dd26:	4b13      	ldr	r3, [pc, #76]	; (800dd74 <tcp_kill_prio+0x98>)
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	6a1b      	ldr	r3, [r3, #32]
 800dd2e:	1ad3      	subs	r3, r2, r3
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d80a      	bhi.n	800dd4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800dd36:	4b0f      	ldr	r3, [pc, #60]	; (800dd74 <tcp_kill_prio+0x98>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	697b      	ldr	r3, [r7, #20]
 800dd3c:	6a1b      	ldr	r3, [r3, #32]
 800dd3e:	1ad3      	subs	r3, r2, r3
 800dd40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	7d5b      	ldrb	r3, [r3, #21]
 800dd4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	68db      	ldr	r3, [r3, #12]
 800dd50:	617b      	str	r3, [r7, #20]
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d1dc      	bne.n	800dd12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d004      	beq.n	800dd68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd5e:	6938      	ldr	r0, [r7, #16]
 800dd60:	f7ff f87e 	bl	800ce60 <tcp_abort>
 800dd64:	e000      	b.n	800dd68 <tcp_kill_prio+0x8c>
    return;
 800dd66:	bf00      	nop
  }
}
 800dd68:	3718      	adds	r7, #24
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2000ce44 	.word	0x2000ce44
 800dd74:	2000ce38 	.word	0x2000ce38

0800dd78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b086      	sub	sp, #24
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	4603      	mov	r3, r0
 800dd80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dd82:	79fb      	ldrb	r3, [r7, #7]
 800dd84:	2b08      	cmp	r3, #8
 800dd86:	d009      	beq.n	800dd9c <tcp_kill_state+0x24>
 800dd88:	79fb      	ldrb	r3, [r7, #7]
 800dd8a:	2b09      	cmp	r3, #9
 800dd8c:	d006      	beq.n	800dd9c <tcp_kill_state+0x24>
 800dd8e:	4b1a      	ldr	r3, [pc, #104]	; (800ddf8 <tcp_kill_state+0x80>)
 800dd90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dd94:	4919      	ldr	r1, [pc, #100]	; (800ddfc <tcp_kill_state+0x84>)
 800dd96:	481a      	ldr	r0, [pc, #104]	; (800de00 <tcp_kill_state+0x88>)
 800dd98:	f00a f808 	bl	8017dac <iprintf>

  inactivity = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dda0:	2300      	movs	r3, #0
 800dda2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dda4:	4b17      	ldr	r3, [pc, #92]	; (800de04 <tcp_kill_state+0x8c>)
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	617b      	str	r3, [r7, #20]
 800ddaa:	e017      	b.n	800dddc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ddac:	697b      	ldr	r3, [r7, #20]
 800ddae:	7d1b      	ldrb	r3, [r3, #20]
 800ddb0:	79fa      	ldrb	r2, [r7, #7]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d10f      	bne.n	800ddd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ddb6:	4b14      	ldr	r3, [pc, #80]	; (800de08 <tcp_kill_state+0x90>)
 800ddb8:	681a      	ldr	r2, [r3, #0]
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	6a1b      	ldr	r3, [r3, #32]
 800ddbe:	1ad3      	subs	r3, r2, r3
 800ddc0:	68fa      	ldr	r2, [r7, #12]
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d807      	bhi.n	800ddd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ddc6:	4b10      	ldr	r3, [pc, #64]	; (800de08 <tcp_kill_state+0x90>)
 800ddc8:	681a      	ldr	r2, [r3, #0]
 800ddca:	697b      	ldr	r3, [r7, #20]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d1e4      	bne.n	800ddac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d003      	beq.n	800ddf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dde8:	2100      	movs	r1, #0
 800ddea:	6938      	ldr	r0, [r7, #16]
 800ddec:	f7fe ff7a 	bl	800cce4 <tcp_abandon>
  }
}
 800ddf0:	bf00      	nop
 800ddf2:	3718      	adds	r7, #24
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}
 800ddf8:	08019bf4 	.word	0x08019bf4
 800ddfc:	0801a180 	.word	0x0801a180
 800de00:	08019c38 	.word	0x08019c38
 800de04:	2000ce44 	.word	0x2000ce44
 800de08:	2000ce38 	.word	0x2000ce38

0800de0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800de16:	2300      	movs	r3, #0
 800de18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de1a:	4b12      	ldr	r3, [pc, #72]	; (800de64 <tcp_kill_timewait+0x58>)
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e012      	b.n	800de48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de22:	4b11      	ldr	r3, [pc, #68]	; (800de68 <tcp_kill_timewait+0x5c>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	6a1b      	ldr	r3, [r3, #32]
 800de2a:	1ad3      	subs	r3, r2, r3
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d807      	bhi.n	800de42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800de32:	4b0d      	ldr	r3, [pc, #52]	; (800de68 <tcp_kill_timewait+0x5c>)
 800de34:	681a      	ldr	r2, [r3, #0]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6a1b      	ldr	r3, [r3, #32]
 800de3a:	1ad3      	subs	r3, r2, r3
 800de3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d1e9      	bne.n	800de22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de54:	68b8      	ldr	r0, [r7, #8]
 800de56:	f7ff f803 	bl	800ce60 <tcp_abort>
  }
}
 800de5a:	bf00      	nop
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	2000ce48 	.word	0x2000ce48
 800de68:	2000ce38 	.word	0x2000ce38

0800de6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800de6c:	b580      	push	{r7, lr}
 800de6e:	b082      	sub	sp, #8
 800de70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800de72:	4b10      	ldr	r3, [pc, #64]	; (800deb4 <tcp_handle_closepend+0x48>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800de78:	e014      	b.n	800dea4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	8b5b      	ldrh	r3, [r3, #26]
 800de84:	f003 0308 	and.w	r3, r3, #8
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d009      	beq.n	800dea0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	8b5b      	ldrh	r3, [r3, #26]
 800de90:	f023 0308 	bic.w	r3, r3, #8
 800de94:	b29a      	uxth	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f7fe fe8c 	bl	800cbb8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d1e7      	bne.n	800de7a <tcp_handle_closepend+0xe>
  }
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	3708      	adds	r7, #8
 800deb0:	46bd      	mov	sp, r7
 800deb2:	bd80      	pop	{r7, pc}
 800deb4:	2000ce44 	.word	0x2000ce44

0800deb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800deb8:	b580      	push	{r7, lr}
 800deba:	b084      	sub	sp, #16
 800debc:	af00      	add	r7, sp, #0
 800debe:	4603      	mov	r3, r0
 800dec0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dec2:	2001      	movs	r0, #1
 800dec4:	f7fd fb02 	bl	800b4cc <memp_malloc>
 800dec8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d126      	bne.n	800df1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ded0:	f7ff ffcc 	bl	800de6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ded4:	f7ff ff9a 	bl	800de0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ded8:	2001      	movs	r0, #1
 800deda:	f7fd faf7 	bl	800b4cc <memp_malloc>
 800dede:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d11b      	bne.n	800df1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dee6:	2009      	movs	r0, #9
 800dee8:	f7ff ff46 	bl	800dd78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800deec:	2001      	movs	r0, #1
 800deee:	f7fd faed 	bl	800b4cc <memp_malloc>
 800def2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d111      	bne.n	800df1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800defa:	2008      	movs	r0, #8
 800defc:	f7ff ff3c 	bl	800dd78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df00:	2001      	movs	r0, #1
 800df02:	f7fd fae3 	bl	800b4cc <memp_malloc>
 800df06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d107      	bne.n	800df1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800df0e:	79fb      	ldrb	r3, [r7, #7]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff fee3 	bl	800dcdc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800df16:	2001      	movs	r0, #1
 800df18:	f7fd fad8 	bl	800b4cc <memp_malloc>
 800df1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d03f      	beq.n	800dfa4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800df24:	229c      	movs	r2, #156	; 0x9c
 800df26:	2100      	movs	r1, #0
 800df28:	68f8      	ldr	r0, [r7, #12]
 800df2a:	f009 ffa4 	bl	8017e76 <memset>
    pcb->prio = prio;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	79fa      	ldrb	r2, [r7, #7]
 800df32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800df44:	855a      	strh	r2, [r3, #42]	; 0x2a
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	22ff      	movs	r2, #255	; 0xff
 800df52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f44f 7206 	mov.w	r2, #536	; 0x218
 800df5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	2206      	movs	r2, #6
 800df60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	2206      	movs	r2, #6
 800df68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2201      	movs	r2, #1
 800df76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800df7a:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <tcp_alloc+0xf8>)
 800df7c:	681a      	ldr	r2, [r3, #0]
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800df82:	4b0c      	ldr	r3, [pc, #48]	; (800dfb4 <tcp_alloc+0xfc>)
 800df84:	781a      	ldrb	r2, [r3, #0]
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	4a08      	ldr	r2, [pc, #32]	; (800dfb8 <tcp_alloc+0x100>)
 800df98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	4a07      	ldr	r2, [pc, #28]	; (800dfbc <tcp_alloc+0x104>)
 800dfa0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dfa4:	68fb      	ldr	r3, [r7, #12]
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3710      	adds	r7, #16
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	2000ce38 	.word	0x2000ce38
 800dfb4:	2000ce4e 	.word	0x2000ce4e
 800dfb8:	0800dc71 	.word	0x0800dc71
 800dfbc:	006ddd00 	.word	0x006ddd00

0800dfc0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b084      	sub	sp, #16
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800dfca:	2040      	movs	r0, #64	; 0x40
 800dfcc:	f7ff ff74 	bl	800deb8 <tcp_alloc>
 800dfd0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3710      	adds	r7, #16
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	bd80      	pop	{r7, pc}

0800dfdc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
 800dfe4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	683a      	ldr	r2, [r7, #0]
 800dff0:	611a      	str	r2, [r3, #16]
  }
}
 800dff2:	bf00      	nop
 800dff4:	370c      	adds	r7, #12
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr
	...

0800e000 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d00e      	beq.n	800e02e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7d1b      	ldrb	r3, [r3, #20]
 800e014:	2b01      	cmp	r3, #1
 800e016:	d106      	bne.n	800e026 <tcp_recv+0x26>
 800e018:	4b07      	ldr	r3, [pc, #28]	; (800e038 <tcp_recv+0x38>)
 800e01a:	f240 72df 	movw	r2, #2015	; 0x7df
 800e01e:	4907      	ldr	r1, [pc, #28]	; (800e03c <tcp_recv+0x3c>)
 800e020:	4807      	ldr	r0, [pc, #28]	; (800e040 <tcp_recv+0x40>)
 800e022:	f009 fec3 	bl	8017dac <iprintf>
    pcb->recv = recv;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e02e:	bf00      	nop
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	08019bf4 	.word	0x08019bf4
 800e03c:	0801a190 	.word	0x0801a190
 800e040:	08019c38 	.word	0x08019c38

0800e044 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	6078      	str	r0, [r7, #4]
 800e04c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	2b00      	cmp	r3, #0
 800e052:	d00e      	beq.n	800e072 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	7d1b      	ldrb	r3, [r3, #20]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d106      	bne.n	800e06a <tcp_sent+0x26>
 800e05c:	4b07      	ldr	r3, [pc, #28]	; (800e07c <tcp_sent+0x38>)
 800e05e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e062:	4907      	ldr	r1, [pc, #28]	; (800e080 <tcp_sent+0x3c>)
 800e064:	4807      	ldr	r0, [pc, #28]	; (800e084 <tcp_sent+0x40>)
 800e066:	f009 fea1 	bl	8017dac <iprintf>
    pcb->sent = sent;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	683a      	ldr	r2, [r7, #0]
 800e06e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e072:	bf00      	nop
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}
 800e07a:	bf00      	nop
 800e07c:	08019bf4 	.word	0x08019bf4
 800e080:	0801a1b8 	.word	0x0801a1b8
 800e084:	08019c38 	.word	0x08019c38

0800e088 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b082      	sub	sp, #8
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d00e      	beq.n	800e0b6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	7d1b      	ldrb	r3, [r3, #20]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d106      	bne.n	800e0ae <tcp_err+0x26>
 800e0a0:	4b07      	ldr	r3, [pc, #28]	; (800e0c0 <tcp_err+0x38>)
 800e0a2:	f640 020d 	movw	r2, #2061	; 0x80d
 800e0a6:	4907      	ldr	r1, [pc, #28]	; (800e0c4 <tcp_err+0x3c>)
 800e0a8:	4807      	ldr	r0, [pc, #28]	; (800e0c8 <tcp_err+0x40>)
 800e0aa:	f009 fe7f 	bl	8017dac <iprintf>
    pcb->errf = err;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	683a      	ldr	r2, [r7, #0]
 800e0b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	08019bf4 	.word	0x08019bf4
 800e0c4:	0801a1e0 	.word	0x0801a1e0
 800e0c8:	08019c38 	.word	0x08019c38

0800e0cc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b085      	sub	sp, #20
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d008      	beq.n	800e0ee <tcp_accept+0x22>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	7d1b      	ldrb	r3, [r3, #20]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d104      	bne.n	800e0ee <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	683a      	ldr	r2, [r7, #0]
 800e0ec:	619a      	str	r2, [r3, #24]
  }
}
 800e0ee:	bf00      	nop
 800e0f0:	3714      	adds	r7, #20
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
	...

0800e0fc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	4613      	mov	r3, r2
 800e108:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d107      	bne.n	800e120 <tcp_poll+0x24>
 800e110:	4b0e      	ldr	r3, [pc, #56]	; (800e14c <tcp_poll+0x50>)
 800e112:	f640 023d 	movw	r2, #2109	; 0x83d
 800e116:	490e      	ldr	r1, [pc, #56]	; (800e150 <tcp_poll+0x54>)
 800e118:	480e      	ldr	r0, [pc, #56]	; (800e154 <tcp_poll+0x58>)
 800e11a:	f009 fe47 	bl	8017dac <iprintf>
 800e11e:	e011      	b.n	800e144 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	7d1b      	ldrb	r3, [r3, #20]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d106      	bne.n	800e136 <tcp_poll+0x3a>
 800e128:	4b08      	ldr	r3, [pc, #32]	; (800e14c <tcp_poll+0x50>)
 800e12a:	f640 023e 	movw	r2, #2110	; 0x83e
 800e12e:	490a      	ldr	r1, [pc, #40]	; (800e158 <tcp_poll+0x5c>)
 800e130:	4808      	ldr	r0, [pc, #32]	; (800e154 <tcp_poll+0x58>)
 800e132:	f009 fe3b 	bl	8017dac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	68ba      	ldr	r2, [r7, #8]
 800e13a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	79fa      	ldrb	r2, [r7, #7]
 800e142:	775a      	strb	r2, [r3, #29]
}
 800e144:	3710      	adds	r7, #16
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	08019bf4 	.word	0x08019bf4
 800e150:	0801a208 	.word	0x0801a208
 800e154:	08019c38 	.word	0x08019c38
 800e158:	0801a220 	.word	0x0801a220

0800e15c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e15c:	b580      	push	{r7, lr}
 800e15e:	b082      	sub	sp, #8
 800e160:	af00      	add	r7, sp, #0
 800e162:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d107      	bne.n	800e17a <tcp_pcb_purge+0x1e>
 800e16a:	4b21      	ldr	r3, [pc, #132]	; (800e1f0 <tcp_pcb_purge+0x94>)
 800e16c:	f640 0251 	movw	r2, #2129	; 0x851
 800e170:	4920      	ldr	r1, [pc, #128]	; (800e1f4 <tcp_pcb_purge+0x98>)
 800e172:	4821      	ldr	r0, [pc, #132]	; (800e1f8 <tcp_pcb_purge+0x9c>)
 800e174:	f009 fe1a 	bl	8017dac <iprintf>
 800e178:	e037      	b.n	800e1ea <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	7d1b      	ldrb	r3, [r3, #20]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d033      	beq.n	800e1ea <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e186:	2b0a      	cmp	r3, #10
 800e188:	d02f      	beq.n	800e1ea <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d02b      	beq.n	800e1ea <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e196:	2b00      	cmp	r3, #0
 800e198:	d007      	beq.n	800e1aa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe f8ba 	bl	800c318 <pbuf_free>
      pcb->refused_data = NULL;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d002      	beq.n	800e1b8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 f986 	bl	800e4c4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1be:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7ff fcdb 	bl	800db80 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f7ff fcd6 	bl	800db80 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	66da      	str	r2, [r3, #108]	; 0x6c
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	08019bf4 	.word	0x08019bf4
 800e1f4:	0801a240 	.word	0x0801a240
 800e1f8:	08019c38 	.word	0x08019c38

0800e1fc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d106      	bne.n	800e21a <tcp_pcb_remove+0x1e>
 800e20c:	4b3e      	ldr	r3, [pc, #248]	; (800e308 <tcp_pcb_remove+0x10c>)
 800e20e:	f640 0283 	movw	r2, #2179	; 0x883
 800e212:	493e      	ldr	r1, [pc, #248]	; (800e30c <tcp_pcb_remove+0x110>)
 800e214:	483e      	ldr	r0, [pc, #248]	; (800e310 <tcp_pcb_remove+0x114>)
 800e216:	f009 fdc9 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d106      	bne.n	800e22e <tcp_pcb_remove+0x32>
 800e220:	4b39      	ldr	r3, [pc, #228]	; (800e308 <tcp_pcb_remove+0x10c>)
 800e222:	f640 0284 	movw	r2, #2180	; 0x884
 800e226:	493b      	ldr	r1, [pc, #236]	; (800e314 <tcp_pcb_remove+0x118>)
 800e228:	4839      	ldr	r0, [pc, #228]	; (800e310 <tcp_pcb_remove+0x114>)
 800e22a:	f009 fdbf 	bl	8017dac <iprintf>

  TCP_RMV(pcblist, pcb);
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	683a      	ldr	r2, [r7, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	d105      	bne.n	800e244 <tcp_pcb_remove+0x48>
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	68da      	ldr	r2, [r3, #12]
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	601a      	str	r2, [r3, #0]
 800e242:	e013      	b.n	800e26c <tcp_pcb_remove+0x70>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	60fb      	str	r3, [r7, #12]
 800e24a:	e00c      	b.n	800e266 <tcp_pcb_remove+0x6a>
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	683a      	ldr	r2, [r7, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d104      	bne.n	800e260 <tcp_pcb_remove+0x64>
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	68da      	ldr	r2, [r3, #12]
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	60da      	str	r2, [r3, #12]
 800e25e:	e005      	b.n	800e26c <tcp_pcb_remove+0x70>
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	60fb      	str	r3, [r7, #12]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1ef      	bne.n	800e24c <tcp_pcb_remove+0x50>
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	2200      	movs	r2, #0
 800e270:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e272:	6838      	ldr	r0, [r7, #0]
 800e274:	f7ff ff72 	bl	800e15c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	7d1b      	ldrb	r3, [r3, #20]
 800e27c:	2b0a      	cmp	r3, #10
 800e27e:	d013      	beq.n	800e2a8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e284:	2b01      	cmp	r3, #1
 800e286:	d00f      	beq.n	800e2a8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	8b5b      	ldrh	r3, [r3, #26]
 800e28c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e290:	2b00      	cmp	r3, #0
 800e292:	d009      	beq.n	800e2a8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	8b5b      	ldrh	r3, [r3, #26]
 800e298:	f043 0302 	orr.w	r3, r3, #2
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e2a2:	6838      	ldr	r0, [r7, #0]
 800e2a4:	f003 fbc6 	bl	8011a34 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	7d1b      	ldrb	r3, [r3, #20]
 800e2ac:	2b01      	cmp	r3, #1
 800e2ae:	d020      	beq.n	800e2f2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e2b0:	683b      	ldr	r3, [r7, #0]
 800e2b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d006      	beq.n	800e2c6 <tcp_pcb_remove+0xca>
 800e2b8:	4b13      	ldr	r3, [pc, #76]	; (800e308 <tcp_pcb_remove+0x10c>)
 800e2ba:	f640 0293 	movw	r2, #2195	; 0x893
 800e2be:	4916      	ldr	r1, [pc, #88]	; (800e318 <tcp_pcb_remove+0x11c>)
 800e2c0:	4813      	ldr	r0, [pc, #76]	; (800e310 <tcp_pcb_remove+0x114>)
 800e2c2:	f009 fd73 	bl	8017dac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d006      	beq.n	800e2dc <tcp_pcb_remove+0xe0>
 800e2ce:	4b0e      	ldr	r3, [pc, #56]	; (800e308 <tcp_pcb_remove+0x10c>)
 800e2d0:	f640 0294 	movw	r2, #2196	; 0x894
 800e2d4:	4911      	ldr	r1, [pc, #68]	; (800e31c <tcp_pcb_remove+0x120>)
 800e2d6:	480e      	ldr	r0, [pc, #56]	; (800e310 <tcp_pcb_remove+0x114>)
 800e2d8:	f009 fd68 	bl	8017dac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d006      	beq.n	800e2f2 <tcp_pcb_remove+0xf6>
 800e2e4:	4b08      	ldr	r3, [pc, #32]	; (800e308 <tcp_pcb_remove+0x10c>)
 800e2e6:	f640 0296 	movw	r2, #2198	; 0x896
 800e2ea:	490d      	ldr	r1, [pc, #52]	; (800e320 <tcp_pcb_remove+0x124>)
 800e2ec:	4808      	ldr	r0, [pc, #32]	; (800e310 <tcp_pcb_remove+0x114>)
 800e2ee:	f009 fd5d 	bl	8017dac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e2fe:	bf00      	nop
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}
 800e306:	bf00      	nop
 800e308:	08019bf4 	.word	0x08019bf4
 800e30c:	0801a25c 	.word	0x0801a25c
 800e310:	08019c38 	.word	0x08019c38
 800e314:	0801a278 	.word	0x0801a278
 800e318:	0801a298 	.word	0x0801a298
 800e31c:	0801a2b0 	.word	0x0801a2b0
 800e320:	0801a2cc 	.word	0x0801a2cc

0800e324 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d106      	bne.n	800e340 <tcp_next_iss+0x1c>
 800e332:	4b0a      	ldr	r3, [pc, #40]	; (800e35c <tcp_next_iss+0x38>)
 800e334:	f640 02af 	movw	r2, #2223	; 0x8af
 800e338:	4909      	ldr	r1, [pc, #36]	; (800e360 <tcp_next_iss+0x3c>)
 800e33a:	480a      	ldr	r0, [pc, #40]	; (800e364 <tcp_next_iss+0x40>)
 800e33c:	f009 fd36 	bl	8017dac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e340:	4b09      	ldr	r3, [pc, #36]	; (800e368 <tcp_next_iss+0x44>)
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	4b09      	ldr	r3, [pc, #36]	; (800e36c <tcp_next_iss+0x48>)
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4413      	add	r3, r2
 800e34a:	4a07      	ldr	r2, [pc, #28]	; (800e368 <tcp_next_iss+0x44>)
 800e34c:	6013      	str	r3, [r2, #0]
  return iss;
 800e34e:	4b06      	ldr	r3, [pc, #24]	; (800e368 <tcp_next_iss+0x44>)
 800e350:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e352:	4618      	mov	r0, r3
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}
 800e35a:	bf00      	nop
 800e35c:	08019bf4 	.word	0x08019bf4
 800e360:	0801a2e4 	.word	0x0801a2e4
 800e364:	08019c38 	.word	0x08019c38
 800e368:	20000038 	.word	0x20000038
 800e36c:	2000ce38 	.word	0x2000ce38

0800e370 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b086      	sub	sp, #24
 800e374:	af00      	add	r7, sp, #0
 800e376:	4603      	mov	r3, r0
 800e378:	60b9      	str	r1, [r7, #8]
 800e37a:	607a      	str	r2, [r7, #4]
 800e37c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d106      	bne.n	800e392 <tcp_eff_send_mss_netif+0x22>
 800e384:	4b14      	ldr	r3, [pc, #80]	; (800e3d8 <tcp_eff_send_mss_netif+0x68>)
 800e386:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e38a:	4914      	ldr	r1, [pc, #80]	; (800e3dc <tcp_eff_send_mss_netif+0x6c>)
 800e38c:	4814      	ldr	r0, [pc, #80]	; (800e3e0 <tcp_eff_send_mss_netif+0x70>)
 800e38e:	f009 fd0d 	bl	8017dac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d101      	bne.n	800e39c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e398:	89fb      	ldrh	r3, [r7, #14]
 800e39a:	e019      	b.n	800e3d0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3a0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e3a2:	8afb      	ldrh	r3, [r7, #22]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d012      	beq.n	800e3ce <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e3a8:	2328      	movs	r3, #40	; 0x28
 800e3aa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e3ac:	8afa      	ldrh	r2, [r7, #22]
 800e3ae:	8abb      	ldrh	r3, [r7, #20]
 800e3b0:	429a      	cmp	r2, r3
 800e3b2:	d904      	bls.n	800e3be <tcp_eff_send_mss_netif+0x4e>
 800e3b4:	8afa      	ldrh	r2, [r7, #22]
 800e3b6:	8abb      	ldrh	r3, [r7, #20]
 800e3b8:	1ad3      	subs	r3, r2, r3
 800e3ba:	b29b      	uxth	r3, r3
 800e3bc:	e000      	b.n	800e3c0 <tcp_eff_send_mss_netif+0x50>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e3c2:	8a7a      	ldrh	r2, [r7, #18]
 800e3c4:	89fb      	ldrh	r3, [r7, #14]
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	bf28      	it	cs
 800e3ca:	4613      	movcs	r3, r2
 800e3cc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e3ce:	89fb      	ldrh	r3, [r7, #14]
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3718      	adds	r7, #24
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}
 800e3d8:	08019bf4 	.word	0x08019bf4
 800e3dc:	0801a300 	.word	0x0801a300
 800e3e0:	08019c38 	.word	0x08019c38

0800e3e4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
 800e3ec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d119      	bne.n	800e42c <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e3f8:	4b10      	ldr	r3, [pc, #64]	; (800e43c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e3fa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e3fe:	4910      	ldr	r1, [pc, #64]	; (800e440 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e400:	4810      	ldr	r0, [pc, #64]	; (800e444 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e402:	f009 fcd3 	bl	8017dac <iprintf>

  while (pcb != NULL) {
 800e406:	e011      	b.n	800e42c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d108      	bne.n	800e426 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	68db      	ldr	r3, [r3, #12]
 800e418:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e41a:	68f8      	ldr	r0, [r7, #12]
 800e41c:	f7fe fd20 	bl	800ce60 <tcp_abort>
      pcb = next;
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	60fb      	str	r3, [r7, #12]
 800e424:	e002      	b.n	800e42c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	68db      	ldr	r3, [r3, #12]
 800e42a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1ea      	bne.n	800e408 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e432:	bf00      	nop
 800e434:	bf00      	nop
 800e436:	3710      	adds	r7, #16
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}
 800e43c:	08019bf4 	.word	0x08019bf4
 800e440:	0801a328 	.word	0x0801a328
 800e444:	08019c38 	.word	0x08019c38

0800e448 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b084      	sub	sp, #16
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
 800e450:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d02a      	beq.n	800e4ae <tcp_netif_ip_addr_changed+0x66>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d026      	beq.n	800e4ae <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e460:	4b15      	ldr	r3, [pc, #84]	; (800e4b8 <tcp_netif_ip_addr_changed+0x70>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4619      	mov	r1, r3
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f7ff ffbc 	bl	800e3e4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e46c:	4b13      	ldr	r3, [pc, #76]	; (800e4bc <tcp_netif_ip_addr_changed+0x74>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	4619      	mov	r1, r3
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f7ff ffb6 	bl	800e3e4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d017      	beq.n	800e4ae <tcp_netif_ip_addr_changed+0x66>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d013      	beq.n	800e4ae <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e486:	4b0e      	ldr	r3, [pc, #56]	; (800e4c0 <tcp_netif_ip_addr_changed+0x78>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	60fb      	str	r3, [r7, #12]
 800e48c:	e00c      	b.n	800e4a8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	429a      	cmp	r2, r3
 800e498:	d103      	bne.n	800e4a2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	60fb      	str	r3, [r7, #12]
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1ef      	bne.n	800e48e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e4ae:	bf00      	nop
 800e4b0:	3710      	adds	r7, #16
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	2000ce44 	.word	0x2000ce44
 800e4bc:	2000ce3c 	.word	0x2000ce3c
 800e4c0:	2000ce40 	.word	0x2000ce40

0800e4c4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b082      	sub	sp, #8
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d007      	beq.n	800e4e4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff fb51 	bl	800db80 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e4ec:	b590      	push	{r4, r7, lr}
 800e4ee:	b08d      	sub	sp, #52	; 0x34
 800e4f0:	af04      	add	r7, sp, #16
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d105      	bne.n	800e508 <tcp_input+0x1c>
 800e4fc:	4b9b      	ldr	r3, [pc, #620]	; (800e76c <tcp_input+0x280>)
 800e4fe:	2283      	movs	r2, #131	; 0x83
 800e500:	499b      	ldr	r1, [pc, #620]	; (800e770 <tcp_input+0x284>)
 800e502:	489c      	ldr	r0, [pc, #624]	; (800e774 <tcp_input+0x288>)
 800e504:	f009 fc52 	bl	8017dac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	4a9a      	ldr	r2, [pc, #616]	; (800e778 <tcp_input+0x28c>)
 800e50e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	895b      	ldrh	r3, [r3, #10]
 800e514:	2b13      	cmp	r3, #19
 800e516:	f240 83d1 	bls.w	800ecbc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e51a:	4b98      	ldr	r3, [pc, #608]	; (800e77c <tcp_input+0x290>)
 800e51c:	695b      	ldr	r3, [r3, #20]
 800e51e:	4a97      	ldr	r2, [pc, #604]	; (800e77c <tcp_input+0x290>)
 800e520:	6812      	ldr	r2, [r2, #0]
 800e522:	4611      	mov	r1, r2
 800e524:	4618      	mov	r0, r3
 800e526:	f008 fa57 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	f040 83c7 	bne.w	800ecc0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e532:	4b92      	ldr	r3, [pc, #584]	; (800e77c <tcp_input+0x290>)
 800e534:	695b      	ldr	r3, [r3, #20]
 800e536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e53a:	2be0      	cmp	r3, #224	; 0xe0
 800e53c:	f000 83c0 	beq.w	800ecc0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e540:	4b8d      	ldr	r3, [pc, #564]	; (800e778 <tcp_input+0x28c>)
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	899b      	ldrh	r3, [r3, #12]
 800e546:	b29b      	uxth	r3, r3
 800e548:	4618      	mov	r0, r3
 800e54a:	f7fc fab1 	bl	800aab0 <lwip_htons>
 800e54e:	4603      	mov	r3, r0
 800e550:	0b1b      	lsrs	r3, r3, #12
 800e552:	b29b      	uxth	r3, r3
 800e554:	b2db      	uxtb	r3, r3
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e55a:	7cbb      	ldrb	r3, [r7, #18]
 800e55c:	2b13      	cmp	r3, #19
 800e55e:	f240 83b1 	bls.w	800ecc4 <tcp_input+0x7d8>
 800e562:	7cbb      	ldrb	r3, [r7, #18]
 800e564:	b29a      	uxth	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	891b      	ldrh	r3, [r3, #8]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	f200 83aa 	bhi.w	800ecc4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e570:	7cbb      	ldrb	r3, [r7, #18]
 800e572:	b29b      	uxth	r3, r3
 800e574:	3b14      	subs	r3, #20
 800e576:	b29a      	uxth	r2, r3
 800e578:	4b81      	ldr	r3, [pc, #516]	; (800e780 <tcp_input+0x294>)
 800e57a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e57c:	4b81      	ldr	r3, [pc, #516]	; (800e784 <tcp_input+0x298>)
 800e57e:	2200      	movs	r2, #0
 800e580:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	895a      	ldrh	r2, [r3, #10]
 800e586:	7cbb      	ldrb	r3, [r7, #18]
 800e588:	b29b      	uxth	r3, r3
 800e58a:	429a      	cmp	r2, r3
 800e58c:	d309      	bcc.n	800e5a2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e58e:	4b7c      	ldr	r3, [pc, #496]	; (800e780 <tcp_input+0x294>)
 800e590:	881a      	ldrh	r2, [r3, #0]
 800e592:	4b7d      	ldr	r3, [pc, #500]	; (800e788 <tcp_input+0x29c>)
 800e594:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e596:	7cbb      	ldrb	r3, [r7, #18]
 800e598:	4619      	mov	r1, r3
 800e59a:	6878      	ldr	r0, [r7, #4]
 800e59c:	f7fd fe36 	bl	800c20c <pbuf_remove_header>
 800e5a0:	e04e      	b.n	800e640 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d105      	bne.n	800e5b6 <tcp_input+0xca>
 800e5aa:	4b70      	ldr	r3, [pc, #448]	; (800e76c <tcp_input+0x280>)
 800e5ac:	22c2      	movs	r2, #194	; 0xc2
 800e5ae:	4977      	ldr	r1, [pc, #476]	; (800e78c <tcp_input+0x2a0>)
 800e5b0:	4870      	ldr	r0, [pc, #448]	; (800e774 <tcp_input+0x288>)
 800e5b2:	f009 fbfb 	bl	8017dac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e5b6:	2114      	movs	r1, #20
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f7fd fe27 	bl	800c20c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	895a      	ldrh	r2, [r3, #10]
 800e5c2:	4b71      	ldr	r3, [pc, #452]	; (800e788 <tcp_input+0x29c>)
 800e5c4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e5c6:	4b6e      	ldr	r3, [pc, #440]	; (800e780 <tcp_input+0x294>)
 800e5c8:	881a      	ldrh	r2, [r3, #0]
 800e5ca:	4b6f      	ldr	r3, [pc, #444]	; (800e788 <tcp_input+0x29c>)
 800e5cc:	881b      	ldrh	r3, [r3, #0]
 800e5ce:	1ad3      	subs	r3, r2, r3
 800e5d0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e5d2:	4b6d      	ldr	r3, [pc, #436]	; (800e788 <tcp_input+0x29c>)
 800e5d4:	881b      	ldrh	r3, [r3, #0]
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7fd fe17 	bl	800c20c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	895b      	ldrh	r3, [r3, #10]
 800e5e4:	8a3a      	ldrh	r2, [r7, #16]
 800e5e6:	429a      	cmp	r2, r3
 800e5e8:	f200 836e 	bhi.w	800ecc8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	4a64      	ldr	r2, [pc, #400]	; (800e784 <tcp_input+0x298>)
 800e5f4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	8a3a      	ldrh	r2, [r7, #16]
 800e5fc:	4611      	mov	r1, r2
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fd fe04 	bl	800c20c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	891a      	ldrh	r2, [r3, #8]
 800e608:	8a3b      	ldrh	r3, [r7, #16]
 800e60a:	1ad3      	subs	r3, r2, r3
 800e60c:	b29a      	uxth	r2, r3
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	895b      	ldrh	r3, [r3, #10]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d005      	beq.n	800e626 <tcp_input+0x13a>
 800e61a:	4b54      	ldr	r3, [pc, #336]	; (800e76c <tcp_input+0x280>)
 800e61c:	22df      	movs	r2, #223	; 0xdf
 800e61e:	495c      	ldr	r1, [pc, #368]	; (800e790 <tcp_input+0x2a4>)
 800e620:	4854      	ldr	r0, [pc, #336]	; (800e774 <tcp_input+0x288>)
 800e622:	f009 fbc3 	bl	8017dac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	891a      	ldrh	r2, [r3, #8]
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	891b      	ldrh	r3, [r3, #8]
 800e630:	429a      	cmp	r2, r3
 800e632:	d005      	beq.n	800e640 <tcp_input+0x154>
 800e634:	4b4d      	ldr	r3, [pc, #308]	; (800e76c <tcp_input+0x280>)
 800e636:	22e0      	movs	r2, #224	; 0xe0
 800e638:	4956      	ldr	r1, [pc, #344]	; (800e794 <tcp_input+0x2a8>)
 800e63a:	484e      	ldr	r0, [pc, #312]	; (800e774 <tcp_input+0x288>)
 800e63c:	f009 fbb6 	bl	8017dac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e640:	4b4d      	ldr	r3, [pc, #308]	; (800e778 <tcp_input+0x28c>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	881b      	ldrh	r3, [r3, #0]
 800e646:	b29b      	uxth	r3, r3
 800e648:	4a4b      	ldr	r2, [pc, #300]	; (800e778 <tcp_input+0x28c>)
 800e64a:	6814      	ldr	r4, [r2, #0]
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7fc fa2f 	bl	800aab0 <lwip_htons>
 800e652:	4603      	mov	r3, r0
 800e654:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e656:	4b48      	ldr	r3, [pc, #288]	; (800e778 <tcp_input+0x28c>)
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	885b      	ldrh	r3, [r3, #2]
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	4a46      	ldr	r2, [pc, #280]	; (800e778 <tcp_input+0x28c>)
 800e660:	6814      	ldr	r4, [r2, #0]
 800e662:	4618      	mov	r0, r3
 800e664:	f7fc fa24 	bl	800aab0 <lwip_htons>
 800e668:	4603      	mov	r3, r0
 800e66a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e66c:	4b42      	ldr	r3, [pc, #264]	; (800e778 <tcp_input+0x28c>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	4a41      	ldr	r2, [pc, #260]	; (800e778 <tcp_input+0x28c>)
 800e674:	6814      	ldr	r4, [r2, #0]
 800e676:	4618      	mov	r0, r3
 800e678:	f7fc fa2f 	bl	800aada <lwip_htonl>
 800e67c:	4603      	mov	r3, r0
 800e67e:	6063      	str	r3, [r4, #4]
 800e680:	6863      	ldr	r3, [r4, #4]
 800e682:	4a45      	ldr	r2, [pc, #276]	; (800e798 <tcp_input+0x2ac>)
 800e684:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e686:	4b3c      	ldr	r3, [pc, #240]	; (800e778 <tcp_input+0x28c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	689b      	ldr	r3, [r3, #8]
 800e68c:	4a3a      	ldr	r2, [pc, #232]	; (800e778 <tcp_input+0x28c>)
 800e68e:	6814      	ldr	r4, [r2, #0]
 800e690:	4618      	mov	r0, r3
 800e692:	f7fc fa22 	bl	800aada <lwip_htonl>
 800e696:	4603      	mov	r3, r0
 800e698:	60a3      	str	r3, [r4, #8]
 800e69a:	68a3      	ldr	r3, [r4, #8]
 800e69c:	4a3f      	ldr	r2, [pc, #252]	; (800e79c <tcp_input+0x2b0>)
 800e69e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e6a0:	4b35      	ldr	r3, [pc, #212]	; (800e778 <tcp_input+0x28c>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	89db      	ldrh	r3, [r3, #14]
 800e6a6:	b29b      	uxth	r3, r3
 800e6a8:	4a33      	ldr	r2, [pc, #204]	; (800e778 <tcp_input+0x28c>)
 800e6aa:	6814      	ldr	r4, [r2, #0]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7fc f9ff 	bl	800aab0 <lwip_htons>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e6b6:	4b30      	ldr	r3, [pc, #192]	; (800e778 <tcp_input+0x28c>)
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	899b      	ldrh	r3, [r3, #12]
 800e6bc:	b29b      	uxth	r3, r3
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fc f9f6 	bl	800aab0 <lwip_htons>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6cc:	b2da      	uxtb	r2, r3
 800e6ce:	4b34      	ldr	r3, [pc, #208]	; (800e7a0 <tcp_input+0x2b4>)
 800e6d0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	891a      	ldrh	r2, [r3, #8]
 800e6d6:	4b33      	ldr	r3, [pc, #204]	; (800e7a4 <tcp_input+0x2b8>)
 800e6d8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e6da:	4b31      	ldr	r3, [pc, #196]	; (800e7a0 <tcp_input+0x2b4>)
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	f003 0303 	and.w	r3, r3, #3
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00c      	beq.n	800e700 <tcp_input+0x214>
    tcplen++;
 800e6e6:	4b2f      	ldr	r3, [pc, #188]	; (800e7a4 <tcp_input+0x2b8>)
 800e6e8:	881b      	ldrh	r3, [r3, #0]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	b29a      	uxth	r2, r3
 800e6ee:	4b2d      	ldr	r3, [pc, #180]	; (800e7a4 <tcp_input+0x2b8>)
 800e6f0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	891a      	ldrh	r2, [r3, #8]
 800e6f6:	4b2b      	ldr	r3, [pc, #172]	; (800e7a4 <tcp_input+0x2b8>)
 800e6f8:	881b      	ldrh	r3, [r3, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	f200 82e6 	bhi.w	800eccc <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e700:	2300      	movs	r3, #0
 800e702:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e704:	4b28      	ldr	r3, [pc, #160]	; (800e7a8 <tcp_input+0x2bc>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	61fb      	str	r3, [r7, #28]
 800e70a:	e09d      	b.n	800e848 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e70c:	69fb      	ldr	r3, [r7, #28]
 800e70e:	7d1b      	ldrb	r3, [r3, #20]
 800e710:	2b00      	cmp	r3, #0
 800e712:	d105      	bne.n	800e720 <tcp_input+0x234>
 800e714:	4b15      	ldr	r3, [pc, #84]	; (800e76c <tcp_input+0x280>)
 800e716:	22fb      	movs	r2, #251	; 0xfb
 800e718:	4924      	ldr	r1, [pc, #144]	; (800e7ac <tcp_input+0x2c0>)
 800e71a:	4816      	ldr	r0, [pc, #88]	; (800e774 <tcp_input+0x288>)
 800e71c:	f009 fb46 	bl	8017dac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e720:	69fb      	ldr	r3, [r7, #28]
 800e722:	7d1b      	ldrb	r3, [r3, #20]
 800e724:	2b0a      	cmp	r3, #10
 800e726:	d105      	bne.n	800e734 <tcp_input+0x248>
 800e728:	4b10      	ldr	r3, [pc, #64]	; (800e76c <tcp_input+0x280>)
 800e72a:	22fc      	movs	r2, #252	; 0xfc
 800e72c:	4920      	ldr	r1, [pc, #128]	; (800e7b0 <tcp_input+0x2c4>)
 800e72e:	4811      	ldr	r0, [pc, #68]	; (800e774 <tcp_input+0x288>)
 800e730:	f009 fb3c 	bl	8017dac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e734:	69fb      	ldr	r3, [r7, #28]
 800e736:	7d1b      	ldrb	r3, [r3, #20]
 800e738:	2b01      	cmp	r3, #1
 800e73a:	d105      	bne.n	800e748 <tcp_input+0x25c>
 800e73c:	4b0b      	ldr	r3, [pc, #44]	; (800e76c <tcp_input+0x280>)
 800e73e:	22fd      	movs	r2, #253	; 0xfd
 800e740:	491c      	ldr	r1, [pc, #112]	; (800e7b4 <tcp_input+0x2c8>)
 800e742:	480c      	ldr	r0, [pc, #48]	; (800e774 <tcp_input+0x288>)
 800e744:	f009 fb32 	bl	8017dac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	7a1b      	ldrb	r3, [r3, #8]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d033      	beq.n	800e7b8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	7a1a      	ldrb	r2, [r3, #8]
 800e754:	4b09      	ldr	r3, [pc, #36]	; (800e77c <tcp_input+0x290>)
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e75c:	3301      	adds	r3, #1
 800e75e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e760:	429a      	cmp	r2, r3
 800e762:	d029      	beq.n	800e7b8 <tcp_input+0x2cc>
      prev = pcb;
 800e764:	69fb      	ldr	r3, [r7, #28]
 800e766:	61bb      	str	r3, [r7, #24]
      continue;
 800e768:	e06b      	b.n	800e842 <tcp_input+0x356>
 800e76a:	bf00      	nop
 800e76c:	0801a35c 	.word	0x0801a35c
 800e770:	0801a390 	.word	0x0801a390
 800e774:	0801a3a8 	.word	0x0801a3a8
 800e778:	2000ce60 	.word	0x2000ce60
 800e77c:	200096c4 	.word	0x200096c4
 800e780:	2000ce64 	.word	0x2000ce64
 800e784:	2000ce68 	.word	0x2000ce68
 800e788:	2000ce66 	.word	0x2000ce66
 800e78c:	0801a3d0 	.word	0x0801a3d0
 800e790:	0801a3e0 	.word	0x0801a3e0
 800e794:	0801a3ec 	.word	0x0801a3ec
 800e798:	2000ce70 	.word	0x2000ce70
 800e79c:	2000ce74 	.word	0x2000ce74
 800e7a0:	2000ce7c 	.word	0x2000ce7c
 800e7a4:	2000ce7a 	.word	0x2000ce7a
 800e7a8:	2000ce44 	.word	0x2000ce44
 800e7ac:	0801a40c 	.word	0x0801a40c
 800e7b0:	0801a434 	.word	0x0801a434
 800e7b4:	0801a460 	.word	0x0801a460
    }

    if (pcb->remote_port == tcphdr->src &&
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	8b1a      	ldrh	r2, [r3, #24]
 800e7bc:	4b72      	ldr	r3, [pc, #456]	; (800e988 <tcp_input+0x49c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	881b      	ldrh	r3, [r3, #0]
 800e7c2:	b29b      	uxth	r3, r3
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d13a      	bne.n	800e83e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e7c8:	69fb      	ldr	r3, [r7, #28]
 800e7ca:	8ada      	ldrh	r2, [r3, #22]
 800e7cc:	4b6e      	ldr	r3, [pc, #440]	; (800e988 <tcp_input+0x49c>)
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	885b      	ldrh	r3, [r3, #2]
 800e7d2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d132      	bne.n	800e83e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7d8:	69fb      	ldr	r3, [r7, #28]
 800e7da:	685a      	ldr	r2, [r3, #4]
 800e7dc:	4b6b      	ldr	r3, [pc, #428]	; (800e98c <tcp_input+0x4a0>)
 800e7de:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d12c      	bne.n	800e83e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e7e4:	69fb      	ldr	r3, [r7, #28]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	4b68      	ldr	r3, [pc, #416]	; (800e98c <tcp_input+0x4a0>)
 800e7ea:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e7ec:	429a      	cmp	r2, r3
 800e7ee:	d126      	bne.n	800e83e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e7f0:	69fb      	ldr	r3, [r7, #28]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	69fa      	ldr	r2, [r7, #28]
 800e7f6:	429a      	cmp	r2, r3
 800e7f8:	d106      	bne.n	800e808 <tcp_input+0x31c>
 800e7fa:	4b65      	ldr	r3, [pc, #404]	; (800e990 <tcp_input+0x4a4>)
 800e7fc:	f240 120d 	movw	r2, #269	; 0x10d
 800e800:	4964      	ldr	r1, [pc, #400]	; (800e994 <tcp_input+0x4a8>)
 800e802:	4865      	ldr	r0, [pc, #404]	; (800e998 <tcp_input+0x4ac>)
 800e804:	f009 fad2 	bl	8017dac <iprintf>
      if (prev != NULL) {
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00a      	beq.n	800e824 <tcp_input+0x338>
        prev->next = pcb->next;
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	68da      	ldr	r2, [r3, #12]
 800e812:	69bb      	ldr	r3, [r7, #24]
 800e814:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e816:	4b61      	ldr	r3, [pc, #388]	; (800e99c <tcp_input+0x4b0>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	69fb      	ldr	r3, [r7, #28]
 800e81c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e81e:	4a5f      	ldr	r2, [pc, #380]	; (800e99c <tcp_input+0x4b0>)
 800e820:	69fb      	ldr	r3, [r7, #28]
 800e822:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	68db      	ldr	r3, [r3, #12]
 800e828:	69fa      	ldr	r2, [r7, #28]
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d111      	bne.n	800e852 <tcp_input+0x366>
 800e82e:	4b58      	ldr	r3, [pc, #352]	; (800e990 <tcp_input+0x4a4>)
 800e830:	f240 1215 	movw	r2, #277	; 0x115
 800e834:	495a      	ldr	r1, [pc, #360]	; (800e9a0 <tcp_input+0x4b4>)
 800e836:	4858      	ldr	r0, [pc, #352]	; (800e998 <tcp_input+0x4ac>)
 800e838:	f009 fab8 	bl	8017dac <iprintf>
      break;
 800e83c:	e009      	b.n	800e852 <tcp_input+0x366>
    }
    prev = pcb;
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	68db      	ldr	r3, [r3, #12]
 800e846:	61fb      	str	r3, [r7, #28]
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	f47f af5e 	bne.w	800e70c <tcp_input+0x220>
 800e850:	e000      	b.n	800e854 <tcp_input+0x368>
      break;
 800e852:	bf00      	nop
  }

  if (pcb == NULL) {
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	2b00      	cmp	r3, #0
 800e858:	f040 80aa 	bne.w	800e9b0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e85c:	4b51      	ldr	r3, [pc, #324]	; (800e9a4 <tcp_input+0x4b8>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	61fb      	str	r3, [r7, #28]
 800e862:	e03f      	b.n	800e8e4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e864:	69fb      	ldr	r3, [r7, #28]
 800e866:	7d1b      	ldrb	r3, [r3, #20]
 800e868:	2b0a      	cmp	r3, #10
 800e86a:	d006      	beq.n	800e87a <tcp_input+0x38e>
 800e86c:	4b48      	ldr	r3, [pc, #288]	; (800e990 <tcp_input+0x4a4>)
 800e86e:	f240 121f 	movw	r2, #287	; 0x11f
 800e872:	494d      	ldr	r1, [pc, #308]	; (800e9a8 <tcp_input+0x4bc>)
 800e874:	4848      	ldr	r0, [pc, #288]	; (800e998 <tcp_input+0x4ac>)
 800e876:	f009 fa99 	bl	8017dac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	7a1b      	ldrb	r3, [r3, #8]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d009      	beq.n	800e896 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e882:	69fb      	ldr	r3, [r7, #28]
 800e884:	7a1a      	ldrb	r2, [r3, #8]
 800e886:	4b41      	ldr	r3, [pc, #260]	; (800e98c <tcp_input+0x4a0>)
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e88e:	3301      	adds	r3, #1
 800e890:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e892:	429a      	cmp	r2, r3
 800e894:	d122      	bne.n	800e8dc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e896:	69fb      	ldr	r3, [r7, #28]
 800e898:	8b1a      	ldrh	r2, [r3, #24]
 800e89a:	4b3b      	ldr	r3, [pc, #236]	; (800e988 <tcp_input+0x49c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	881b      	ldrh	r3, [r3, #0]
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	d11b      	bne.n	800e8de <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e8a6:	69fb      	ldr	r3, [r7, #28]
 800e8a8:	8ada      	ldrh	r2, [r3, #22]
 800e8aa:	4b37      	ldr	r3, [pc, #220]	; (800e988 <tcp_input+0x49c>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	885b      	ldrh	r3, [r3, #2]
 800e8b0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d113      	bne.n	800e8de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	4b34      	ldr	r3, [pc, #208]	; (800e98c <tcp_input+0x4a0>)
 800e8bc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d10d      	bne.n	800e8de <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	4b31      	ldr	r3, [pc, #196]	; (800e98c <tcp_input+0x4a0>)
 800e8c8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d107      	bne.n	800e8de <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e8ce:	69f8      	ldr	r0, [r7, #28]
 800e8d0:	f000 fb56 	bl	800ef80 <tcp_timewait_input>
        }
        pbuf_free(p);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7fd fd1f 	bl	800c318 <pbuf_free>
        return;
 800e8da:	e1fd      	b.n	800ecd8 <tcp_input+0x7ec>
        continue;
 800e8dc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	61fb      	str	r3, [r7, #28]
 800e8e4:	69fb      	ldr	r3, [r7, #28]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d1bc      	bne.n	800e864 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e8ee:	4b2f      	ldr	r3, [pc, #188]	; (800e9ac <tcp_input+0x4c0>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	617b      	str	r3, [r7, #20]
 800e8f4:	e02a      	b.n	800e94c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	7a1b      	ldrb	r3, [r3, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00c      	beq.n	800e918 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e8fe:	697b      	ldr	r3, [r7, #20]
 800e900:	7a1a      	ldrb	r2, [r3, #8]
 800e902:	4b22      	ldr	r3, [pc, #136]	; (800e98c <tcp_input+0x4a0>)
 800e904:	685b      	ldr	r3, [r3, #4]
 800e906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e90a:	3301      	adds	r3, #1
 800e90c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e90e:	429a      	cmp	r2, r3
 800e910:	d002      	beq.n	800e918 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	61bb      	str	r3, [r7, #24]
        continue;
 800e916:	e016      	b.n	800e946 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e918:	697b      	ldr	r3, [r7, #20]
 800e91a:	8ada      	ldrh	r2, [r3, #22]
 800e91c:	4b1a      	ldr	r3, [pc, #104]	; (800e988 <tcp_input+0x49c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	885b      	ldrh	r3, [r3, #2]
 800e922:	b29b      	uxth	r3, r3
 800e924:	429a      	cmp	r2, r3
 800e926:	d10c      	bne.n	800e942 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e928:	697b      	ldr	r3, [r7, #20]
 800e92a:	681a      	ldr	r2, [r3, #0]
 800e92c:	4b17      	ldr	r3, [pc, #92]	; (800e98c <tcp_input+0x4a0>)
 800e92e:	695b      	ldr	r3, [r3, #20]
 800e930:	429a      	cmp	r2, r3
 800e932:	d00f      	beq.n	800e954 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d00d      	beq.n	800e956 <tcp_input+0x46a>
 800e93a:	697b      	ldr	r3, [r7, #20]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d009      	beq.n	800e956 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e946:	697b      	ldr	r3, [r7, #20]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	617b      	str	r3, [r7, #20]
 800e94c:	697b      	ldr	r3, [r7, #20]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d1d1      	bne.n	800e8f6 <tcp_input+0x40a>
 800e952:	e000      	b.n	800e956 <tcp_input+0x46a>
            break;
 800e954:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d029      	beq.n	800e9b0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00a      	beq.n	800e978 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	68da      	ldr	r2, [r3, #12]
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e96a:	4b10      	ldr	r3, [pc, #64]	; (800e9ac <tcp_input+0x4c0>)
 800e96c:	681a      	ldr	r2, [r3, #0]
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e972:	4a0e      	ldr	r2, [pc, #56]	; (800e9ac <tcp_input+0x4c0>)
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e978:	6978      	ldr	r0, [r7, #20]
 800e97a:	f000 fa03 	bl	800ed84 <tcp_listen_input>
      }
      pbuf_free(p);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7fd fcca 	bl	800c318 <pbuf_free>
      return;
 800e984:	e1a8      	b.n	800ecd8 <tcp_input+0x7ec>
 800e986:	bf00      	nop
 800e988:	2000ce60 	.word	0x2000ce60
 800e98c:	200096c4 	.word	0x200096c4
 800e990:	0801a35c 	.word	0x0801a35c
 800e994:	0801a488 	.word	0x0801a488
 800e998:	0801a3a8 	.word	0x0801a3a8
 800e99c:	2000ce44 	.word	0x2000ce44
 800e9a0:	0801a4b4 	.word	0x0801a4b4
 800e9a4:	2000ce48 	.word	0x2000ce48
 800e9a8:	0801a4e0 	.word	0x0801a4e0
 800e9ac:	2000ce40 	.word	0x2000ce40
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 8158 	beq.w	800ec68 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e9b8:	4b95      	ldr	r3, [pc, #596]	; (800ec10 <tcp_input+0x724>)
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	891a      	ldrh	r2, [r3, #8]
 800e9c2:	4b93      	ldr	r3, [pc, #588]	; (800ec10 <tcp_input+0x724>)
 800e9c4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e9c6:	4a92      	ldr	r2, [pc, #584]	; (800ec10 <tcp_input+0x724>)
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e9cc:	4b91      	ldr	r3, [pc, #580]	; (800ec14 <tcp_input+0x728>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a8f      	ldr	r2, [pc, #572]	; (800ec10 <tcp_input+0x724>)
 800e9d2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e9d4:	4b90      	ldr	r3, [pc, #576]	; (800ec18 <tcp_input+0x72c>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e9da:	4b90      	ldr	r3, [pc, #576]	; (800ec1c <tcp_input+0x730>)
 800e9dc:	2200      	movs	r2, #0
 800e9de:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e9e0:	4b8f      	ldr	r3, [pc, #572]	; (800ec20 <tcp_input+0x734>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e9e6:	4b8f      	ldr	r3, [pc, #572]	; (800ec24 <tcp_input+0x738>)
 800e9e8:	781b      	ldrb	r3, [r3, #0]
 800e9ea:	f003 0308 	and.w	r3, r3, #8
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d006      	beq.n	800ea00 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	7b5b      	ldrb	r3, [r3, #13]
 800e9f6:	f043 0301 	orr.w	r3, r3, #1
 800e9fa:	b2da      	uxtb	r2, r3
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d017      	beq.n	800ea38 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea08:	69f8      	ldr	r0, [r7, #28]
 800ea0a:	f7ff f83d 	bl	800da88 <tcp_process_refused_data>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	f113 0f0d 	cmn.w	r3, #13
 800ea14:	d007      	beq.n	800ea26 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00c      	beq.n	800ea38 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ea1e:	4b82      	ldr	r3, [pc, #520]	; (800ec28 <tcp_input+0x73c>)
 800ea20:	881b      	ldrh	r3, [r3, #0]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d008      	beq.n	800ea38 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ea26:	69fb      	ldr	r3, [r7, #28]
 800ea28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f040 80e3 	bne.w	800ebf6 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ea30:	69f8      	ldr	r0, [r7, #28]
 800ea32:	f003 fe05 	bl	8012640 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ea36:	e0de      	b.n	800ebf6 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ea38:	4a7c      	ldr	r2, [pc, #496]	; (800ec2c <tcp_input+0x740>)
 800ea3a:	69fb      	ldr	r3, [r7, #28]
 800ea3c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ea3e:	69f8      	ldr	r0, [r7, #28]
 800ea40:	f000 fb18 	bl	800f074 <tcp_process>
 800ea44:	4603      	mov	r3, r0
 800ea46:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ea48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea4c:	f113 0f0d 	cmn.w	r3, #13
 800ea50:	f000 80d3 	beq.w	800ebfa <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ea54:	4b71      	ldr	r3, [pc, #452]	; (800ec1c <tcp_input+0x730>)
 800ea56:	781b      	ldrb	r3, [r3, #0]
 800ea58:	f003 0308 	and.w	r3, r3, #8
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d015      	beq.n	800ea8c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ea60:	69fb      	ldr	r3, [r7, #28]
 800ea62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d008      	beq.n	800ea7c <tcp_input+0x590>
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ea70:	69fa      	ldr	r2, [r7, #28]
 800ea72:	6912      	ldr	r2, [r2, #16]
 800ea74:	f06f 010d 	mvn.w	r1, #13
 800ea78:	4610      	mov	r0, r2
 800ea7a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ea7c:	69f9      	ldr	r1, [r7, #28]
 800ea7e:	486c      	ldr	r0, [pc, #432]	; (800ec30 <tcp_input+0x744>)
 800ea80:	f7ff fbbc 	bl	800e1fc <tcp_pcb_remove>
        tcp_free(pcb);
 800ea84:	69f8      	ldr	r0, [r7, #28]
 800ea86:	f7fd ff03 	bl	800c890 <tcp_free>
 800ea8a:	e0da      	b.n	800ec42 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ea90:	4b63      	ldr	r3, [pc, #396]	; (800ec20 <tcp_input+0x734>)
 800ea92:	881b      	ldrh	r3, [r3, #0]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d01d      	beq.n	800ead4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ea98:	4b61      	ldr	r3, [pc, #388]	; (800ec20 <tcp_input+0x734>)
 800ea9a:	881b      	ldrh	r3, [r3, #0]
 800ea9c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ea9e:	69fb      	ldr	r3, [r7, #28]
 800eaa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00a      	beq.n	800eabe <tcp_input+0x5d2>
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eaae:	69fa      	ldr	r2, [r7, #28]
 800eab0:	6910      	ldr	r0, [r2, #16]
 800eab2:	89fa      	ldrh	r2, [r7, #14]
 800eab4:	69f9      	ldr	r1, [r7, #28]
 800eab6:	4798      	blx	r3
 800eab8:	4603      	mov	r3, r0
 800eaba:	74fb      	strb	r3, [r7, #19]
 800eabc:	e001      	b.n	800eac2 <tcp_input+0x5d6>
 800eabe:	2300      	movs	r3, #0
 800eac0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800eac2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eac6:	f113 0f0d 	cmn.w	r3, #13
 800eaca:	f000 8098 	beq.w	800ebfe <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800eace:	4b54      	ldr	r3, [pc, #336]	; (800ec20 <tcp_input+0x734>)
 800ead0:	2200      	movs	r2, #0
 800ead2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ead4:	69f8      	ldr	r0, [r7, #28]
 800ead6:	f000 f915 	bl	800ed04 <tcp_input_delayed_close>
 800eada:	4603      	mov	r3, r0
 800eadc:	2b00      	cmp	r3, #0
 800eade:	f040 8090 	bne.w	800ec02 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800eae2:	4b4d      	ldr	r3, [pc, #308]	; (800ec18 <tcp_input+0x72c>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d041      	beq.n	800eb6e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d006      	beq.n	800eb00 <tcp_input+0x614>
 800eaf2:	4b50      	ldr	r3, [pc, #320]	; (800ec34 <tcp_input+0x748>)
 800eaf4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800eaf8:	494f      	ldr	r1, [pc, #316]	; (800ec38 <tcp_input+0x74c>)
 800eafa:	4850      	ldr	r0, [pc, #320]	; (800ec3c <tcp_input+0x750>)
 800eafc:	f009 f956 	bl	8017dac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	8b5b      	ldrh	r3, [r3, #26]
 800eb04:	f003 0310 	and.w	r3, r3, #16
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d008      	beq.n	800eb1e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800eb0c:	4b42      	ldr	r3, [pc, #264]	; (800ec18 <tcp_input+0x72c>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fd fc01 	bl	800c318 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800eb16:	69f8      	ldr	r0, [r7, #28]
 800eb18:	f7fe f9a2 	bl	800ce60 <tcp_abort>
            goto aborted;
 800eb1c:	e091      	b.n	800ec42 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800eb1e:	69fb      	ldr	r3, [r7, #28]
 800eb20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d00c      	beq.n	800eb42 <tcp_input+0x656>
 800eb28:	69fb      	ldr	r3, [r7, #28]
 800eb2a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb2e:	69fb      	ldr	r3, [r7, #28]
 800eb30:	6918      	ldr	r0, [r3, #16]
 800eb32:	4b39      	ldr	r3, [pc, #228]	; (800ec18 <tcp_input+0x72c>)
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	2300      	movs	r3, #0
 800eb38:	69f9      	ldr	r1, [r7, #28]
 800eb3a:	47a0      	blx	r4
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	74fb      	strb	r3, [r7, #19]
 800eb40:	e008      	b.n	800eb54 <tcp_input+0x668>
 800eb42:	4b35      	ldr	r3, [pc, #212]	; (800ec18 <tcp_input+0x72c>)
 800eb44:	681a      	ldr	r2, [r3, #0]
 800eb46:	2300      	movs	r3, #0
 800eb48:	69f9      	ldr	r1, [r7, #28]
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	f7ff f890 	bl	800dc70 <tcp_recv_null>
 800eb50:	4603      	mov	r3, r0
 800eb52:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800eb54:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb58:	f113 0f0d 	cmn.w	r3, #13
 800eb5c:	d053      	beq.n	800ec06 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800eb5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d003      	beq.n	800eb6e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800eb66:	4b2c      	ldr	r3, [pc, #176]	; (800ec18 <tcp_input+0x72c>)
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	69fb      	ldr	r3, [r7, #28]
 800eb6c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800eb6e:	4b2b      	ldr	r3, [pc, #172]	; (800ec1c <tcp_input+0x730>)
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	f003 0320 	and.w	r3, r3, #32
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d030      	beq.n	800ebdc <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d009      	beq.n	800eb96 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb86:	7b5a      	ldrb	r2, [r3, #13]
 800eb88:	69fb      	ldr	r3, [r7, #28]
 800eb8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb8c:	f042 0220 	orr.w	r2, r2, #32
 800eb90:	b2d2      	uxtb	r2, r2
 800eb92:	735a      	strb	r2, [r3, #13]
 800eb94:	e022      	b.n	800ebdc <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb9e:	d005      	beq.n	800ebac <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eba4:	3301      	adds	r3, #1
 800eba6:	b29a      	uxth	r2, r3
 800eba8:	69fb      	ldr	r3, [r7, #28]
 800ebaa:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d00b      	beq.n	800ebce <tcp_input+0x6e2>
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebbc:	69fb      	ldr	r3, [r7, #28]
 800ebbe:	6918      	ldr	r0, [r3, #16]
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	69f9      	ldr	r1, [r7, #28]
 800ebc6:	47a0      	blx	r4
 800ebc8:	4603      	mov	r3, r0
 800ebca:	74fb      	strb	r3, [r7, #19]
 800ebcc:	e001      	b.n	800ebd2 <tcp_input+0x6e6>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ebd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ebd6:	f113 0f0d 	cmn.w	r3, #13
 800ebda:	d016      	beq.n	800ec0a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ebdc:	4b13      	ldr	r3, [pc, #76]	; (800ec2c <tcp_input+0x740>)
 800ebde:	2200      	movs	r2, #0
 800ebe0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ebe2:	69f8      	ldr	r0, [r7, #28]
 800ebe4:	f000 f88e 	bl	800ed04 <tcp_input_delayed_close>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d128      	bne.n	800ec40 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ebee:	69f8      	ldr	r0, [r7, #28]
 800ebf0:	f002 ff20 	bl	8011a34 <tcp_output>
 800ebf4:	e025      	b.n	800ec42 <tcp_input+0x756>
        goto aborted;
 800ebf6:	bf00      	nop
 800ebf8:	e023      	b.n	800ec42 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ebfa:	bf00      	nop
 800ebfc:	e021      	b.n	800ec42 <tcp_input+0x756>
              goto aborted;
 800ebfe:	bf00      	nop
 800ec00:	e01f      	b.n	800ec42 <tcp_input+0x756>
          goto aborted;
 800ec02:	bf00      	nop
 800ec04:	e01d      	b.n	800ec42 <tcp_input+0x756>
            goto aborted;
 800ec06:	bf00      	nop
 800ec08:	e01b      	b.n	800ec42 <tcp_input+0x756>
              goto aborted;
 800ec0a:	bf00      	nop
 800ec0c:	e019      	b.n	800ec42 <tcp_input+0x756>
 800ec0e:	bf00      	nop
 800ec10:	2000ce50 	.word	0x2000ce50
 800ec14:	2000ce60 	.word	0x2000ce60
 800ec18:	2000ce80 	.word	0x2000ce80
 800ec1c:	2000ce7d 	.word	0x2000ce7d
 800ec20:	2000ce78 	.word	0x2000ce78
 800ec24:	2000ce7c 	.word	0x2000ce7c
 800ec28:	2000ce7a 	.word	0x2000ce7a
 800ec2c:	2000ce84 	.word	0x2000ce84
 800ec30:	2000ce44 	.word	0x2000ce44
 800ec34:	0801a35c 	.word	0x0801a35c
 800ec38:	0801a510 	.word	0x0801a510
 800ec3c:	0801a3a8 	.word	0x0801a3a8
          goto aborted;
 800ec40:	bf00      	nop
    tcp_input_pcb = NULL;
 800ec42:	4b27      	ldr	r3, [pc, #156]	; (800ece0 <tcp_input+0x7f4>)
 800ec44:	2200      	movs	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ec48:	4b26      	ldr	r3, [pc, #152]	; (800ece4 <tcp_input+0x7f8>)
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ec4e:	4b26      	ldr	r3, [pc, #152]	; (800ece8 <tcp_input+0x7fc>)
 800ec50:	685b      	ldr	r3, [r3, #4]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d03f      	beq.n	800ecd6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ec56:	4b24      	ldr	r3, [pc, #144]	; (800ece8 <tcp_input+0x7fc>)
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fd fb5c 	bl	800c318 <pbuf_free>
      inseg.p = NULL;
 800ec60:	4b21      	ldr	r3, [pc, #132]	; (800ece8 <tcp_input+0x7fc>)
 800ec62:	2200      	movs	r2, #0
 800ec64:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ec66:	e036      	b.n	800ecd6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ec68:	4b20      	ldr	r3, [pc, #128]	; (800ecec <tcp_input+0x800>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	899b      	ldrh	r3, [r3, #12]
 800ec6e:	b29b      	uxth	r3, r3
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7fb ff1d 	bl	800aab0 <lwip_htons>
 800ec76:	4603      	mov	r3, r0
 800ec78:	b2db      	uxtb	r3, r3
 800ec7a:	f003 0304 	and.w	r3, r3, #4
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d118      	bne.n	800ecb4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec82:	4b1b      	ldr	r3, [pc, #108]	; (800ecf0 <tcp_input+0x804>)
 800ec84:	6819      	ldr	r1, [r3, #0]
 800ec86:	4b1b      	ldr	r3, [pc, #108]	; (800ecf4 <tcp_input+0x808>)
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	4b1a      	ldr	r3, [pc, #104]	; (800ecf8 <tcp_input+0x80c>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec92:	4b16      	ldr	r3, [pc, #88]	; (800ecec <tcp_input+0x800>)
 800ec94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec96:	885b      	ldrh	r3, [r3, #2]
 800ec98:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ec9a:	4a14      	ldr	r2, [pc, #80]	; (800ecec <tcp_input+0x800>)
 800ec9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ec9e:	8812      	ldrh	r2, [r2, #0]
 800eca0:	b292      	uxth	r2, r2
 800eca2:	9202      	str	r2, [sp, #8]
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	4b15      	ldr	r3, [pc, #84]	; (800ecfc <tcp_input+0x810>)
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	4b15      	ldr	r3, [pc, #84]	; (800ed00 <tcp_input+0x814>)
 800ecac:	4602      	mov	r2, r0
 800ecae:	2000      	movs	r0, #0
 800ecb0:	f003 fc74 	bl	801259c <tcp_rst>
    pbuf_free(p);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f7fd fb2f 	bl	800c318 <pbuf_free>
  return;
 800ecba:	e00c      	b.n	800ecd6 <tcp_input+0x7ea>
    goto dropped;
 800ecbc:	bf00      	nop
 800ecbe:	e006      	b.n	800ecce <tcp_input+0x7e2>
    goto dropped;
 800ecc0:	bf00      	nop
 800ecc2:	e004      	b.n	800ecce <tcp_input+0x7e2>
    goto dropped;
 800ecc4:	bf00      	nop
 800ecc6:	e002      	b.n	800ecce <tcp_input+0x7e2>
      goto dropped;
 800ecc8:	bf00      	nop
 800ecca:	e000      	b.n	800ecce <tcp_input+0x7e2>
      goto dropped;
 800eccc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f7fd fb22 	bl	800c318 <pbuf_free>
 800ecd4:	e000      	b.n	800ecd8 <tcp_input+0x7ec>
  return;
 800ecd6:	bf00      	nop
}
 800ecd8:	3724      	adds	r7, #36	; 0x24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd90      	pop	{r4, r7, pc}
 800ecde:	bf00      	nop
 800ece0:	2000ce84 	.word	0x2000ce84
 800ece4:	2000ce80 	.word	0x2000ce80
 800ece8:	2000ce50 	.word	0x2000ce50
 800ecec:	2000ce60 	.word	0x2000ce60
 800ecf0:	2000ce74 	.word	0x2000ce74
 800ecf4:	2000ce7a 	.word	0x2000ce7a
 800ecf8:	2000ce70 	.word	0x2000ce70
 800ecfc:	200096d4 	.word	0x200096d4
 800ed00:	200096d8 	.word	0x200096d8

0800ed04 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b082      	sub	sp, #8
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d106      	bne.n	800ed20 <tcp_input_delayed_close+0x1c>
 800ed12:	4b17      	ldr	r3, [pc, #92]	; (800ed70 <tcp_input_delayed_close+0x6c>)
 800ed14:	f240 225a 	movw	r2, #602	; 0x25a
 800ed18:	4916      	ldr	r1, [pc, #88]	; (800ed74 <tcp_input_delayed_close+0x70>)
 800ed1a:	4817      	ldr	r0, [pc, #92]	; (800ed78 <tcp_input_delayed_close+0x74>)
 800ed1c:	f009 f846 	bl	8017dac <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ed20:	4b16      	ldr	r3, [pc, #88]	; (800ed7c <tcp_input_delayed_close+0x78>)
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	f003 0310 	and.w	r3, r3, #16
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d01c      	beq.n	800ed66 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	8b5b      	ldrh	r3, [r3, #26]
 800ed30:	f003 0310 	and.w	r3, r3, #16
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d10d      	bne.n	800ed54 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d008      	beq.n	800ed54 <tcp_input_delayed_close+0x50>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ed48:	687a      	ldr	r2, [r7, #4]
 800ed4a:	6912      	ldr	r2, [r2, #16]
 800ed4c:	f06f 010e 	mvn.w	r1, #14
 800ed50:	4610      	mov	r0, r2
 800ed52:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ed54:	6879      	ldr	r1, [r7, #4]
 800ed56:	480a      	ldr	r0, [pc, #40]	; (800ed80 <tcp_input_delayed_close+0x7c>)
 800ed58:	f7ff fa50 	bl	800e1fc <tcp_pcb_remove>
    tcp_free(pcb);
 800ed5c:	6878      	ldr	r0, [r7, #4]
 800ed5e:	f7fd fd97 	bl	800c890 <tcp_free>
    return 1;
 800ed62:	2301      	movs	r3, #1
 800ed64:	e000      	b.n	800ed68 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ed66:	2300      	movs	r3, #0
}
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3708      	adds	r7, #8
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	0801a35c 	.word	0x0801a35c
 800ed74:	0801a52c 	.word	0x0801a52c
 800ed78:	0801a3a8 	.word	0x0801a3a8
 800ed7c:	2000ce7d 	.word	0x2000ce7d
 800ed80:	2000ce44 	.word	0x2000ce44

0800ed84 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800ed84:	b590      	push	{r4, r7, lr}
 800ed86:	b08b      	sub	sp, #44	; 0x2c
 800ed88:	af04      	add	r7, sp, #16
 800ed8a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800ed8c:	4b6f      	ldr	r3, [pc, #444]	; (800ef4c <tcp_listen_input+0x1c8>)
 800ed8e:	781b      	ldrb	r3, [r3, #0]
 800ed90:	f003 0304 	and.w	r3, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f040 80d2 	bne.w	800ef3e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d106      	bne.n	800edae <tcp_listen_input+0x2a>
 800eda0:	4b6b      	ldr	r3, [pc, #428]	; (800ef50 <tcp_listen_input+0x1cc>)
 800eda2:	f240 2281 	movw	r2, #641	; 0x281
 800eda6:	496b      	ldr	r1, [pc, #428]	; (800ef54 <tcp_listen_input+0x1d0>)
 800eda8:	486b      	ldr	r0, [pc, #428]	; (800ef58 <tcp_listen_input+0x1d4>)
 800edaa:	f008 ffff 	bl	8017dac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800edae:	4b67      	ldr	r3, [pc, #412]	; (800ef4c <tcp_listen_input+0x1c8>)
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	f003 0310 	and.w	r3, r3, #16
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d019      	beq.n	800edee <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edba:	4b68      	ldr	r3, [pc, #416]	; (800ef5c <tcp_listen_input+0x1d8>)
 800edbc:	6819      	ldr	r1, [r3, #0]
 800edbe:	4b68      	ldr	r3, [pc, #416]	; (800ef60 <tcp_listen_input+0x1dc>)
 800edc0:	881b      	ldrh	r3, [r3, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	4b67      	ldr	r3, [pc, #412]	; (800ef64 <tcp_listen_input+0x1e0>)
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edca:	4b67      	ldr	r3, [pc, #412]	; (800ef68 <tcp_listen_input+0x1e4>)
 800edcc:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edce:	885b      	ldrh	r3, [r3, #2]
 800edd0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edd2:	4a65      	ldr	r2, [pc, #404]	; (800ef68 <tcp_listen_input+0x1e4>)
 800edd4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800edd6:	8812      	ldrh	r2, [r2, #0]
 800edd8:	b292      	uxth	r2, r2
 800edda:	9202      	str	r2, [sp, #8]
 800eddc:	9301      	str	r3, [sp, #4]
 800edde:	4b63      	ldr	r3, [pc, #396]	; (800ef6c <tcp_listen_input+0x1e8>)
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	4b63      	ldr	r3, [pc, #396]	; (800ef70 <tcp_listen_input+0x1ec>)
 800ede4:	4602      	mov	r2, r0
 800ede6:	6878      	ldr	r0, [r7, #4]
 800ede8:	f003 fbd8 	bl	801259c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800edec:	e0a9      	b.n	800ef42 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800edee:	4b57      	ldr	r3, [pc, #348]	; (800ef4c <tcp_listen_input+0x1c8>)
 800edf0:	781b      	ldrb	r3, [r3, #0]
 800edf2:	f003 0302 	and.w	r3, r3, #2
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	f000 80a3 	beq.w	800ef42 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	7d5b      	ldrb	r3, [r3, #21]
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7ff f859 	bl	800deb8 <tcp_alloc>
 800ee06:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d111      	bne.n	800ee32 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <tcp_listen_input+0xa8>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	699b      	ldr	r3, [r3, #24]
 800ee1a:	687a      	ldr	r2, [r7, #4]
 800ee1c:	6910      	ldr	r0, [r2, #16]
 800ee1e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee22:	2100      	movs	r1, #0
 800ee24:	4798      	blx	r3
 800ee26:	4603      	mov	r3, r0
 800ee28:	73bb      	strb	r3, [r7, #14]
      return;
 800ee2a:	e08b      	b.n	800ef44 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ee2c:	23f0      	movs	r3, #240	; 0xf0
 800ee2e:	73bb      	strb	r3, [r7, #14]
      return;
 800ee30:	e088      	b.n	800ef44 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ee32:	4b50      	ldr	r3, [pc, #320]	; (800ef74 <tcp_listen_input+0x1f0>)
 800ee34:	695a      	ldr	r2, [r3, #20]
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ee3a:	4b4e      	ldr	r3, [pc, #312]	; (800ef74 <tcp_listen_input+0x1f0>)
 800ee3c:	691a      	ldr	r2, [r3, #16]
 800ee3e:	697b      	ldr	r3, [r7, #20]
 800ee40:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8ada      	ldrh	r2, [r3, #22]
 800ee46:	697b      	ldr	r3, [r7, #20]
 800ee48:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ee4a:	4b47      	ldr	r3, [pc, #284]	; (800ef68 <tcp_listen_input+0x1e4>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	881b      	ldrh	r3, [r3, #0]
 800ee50:	b29a      	uxth	r2, r3
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	2203      	movs	r2, #3
 800ee5a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ee5c:	4b41      	ldr	r3, [pc, #260]	; (800ef64 <tcp_listen_input+0x1e0>)
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	1c5a      	adds	r2, r3, #1
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ee66:	697b      	ldr	r3, [r7, #20]
 800ee68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee6a:	697b      	ldr	r3, [r7, #20]
 800ee6c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ee6e:	6978      	ldr	r0, [r7, #20]
 800ee70:	f7ff fa58 	bl	800e324 <tcp_next_iss>
 800ee74:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	693a      	ldr	r2, [r7, #16]
 800ee7a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800ee7c:	697b      	ldr	r3, [r7, #20]
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	693a      	ldr	r2, [r7, #16]
 800ee86:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ee8e:	4b35      	ldr	r3, [pc, #212]	; (800ef64 <tcp_listen_input+0x1e0>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	1e5a      	subs	r2, r3, #1
 800ee94:	697b      	ldr	r3, [r7, #20]
 800ee96:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	691a      	ldr	r2, [r3, #16]
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7a5b      	ldrb	r3, [r3, #9]
 800eeaa:	f003 030c 	and.w	r3, r3, #12
 800eeae:	b2da      	uxtb	r2, r3
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7a1a      	ldrb	r2, [r3, #8]
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800eebc:	4b2e      	ldr	r3, [pc, #184]	; (800ef78 <tcp_listen_input+0x1f4>)
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	60da      	str	r2, [r3, #12]
 800eec4:	4a2c      	ldr	r2, [pc, #176]	; (800ef78 <tcp_listen_input+0x1f4>)
 800eec6:	697b      	ldr	r3, [r7, #20]
 800eec8:	6013      	str	r3, [r2, #0]
 800eeca:	f003 fd29 	bl	8012920 <tcp_timer_needed>
 800eece:	4b2b      	ldr	r3, [pc, #172]	; (800ef7c <tcp_listen_input+0x1f8>)
 800eed0:	2201      	movs	r2, #1
 800eed2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800eed4:	6978      	ldr	r0, [r7, #20]
 800eed6:	f001 fd8f 	bl	80109f8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800eeda:	4b23      	ldr	r3, [pc, #140]	; (800ef68 <tcp_listen_input+0x1e4>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	89db      	ldrh	r3, [r3, #14]
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800eee8:	697b      	ldr	r3, [r7, #20]
 800eeea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eeee:	697b      	ldr	r3, [r7, #20]
 800eef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800eef8:	697b      	ldr	r3, [r7, #20]
 800eefa:	3304      	adds	r3, #4
 800eefc:	4618      	mov	r0, r3
 800eefe:	f007 fab7 	bl	8016470 <ip4_route>
 800ef02:	4601      	mov	r1, r0
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	3304      	adds	r3, #4
 800ef08:	461a      	mov	r2, r3
 800ef0a:	4620      	mov	r0, r4
 800ef0c:	f7ff fa30 	bl	800e370 <tcp_eff_send_mss_netif>
 800ef10:	4603      	mov	r3, r0
 800ef12:	461a      	mov	r2, r3
 800ef14:	697b      	ldr	r3, [r7, #20]
 800ef16:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ef18:	2112      	movs	r1, #18
 800ef1a:	6978      	ldr	r0, [r7, #20]
 800ef1c:	f002 fc9c 	bl	8011858 <tcp_enqueue_flags>
 800ef20:	4603      	mov	r3, r0
 800ef22:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ef24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d004      	beq.n	800ef36 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	6978      	ldr	r0, [r7, #20]
 800ef30:	f7fd fed8 	bl	800cce4 <tcp_abandon>
      return;
 800ef34:	e006      	b.n	800ef44 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ef36:	6978      	ldr	r0, [r7, #20]
 800ef38:	f002 fd7c 	bl	8011a34 <tcp_output>
  return;
 800ef3c:	e001      	b.n	800ef42 <tcp_listen_input+0x1be>
    return;
 800ef3e:	bf00      	nop
 800ef40:	e000      	b.n	800ef44 <tcp_listen_input+0x1c0>
  return;
 800ef42:	bf00      	nop
}
 800ef44:	371c      	adds	r7, #28
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd90      	pop	{r4, r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	2000ce7c 	.word	0x2000ce7c
 800ef50:	0801a35c 	.word	0x0801a35c
 800ef54:	0801a554 	.word	0x0801a554
 800ef58:	0801a3a8 	.word	0x0801a3a8
 800ef5c:	2000ce74 	.word	0x2000ce74
 800ef60:	2000ce7a 	.word	0x2000ce7a
 800ef64:	2000ce70 	.word	0x2000ce70
 800ef68:	2000ce60 	.word	0x2000ce60
 800ef6c:	200096d4 	.word	0x200096d4
 800ef70:	200096d8 	.word	0x200096d8
 800ef74:	200096c4 	.word	0x200096c4
 800ef78:	2000ce44 	.word	0x2000ce44
 800ef7c:	2000ce4c 	.word	0x2000ce4c

0800ef80 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b086      	sub	sp, #24
 800ef84:	af04      	add	r7, sp, #16
 800ef86:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ef88:	4b2f      	ldr	r3, [pc, #188]	; (800f048 <tcp_timewait_input+0xc8>)
 800ef8a:	781b      	ldrb	r3, [r3, #0]
 800ef8c:	f003 0304 	and.w	r3, r3, #4
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d153      	bne.n	800f03c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d106      	bne.n	800efa8 <tcp_timewait_input+0x28>
 800ef9a:	4b2c      	ldr	r3, [pc, #176]	; (800f04c <tcp_timewait_input+0xcc>)
 800ef9c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800efa0:	492b      	ldr	r1, [pc, #172]	; (800f050 <tcp_timewait_input+0xd0>)
 800efa2:	482c      	ldr	r0, [pc, #176]	; (800f054 <tcp_timewait_input+0xd4>)
 800efa4:	f008 ff02 	bl	8017dac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800efa8:	4b27      	ldr	r3, [pc, #156]	; (800f048 <tcp_timewait_input+0xc8>)
 800efaa:	781b      	ldrb	r3, [r3, #0]
 800efac:	f003 0302 	and.w	r3, r3, #2
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d02a      	beq.n	800f00a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800efb4:	4b28      	ldr	r3, [pc, #160]	; (800f058 <tcp_timewait_input+0xd8>)
 800efb6:	681a      	ldr	r2, [r3, #0]
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	db2d      	blt.n	800f01e <tcp_timewait_input+0x9e>
 800efc2:	4b25      	ldr	r3, [pc, #148]	; (800f058 <tcp_timewait_input+0xd8>)
 800efc4:	681a      	ldr	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efca:	6879      	ldr	r1, [r7, #4]
 800efcc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800efce:	440b      	add	r3, r1
 800efd0:	1ad3      	subs	r3, r2, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	dc23      	bgt.n	800f01e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efd6:	4b21      	ldr	r3, [pc, #132]	; (800f05c <tcp_timewait_input+0xdc>)
 800efd8:	6819      	ldr	r1, [r3, #0]
 800efda:	4b21      	ldr	r3, [pc, #132]	; (800f060 <tcp_timewait_input+0xe0>)
 800efdc:	881b      	ldrh	r3, [r3, #0]
 800efde:	461a      	mov	r2, r3
 800efe0:	4b1d      	ldr	r3, [pc, #116]	; (800f058 <tcp_timewait_input+0xd8>)
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efe6:	4b1f      	ldr	r3, [pc, #124]	; (800f064 <tcp_timewait_input+0xe4>)
 800efe8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efea:	885b      	ldrh	r3, [r3, #2]
 800efec:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800efee:	4a1d      	ldr	r2, [pc, #116]	; (800f064 <tcp_timewait_input+0xe4>)
 800eff0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eff2:	8812      	ldrh	r2, [r2, #0]
 800eff4:	b292      	uxth	r2, r2
 800eff6:	9202      	str	r2, [sp, #8]
 800eff8:	9301      	str	r3, [sp, #4]
 800effa:	4b1b      	ldr	r3, [pc, #108]	; (800f068 <tcp_timewait_input+0xe8>)
 800effc:	9300      	str	r3, [sp, #0]
 800effe:	4b1b      	ldr	r3, [pc, #108]	; (800f06c <tcp_timewait_input+0xec>)
 800f000:	4602      	mov	r2, r0
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f003 faca 	bl	801259c <tcp_rst>
      return;
 800f008:	e01b      	b.n	800f042 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f00a:	4b0f      	ldr	r3, [pc, #60]	; (800f048 <tcp_timewait_input+0xc8>)
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	f003 0301 	and.w	r3, r3, #1
 800f012:	2b00      	cmp	r3, #0
 800f014:	d003      	beq.n	800f01e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f016:	4b16      	ldr	r3, [pc, #88]	; (800f070 <tcp_timewait_input+0xf0>)
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f01e:	4b10      	ldr	r3, [pc, #64]	; (800f060 <tcp_timewait_input+0xe0>)
 800f020:	881b      	ldrh	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d00c      	beq.n	800f040 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8b5b      	ldrh	r3, [r3, #26]
 800f02a:	f043 0302 	orr.w	r3, r3, #2
 800f02e:	b29a      	uxth	r2, r3
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f034:	6878      	ldr	r0, [r7, #4]
 800f036:	f002 fcfd 	bl	8011a34 <tcp_output>
  }
  return;
 800f03a:	e001      	b.n	800f040 <tcp_timewait_input+0xc0>
    return;
 800f03c:	bf00      	nop
 800f03e:	e000      	b.n	800f042 <tcp_timewait_input+0xc2>
  return;
 800f040:	bf00      	nop
}
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	2000ce7c 	.word	0x2000ce7c
 800f04c:	0801a35c 	.word	0x0801a35c
 800f050:	0801a574 	.word	0x0801a574
 800f054:	0801a3a8 	.word	0x0801a3a8
 800f058:	2000ce70 	.word	0x2000ce70
 800f05c:	2000ce74 	.word	0x2000ce74
 800f060:	2000ce7a 	.word	0x2000ce7a
 800f064:	2000ce60 	.word	0x2000ce60
 800f068:	200096d4 	.word	0x200096d4
 800f06c:	200096d8 	.word	0x200096d8
 800f070:	2000ce38 	.word	0x2000ce38

0800f074 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f074:	b590      	push	{r4, r7, lr}
 800f076:	b08d      	sub	sp, #52	; 0x34
 800f078:	af04      	add	r7, sp, #16
 800f07a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f07c:	2300      	movs	r3, #0
 800f07e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d106      	bne.n	800f098 <tcp_process+0x24>
 800f08a:	4b9d      	ldr	r3, [pc, #628]	; (800f300 <tcp_process+0x28c>)
 800f08c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f090:	499c      	ldr	r1, [pc, #624]	; (800f304 <tcp_process+0x290>)
 800f092:	489d      	ldr	r0, [pc, #628]	; (800f308 <tcp_process+0x294>)
 800f094:	f008 fe8a 	bl	8017dac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f098:	4b9c      	ldr	r3, [pc, #624]	; (800f30c <tcp_process+0x298>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	f003 0304 	and.w	r3, r3, #4
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d04e      	beq.n	800f142 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	7d1b      	ldrb	r3, [r3, #20]
 800f0a8:	2b02      	cmp	r3, #2
 800f0aa:	d108      	bne.n	800f0be <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0b0:	4b97      	ldr	r3, [pc, #604]	; (800f310 <tcp_process+0x29c>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d123      	bne.n	800f100 <tcp_process+0x8c>
        acceptable = 1;
 800f0b8:	2301      	movs	r3, #1
 800f0ba:	76fb      	strb	r3, [r7, #27]
 800f0bc:	e020      	b.n	800f100 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0c2:	4b94      	ldr	r3, [pc, #592]	; (800f314 <tcp_process+0x2a0>)
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	429a      	cmp	r2, r3
 800f0c8:	d102      	bne.n	800f0d0 <tcp_process+0x5c>
        acceptable = 1;
 800f0ca:	2301      	movs	r3, #1
 800f0cc:	76fb      	strb	r3, [r7, #27]
 800f0ce:	e017      	b.n	800f100 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f0d0:	4b90      	ldr	r3, [pc, #576]	; (800f314 <tcp_process+0x2a0>)
 800f0d2:	681a      	ldr	r2, [r3, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	db10      	blt.n	800f100 <tcp_process+0x8c>
 800f0de:	4b8d      	ldr	r3, [pc, #564]	; (800f314 <tcp_process+0x2a0>)
 800f0e0:	681a      	ldr	r2, [r3, #0]
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f0ea:	440b      	add	r3, r1
 800f0ec:	1ad3      	subs	r3, r2, r3
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	dc06      	bgt.n	800f100 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	8b5b      	ldrh	r3, [r3, #26]
 800f0f6:	f043 0302 	orr.w	r3, r3, #2
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f100:	7efb      	ldrb	r3, [r7, #27]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d01b      	beq.n	800f13e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	7d1b      	ldrb	r3, [r3, #20]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d106      	bne.n	800f11c <tcp_process+0xa8>
 800f10e:	4b7c      	ldr	r3, [pc, #496]	; (800f300 <tcp_process+0x28c>)
 800f110:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f114:	4980      	ldr	r1, [pc, #512]	; (800f318 <tcp_process+0x2a4>)
 800f116:	487c      	ldr	r0, [pc, #496]	; (800f308 <tcp_process+0x294>)
 800f118:	f008 fe48 	bl	8017dac <iprintf>
      recv_flags |= TF_RESET;
 800f11c:	4b7f      	ldr	r3, [pc, #508]	; (800f31c <tcp_process+0x2a8>)
 800f11e:	781b      	ldrb	r3, [r3, #0]
 800f120:	f043 0308 	orr.w	r3, r3, #8
 800f124:	b2da      	uxtb	r2, r3
 800f126:	4b7d      	ldr	r3, [pc, #500]	; (800f31c <tcp_process+0x2a8>)
 800f128:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	8b5b      	ldrh	r3, [r3, #26]
 800f12e:	f023 0301 	bic.w	r3, r3, #1
 800f132:	b29a      	uxth	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f138:	f06f 030d 	mvn.w	r3, #13
 800f13c:	e37a      	b.n	800f834 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	e378      	b.n	800f834 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f142:	4b72      	ldr	r3, [pc, #456]	; (800f30c <tcp_process+0x298>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	f003 0302 	and.w	r3, r3, #2
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d010      	beq.n	800f170 <tcp_process+0xfc>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	7d1b      	ldrb	r3, [r3, #20]
 800f152:	2b02      	cmp	r3, #2
 800f154:	d00c      	beq.n	800f170 <tcp_process+0xfc>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	7d1b      	ldrb	r3, [r3, #20]
 800f15a:	2b03      	cmp	r3, #3
 800f15c:	d008      	beq.n	800f170 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	8b5b      	ldrh	r3, [r3, #26]
 800f162:	f043 0302 	orr.w	r3, r3, #2
 800f166:	b29a      	uxth	r2, r3
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f16c:	2300      	movs	r3, #0
 800f16e:	e361      	b.n	800f834 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	8b5b      	ldrh	r3, [r3, #26]
 800f174:	f003 0310 	and.w	r3, r3, #16
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d103      	bne.n	800f184 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f17c:	4b68      	ldr	r3, [pc, #416]	; (800f320 <tcp_process+0x2ac>)
 800f17e:	681a      	ldr	r2, [r3, #0]
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	2200      	movs	r2, #0
 800f190:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f001 fc2f 	bl	80109f8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	7d1b      	ldrb	r3, [r3, #20]
 800f19e:	3b02      	subs	r3, #2
 800f1a0:	2b07      	cmp	r3, #7
 800f1a2:	f200 8337 	bhi.w	800f814 <tcp_process+0x7a0>
 800f1a6:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <tcp_process+0x138>)
 800f1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ac:	0800f1cd 	.word	0x0800f1cd
 800f1b0:	0800f3fd 	.word	0x0800f3fd
 800f1b4:	0800f575 	.word	0x0800f575
 800f1b8:	0800f59f 	.word	0x0800f59f
 800f1bc:	0800f6c3 	.word	0x0800f6c3
 800f1c0:	0800f575 	.word	0x0800f575
 800f1c4:	0800f74f 	.word	0x0800f74f
 800f1c8:	0800f7df 	.word	0x0800f7df
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f1cc:	4b4f      	ldr	r3, [pc, #316]	; (800f30c <tcp_process+0x298>)
 800f1ce:	781b      	ldrb	r3, [r3, #0]
 800f1d0:	f003 0310 	and.w	r3, r3, #16
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f000 80e4 	beq.w	800f3a2 <tcp_process+0x32e>
 800f1da:	4b4c      	ldr	r3, [pc, #304]	; (800f30c <tcp_process+0x298>)
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	f003 0302 	and.w	r3, r3, #2
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	f000 80dd 	beq.w	800f3a2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1ec:	1c5a      	adds	r2, r3, #1
 800f1ee:	4b48      	ldr	r3, [pc, #288]	; (800f310 <tcp_process+0x29c>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	f040 80d5 	bne.w	800f3a2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f1f8:	4b46      	ldr	r3, [pc, #280]	; (800f314 <tcp_process+0x2a0>)
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	1c5a      	adds	r2, r3, #1
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f20a:	4b41      	ldr	r3, [pc, #260]	; (800f310 <tcp_process+0x29c>)
 800f20c:	681a      	ldr	r2, [r3, #0]
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f212:	4b44      	ldr	r3, [pc, #272]	; (800f324 <tcp_process+0x2b0>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	89db      	ldrh	r3, [r3, #14]
 800f218:	b29a      	uxth	r2, r3
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f22c:	4b39      	ldr	r3, [pc, #228]	; (800f314 <tcp_process+0x2a0>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	1e5a      	subs	r2, r3, #1
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2204      	movs	r2, #4
 800f23a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	3304      	adds	r3, #4
 800f244:	4618      	mov	r0, r3
 800f246:	f007 f913 	bl	8016470 <ip4_route>
 800f24a:	4601      	mov	r1, r0
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	3304      	adds	r3, #4
 800f250:	461a      	mov	r2, r3
 800f252:	4620      	mov	r0, r4
 800f254:	f7ff f88c 	bl	800e370 <tcp_eff_send_mss_netif>
 800f258:	4603      	mov	r3, r0
 800f25a:	461a      	mov	r2, r3
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f264:	009a      	lsls	r2, r3, #2
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f26a:	005b      	lsls	r3, r3, #1
 800f26c:	f241 111c 	movw	r1, #4380	; 0x111c
 800f270:	428b      	cmp	r3, r1
 800f272:	bf38      	it	cc
 800f274:	460b      	movcc	r3, r1
 800f276:	429a      	cmp	r2, r3
 800f278:	d204      	bcs.n	800f284 <tcp_process+0x210>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f27e:	009b      	lsls	r3, r3, #2
 800f280:	b29b      	uxth	r3, r3
 800f282:	e00d      	b.n	800f2a0 <tcp_process+0x22c>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f288:	005b      	lsls	r3, r3, #1
 800f28a:	f241 121c 	movw	r2, #4380	; 0x111c
 800f28e:	4293      	cmp	r3, r2
 800f290:	d904      	bls.n	800f29c <tcp_process+0x228>
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f296:	005b      	lsls	r3, r3, #1
 800f298:	b29b      	uxth	r3, r3
 800f29a:	e001      	b.n	800f2a0 <tcp_process+0x22c>
 800f29c:	f241 131c 	movw	r3, #4380	; 0x111c
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d106      	bne.n	800f2be <tcp_process+0x24a>
 800f2b0:	4b13      	ldr	r3, [pc, #76]	; (800f300 <tcp_process+0x28c>)
 800f2b2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f2b6:	491c      	ldr	r1, [pc, #112]	; (800f328 <tcp_process+0x2b4>)
 800f2b8:	4813      	ldr	r0, [pc, #76]	; (800f308 <tcp_process+0x294>)
 800f2ba:	f008 fd77 	bl	8017dac <iprintf>
        --pcb->snd_queuelen;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f2c4:	3b01      	subs	r3, #1
 800f2c6:	b29a      	uxth	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2d2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d12a      	bne.n	800f330 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2de:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d106      	bne.n	800f2f4 <tcp_process+0x280>
 800f2e6:	4b06      	ldr	r3, [pc, #24]	; (800f300 <tcp_process+0x28c>)
 800f2e8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f2ec:	490f      	ldr	r1, [pc, #60]	; (800f32c <tcp_process+0x2b8>)
 800f2ee:	4806      	ldr	r0, [pc, #24]	; (800f308 <tcp_process+0x294>)
 800f2f0:	f008 fd5c 	bl	8017dac <iprintf>
          pcb->unsent = rseg->next;
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	66da      	str	r2, [r3, #108]	; 0x6c
 800f2fc:	e01c      	b.n	800f338 <tcp_process+0x2c4>
 800f2fe:	bf00      	nop
 800f300:	0801a35c 	.word	0x0801a35c
 800f304:	0801a594 	.word	0x0801a594
 800f308:	0801a3a8 	.word	0x0801a3a8
 800f30c:	2000ce7c 	.word	0x2000ce7c
 800f310:	2000ce74 	.word	0x2000ce74
 800f314:	2000ce70 	.word	0x2000ce70
 800f318:	0801a5b0 	.word	0x0801a5b0
 800f31c:	2000ce7d 	.word	0x2000ce7d
 800f320:	2000ce38 	.word	0x2000ce38
 800f324:	2000ce60 	.word	0x2000ce60
 800f328:	0801a5d0 	.word	0x0801a5d0
 800f32c:	0801a5e8 	.word	0x0801a5e8
        } else {
          pcb->unacked = rseg->next;
 800f330:	69fb      	ldr	r3, [r7, #28]
 800f332:	681a      	ldr	r2, [r3, #0]
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f338:	69f8      	ldr	r0, [r7, #28]
 800f33a:	f7fe fc36 	bl	800dbaa <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f342:	2b00      	cmp	r3, #0
 800f344:	d104      	bne.n	800f350 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f34c:	861a      	strh	r2, [r3, #48]	; 0x30
 800f34e:	e006      	b.n	800f35e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2200      	movs	r2, #0
 800f354:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f364:	2b00      	cmp	r3, #0
 800f366:	d00a      	beq.n	800f37e <tcp_process+0x30a>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f36e:	687a      	ldr	r2, [r7, #4]
 800f370:	6910      	ldr	r0, [r2, #16]
 800f372:	2200      	movs	r2, #0
 800f374:	6879      	ldr	r1, [r7, #4]
 800f376:	4798      	blx	r3
 800f378:	4603      	mov	r3, r0
 800f37a:	76bb      	strb	r3, [r7, #26]
 800f37c:	e001      	b.n	800f382 <tcp_process+0x30e>
 800f37e:	2300      	movs	r3, #0
 800f380:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f382:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f386:	f113 0f0d 	cmn.w	r3, #13
 800f38a:	d102      	bne.n	800f392 <tcp_process+0x31e>
          return ERR_ABRT;
 800f38c:	f06f 030c 	mvn.w	r3, #12
 800f390:	e250      	b.n	800f834 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	8b5b      	ldrh	r3, [r3, #26]
 800f396:	f043 0302 	orr.w	r3, r3, #2
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f3a0:	e23a      	b.n	800f818 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f3a2:	4b98      	ldr	r3, [pc, #608]	; (800f604 <tcp_process+0x590>)
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	f003 0310 	and.w	r3, r3, #16
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f000 8234 	beq.w	800f818 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3b0:	4b95      	ldr	r3, [pc, #596]	; (800f608 <tcp_process+0x594>)
 800f3b2:	6819      	ldr	r1, [r3, #0]
 800f3b4:	4b95      	ldr	r3, [pc, #596]	; (800f60c <tcp_process+0x598>)
 800f3b6:	881b      	ldrh	r3, [r3, #0]
 800f3b8:	461a      	mov	r2, r3
 800f3ba:	4b95      	ldr	r3, [pc, #596]	; (800f610 <tcp_process+0x59c>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3c0:	4b94      	ldr	r3, [pc, #592]	; (800f614 <tcp_process+0x5a0>)
 800f3c2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3c4:	885b      	ldrh	r3, [r3, #2]
 800f3c6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f3c8:	4a92      	ldr	r2, [pc, #584]	; (800f614 <tcp_process+0x5a0>)
 800f3ca:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f3cc:	8812      	ldrh	r2, [r2, #0]
 800f3ce:	b292      	uxth	r2, r2
 800f3d0:	9202      	str	r2, [sp, #8]
 800f3d2:	9301      	str	r3, [sp, #4]
 800f3d4:	4b90      	ldr	r3, [pc, #576]	; (800f618 <tcp_process+0x5a4>)
 800f3d6:	9300      	str	r3, [sp, #0]
 800f3d8:	4b90      	ldr	r3, [pc, #576]	; (800f61c <tcp_process+0x5a8>)
 800f3da:	4602      	mov	r2, r0
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f003 f8dd 	bl	801259c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f3e8:	2b05      	cmp	r3, #5
 800f3ea:	f200 8215 	bhi.w	800f818 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f002 fea9 	bl	801214c <tcp_rexmit_rto>
      break;
 800f3fa:	e20d      	b.n	800f818 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f3fc:	4b81      	ldr	r3, [pc, #516]	; (800f604 <tcp_process+0x590>)
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	f003 0310 	and.w	r3, r3, #16
 800f404:	2b00      	cmp	r3, #0
 800f406:	f000 80a1 	beq.w	800f54c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f40a:	4b7f      	ldr	r3, [pc, #508]	; (800f608 <tcp_process+0x594>)
 800f40c:	681a      	ldr	r2, [r3, #0]
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f412:	1ad3      	subs	r3, r2, r3
 800f414:	3b01      	subs	r3, #1
 800f416:	2b00      	cmp	r3, #0
 800f418:	db7e      	blt.n	800f518 <tcp_process+0x4a4>
 800f41a:	4b7b      	ldr	r3, [pc, #492]	; (800f608 <tcp_process+0x594>)
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f422:	1ad3      	subs	r3, r2, r3
 800f424:	2b00      	cmp	r3, #0
 800f426:	dc77      	bgt.n	800f518 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2204      	movs	r2, #4
 800f42c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f432:	2b00      	cmp	r3, #0
 800f434:	d102      	bne.n	800f43c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f436:	23fa      	movs	r3, #250	; 0xfa
 800f438:	76bb      	strb	r3, [r7, #26]
 800f43a:	e01d      	b.n	800f478 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d106      	bne.n	800f454 <tcp_process+0x3e0>
 800f446:	4b76      	ldr	r3, [pc, #472]	; (800f620 <tcp_process+0x5ac>)
 800f448:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f44c:	4975      	ldr	r1, [pc, #468]	; (800f624 <tcp_process+0x5b0>)
 800f44e:	4876      	ldr	r0, [pc, #472]	; (800f628 <tcp_process+0x5b4>)
 800f450:	f008 fcac 	bl	8017dac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f458:	699b      	ldr	r3, [r3, #24]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00a      	beq.n	800f474 <tcp_process+0x400>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f462:	699b      	ldr	r3, [r3, #24]
 800f464:	687a      	ldr	r2, [r7, #4]
 800f466:	6910      	ldr	r0, [r2, #16]
 800f468:	2200      	movs	r2, #0
 800f46a:	6879      	ldr	r1, [r7, #4]
 800f46c:	4798      	blx	r3
 800f46e:	4603      	mov	r3, r0
 800f470:	76bb      	strb	r3, [r7, #26]
 800f472:	e001      	b.n	800f478 <tcp_process+0x404>
 800f474:	23f0      	movs	r3, #240	; 0xf0
 800f476:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f478:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d00a      	beq.n	800f496 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f480:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f484:	f113 0f0d 	cmn.w	r3, #13
 800f488:	d002      	beq.n	800f490 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f48a:	6878      	ldr	r0, [r7, #4]
 800f48c:	f7fd fce8 	bl	800ce60 <tcp_abort>
            }
            return ERR_ABRT;
 800f490:	f06f 030c 	mvn.w	r3, #12
 800f494:	e1ce      	b.n	800f834 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 fae0 	bl	800fa5c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f49c:	4b63      	ldr	r3, [pc, #396]	; (800f62c <tcp_process+0x5b8>)
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d005      	beq.n	800f4b0 <tcp_process+0x43c>
            recv_acked--;
 800f4a4:	4b61      	ldr	r3, [pc, #388]	; (800f62c <tcp_process+0x5b8>)
 800f4a6:	881b      	ldrh	r3, [r3, #0]
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	4b5f      	ldr	r3, [pc, #380]	; (800f62c <tcp_process+0x5b8>)
 800f4ae:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b4:	009a      	lsls	r2, r3, #2
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4ba:	005b      	lsls	r3, r3, #1
 800f4bc:	f241 111c 	movw	r1, #4380	; 0x111c
 800f4c0:	428b      	cmp	r3, r1
 800f4c2:	bf38      	it	cc
 800f4c4:	460b      	movcc	r3, r1
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d204      	bcs.n	800f4d4 <tcp_process+0x460>
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	e00d      	b.n	800f4f0 <tcp_process+0x47c>
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4d8:	005b      	lsls	r3, r3, #1
 800f4da:	f241 121c 	movw	r2, #4380	; 0x111c
 800f4de:	4293      	cmp	r3, r2
 800f4e0:	d904      	bls.n	800f4ec <tcp_process+0x478>
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4e6:	005b      	lsls	r3, r3, #1
 800f4e8:	b29b      	uxth	r3, r3
 800f4ea:	e001      	b.n	800f4f0 <tcp_process+0x47c>
 800f4ec:	f241 131c 	movw	r3, #4380	; 0x111c
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f4f6:	4b4e      	ldr	r3, [pc, #312]	; (800f630 <tcp_process+0x5bc>)
 800f4f8:	781b      	ldrb	r3, [r3, #0]
 800f4fa:	f003 0320 	and.w	r3, r3, #32
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d037      	beq.n	800f572 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	8b5b      	ldrh	r3, [r3, #26]
 800f506:	f043 0302 	orr.w	r3, r3, #2
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2207      	movs	r2, #7
 800f514:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f516:	e02c      	b.n	800f572 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f518:	4b3b      	ldr	r3, [pc, #236]	; (800f608 <tcp_process+0x594>)
 800f51a:	6819      	ldr	r1, [r3, #0]
 800f51c:	4b3b      	ldr	r3, [pc, #236]	; (800f60c <tcp_process+0x598>)
 800f51e:	881b      	ldrh	r3, [r3, #0]
 800f520:	461a      	mov	r2, r3
 800f522:	4b3b      	ldr	r3, [pc, #236]	; (800f610 <tcp_process+0x59c>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f528:	4b3a      	ldr	r3, [pc, #232]	; (800f614 <tcp_process+0x5a0>)
 800f52a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f52c:	885b      	ldrh	r3, [r3, #2]
 800f52e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f530:	4a38      	ldr	r2, [pc, #224]	; (800f614 <tcp_process+0x5a0>)
 800f532:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f534:	8812      	ldrh	r2, [r2, #0]
 800f536:	b292      	uxth	r2, r2
 800f538:	9202      	str	r2, [sp, #8]
 800f53a:	9301      	str	r3, [sp, #4]
 800f53c:	4b36      	ldr	r3, [pc, #216]	; (800f618 <tcp_process+0x5a4>)
 800f53e:	9300      	str	r3, [sp, #0]
 800f540:	4b36      	ldr	r3, [pc, #216]	; (800f61c <tcp_process+0x5a8>)
 800f542:	4602      	mov	r2, r0
 800f544:	6878      	ldr	r0, [r7, #4]
 800f546:	f003 f829 	bl	801259c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f54a:	e167      	b.n	800f81c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f54c:	4b2d      	ldr	r3, [pc, #180]	; (800f604 <tcp_process+0x590>)
 800f54e:	781b      	ldrb	r3, [r3, #0]
 800f550:	f003 0302 	and.w	r3, r3, #2
 800f554:	2b00      	cmp	r3, #0
 800f556:	f000 8161 	beq.w	800f81c <tcp_process+0x7a8>
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f55e:	1e5a      	subs	r2, r3, #1
 800f560:	4b2b      	ldr	r3, [pc, #172]	; (800f610 <tcp_process+0x59c>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	429a      	cmp	r2, r3
 800f566:	f040 8159 	bne.w	800f81c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f56a:	6878      	ldr	r0, [r7, #4]
 800f56c:	f002 fe10 	bl	8012190 <tcp_rexmit>
      break;
 800f570:	e154      	b.n	800f81c <tcp_process+0x7a8>
 800f572:	e153      	b.n	800f81c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f574:	6878      	ldr	r0, [r7, #4]
 800f576:	f000 fa71 	bl	800fa5c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f57a:	4b2d      	ldr	r3, [pc, #180]	; (800f630 <tcp_process+0x5bc>)
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	f003 0320 	and.w	r3, r3, #32
 800f582:	2b00      	cmp	r3, #0
 800f584:	f000 814c 	beq.w	800f820 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	8b5b      	ldrh	r3, [r3, #26]
 800f58c:	f043 0302 	orr.w	r3, r3, #2
 800f590:	b29a      	uxth	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2207      	movs	r2, #7
 800f59a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f59c:	e140      	b.n	800f820 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 fa5c 	bl	800fa5c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f5a4:	4b22      	ldr	r3, [pc, #136]	; (800f630 <tcp_process+0x5bc>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	f003 0320 	and.w	r3, r3, #32
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d071      	beq.n	800f694 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5b0:	4b14      	ldr	r3, [pc, #80]	; (800f604 <tcp_process+0x590>)
 800f5b2:	781b      	ldrb	r3, [r3, #0]
 800f5b4:	f003 0310 	and.w	r3, r3, #16
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d060      	beq.n	800f67e <tcp_process+0x60a>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f5c0:	4b11      	ldr	r3, [pc, #68]	; (800f608 <tcp_process+0x594>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d15a      	bne.n	800f67e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d156      	bne.n	800f67e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	8b5b      	ldrh	r3, [r3, #26]
 800f5d4:	f043 0302 	orr.w	r3, r3, #2
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7fe fdbc 	bl	800e15c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f5e4:	4b13      	ldr	r3, [pc, #76]	; (800f634 <tcp_process+0x5c0>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	687a      	ldr	r2, [r7, #4]
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d105      	bne.n	800f5fa <tcp_process+0x586>
 800f5ee:	4b11      	ldr	r3, [pc, #68]	; (800f634 <tcp_process+0x5c0>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	68db      	ldr	r3, [r3, #12]
 800f5f4:	4a0f      	ldr	r2, [pc, #60]	; (800f634 <tcp_process+0x5c0>)
 800f5f6:	6013      	str	r3, [r2, #0]
 800f5f8:	e02e      	b.n	800f658 <tcp_process+0x5e4>
 800f5fa:	4b0e      	ldr	r3, [pc, #56]	; (800f634 <tcp_process+0x5c0>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	617b      	str	r3, [r7, #20]
 800f600:	e027      	b.n	800f652 <tcp_process+0x5de>
 800f602:	bf00      	nop
 800f604:	2000ce7c 	.word	0x2000ce7c
 800f608:	2000ce74 	.word	0x2000ce74
 800f60c:	2000ce7a 	.word	0x2000ce7a
 800f610:	2000ce70 	.word	0x2000ce70
 800f614:	2000ce60 	.word	0x2000ce60
 800f618:	200096d4 	.word	0x200096d4
 800f61c:	200096d8 	.word	0x200096d8
 800f620:	0801a35c 	.word	0x0801a35c
 800f624:	0801a5fc 	.word	0x0801a5fc
 800f628:	0801a3a8 	.word	0x0801a3a8
 800f62c:	2000ce78 	.word	0x2000ce78
 800f630:	2000ce7d 	.word	0x2000ce7d
 800f634:	2000ce44 	.word	0x2000ce44
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	68db      	ldr	r3, [r3, #12]
 800f63c:	687a      	ldr	r2, [r7, #4]
 800f63e:	429a      	cmp	r2, r3
 800f640:	d104      	bne.n	800f64c <tcp_process+0x5d8>
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	68da      	ldr	r2, [r3, #12]
 800f646:	697b      	ldr	r3, [r7, #20]
 800f648:	60da      	str	r2, [r3, #12]
 800f64a:	e005      	b.n	800f658 <tcp_process+0x5e4>
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	617b      	str	r3, [r7, #20]
 800f652:	697b      	ldr	r3, [r7, #20]
 800f654:	2b00      	cmp	r3, #0
 800f656:	d1ef      	bne.n	800f638 <tcp_process+0x5c4>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2200      	movs	r2, #0
 800f65c:	60da      	str	r2, [r3, #12]
 800f65e:	4b77      	ldr	r3, [pc, #476]	; (800f83c <tcp_process+0x7c8>)
 800f660:	2201      	movs	r2, #1
 800f662:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	220a      	movs	r2, #10
 800f668:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f66a:	4b75      	ldr	r3, [pc, #468]	; (800f840 <tcp_process+0x7cc>)
 800f66c:	681a      	ldr	r2, [r3, #0]
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	60da      	str	r2, [r3, #12]
 800f672:	4a73      	ldr	r2, [pc, #460]	; (800f840 <tcp_process+0x7cc>)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	f003 f952 	bl	8012920 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f67c:	e0d2      	b.n	800f824 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	8b5b      	ldrh	r3, [r3, #26]
 800f682:	f043 0302 	orr.w	r3, r3, #2
 800f686:	b29a      	uxth	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2208      	movs	r2, #8
 800f690:	751a      	strb	r2, [r3, #20]
      break;
 800f692:	e0c7      	b.n	800f824 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f694:	4b6b      	ldr	r3, [pc, #428]	; (800f844 <tcp_process+0x7d0>)
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	f003 0310 	and.w	r3, r3, #16
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 80c1 	beq.w	800f824 <tcp_process+0x7b0>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6a6:	4b68      	ldr	r3, [pc, #416]	; (800f848 <tcp_process+0x7d4>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	429a      	cmp	r2, r3
 800f6ac:	f040 80ba 	bne.w	800f824 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	f040 80b5 	bne.w	800f824 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2206      	movs	r2, #6
 800f6be:	751a      	strb	r2, [r3, #20]
      break;
 800f6c0:	e0b0      	b.n	800f824 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 f9ca 	bl	800fa5c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f6c8:	4b60      	ldr	r3, [pc, #384]	; (800f84c <tcp_process+0x7d8>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	f003 0320 	and.w	r3, r3, #32
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	f000 80a9 	beq.w	800f828 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	8b5b      	ldrh	r3, [r3, #26]
 800f6da:	f043 0302 	orr.w	r3, r3, #2
 800f6de:	b29a      	uxth	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7fe fd39 	bl	800e15c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f6ea:	4b59      	ldr	r3, [pc, #356]	; (800f850 <tcp_process+0x7dc>)
 800f6ec:	681b      	ldr	r3, [r3, #0]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	429a      	cmp	r2, r3
 800f6f2:	d105      	bne.n	800f700 <tcp_process+0x68c>
 800f6f4:	4b56      	ldr	r3, [pc, #344]	; (800f850 <tcp_process+0x7dc>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	4a55      	ldr	r2, [pc, #340]	; (800f850 <tcp_process+0x7dc>)
 800f6fc:	6013      	str	r3, [r2, #0]
 800f6fe:	e013      	b.n	800f728 <tcp_process+0x6b4>
 800f700:	4b53      	ldr	r3, [pc, #332]	; (800f850 <tcp_process+0x7dc>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	613b      	str	r3, [r7, #16]
 800f706:	e00c      	b.n	800f722 <tcp_process+0x6ae>
 800f708:	693b      	ldr	r3, [r7, #16]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d104      	bne.n	800f71c <tcp_process+0x6a8>
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	68da      	ldr	r2, [r3, #12]
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	60da      	str	r2, [r3, #12]
 800f71a:	e005      	b.n	800f728 <tcp_process+0x6b4>
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	68db      	ldr	r3, [r3, #12]
 800f720:	613b      	str	r3, [r7, #16]
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d1ef      	bne.n	800f708 <tcp_process+0x694>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2200      	movs	r2, #0
 800f72c:	60da      	str	r2, [r3, #12]
 800f72e:	4b43      	ldr	r3, [pc, #268]	; (800f83c <tcp_process+0x7c8>)
 800f730:	2201      	movs	r2, #1
 800f732:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	220a      	movs	r2, #10
 800f738:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f73a:	4b41      	ldr	r3, [pc, #260]	; (800f840 <tcp_process+0x7cc>)
 800f73c:	681a      	ldr	r2, [r3, #0]
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	60da      	str	r2, [r3, #12]
 800f742:	4a3f      	ldr	r2, [pc, #252]	; (800f840 <tcp_process+0x7cc>)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6013      	str	r3, [r2, #0]
 800f748:	f003 f8ea 	bl	8012920 <tcp_timer_needed>
      }
      break;
 800f74c:	e06c      	b.n	800f828 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f000 f984 	bl	800fa5c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f754:	4b3b      	ldr	r3, [pc, #236]	; (800f844 <tcp_process+0x7d0>)
 800f756:	781b      	ldrb	r3, [r3, #0]
 800f758:	f003 0310 	and.w	r3, r3, #16
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d065      	beq.n	800f82c <tcp_process+0x7b8>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f764:	4b38      	ldr	r3, [pc, #224]	; (800f848 <tcp_process+0x7d4>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	429a      	cmp	r2, r3
 800f76a:	d15f      	bne.n	800f82c <tcp_process+0x7b8>
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f770:	2b00      	cmp	r3, #0
 800f772:	d15b      	bne.n	800f82c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f774:	6878      	ldr	r0, [r7, #4]
 800f776:	f7fe fcf1 	bl	800e15c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f77a:	4b35      	ldr	r3, [pc, #212]	; (800f850 <tcp_process+0x7dc>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	687a      	ldr	r2, [r7, #4]
 800f780:	429a      	cmp	r2, r3
 800f782:	d105      	bne.n	800f790 <tcp_process+0x71c>
 800f784:	4b32      	ldr	r3, [pc, #200]	; (800f850 <tcp_process+0x7dc>)
 800f786:	681b      	ldr	r3, [r3, #0]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	4a31      	ldr	r2, [pc, #196]	; (800f850 <tcp_process+0x7dc>)
 800f78c:	6013      	str	r3, [r2, #0]
 800f78e:	e013      	b.n	800f7b8 <tcp_process+0x744>
 800f790:	4b2f      	ldr	r3, [pc, #188]	; (800f850 <tcp_process+0x7dc>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	60fb      	str	r3, [r7, #12]
 800f796:	e00c      	b.n	800f7b2 <tcp_process+0x73e>
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68db      	ldr	r3, [r3, #12]
 800f79c:	687a      	ldr	r2, [r7, #4]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d104      	bne.n	800f7ac <tcp_process+0x738>
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	68da      	ldr	r2, [r3, #12]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	60da      	str	r2, [r3, #12]
 800f7aa:	e005      	b.n	800f7b8 <tcp_process+0x744>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	68db      	ldr	r3, [r3, #12]
 800f7b0:	60fb      	str	r3, [r7, #12]
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d1ef      	bne.n	800f798 <tcp_process+0x724>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	60da      	str	r2, [r3, #12]
 800f7be:	4b1f      	ldr	r3, [pc, #124]	; (800f83c <tcp_process+0x7c8>)
 800f7c0:	2201      	movs	r2, #1
 800f7c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	220a      	movs	r2, #10
 800f7c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f7ca:	4b1d      	ldr	r3, [pc, #116]	; (800f840 <tcp_process+0x7cc>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	60da      	str	r2, [r3, #12]
 800f7d2:	4a1b      	ldr	r2, [pc, #108]	; (800f840 <tcp_process+0x7cc>)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	f003 f8a2 	bl	8012920 <tcp_timer_needed>
      }
      break;
 800f7dc:	e026      	b.n	800f82c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 f93c 	bl	800fa5c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f7e4:	4b17      	ldr	r3, [pc, #92]	; (800f844 <tcp_process+0x7d0>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	f003 0310 	and.w	r3, r3, #16
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d01f      	beq.n	800f830 <tcp_process+0x7bc>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7f4:	4b14      	ldr	r3, [pc, #80]	; (800f848 <tcp_process+0x7d4>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	429a      	cmp	r2, r3
 800f7fa:	d119      	bne.n	800f830 <tcp_process+0x7bc>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f800:	2b00      	cmp	r3, #0
 800f802:	d115      	bne.n	800f830 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f804:	4b11      	ldr	r3, [pc, #68]	; (800f84c <tcp_process+0x7d8>)
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	f043 0310 	orr.w	r3, r3, #16
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	4b0f      	ldr	r3, [pc, #60]	; (800f84c <tcp_process+0x7d8>)
 800f810:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f812:	e00d      	b.n	800f830 <tcp_process+0x7bc>
    default:
      break;
 800f814:	bf00      	nop
 800f816:	e00c      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f818:	bf00      	nop
 800f81a:	e00a      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f81c:	bf00      	nop
 800f81e:	e008      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f820:	bf00      	nop
 800f822:	e006      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f824:	bf00      	nop
 800f826:	e004      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f828:	bf00      	nop
 800f82a:	e002      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f82c:	bf00      	nop
 800f82e:	e000      	b.n	800f832 <tcp_process+0x7be>
      break;
 800f830:	bf00      	nop
  }
  return ERR_OK;
 800f832:	2300      	movs	r3, #0
}
 800f834:	4618      	mov	r0, r3
 800f836:	3724      	adds	r7, #36	; 0x24
 800f838:	46bd      	mov	sp, r7
 800f83a:	bd90      	pop	{r4, r7, pc}
 800f83c:	2000ce4c 	.word	0x2000ce4c
 800f840:	2000ce48 	.word	0x2000ce48
 800f844:	2000ce7c 	.word	0x2000ce7c
 800f848:	2000ce74 	.word	0x2000ce74
 800f84c:	2000ce7d 	.word	0x2000ce7d
 800f850:	2000ce44 	.word	0x2000ce44

0800f854 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f854:	b590      	push	{r4, r7, lr}
 800f856:	b085      	sub	sp, #20
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d106      	bne.n	800f872 <tcp_oos_insert_segment+0x1e>
 800f864:	4b3b      	ldr	r3, [pc, #236]	; (800f954 <tcp_oos_insert_segment+0x100>)
 800f866:	f240 421f 	movw	r2, #1055	; 0x41f
 800f86a:	493b      	ldr	r1, [pc, #236]	; (800f958 <tcp_oos_insert_segment+0x104>)
 800f86c:	483b      	ldr	r0, [pc, #236]	; (800f95c <tcp_oos_insert_segment+0x108>)
 800f86e:	f008 fa9d 	bl	8017dac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	899b      	ldrh	r3, [r3, #12]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fb f918 	bl	800aab0 <lwip_htons>
 800f880:	4603      	mov	r3, r0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d028      	beq.n	800f8de <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f88c:	6838      	ldr	r0, [r7, #0]
 800f88e:	f7fe f977 	bl	800db80 <tcp_segs_free>
    next = NULL;
 800f892:	2300      	movs	r3, #0
 800f894:	603b      	str	r3, [r7, #0]
 800f896:	e056      	b.n	800f946 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f898:	683b      	ldr	r3, [r7, #0]
 800f89a:	68db      	ldr	r3, [r3, #12]
 800f89c:	899b      	ldrh	r3, [r3, #12]
 800f89e:	b29b      	uxth	r3, r3
 800f8a0:	4618      	mov	r0, r3
 800f8a2:	f7fb f905 	bl	800aab0 <lwip_htons>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	b2db      	uxtb	r3, r3
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d00d      	beq.n	800f8ce <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	899b      	ldrh	r3, [r3, #12]
 800f8b8:	b29c      	uxth	r4, r3
 800f8ba:	2001      	movs	r0, #1
 800f8bc:	f7fb f8f8 	bl	800aab0 <lwip_htons>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	461a      	mov	r2, r3
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	4322      	orrs	r2, r4
 800f8ca:	b292      	uxth	r2, r2
 800f8cc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f7fe f966 	bl	800dbaa <tcp_seg_free>
    while (next &&
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00e      	beq.n	800f902 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	891b      	ldrh	r3, [r3, #8]
 800f8e8:	461a      	mov	r2, r3
 800f8ea:	4b1d      	ldr	r3, [pc, #116]	; (800f960 <tcp_oos_insert_segment+0x10c>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	441a      	add	r2, r3
 800f8f0:	683b      	ldr	r3, [r7, #0]
 800f8f2:	68db      	ldr	r3, [r3, #12]
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	8909      	ldrh	r1, [r1, #8]
 800f8fa:	440b      	add	r3, r1
 800f8fc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	daca      	bge.n	800f898 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f902:	683b      	ldr	r3, [r7, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01e      	beq.n	800f946 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	891b      	ldrh	r3, [r3, #8]
 800f90c:	461a      	mov	r2, r3
 800f90e:	4b14      	ldr	r3, [pc, #80]	; (800f960 <tcp_oos_insert_segment+0x10c>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	441a      	add	r2, r3
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	dd12      	ble.n	800f946 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	68db      	ldr	r3, [r3, #12]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	b29a      	uxth	r2, r3
 800f928:	4b0d      	ldr	r3, [pc, #52]	; (800f960 <tcp_oos_insert_segment+0x10c>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	b29b      	uxth	r3, r3
 800f92e:	1ad3      	subs	r3, r2, r3
 800f930:	b29a      	uxth	r2, r3
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	685a      	ldr	r2, [r3, #4]
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	891b      	ldrh	r3, [r3, #8]
 800f93e:	4619      	mov	r1, r3
 800f940:	4610      	mov	r0, r2
 800f942:	f7fc fb63 	bl	800c00c <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	601a      	str	r2, [r3, #0]
}
 800f94c:	bf00      	nop
 800f94e:	3714      	adds	r7, #20
 800f950:	46bd      	mov	sp, r7
 800f952:	bd90      	pop	{r4, r7, pc}
 800f954:	0801a35c 	.word	0x0801a35c
 800f958:	0801a61c 	.word	0x0801a61c
 800f95c:	0801a3a8 	.word	0x0801a3a8
 800f960:	2000ce70 	.word	0x2000ce70

0800f964 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f964:	b5b0      	push	{r4, r5, r7, lr}
 800f966:	b086      	sub	sp, #24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
 800f970:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f972:	e03e      	b.n	800f9f2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	4618      	mov	r0, r3
 800f984:	f7fc fd56 	bl	800c434 <pbuf_clen>
 800f988:	4603      	mov	r3, r0
 800f98a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f992:	8a7a      	ldrh	r2, [r7, #18]
 800f994:	429a      	cmp	r2, r3
 800f996:	d906      	bls.n	800f9a6 <tcp_free_acked_segments+0x42>
 800f998:	4b2a      	ldr	r3, [pc, #168]	; (800fa44 <tcp_free_acked_segments+0xe0>)
 800f99a:	f240 4257 	movw	r2, #1111	; 0x457
 800f99e:	492a      	ldr	r1, [pc, #168]	; (800fa48 <tcp_free_acked_segments+0xe4>)
 800f9a0:	482a      	ldr	r0, [pc, #168]	; (800fa4c <tcp_free_acked_segments+0xe8>)
 800f9a2:	f008 fa03 	bl	8017dac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f9ac:	8a7b      	ldrh	r3, [r7, #18]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	b29a      	uxth	r2, r3
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f9b8:	697b      	ldr	r3, [r7, #20]
 800f9ba:	891a      	ldrh	r2, [r3, #8]
 800f9bc:	4b24      	ldr	r3, [pc, #144]	; (800fa50 <tcp_free_acked_segments+0xec>)
 800f9be:	881b      	ldrh	r3, [r3, #0]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	b29a      	uxth	r2, r3
 800f9c4:	4b22      	ldr	r3, [pc, #136]	; (800fa50 <tcp_free_acked_segments+0xec>)
 800f9c6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f9c8:	6978      	ldr	r0, [r7, #20]
 800f9ca:	f7fe f8ee 	bl	800dbaa <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d00c      	beq.n	800f9f2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d109      	bne.n	800f9f2 <tcp_free_acked_segments+0x8e>
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d106      	bne.n	800f9f2 <tcp_free_acked_segments+0x8e>
 800f9e4:	4b17      	ldr	r3, [pc, #92]	; (800fa44 <tcp_free_acked_segments+0xe0>)
 800f9e6:	f240 4261 	movw	r2, #1121	; 0x461
 800f9ea:	491a      	ldr	r1, [pc, #104]	; (800fa54 <tcp_free_acked_segments+0xf0>)
 800f9ec:	4817      	ldr	r0, [pc, #92]	; (800fa4c <tcp_free_acked_segments+0xe8>)
 800f9ee:	f008 f9dd 	bl	8017dac <iprintf>
  while (seg_list != NULL &&
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d020      	beq.n	800fa3a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	4618      	mov	r0, r3
 800fa00:	f7fb f86b 	bl	800aada <lwip_htonl>
 800fa04:	4604      	mov	r4, r0
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	891b      	ldrh	r3, [r3, #8]
 800fa0a:	461d      	mov	r5, r3
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	68db      	ldr	r3, [r3, #12]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	b29b      	uxth	r3, r3
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fb f84b 	bl	800aab0 <lwip_htons>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	f003 0303 	and.w	r3, r3, #3
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d001      	beq.n	800fa2a <tcp_free_acked_segments+0xc6>
 800fa26:	2301      	movs	r3, #1
 800fa28:	e000      	b.n	800fa2c <tcp_free_acked_segments+0xc8>
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	442b      	add	r3, r5
 800fa2e:	18e2      	adds	r2, r4, r3
 800fa30:	4b09      	ldr	r3, [pc, #36]	; (800fa58 <tcp_free_acked_segments+0xf4>)
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	dd9c      	ble.n	800f974 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fa3a:	68bb      	ldr	r3, [r7, #8]
}
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	3718      	adds	r7, #24
 800fa40:	46bd      	mov	sp, r7
 800fa42:	bdb0      	pop	{r4, r5, r7, pc}
 800fa44:	0801a35c 	.word	0x0801a35c
 800fa48:	0801a644 	.word	0x0801a644
 800fa4c:	0801a3a8 	.word	0x0801a3a8
 800fa50:	2000ce78 	.word	0x2000ce78
 800fa54:	0801a66c 	.word	0x0801a66c
 800fa58:	2000ce74 	.word	0x2000ce74

0800fa5c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fa5c:	b5b0      	push	{r4, r5, r7, lr}
 800fa5e:	b094      	sub	sp, #80	; 0x50
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fa64:	2300      	movs	r3, #0
 800fa66:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d106      	bne.n	800fa7c <tcp_receive+0x20>
 800fa6e:	4b91      	ldr	r3, [pc, #580]	; (800fcb4 <tcp_receive+0x258>)
 800fa70:	f240 427b 	movw	r2, #1147	; 0x47b
 800fa74:	4990      	ldr	r1, [pc, #576]	; (800fcb8 <tcp_receive+0x25c>)
 800fa76:	4891      	ldr	r0, [pc, #580]	; (800fcbc <tcp_receive+0x260>)
 800fa78:	f008 f998 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	7d1b      	ldrb	r3, [r3, #20]
 800fa80:	2b03      	cmp	r3, #3
 800fa82:	d806      	bhi.n	800fa92 <tcp_receive+0x36>
 800fa84:	4b8b      	ldr	r3, [pc, #556]	; (800fcb4 <tcp_receive+0x258>)
 800fa86:	f240 427c 	movw	r2, #1148	; 0x47c
 800fa8a:	498d      	ldr	r1, [pc, #564]	; (800fcc0 <tcp_receive+0x264>)
 800fa8c:	488b      	ldr	r0, [pc, #556]	; (800fcbc <tcp_receive+0x260>)
 800fa8e:	f008 f98d 	bl	8017dac <iprintf>

  if (flags & TCP_ACK) {
 800fa92:	4b8c      	ldr	r3, [pc, #560]	; (800fcc4 <tcp_receive+0x268>)
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	f003 0310 	and.w	r3, r3, #16
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	f000 8264 	beq.w	800ff68 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800faa6:	461a      	mov	r2, r3
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faac:	4413      	add	r3, r2
 800faae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fab4:	4b84      	ldr	r3, [pc, #528]	; (800fcc8 <tcp_receive+0x26c>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	1ad3      	subs	r3, r2, r3
 800faba:	2b00      	cmp	r3, #0
 800fabc:	db1b      	blt.n	800faf6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fac2:	4b81      	ldr	r3, [pc, #516]	; (800fcc8 <tcp_receive+0x26c>)
 800fac4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fac6:	429a      	cmp	r2, r3
 800fac8:	d106      	bne.n	800fad8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800face:	4b7f      	ldr	r3, [pc, #508]	; (800fccc <tcp_receive+0x270>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	1ad3      	subs	r3, r2, r3
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	db0e      	blt.n	800faf6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fadc:	4b7b      	ldr	r3, [pc, #492]	; (800fccc <tcp_receive+0x270>)
 800fade:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fae0:	429a      	cmp	r2, r3
 800fae2:	d125      	bne.n	800fb30 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fae4:	4b7a      	ldr	r3, [pc, #488]	; (800fcd0 <tcp_receive+0x274>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	89db      	ldrh	r3, [r3, #14]
 800faea:	b29a      	uxth	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800faf2:	429a      	cmp	r2, r3
 800faf4:	d91c      	bls.n	800fb30 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800faf6:	4b76      	ldr	r3, [pc, #472]	; (800fcd0 <tcp_receive+0x274>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	89db      	ldrh	r3, [r3, #14]
 800fafc:	b29a      	uxth	r2, r3
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fb10:	429a      	cmp	r2, r3
 800fb12:	d205      	bcs.n	800fb20 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fb20:	4b69      	ldr	r3, [pc, #420]	; (800fcc8 <tcp_receive+0x26c>)
 800fb22:	681a      	ldr	r2, [r3, #0]
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fb28:	4b68      	ldr	r3, [pc, #416]	; (800fccc <tcp_receive+0x270>)
 800fb2a:	681a      	ldr	r2, [r3, #0]
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fb30:	4b66      	ldr	r3, [pc, #408]	; (800fccc <tcp_receive+0x270>)
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb38:	1ad3      	subs	r3, r2, r3
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	dc58      	bgt.n	800fbf0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fb3e:	4b65      	ldr	r3, [pc, #404]	; (800fcd4 <tcp_receive+0x278>)
 800fb40:	881b      	ldrh	r3, [r3, #0]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d14b      	bne.n	800fbde <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fb50:	4413      	add	r3, r2
 800fb52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d142      	bne.n	800fbde <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	db3d      	blt.n	800fbde <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb66:	4b59      	ldr	r3, [pc, #356]	; (800fccc <tcp_receive+0x270>)
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	429a      	cmp	r2, r3
 800fb6c:	d137      	bne.n	800fbde <tcp_receive+0x182>
              found_dupack = 1;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb78:	2bff      	cmp	r3, #255	; 0xff
 800fb7a:	d007      	beq.n	800fb8c <tcp_receive+0x130>
                ++pcb->dupacks;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb82:	3301      	adds	r3, #1
 800fb84:	b2da      	uxtb	r2, r3
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fb92:	2b03      	cmp	r3, #3
 800fb94:	d91b      	bls.n	800fbce <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fba0:	4413      	add	r3, r2
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fbaa:	429a      	cmp	r2, r3
 800fbac:	d30a      	bcc.n	800fbc4 <tcp_receive+0x168>
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fbb8:	4413      	add	r3, r2
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fbc2:	e004      	b.n	800fbce <tcp_receive+0x172>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fbca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	d902      	bls.n	800fbde <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f002 fb45 	bl	8012268 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fbde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	f040 8161 	bne.w	800fea8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbee:	e15b      	b.n	800fea8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fbf0:	4b36      	ldr	r3, [pc, #216]	; (800fccc <tcp_receive+0x270>)
 800fbf2:	681a      	ldr	r2, [r3, #0]
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbf8:	1ad3      	subs	r3, r2, r3
 800fbfa:	3b01      	subs	r3, #1
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	f2c0 814e 	blt.w	800fe9e <tcp_receive+0x442>
 800fc02:	4b32      	ldr	r3, [pc, #200]	; (800fccc <tcp_receive+0x270>)
 800fc04:	681a      	ldr	r2, [r3, #0]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	f300 8146 	bgt.w	800fe9e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	8b5b      	ldrh	r3, [r3, #26]
 800fc16:	f003 0304 	and.w	r3, r3, #4
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d010      	beq.n	800fc40 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	8b5b      	ldrh	r3, [r3, #26]
 800fc22:	f023 0304 	bic.w	r3, r3, #4
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc4e:	10db      	asrs	r3, r3, #3
 800fc50:	b21b      	sxth	r3, r3
 800fc52:	b29a      	uxth	r2, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	4413      	add	r3, r2
 800fc5e:	b29b      	uxth	r3, r3
 800fc60:	b21a      	sxth	r2, r3
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fc68:	4b18      	ldr	r3, [pc, #96]	; (800fccc <tcp_receive+0x270>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	b29a      	uxth	r2, r3
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	1ad3      	subs	r3, r2, r3
 800fc76:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2200      	movs	r2, #0
 800fc7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fc80:	4b12      	ldr	r3, [pc, #72]	; (800fccc <tcp_receive+0x270>)
 800fc82:	681a      	ldr	r2, [r3, #0]
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	7d1b      	ldrb	r3, [r3, #20]
 800fc8c:	2b03      	cmp	r3, #3
 800fc8e:	f240 8097 	bls.w	800fdc0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d245      	bcs.n	800fd2e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	8b5b      	ldrh	r3, [r3, #26]
 800fca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d014      	beq.n	800fcd8 <tcp_receive+0x27c>
 800fcae:	2301      	movs	r3, #1
 800fcb0:	e013      	b.n	800fcda <tcp_receive+0x27e>
 800fcb2:	bf00      	nop
 800fcb4:	0801a35c 	.word	0x0801a35c
 800fcb8:	0801a68c 	.word	0x0801a68c
 800fcbc:	0801a3a8 	.word	0x0801a3a8
 800fcc0:	0801a6a8 	.word	0x0801a6a8
 800fcc4:	2000ce7c 	.word	0x2000ce7c
 800fcc8:	2000ce70 	.word	0x2000ce70
 800fccc:	2000ce74 	.word	0x2000ce74
 800fcd0:	2000ce60 	.word	0x2000ce60
 800fcd4:	2000ce7a 	.word	0x2000ce7a
 800fcd8:	2302      	movs	r3, #2
 800fcda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800fcde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fce8:	fb12 f303 	smulbb	r3, r2, r3
 800fcec:	b29b      	uxth	r3, r3
 800fcee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800fcf0:	4293      	cmp	r3, r2
 800fcf2:	bf28      	it	cs
 800fcf4:	4613      	movcs	r3, r2
 800fcf6:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fcfe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd00:	4413      	add	r3, r2
 800fd02:	b29a      	uxth	r2, r3
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd0a:	429a      	cmp	r2, r3
 800fd0c:	d309      	bcc.n	800fd22 <tcp_receive+0x2c6>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd14:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fd16:	4413      	add	r3, r2
 800fd18:	b29a      	uxth	r2, r3
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fd20:	e04e      	b.n	800fdc0 <tcp_receive+0x364>
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fd2c:	e048      	b.n	800fdc0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fd34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd36:	4413      	add	r3, r2
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d309      	bcc.n	800fd58 <tcp_receive+0x2fc>
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fd4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd4c:	4413      	add	r3, r2
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fd56:	e004      	b.n	800fd62 <tcp_receive+0x306>
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d326      	bcc.n	800fdc0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd7e:	1ad3      	subs	r3, r2, r3
 800fd80:	b29a      	uxth	r2, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd92:	4413      	add	r3, r2
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d30a      	bcc.n	800fdb6 <tcp_receive+0x35a>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdaa:	4413      	add	r3, r2
 800fdac:	b29a      	uxth	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fdb4:	e004      	b.n	800fdc0 <tcp_receive+0x364>
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc8:	4a98      	ldr	r2, [pc, #608]	; (801002c <tcp_receive+0x5d0>)
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7ff fdca 	bl	800f964 <tcp_free_acked_segments>
 800fdd0:	4602      	mov	r2, r0
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdde:	4a94      	ldr	r2, [pc, #592]	; (8010030 <tcp_receive+0x5d4>)
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7ff fdbf 	bl	800f964 <tcp_free_acked_segments>
 800fde6:	4602      	mov	r2, r0
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d104      	bne.n	800fdfe <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdfa:	861a      	strh	r2, [r3, #48]	; 0x30
 800fdfc:	e002      	b.n	800fe04 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2200      	movs	r2, #0
 800fe02:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	2200      	movs	r2, #0
 800fe08:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d103      	bne.n	800fe1a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	2200      	movs	r2, #0
 800fe16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800fe20:	4b84      	ldr	r3, [pc, #528]	; (8010034 <tcp_receive+0x5d8>)
 800fe22:	881b      	ldrh	r3, [r3, #0]
 800fe24:	4413      	add	r3, r2
 800fe26:	b29a      	uxth	r2, r3
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	8b5b      	ldrh	r3, [r3, #26]
 800fe32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d035      	beq.n	800fea6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d118      	bne.n	800fe74 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d00c      	beq.n	800fe64 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe52:	68db      	ldr	r3, [r3, #12]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fa fe3f 	bl	800aada <lwip_htonl>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	dc20      	bgt.n	800fea6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	8b5b      	ldrh	r3, [r3, #26]
 800fe68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe6c:	b29a      	uxth	r2, r3
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe72:	e018      	b.n	800fea6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	685b      	ldr	r3, [r3, #4]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fa fe2a 	bl	800aada <lwip_htonl>
 800fe86:	4603      	mov	r3, r0
 800fe88:	1ae3      	subs	r3, r4, r3
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	dc0b      	bgt.n	800fea6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	8b5b      	ldrh	r3, [r3, #26]
 800fe92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe96:	b29a      	uxth	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe9c:	e003      	b.n	800fea6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fe9e:	6878      	ldr	r0, [r7, #4]
 800fea0:	f002 fbce 	bl	8012640 <tcp_send_empty_ack>
 800fea4:	e000      	b.n	800fea8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fea6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800feac:	2b00      	cmp	r3, #0
 800feae:	d05b      	beq.n	800ff68 <tcp_receive+0x50c>
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800feb4:	4b60      	ldr	r3, [pc, #384]	; (8010038 <tcp_receive+0x5dc>)
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	1ad3      	subs	r3, r2, r3
 800feba:	2b00      	cmp	r3, #0
 800febc:	da54      	bge.n	800ff68 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800febe:	4b5f      	ldr	r3, [pc, #380]	; (801003c <tcp_receive+0x5e0>)
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	b29a      	uxth	r2, r3
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fec8:	b29b      	uxth	r3, r3
 800feca:	1ad3      	subs	r3, r2, r3
 800fecc:	b29b      	uxth	r3, r3
 800fece:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fed2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fedc:	10db      	asrs	r3, r3, #3
 800fede:	b21b      	sxth	r3, r3
 800fee0:	b29b      	uxth	r3, r3
 800fee2:	1ad3      	subs	r3, r2, r3
 800fee4:	b29b      	uxth	r3, r3
 800fee6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fef0:	b29a      	uxth	r2, r3
 800fef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fef6:	4413      	add	r3, r2
 800fef8:	b29b      	uxth	r3, r3
 800fefa:	b21a      	sxth	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ff00:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	da05      	bge.n	800ff14 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800ff08:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff0c:	425b      	negs	r3, r3
 800ff0e:	b29b      	uxth	r3, r3
 800ff10:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ff14:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff1e:	109b      	asrs	r3, r3, #2
 800ff20:	b21b      	sxth	r3, r3
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	1ad3      	subs	r3, r2, r3
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff32:	b29a      	uxth	r2, r3
 800ff34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff38:	4413      	add	r3, r2
 800ff3a:	b29b      	uxth	r3, r3
 800ff3c:	b21a      	sxth	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ff48:	10db      	asrs	r3, r3, #3
 800ff4a:	b21b      	sxth	r3, r3
 800ff4c:	b29a      	uxth	r2, r3
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	4413      	add	r3, r2
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	b21a      	sxth	r2, r3
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	2200      	movs	r2, #0
 800ff66:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ff68:	4b35      	ldr	r3, [pc, #212]	; (8010040 <tcp_receive+0x5e4>)
 800ff6a:	881b      	ldrh	r3, [r3, #0]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	f000 84e2 	beq.w	8010936 <tcp_receive+0xeda>
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	7d1b      	ldrb	r3, [r3, #20]
 800ff76:	2b06      	cmp	r3, #6
 800ff78:	f200 84dd 	bhi.w	8010936 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff80:	4b30      	ldr	r3, [pc, #192]	; (8010044 <tcp_receive+0x5e8>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	1ad3      	subs	r3, r2, r3
 800ff86:	3b01      	subs	r3, #1
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	f2c0 808f 	blt.w	80100ac <tcp_receive+0x650>
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff92:	4b2b      	ldr	r3, [pc, #172]	; (8010040 <tcp_receive+0x5e4>)
 800ff94:	881b      	ldrh	r3, [r3, #0]
 800ff96:	4619      	mov	r1, r3
 800ff98:	4b2a      	ldr	r3, [pc, #168]	; (8010044 <tcp_receive+0x5e8>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	440b      	add	r3, r1
 800ff9e:	1ad3      	subs	r3, r2, r3
 800ffa0:	3301      	adds	r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	f300 8082 	bgt.w	80100ac <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ffa8:	4b27      	ldr	r3, [pc, #156]	; (8010048 <tcp_receive+0x5ec>)
 800ffaa:	685b      	ldr	r3, [r3, #4]
 800ffac:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffb2:	4b24      	ldr	r3, [pc, #144]	; (8010044 <tcp_receive+0x5e8>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ffba:	4b23      	ldr	r3, [pc, #140]	; (8010048 <tcp_receive+0x5ec>)
 800ffbc:	685b      	ldr	r3, [r3, #4]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d106      	bne.n	800ffd0 <tcp_receive+0x574>
 800ffc2:	4b22      	ldr	r3, [pc, #136]	; (801004c <tcp_receive+0x5f0>)
 800ffc4:	f240 5294 	movw	r2, #1428	; 0x594
 800ffc8:	4921      	ldr	r1, [pc, #132]	; (8010050 <tcp_receive+0x5f4>)
 800ffca:	4822      	ldr	r0, [pc, #136]	; (8010054 <tcp_receive+0x5f8>)
 800ffcc:	f007 feee 	bl	8017dac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ffd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ffd6:	4293      	cmp	r3, r2
 800ffd8:	d906      	bls.n	800ffe8 <tcp_receive+0x58c>
 800ffda:	4b1c      	ldr	r3, [pc, #112]	; (801004c <tcp_receive+0x5f0>)
 800ffdc:	f240 5295 	movw	r2, #1429	; 0x595
 800ffe0:	491d      	ldr	r1, [pc, #116]	; (8010058 <tcp_receive+0x5fc>)
 800ffe2:	481c      	ldr	r0, [pc, #112]	; (8010054 <tcp_receive+0x5f8>)
 800ffe4:	f007 fee2 	bl	8017dac <iprintf>
      off = (u16_t)off32;
 800ffe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ffee:	4b16      	ldr	r3, [pc, #88]	; (8010048 <tcp_receive+0x5ec>)
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	891b      	ldrh	r3, [r3, #8]
 800fff4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fff8:	429a      	cmp	r2, r3
 800fffa:	d906      	bls.n	801000a <tcp_receive+0x5ae>
 800fffc:	4b13      	ldr	r3, [pc, #76]	; (801004c <tcp_receive+0x5f0>)
 800fffe:	f240 5297 	movw	r2, #1431	; 0x597
 8010002:	4916      	ldr	r1, [pc, #88]	; (801005c <tcp_receive+0x600>)
 8010004:	4813      	ldr	r0, [pc, #76]	; (8010054 <tcp_receive+0x5f8>)
 8010006:	f007 fed1 	bl	8017dac <iprintf>
      inseg.len -= off;
 801000a:	4b0f      	ldr	r3, [pc, #60]	; (8010048 <tcp_receive+0x5ec>)
 801000c:	891a      	ldrh	r2, [r3, #8]
 801000e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	b29a      	uxth	r2, r3
 8010016:	4b0c      	ldr	r3, [pc, #48]	; (8010048 <tcp_receive+0x5ec>)
 8010018:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801001a:	4b0b      	ldr	r3, [pc, #44]	; (8010048 <tcp_receive+0x5ec>)
 801001c:	685b      	ldr	r3, [r3, #4]
 801001e:	891a      	ldrh	r2, [r3, #8]
 8010020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010024:	1ad3      	subs	r3, r2, r3
 8010026:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010028:	e02a      	b.n	8010080 <tcp_receive+0x624>
 801002a:	bf00      	nop
 801002c:	0801a6c4 	.word	0x0801a6c4
 8010030:	0801a6cc 	.word	0x0801a6cc
 8010034:	2000ce78 	.word	0x2000ce78
 8010038:	2000ce74 	.word	0x2000ce74
 801003c:	2000ce38 	.word	0x2000ce38
 8010040:	2000ce7a 	.word	0x2000ce7a
 8010044:	2000ce70 	.word	0x2000ce70
 8010048:	2000ce50 	.word	0x2000ce50
 801004c:	0801a35c 	.word	0x0801a35c
 8010050:	0801a6d4 	.word	0x0801a6d4
 8010054:	0801a3a8 	.word	0x0801a3a8
 8010058:	0801a6e4 	.word	0x0801a6e4
 801005c:	0801a6f4 	.word	0x0801a6f4
        off -= p->len;
 8010060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010062:	895b      	ldrh	r3, [r3, #10]
 8010064:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010068:	1ad3      	subs	r3, r2, r3
 801006a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801006e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010070:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010072:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010076:	2200      	movs	r2, #0
 8010078:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801007a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010082:	895b      	ldrh	r3, [r3, #10]
 8010084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010088:	429a      	cmp	r2, r3
 801008a:	d8e9      	bhi.n	8010060 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801008c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010090:	4619      	mov	r1, r3
 8010092:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010094:	f7fc f8ba 	bl	800c20c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801009c:	4a91      	ldr	r2, [pc, #580]	; (80102e4 <tcp_receive+0x888>)
 801009e:	6013      	str	r3, [r2, #0]
 80100a0:	4b91      	ldr	r3, [pc, #580]	; (80102e8 <tcp_receive+0x88c>)
 80100a2:	68db      	ldr	r3, [r3, #12]
 80100a4:	4a8f      	ldr	r2, [pc, #572]	; (80102e4 <tcp_receive+0x888>)
 80100a6:	6812      	ldr	r2, [r2, #0]
 80100a8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80100aa:	e00d      	b.n	80100c8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80100ac:	4b8d      	ldr	r3, [pc, #564]	; (80102e4 <tcp_receive+0x888>)
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	da06      	bge.n	80100c8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	8b5b      	ldrh	r3, [r3, #26]
 80100be:	f043 0302 	orr.w	r3, r3, #2
 80100c2:	b29a      	uxth	r2, r3
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80100c8:	4b86      	ldr	r3, [pc, #536]	; (80102e4 <tcp_receive+0x888>)
 80100ca:	681a      	ldr	r2, [r3, #0]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100d0:	1ad3      	subs	r3, r2, r3
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	f2c0 842a 	blt.w	801092c <tcp_receive+0xed0>
 80100d8:	4b82      	ldr	r3, [pc, #520]	; (80102e4 <tcp_receive+0x888>)
 80100da:	681a      	ldr	r2, [r3, #0]
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e0:	6879      	ldr	r1, [r7, #4]
 80100e2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80100e4:	440b      	add	r3, r1
 80100e6:	1ad3      	subs	r3, r2, r3
 80100e8:	3301      	adds	r3, #1
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f300 841e 	bgt.w	801092c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100f4:	4b7b      	ldr	r3, [pc, #492]	; (80102e4 <tcp_receive+0x888>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	429a      	cmp	r2, r3
 80100fa:	f040 829a 	bne.w	8010632 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80100fe:	4b7a      	ldr	r3, [pc, #488]	; (80102e8 <tcp_receive+0x88c>)
 8010100:	891c      	ldrh	r4, [r3, #8]
 8010102:	4b79      	ldr	r3, [pc, #484]	; (80102e8 <tcp_receive+0x88c>)
 8010104:	68db      	ldr	r3, [r3, #12]
 8010106:	899b      	ldrh	r3, [r3, #12]
 8010108:	b29b      	uxth	r3, r3
 801010a:	4618      	mov	r0, r3
 801010c:	f7fa fcd0 	bl	800aab0 <lwip_htons>
 8010110:	4603      	mov	r3, r0
 8010112:	b2db      	uxtb	r3, r3
 8010114:	f003 0303 	and.w	r3, r3, #3
 8010118:	2b00      	cmp	r3, #0
 801011a:	d001      	beq.n	8010120 <tcp_receive+0x6c4>
 801011c:	2301      	movs	r3, #1
 801011e:	e000      	b.n	8010122 <tcp_receive+0x6c6>
 8010120:	2300      	movs	r3, #0
 8010122:	4423      	add	r3, r4
 8010124:	b29a      	uxth	r2, r3
 8010126:	4b71      	ldr	r3, [pc, #452]	; (80102ec <tcp_receive+0x890>)
 8010128:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801012e:	4b6f      	ldr	r3, [pc, #444]	; (80102ec <tcp_receive+0x890>)
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	429a      	cmp	r2, r3
 8010134:	d275      	bcs.n	8010222 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010136:	4b6c      	ldr	r3, [pc, #432]	; (80102e8 <tcp_receive+0x88c>)
 8010138:	68db      	ldr	r3, [r3, #12]
 801013a:	899b      	ldrh	r3, [r3, #12]
 801013c:	b29b      	uxth	r3, r3
 801013e:	4618      	mov	r0, r3
 8010140:	f7fa fcb6 	bl	800aab0 <lwip_htons>
 8010144:	4603      	mov	r3, r0
 8010146:	b2db      	uxtb	r3, r3
 8010148:	f003 0301 	and.w	r3, r3, #1
 801014c:	2b00      	cmp	r3, #0
 801014e:	d01f      	beq.n	8010190 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010150:	4b65      	ldr	r3, [pc, #404]	; (80102e8 <tcp_receive+0x88c>)
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	899b      	ldrh	r3, [r3, #12]
 8010156:	b29b      	uxth	r3, r3
 8010158:	b21b      	sxth	r3, r3
 801015a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801015e:	b21c      	sxth	r4, r3
 8010160:	4b61      	ldr	r3, [pc, #388]	; (80102e8 <tcp_receive+0x88c>)
 8010162:	68db      	ldr	r3, [r3, #12]
 8010164:	899b      	ldrh	r3, [r3, #12]
 8010166:	b29b      	uxth	r3, r3
 8010168:	4618      	mov	r0, r3
 801016a:	f7fa fca1 	bl	800aab0 <lwip_htons>
 801016e:	4603      	mov	r3, r0
 8010170:	b2db      	uxtb	r3, r3
 8010172:	b29b      	uxth	r3, r3
 8010174:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010178:	b29b      	uxth	r3, r3
 801017a:	4618      	mov	r0, r3
 801017c:	f7fa fc98 	bl	800aab0 <lwip_htons>
 8010180:	4603      	mov	r3, r0
 8010182:	b21b      	sxth	r3, r3
 8010184:	4323      	orrs	r3, r4
 8010186:	b21a      	sxth	r2, r3
 8010188:	4b57      	ldr	r3, [pc, #348]	; (80102e8 <tcp_receive+0x88c>)
 801018a:	68db      	ldr	r3, [r3, #12]
 801018c:	b292      	uxth	r2, r2
 801018e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010194:	4b54      	ldr	r3, [pc, #336]	; (80102e8 <tcp_receive+0x88c>)
 8010196:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010198:	4b53      	ldr	r3, [pc, #332]	; (80102e8 <tcp_receive+0x88c>)
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	899b      	ldrh	r3, [r3, #12]
 801019e:	b29b      	uxth	r3, r3
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fa fc85 	bl	800aab0 <lwip_htons>
 80101a6:	4603      	mov	r3, r0
 80101a8:	b2db      	uxtb	r3, r3
 80101aa:	f003 0302 	and.w	r3, r3, #2
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d005      	beq.n	80101be <tcp_receive+0x762>
            inseg.len -= 1;
 80101b2:	4b4d      	ldr	r3, [pc, #308]	; (80102e8 <tcp_receive+0x88c>)
 80101b4:	891b      	ldrh	r3, [r3, #8]
 80101b6:	3b01      	subs	r3, #1
 80101b8:	b29a      	uxth	r2, r3
 80101ba:	4b4b      	ldr	r3, [pc, #300]	; (80102e8 <tcp_receive+0x88c>)
 80101bc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80101be:	4b4a      	ldr	r3, [pc, #296]	; (80102e8 <tcp_receive+0x88c>)
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	4a49      	ldr	r2, [pc, #292]	; (80102e8 <tcp_receive+0x88c>)
 80101c4:	8912      	ldrh	r2, [r2, #8]
 80101c6:	4611      	mov	r1, r2
 80101c8:	4618      	mov	r0, r3
 80101ca:	f7fb ff1f 	bl	800c00c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80101ce:	4b46      	ldr	r3, [pc, #280]	; (80102e8 <tcp_receive+0x88c>)
 80101d0:	891c      	ldrh	r4, [r3, #8]
 80101d2:	4b45      	ldr	r3, [pc, #276]	; (80102e8 <tcp_receive+0x88c>)
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	899b      	ldrh	r3, [r3, #12]
 80101d8:	b29b      	uxth	r3, r3
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fa fc68 	bl	800aab0 <lwip_htons>
 80101e0:	4603      	mov	r3, r0
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f003 0303 	and.w	r3, r3, #3
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d001      	beq.n	80101f0 <tcp_receive+0x794>
 80101ec:	2301      	movs	r3, #1
 80101ee:	e000      	b.n	80101f2 <tcp_receive+0x796>
 80101f0:	2300      	movs	r3, #0
 80101f2:	4423      	add	r3, r4
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	4b3d      	ldr	r3, [pc, #244]	; (80102ec <tcp_receive+0x890>)
 80101f8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80101fa:	4b3c      	ldr	r3, [pc, #240]	; (80102ec <tcp_receive+0x890>)
 80101fc:	881b      	ldrh	r3, [r3, #0]
 80101fe:	461a      	mov	r2, r3
 8010200:	4b38      	ldr	r3, [pc, #224]	; (80102e4 <tcp_receive+0x888>)
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	441a      	add	r2, r3
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801020a:	6879      	ldr	r1, [r7, #4]
 801020c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801020e:	440b      	add	r3, r1
 8010210:	429a      	cmp	r2, r3
 8010212:	d006      	beq.n	8010222 <tcp_receive+0x7c6>
 8010214:	4b36      	ldr	r3, [pc, #216]	; (80102f0 <tcp_receive+0x894>)
 8010216:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801021a:	4936      	ldr	r1, [pc, #216]	; (80102f4 <tcp_receive+0x898>)
 801021c:	4836      	ldr	r0, [pc, #216]	; (80102f8 <tcp_receive+0x89c>)
 801021e:	f007 fdc5 	bl	8017dac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010226:	2b00      	cmp	r3, #0
 8010228:	f000 80e7 	beq.w	80103fa <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801022c:	4b2e      	ldr	r3, [pc, #184]	; (80102e8 <tcp_receive+0x88c>)
 801022e:	68db      	ldr	r3, [r3, #12]
 8010230:	899b      	ldrh	r3, [r3, #12]
 8010232:	b29b      	uxth	r3, r3
 8010234:	4618      	mov	r0, r3
 8010236:	f7fa fc3b 	bl	800aab0 <lwip_htons>
 801023a:	4603      	mov	r3, r0
 801023c:	b2db      	uxtb	r3, r3
 801023e:	f003 0301 	and.w	r3, r3, #1
 8010242:	2b00      	cmp	r3, #0
 8010244:	d010      	beq.n	8010268 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010246:	e00a      	b.n	801025e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801024c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010252:	681a      	ldr	r2, [r3, #0]
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f7fd fca6 	bl	800dbaa <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010262:	2b00      	cmp	r3, #0
 8010264:	d1f0      	bne.n	8010248 <tcp_receive+0x7ec>
 8010266:	e0c8      	b.n	80103fa <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801026c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801026e:	e052      	b.n	8010316 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	899b      	ldrh	r3, [r3, #12]
 8010276:	b29b      	uxth	r3, r3
 8010278:	4618      	mov	r0, r3
 801027a:	f7fa fc19 	bl	800aab0 <lwip_htons>
 801027e:	4603      	mov	r3, r0
 8010280:	b2db      	uxtb	r3, r3
 8010282:	f003 0301 	and.w	r3, r3, #1
 8010286:	2b00      	cmp	r3, #0
 8010288:	d03d      	beq.n	8010306 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801028a:	4b17      	ldr	r3, [pc, #92]	; (80102e8 <tcp_receive+0x88c>)
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	899b      	ldrh	r3, [r3, #12]
 8010290:	b29b      	uxth	r3, r3
 8010292:	4618      	mov	r0, r3
 8010294:	f7fa fc0c 	bl	800aab0 <lwip_htons>
 8010298:	4603      	mov	r3, r0
 801029a:	b2db      	uxtb	r3, r3
 801029c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d130      	bne.n	8010306 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80102a4:	4b10      	ldr	r3, [pc, #64]	; (80102e8 <tcp_receive+0x88c>)
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	899b      	ldrh	r3, [r3, #12]
 80102aa:	b29c      	uxth	r4, r3
 80102ac:	2001      	movs	r0, #1
 80102ae:	f7fa fbff 	bl	800aab0 <lwip_htons>
 80102b2:	4603      	mov	r3, r0
 80102b4:	461a      	mov	r2, r3
 80102b6:	4b0c      	ldr	r3, [pc, #48]	; (80102e8 <tcp_receive+0x88c>)
 80102b8:	68db      	ldr	r3, [r3, #12]
 80102ba:	4322      	orrs	r2, r4
 80102bc:	b292      	uxth	r2, r2
 80102be:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80102c0:	4b09      	ldr	r3, [pc, #36]	; (80102e8 <tcp_receive+0x88c>)
 80102c2:	891c      	ldrh	r4, [r3, #8]
 80102c4:	4b08      	ldr	r3, [pc, #32]	; (80102e8 <tcp_receive+0x88c>)
 80102c6:	68db      	ldr	r3, [r3, #12]
 80102c8:	899b      	ldrh	r3, [r3, #12]
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7fa fbef 	bl	800aab0 <lwip_htons>
 80102d2:	4603      	mov	r3, r0
 80102d4:	b2db      	uxtb	r3, r3
 80102d6:	f003 0303 	and.w	r3, r3, #3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00e      	beq.n	80102fc <tcp_receive+0x8a0>
 80102de:	2301      	movs	r3, #1
 80102e0:	e00d      	b.n	80102fe <tcp_receive+0x8a2>
 80102e2:	bf00      	nop
 80102e4:	2000ce70 	.word	0x2000ce70
 80102e8:	2000ce50 	.word	0x2000ce50
 80102ec:	2000ce7a 	.word	0x2000ce7a
 80102f0:	0801a35c 	.word	0x0801a35c
 80102f4:	0801a704 	.word	0x0801a704
 80102f8:	0801a3a8 	.word	0x0801a3a8
 80102fc:	2300      	movs	r3, #0
 80102fe:	4423      	add	r3, r4
 8010300:	b29a      	uxth	r2, r3
 8010302:	4b98      	ldr	r3, [pc, #608]	; (8010564 <tcp_receive+0xb08>)
 8010304:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8010306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010308:	613b      	str	r3, [r7, #16]
              next = next->next;
 801030a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010310:	6938      	ldr	r0, [r7, #16]
 8010312:	f7fd fc4a 	bl	800dbaa <tcp_seg_free>
            while (next &&
 8010316:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00e      	beq.n	801033a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801031c:	4b91      	ldr	r3, [pc, #580]	; (8010564 <tcp_receive+0xb08>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	461a      	mov	r2, r3
 8010322:	4b91      	ldr	r3, [pc, #580]	; (8010568 <tcp_receive+0xb0c>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	441a      	add	r2, r3
 8010328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801032a:	68db      	ldr	r3, [r3, #12]
 801032c:	685b      	ldr	r3, [r3, #4]
 801032e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010330:	8909      	ldrh	r1, [r1, #8]
 8010332:	440b      	add	r3, r1
 8010334:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010336:	2b00      	cmp	r3, #0
 8010338:	da9a      	bge.n	8010270 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801033a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801033c:	2b00      	cmp	r3, #0
 801033e:	d059      	beq.n	80103f4 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010340:	4b88      	ldr	r3, [pc, #544]	; (8010564 <tcp_receive+0xb08>)
 8010342:	881b      	ldrh	r3, [r3, #0]
 8010344:	461a      	mov	r2, r3
 8010346:	4b88      	ldr	r3, [pc, #544]	; (8010568 <tcp_receive+0xb0c>)
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	441a      	add	r2, r3
 801034c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	685b      	ldr	r3, [r3, #4]
 8010352:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010354:	2b00      	cmp	r3, #0
 8010356:	dd4d      	ble.n	80103f4 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	b29a      	uxth	r2, r3
 8010360:	4b81      	ldr	r3, [pc, #516]	; (8010568 <tcp_receive+0xb0c>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	b29b      	uxth	r3, r3
 8010366:	1ad3      	subs	r3, r2, r3
 8010368:	b29a      	uxth	r2, r3
 801036a:	4b80      	ldr	r3, [pc, #512]	; (801056c <tcp_receive+0xb10>)
 801036c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801036e:	4b7f      	ldr	r3, [pc, #508]	; (801056c <tcp_receive+0xb10>)
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	899b      	ldrh	r3, [r3, #12]
 8010374:	b29b      	uxth	r3, r3
 8010376:	4618      	mov	r0, r3
 8010378:	f7fa fb9a 	bl	800aab0 <lwip_htons>
 801037c:	4603      	mov	r3, r0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	f003 0302 	and.w	r3, r3, #2
 8010384:	2b00      	cmp	r3, #0
 8010386:	d005      	beq.n	8010394 <tcp_receive+0x938>
                inseg.len -= 1;
 8010388:	4b78      	ldr	r3, [pc, #480]	; (801056c <tcp_receive+0xb10>)
 801038a:	891b      	ldrh	r3, [r3, #8]
 801038c:	3b01      	subs	r3, #1
 801038e:	b29a      	uxth	r2, r3
 8010390:	4b76      	ldr	r3, [pc, #472]	; (801056c <tcp_receive+0xb10>)
 8010392:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010394:	4b75      	ldr	r3, [pc, #468]	; (801056c <tcp_receive+0xb10>)
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	4a74      	ldr	r2, [pc, #464]	; (801056c <tcp_receive+0xb10>)
 801039a:	8912      	ldrh	r2, [r2, #8]
 801039c:	4611      	mov	r1, r2
 801039e:	4618      	mov	r0, r3
 80103a0:	f7fb fe34 	bl	800c00c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80103a4:	4b71      	ldr	r3, [pc, #452]	; (801056c <tcp_receive+0xb10>)
 80103a6:	891c      	ldrh	r4, [r3, #8]
 80103a8:	4b70      	ldr	r3, [pc, #448]	; (801056c <tcp_receive+0xb10>)
 80103aa:	68db      	ldr	r3, [r3, #12]
 80103ac:	899b      	ldrh	r3, [r3, #12]
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fa fb7d 	bl	800aab0 <lwip_htons>
 80103b6:	4603      	mov	r3, r0
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	f003 0303 	and.w	r3, r3, #3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d001      	beq.n	80103c6 <tcp_receive+0x96a>
 80103c2:	2301      	movs	r3, #1
 80103c4:	e000      	b.n	80103c8 <tcp_receive+0x96c>
 80103c6:	2300      	movs	r3, #0
 80103c8:	4423      	add	r3, r4
 80103ca:	b29a      	uxth	r2, r3
 80103cc:	4b65      	ldr	r3, [pc, #404]	; (8010564 <tcp_receive+0xb08>)
 80103ce:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80103d0:	4b64      	ldr	r3, [pc, #400]	; (8010564 <tcp_receive+0xb08>)
 80103d2:	881b      	ldrh	r3, [r3, #0]
 80103d4:	461a      	mov	r2, r3
 80103d6:	4b64      	ldr	r3, [pc, #400]	; (8010568 <tcp_receive+0xb0c>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	441a      	add	r2, r3
 80103dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	685b      	ldr	r3, [r3, #4]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d006      	beq.n	80103f4 <tcp_receive+0x998>
 80103e6:	4b62      	ldr	r3, [pc, #392]	; (8010570 <tcp_receive+0xb14>)
 80103e8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80103ec:	4961      	ldr	r1, [pc, #388]	; (8010574 <tcp_receive+0xb18>)
 80103ee:	4862      	ldr	r0, [pc, #392]	; (8010578 <tcp_receive+0xb1c>)
 80103f0:	f007 fcdc 	bl	8017dac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80103f8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80103fa:	4b5a      	ldr	r3, [pc, #360]	; (8010564 <tcp_receive+0xb08>)
 80103fc:	881b      	ldrh	r3, [r3, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	4b59      	ldr	r3, [pc, #356]	; (8010568 <tcp_receive+0xb0c>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	441a      	add	r2, r3
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801040e:	4b55      	ldr	r3, [pc, #340]	; (8010564 <tcp_receive+0xb08>)
 8010410:	881b      	ldrh	r3, [r3, #0]
 8010412:	429a      	cmp	r2, r3
 8010414:	d206      	bcs.n	8010424 <tcp_receive+0x9c8>
 8010416:	4b56      	ldr	r3, [pc, #344]	; (8010570 <tcp_receive+0xb14>)
 8010418:	f240 6207 	movw	r2, #1543	; 0x607
 801041c:	4957      	ldr	r1, [pc, #348]	; (801057c <tcp_receive+0xb20>)
 801041e:	4856      	ldr	r0, [pc, #344]	; (8010578 <tcp_receive+0xb1c>)
 8010420:	f007 fcc4 	bl	8017dac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010428:	4b4e      	ldr	r3, [pc, #312]	; (8010564 <tcp_receive+0xb08>)
 801042a:	881b      	ldrh	r3, [r3, #0]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	b29a      	uxth	r2, r3
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7fc fe93 	bl	800d160 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801043a:	4b4c      	ldr	r3, [pc, #304]	; (801056c <tcp_receive+0xb10>)
 801043c:	685b      	ldr	r3, [r3, #4]
 801043e:	891b      	ldrh	r3, [r3, #8]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d006      	beq.n	8010452 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8010444:	4b49      	ldr	r3, [pc, #292]	; (801056c <tcp_receive+0xb10>)
 8010446:	685b      	ldr	r3, [r3, #4]
 8010448:	4a4d      	ldr	r2, [pc, #308]	; (8010580 <tcp_receive+0xb24>)
 801044a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801044c:	4b47      	ldr	r3, [pc, #284]	; (801056c <tcp_receive+0xb10>)
 801044e:	2200      	movs	r2, #0
 8010450:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010452:	4b46      	ldr	r3, [pc, #280]	; (801056c <tcp_receive+0xb10>)
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	899b      	ldrh	r3, [r3, #12]
 8010458:	b29b      	uxth	r3, r3
 801045a:	4618      	mov	r0, r3
 801045c:	f7fa fb28 	bl	800aab0 <lwip_htons>
 8010460:	4603      	mov	r3, r0
 8010462:	b2db      	uxtb	r3, r3
 8010464:	f003 0301 	and.w	r3, r3, #1
 8010468:	2b00      	cmp	r3, #0
 801046a:	f000 80b8 	beq.w	80105de <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801046e:	4b45      	ldr	r3, [pc, #276]	; (8010584 <tcp_receive+0xb28>)
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	f043 0320 	orr.w	r3, r3, #32
 8010476:	b2da      	uxtb	r2, r3
 8010478:	4b42      	ldr	r3, [pc, #264]	; (8010584 <tcp_receive+0xb28>)
 801047a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801047c:	e0af      	b.n	80105de <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801047e:	687b      	ldr	r3, [r7, #4]
 8010480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010482:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010488:	68db      	ldr	r3, [r3, #12]
 801048a:	685b      	ldr	r3, [r3, #4]
 801048c:	4a36      	ldr	r2, [pc, #216]	; (8010568 <tcp_receive+0xb0c>)
 801048e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010490:	68bb      	ldr	r3, [r7, #8]
 8010492:	891b      	ldrh	r3, [r3, #8]
 8010494:	461c      	mov	r4, r3
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	899b      	ldrh	r3, [r3, #12]
 801049c:	b29b      	uxth	r3, r3
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fa fb06 	bl	800aab0 <lwip_htons>
 80104a4:	4603      	mov	r3, r0
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	f003 0303 	and.w	r3, r3, #3
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d001      	beq.n	80104b4 <tcp_receive+0xa58>
 80104b0:	2301      	movs	r3, #1
 80104b2:	e000      	b.n	80104b6 <tcp_receive+0xa5a>
 80104b4:	2300      	movs	r3, #0
 80104b6:	191a      	adds	r2, r3, r4
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104bc:	441a      	add	r2, r3
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80104c6:	461c      	mov	r4, r3
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	891b      	ldrh	r3, [r3, #8]
 80104cc:	461d      	mov	r5, r3
 80104ce:	68bb      	ldr	r3, [r7, #8]
 80104d0:	68db      	ldr	r3, [r3, #12]
 80104d2:	899b      	ldrh	r3, [r3, #12]
 80104d4:	b29b      	uxth	r3, r3
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fa faea 	bl	800aab0 <lwip_htons>
 80104dc:	4603      	mov	r3, r0
 80104de:	b2db      	uxtb	r3, r3
 80104e0:	f003 0303 	and.w	r3, r3, #3
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d001      	beq.n	80104ec <tcp_receive+0xa90>
 80104e8:	2301      	movs	r3, #1
 80104ea:	e000      	b.n	80104ee <tcp_receive+0xa92>
 80104ec:	2300      	movs	r3, #0
 80104ee:	442b      	add	r3, r5
 80104f0:	429c      	cmp	r4, r3
 80104f2:	d206      	bcs.n	8010502 <tcp_receive+0xaa6>
 80104f4:	4b1e      	ldr	r3, [pc, #120]	; (8010570 <tcp_receive+0xb14>)
 80104f6:	f240 622b 	movw	r2, #1579	; 0x62b
 80104fa:	4923      	ldr	r1, [pc, #140]	; (8010588 <tcp_receive+0xb2c>)
 80104fc:	481e      	ldr	r0, [pc, #120]	; (8010578 <tcp_receive+0xb1c>)
 80104fe:	f007 fc55 	bl	8017dac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	891b      	ldrh	r3, [r3, #8]
 8010506:	461c      	mov	r4, r3
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	68db      	ldr	r3, [r3, #12]
 801050c:	899b      	ldrh	r3, [r3, #12]
 801050e:	b29b      	uxth	r3, r3
 8010510:	4618      	mov	r0, r3
 8010512:	f7fa facd 	bl	800aab0 <lwip_htons>
 8010516:	4603      	mov	r3, r0
 8010518:	b2db      	uxtb	r3, r3
 801051a:	f003 0303 	and.w	r3, r3, #3
 801051e:	2b00      	cmp	r3, #0
 8010520:	d001      	beq.n	8010526 <tcp_receive+0xaca>
 8010522:	2301      	movs	r3, #1
 8010524:	e000      	b.n	8010528 <tcp_receive+0xacc>
 8010526:	2300      	movs	r3, #0
 8010528:	1919      	adds	r1, r3, r4
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801052e:	b28b      	uxth	r3, r1
 8010530:	1ad3      	subs	r3, r2, r3
 8010532:	b29a      	uxth	r2, r3
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010538:	6878      	ldr	r0, [r7, #4]
 801053a:	f7fc fe11 	bl	800d160 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	891b      	ldrh	r3, [r3, #8]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d028      	beq.n	801059a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010548:	4b0d      	ldr	r3, [pc, #52]	; (8010580 <tcp_receive+0xb24>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d01d      	beq.n	801058c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010550:	4b0b      	ldr	r3, [pc, #44]	; (8010580 <tcp_receive+0xb24>)
 8010552:	681a      	ldr	r2, [r3, #0]
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	685b      	ldr	r3, [r3, #4]
 8010558:	4619      	mov	r1, r3
 801055a:	4610      	mov	r0, r2
 801055c:	f7fb ffaa 	bl	800c4b4 <pbuf_cat>
 8010560:	e018      	b.n	8010594 <tcp_receive+0xb38>
 8010562:	bf00      	nop
 8010564:	2000ce7a 	.word	0x2000ce7a
 8010568:	2000ce70 	.word	0x2000ce70
 801056c:	2000ce50 	.word	0x2000ce50
 8010570:	0801a35c 	.word	0x0801a35c
 8010574:	0801a73c 	.word	0x0801a73c
 8010578:	0801a3a8 	.word	0x0801a3a8
 801057c:	0801a778 	.word	0x0801a778
 8010580:	2000ce80 	.word	0x2000ce80
 8010584:	2000ce7d 	.word	0x2000ce7d
 8010588:	0801a798 	.word	0x0801a798
            } else {
              recv_data = cseg->p;
 801058c:	68bb      	ldr	r3, [r7, #8]
 801058e:	685b      	ldr	r3, [r3, #4]
 8010590:	4a70      	ldr	r2, [pc, #448]	; (8010754 <tcp_receive+0xcf8>)
 8010592:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	2200      	movs	r2, #0
 8010598:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801059a:	68bb      	ldr	r3, [r7, #8]
 801059c:	68db      	ldr	r3, [r3, #12]
 801059e:	899b      	ldrh	r3, [r3, #12]
 80105a0:	b29b      	uxth	r3, r3
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fa fa84 	bl	800aab0 <lwip_htons>
 80105a8:	4603      	mov	r3, r0
 80105aa:	b2db      	uxtb	r3, r3
 80105ac:	f003 0301 	and.w	r3, r3, #1
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00d      	beq.n	80105d0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80105b4:	4b68      	ldr	r3, [pc, #416]	; (8010758 <tcp_receive+0xcfc>)
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	f043 0320 	orr.w	r3, r3, #32
 80105bc:	b2da      	uxtb	r2, r3
 80105be:	4b66      	ldr	r3, [pc, #408]	; (8010758 <tcp_receive+0xcfc>)
 80105c0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	7d1b      	ldrb	r3, [r3, #20]
 80105c6:	2b04      	cmp	r3, #4
 80105c8:	d102      	bne.n	80105d0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	2207      	movs	r2, #7
 80105ce:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80105d0:	68bb      	ldr	r3, [r7, #8]
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80105d8:	68b8      	ldr	r0, [r7, #8]
 80105da:	f7fd fae6 	bl	800dbaa <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d008      	beq.n	80105f8 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	685a      	ldr	r2, [r3, #4]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80105f2:	429a      	cmp	r2, r3
 80105f4:	f43f af43 	beq.w	801047e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	8b5b      	ldrh	r3, [r3, #26]
 80105fc:	f003 0301 	and.w	r3, r3, #1
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00e      	beq.n	8010622 <tcp_receive+0xbc6>
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8b5b      	ldrh	r3, [r3, #26]
 8010608:	f023 0301 	bic.w	r3, r3, #1
 801060c:	b29a      	uxth	r2, r3
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	835a      	strh	r2, [r3, #26]
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	8b5b      	ldrh	r3, [r3, #26]
 8010616:	f043 0302 	orr.w	r3, r3, #2
 801061a:	b29a      	uxth	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010620:	e188      	b.n	8010934 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	8b5b      	ldrh	r3, [r3, #26]
 8010626:	f043 0301 	orr.w	r3, r3, #1
 801062a:	b29a      	uxth	r2, r3
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010630:	e180      	b.n	8010934 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010636:	2b00      	cmp	r3, #0
 8010638:	d106      	bne.n	8010648 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801063a:	4848      	ldr	r0, [pc, #288]	; (801075c <tcp_receive+0xd00>)
 801063c:	f7fd faec 	bl	800dc18 <tcp_seg_copy>
 8010640:	4602      	mov	r2, r0
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	675a      	str	r2, [r3, #116]	; 0x74
 8010646:	e16d      	b.n	8010924 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010648:	2300      	movs	r3, #0
 801064a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010650:	63bb      	str	r3, [r7, #56]	; 0x38
 8010652:	e157      	b.n	8010904 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8010654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	685a      	ldr	r2, [r3, #4]
 801065a:	4b41      	ldr	r3, [pc, #260]	; (8010760 <tcp_receive+0xd04>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	429a      	cmp	r2, r3
 8010660:	d11d      	bne.n	801069e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010662:	4b3e      	ldr	r3, [pc, #248]	; (801075c <tcp_receive+0xd00>)
 8010664:	891a      	ldrh	r2, [r3, #8]
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	891b      	ldrh	r3, [r3, #8]
 801066a:	429a      	cmp	r2, r3
 801066c:	f240 814f 	bls.w	801090e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010670:	483a      	ldr	r0, [pc, #232]	; (801075c <tcp_receive+0xd00>)
 8010672:	f7fd fad1 	bl	800dc18 <tcp_seg_copy>
 8010676:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	2b00      	cmp	r3, #0
 801067c:	f000 8149 	beq.w	8010912 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8010680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010682:	2b00      	cmp	r3, #0
 8010684:	d003      	beq.n	801068e <tcp_receive+0xc32>
                    prev->next = cseg;
 8010686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010688:	697a      	ldr	r2, [r7, #20]
 801068a:	601a      	str	r2, [r3, #0]
 801068c:	e002      	b.n	8010694 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	697a      	ldr	r2, [r7, #20]
 8010692:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8010694:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010696:	6978      	ldr	r0, [r7, #20]
 8010698:	f7ff f8dc 	bl	800f854 <tcp_oos_insert_segment>
                }
                break;
 801069c:	e139      	b.n	8010912 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801069e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d117      	bne.n	80106d4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80106a4:	4b2e      	ldr	r3, [pc, #184]	; (8010760 <tcp_receive+0xd04>)
 80106a6:	681a      	ldr	r2, [r3, #0]
 80106a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106aa:	68db      	ldr	r3, [r3, #12]
 80106ac:	685b      	ldr	r3, [r3, #4]
 80106ae:	1ad3      	subs	r3, r2, r3
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	da57      	bge.n	8010764 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80106b4:	4829      	ldr	r0, [pc, #164]	; (801075c <tcp_receive+0xd00>)
 80106b6:	f7fd faaf 	bl	800dc18 <tcp_seg_copy>
 80106ba:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f000 8129 	beq.w	8010916 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	69ba      	ldr	r2, [r7, #24]
 80106c8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80106ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106cc:	69b8      	ldr	r0, [r7, #24]
 80106ce:	f7ff f8c1 	bl	800f854 <tcp_oos_insert_segment>
                  }
                  break;
 80106d2:	e120      	b.n	8010916 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80106d4:	4b22      	ldr	r3, [pc, #136]	; (8010760 <tcp_receive+0xd04>)
 80106d6:	681a      	ldr	r2, [r3, #0]
 80106d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80106da:	68db      	ldr	r3, [r3, #12]
 80106dc:	685b      	ldr	r3, [r3, #4]
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	3b01      	subs	r3, #1
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	db3e      	blt.n	8010764 <tcp_receive+0xd08>
 80106e6:	4b1e      	ldr	r3, [pc, #120]	; (8010760 <tcp_receive+0xd04>)
 80106e8:	681a      	ldr	r2, [r3, #0]
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	685b      	ldr	r3, [r3, #4]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	3301      	adds	r3, #1
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	dc35      	bgt.n	8010764 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80106f8:	4818      	ldr	r0, [pc, #96]	; (801075c <tcp_receive+0xd00>)
 80106fa:	f7fd fa8d 	bl	800dc18 <tcp_seg_copy>
 80106fe:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	2b00      	cmp	r3, #0
 8010704:	f000 8109 	beq.w	801091a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010710:	8912      	ldrh	r2, [r2, #8]
 8010712:	441a      	add	r2, r3
 8010714:	4b12      	ldr	r3, [pc, #72]	; (8010760 <tcp_receive+0xd04>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	1ad3      	subs	r3, r2, r3
 801071a:	2b00      	cmp	r3, #0
 801071c:	dd12      	ble.n	8010744 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801071e:	4b10      	ldr	r3, [pc, #64]	; (8010760 <tcp_receive+0xd04>)
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	b29a      	uxth	r2, r3
 8010724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010726:	68db      	ldr	r3, [r3, #12]
 8010728:	685b      	ldr	r3, [r3, #4]
 801072a:	b29b      	uxth	r3, r3
 801072c:	1ad3      	subs	r3, r2, r3
 801072e:	b29a      	uxth	r2, r3
 8010730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010732:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010736:	685a      	ldr	r2, [r3, #4]
 8010738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801073a:	891b      	ldrh	r3, [r3, #8]
 801073c:	4619      	mov	r1, r3
 801073e:	4610      	mov	r0, r2
 8010740:	f7fb fc64 	bl	800c00c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8010744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010746:	69fa      	ldr	r2, [r7, #28]
 8010748:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801074a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801074c:	69f8      	ldr	r0, [r7, #28]
 801074e:	f7ff f881 	bl	800f854 <tcp_oos_insert_segment>
                  }
                  break;
 8010752:	e0e2      	b.n	801091a <tcp_receive+0xebe>
 8010754:	2000ce80 	.word	0x2000ce80
 8010758:	2000ce7d 	.word	0x2000ce7d
 801075c:	2000ce50 	.word	0x2000ce50
 8010760:	2000ce70 	.word	0x2000ce70
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8010764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010766:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	2b00      	cmp	r3, #0
 801076e:	f040 80c6 	bne.w	80108fe <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010772:	4b80      	ldr	r3, [pc, #512]	; (8010974 <tcp_receive+0xf18>)
 8010774:	681a      	ldr	r2, [r3, #0]
 8010776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	685b      	ldr	r3, [r3, #4]
 801077c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801077e:	2b00      	cmp	r3, #0
 8010780:	f340 80bd 	ble.w	80108fe <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	899b      	ldrh	r3, [r3, #12]
 801078a:	b29b      	uxth	r3, r3
 801078c:	4618      	mov	r0, r3
 801078e:	f7fa f98f 	bl	800aab0 <lwip_htons>
 8010792:	4603      	mov	r3, r0
 8010794:	b2db      	uxtb	r3, r3
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	f040 80bf 	bne.w	801091e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80107a0:	4875      	ldr	r0, [pc, #468]	; (8010978 <tcp_receive+0xf1c>)
 80107a2:	f7fd fa39 	bl	800dc18 <tcp_seg_copy>
 80107a6:	4602      	mov	r2, r0
 80107a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107aa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80107ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	f000 80b6 	beq.w	8010922 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80107b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107b8:	68db      	ldr	r3, [r3, #12]
 80107ba:	685b      	ldr	r3, [r3, #4]
 80107bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107be:	8912      	ldrh	r2, [r2, #8]
 80107c0:	441a      	add	r2, r3
 80107c2:	4b6c      	ldr	r3, [pc, #432]	; (8010974 <tcp_receive+0xf18>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	1ad3      	subs	r3, r2, r3
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	dd12      	ble.n	80107f2 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80107cc:	4b69      	ldr	r3, [pc, #420]	; (8010974 <tcp_receive+0xf18>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d4:	68db      	ldr	r3, [r3, #12]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	b29b      	uxth	r3, r3
 80107da:	1ad3      	subs	r3, r2, r3
 80107dc:	b29a      	uxth	r2, r3
 80107de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80107e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e4:	685a      	ldr	r2, [r3, #4]
 80107e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107e8:	891b      	ldrh	r3, [r3, #8]
 80107ea:	4619      	mov	r1, r3
 80107ec:	4610      	mov	r0, r2
 80107ee:	f7fb fc0d 	bl	800c00c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80107f2:	4b62      	ldr	r3, [pc, #392]	; (801097c <tcp_receive+0xf20>)
 80107f4:	881b      	ldrh	r3, [r3, #0]
 80107f6:	461a      	mov	r2, r3
 80107f8:	4b5e      	ldr	r3, [pc, #376]	; (8010974 <tcp_receive+0xf18>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	441a      	add	r2, r3
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010802:	6879      	ldr	r1, [r7, #4]
 8010804:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010806:	440b      	add	r3, r1
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	f340 8089 	ble.w	8010922 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	68db      	ldr	r3, [r3, #12]
 8010816:	899b      	ldrh	r3, [r3, #12]
 8010818:	b29b      	uxth	r3, r3
 801081a:	4618      	mov	r0, r3
 801081c:	f7fa f948 	bl	800aab0 <lwip_htons>
 8010820:	4603      	mov	r3, r0
 8010822:	b2db      	uxtb	r3, r3
 8010824:	f003 0301 	and.w	r3, r3, #1
 8010828:	2b00      	cmp	r3, #0
 801082a:	d022      	beq.n	8010872 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801082c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	68db      	ldr	r3, [r3, #12]
 8010832:	899b      	ldrh	r3, [r3, #12]
 8010834:	b29b      	uxth	r3, r3
 8010836:	b21b      	sxth	r3, r3
 8010838:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801083c:	b21c      	sxth	r4, r3
 801083e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	899b      	ldrh	r3, [r3, #12]
 8010846:	b29b      	uxth	r3, r3
 8010848:	4618      	mov	r0, r3
 801084a:	f7fa f931 	bl	800aab0 <lwip_htons>
 801084e:	4603      	mov	r3, r0
 8010850:	b2db      	uxtb	r3, r3
 8010852:	b29b      	uxth	r3, r3
 8010854:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010858:	b29b      	uxth	r3, r3
 801085a:	4618      	mov	r0, r3
 801085c:	f7fa f928 	bl	800aab0 <lwip_htons>
 8010860:	4603      	mov	r3, r0
 8010862:	b21b      	sxth	r3, r3
 8010864:	4323      	orrs	r3, r4
 8010866:	b21a      	sxth	r2, r3
 8010868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	68db      	ldr	r3, [r3, #12]
 801086e:	b292      	uxth	r2, r2
 8010870:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010876:	b29a      	uxth	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801087c:	4413      	add	r3, r2
 801087e:	b299      	uxth	r1, r3
 8010880:	4b3c      	ldr	r3, [pc, #240]	; (8010974 <tcp_receive+0xf18>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	b29a      	uxth	r2, r3
 8010886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	1a8a      	subs	r2, r1, r2
 801088c:	b292      	uxth	r2, r2
 801088e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	891b      	ldrh	r3, [r3, #8]
 801089c:	4619      	mov	r1, r3
 801089e:	4610      	mov	r0, r2
 80108a0:	f7fb fbb4 	bl	800c00c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80108a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	891c      	ldrh	r4, [r3, #8]
 80108aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	68db      	ldr	r3, [r3, #12]
 80108b0:	899b      	ldrh	r3, [r3, #12]
 80108b2:	b29b      	uxth	r3, r3
 80108b4:	4618      	mov	r0, r3
 80108b6:	f7fa f8fb 	bl	800aab0 <lwip_htons>
 80108ba:	4603      	mov	r3, r0
 80108bc:	b2db      	uxtb	r3, r3
 80108be:	f003 0303 	and.w	r3, r3, #3
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d001      	beq.n	80108ca <tcp_receive+0xe6e>
 80108c6:	2301      	movs	r3, #1
 80108c8:	e000      	b.n	80108cc <tcp_receive+0xe70>
 80108ca:	2300      	movs	r3, #0
 80108cc:	4423      	add	r3, r4
 80108ce:	b29a      	uxth	r2, r3
 80108d0:	4b2a      	ldr	r3, [pc, #168]	; (801097c <tcp_receive+0xf20>)
 80108d2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80108d4:	4b29      	ldr	r3, [pc, #164]	; (801097c <tcp_receive+0xf20>)
 80108d6:	881b      	ldrh	r3, [r3, #0]
 80108d8:	461a      	mov	r2, r3
 80108da:	4b26      	ldr	r3, [pc, #152]	; (8010974 <tcp_receive+0xf18>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	441a      	add	r2, r3
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108e4:	6879      	ldr	r1, [r7, #4]
 80108e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80108e8:	440b      	add	r3, r1
 80108ea:	429a      	cmp	r2, r3
 80108ec:	d019      	beq.n	8010922 <tcp_receive+0xec6>
 80108ee:	4b24      	ldr	r3, [pc, #144]	; (8010980 <tcp_receive+0xf24>)
 80108f0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80108f4:	4923      	ldr	r1, [pc, #140]	; (8010984 <tcp_receive+0xf28>)
 80108f6:	4824      	ldr	r0, [pc, #144]	; (8010988 <tcp_receive+0xf2c>)
 80108f8:	f007 fa58 	bl	8017dac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80108fc:	e011      	b.n	8010922 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80108fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	63bb      	str	r3, [r7, #56]	; 0x38
 8010904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010906:	2b00      	cmp	r3, #0
 8010908:	f47f aea4 	bne.w	8010654 <tcp_receive+0xbf8>
 801090c:	e00a      	b.n	8010924 <tcp_receive+0xec8>
                break;
 801090e:	bf00      	nop
 8010910:	e008      	b.n	8010924 <tcp_receive+0xec8>
                break;
 8010912:	bf00      	nop
 8010914:	e006      	b.n	8010924 <tcp_receive+0xec8>
                  break;
 8010916:	bf00      	nop
 8010918:	e004      	b.n	8010924 <tcp_receive+0xec8>
                  break;
 801091a:	bf00      	nop
 801091c:	e002      	b.n	8010924 <tcp_receive+0xec8>
                  break;
 801091e:	bf00      	nop
 8010920:	e000      	b.n	8010924 <tcp_receive+0xec8>
                break;
 8010922:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f001 fe8b 	bl	8012640 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801092a:	e003      	b.n	8010934 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f001 fe87 	bl	8012640 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010932:	e01a      	b.n	801096a <tcp_receive+0xf0e>
 8010934:	e019      	b.n	801096a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010936:	4b0f      	ldr	r3, [pc, #60]	; (8010974 <tcp_receive+0xf18>)
 8010938:	681a      	ldr	r2, [r3, #0]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801093e:	1ad3      	subs	r3, r2, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	db0a      	blt.n	801095a <tcp_receive+0xefe>
 8010944:	4b0b      	ldr	r3, [pc, #44]	; (8010974 <tcp_receive+0xf18>)
 8010946:	681a      	ldr	r2, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801094c:	6879      	ldr	r1, [r7, #4]
 801094e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010950:	440b      	add	r3, r1
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	3301      	adds	r3, #1
 8010956:	2b00      	cmp	r3, #0
 8010958:	dd07      	ble.n	801096a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	8b5b      	ldrh	r3, [r3, #26]
 801095e:	f043 0302 	orr.w	r3, r3, #2
 8010962:	b29a      	uxth	r2, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010968:	e7ff      	b.n	801096a <tcp_receive+0xf0e>
 801096a:	bf00      	nop
 801096c:	3750      	adds	r7, #80	; 0x50
 801096e:	46bd      	mov	sp, r7
 8010970:	bdb0      	pop	{r4, r5, r7, pc}
 8010972:	bf00      	nop
 8010974:	2000ce70 	.word	0x2000ce70
 8010978:	2000ce50 	.word	0x2000ce50
 801097c:	2000ce7a 	.word	0x2000ce7a
 8010980:	0801a35c 	.word	0x0801a35c
 8010984:	0801a704 	.word	0x0801a704
 8010988:	0801a3a8 	.word	0x0801a3a8

0801098c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010992:	4b15      	ldr	r3, [pc, #84]	; (80109e8 <tcp_get_next_optbyte+0x5c>)
 8010994:	881b      	ldrh	r3, [r3, #0]
 8010996:	1c5a      	adds	r2, r3, #1
 8010998:	b291      	uxth	r1, r2
 801099a:	4a13      	ldr	r2, [pc, #76]	; (80109e8 <tcp_get_next_optbyte+0x5c>)
 801099c:	8011      	strh	r1, [r2, #0]
 801099e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80109a0:	4b12      	ldr	r3, [pc, #72]	; (80109ec <tcp_get_next_optbyte+0x60>)
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d004      	beq.n	80109b2 <tcp_get_next_optbyte+0x26>
 80109a8:	4b11      	ldr	r3, [pc, #68]	; (80109f0 <tcp_get_next_optbyte+0x64>)
 80109aa:	881b      	ldrh	r3, [r3, #0]
 80109ac:	88fa      	ldrh	r2, [r7, #6]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d208      	bcs.n	80109c4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80109b2:	4b10      	ldr	r3, [pc, #64]	; (80109f4 <tcp_get_next_optbyte+0x68>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	3314      	adds	r3, #20
 80109b8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80109ba:	88fb      	ldrh	r3, [r7, #6]
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	4413      	add	r3, r2
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	e00b      	b.n	80109dc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80109c4:	88fb      	ldrh	r3, [r7, #6]
 80109c6:	b2da      	uxtb	r2, r3
 80109c8:	4b09      	ldr	r3, [pc, #36]	; (80109f0 <tcp_get_next_optbyte+0x64>)
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	b2db      	uxtb	r3, r3
 80109ce:	1ad3      	subs	r3, r2, r3
 80109d0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80109d2:	4b06      	ldr	r3, [pc, #24]	; (80109ec <tcp_get_next_optbyte+0x60>)
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	797b      	ldrb	r3, [r7, #5]
 80109d8:	4413      	add	r3, r2
 80109da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80109dc:	4618      	mov	r0, r3
 80109de:	370c      	adds	r7, #12
 80109e0:	46bd      	mov	sp, r7
 80109e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e6:	4770      	bx	lr
 80109e8:	2000ce6c 	.word	0x2000ce6c
 80109ec:	2000ce68 	.word	0x2000ce68
 80109f0:	2000ce66 	.word	0x2000ce66
 80109f4:	2000ce60 	.word	0x2000ce60

080109f8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80109f8:	b580      	push	{r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d106      	bne.n	8010a14 <tcp_parseopt+0x1c>
 8010a06:	4b32      	ldr	r3, [pc, #200]	; (8010ad0 <tcp_parseopt+0xd8>)
 8010a08:	f240 727d 	movw	r2, #1917	; 0x77d
 8010a0c:	4931      	ldr	r1, [pc, #196]	; (8010ad4 <tcp_parseopt+0xdc>)
 8010a0e:	4832      	ldr	r0, [pc, #200]	; (8010ad8 <tcp_parseopt+0xe0>)
 8010a10:	f007 f9cc 	bl	8017dac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010a14:	4b31      	ldr	r3, [pc, #196]	; (8010adc <tcp_parseopt+0xe4>)
 8010a16:	881b      	ldrh	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d055      	beq.n	8010ac8 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010a1c:	4b30      	ldr	r3, [pc, #192]	; (8010ae0 <tcp_parseopt+0xe8>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	801a      	strh	r2, [r3, #0]
 8010a22:	e045      	b.n	8010ab0 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010a24:	f7ff ffb2 	bl	801098c <tcp_get_next_optbyte>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010a2c:	7bfb      	ldrb	r3, [r7, #15]
 8010a2e:	2b02      	cmp	r3, #2
 8010a30:	d006      	beq.n	8010a40 <tcp_parseopt+0x48>
 8010a32:	2b02      	cmp	r3, #2
 8010a34:	dc2b      	bgt.n	8010a8e <tcp_parseopt+0x96>
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d041      	beq.n	8010abe <tcp_parseopt+0xc6>
 8010a3a:	2b01      	cmp	r3, #1
 8010a3c:	d127      	bne.n	8010a8e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010a3e:	e037      	b.n	8010ab0 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010a40:	f7ff ffa4 	bl	801098c <tcp_get_next_optbyte>
 8010a44:	4603      	mov	r3, r0
 8010a46:	2b04      	cmp	r3, #4
 8010a48:	d13b      	bne.n	8010ac2 <tcp_parseopt+0xca>
 8010a4a:	4b25      	ldr	r3, [pc, #148]	; (8010ae0 <tcp_parseopt+0xe8>)
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	3301      	adds	r3, #1
 8010a50:	4a22      	ldr	r2, [pc, #136]	; (8010adc <tcp_parseopt+0xe4>)
 8010a52:	8812      	ldrh	r2, [r2, #0]
 8010a54:	4293      	cmp	r3, r2
 8010a56:	da34      	bge.n	8010ac2 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010a58:	f7ff ff98 	bl	801098c <tcp_get_next_optbyte>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	b29b      	uxth	r3, r3
 8010a60:	021b      	lsls	r3, r3, #8
 8010a62:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010a64:	f7ff ff92 	bl	801098c <tcp_get_next_optbyte>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	89bb      	ldrh	r3, [r7, #12]
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010a72:	89bb      	ldrh	r3, [r7, #12]
 8010a74:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010a78:	d804      	bhi.n	8010a84 <tcp_parseopt+0x8c>
 8010a7a:	89bb      	ldrh	r3, [r7, #12]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d001      	beq.n	8010a84 <tcp_parseopt+0x8c>
 8010a80:	89ba      	ldrh	r2, [r7, #12]
 8010a82:	e001      	b.n	8010a88 <tcp_parseopt+0x90>
 8010a84:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010a8c:	e010      	b.n	8010ab0 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010a8e:	f7ff ff7d 	bl	801098c <tcp_get_next_optbyte>
 8010a92:	4603      	mov	r3, r0
 8010a94:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010a96:	7afb      	ldrb	r3, [r7, #11]
 8010a98:	2b01      	cmp	r3, #1
 8010a9a:	d914      	bls.n	8010ac6 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010a9c:	7afb      	ldrb	r3, [r7, #11]
 8010a9e:	b29a      	uxth	r2, r3
 8010aa0:	4b0f      	ldr	r3, [pc, #60]	; (8010ae0 <tcp_parseopt+0xe8>)
 8010aa2:	881b      	ldrh	r3, [r3, #0]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	b29b      	uxth	r3, r3
 8010aa8:	3b02      	subs	r3, #2
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	4b0c      	ldr	r3, [pc, #48]	; (8010ae0 <tcp_parseopt+0xe8>)
 8010aae:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010ab0:	4b0b      	ldr	r3, [pc, #44]	; (8010ae0 <tcp_parseopt+0xe8>)
 8010ab2:	881a      	ldrh	r2, [r3, #0]
 8010ab4:	4b09      	ldr	r3, [pc, #36]	; (8010adc <tcp_parseopt+0xe4>)
 8010ab6:	881b      	ldrh	r3, [r3, #0]
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d3b3      	bcc.n	8010a24 <tcp_parseopt+0x2c>
 8010abc:	e004      	b.n	8010ac8 <tcp_parseopt+0xd0>
          return;
 8010abe:	bf00      	nop
 8010ac0:	e002      	b.n	8010ac8 <tcp_parseopt+0xd0>
            return;
 8010ac2:	bf00      	nop
 8010ac4:	e000      	b.n	8010ac8 <tcp_parseopt+0xd0>
            return;
 8010ac6:	bf00      	nop
      }
    }
  }
}
 8010ac8:	3710      	adds	r7, #16
 8010aca:	46bd      	mov	sp, r7
 8010acc:	bd80      	pop	{r7, pc}
 8010ace:	bf00      	nop
 8010ad0:	0801a35c 	.word	0x0801a35c
 8010ad4:	0801a7c0 	.word	0x0801a7c0
 8010ad8:	0801a3a8 	.word	0x0801a3a8
 8010adc:	2000ce64 	.word	0x2000ce64
 8010ae0:	2000ce6c 	.word	0x2000ce6c

08010ae4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010ae4:	b480      	push	{r7}
 8010ae6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010ae8:	4b05      	ldr	r3, [pc, #20]	; (8010b00 <tcp_trigger_input_pcb_close+0x1c>)
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	f043 0310 	orr.w	r3, r3, #16
 8010af0:	b2da      	uxtb	r2, r3
 8010af2:	4b03      	ldr	r3, [pc, #12]	; (8010b00 <tcp_trigger_input_pcb_close+0x1c>)
 8010af4:	701a      	strb	r2, [r3, #0]
}
 8010af6:	bf00      	nop
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	2000ce7d 	.word	0x2000ce7d

08010b04 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b084      	sub	sp, #16
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	60f8      	str	r0, [r7, #12]
 8010b0c:	60b9      	str	r1, [r7, #8]
 8010b0e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d00a      	beq.n	8010b2c <tcp_route+0x28>
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	7a1b      	ldrb	r3, [r3, #8]
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d006      	beq.n	8010b2c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	7a1b      	ldrb	r3, [r3, #8]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fb f86a 	bl	800bbfc <netif_get_by_index>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	e003      	b.n	8010b34 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f005 fc9f 	bl	8016470 <ip4_route>
 8010b32:	4603      	mov	r3, r0
  }
}
 8010b34:	4618      	mov	r0, r3
 8010b36:	3710      	adds	r7, #16
 8010b38:	46bd      	mov	sp, r7
 8010b3a:	bd80      	pop	{r7, pc}

08010b3c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010b3c:	b590      	push	{r4, r7, lr}
 8010b3e:	b087      	sub	sp, #28
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	603b      	str	r3, [r7, #0]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d105      	bne.n	8010b5e <tcp_create_segment+0x22>
 8010b52:	4b44      	ldr	r3, [pc, #272]	; (8010c64 <tcp_create_segment+0x128>)
 8010b54:	22a3      	movs	r2, #163	; 0xa3
 8010b56:	4944      	ldr	r1, [pc, #272]	; (8010c68 <tcp_create_segment+0x12c>)
 8010b58:	4844      	ldr	r0, [pc, #272]	; (8010c6c <tcp_create_segment+0x130>)
 8010b5a:	f007 f927 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010b5e:	68bb      	ldr	r3, [r7, #8]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d105      	bne.n	8010b70 <tcp_create_segment+0x34>
 8010b64:	4b3f      	ldr	r3, [pc, #252]	; (8010c64 <tcp_create_segment+0x128>)
 8010b66:	22a4      	movs	r2, #164	; 0xa4
 8010b68:	4941      	ldr	r1, [pc, #260]	; (8010c70 <tcp_create_segment+0x134>)
 8010b6a:	4840      	ldr	r0, [pc, #256]	; (8010c6c <tcp_create_segment+0x130>)
 8010b6c:	f007 f91e 	bl	8017dac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b70:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010b74:	009b      	lsls	r3, r3, #2
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	f003 0304 	and.w	r3, r3, #4
 8010b7c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010b7e:	2003      	movs	r0, #3
 8010b80:	f7fa fca4 	bl	800b4cc <memp_malloc>
 8010b84:	6138      	str	r0, [r7, #16]
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d104      	bne.n	8010b96 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010b8c:	68b8      	ldr	r0, [r7, #8]
 8010b8e:	f7fb fbc3 	bl	800c318 <pbuf_free>
    return NULL;
 8010b92:	2300      	movs	r3, #0
 8010b94:	e061      	b.n	8010c5a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010b9c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010b9e:	693b      	ldr	r3, [r7, #16]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010ba4:	693b      	ldr	r3, [r7, #16]
 8010ba6:	68ba      	ldr	r2, [r7, #8]
 8010ba8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	891a      	ldrh	r2, [r3, #8]
 8010bae:	7dfb      	ldrb	r3, [r7, #23]
 8010bb0:	b29b      	uxth	r3, r3
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d205      	bcs.n	8010bc2 <tcp_create_segment+0x86>
 8010bb6:	4b2b      	ldr	r3, [pc, #172]	; (8010c64 <tcp_create_segment+0x128>)
 8010bb8:	22b0      	movs	r2, #176	; 0xb0
 8010bba:	492e      	ldr	r1, [pc, #184]	; (8010c74 <tcp_create_segment+0x138>)
 8010bbc:	482b      	ldr	r0, [pc, #172]	; (8010c6c <tcp_create_segment+0x130>)
 8010bbe:	f007 f8f5 	bl	8017dac <iprintf>
  seg->len = p->tot_len - optlen;
 8010bc2:	68bb      	ldr	r3, [r7, #8]
 8010bc4:	891a      	ldrh	r2, [r3, #8]
 8010bc6:	7dfb      	ldrb	r3, [r7, #23]
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	1ad3      	subs	r3, r2, r3
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	693b      	ldr	r3, [r7, #16]
 8010bd0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010bd2:	2114      	movs	r1, #20
 8010bd4:	68b8      	ldr	r0, [r7, #8]
 8010bd6:	f7fb fb09 	bl	800c1ec <pbuf_add_header>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d004      	beq.n	8010bea <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010be0:	6938      	ldr	r0, [r7, #16]
 8010be2:	f7fc ffe2 	bl	800dbaa <tcp_seg_free>
    return NULL;
 8010be6:	2300      	movs	r3, #0
 8010be8:	e037      	b.n	8010c5a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010bea:	693b      	ldr	r3, [r7, #16]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	8ada      	ldrh	r2, [r3, #22]
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	68dc      	ldr	r4, [r3, #12]
 8010bfc:	4610      	mov	r0, r2
 8010bfe:	f7f9 ff57 	bl	800aab0 <lwip_htons>
 8010c02:	4603      	mov	r3, r0
 8010c04:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	8b1a      	ldrh	r2, [r3, #24]
 8010c0a:	693b      	ldr	r3, [r7, #16]
 8010c0c:	68dc      	ldr	r4, [r3, #12]
 8010c0e:	4610      	mov	r0, r2
 8010c10:	f7f9 ff4e 	bl	800aab0 <lwip_htons>
 8010c14:	4603      	mov	r3, r0
 8010c16:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	68dc      	ldr	r4, [r3, #12]
 8010c1c:	6838      	ldr	r0, [r7, #0]
 8010c1e:	f7f9 ff5c 	bl	800aada <lwip_htonl>
 8010c22:	4603      	mov	r3, r0
 8010c24:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010c26:	7dfb      	ldrb	r3, [r7, #23]
 8010c28:	089b      	lsrs	r3, r3, #2
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	b29b      	uxth	r3, r3
 8010c2e:	3305      	adds	r3, #5
 8010c30:	b29b      	uxth	r3, r3
 8010c32:	031b      	lsls	r3, r3, #12
 8010c34:	b29a      	uxth	r2, r3
 8010c36:	79fb      	ldrb	r3, [r7, #7]
 8010c38:	b29b      	uxth	r3, r3
 8010c3a:	4313      	orrs	r3, r2
 8010c3c:	b29a      	uxth	r2, r3
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	68dc      	ldr	r4, [r3, #12]
 8010c42:	4610      	mov	r0, r2
 8010c44:	f7f9 ff34 	bl	800aab0 <lwip_htons>
 8010c48:	4603      	mov	r3, r0
 8010c4a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010c4c:	693b      	ldr	r3, [r7, #16]
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	2200      	movs	r2, #0
 8010c52:	749a      	strb	r2, [r3, #18]
 8010c54:	2200      	movs	r2, #0
 8010c56:	74da      	strb	r2, [r3, #19]
  return seg;
 8010c58:	693b      	ldr	r3, [r7, #16]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	371c      	adds	r7, #28
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd90      	pop	{r4, r7, pc}
 8010c62:	bf00      	nop
 8010c64:	0801a7dc 	.word	0x0801a7dc
 8010c68:	0801a810 	.word	0x0801a810
 8010c6c:	0801a830 	.word	0x0801a830
 8010c70:	0801a858 	.word	0x0801a858
 8010c74:	0801a87c 	.word	0x0801a87c

08010c78 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b086      	sub	sp, #24
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	607b      	str	r3, [r7, #4]
 8010c80:	4603      	mov	r3, r0
 8010c82:	73fb      	strb	r3, [r7, #15]
 8010c84:	460b      	mov	r3, r1
 8010c86:	81bb      	strh	r3, [r7, #12]
 8010c88:	4613      	mov	r3, r2
 8010c8a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010c8c:	89bb      	ldrh	r3, [r7, #12]
 8010c8e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d105      	bne.n	8010ca2 <tcp_pbuf_prealloc+0x2a>
 8010c96:	4b30      	ldr	r3, [pc, #192]	; (8010d58 <tcp_pbuf_prealloc+0xe0>)
 8010c98:	22e8      	movs	r2, #232	; 0xe8
 8010c9a:	4930      	ldr	r1, [pc, #192]	; (8010d5c <tcp_pbuf_prealloc+0xe4>)
 8010c9c:	4830      	ldr	r0, [pc, #192]	; (8010d60 <tcp_pbuf_prealloc+0xe8>)
 8010c9e:	f007 f885 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010ca2:	6a3b      	ldr	r3, [r7, #32]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d105      	bne.n	8010cb4 <tcp_pbuf_prealloc+0x3c>
 8010ca8:	4b2b      	ldr	r3, [pc, #172]	; (8010d58 <tcp_pbuf_prealloc+0xe0>)
 8010caa:	22e9      	movs	r2, #233	; 0xe9
 8010cac:	492d      	ldr	r1, [pc, #180]	; (8010d64 <tcp_pbuf_prealloc+0xec>)
 8010cae:	482c      	ldr	r0, [pc, #176]	; (8010d60 <tcp_pbuf_prealloc+0xe8>)
 8010cb0:	f007 f87c 	bl	8017dac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010cb4:	89ba      	ldrh	r2, [r7, #12]
 8010cb6:	897b      	ldrh	r3, [r7, #10]
 8010cb8:	429a      	cmp	r2, r3
 8010cba:	d221      	bcs.n	8010d00 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010cbc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010cc0:	f003 0302 	and.w	r3, r3, #2
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d111      	bne.n	8010cec <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010cc8:	6a3b      	ldr	r3, [r7, #32]
 8010cca:	8b5b      	ldrh	r3, [r3, #26]
 8010ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d115      	bne.n	8010d00 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010cd4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d007      	beq.n	8010cec <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010cdc:	6a3b      	ldr	r3, [r7, #32]
 8010cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d103      	bne.n	8010cec <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010ce4:	6a3b      	ldr	r3, [r7, #32]
 8010ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d009      	beq.n	8010d00 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010cec:	89bb      	ldrh	r3, [r7, #12]
 8010cee:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010cf2:	f023 0203 	bic.w	r2, r3, #3
 8010cf6:	897b      	ldrh	r3, [r7, #10]
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	bf28      	it	cs
 8010cfc:	4613      	movcs	r3, r2
 8010cfe:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010d00:	8af9      	ldrh	r1, [r7, #22]
 8010d02:	7bfb      	ldrb	r3, [r7, #15]
 8010d04:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fb f821 	bl	800bd50 <pbuf_alloc>
 8010d0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d101      	bne.n	8010d1a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010d16:	2300      	movs	r3, #0
 8010d18:	e019      	b.n	8010d4e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d006      	beq.n	8010d30 <tcp_pbuf_prealloc+0xb8>
 8010d22:	4b0d      	ldr	r3, [pc, #52]	; (8010d58 <tcp_pbuf_prealloc+0xe0>)
 8010d24:	f240 120b 	movw	r2, #267	; 0x10b
 8010d28:	490f      	ldr	r1, [pc, #60]	; (8010d68 <tcp_pbuf_prealloc+0xf0>)
 8010d2a:	480d      	ldr	r0, [pc, #52]	; (8010d60 <tcp_pbuf_prealloc+0xe8>)
 8010d2c:	f007 f83e 	bl	8017dac <iprintf>
  *oversize = p->len - length;
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	895a      	ldrh	r2, [r3, #10]
 8010d34:	89bb      	ldrh	r3, [r7, #12]
 8010d36:	1ad3      	subs	r3, r2, r3
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	89ba      	ldrh	r2, [r7, #12]
 8010d42:	811a      	strh	r2, [r3, #8]
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	891a      	ldrh	r2, [r3, #8]
 8010d48:	693b      	ldr	r3, [r7, #16]
 8010d4a:	815a      	strh	r2, [r3, #10]
  return p;
 8010d4c:	693b      	ldr	r3, [r7, #16]
}
 8010d4e:	4618      	mov	r0, r3
 8010d50:	3718      	adds	r7, #24
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	0801a7dc 	.word	0x0801a7dc
 8010d5c:	0801a894 	.word	0x0801a894
 8010d60:	0801a830 	.word	0x0801a830
 8010d64:	0801a8b8 	.word	0x0801a8b8
 8010d68:	0801a8d8 	.word	0x0801a8d8

08010d6c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
 8010d74:	460b      	mov	r3, r1
 8010d76:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d106      	bne.n	8010d8c <tcp_write_checks+0x20>
 8010d7e:	4b33      	ldr	r3, [pc, #204]	; (8010e4c <tcp_write_checks+0xe0>)
 8010d80:	f240 1233 	movw	r2, #307	; 0x133
 8010d84:	4932      	ldr	r1, [pc, #200]	; (8010e50 <tcp_write_checks+0xe4>)
 8010d86:	4833      	ldr	r0, [pc, #204]	; (8010e54 <tcp_write_checks+0xe8>)
 8010d88:	f007 f810 	bl	8017dac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	7d1b      	ldrb	r3, [r3, #20]
 8010d90:	2b04      	cmp	r3, #4
 8010d92:	d00e      	beq.n	8010db2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010d98:	2b07      	cmp	r3, #7
 8010d9a:	d00a      	beq.n	8010db2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010da0:	2b02      	cmp	r3, #2
 8010da2:	d006      	beq.n	8010db2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d002      	beq.n	8010db2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010dac:	f06f 030a 	mvn.w	r3, #10
 8010db0:	e048      	b.n	8010e44 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010db2:	887b      	ldrh	r3, [r7, #2]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d101      	bne.n	8010dbc <tcp_write_checks+0x50>
    return ERR_OK;
 8010db8:	2300      	movs	r3, #0
 8010dba:	e043      	b.n	8010e44 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010dc2:	887a      	ldrh	r2, [r7, #2]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d909      	bls.n	8010ddc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	8b5b      	ldrh	r3, [r3, #26]
 8010dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd0:	b29a      	uxth	r2, r3
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8010dda:	e033      	b.n	8010e44 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010de2:	2b08      	cmp	r3, #8
 8010de4:	d909      	bls.n	8010dfa <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	8b5b      	ldrh	r3, [r3, #26]
 8010dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dee:	b29a      	uxth	r2, r3
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010df4:	f04f 33ff 	mov.w	r3, #4294967295
 8010df8:	e024      	b.n	8010e44 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00f      	beq.n	8010e24 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d11a      	bne.n	8010e42 <tcp_write_checks+0xd6>
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e10:	2b00      	cmp	r3, #0
 8010e12:	d116      	bne.n	8010e42 <tcp_write_checks+0xd6>
 8010e14:	4b0d      	ldr	r3, [pc, #52]	; (8010e4c <tcp_write_checks+0xe0>)
 8010e16:	f240 1255 	movw	r2, #341	; 0x155
 8010e1a:	490f      	ldr	r1, [pc, #60]	; (8010e58 <tcp_write_checks+0xec>)
 8010e1c:	480d      	ldr	r0, [pc, #52]	; (8010e54 <tcp_write_checks+0xe8>)
 8010e1e:	f006 ffc5 	bl	8017dac <iprintf>
 8010e22:	e00e      	b.n	8010e42 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d103      	bne.n	8010e34 <tcp_write_checks+0xc8>
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d006      	beq.n	8010e42 <tcp_write_checks+0xd6>
 8010e34:	4b05      	ldr	r3, [pc, #20]	; (8010e4c <tcp_write_checks+0xe0>)
 8010e36:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8010e3a:	4908      	ldr	r1, [pc, #32]	; (8010e5c <tcp_write_checks+0xf0>)
 8010e3c:	4805      	ldr	r0, [pc, #20]	; (8010e54 <tcp_write_checks+0xe8>)
 8010e3e:	f006 ffb5 	bl	8017dac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010e42:	2300      	movs	r3, #0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3708      	adds	r7, #8
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	0801a7dc 	.word	0x0801a7dc
 8010e50:	0801a8ec 	.word	0x0801a8ec
 8010e54:	0801a830 	.word	0x0801a830
 8010e58:	0801a90c 	.word	0x0801a90c
 8010e5c:	0801a948 	.word	0x0801a948

08010e60 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010e60:	b590      	push	{r4, r7, lr}
 8010e62:	b09b      	sub	sp, #108	; 0x6c
 8010e64:	af04      	add	r7, sp, #16
 8010e66:	60f8      	str	r0, [r7, #12]
 8010e68:	60b9      	str	r1, [r7, #8]
 8010e6a:	4611      	mov	r1, r2
 8010e6c:	461a      	mov	r2, r3
 8010e6e:	460b      	mov	r3, r1
 8010e70:	80fb      	strh	r3, [r7, #6]
 8010e72:	4613      	mov	r3, r2
 8010e74:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	653b      	str	r3, [r7, #80]	; 0x50
 8010e7e:	2300      	movs	r3, #0
 8010e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e82:	2300      	movs	r3, #0
 8010e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8010e86:	2300      	movs	r3, #0
 8010e88:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8010e90:	2300      	movs	r3, #0
 8010e92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010e96:	2300      	movs	r3, #0
 8010e98:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010e9e:	2300      	movs	r3, #0
 8010ea0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d109      	bne.n	8010ebc <tcp_write+0x5c>
 8010ea8:	4ba4      	ldr	r3, [pc, #656]	; (801113c <tcp_write+0x2dc>)
 8010eaa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8010eae:	49a4      	ldr	r1, [pc, #656]	; (8011140 <tcp_write+0x2e0>)
 8010eb0:	48a4      	ldr	r0, [pc, #656]	; (8011144 <tcp_write+0x2e4>)
 8010eb2:	f006 ff7b 	bl	8017dac <iprintf>
 8010eb6:	f06f 030f 	mvn.w	r3, #15
 8010eba:	e32a      	b.n	8011512 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010ec2:	085b      	lsrs	r3, r3, #1
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	bf28      	it	cs
 8010ece:	4613      	movcs	r3, r2
 8010ed0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d102      	bne.n	8010ede <tcp_write+0x7e>
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010edc:	e000      	b.n	8010ee0 <tcp_write+0x80>
 8010ede:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ee0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d109      	bne.n	8010efc <tcp_write+0x9c>
 8010ee8:	4b94      	ldr	r3, [pc, #592]	; (801113c <tcp_write+0x2dc>)
 8010eea:	f240 12ad 	movw	r2, #429	; 0x1ad
 8010eee:	4996      	ldr	r1, [pc, #600]	; (8011148 <tcp_write+0x2e8>)
 8010ef0:	4894      	ldr	r0, [pc, #592]	; (8011144 <tcp_write+0x2e4>)
 8010ef2:	f006 ff5b 	bl	8017dac <iprintf>
 8010ef6:	f06f 030f 	mvn.w	r3, #15
 8010efa:	e30a      	b.n	8011512 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010efc:	88fb      	ldrh	r3, [r7, #6]
 8010efe:	4619      	mov	r1, r3
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f7ff ff33 	bl	8010d6c <tcp_write_checks>
 8010f06:	4603      	mov	r3, r0
 8010f08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010f0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d002      	beq.n	8010f1a <tcp_write+0xba>
    return err;
 8010f14:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010f18:	e2fb      	b.n	8011512 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010f20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010f24:	2300      	movs	r3, #0
 8010f26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	f000 80f6 	beq.w	8011120 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f38:	653b      	str	r3, [r7, #80]	; 0x50
 8010f3a:	e002      	b.n	8010f42 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d1f8      	bne.n	8010f3c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8010f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f4c:	7a9b      	ldrb	r3, [r3, #10]
 8010f4e:	009b      	lsls	r3, r3, #2
 8010f50:	b29b      	uxth	r3, r3
 8010f52:	f003 0304 	and.w	r3, r3, #4
 8010f56:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010f58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f5c:	891b      	ldrh	r3, [r3, #8]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	8c3b      	ldrh	r3, [r7, #32]
 8010f62:	440b      	add	r3, r1
 8010f64:	429a      	cmp	r2, r3
 8010f66:	da06      	bge.n	8010f76 <tcp_write+0x116>
 8010f68:	4b74      	ldr	r3, [pc, #464]	; (801113c <tcp_write+0x2dc>)
 8010f6a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8010f6e:	4977      	ldr	r1, [pc, #476]	; (801114c <tcp_write+0x2ec>)
 8010f70:	4874      	ldr	r0, [pc, #464]	; (8011144 <tcp_write+0x2e4>)
 8010f72:	f006 ff1b 	bl	8017dac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f78:	891a      	ldrh	r2, [r3, #8]
 8010f7a:	8c3b      	ldrh	r3, [r7, #32]
 8010f7c:	4413      	add	r3, r2
 8010f7e:	b29b      	uxth	r3, r3
 8010f80:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f82:	1ad3      	subs	r3, r2, r3
 8010f84:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010f8c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010f8e:	8a7b      	ldrh	r3, [r7, #18]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d026      	beq.n	8010fe2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010f94:	8a7b      	ldrh	r3, [r7, #18]
 8010f96:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010f98:	429a      	cmp	r2, r3
 8010f9a:	d206      	bcs.n	8010faa <tcp_write+0x14a>
 8010f9c:	4b67      	ldr	r3, [pc, #412]	; (801113c <tcp_write+0x2dc>)
 8010f9e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8010fa2:	496b      	ldr	r1, [pc, #428]	; (8011150 <tcp_write+0x2f0>)
 8010fa4:	4867      	ldr	r0, [pc, #412]	; (8011144 <tcp_write+0x2e4>)
 8010fa6:	f006 ff01 	bl	8017dac <iprintf>
      seg = last_unsent;
 8010faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010fac:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010fae:	8a7b      	ldrh	r3, [r7, #18]
 8010fb0:	88fa      	ldrh	r2, [r7, #6]
 8010fb2:	4293      	cmp	r3, r2
 8010fb4:	bf28      	it	cs
 8010fb6:	4613      	movcs	r3, r2
 8010fb8:	b29b      	uxth	r3, r3
 8010fba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fbc:	4293      	cmp	r3, r2
 8010fbe:	bf28      	it	cs
 8010fc0:	4613      	movcs	r3, r2
 8010fc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010fc4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fca:	4413      	add	r3, r2
 8010fcc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010fd0:	8a7a      	ldrh	r2, [r7, #18]
 8010fd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fd4:	1ad3      	subs	r3, r2, r3
 8010fd6:	b29b      	uxth	r3, r3
 8010fd8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010fda:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010fdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010fde:	1ad3      	subs	r3, r2, r3
 8010fe0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010fe2:	8a7b      	ldrh	r3, [r7, #18]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00b      	beq.n	8011000 <tcp_write+0x1a0>
 8010fe8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010fec:	88fb      	ldrh	r3, [r7, #6]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d006      	beq.n	8011000 <tcp_write+0x1a0>
 8010ff2:	4b52      	ldr	r3, [pc, #328]	; (801113c <tcp_write+0x2dc>)
 8010ff4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ff8:	4956      	ldr	r1, [pc, #344]	; (8011154 <tcp_write+0x2f4>)
 8010ffa:	4852      	ldr	r0, [pc, #328]	; (8011144 <tcp_write+0x2e4>)
 8010ffc:	f006 fed6 	bl	8017dac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011000:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011004:	88fb      	ldrh	r3, [r7, #6]
 8011006:	429a      	cmp	r2, r3
 8011008:	f080 8167 	bcs.w	80112da <tcp_write+0x47a>
 801100c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801100e:	2b00      	cmp	r3, #0
 8011010:	f000 8163 	beq.w	80112da <tcp_write+0x47a>
 8011014:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011016:	891b      	ldrh	r3, [r3, #8]
 8011018:	2b00      	cmp	r3, #0
 801101a:	f000 815e 	beq.w	80112da <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801101e:	88fa      	ldrh	r2, [r7, #6]
 8011020:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011024:	1ad2      	subs	r2, r2, r3
 8011026:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011028:	4293      	cmp	r3, r2
 801102a:	bfa8      	it	ge
 801102c:	4613      	movge	r3, r2
 801102e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011032:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011034:	797b      	ldrb	r3, [r7, #5]
 8011036:	f003 0301 	and.w	r3, r3, #1
 801103a:	2b00      	cmp	r3, #0
 801103c:	d027      	beq.n	801108e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801103e:	f107 0012 	add.w	r0, r7, #18
 8011042:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011044:	8bf9      	ldrh	r1, [r7, #30]
 8011046:	2301      	movs	r3, #1
 8011048:	9302      	str	r3, [sp, #8]
 801104a:	797b      	ldrb	r3, [r7, #5]
 801104c:	9301      	str	r3, [sp, #4]
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	4603      	mov	r3, r0
 8011054:	2000      	movs	r0, #0
 8011056:	f7ff fe0f 	bl	8010c78 <tcp_pbuf_prealloc>
 801105a:	6578      	str	r0, [r7, #84]	; 0x54
 801105c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801105e:	2b00      	cmp	r3, #0
 8011060:	f000 8225 	beq.w	80114ae <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011066:	6858      	ldr	r0, [r3, #4]
 8011068:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801106c:	68ba      	ldr	r2, [r7, #8]
 801106e:	4413      	add	r3, r2
 8011070:	8bfa      	ldrh	r2, [r7, #30]
 8011072:	4619      	mov	r1, r3
 8011074:	f006 ff98 	bl	8017fa8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011078:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801107a:	f7fb f9db 	bl	800c434 <pbuf_clen>
 801107e:	4603      	mov	r3, r0
 8011080:	461a      	mov	r2, r3
 8011082:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011086:	4413      	add	r3, r2
 8011088:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801108c:	e041      	b.n	8011112 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801108e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	637b      	str	r3, [r7, #52]	; 0x34
 8011094:	e002      	b.n	801109c <tcp_write+0x23c>
 8011096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	637b      	str	r3, [r7, #52]	; 0x34
 801109c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d1f8      	bne.n	8011096 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80110a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110a6:	7b1b      	ldrb	r3, [r3, #12]
 80110a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d115      	bne.n	80110dc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80110b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80110b6:	8952      	ldrh	r2, [r2, #10]
 80110b8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	429a      	cmp	r2, r3
 80110be:	d10d      	bne.n	80110dc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80110c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d006      	beq.n	80110d6 <tcp_write+0x276>
 80110c8:	4b1c      	ldr	r3, [pc, #112]	; (801113c <tcp_write+0x2dc>)
 80110ca:	f240 2231 	movw	r2, #561	; 0x231
 80110ce:	4922      	ldr	r1, [pc, #136]	; (8011158 <tcp_write+0x2f8>)
 80110d0:	481c      	ldr	r0, [pc, #112]	; (8011144 <tcp_write+0x2e4>)
 80110d2:	f006 fe6b 	bl	8017dac <iprintf>
          extendlen = seglen;
 80110d6:	8bfb      	ldrh	r3, [r7, #30]
 80110d8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80110da:	e01a      	b.n	8011112 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80110dc:	8bfb      	ldrh	r3, [r7, #30]
 80110de:	2201      	movs	r2, #1
 80110e0:	4619      	mov	r1, r3
 80110e2:	2000      	movs	r0, #0
 80110e4:	f7fa fe34 	bl	800bd50 <pbuf_alloc>
 80110e8:	6578      	str	r0, [r7, #84]	; 0x54
 80110ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	f000 81e0 	beq.w	80114b2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80110f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110f6:	68ba      	ldr	r2, [r7, #8]
 80110f8:	441a      	add	r2, r3
 80110fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110fc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80110fe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011100:	f7fb f998 	bl	800c434 <pbuf_clen>
 8011104:	4603      	mov	r3, r0
 8011106:	461a      	mov	r2, r3
 8011108:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801110c:	4413      	add	r3, r2
 801110e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011112:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011116:	8bfb      	ldrh	r3, [r7, #30]
 8011118:	4413      	add	r3, r2
 801111a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801111e:	e0dc      	b.n	80112da <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011126:	2b00      	cmp	r3, #0
 8011128:	f000 80d7 	beq.w	80112da <tcp_write+0x47a>
 801112c:	4b03      	ldr	r3, [pc, #12]	; (801113c <tcp_write+0x2dc>)
 801112e:	f240 224a 	movw	r2, #586	; 0x24a
 8011132:	490a      	ldr	r1, [pc, #40]	; (801115c <tcp_write+0x2fc>)
 8011134:	4803      	ldr	r0, [pc, #12]	; (8011144 <tcp_write+0x2e4>)
 8011136:	f006 fe39 	bl	8017dac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801113a:	e0ce      	b.n	80112da <tcp_write+0x47a>
 801113c:	0801a7dc 	.word	0x0801a7dc
 8011140:	0801a97c 	.word	0x0801a97c
 8011144:	0801a830 	.word	0x0801a830
 8011148:	0801a994 	.word	0x0801a994
 801114c:	0801a9c8 	.word	0x0801a9c8
 8011150:	0801a9e0 	.word	0x0801a9e0
 8011154:	0801aa00 	.word	0x0801aa00
 8011158:	0801aa20 	.word	0x0801aa20
 801115c:	0801aa4c 	.word	0x0801aa4c
    struct pbuf *p;
    u16_t left = len - pos;
 8011160:	88fa      	ldrh	r2, [r7, #6]
 8011162:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011166:	1ad3      	subs	r3, r2, r3
 8011168:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801116a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801116e:	b29b      	uxth	r3, r3
 8011170:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011176:	8b7a      	ldrh	r2, [r7, #26]
 8011178:	8bbb      	ldrh	r3, [r7, #28]
 801117a:	4293      	cmp	r3, r2
 801117c:	bf28      	it	cs
 801117e:	4613      	movcs	r3, r2
 8011180:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011182:	797b      	ldrb	r3, [r7, #5]
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	2b00      	cmp	r3, #0
 801118a:	d036      	beq.n	80111fa <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801118c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011190:	b29a      	uxth	r2, r3
 8011192:	8b3b      	ldrh	r3, [r7, #24]
 8011194:	4413      	add	r3, r2
 8011196:	b299      	uxth	r1, r3
 8011198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801119a:	2b00      	cmp	r3, #0
 801119c:	bf0c      	ite	eq
 801119e:	2301      	moveq	r3, #1
 80111a0:	2300      	movne	r3, #0
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	f107 0012 	add.w	r0, r7, #18
 80111a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111aa:	9302      	str	r3, [sp, #8]
 80111ac:	797b      	ldrb	r3, [r7, #5]
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	9300      	str	r3, [sp, #0]
 80111b4:	4603      	mov	r3, r0
 80111b6:	2036      	movs	r0, #54	; 0x36
 80111b8:	f7ff fd5e 	bl	8010c78 <tcp_pbuf_prealloc>
 80111bc:	6338      	str	r0, [r7, #48]	; 0x30
 80111be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	f000 8178 	beq.w	80114b6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	895b      	ldrh	r3, [r3, #10]
 80111ca:	8b3a      	ldrh	r2, [r7, #24]
 80111cc:	429a      	cmp	r2, r3
 80111ce:	d906      	bls.n	80111de <tcp_write+0x37e>
 80111d0:	4b8c      	ldr	r3, [pc, #560]	; (8011404 <tcp_write+0x5a4>)
 80111d2:	f240 2266 	movw	r2, #614	; 0x266
 80111d6:	498c      	ldr	r1, [pc, #560]	; (8011408 <tcp_write+0x5a8>)
 80111d8:	488c      	ldr	r0, [pc, #560]	; (801140c <tcp_write+0x5ac>)
 80111da:	f006 fde7 	bl	8017dac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80111de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111e0:	685a      	ldr	r2, [r3, #4]
 80111e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80111e6:	18d0      	adds	r0, r2, r3
 80111e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80111ec:	68ba      	ldr	r2, [r7, #8]
 80111ee:	4413      	add	r3, r2
 80111f0:	8b3a      	ldrh	r2, [r7, #24]
 80111f2:	4619      	mov	r1, r3
 80111f4:	f006 fed8 	bl	8017fa8 <memcpy>
 80111f8:	e02f      	b.n	801125a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80111fa:	8a7b      	ldrh	r3, [r7, #18]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d006      	beq.n	801120e <tcp_write+0x3ae>
 8011200:	4b80      	ldr	r3, [pc, #512]	; (8011404 <tcp_write+0x5a4>)
 8011202:	f240 2271 	movw	r2, #625	; 0x271
 8011206:	4982      	ldr	r1, [pc, #520]	; (8011410 <tcp_write+0x5b0>)
 8011208:	4880      	ldr	r0, [pc, #512]	; (801140c <tcp_write+0x5ac>)
 801120a:	f006 fdcf 	bl	8017dac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801120e:	8b3b      	ldrh	r3, [r7, #24]
 8011210:	2201      	movs	r2, #1
 8011212:	4619      	mov	r1, r3
 8011214:	2036      	movs	r0, #54	; 0x36
 8011216:	f7fa fd9b 	bl	800bd50 <pbuf_alloc>
 801121a:	6178      	str	r0, [r7, #20]
 801121c:	697b      	ldr	r3, [r7, #20]
 801121e:	2b00      	cmp	r3, #0
 8011220:	f000 814b 	beq.w	80114ba <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8011224:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011228:	68ba      	ldr	r2, [r7, #8]
 801122a:	441a      	add	r2, r3
 801122c:	697b      	ldr	r3, [r7, #20]
 801122e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011230:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011234:	b29b      	uxth	r3, r3
 8011236:	f44f 7220 	mov.w	r2, #640	; 0x280
 801123a:	4619      	mov	r1, r3
 801123c:	2036      	movs	r0, #54	; 0x36
 801123e:	f7fa fd87 	bl	800bd50 <pbuf_alloc>
 8011242:	6338      	str	r0, [r7, #48]	; 0x30
 8011244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011246:	2b00      	cmp	r3, #0
 8011248:	d103      	bne.n	8011252 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801124a:	6978      	ldr	r0, [r7, #20]
 801124c:	f7fb f864 	bl	800c318 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011250:	e136      	b.n	80114c0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011252:	6979      	ldr	r1, [r7, #20]
 8011254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011256:	f7fb f92d 	bl	800c4b4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801125a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801125c:	f7fb f8ea 	bl	800c434 <pbuf_clen>
 8011260:	4603      	mov	r3, r0
 8011262:	461a      	mov	r2, r3
 8011264:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011268:	4413      	add	r3, r2
 801126a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801126e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011272:	2b09      	cmp	r3, #9
 8011274:	d903      	bls.n	801127e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011276:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011278:	f7fb f84e 	bl	800c318 <pbuf_free>
      goto memerr;
 801127c:	e120      	b.n	80114c0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011282:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011286:	441a      	add	r2, r3
 8011288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801128c:	9300      	str	r3, [sp, #0]
 801128e:	4613      	mov	r3, r2
 8011290:	2200      	movs	r2, #0
 8011292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f7ff fc51 	bl	8010b3c <tcp_create_segment>
 801129a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801129c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f000 810d 	beq.w	80114be <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80112a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d102      	bne.n	80112b0 <tcp_write+0x450>
      queue = seg;
 80112aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112ac:	647b      	str	r3, [r7, #68]	; 0x44
 80112ae:	e00c      	b.n	80112ca <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80112b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d106      	bne.n	80112c4 <tcp_write+0x464>
 80112b6:	4b53      	ldr	r3, [pc, #332]	; (8011404 <tcp_write+0x5a4>)
 80112b8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80112bc:	4955      	ldr	r1, [pc, #340]	; (8011414 <tcp_write+0x5b4>)
 80112be:	4853      	ldr	r0, [pc, #332]	; (801140c <tcp_write+0x5ac>)
 80112c0:	f006 fd74 	bl	8017dac <iprintf>
      prev_seg->next = seg;
 80112c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80112c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112c8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80112ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112cc:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80112ce:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112d2:	8b3b      	ldrh	r3, [r7, #24]
 80112d4:	4413      	add	r3, r2
 80112d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80112da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80112de:	88fb      	ldrh	r3, [r7, #6]
 80112e0:	429a      	cmp	r2, r3
 80112e2:	f4ff af3d 	bcc.w	8011160 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80112e6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d02c      	beq.n	8011346 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80112ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ee:	685b      	ldr	r3, [r3, #4]
 80112f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112f2:	e01e      	b.n	8011332 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80112f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f6:	891a      	ldrh	r2, [r3, #8]
 80112f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80112fa:	4413      	add	r3, r2
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011300:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d110      	bne.n	801132c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801130a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011310:	8952      	ldrh	r2, [r2, #10]
 8011312:	4413      	add	r3, r2
 8011314:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011316:	68b9      	ldr	r1, [r7, #8]
 8011318:	4618      	mov	r0, r3
 801131a:	f006 fe45 	bl	8017fa8 <memcpy>
        p->len += oversize_used;
 801131e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011320:	895a      	ldrh	r2, [r3, #10]
 8011322:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011324:	4413      	add	r3, r2
 8011326:	b29a      	uxth	r2, r3
 8011328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801132c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011334:	2b00      	cmp	r3, #0
 8011336:	d1dd      	bne.n	80112f4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801133a:	891a      	ldrh	r2, [r3, #8]
 801133c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801133e:	4413      	add	r3, r2
 8011340:	b29a      	uxth	r2, r3
 8011342:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011344:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011346:	8a7a      	ldrh	r2, [r7, #18]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801134e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011350:	2b00      	cmp	r3, #0
 8011352:	d018      	beq.n	8011386 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011356:	2b00      	cmp	r3, #0
 8011358:	d106      	bne.n	8011368 <tcp_write+0x508>
 801135a:	4b2a      	ldr	r3, [pc, #168]	; (8011404 <tcp_write+0x5a4>)
 801135c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011360:	492d      	ldr	r1, [pc, #180]	; (8011418 <tcp_write+0x5b8>)
 8011362:	482a      	ldr	r0, [pc, #168]	; (801140c <tcp_write+0x5ac>)
 8011364:	f006 fd22 	bl	8017dac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801136e:	4618      	mov	r0, r3
 8011370:	f7fb f8a0 	bl	800c4b4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011374:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011376:	891a      	ldrh	r2, [r3, #8]
 8011378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801137a:	891b      	ldrh	r3, [r3, #8]
 801137c:	4413      	add	r3, r2
 801137e:	b29a      	uxth	r2, r3
 8011380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011382:	811a      	strh	r2, [r3, #8]
 8011384:	e037      	b.n	80113f6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8011386:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011388:	2b00      	cmp	r3, #0
 801138a:	d034      	beq.n	80113f6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801138c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801138e:	2b00      	cmp	r3, #0
 8011390:	d003      	beq.n	801139a <tcp_write+0x53a>
 8011392:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011394:	685b      	ldr	r3, [r3, #4]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d106      	bne.n	80113a8 <tcp_write+0x548>
 801139a:	4b1a      	ldr	r3, [pc, #104]	; (8011404 <tcp_write+0x5a4>)
 801139c:	f240 22e6 	movw	r2, #742	; 0x2e6
 80113a0:	491e      	ldr	r1, [pc, #120]	; (801141c <tcp_write+0x5bc>)
 80113a2:	481a      	ldr	r0, [pc, #104]	; (801140c <tcp_write+0x5ac>)
 80113a4:	f006 fd02 	bl	8017dac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113aa:	685b      	ldr	r3, [r3, #4]
 80113ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80113ae:	e009      	b.n	80113c4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80113b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113b2:	891a      	ldrh	r2, [r3, #8]
 80113b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113b6:	4413      	add	r3, r2
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113bc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80113be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80113c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d1f1      	bne.n	80113b0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80113cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ce:	891a      	ldrh	r2, [r3, #8]
 80113d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113d2:	4413      	add	r3, r2
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80113da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113dc:	895a      	ldrh	r2, [r3, #10]
 80113de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113e0:	4413      	add	r3, r2
 80113e2:	b29a      	uxth	r2, r3
 80113e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80113e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113ea:	891a      	ldrh	r2, [r3, #8]
 80113ec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80113ee:	4413      	add	r3, r2
 80113f0:	b29a      	uxth	r2, r3
 80113f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80113f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d111      	bne.n	8011420 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011400:	66da      	str	r2, [r3, #108]	; 0x6c
 8011402:	e010      	b.n	8011426 <tcp_write+0x5c6>
 8011404:	0801a7dc 	.word	0x0801a7dc
 8011408:	0801aa7c 	.word	0x0801aa7c
 801140c:	0801a830 	.word	0x0801a830
 8011410:	0801aabc 	.word	0x0801aabc
 8011414:	0801aacc 	.word	0x0801aacc
 8011418:	0801aae0 	.word	0x0801aae0
 801141c:	0801ab18 	.word	0x0801ab18
  } else {
    last_unsent->next = queue;
 8011420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011422:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011424:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801142a:	88fb      	ldrh	r3, [r7, #6]
 801142c:	441a      	add	r2, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011438:	88fb      	ldrh	r3, [r7, #6]
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	b29a      	uxth	r2, r3
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801144a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011454:	2b00      	cmp	r3, #0
 8011456:	d00e      	beq.n	8011476 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801145c:	2b00      	cmp	r3, #0
 801145e:	d10a      	bne.n	8011476 <tcp_write+0x616>
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <tcp_write+0x616>
 8011468:	4b2c      	ldr	r3, [pc, #176]	; (801151c <tcp_write+0x6bc>)
 801146a:	f240 3212 	movw	r2, #786	; 0x312
 801146e:	492c      	ldr	r1, [pc, #176]	; (8011520 <tcp_write+0x6c0>)
 8011470:	482c      	ldr	r0, [pc, #176]	; (8011524 <tcp_write+0x6c4>)
 8011472:	f006 fc9b 	bl	8017dac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8011476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011478:	2b00      	cmp	r3, #0
 801147a:	d016      	beq.n	80114aa <tcp_write+0x64a>
 801147c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801147e:	68db      	ldr	r3, [r3, #12]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d012      	beq.n	80114aa <tcp_write+0x64a>
 8011484:	797b      	ldrb	r3, [r7, #5]
 8011486:	f003 0302 	and.w	r3, r3, #2
 801148a:	2b00      	cmp	r3, #0
 801148c:	d10d      	bne.n	80114aa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801148e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011490:	68db      	ldr	r3, [r3, #12]
 8011492:	899b      	ldrh	r3, [r3, #12]
 8011494:	b29c      	uxth	r4, r3
 8011496:	2008      	movs	r0, #8
 8011498:	f7f9 fb0a 	bl	800aab0 <lwip_htons>
 801149c:	4603      	mov	r3, r0
 801149e:	461a      	mov	r2, r3
 80114a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114a2:	68db      	ldr	r3, [r3, #12]
 80114a4:	4322      	orrs	r2, r4
 80114a6:	b292      	uxth	r2, r2
 80114a8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80114aa:	2300      	movs	r3, #0
 80114ac:	e031      	b.n	8011512 <tcp_write+0x6b2>
          goto memerr;
 80114ae:	bf00      	nop
 80114b0:	e006      	b.n	80114c0 <tcp_write+0x660>
            goto memerr;
 80114b2:	bf00      	nop
 80114b4:	e004      	b.n	80114c0 <tcp_write+0x660>
        goto memerr;
 80114b6:	bf00      	nop
 80114b8:	e002      	b.n	80114c0 <tcp_write+0x660>
        goto memerr;
 80114ba:	bf00      	nop
 80114bc:	e000      	b.n	80114c0 <tcp_write+0x660>
      goto memerr;
 80114be:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	8b5b      	ldrh	r3, [r3, #26]
 80114c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80114c8:	b29a      	uxth	r2, r3
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80114ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d002      	beq.n	80114da <tcp_write+0x67a>
    pbuf_free(concat_p);
 80114d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80114d6:	f7fa ff1f 	bl	800c318 <pbuf_free>
  }
  if (queue != NULL) {
 80114da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d002      	beq.n	80114e6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80114e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80114e2:	f7fc fb4d 	bl	800db80 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d00e      	beq.n	801150e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d10a      	bne.n	801150e <tcp_write+0x6ae>
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d106      	bne.n	801150e <tcp_write+0x6ae>
 8011500:	4b06      	ldr	r3, [pc, #24]	; (801151c <tcp_write+0x6bc>)
 8011502:	f240 3227 	movw	r2, #807	; 0x327
 8011506:	4906      	ldr	r1, [pc, #24]	; (8011520 <tcp_write+0x6c0>)
 8011508:	4806      	ldr	r0, [pc, #24]	; (8011524 <tcp_write+0x6c4>)
 801150a:	f006 fc4f 	bl	8017dac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801150e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011512:	4618      	mov	r0, r3
 8011514:	375c      	adds	r7, #92	; 0x5c
 8011516:	46bd      	mov	sp, r7
 8011518:	bd90      	pop	{r4, r7, pc}
 801151a:	bf00      	nop
 801151c:	0801a7dc 	.word	0x0801a7dc
 8011520:	0801ab50 	.word	0x0801ab50
 8011524:	0801a830 	.word	0x0801a830

08011528 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011528:	b590      	push	{r4, r7, lr}
 801152a:	b08b      	sub	sp, #44	; 0x2c
 801152c:	af02      	add	r7, sp, #8
 801152e:	6078      	str	r0, [r7, #4]
 8011530:	460b      	mov	r3, r1
 8011532:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011534:	2300      	movs	r3, #0
 8011536:	61fb      	str	r3, [r7, #28]
 8011538:	2300      	movs	r3, #0
 801153a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801153c:	2300      	movs	r3, #0
 801153e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d106      	bne.n	8011554 <tcp_split_unsent_seg+0x2c>
 8011546:	4b95      	ldr	r3, [pc, #596]	; (801179c <tcp_split_unsent_seg+0x274>)
 8011548:	f240 324b 	movw	r2, #843	; 0x34b
 801154c:	4994      	ldr	r1, [pc, #592]	; (80117a0 <tcp_split_unsent_seg+0x278>)
 801154e:	4895      	ldr	r0, [pc, #596]	; (80117a4 <tcp_split_unsent_seg+0x27c>)
 8011550:	f006 fc2c 	bl	8017dac <iprintf>

  useg = pcb->unsent;
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011558:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801155a:	697b      	ldr	r3, [r7, #20]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d102      	bne.n	8011566 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011560:	f04f 33ff 	mov.w	r3, #4294967295
 8011564:	e116      	b.n	8011794 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011566:	887b      	ldrh	r3, [r7, #2]
 8011568:	2b00      	cmp	r3, #0
 801156a:	d109      	bne.n	8011580 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801156c:	4b8b      	ldr	r3, [pc, #556]	; (801179c <tcp_split_unsent_seg+0x274>)
 801156e:	f240 3253 	movw	r2, #851	; 0x353
 8011572:	498d      	ldr	r1, [pc, #564]	; (80117a8 <tcp_split_unsent_seg+0x280>)
 8011574:	488b      	ldr	r0, [pc, #556]	; (80117a4 <tcp_split_unsent_seg+0x27c>)
 8011576:	f006 fc19 	bl	8017dac <iprintf>
    return ERR_VAL;
 801157a:	f06f 0305 	mvn.w	r3, #5
 801157e:	e109      	b.n	8011794 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011580:	697b      	ldr	r3, [r7, #20]
 8011582:	891b      	ldrh	r3, [r3, #8]
 8011584:	887a      	ldrh	r2, [r7, #2]
 8011586:	429a      	cmp	r2, r3
 8011588:	d301      	bcc.n	801158e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801158a:	2300      	movs	r3, #0
 801158c:	e102      	b.n	8011794 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011592:	887a      	ldrh	r2, [r7, #2]
 8011594:	429a      	cmp	r2, r3
 8011596:	d906      	bls.n	80115a6 <tcp_split_unsent_seg+0x7e>
 8011598:	4b80      	ldr	r3, [pc, #512]	; (801179c <tcp_split_unsent_seg+0x274>)
 801159a:	f240 325b 	movw	r2, #859	; 0x35b
 801159e:	4983      	ldr	r1, [pc, #524]	; (80117ac <tcp_split_unsent_seg+0x284>)
 80115a0:	4880      	ldr	r0, [pc, #512]	; (80117a4 <tcp_split_unsent_seg+0x27c>)
 80115a2:	f006 fc03 	bl	8017dac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	891b      	ldrh	r3, [r3, #8]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d106      	bne.n	80115bc <tcp_split_unsent_seg+0x94>
 80115ae:	4b7b      	ldr	r3, [pc, #492]	; (801179c <tcp_split_unsent_seg+0x274>)
 80115b0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80115b4:	497e      	ldr	r1, [pc, #504]	; (80117b0 <tcp_split_unsent_seg+0x288>)
 80115b6:	487b      	ldr	r0, [pc, #492]	; (80117a4 <tcp_split_unsent_seg+0x27c>)
 80115b8:	f006 fbf8 	bl	8017dac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80115bc:	697b      	ldr	r3, [r7, #20]
 80115be:	7a9b      	ldrb	r3, [r3, #10]
 80115c0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80115c2:	7bfb      	ldrb	r3, [r7, #15]
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	b2db      	uxtb	r3, r3
 80115c8:	f003 0304 	and.w	r3, r3, #4
 80115cc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80115ce:	697b      	ldr	r3, [r7, #20]
 80115d0:	891a      	ldrh	r2, [r3, #8]
 80115d2:	887b      	ldrh	r3, [r7, #2]
 80115d4:	1ad3      	subs	r3, r2, r3
 80115d6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80115d8:	7bbb      	ldrb	r3, [r7, #14]
 80115da:	b29a      	uxth	r2, r3
 80115dc:	89bb      	ldrh	r3, [r7, #12]
 80115de:	4413      	add	r3, r2
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115e6:	4619      	mov	r1, r3
 80115e8:	2036      	movs	r0, #54	; 0x36
 80115ea:	f7fa fbb1 	bl	800bd50 <pbuf_alloc>
 80115ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f000 80b7 	beq.w	8011766 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80115f8:	697b      	ldr	r3, [r7, #20]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	891a      	ldrh	r2, [r3, #8]
 80115fe:	697b      	ldr	r3, [r7, #20]
 8011600:	891b      	ldrh	r3, [r3, #8]
 8011602:	1ad3      	subs	r3, r2, r3
 8011604:	b29a      	uxth	r2, r3
 8011606:	887b      	ldrh	r3, [r7, #2]
 8011608:	4413      	add	r3, r2
 801160a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	6858      	ldr	r0, [r3, #4]
 8011610:	693b      	ldr	r3, [r7, #16]
 8011612:	685a      	ldr	r2, [r3, #4]
 8011614:	7bbb      	ldrb	r3, [r7, #14]
 8011616:	18d1      	adds	r1, r2, r3
 8011618:	897b      	ldrh	r3, [r7, #10]
 801161a:	89ba      	ldrh	r2, [r7, #12]
 801161c:	f7fb f882 	bl	800c724 <pbuf_copy_partial>
 8011620:	4603      	mov	r3, r0
 8011622:	461a      	mov	r2, r3
 8011624:	89bb      	ldrh	r3, [r7, #12]
 8011626:	4293      	cmp	r3, r2
 8011628:	f040 809f 	bne.w	801176a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801162c:	697b      	ldr	r3, [r7, #20]
 801162e:	68db      	ldr	r3, [r3, #12]
 8011630:	899b      	ldrh	r3, [r3, #12]
 8011632:	b29b      	uxth	r3, r3
 8011634:	4618      	mov	r0, r3
 8011636:	f7f9 fa3b 	bl	800aab0 <lwip_htons>
 801163a:	4603      	mov	r3, r0
 801163c:	b2db      	uxtb	r3, r3
 801163e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011642:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011644:	2300      	movs	r3, #0
 8011646:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011648:	7efb      	ldrb	r3, [r7, #27]
 801164a:	f003 0308 	and.w	r3, r3, #8
 801164e:	2b00      	cmp	r3, #0
 8011650:	d007      	beq.n	8011662 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011652:	7efb      	ldrb	r3, [r7, #27]
 8011654:	f023 0308 	bic.w	r3, r3, #8
 8011658:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801165a:	7ebb      	ldrb	r3, [r7, #26]
 801165c:	f043 0308 	orr.w	r3, r3, #8
 8011660:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011662:	7efb      	ldrb	r3, [r7, #27]
 8011664:	f003 0301 	and.w	r3, r3, #1
 8011668:	2b00      	cmp	r3, #0
 801166a:	d007      	beq.n	801167c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801166c:	7efb      	ldrb	r3, [r7, #27]
 801166e:	f023 0301 	bic.w	r3, r3, #1
 8011672:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011674:	7ebb      	ldrb	r3, [r7, #26]
 8011676:	f043 0301 	orr.w	r3, r3, #1
 801167a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801167c:	697b      	ldr	r3, [r7, #20]
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	4618      	mov	r0, r3
 8011684:	f7f9 fa29 	bl	800aada <lwip_htonl>
 8011688:	4602      	mov	r2, r0
 801168a:	887b      	ldrh	r3, [r7, #2]
 801168c:	18d1      	adds	r1, r2, r3
 801168e:	7eba      	ldrb	r2, [r7, #26]
 8011690:	7bfb      	ldrb	r3, [r7, #15]
 8011692:	9300      	str	r3, [sp, #0]
 8011694:	460b      	mov	r3, r1
 8011696:	6939      	ldr	r1, [r7, #16]
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f7ff fa4f 	bl	8010b3c <tcp_create_segment>
 801169e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80116a0:	69fb      	ldr	r3, [r7, #28]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d063      	beq.n	801176e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	4618      	mov	r0, r3
 80116ac:	f7fa fec2 	bl	800c434 <pbuf_clen>
 80116b0:	4603      	mov	r3, r0
 80116b2:	461a      	mov	r2, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80116ba:	1a9b      	subs	r3, r3, r2
 80116bc:	b29a      	uxth	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	6858      	ldr	r0, [r3, #4]
 80116c8:	697b      	ldr	r3, [r7, #20]
 80116ca:	685b      	ldr	r3, [r3, #4]
 80116cc:	891a      	ldrh	r2, [r3, #8]
 80116ce:	89bb      	ldrh	r3, [r7, #12]
 80116d0:	1ad3      	subs	r3, r2, r3
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4619      	mov	r1, r3
 80116d6:	f7fa fc99 	bl	800c00c <pbuf_realloc>
  useg->len -= remainder;
 80116da:	697b      	ldr	r3, [r7, #20]
 80116dc:	891a      	ldrh	r2, [r3, #8]
 80116de:	89bb      	ldrh	r3, [r7, #12]
 80116e0:	1ad3      	subs	r3, r2, r3
 80116e2:	b29a      	uxth	r2, r3
 80116e4:	697b      	ldr	r3, [r7, #20]
 80116e6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	899b      	ldrh	r3, [r3, #12]
 80116ee:	b29c      	uxth	r4, r3
 80116f0:	7efb      	ldrb	r3, [r7, #27]
 80116f2:	b29b      	uxth	r3, r3
 80116f4:	4618      	mov	r0, r3
 80116f6:	f7f9 f9db 	bl	800aab0 <lwip_htons>
 80116fa:	4603      	mov	r3, r0
 80116fc:	461a      	mov	r2, r3
 80116fe:	697b      	ldr	r3, [r7, #20]
 8011700:	68db      	ldr	r3, [r3, #12]
 8011702:	4322      	orrs	r2, r4
 8011704:	b292      	uxth	r2, r2
 8011706:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	685b      	ldr	r3, [r3, #4]
 801170c:	4618      	mov	r0, r3
 801170e:	f7fa fe91 	bl	800c434 <pbuf_clen>
 8011712:	4603      	mov	r3, r0
 8011714:	461a      	mov	r2, r3
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801171c:	4413      	add	r3, r2
 801171e:	b29a      	uxth	r2, r3
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011726:	69fb      	ldr	r3, [r7, #28]
 8011728:	685b      	ldr	r3, [r3, #4]
 801172a:	4618      	mov	r0, r3
 801172c:	f7fa fe82 	bl	800c434 <pbuf_clen>
 8011730:	4603      	mov	r3, r0
 8011732:	461a      	mov	r2, r3
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801173a:	4413      	add	r3, r2
 801173c:	b29a      	uxth	r2, r3
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	681a      	ldr	r2, [r3, #0]
 8011748:	69fb      	ldr	r3, [r7, #28]
 801174a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801174c:	697b      	ldr	r3, [r7, #20]
 801174e:	69fa      	ldr	r2, [r7, #28]
 8011750:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011752:	69fb      	ldr	r3, [r7, #28]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d103      	bne.n	8011762 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2200      	movs	r2, #0
 801175e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011762:	2300      	movs	r3, #0
 8011764:	e016      	b.n	8011794 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011766:	bf00      	nop
 8011768:	e002      	b.n	8011770 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801176a:	bf00      	nop
 801176c:	e000      	b.n	8011770 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801176e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011770:	69fb      	ldr	r3, [r7, #28]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d006      	beq.n	8011784 <tcp_split_unsent_seg+0x25c>
 8011776:	4b09      	ldr	r3, [pc, #36]	; (801179c <tcp_split_unsent_seg+0x274>)
 8011778:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801177c:	490d      	ldr	r1, [pc, #52]	; (80117b4 <tcp_split_unsent_seg+0x28c>)
 801177e:	4809      	ldr	r0, [pc, #36]	; (80117a4 <tcp_split_unsent_seg+0x27c>)
 8011780:	f006 fb14 	bl	8017dac <iprintf>
  if (p != NULL) {
 8011784:	693b      	ldr	r3, [r7, #16]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d002      	beq.n	8011790 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801178a:	6938      	ldr	r0, [r7, #16]
 801178c:	f7fa fdc4 	bl	800c318 <pbuf_free>
  }

  return ERR_MEM;
 8011790:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011794:	4618      	mov	r0, r3
 8011796:	3724      	adds	r7, #36	; 0x24
 8011798:	46bd      	mov	sp, r7
 801179a:	bd90      	pop	{r4, r7, pc}
 801179c:	0801a7dc 	.word	0x0801a7dc
 80117a0:	0801ab70 	.word	0x0801ab70
 80117a4:	0801a830 	.word	0x0801a830
 80117a8:	0801ab94 	.word	0x0801ab94
 80117ac:	0801abb8 	.word	0x0801abb8
 80117b0:	0801abc8 	.word	0x0801abc8
 80117b4:	0801abd8 	.word	0x0801abd8

080117b8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80117b8:	b590      	push	{r4, r7, lr}
 80117ba:	b085      	sub	sp, #20
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d106      	bne.n	80117d4 <tcp_send_fin+0x1c>
 80117c6:	4b21      	ldr	r3, [pc, #132]	; (801184c <tcp_send_fin+0x94>)
 80117c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80117cc:	4920      	ldr	r1, [pc, #128]	; (8011850 <tcp_send_fin+0x98>)
 80117ce:	4821      	ldr	r0, [pc, #132]	; (8011854 <tcp_send_fin+0x9c>)
 80117d0:	f006 faec 	bl	8017dac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d02e      	beq.n	801183a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80117e0:	60fb      	str	r3, [r7, #12]
 80117e2:	e002      	b.n	80117ea <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80117e4:	68fb      	ldr	r3, [r7, #12]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d1f8      	bne.n	80117e4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	899b      	ldrh	r3, [r3, #12]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7f9 f958 	bl	800aab0 <lwip_htons>
 8011800:	4603      	mov	r3, r0
 8011802:	b2db      	uxtb	r3, r3
 8011804:	f003 0307 	and.w	r3, r3, #7
 8011808:	2b00      	cmp	r3, #0
 801180a:	d116      	bne.n	801183a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	68db      	ldr	r3, [r3, #12]
 8011810:	899b      	ldrh	r3, [r3, #12]
 8011812:	b29c      	uxth	r4, r3
 8011814:	2001      	movs	r0, #1
 8011816:	f7f9 f94b 	bl	800aab0 <lwip_htons>
 801181a:	4603      	mov	r3, r0
 801181c:	461a      	mov	r2, r3
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	68db      	ldr	r3, [r3, #12]
 8011822:	4322      	orrs	r2, r4
 8011824:	b292      	uxth	r2, r2
 8011826:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8b5b      	ldrh	r3, [r3, #26]
 801182c:	f043 0320 	orr.w	r3, r3, #32
 8011830:	b29a      	uxth	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011836:	2300      	movs	r3, #0
 8011838:	e004      	b.n	8011844 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801183a:	2101      	movs	r1, #1
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f000 f80b 	bl	8011858 <tcp_enqueue_flags>
 8011842:	4603      	mov	r3, r0
}
 8011844:	4618      	mov	r0, r3
 8011846:	3714      	adds	r7, #20
 8011848:	46bd      	mov	sp, r7
 801184a:	bd90      	pop	{r4, r7, pc}
 801184c:	0801a7dc 	.word	0x0801a7dc
 8011850:	0801abe4 	.word	0x0801abe4
 8011854:	0801a830 	.word	0x0801a830

08011858 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b08a      	sub	sp, #40	; 0x28
 801185c:	af02      	add	r7, sp, #8
 801185e:	6078      	str	r0, [r7, #4]
 8011860:	460b      	mov	r3, r1
 8011862:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011864:	2300      	movs	r3, #0
 8011866:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011868:	2300      	movs	r3, #0
 801186a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801186c:	78fb      	ldrb	r3, [r7, #3]
 801186e:	f003 0303 	and.w	r3, r3, #3
 8011872:	2b00      	cmp	r3, #0
 8011874:	d106      	bne.n	8011884 <tcp_enqueue_flags+0x2c>
 8011876:	4b67      	ldr	r3, [pc, #412]	; (8011a14 <tcp_enqueue_flags+0x1bc>)
 8011878:	f240 4211 	movw	r2, #1041	; 0x411
 801187c:	4966      	ldr	r1, [pc, #408]	; (8011a18 <tcp_enqueue_flags+0x1c0>)
 801187e:	4867      	ldr	r0, [pc, #412]	; (8011a1c <tcp_enqueue_flags+0x1c4>)
 8011880:	f006 fa94 	bl	8017dac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	2b00      	cmp	r3, #0
 8011888:	d106      	bne.n	8011898 <tcp_enqueue_flags+0x40>
 801188a:	4b62      	ldr	r3, [pc, #392]	; (8011a14 <tcp_enqueue_flags+0x1bc>)
 801188c:	f240 4213 	movw	r2, #1043	; 0x413
 8011890:	4963      	ldr	r1, [pc, #396]	; (8011a20 <tcp_enqueue_flags+0x1c8>)
 8011892:	4862      	ldr	r0, [pc, #392]	; (8011a1c <tcp_enqueue_flags+0x1c4>)
 8011894:	f006 fa8a 	bl	8017dac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011898:	78fb      	ldrb	r3, [r7, #3]
 801189a:	f003 0302 	and.w	r3, r3, #2
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d001      	beq.n	80118a6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80118a2:	2301      	movs	r3, #1
 80118a4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80118a6:	7ffb      	ldrb	r3, [r7, #31]
 80118a8:	009b      	lsls	r3, r3, #2
 80118aa:	b2db      	uxtb	r3, r3
 80118ac:	f003 0304 	and.w	r3, r3, #4
 80118b0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80118b2:	7dfb      	ldrb	r3, [r7, #23]
 80118b4:	b29b      	uxth	r3, r3
 80118b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80118ba:	4619      	mov	r1, r3
 80118bc:	2036      	movs	r0, #54	; 0x36
 80118be:	f7fa fa47 	bl	800bd50 <pbuf_alloc>
 80118c2:	6138      	str	r0, [r7, #16]
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d109      	bne.n	80118de <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	8b5b      	ldrh	r3, [r3, #26]
 80118ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118d2:	b29a      	uxth	r2, r3
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80118d8:	f04f 33ff 	mov.w	r3, #4294967295
 80118dc:	e095      	b.n	8011a0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80118de:	693b      	ldr	r3, [r7, #16]
 80118e0:	895a      	ldrh	r2, [r3, #10]
 80118e2:	7dfb      	ldrb	r3, [r7, #23]
 80118e4:	b29b      	uxth	r3, r3
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d206      	bcs.n	80118f8 <tcp_enqueue_flags+0xa0>
 80118ea:	4b4a      	ldr	r3, [pc, #296]	; (8011a14 <tcp_enqueue_flags+0x1bc>)
 80118ec:	f240 4239 	movw	r2, #1081	; 0x439
 80118f0:	494c      	ldr	r1, [pc, #304]	; (8011a24 <tcp_enqueue_flags+0x1cc>)
 80118f2:	484a      	ldr	r0, [pc, #296]	; (8011a1c <tcp_enqueue_flags+0x1c4>)
 80118f4:	f006 fa5a 	bl	8017dac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80118fc:	78fa      	ldrb	r2, [r7, #3]
 80118fe:	7ffb      	ldrb	r3, [r7, #31]
 8011900:	9300      	str	r3, [sp, #0]
 8011902:	460b      	mov	r3, r1
 8011904:	6939      	ldr	r1, [r7, #16]
 8011906:	6878      	ldr	r0, [r7, #4]
 8011908:	f7ff f918 	bl	8010b3c <tcp_create_segment>
 801190c:	60f8      	str	r0, [r7, #12]
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d109      	bne.n	8011928 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	8b5b      	ldrh	r3, [r3, #26]
 8011918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801191c:	b29a      	uxth	r2, r3
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011922:	f04f 33ff 	mov.w	r3, #4294967295
 8011926:	e070      	b.n	8011a0a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	68db      	ldr	r3, [r3, #12]
 801192c:	f003 0303 	and.w	r3, r3, #3
 8011930:	2b00      	cmp	r3, #0
 8011932:	d006      	beq.n	8011942 <tcp_enqueue_flags+0xea>
 8011934:	4b37      	ldr	r3, [pc, #220]	; (8011a14 <tcp_enqueue_flags+0x1bc>)
 8011936:	f240 4242 	movw	r2, #1090	; 0x442
 801193a:	493b      	ldr	r1, [pc, #236]	; (8011a28 <tcp_enqueue_flags+0x1d0>)
 801193c:	4837      	ldr	r0, [pc, #220]	; (8011a1c <tcp_enqueue_flags+0x1c4>)
 801193e:	f006 fa35 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	891b      	ldrh	r3, [r3, #8]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d006      	beq.n	8011958 <tcp_enqueue_flags+0x100>
 801194a:	4b32      	ldr	r3, [pc, #200]	; (8011a14 <tcp_enqueue_flags+0x1bc>)
 801194c:	f240 4243 	movw	r2, #1091	; 0x443
 8011950:	4936      	ldr	r1, [pc, #216]	; (8011a2c <tcp_enqueue_flags+0x1d4>)
 8011952:	4832      	ldr	r0, [pc, #200]	; (8011a1c <tcp_enqueue_flags+0x1c4>)
 8011954:	f006 fa2a 	bl	8017dac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801195c:	2b00      	cmp	r3, #0
 801195e:	d103      	bne.n	8011968 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	66da      	str	r2, [r3, #108]	; 0x6c
 8011966:	e00d      	b.n	8011984 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801196c:	61bb      	str	r3, [r7, #24]
 801196e:	e002      	b.n	8011976 <tcp_enqueue_flags+0x11e>
 8011970:	69bb      	ldr	r3, [r7, #24]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	61bb      	str	r3, [r7, #24]
 8011976:	69bb      	ldr	r3, [r7, #24]
 8011978:	681b      	ldr	r3, [r3, #0]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1f8      	bne.n	8011970 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801197e:	69bb      	ldr	r3, [r7, #24]
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	2200      	movs	r2, #0
 8011988:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801198c:	78fb      	ldrb	r3, [r7, #3]
 801198e:	f003 0302 	and.w	r3, r3, #2
 8011992:	2b00      	cmp	r3, #0
 8011994:	d104      	bne.n	80119a0 <tcp_enqueue_flags+0x148>
 8011996:	78fb      	ldrb	r3, [r7, #3]
 8011998:	f003 0301 	and.w	r3, r3, #1
 801199c:	2b00      	cmp	r3, #0
 801199e:	d004      	beq.n	80119aa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80119a4:	1c5a      	adds	r2, r3, #1
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80119aa:	78fb      	ldrb	r3, [r7, #3]
 80119ac:	f003 0301 	and.w	r3, r3, #1
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d006      	beq.n	80119c2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	8b5b      	ldrh	r3, [r3, #26]
 80119b8:	f043 0320 	orr.w	r3, r3, #32
 80119bc:	b29a      	uxth	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fa fd34 	bl	800c434 <pbuf_clen>
 80119cc:	4603      	mov	r3, r0
 80119ce:	461a      	mov	r2, r3
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119d6:	4413      	add	r3, r2
 80119d8:	b29a      	uxth	r2, r3
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d00e      	beq.n	8011a08 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d10a      	bne.n	8011a08 <tcp_enqueue_flags+0x1b0>
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d106      	bne.n	8011a08 <tcp_enqueue_flags+0x1b0>
 80119fa:	4b06      	ldr	r3, [pc, #24]	; (8011a14 <tcp_enqueue_flags+0x1bc>)
 80119fc:	f240 4265 	movw	r2, #1125	; 0x465
 8011a00:	490b      	ldr	r1, [pc, #44]	; (8011a30 <tcp_enqueue_flags+0x1d8>)
 8011a02:	4806      	ldr	r0, [pc, #24]	; (8011a1c <tcp_enqueue_flags+0x1c4>)
 8011a04:	f006 f9d2 	bl	8017dac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3720      	adds	r7, #32
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	0801a7dc 	.word	0x0801a7dc
 8011a18:	0801ac00 	.word	0x0801ac00
 8011a1c:	0801a830 	.word	0x0801a830
 8011a20:	0801ac58 	.word	0x0801ac58
 8011a24:	0801ac78 	.word	0x0801ac78
 8011a28:	0801acb4 	.word	0x0801acb4
 8011a2c:	0801accc 	.word	0x0801accc
 8011a30:	0801acf8 	.word	0x0801acf8

08011a34 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011a34:	b5b0      	push	{r4, r5, r7, lr}
 8011a36:	b08a      	sub	sp, #40	; 0x28
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d106      	bne.n	8011a50 <tcp_output+0x1c>
 8011a42:	4b8a      	ldr	r3, [pc, #552]	; (8011c6c <tcp_output+0x238>)
 8011a44:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011a48:	4989      	ldr	r1, [pc, #548]	; (8011c70 <tcp_output+0x23c>)
 8011a4a:	488a      	ldr	r0, [pc, #552]	; (8011c74 <tcp_output+0x240>)
 8011a4c:	f006 f9ae 	bl	8017dac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	7d1b      	ldrb	r3, [r3, #20]
 8011a54:	2b01      	cmp	r3, #1
 8011a56:	d106      	bne.n	8011a66 <tcp_output+0x32>
 8011a58:	4b84      	ldr	r3, [pc, #528]	; (8011c6c <tcp_output+0x238>)
 8011a5a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011a5e:	4986      	ldr	r1, [pc, #536]	; (8011c78 <tcp_output+0x244>)
 8011a60:	4884      	ldr	r0, [pc, #528]	; (8011c74 <tcp_output+0x240>)
 8011a62:	f006 f9a3 	bl	8017dac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011a66:	4b85      	ldr	r3, [pc, #532]	; (8011c7c <tcp_output+0x248>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d101      	bne.n	8011a74 <tcp_output+0x40>
    return ERR_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	e1ce      	b.n	8011e12 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011a80:	4293      	cmp	r3, r2
 8011a82:	bf28      	it	cs
 8011a84:	4613      	movcs	r3, r2
 8011a86:	b29b      	uxth	r3, r3
 8011a88:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d10b      	bne.n	8011aae <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	8b5b      	ldrh	r3, [r3, #26]
 8011a9a:	f003 0302 	and.w	r3, r3, #2
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	f000 81aa 	beq.w	8011df8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011aa4:	6878      	ldr	r0, [r7, #4]
 8011aa6:	f000 fdcb 	bl	8012640 <tcp_send_empty_ack>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	e1b1      	b.n	8011e12 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011aae:	6879      	ldr	r1, [r7, #4]
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	3304      	adds	r3, #4
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	6878      	ldr	r0, [r7, #4]
 8011ab8:	f7ff f824 	bl	8010b04 <tcp_route>
 8011abc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d102      	bne.n	8011aca <tcp_output+0x96>
    return ERR_RTE;
 8011ac4:	f06f 0303 	mvn.w	r3, #3
 8011ac8:	e1a3      	b.n	8011e12 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d003      	beq.n	8011ad8 <tcp_output+0xa4>
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d111      	bne.n	8011afc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d002      	beq.n	8011ae4 <tcp_output+0xb0>
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	3304      	adds	r3, #4
 8011ae2:	e000      	b.n	8011ae6 <tcp_output+0xb2>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d102      	bne.n	8011af4 <tcp_output+0xc0>
      return ERR_RTE;
 8011aee:	f06f 0303 	mvn.w	r3, #3
 8011af2:	e18e      	b.n	8011e12 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	4618      	mov	r0, r3
 8011b04:	f7f8 ffe9 	bl	800aada <lwip_htonl>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b0e:	1ad3      	subs	r3, r2, r3
 8011b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b12:	8912      	ldrh	r2, [r2, #8]
 8011b14:	4413      	add	r3, r2
 8011b16:	69ba      	ldr	r2, [r7, #24]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d227      	bcs.n	8011b6c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b22:	461a      	mov	r2, r3
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	4293      	cmp	r3, r2
 8011b28:	d114      	bne.n	8011b54 <tcp_output+0x120>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d110      	bne.n	8011b54 <tcp_output+0x120>
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d10b      	bne.n	8011b54 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	2201      	movs	r2, #1
 8011b48:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	2200      	movs	r2, #0
 8011b50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	8b5b      	ldrh	r3, [r3, #26]
 8011b58:	f003 0302 	and.w	r3, r3, #2
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	f000 814d 	beq.w	8011dfc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f000 fd6c 	bl	8012640 <tcp_send_empty_ack>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	e152      	b.n	8011e12 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2200      	movs	r2, #0
 8011b70:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011b78:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011b7a:	6a3b      	ldr	r3, [r7, #32]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f000 811c 	beq.w	8011dba <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011b82:	e002      	b.n	8011b8a <tcp_output+0x156>
 8011b84:	6a3b      	ldr	r3, [r7, #32]
 8011b86:	681b      	ldr	r3, [r3, #0]
 8011b88:	623b      	str	r3, [r7, #32]
 8011b8a:	6a3b      	ldr	r3, [r7, #32]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d1f8      	bne.n	8011b84 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011b92:	e112      	b.n	8011dba <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	899b      	ldrh	r3, [r3, #12]
 8011b9a:	b29b      	uxth	r3, r3
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7f8 ff87 	bl	800aab0 <lwip_htons>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	b2db      	uxtb	r3, r3
 8011ba6:	f003 0304 	and.w	r3, r3, #4
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d006      	beq.n	8011bbc <tcp_output+0x188>
 8011bae:	4b2f      	ldr	r3, [pc, #188]	; (8011c6c <tcp_output+0x238>)
 8011bb0:	f240 5236 	movw	r2, #1334	; 0x536
 8011bb4:	4932      	ldr	r1, [pc, #200]	; (8011c80 <tcp_output+0x24c>)
 8011bb6:	482f      	ldr	r0, [pc, #188]	; (8011c74 <tcp_output+0x240>)
 8011bb8:	f006 f8f8 	bl	8017dac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d01f      	beq.n	8011c04 <tcp_output+0x1d0>
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	8b5b      	ldrh	r3, [r3, #26]
 8011bc8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d119      	bne.n	8011c04 <tcp_output+0x1d0>
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d00b      	beq.n	8011bf0 <tcp_output+0x1bc>
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d110      	bne.n	8011c04 <tcp_output+0x1d0>
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011be6:	891a      	ldrh	r2, [r3, #8]
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bec:	429a      	cmp	r2, r3
 8011bee:	d209      	bcs.n	8011c04 <tcp_output+0x1d0>
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d004      	beq.n	8011c04 <tcp_output+0x1d0>
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c00:	2b08      	cmp	r3, #8
 8011c02:	d901      	bls.n	8011c08 <tcp_output+0x1d4>
 8011c04:	2301      	movs	r3, #1
 8011c06:	e000      	b.n	8011c0a <tcp_output+0x1d6>
 8011c08:	2300      	movs	r3, #0
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d106      	bne.n	8011c1c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	8b5b      	ldrh	r3, [r3, #26]
 8011c12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	f000 80e4 	beq.w	8011de4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	7d1b      	ldrb	r3, [r3, #20]
 8011c20:	2b02      	cmp	r3, #2
 8011c22:	d00d      	beq.n	8011c40 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c26:	68db      	ldr	r3, [r3, #12]
 8011c28:	899b      	ldrh	r3, [r3, #12]
 8011c2a:	b29c      	uxth	r4, r3
 8011c2c:	2010      	movs	r0, #16
 8011c2e:	f7f8 ff3f 	bl	800aab0 <lwip_htons>
 8011c32:	4603      	mov	r3, r0
 8011c34:	461a      	mov	r2, r3
 8011c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	4322      	orrs	r2, r4
 8011c3c:	b292      	uxth	r2, r2
 8011c3e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011c40:	697a      	ldr	r2, [r7, #20]
 8011c42:	6879      	ldr	r1, [r7, #4]
 8011c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011c46:	f000 f909 	bl	8011e5c <tcp_output_segment>
 8011c4a:	4603      	mov	r3, r0
 8011c4c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d016      	beq.n	8011c84 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	8b5b      	ldrh	r3, [r3, #26]
 8011c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c5e:	b29a      	uxth	r2, r3
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	835a      	strh	r2, [r3, #26]
      return err;
 8011c64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c68:	e0d3      	b.n	8011e12 <tcp_output+0x3de>
 8011c6a:	bf00      	nop
 8011c6c:	0801a7dc 	.word	0x0801a7dc
 8011c70:	0801ad20 	.word	0x0801ad20
 8011c74:	0801a830 	.word	0x0801a830
 8011c78:	0801ad38 	.word	0x0801ad38
 8011c7c:	2000ce84 	.word	0x2000ce84
 8011c80:	0801ad60 	.word	0x0801ad60
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c86:	681a      	ldr	r2, [r3, #0]
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	7d1b      	ldrb	r3, [r3, #20]
 8011c90:	2b02      	cmp	r3, #2
 8011c92:	d006      	beq.n	8011ca2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	8b5b      	ldrh	r3, [r3, #26]
 8011c98:	f023 0303 	bic.w	r3, r3, #3
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca4:	68db      	ldr	r3, [r3, #12]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7f8 ff16 	bl	800aada <lwip_htonl>
 8011cae:	4604      	mov	r4, r0
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb2:	891b      	ldrh	r3, [r3, #8]
 8011cb4:	461d      	mov	r5, r3
 8011cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cb8:	68db      	ldr	r3, [r3, #12]
 8011cba:	899b      	ldrh	r3, [r3, #12]
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7f8 fef6 	bl	800aab0 <lwip_htons>
 8011cc4:	4603      	mov	r3, r0
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	f003 0303 	and.w	r3, r3, #3
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d001      	beq.n	8011cd4 <tcp_output+0x2a0>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	e000      	b.n	8011cd6 <tcp_output+0x2a2>
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	442b      	add	r3, r5
 8011cd8:	4423      	add	r3, r4
 8011cda:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011ce0:	68bb      	ldr	r3, [r7, #8]
 8011ce2:	1ad3      	subs	r3, r2, r3
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	da02      	bge.n	8011cee <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	68ba      	ldr	r2, [r7, #8]
 8011cec:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	891b      	ldrh	r3, [r3, #8]
 8011cf2:	461c      	mov	r4, r3
 8011cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf6:	68db      	ldr	r3, [r3, #12]
 8011cf8:	899b      	ldrh	r3, [r3, #12]
 8011cfa:	b29b      	uxth	r3, r3
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	f7f8 fed7 	bl	800aab0 <lwip_htons>
 8011d02:	4603      	mov	r3, r0
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	f003 0303 	and.w	r3, r3, #3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d001      	beq.n	8011d12 <tcp_output+0x2de>
 8011d0e:	2301      	movs	r3, #1
 8011d10:	e000      	b.n	8011d14 <tcp_output+0x2e0>
 8011d12:	2300      	movs	r3, #0
 8011d14:	4423      	add	r3, r4
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d049      	beq.n	8011dae <tcp_output+0x37a>
      seg->next = NULL;
 8011d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d1c:	2200      	movs	r2, #0
 8011d1e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d105      	bne.n	8011d34 <tcp_output+0x300>
        pcb->unacked = seg;
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d2c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d30:	623b      	str	r3, [r7, #32]
 8011d32:	e03f      	b.n	8011db4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	685b      	ldr	r3, [r3, #4]
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7f8 fecd 	bl	800aada <lwip_htonl>
 8011d40:	4604      	mov	r4, r0
 8011d42:	6a3b      	ldr	r3, [r7, #32]
 8011d44:	68db      	ldr	r3, [r3, #12]
 8011d46:	685b      	ldr	r3, [r3, #4]
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7f8 fec6 	bl	800aada <lwip_htonl>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	1ae3      	subs	r3, r4, r3
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	da24      	bge.n	8011da0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	3370      	adds	r3, #112	; 0x70
 8011d5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011d5c:	e002      	b.n	8011d64 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d011      	beq.n	8011d90 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	681b      	ldr	r3, [r3, #0]
 8011d70:	68db      	ldr	r3, [r3, #12]
 8011d72:	685b      	ldr	r3, [r3, #4]
 8011d74:	4618      	mov	r0, r3
 8011d76:	f7f8 feb0 	bl	800aada <lwip_htonl>
 8011d7a:	4604      	mov	r4, r0
 8011d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d7e:	68db      	ldr	r3, [r3, #12]
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	4618      	mov	r0, r3
 8011d84:	f7f8 fea9 	bl	800aada <lwip_htonl>
 8011d88:	4603      	mov	r3, r0
 8011d8a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	dbe6      	blt.n	8011d5e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d96:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011d98:	69fb      	ldr	r3, [r7, #28]
 8011d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d9c:	601a      	str	r2, [r3, #0]
 8011d9e:	e009      	b.n	8011db4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011da0:	6a3b      	ldr	r3, [r7, #32]
 8011da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011da4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011da6:	6a3b      	ldr	r3, [r7, #32]
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	623b      	str	r3, [r7, #32]
 8011dac:	e002      	b.n	8011db4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011dae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011db0:	f7fb fefb 	bl	800dbaa <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011db8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d012      	beq.n	8011de6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f7f8 fe87 	bl	800aada <lwip_htonl>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dd2:	1ad3      	subs	r3, r2, r3
 8011dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011dd6:	8912      	ldrh	r2, [r2, #8]
 8011dd8:	4413      	add	r3, r2
  while (seg != NULL &&
 8011dda:	69ba      	ldr	r2, [r7, #24]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	f4bf aed9 	bcs.w	8011b94 <tcp_output+0x160>
 8011de2:	e000      	b.n	8011de6 <tcp_output+0x3b2>
      break;
 8011de4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d108      	bne.n	8011e00 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2200      	movs	r2, #0
 8011df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8011df6:	e004      	b.n	8011e02 <tcp_output+0x3ce>
    goto output_done;
 8011df8:	bf00      	nop
 8011dfa:	e002      	b.n	8011e02 <tcp_output+0x3ce>
    goto output_done;
 8011dfc:	bf00      	nop
 8011dfe:	e000      	b.n	8011e02 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8011e00:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	8b5b      	ldrh	r3, [r3, #26]
 8011e06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011e0a:	b29a      	uxth	r2, r3
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	3728      	adds	r7, #40	; 0x28
 8011e16:	46bd      	mov	sp, r7
 8011e18:	bdb0      	pop	{r4, r5, r7, pc}
 8011e1a:	bf00      	nop

08011e1c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d106      	bne.n	8011e38 <tcp_output_segment_busy+0x1c>
 8011e2a:	4b09      	ldr	r3, [pc, #36]	; (8011e50 <tcp_output_segment_busy+0x34>)
 8011e2c:	f240 529a 	movw	r2, #1434	; 0x59a
 8011e30:	4908      	ldr	r1, [pc, #32]	; (8011e54 <tcp_output_segment_busy+0x38>)
 8011e32:	4809      	ldr	r0, [pc, #36]	; (8011e58 <tcp_output_segment_busy+0x3c>)
 8011e34:	f005 ffba 	bl	8017dac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	7b9b      	ldrb	r3, [r3, #14]
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d001      	beq.n	8011e46 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8011e42:	2301      	movs	r3, #1
 8011e44:	e000      	b.n	8011e48 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8011e46:	2300      	movs	r3, #0
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3708      	adds	r7, #8
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	0801a7dc 	.word	0x0801a7dc
 8011e54:	0801ad78 	.word	0x0801ad78
 8011e58:	0801a830 	.word	0x0801a830

08011e5c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011e5c:	b5b0      	push	{r4, r5, r7, lr}
 8011e5e:	b08c      	sub	sp, #48	; 0x30
 8011e60:	af04      	add	r7, sp, #16
 8011e62:	60f8      	str	r0, [r7, #12]
 8011e64:	60b9      	str	r1, [r7, #8]
 8011e66:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d106      	bne.n	8011e7c <tcp_output_segment+0x20>
 8011e6e:	4b64      	ldr	r3, [pc, #400]	; (8012000 <tcp_output_segment+0x1a4>)
 8011e70:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011e74:	4963      	ldr	r1, [pc, #396]	; (8012004 <tcp_output_segment+0x1a8>)
 8011e76:	4864      	ldr	r0, [pc, #400]	; (8012008 <tcp_output_segment+0x1ac>)
 8011e78:	f005 ff98 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d106      	bne.n	8011e90 <tcp_output_segment+0x34>
 8011e82:	4b5f      	ldr	r3, [pc, #380]	; (8012000 <tcp_output_segment+0x1a4>)
 8011e84:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011e88:	4960      	ldr	r1, [pc, #384]	; (801200c <tcp_output_segment+0x1b0>)
 8011e8a:	485f      	ldr	r0, [pc, #380]	; (8012008 <tcp_output_segment+0x1ac>)
 8011e8c:	f005 ff8e 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d106      	bne.n	8011ea4 <tcp_output_segment+0x48>
 8011e96:	4b5a      	ldr	r3, [pc, #360]	; (8012000 <tcp_output_segment+0x1a4>)
 8011e98:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011e9c:	495c      	ldr	r1, [pc, #368]	; (8012010 <tcp_output_segment+0x1b4>)
 8011e9e:	485a      	ldr	r0, [pc, #360]	; (8012008 <tcp_output_segment+0x1ac>)
 8011ea0:	f005 ff84 	bl	8017dac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f7ff ffb9 	bl	8011e1c <tcp_output_segment_busy>
 8011eaa:	4603      	mov	r3, r0
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d001      	beq.n	8011eb4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	e0a1      	b.n	8011ff8 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011eb4:	68bb      	ldr	r3, [r7, #8]
 8011eb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	68dc      	ldr	r4, [r3, #12]
 8011ebc:	4610      	mov	r0, r2
 8011ebe:	f7f8 fe0c 	bl	800aada <lwip_htonl>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	68dc      	ldr	r4, [r3, #12]
 8011ece:	4610      	mov	r0, r2
 8011ed0:	f7f8 fdee 	bl	800aab0 <lwip_htons>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011edc:	68ba      	ldr	r2, [r7, #8]
 8011ede:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011ee0:	441a      	add	r2, r3
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	68db      	ldr	r3, [r3, #12]
 8011eea:	3314      	adds	r3, #20
 8011eec:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	7a9b      	ldrb	r3, [r3, #10]
 8011ef2:	f003 0301 	and.w	r3, r3, #1
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d015      	beq.n	8011f26 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	3304      	adds	r3, #4
 8011efe:	461a      	mov	r2, r3
 8011f00:	6879      	ldr	r1, [r7, #4]
 8011f02:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011f06:	f7fc fa33 	bl	800e370 <tcp_eff_send_mss_netif>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011f0e:	8b7b      	ldrh	r3, [r7, #26]
 8011f10:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7f8 fde0 	bl	800aada <lwip_htonl>
 8011f1a:	4602      	mov	r2, r0
 8011f1c:	69fb      	ldr	r3, [r7, #28]
 8011f1e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011f20:	69fb      	ldr	r3, [r7, #28]
 8011f22:	3304      	adds	r3, #4
 8011f24:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011f26:	68bb      	ldr	r3, [r7, #8]
 8011f28:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	da02      	bge.n	8011f36 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8011f30:	68bb      	ldr	r3, [r7, #8]
 8011f32:	2200      	movs	r2, #0
 8011f34:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011f36:	68bb      	ldr	r3, [r7, #8]
 8011f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d10c      	bne.n	8011f58 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8011f3e:	4b35      	ldr	r3, [pc, #212]	; (8012014 <tcp_output_segment+0x1b8>)
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	68db      	ldr	r3, [r3, #12]
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f7f8 fdc4 	bl	800aada <lwip_htonl>
 8011f52:	4602      	mov	r2, r0
 8011f54:	68bb      	ldr	r3, [r7, #8]
 8011f56:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	68da      	ldr	r2, [r3, #12]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	1ad3      	subs	r3, r2, r3
 8011f64:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	8959      	ldrh	r1, [r3, #10]
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	8b3a      	ldrh	r2, [r7, #24]
 8011f72:	1a8a      	subs	r2, r1, r2
 8011f74:	b292      	uxth	r2, r2
 8011f76:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	8919      	ldrh	r1, [r3, #8]
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	685b      	ldr	r3, [r3, #4]
 8011f82:	8b3a      	ldrh	r2, [r7, #24]
 8011f84:	1a8a      	subs	r2, r1, r2
 8011f86:	b292      	uxth	r2, r2
 8011f88:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	685b      	ldr	r3, [r3, #4]
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	68d2      	ldr	r2, [r2, #12]
 8011f92:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	68db      	ldr	r3, [r3, #12]
 8011f98:	2200      	movs	r2, #0
 8011f9a:	741a      	strb	r2, [r3, #16]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8011fa0:	68fb      	ldr	r3, [r7, #12]
 8011fa2:	68da      	ldr	r2, [r3, #12]
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	7a9b      	ldrb	r3, [r3, #10]
 8011fa8:	f003 0301 	and.w	r3, r3, #1
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d001      	beq.n	8011fb4 <tcp_output_segment+0x158>
 8011fb0:	2318      	movs	r3, #24
 8011fb2:	e000      	b.n	8011fb6 <tcp_output_segment+0x15a>
 8011fb4:	2314      	movs	r3, #20
 8011fb6:	4413      	add	r3, r2
 8011fb8:	69fa      	ldr	r2, [r7, #28]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d006      	beq.n	8011fcc <tcp_output_segment+0x170>
 8011fbe:	4b10      	ldr	r3, [pc, #64]	; (8012000 <tcp_output_segment+0x1a4>)
 8011fc0:	f240 621c 	movw	r2, #1564	; 0x61c
 8011fc4:	4914      	ldr	r1, [pc, #80]	; (8012018 <tcp_output_segment+0x1bc>)
 8011fc6:	4810      	ldr	r0, [pc, #64]	; (8012008 <tcp_output_segment+0x1ac>)
 8011fc8:	f005 fef0 	bl	8017dac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	6858      	ldr	r0, [r3, #4]
 8011fd0:	68b9      	ldr	r1, [r7, #8]
 8011fd2:	68bb      	ldr	r3, [r7, #8]
 8011fd4:	1d1c      	adds	r4, r3, #4
 8011fd6:	68bb      	ldr	r3, [r7, #8]
 8011fd8:	7add      	ldrb	r5, [r3, #11]
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	7a9b      	ldrb	r3, [r3, #10]
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	9202      	str	r2, [sp, #8]
 8011fe2:	2206      	movs	r2, #6
 8011fe4:	9201      	str	r2, [sp, #4]
 8011fe6:	9300      	str	r3, [sp, #0]
 8011fe8:	462b      	mov	r3, r5
 8011fea:	4622      	mov	r2, r4
 8011fec:	f004 fc1c 	bl	8016828 <ip4_output_if>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8011ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3720      	adds	r7, #32
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8012000:	0801a7dc 	.word	0x0801a7dc
 8012004:	0801ada0 	.word	0x0801ada0
 8012008:	0801a830 	.word	0x0801a830
 801200c:	0801adc0 	.word	0x0801adc0
 8012010:	0801ade0 	.word	0x0801ade0
 8012014:	2000ce38 	.word	0x2000ce38
 8012018:	0801ae04 	.word	0x0801ae04

0801201c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801201c:	b5b0      	push	{r4, r5, r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d106      	bne.n	8012038 <tcp_rexmit_rto_prepare+0x1c>
 801202a:	4b31      	ldr	r3, [pc, #196]	; (80120f0 <tcp_rexmit_rto_prepare+0xd4>)
 801202c:	f240 6263 	movw	r2, #1635	; 0x663
 8012030:	4930      	ldr	r1, [pc, #192]	; (80120f4 <tcp_rexmit_rto_prepare+0xd8>)
 8012032:	4831      	ldr	r0, [pc, #196]	; (80120f8 <tcp_rexmit_rto_prepare+0xdc>)
 8012034:	f005 feba 	bl	8017dac <iprintf>

  if (pcb->unacked == NULL) {
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801203c:	2b00      	cmp	r3, #0
 801203e:	d102      	bne.n	8012046 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012040:	f06f 0305 	mvn.w	r3, #5
 8012044:	e050      	b.n	80120e8 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801204a:	60fb      	str	r3, [r7, #12]
 801204c:	e00b      	b.n	8012066 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801204e:	68f8      	ldr	r0, [r7, #12]
 8012050:	f7ff fee4 	bl	8011e1c <tcp_output_segment_busy>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d002      	beq.n	8012060 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801205a:	f06f 0305 	mvn.w	r3, #5
 801205e:	e043      	b.n	80120e8 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	60fb      	str	r3, [r7, #12]
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d1ef      	bne.n	801204e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801206e:	68f8      	ldr	r0, [r7, #12]
 8012070:	f7ff fed4 	bl	8011e1c <tcp_output_segment_busy>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d002      	beq.n	8012080 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801207a:	f06f 0305 	mvn.w	r3, #5
 801207e:	e033      	b.n	80120e8 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2200      	movs	r2, #0
 8012094:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	8b5b      	ldrh	r3, [r3, #26]
 801209a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801209e:	b29a      	uxth	r2, r3
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	4618      	mov	r0, r3
 80120ac:	f7f8 fd15 	bl	800aada <lwip_htonl>
 80120b0:	4604      	mov	r4, r0
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	891b      	ldrh	r3, [r3, #8]
 80120b6:	461d      	mov	r5, r3
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	899b      	ldrh	r3, [r3, #12]
 80120be:	b29b      	uxth	r3, r3
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7f8 fcf5 	bl	800aab0 <lwip_htons>
 80120c6:	4603      	mov	r3, r0
 80120c8:	b2db      	uxtb	r3, r3
 80120ca:	f003 0303 	and.w	r3, r3, #3
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d001      	beq.n	80120d6 <tcp_rexmit_rto_prepare+0xba>
 80120d2:	2301      	movs	r3, #1
 80120d4:	e000      	b.n	80120d8 <tcp_rexmit_rto_prepare+0xbc>
 80120d6:	2300      	movs	r3, #0
 80120d8:	442b      	add	r3, r5
 80120da:	18e2      	adds	r2, r4, r3
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2200      	movs	r2, #0
 80120e4:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80120e6:	2300      	movs	r3, #0
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3710      	adds	r7, #16
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bdb0      	pop	{r4, r5, r7, pc}
 80120f0:	0801a7dc 	.word	0x0801a7dc
 80120f4:	0801ae18 	.word	0x0801ae18
 80120f8:	0801a830 	.word	0x0801a830

080120fc <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d106      	bne.n	8012118 <tcp_rexmit_rto_commit+0x1c>
 801210a:	4b0d      	ldr	r3, [pc, #52]	; (8012140 <tcp_rexmit_rto_commit+0x44>)
 801210c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012110:	490c      	ldr	r1, [pc, #48]	; (8012144 <tcp_rexmit_rto_commit+0x48>)
 8012112:	480d      	ldr	r0, [pc, #52]	; (8012148 <tcp_rexmit_rto_commit+0x4c>)
 8012114:	f005 fe4a 	bl	8017dac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801211e:	2bff      	cmp	r3, #255	; 0xff
 8012120:	d007      	beq.n	8012132 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012128:	3301      	adds	r3, #1
 801212a:	b2da      	uxtb	r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f7ff fc7e 	bl	8011a34 <tcp_output>
}
 8012138:	bf00      	nop
 801213a:	3708      	adds	r7, #8
 801213c:	46bd      	mov	sp, r7
 801213e:	bd80      	pop	{r7, pc}
 8012140:	0801a7dc 	.word	0x0801a7dc
 8012144:	0801ae3c 	.word	0x0801ae3c
 8012148:	0801a830 	.word	0x0801a830

0801214c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b082      	sub	sp, #8
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d106      	bne.n	8012168 <tcp_rexmit_rto+0x1c>
 801215a:	4b0a      	ldr	r3, [pc, #40]	; (8012184 <tcp_rexmit_rto+0x38>)
 801215c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012160:	4909      	ldr	r1, [pc, #36]	; (8012188 <tcp_rexmit_rto+0x3c>)
 8012162:	480a      	ldr	r0, [pc, #40]	; (801218c <tcp_rexmit_rto+0x40>)
 8012164:	f005 fe22 	bl	8017dac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	f7ff ff57 	bl	801201c <tcp_rexmit_rto_prepare>
 801216e:	4603      	mov	r3, r0
 8012170:	2b00      	cmp	r3, #0
 8012172:	d102      	bne.n	801217a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	f7ff ffc1 	bl	80120fc <tcp_rexmit_rto_commit>
  }
}
 801217a:	bf00      	nop
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	0801a7dc 	.word	0x0801a7dc
 8012188:	0801ae60 	.word	0x0801ae60
 801218c:	0801a830 	.word	0x0801a830

08012190 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8012190:	b590      	push	{r4, r7, lr}
 8012192:	b085      	sub	sp, #20
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d106      	bne.n	80121ac <tcp_rexmit+0x1c>
 801219e:	4b2f      	ldr	r3, [pc, #188]	; (801225c <tcp_rexmit+0xcc>)
 80121a0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80121a4:	492e      	ldr	r1, [pc, #184]	; (8012260 <tcp_rexmit+0xd0>)
 80121a6:	482f      	ldr	r0, [pc, #188]	; (8012264 <tcp_rexmit+0xd4>)
 80121a8:	f005 fe00 	bl	8017dac <iprintf>

  if (pcb->unacked == NULL) {
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d102      	bne.n	80121ba <tcp_rexmit+0x2a>
    return ERR_VAL;
 80121b4:	f06f 0305 	mvn.w	r3, #5
 80121b8:	e04c      	b.n	8012254 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121be:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80121c0:	68b8      	ldr	r0, [r7, #8]
 80121c2:	f7ff fe2b 	bl	8011e1c <tcp_output_segment_busy>
 80121c6:	4603      	mov	r3, r0
 80121c8:	2b00      	cmp	r3, #0
 80121ca:	d002      	beq.n	80121d2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80121cc:	f06f 0305 	mvn.w	r3, #5
 80121d0:	e040      	b.n	8012254 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80121d2:	68bb      	ldr	r3, [r7, #8]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	336c      	adds	r3, #108	; 0x6c
 80121de:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80121e0:	e002      	b.n	80121e8 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d011      	beq.n	8012214 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	685b      	ldr	r3, [r3, #4]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7f8 fc6e 	bl	800aada <lwip_htonl>
 80121fe:	4604      	mov	r4, r0
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	68db      	ldr	r3, [r3, #12]
 8012204:	685b      	ldr	r3, [r3, #4]
 8012206:	4618      	mov	r0, r3
 8012208:	f7f8 fc67 	bl	800aada <lwip_htonl>
 801220c:	4603      	mov	r3, r0
 801220e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012210:	2b00      	cmp	r3, #0
 8012212:	dbe6      	blt.n	80121e2 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801221c:	68fb      	ldr	r3, [r7, #12]
 801221e:	68ba      	ldr	r2, [r7, #8]
 8012220:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2b00      	cmp	r3, #0
 8012228:	d103      	bne.n	8012232 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2200      	movs	r2, #0
 801222e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012238:	2bff      	cmp	r3, #255	; 0xff
 801223a:	d007      	beq.n	801224c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012242:	3301      	adds	r3, #1
 8012244:	b2da      	uxtb	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	2200      	movs	r2, #0
 8012250:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012252:	2300      	movs	r3, #0
}
 8012254:	4618      	mov	r0, r3
 8012256:	3714      	adds	r7, #20
 8012258:	46bd      	mov	sp, r7
 801225a:	bd90      	pop	{r4, r7, pc}
 801225c:	0801a7dc 	.word	0x0801a7dc
 8012260:	0801ae7c 	.word	0x0801ae7c
 8012264:	0801a830 	.word	0x0801a830

08012268 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012268:	b580      	push	{r7, lr}
 801226a:	b082      	sub	sp, #8
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d106      	bne.n	8012284 <tcp_rexmit_fast+0x1c>
 8012276:	4b2a      	ldr	r3, [pc, #168]	; (8012320 <tcp_rexmit_fast+0xb8>)
 8012278:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801227c:	4929      	ldr	r1, [pc, #164]	; (8012324 <tcp_rexmit_fast+0xbc>)
 801227e:	482a      	ldr	r0, [pc, #168]	; (8012328 <tcp_rexmit_fast+0xc0>)
 8012280:	f005 fd94 	bl	8017dac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012288:	2b00      	cmp	r3, #0
 801228a:	d045      	beq.n	8012318 <tcp_rexmit_fast+0xb0>
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	8b5b      	ldrh	r3, [r3, #26]
 8012290:	f003 0304 	and.w	r3, r3, #4
 8012294:	2b00      	cmp	r3, #0
 8012296:	d13f      	bne.n	8012318 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f7ff ff79 	bl	8012190 <tcp_rexmit>
 801229e:	4603      	mov	r3, r0
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d139      	bne.n	8012318 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122b0:	4293      	cmp	r3, r2
 80122b2:	bf28      	it	cs
 80122b4:	4613      	movcs	r3, r2
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	da00      	bge.n	80122be <tcp_rexmit_fast+0x56>
 80122bc:	3301      	adds	r3, #1
 80122be:	105b      	asrs	r3, r3, #1
 80122c0:	b29a      	uxth	r2, r3
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80122ce:	461a      	mov	r2, r3
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122d4:	005b      	lsls	r3, r3, #1
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d206      	bcs.n	80122e8 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122de:	005b      	lsls	r3, r3, #1
 80122e0:	b29a      	uxth	r2, r3
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80122f2:	4619      	mov	r1, r3
 80122f4:	0049      	lsls	r1, r1, #1
 80122f6:	440b      	add	r3, r1
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	4413      	add	r3, r2
 80122fc:	b29a      	uxth	r2, r3
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	8b5b      	ldrh	r3, [r3, #26]
 8012308:	f043 0304 	orr.w	r3, r3, #4
 801230c:	b29a      	uxth	r2, r3
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	2200      	movs	r2, #0
 8012316:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012318:	bf00      	nop
 801231a:	3708      	adds	r7, #8
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}
 8012320:	0801a7dc 	.word	0x0801a7dc
 8012324:	0801ae94 	.word	0x0801ae94
 8012328:	0801a830 	.word	0x0801a830

0801232c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	607b      	str	r3, [r7, #4]
 8012336:	460b      	mov	r3, r1
 8012338:	817b      	strh	r3, [r7, #10]
 801233a:	4613      	mov	r3, r2
 801233c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801233e:	897a      	ldrh	r2, [r7, #10]
 8012340:	893b      	ldrh	r3, [r7, #8]
 8012342:	4413      	add	r3, r2
 8012344:	b29b      	uxth	r3, r3
 8012346:	3314      	adds	r3, #20
 8012348:	b29b      	uxth	r3, r3
 801234a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801234e:	4619      	mov	r1, r3
 8012350:	2022      	movs	r0, #34	; 0x22
 8012352:	f7f9 fcfd 	bl	800bd50 <pbuf_alloc>
 8012356:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012358:	697b      	ldr	r3, [r7, #20]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d04d      	beq.n	80123fa <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801235e:	897b      	ldrh	r3, [r7, #10]
 8012360:	3313      	adds	r3, #19
 8012362:	697a      	ldr	r2, [r7, #20]
 8012364:	8952      	ldrh	r2, [r2, #10]
 8012366:	4293      	cmp	r3, r2
 8012368:	db06      	blt.n	8012378 <tcp_output_alloc_header_common+0x4c>
 801236a:	4b26      	ldr	r3, [pc, #152]	; (8012404 <tcp_output_alloc_header_common+0xd8>)
 801236c:	f240 7223 	movw	r2, #1827	; 0x723
 8012370:	4925      	ldr	r1, [pc, #148]	; (8012408 <tcp_output_alloc_header_common+0xdc>)
 8012372:	4826      	ldr	r0, [pc, #152]	; (801240c <tcp_output_alloc_header_common+0xe0>)
 8012374:	f005 fd1a 	bl	8017dac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	685b      	ldr	r3, [r3, #4]
 801237c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801237e:	8c3b      	ldrh	r3, [r7, #32]
 8012380:	4618      	mov	r0, r3
 8012382:	f7f8 fb95 	bl	800aab0 <lwip_htons>
 8012386:	4603      	mov	r3, r0
 8012388:	461a      	mov	r2, r3
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801238e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012390:	4618      	mov	r0, r3
 8012392:	f7f8 fb8d 	bl	800aab0 <lwip_htons>
 8012396:	4603      	mov	r3, r0
 8012398:	461a      	mov	r2, r3
 801239a:	693b      	ldr	r3, [r7, #16]
 801239c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f7f8 fb98 	bl	800aada <lwip_htonl>
 80123aa:	4602      	mov	r2, r0
 80123ac:	693b      	ldr	r3, [r7, #16]
 80123ae:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80123b0:	897b      	ldrh	r3, [r7, #10]
 80123b2:	089b      	lsrs	r3, r3, #2
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	3305      	adds	r3, #5
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	031b      	lsls	r3, r3, #12
 80123bc:	b29a      	uxth	r2, r3
 80123be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80123c2:	b29b      	uxth	r3, r3
 80123c4:	4313      	orrs	r3, r2
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7f8 fb71 	bl	800aab0 <lwip_htons>
 80123ce:	4603      	mov	r3, r0
 80123d0:	461a      	mov	r2, r3
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80123d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80123d8:	4618      	mov	r0, r3
 80123da:	f7f8 fb69 	bl	800aab0 <lwip_htons>
 80123de:	4603      	mov	r3, r0
 80123e0:	461a      	mov	r2, r3
 80123e2:	693b      	ldr	r3, [r7, #16]
 80123e4:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80123e6:	693b      	ldr	r3, [r7, #16]
 80123e8:	2200      	movs	r2, #0
 80123ea:	741a      	strb	r2, [r3, #16]
 80123ec:	2200      	movs	r2, #0
 80123ee:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80123f0:	693b      	ldr	r3, [r7, #16]
 80123f2:	2200      	movs	r2, #0
 80123f4:	749a      	strb	r2, [r3, #18]
 80123f6:	2200      	movs	r2, #0
 80123f8:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80123fa:	697b      	ldr	r3, [r7, #20]
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3718      	adds	r7, #24
 8012400:	46bd      	mov	sp, r7
 8012402:	bd80      	pop	{r7, pc}
 8012404:	0801a7dc 	.word	0x0801a7dc
 8012408:	0801aeb4 	.word	0x0801aeb4
 801240c:	0801a830 	.word	0x0801a830

08012410 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012410:	b5b0      	push	{r4, r5, r7, lr}
 8012412:	b08a      	sub	sp, #40	; 0x28
 8012414:	af04      	add	r7, sp, #16
 8012416:	60f8      	str	r0, [r7, #12]
 8012418:	607b      	str	r3, [r7, #4]
 801241a:	460b      	mov	r3, r1
 801241c:	817b      	strh	r3, [r7, #10]
 801241e:	4613      	mov	r3, r2
 8012420:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d106      	bne.n	8012436 <tcp_output_alloc_header+0x26>
 8012428:	4b15      	ldr	r3, [pc, #84]	; (8012480 <tcp_output_alloc_header+0x70>)
 801242a:	f240 7242 	movw	r2, #1858	; 0x742
 801242e:	4915      	ldr	r1, [pc, #84]	; (8012484 <tcp_output_alloc_header+0x74>)
 8012430:	4815      	ldr	r0, [pc, #84]	; (8012488 <tcp_output_alloc_header+0x78>)
 8012432:	f005 fcbb 	bl	8017dac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	8adb      	ldrh	r3, [r3, #22]
 801243e:	68fa      	ldr	r2, [r7, #12]
 8012440:	8b12      	ldrh	r2, [r2, #24]
 8012442:	68f9      	ldr	r1, [r7, #12]
 8012444:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012446:	893d      	ldrh	r5, [r7, #8]
 8012448:	897c      	ldrh	r4, [r7, #10]
 801244a:	9103      	str	r1, [sp, #12]
 801244c:	2110      	movs	r1, #16
 801244e:	9102      	str	r1, [sp, #8]
 8012450:	9201      	str	r2, [sp, #4]
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	462a      	mov	r2, r5
 8012458:	4621      	mov	r1, r4
 801245a:	f7ff ff67 	bl	801232c <tcp_output_alloc_header_common>
 801245e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012460:	697b      	ldr	r3, [r7, #20]
 8012462:	2b00      	cmp	r3, #0
 8012464:	d006      	beq.n	8012474 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246a:	68fa      	ldr	r2, [r7, #12]
 801246c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801246e:	441a      	add	r2, r3
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012474:	697b      	ldr	r3, [r7, #20]
}
 8012476:	4618      	mov	r0, r3
 8012478:	3718      	adds	r7, #24
 801247a:	46bd      	mov	sp, r7
 801247c:	bdb0      	pop	{r4, r5, r7, pc}
 801247e:	bf00      	nop
 8012480:	0801a7dc 	.word	0x0801a7dc
 8012484:	0801aee4 	.word	0x0801aee4
 8012488:	0801a830 	.word	0x0801a830

0801248c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b088      	sub	sp, #32
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	4611      	mov	r1, r2
 8012498:	461a      	mov	r2, r3
 801249a:	460b      	mov	r3, r1
 801249c:	71fb      	strb	r3, [r7, #7]
 801249e:	4613      	mov	r3, r2
 80124a0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80124a2:	2300      	movs	r3, #0
 80124a4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d106      	bne.n	80124ba <tcp_output_fill_options+0x2e>
 80124ac:	4b12      	ldr	r3, [pc, #72]	; (80124f8 <tcp_output_fill_options+0x6c>)
 80124ae:	f240 7256 	movw	r2, #1878	; 0x756
 80124b2:	4912      	ldr	r1, [pc, #72]	; (80124fc <tcp_output_fill_options+0x70>)
 80124b4:	4812      	ldr	r0, [pc, #72]	; (8012500 <tcp_output_fill_options+0x74>)
 80124b6:	f005 fc79 	bl	8017dac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80124c0:	69bb      	ldr	r3, [r7, #24]
 80124c2:	3314      	adds	r3, #20
 80124c4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80124c6:	8bfb      	ldrh	r3, [r7, #30]
 80124c8:	009b      	lsls	r3, r3, #2
 80124ca:	461a      	mov	r2, r3
 80124cc:	79fb      	ldrb	r3, [r7, #7]
 80124ce:	009b      	lsls	r3, r3, #2
 80124d0:	f003 0304 	and.w	r3, r3, #4
 80124d4:	4413      	add	r3, r2
 80124d6:	3314      	adds	r3, #20
 80124d8:	69ba      	ldr	r2, [r7, #24]
 80124da:	4413      	add	r3, r2
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	429a      	cmp	r2, r3
 80124e0:	d006      	beq.n	80124f0 <tcp_output_fill_options+0x64>
 80124e2:	4b05      	ldr	r3, [pc, #20]	; (80124f8 <tcp_output_fill_options+0x6c>)
 80124e4:	f240 7275 	movw	r2, #1909	; 0x775
 80124e8:	4906      	ldr	r1, [pc, #24]	; (8012504 <tcp_output_fill_options+0x78>)
 80124ea:	4805      	ldr	r0, [pc, #20]	; (8012500 <tcp_output_fill_options+0x74>)
 80124ec:	f005 fc5e 	bl	8017dac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80124f0:	bf00      	nop
 80124f2:	3720      	adds	r7, #32
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	0801a7dc 	.word	0x0801a7dc
 80124fc:	0801af0c 	.word	0x0801af0c
 8012500:	0801a830 	.word	0x0801a830
 8012504:	0801ae04 	.word	0x0801ae04

08012508 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b08a      	sub	sp, #40	; 0x28
 801250c:	af04      	add	r7, sp, #16
 801250e:	60f8      	str	r0, [r7, #12]
 8012510:	60b9      	str	r1, [r7, #8]
 8012512:	607a      	str	r2, [r7, #4]
 8012514:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012516:	68bb      	ldr	r3, [r7, #8]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d106      	bne.n	801252a <tcp_output_control_segment+0x22>
 801251c:	4b1c      	ldr	r3, [pc, #112]	; (8012590 <tcp_output_control_segment+0x88>)
 801251e:	f240 7287 	movw	r2, #1927	; 0x787
 8012522:	491c      	ldr	r1, [pc, #112]	; (8012594 <tcp_output_control_segment+0x8c>)
 8012524:	481c      	ldr	r0, [pc, #112]	; (8012598 <tcp_output_control_segment+0x90>)
 8012526:	f005 fc41 	bl	8017dac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801252a:	683a      	ldr	r2, [r7, #0]
 801252c:	6879      	ldr	r1, [r7, #4]
 801252e:	68f8      	ldr	r0, [r7, #12]
 8012530:	f7fe fae8 	bl	8010b04 <tcp_route>
 8012534:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d102      	bne.n	8012542 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801253c:	23fc      	movs	r3, #252	; 0xfc
 801253e:	75fb      	strb	r3, [r7, #23]
 8012540:	e01c      	b.n	801257c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d006      	beq.n	8012556 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	7adb      	ldrb	r3, [r3, #11]
 801254c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	7a9b      	ldrb	r3, [r3, #10]
 8012552:	757b      	strb	r3, [r7, #21]
 8012554:	e003      	b.n	801255e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012556:	23ff      	movs	r3, #255	; 0xff
 8012558:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801255a:	2300      	movs	r3, #0
 801255c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801255e:	7dba      	ldrb	r2, [r7, #22]
 8012560:	693b      	ldr	r3, [r7, #16]
 8012562:	9302      	str	r3, [sp, #8]
 8012564:	2306      	movs	r3, #6
 8012566:	9301      	str	r3, [sp, #4]
 8012568:	7d7b      	ldrb	r3, [r7, #21]
 801256a:	9300      	str	r3, [sp, #0]
 801256c:	4613      	mov	r3, r2
 801256e:	683a      	ldr	r2, [r7, #0]
 8012570:	6879      	ldr	r1, [r7, #4]
 8012572:	68b8      	ldr	r0, [r7, #8]
 8012574:	f004 f958 	bl	8016828 <ip4_output_if>
 8012578:	4603      	mov	r3, r0
 801257a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801257c:	68b8      	ldr	r0, [r7, #8]
 801257e:	f7f9 fecb 	bl	800c318 <pbuf_free>
  return err;
 8012582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012586:	4618      	mov	r0, r3
 8012588:	3718      	adds	r7, #24
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	0801a7dc 	.word	0x0801a7dc
 8012594:	0801af34 	.word	0x0801af34
 8012598:	0801a830 	.word	0x0801a830

0801259c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801259c:	b590      	push	{r4, r7, lr}
 801259e:	b08b      	sub	sp, #44	; 0x2c
 80125a0:	af04      	add	r7, sp, #16
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
 80125a8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <tcp_rst+0x22>
 80125b0:	4b1f      	ldr	r3, [pc, #124]	; (8012630 <tcp_rst+0x94>)
 80125b2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80125b6:	491f      	ldr	r1, [pc, #124]	; (8012634 <tcp_rst+0x98>)
 80125b8:	481f      	ldr	r0, [pc, #124]	; (8012638 <tcp_rst+0x9c>)
 80125ba:	f005 fbf7 	bl	8017dac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80125be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d106      	bne.n	80125d2 <tcp_rst+0x36>
 80125c4:	4b1a      	ldr	r3, [pc, #104]	; (8012630 <tcp_rst+0x94>)
 80125c6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80125ca:	491c      	ldr	r1, [pc, #112]	; (801263c <tcp_rst+0xa0>)
 80125cc:	481a      	ldr	r0, [pc, #104]	; (8012638 <tcp_rst+0x9c>)
 80125ce:	f005 fbed 	bl	8017dac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80125d2:	2300      	movs	r3, #0
 80125d4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80125d6:	f246 0308 	movw	r3, #24584	; 0x6008
 80125da:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80125dc:	7dfb      	ldrb	r3, [r7, #23]
 80125de:	b29c      	uxth	r4, r3
 80125e0:	68b8      	ldr	r0, [r7, #8]
 80125e2:	f7f8 fa7a 	bl	800aada <lwip_htonl>
 80125e6:	4602      	mov	r2, r0
 80125e8:	8abb      	ldrh	r3, [r7, #20]
 80125ea:	9303      	str	r3, [sp, #12]
 80125ec:	2314      	movs	r3, #20
 80125ee:	9302      	str	r3, [sp, #8]
 80125f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80125f2:	9301      	str	r3, [sp, #4]
 80125f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80125f6:	9300      	str	r3, [sp, #0]
 80125f8:	4613      	mov	r3, r2
 80125fa:	2200      	movs	r2, #0
 80125fc:	4621      	mov	r1, r4
 80125fe:	6878      	ldr	r0, [r7, #4]
 8012600:	f7ff fe94 	bl	801232c <tcp_output_alloc_header_common>
 8012604:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00c      	beq.n	8012626 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801260c:	7dfb      	ldrb	r3, [r7, #23]
 801260e:	2200      	movs	r2, #0
 8012610:	6939      	ldr	r1, [r7, #16]
 8012612:	68f8      	ldr	r0, [r7, #12]
 8012614:	f7ff ff3a 	bl	801248c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801261a:	683a      	ldr	r2, [r7, #0]
 801261c:	6939      	ldr	r1, [r7, #16]
 801261e:	68f8      	ldr	r0, [r7, #12]
 8012620:	f7ff ff72 	bl	8012508 <tcp_output_control_segment>
 8012624:	e000      	b.n	8012628 <tcp_rst+0x8c>
    return;
 8012626:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012628:	371c      	adds	r7, #28
 801262a:	46bd      	mov	sp, r7
 801262c:	bd90      	pop	{r4, r7, pc}
 801262e:	bf00      	nop
 8012630:	0801a7dc 	.word	0x0801a7dc
 8012634:	0801af60 	.word	0x0801af60
 8012638:	0801a830 	.word	0x0801a830
 801263c:	0801af7c 	.word	0x0801af7c

08012640 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012640:	b590      	push	{r4, r7, lr}
 8012642:	b087      	sub	sp, #28
 8012644:	af00      	add	r7, sp, #0
 8012646:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012648:	2300      	movs	r3, #0
 801264a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801264c:	2300      	movs	r3, #0
 801264e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d106      	bne.n	8012664 <tcp_send_empty_ack+0x24>
 8012656:	4b28      	ldr	r3, [pc, #160]	; (80126f8 <tcp_send_empty_ack+0xb8>)
 8012658:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801265c:	4927      	ldr	r1, [pc, #156]	; (80126fc <tcp_send_empty_ack+0xbc>)
 801265e:	4828      	ldr	r0, [pc, #160]	; (8012700 <tcp_send_empty_ack+0xc0>)
 8012660:	f005 fba4 	bl	8017dac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012664:	7dfb      	ldrb	r3, [r7, #23]
 8012666:	009b      	lsls	r3, r3, #2
 8012668:	b2db      	uxtb	r3, r3
 801266a:	f003 0304 	and.w	r3, r3, #4
 801266e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012670:	7d7b      	ldrb	r3, [r7, #21]
 8012672:	b29c      	uxth	r4, r3
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012678:	4618      	mov	r0, r3
 801267a:	f7f8 fa2e 	bl	800aada <lwip_htonl>
 801267e:	4603      	mov	r3, r0
 8012680:	2200      	movs	r2, #0
 8012682:	4621      	mov	r1, r4
 8012684:	6878      	ldr	r0, [r7, #4]
 8012686:	f7ff fec3 	bl	8012410 <tcp_output_alloc_header>
 801268a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801268c:	693b      	ldr	r3, [r7, #16]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d109      	bne.n	80126a6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	8b5b      	ldrh	r3, [r3, #26]
 8012696:	f043 0303 	orr.w	r3, r3, #3
 801269a:	b29a      	uxth	r2, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80126a0:	f06f 0301 	mvn.w	r3, #1
 80126a4:	e023      	b.n	80126ee <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80126a6:	7dbb      	ldrb	r3, [r7, #22]
 80126a8:	7dfa      	ldrb	r2, [r7, #23]
 80126aa:	6939      	ldr	r1, [r7, #16]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff feed 	bl	801248c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80126b2:	687a      	ldr	r2, [r7, #4]
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	3304      	adds	r3, #4
 80126b8:	6939      	ldr	r1, [r7, #16]
 80126ba:	6878      	ldr	r0, [r7, #4]
 80126bc:	f7ff ff24 	bl	8012508 <tcp_output_control_segment>
 80126c0:	4603      	mov	r3, r0
 80126c2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80126c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d007      	beq.n	80126dc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	8b5b      	ldrh	r3, [r3, #26]
 80126d0:	f043 0303 	orr.w	r3, r3, #3
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	835a      	strh	r2, [r3, #26]
 80126da:	e006      	b.n	80126ea <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	8b5b      	ldrh	r3, [r3, #26]
 80126e0:	f023 0303 	bic.w	r3, r3, #3
 80126e4:	b29a      	uxth	r2, r3
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80126ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80126ee:	4618      	mov	r0, r3
 80126f0:	371c      	adds	r7, #28
 80126f2:	46bd      	mov	sp, r7
 80126f4:	bd90      	pop	{r4, r7, pc}
 80126f6:	bf00      	nop
 80126f8:	0801a7dc 	.word	0x0801a7dc
 80126fc:	0801af98 	.word	0x0801af98
 8012700:	0801a830 	.word	0x0801a830

08012704 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012704:	b590      	push	{r4, r7, lr}
 8012706:	b087      	sub	sp, #28
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801270c:	2300      	movs	r3, #0
 801270e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d106      	bne.n	8012724 <tcp_keepalive+0x20>
 8012716:	4b18      	ldr	r3, [pc, #96]	; (8012778 <tcp_keepalive+0x74>)
 8012718:	f640 0224 	movw	r2, #2084	; 0x824
 801271c:	4917      	ldr	r1, [pc, #92]	; (801277c <tcp_keepalive+0x78>)
 801271e:	4818      	ldr	r0, [pc, #96]	; (8012780 <tcp_keepalive+0x7c>)
 8012720:	f005 fb44 	bl	8017dac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012724:	7dfb      	ldrb	r3, [r7, #23]
 8012726:	b29c      	uxth	r4, r3
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801272c:	3b01      	subs	r3, #1
 801272e:	4618      	mov	r0, r3
 8012730:	f7f8 f9d3 	bl	800aada <lwip_htonl>
 8012734:	4603      	mov	r3, r0
 8012736:	2200      	movs	r2, #0
 8012738:	4621      	mov	r1, r4
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f7ff fe68 	bl	8012410 <tcp_output_alloc_header>
 8012740:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012742:	693b      	ldr	r3, [r7, #16]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d102      	bne.n	801274e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012748:	f04f 33ff 	mov.w	r3, #4294967295
 801274c:	e010      	b.n	8012770 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801274e:	7dfb      	ldrb	r3, [r7, #23]
 8012750:	2200      	movs	r2, #0
 8012752:	6939      	ldr	r1, [r7, #16]
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f7ff fe99 	bl	801248c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801275a:	687a      	ldr	r2, [r7, #4]
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	3304      	adds	r3, #4
 8012760:	6939      	ldr	r1, [r7, #16]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f7ff fed0 	bl	8012508 <tcp_output_control_segment>
 8012768:	4603      	mov	r3, r0
 801276a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801276c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012770:	4618      	mov	r0, r3
 8012772:	371c      	adds	r7, #28
 8012774:	46bd      	mov	sp, r7
 8012776:	bd90      	pop	{r4, r7, pc}
 8012778:	0801a7dc 	.word	0x0801a7dc
 801277c:	0801afb8 	.word	0x0801afb8
 8012780:	0801a830 	.word	0x0801a830

08012784 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012784:	b590      	push	{r4, r7, lr}
 8012786:	b08b      	sub	sp, #44	; 0x2c
 8012788:	af00      	add	r7, sp, #0
 801278a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801278c:	2300      	movs	r3, #0
 801278e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d106      	bne.n	80127a6 <tcp_zero_window_probe+0x22>
 8012798:	4b4c      	ldr	r3, [pc, #304]	; (80128cc <tcp_zero_window_probe+0x148>)
 801279a:	f640 024f 	movw	r2, #2127	; 0x84f
 801279e:	494c      	ldr	r1, [pc, #304]	; (80128d0 <tcp_zero_window_probe+0x14c>)
 80127a0:	484c      	ldr	r0, [pc, #304]	; (80128d4 <tcp_zero_window_probe+0x150>)
 80127a2:	f005 fb03 	bl	8017dac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127aa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80127ac:	6a3b      	ldr	r3, [r7, #32]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d101      	bne.n	80127b6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80127b2:	2300      	movs	r3, #0
 80127b4:	e086      	b.n	80128c4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80127bc:	2bff      	cmp	r3, #255	; 0xff
 80127be:	d007      	beq.n	80127d0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80127c6:	3301      	adds	r3, #1
 80127c8:	b2da      	uxtb	r2, r3
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80127d0:	6a3b      	ldr	r3, [r7, #32]
 80127d2:	68db      	ldr	r3, [r3, #12]
 80127d4:	899b      	ldrh	r3, [r3, #12]
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	4618      	mov	r0, r3
 80127da:	f7f8 f969 	bl	800aab0 <lwip_htons>
 80127de:	4603      	mov	r3, r0
 80127e0:	b2db      	uxtb	r3, r3
 80127e2:	f003 0301 	and.w	r3, r3, #1
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d005      	beq.n	80127f6 <tcp_zero_window_probe+0x72>
 80127ea:	6a3b      	ldr	r3, [r7, #32]
 80127ec:	891b      	ldrh	r3, [r3, #8]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d101      	bne.n	80127f6 <tcp_zero_window_probe+0x72>
 80127f2:	2301      	movs	r3, #1
 80127f4:	e000      	b.n	80127f8 <tcp_zero_window_probe+0x74>
 80127f6:	2300      	movs	r3, #0
 80127f8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80127fa:	7ffb      	ldrb	r3, [r7, #31]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	bf0c      	ite	eq
 8012800:	2301      	moveq	r3, #1
 8012802:	2300      	movne	r3, #0
 8012804:	b2db      	uxtb	r3, r3
 8012806:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801280c:	b299      	uxth	r1, r3
 801280e:	6a3b      	ldr	r3, [r7, #32]
 8012810:	68db      	ldr	r3, [r3, #12]
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	8bba      	ldrh	r2, [r7, #28]
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f7ff fdfa 	bl	8012410 <tcp_output_alloc_header>
 801281c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d102      	bne.n	801282a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012824:	f04f 33ff 	mov.w	r3, #4294967295
 8012828:	e04c      	b.n	80128c4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801282a:	69bb      	ldr	r3, [r7, #24]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012830:	7ffb      	ldrb	r3, [r7, #31]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d011      	beq.n	801285a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012836:	697b      	ldr	r3, [r7, #20]
 8012838:	899b      	ldrh	r3, [r3, #12]
 801283a:	b29b      	uxth	r3, r3
 801283c:	b21b      	sxth	r3, r3
 801283e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012842:	b21c      	sxth	r4, r3
 8012844:	2011      	movs	r0, #17
 8012846:	f7f8 f933 	bl	800aab0 <lwip_htons>
 801284a:	4603      	mov	r3, r0
 801284c:	b21b      	sxth	r3, r3
 801284e:	4323      	orrs	r3, r4
 8012850:	b21b      	sxth	r3, r3
 8012852:	b29a      	uxth	r2, r3
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	819a      	strh	r2, [r3, #12]
 8012858:	e010      	b.n	801287c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801285a:	69bb      	ldr	r3, [r7, #24]
 801285c:	685b      	ldr	r3, [r3, #4]
 801285e:	3314      	adds	r3, #20
 8012860:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012862:	6a3b      	ldr	r3, [r7, #32]
 8012864:	6858      	ldr	r0, [r3, #4]
 8012866:	6a3b      	ldr	r3, [r7, #32]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	891a      	ldrh	r2, [r3, #8]
 801286c:	6a3b      	ldr	r3, [r7, #32]
 801286e:	891b      	ldrh	r3, [r3, #8]
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	b29b      	uxth	r3, r3
 8012874:	2201      	movs	r2, #1
 8012876:	6939      	ldr	r1, [r7, #16]
 8012878:	f7f9 ff54 	bl	800c724 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801287c:	6a3b      	ldr	r3, [r7, #32]
 801287e:	68db      	ldr	r3, [r3, #12]
 8012880:	685b      	ldr	r3, [r3, #4]
 8012882:	4618      	mov	r0, r3
 8012884:	f7f8 f929 	bl	800aada <lwip_htonl>
 8012888:	4603      	mov	r3, r0
 801288a:	3301      	adds	r3, #1
 801288c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	1ad3      	subs	r3, r2, r3
 8012896:	2b00      	cmp	r3, #0
 8012898:	da02      	bge.n	80128a0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80128a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128a4:	2200      	movs	r2, #0
 80128a6:	69b9      	ldr	r1, [r7, #24]
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f7ff fdef 	bl	801248c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	3304      	adds	r3, #4
 80128b4:	69b9      	ldr	r1, [r7, #24]
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7ff fe26 	bl	8012508 <tcp_output_control_segment>
 80128bc:	4603      	mov	r3, r0
 80128be:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80128c0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80128c4:	4618      	mov	r0, r3
 80128c6:	372c      	adds	r7, #44	; 0x2c
 80128c8:	46bd      	mov	sp, r7
 80128ca:	bd90      	pop	{r4, r7, pc}
 80128cc:	0801a7dc 	.word	0x0801a7dc
 80128d0:	0801afd4 	.word	0x0801afd4
 80128d4:	0801a830 	.word	0x0801a830

080128d8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80128d8:	b580      	push	{r7, lr}
 80128da:	b082      	sub	sp, #8
 80128dc:	af00      	add	r7, sp, #0
 80128de:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80128e0:	f7fa f80e 	bl	800c900 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80128e4:	4b0a      	ldr	r3, [pc, #40]	; (8012910 <tcpip_tcp_timer+0x38>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d103      	bne.n	80128f4 <tcpip_tcp_timer+0x1c>
 80128ec:	4b09      	ldr	r3, [pc, #36]	; (8012914 <tcpip_tcp_timer+0x3c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d005      	beq.n	8012900 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80128f4:	2200      	movs	r2, #0
 80128f6:	4908      	ldr	r1, [pc, #32]	; (8012918 <tcpip_tcp_timer+0x40>)
 80128f8:	20fa      	movs	r0, #250	; 0xfa
 80128fa:	f000 f8f3 	bl	8012ae4 <sys_timeout>
 80128fe:	e003      	b.n	8012908 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012900:	4b06      	ldr	r3, [pc, #24]	; (801291c <tcpip_tcp_timer+0x44>)
 8012902:	2200      	movs	r2, #0
 8012904:	601a      	str	r2, [r3, #0]
  }
}
 8012906:	bf00      	nop
 8012908:	bf00      	nop
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}
 8012910:	2000ce44 	.word	0x2000ce44
 8012914:	2000ce48 	.word	0x2000ce48
 8012918:	080128d9 	.word	0x080128d9
 801291c:	2000ce90 	.word	0x2000ce90

08012920 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012924:	4b0a      	ldr	r3, [pc, #40]	; (8012950 <tcp_timer_needed+0x30>)
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d10f      	bne.n	801294c <tcp_timer_needed+0x2c>
 801292c:	4b09      	ldr	r3, [pc, #36]	; (8012954 <tcp_timer_needed+0x34>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d103      	bne.n	801293c <tcp_timer_needed+0x1c>
 8012934:	4b08      	ldr	r3, [pc, #32]	; (8012958 <tcp_timer_needed+0x38>)
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d007      	beq.n	801294c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801293c:	4b04      	ldr	r3, [pc, #16]	; (8012950 <tcp_timer_needed+0x30>)
 801293e:	2201      	movs	r2, #1
 8012940:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012942:	2200      	movs	r2, #0
 8012944:	4905      	ldr	r1, [pc, #20]	; (801295c <tcp_timer_needed+0x3c>)
 8012946:	20fa      	movs	r0, #250	; 0xfa
 8012948:	f000 f8cc 	bl	8012ae4 <sys_timeout>
  }
}
 801294c:	bf00      	nop
 801294e:	bd80      	pop	{r7, pc}
 8012950:	2000ce90 	.word	0x2000ce90
 8012954:	2000ce44 	.word	0x2000ce44
 8012958:	2000ce48 	.word	0x2000ce48
 801295c:	080128d9 	.word	0x080128d9

08012960 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801296c:	200a      	movs	r0, #10
 801296e:	f7f8 fdad 	bl	800b4cc <memp_malloc>
 8012972:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d109      	bne.n	801298e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801297a:	693b      	ldr	r3, [r7, #16]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d151      	bne.n	8012a24 <sys_timeout_abs+0xc4>
 8012980:	4b2a      	ldr	r3, [pc, #168]	; (8012a2c <sys_timeout_abs+0xcc>)
 8012982:	22be      	movs	r2, #190	; 0xbe
 8012984:	492a      	ldr	r1, [pc, #168]	; (8012a30 <sys_timeout_abs+0xd0>)
 8012986:	482b      	ldr	r0, [pc, #172]	; (8012a34 <sys_timeout_abs+0xd4>)
 8012988:	f005 fa10 	bl	8017dac <iprintf>
    return;
 801298c:	e04a      	b.n	8012a24 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801298e:	693b      	ldr	r3, [r7, #16]
 8012990:	2200      	movs	r2, #0
 8012992:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	68ba      	ldr	r2, [r7, #8]
 8012998:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	68fa      	ldr	r2, [r7, #12]
 80129a4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80129a6:	4b24      	ldr	r3, [pc, #144]	; (8012a38 <sys_timeout_abs+0xd8>)
 80129a8:	681b      	ldr	r3, [r3, #0]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d103      	bne.n	80129b6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80129ae:	4a22      	ldr	r2, [pc, #136]	; (8012a38 <sys_timeout_abs+0xd8>)
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	6013      	str	r3, [r2, #0]
    return;
 80129b4:	e037      	b.n	8012a26 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	685a      	ldr	r2, [r3, #4]
 80129ba:	4b1f      	ldr	r3, [pc, #124]	; (8012a38 <sys_timeout_abs+0xd8>)
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	1ad3      	subs	r3, r2, r3
 80129c2:	0fdb      	lsrs	r3, r3, #31
 80129c4:	f003 0301 	and.w	r3, r3, #1
 80129c8:	b2db      	uxtb	r3, r3
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d007      	beq.n	80129de <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80129ce:	4b1a      	ldr	r3, [pc, #104]	; (8012a38 <sys_timeout_abs+0xd8>)
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	693b      	ldr	r3, [r7, #16]
 80129d4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80129d6:	4a18      	ldr	r2, [pc, #96]	; (8012a38 <sys_timeout_abs+0xd8>)
 80129d8:	693b      	ldr	r3, [r7, #16]
 80129da:	6013      	str	r3, [r2, #0]
 80129dc:	e023      	b.n	8012a26 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80129de:	4b16      	ldr	r3, [pc, #88]	; (8012a38 <sys_timeout_abs+0xd8>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	617b      	str	r3, [r7, #20]
 80129e4:	e01a      	b.n	8012a1c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80129e6:	697b      	ldr	r3, [r7, #20]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00b      	beq.n	8012a06 <sys_timeout_abs+0xa6>
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	685a      	ldr	r2, [r3, #4]
 80129f2:	697b      	ldr	r3, [r7, #20]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	685b      	ldr	r3, [r3, #4]
 80129f8:	1ad3      	subs	r3, r2, r3
 80129fa:	0fdb      	lsrs	r3, r3, #31
 80129fc:	f003 0301 	and.w	r3, r3, #1
 8012a00:	b2db      	uxtb	r3, r3
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d007      	beq.n	8012a16 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012a06:	697b      	ldr	r3, [r7, #20]
 8012a08:	681a      	ldr	r2, [r3, #0]
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	693a      	ldr	r2, [r7, #16]
 8012a12:	601a      	str	r2, [r3, #0]
        break;
 8012a14:	e007      	b.n	8012a26 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012a16:	697b      	ldr	r3, [r7, #20]
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	617b      	str	r3, [r7, #20]
 8012a1c:	697b      	ldr	r3, [r7, #20]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d1e1      	bne.n	80129e6 <sys_timeout_abs+0x86>
 8012a22:	e000      	b.n	8012a26 <sys_timeout_abs+0xc6>
    return;
 8012a24:	bf00      	nop
      }
    }
  }
}
 8012a26:	3718      	adds	r7, #24
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	0801aff8 	.word	0x0801aff8
 8012a30:	0801b02c 	.word	0x0801b02c
 8012a34:	0801b06c 	.word	0x0801b06c
 8012a38:	2000ce88 	.word	0x2000ce88

08012a3c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b086      	sub	sp, #24
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012a48:	697b      	ldr	r3, [r7, #20]
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	4798      	blx	r3

  now = sys_now();
 8012a4e:	f7f3 fa45 	bl	8005edc <sys_now>
 8012a52:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	681a      	ldr	r2, [r3, #0]
 8012a58:	4b0f      	ldr	r3, [pc, #60]	; (8012a98 <lwip_cyclic_timer+0x5c>)
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	4413      	add	r3, r2
 8012a5e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012a60:	68fa      	ldr	r2, [r7, #12]
 8012a62:	693b      	ldr	r3, [r7, #16]
 8012a64:	1ad3      	subs	r3, r2, r3
 8012a66:	0fdb      	lsrs	r3, r3, #31
 8012a68:	f003 0301 	and.w	r3, r3, #1
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d009      	beq.n	8012a86 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	693b      	ldr	r3, [r7, #16]
 8012a78:	4413      	add	r3, r2
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	4907      	ldr	r1, [pc, #28]	; (8012a9c <lwip_cyclic_timer+0x60>)
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f7ff ff6e 	bl	8012960 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012a84:	e004      	b.n	8012a90 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	4904      	ldr	r1, [pc, #16]	; (8012a9c <lwip_cyclic_timer+0x60>)
 8012a8a:	68f8      	ldr	r0, [r7, #12]
 8012a8c:	f7ff ff68 	bl	8012960 <sys_timeout_abs>
}
 8012a90:	bf00      	nop
 8012a92:	3718      	adds	r7, #24
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	2000ce8c 	.word	0x2000ce8c
 8012a9c:	08012a3d 	.word	0x08012a3d

08012aa0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	607b      	str	r3, [r7, #4]
 8012aaa:	e00e      	b.n	8012aca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012aac:	4a0b      	ldr	r2, [pc, #44]	; (8012adc <sys_timeouts_init+0x3c>)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	00db      	lsls	r3, r3, #3
 8012ab8:	4a08      	ldr	r2, [pc, #32]	; (8012adc <sys_timeouts_init+0x3c>)
 8012aba:	4413      	add	r3, r2
 8012abc:	461a      	mov	r2, r3
 8012abe:	4908      	ldr	r1, [pc, #32]	; (8012ae0 <sys_timeouts_init+0x40>)
 8012ac0:	f000 f810 	bl	8012ae4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	3301      	adds	r3, #1
 8012ac8:	607b      	str	r3, [r7, #4]
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	2b04      	cmp	r3, #4
 8012ace:	d9ed      	bls.n	8012aac <sys_timeouts_init+0xc>
  }
}
 8012ad0:	bf00      	nop
 8012ad2:	bf00      	nop
 8012ad4:	3708      	adds	r7, #8
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	0801e630 	.word	0x0801e630
 8012ae0:	08012a3d 	.word	0x08012a3d

08012ae4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b086      	sub	sp, #24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	60f8      	str	r0, [r7, #12]
 8012aec:	60b9      	str	r1, [r7, #8]
 8012aee:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012af6:	d306      	bcc.n	8012b06 <sys_timeout+0x22>
 8012af8:	4b0a      	ldr	r3, [pc, #40]	; (8012b24 <sys_timeout+0x40>)
 8012afa:	f240 1229 	movw	r2, #297	; 0x129
 8012afe:	490a      	ldr	r1, [pc, #40]	; (8012b28 <sys_timeout+0x44>)
 8012b00:	480a      	ldr	r0, [pc, #40]	; (8012b2c <sys_timeout+0x48>)
 8012b02:	f005 f953 	bl	8017dac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012b06:	f7f3 f9e9 	bl	8005edc <sys_now>
 8012b0a:	4602      	mov	r2, r0
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	4413      	add	r3, r2
 8012b10:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	68b9      	ldr	r1, [r7, #8]
 8012b16:	6978      	ldr	r0, [r7, #20]
 8012b18:	f7ff ff22 	bl	8012960 <sys_timeout_abs>
#endif
}
 8012b1c:	bf00      	nop
 8012b1e:	3718      	adds	r7, #24
 8012b20:	46bd      	mov	sp, r7
 8012b22:	bd80      	pop	{r7, pc}
 8012b24:	0801aff8 	.word	0x0801aff8
 8012b28:	0801b094 	.word	0x0801b094
 8012b2c:	0801b06c 	.word	0x0801b06c

08012b30 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012b30:	b580      	push	{r7, lr}
 8012b32:	b084      	sub	sp, #16
 8012b34:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012b36:	f7f3 f9d1 	bl	8005edc <sys_now>
 8012b3a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012b3c:	4b17      	ldr	r3, [pc, #92]	; (8012b9c <sys_check_timeouts+0x6c>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d022      	beq.n	8012b8e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	685b      	ldr	r3, [r3, #4]
 8012b4c:	68fa      	ldr	r2, [r7, #12]
 8012b4e:	1ad3      	subs	r3, r2, r3
 8012b50:	0fdb      	lsrs	r3, r3, #31
 8012b52:	f003 0301 	and.w	r3, r3, #1
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d11a      	bne.n	8012b92 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012b5c:	68bb      	ldr	r3, [r7, #8]
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	4a0e      	ldr	r2, [pc, #56]	; (8012b9c <sys_check_timeouts+0x6c>)
 8012b62:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	689b      	ldr	r3, [r3, #8]
 8012b68:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	68db      	ldr	r3, [r3, #12]
 8012b6e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	685b      	ldr	r3, [r3, #4]
 8012b74:	4a0a      	ldr	r2, [pc, #40]	; (8012ba0 <sys_check_timeouts+0x70>)
 8012b76:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012b78:	68b9      	ldr	r1, [r7, #8]
 8012b7a:	200a      	movs	r0, #10
 8012b7c:	f7f8 fd1c 	bl	800b5b8 <memp_free>
    if (handler != NULL) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d0da      	beq.n	8012b3c <sys_check_timeouts+0xc>
      handler(arg);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	6838      	ldr	r0, [r7, #0]
 8012b8a:	4798      	blx	r3
  do {
 8012b8c:	e7d6      	b.n	8012b3c <sys_check_timeouts+0xc>
      return;
 8012b8e:	bf00      	nop
 8012b90:	e000      	b.n	8012b94 <sys_check_timeouts+0x64>
      return;
 8012b92:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012b94:	3710      	adds	r7, #16
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	2000ce88 	.word	0x2000ce88
 8012ba0:	2000ce8c 	.word	0x2000ce8c

08012ba4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b082      	sub	sp, #8
 8012ba8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012baa:	4b16      	ldr	r3, [pc, #88]	; (8012c04 <sys_timeouts_sleeptime+0x60>)
 8012bac:	681b      	ldr	r3, [r3, #0]
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d102      	bne.n	8012bb8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8012bb6:	e020      	b.n	8012bfa <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012bb8:	f7f3 f990 	bl	8005edc <sys_now>
 8012bbc:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012bbe:	4b11      	ldr	r3, [pc, #68]	; (8012c04 <sys_timeouts_sleeptime+0x60>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	685a      	ldr	r2, [r3, #4]
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	0fdb      	lsrs	r3, r3, #31
 8012bca:	f003 0301 	and.w	r3, r3, #1
 8012bce:	b2db      	uxtb	r3, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d001      	beq.n	8012bd8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	e010      	b.n	8012bfa <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012bd8:	4b0a      	ldr	r3, [pc, #40]	; (8012c04 <sys_timeouts_sleeptime+0x60>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	685a      	ldr	r2, [r3, #4]
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	1ad3      	subs	r3, r2, r3
 8012be2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	da06      	bge.n	8012bf8 <sys_timeouts_sleeptime+0x54>
 8012bea:	4b07      	ldr	r3, [pc, #28]	; (8012c08 <sys_timeouts_sleeptime+0x64>)
 8012bec:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012bf0:	4906      	ldr	r1, [pc, #24]	; (8012c0c <sys_timeouts_sleeptime+0x68>)
 8012bf2:	4807      	ldr	r0, [pc, #28]	; (8012c10 <sys_timeouts_sleeptime+0x6c>)
 8012bf4:	f005 f8da 	bl	8017dac <iprintf>
    return ret;
 8012bf8:	683b      	ldr	r3, [r7, #0]
  }
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3708      	adds	r7, #8
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	2000ce88 	.word	0x2000ce88
 8012c08:	0801aff8 	.word	0x0801aff8
 8012c0c:	0801b0cc 	.word	0x0801b0cc
 8012c10:	0801b06c 	.word	0x0801b06c

08012c14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012c18:	f004 ff4e 	bl	8017ab8 <rand>
 8012c1c:	4603      	mov	r3, r0
 8012c1e:	b29b      	uxth	r3, r3
 8012c20:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012c24:	b29b      	uxth	r3, r3
 8012c26:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012c2a:	b29a      	uxth	r2, r3
 8012c2c:	4b01      	ldr	r3, [pc, #4]	; (8012c34 <udp_init+0x20>)
 8012c2e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012c30:	bf00      	nop
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	2000003c 	.word	0x2000003c

08012c38 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b083      	sub	sp, #12
 8012c3c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012c42:	4b17      	ldr	r3, [pc, #92]	; (8012ca0 <udp_new_port+0x68>)
 8012c44:	881b      	ldrh	r3, [r3, #0]
 8012c46:	1c5a      	adds	r2, r3, #1
 8012c48:	b291      	uxth	r1, r2
 8012c4a:	4a15      	ldr	r2, [pc, #84]	; (8012ca0 <udp_new_port+0x68>)
 8012c4c:	8011      	strh	r1, [r2, #0]
 8012c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c52:	4293      	cmp	r3, r2
 8012c54:	d103      	bne.n	8012c5e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012c56:	4b12      	ldr	r3, [pc, #72]	; (8012ca0 <udp_new_port+0x68>)
 8012c58:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012c5c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c5e:	4b11      	ldr	r3, [pc, #68]	; (8012ca4 <udp_new_port+0x6c>)
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	603b      	str	r3, [r7, #0]
 8012c64:	e011      	b.n	8012c8a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	8a5a      	ldrh	r2, [r3, #18]
 8012c6a:	4b0d      	ldr	r3, [pc, #52]	; (8012ca0 <udp_new_port+0x68>)
 8012c6c:	881b      	ldrh	r3, [r3, #0]
 8012c6e:	429a      	cmp	r2, r3
 8012c70:	d108      	bne.n	8012c84 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012c72:	88fb      	ldrh	r3, [r7, #6]
 8012c74:	3301      	adds	r3, #1
 8012c76:	80fb      	strh	r3, [r7, #6]
 8012c78:	88fb      	ldrh	r3, [r7, #6]
 8012c7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012c7e:	d3e0      	bcc.n	8012c42 <udp_new_port+0xa>
        return 0;
 8012c80:	2300      	movs	r3, #0
 8012c82:	e007      	b.n	8012c94 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	603b      	str	r3, [r7, #0]
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d1ea      	bne.n	8012c66 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012c90:	4b03      	ldr	r3, [pc, #12]	; (8012ca0 <udp_new_port+0x68>)
 8012c92:	881b      	ldrh	r3, [r3, #0]
}
 8012c94:	4618      	mov	r0, r3
 8012c96:	370c      	adds	r7, #12
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c9e:	4770      	bx	lr
 8012ca0:	2000003c 	.word	0x2000003c
 8012ca4:	2000ce94 	.word	0x2000ce94

08012ca8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b084      	sub	sp, #16
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d105      	bne.n	8012cc8 <udp_input_local_match+0x20>
 8012cbc:	4b27      	ldr	r3, [pc, #156]	; (8012d5c <udp_input_local_match+0xb4>)
 8012cbe:	2287      	movs	r2, #135	; 0x87
 8012cc0:	4927      	ldr	r1, [pc, #156]	; (8012d60 <udp_input_local_match+0xb8>)
 8012cc2:	4828      	ldr	r0, [pc, #160]	; (8012d64 <udp_input_local_match+0xbc>)
 8012cc4:	f005 f872 	bl	8017dac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012cc8:	68bb      	ldr	r3, [r7, #8]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d105      	bne.n	8012cda <udp_input_local_match+0x32>
 8012cce:	4b23      	ldr	r3, [pc, #140]	; (8012d5c <udp_input_local_match+0xb4>)
 8012cd0:	2288      	movs	r2, #136	; 0x88
 8012cd2:	4925      	ldr	r1, [pc, #148]	; (8012d68 <udp_input_local_match+0xc0>)
 8012cd4:	4823      	ldr	r0, [pc, #140]	; (8012d64 <udp_input_local_match+0xbc>)
 8012cd6:	f005 f869 	bl	8017dac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	7a1b      	ldrb	r3, [r3, #8]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d00b      	beq.n	8012cfa <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	7a1a      	ldrb	r2, [r3, #8]
 8012ce6:	4b21      	ldr	r3, [pc, #132]	; (8012d6c <udp_input_local_match+0xc4>)
 8012ce8:	685b      	ldr	r3, [r3, #4]
 8012cea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012cee:	3301      	adds	r3, #1
 8012cf0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d001      	beq.n	8012cfa <udp_input_local_match+0x52>
    return 0;
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	e02b      	b.n	8012d52 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012cfa:	79fb      	ldrb	r3, [r7, #7]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d018      	beq.n	8012d32 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d013      	beq.n	8012d2e <udp_input_local_match+0x86>
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00f      	beq.n	8012d2e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012d0e:	4b17      	ldr	r3, [pc, #92]	; (8012d6c <udp_input_local_match+0xc4>)
 8012d10:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d16:	d00a      	beq.n	8012d2e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	681a      	ldr	r2, [r3, #0]
 8012d1c:	4b13      	ldr	r3, [pc, #76]	; (8012d6c <udp_input_local_match+0xc4>)
 8012d1e:	695b      	ldr	r3, [r3, #20]
 8012d20:	405a      	eors	r2, r3
 8012d22:	68bb      	ldr	r3, [r7, #8]
 8012d24:	3308      	adds	r3, #8
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d110      	bne.n	8012d50 <udp_input_local_match+0xa8>
          return 1;
 8012d2e:	2301      	movs	r3, #1
 8012d30:	e00f      	b.n	8012d52 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d009      	beq.n	8012d4c <udp_input_local_match+0xa4>
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d005      	beq.n	8012d4c <udp_input_local_match+0xa4>
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681a      	ldr	r2, [r3, #0]
 8012d44:	4b09      	ldr	r3, [pc, #36]	; (8012d6c <udp_input_local_match+0xc4>)
 8012d46:	695b      	ldr	r3, [r3, #20]
 8012d48:	429a      	cmp	r2, r3
 8012d4a:	d101      	bne.n	8012d50 <udp_input_local_match+0xa8>
        return 1;
 8012d4c:	2301      	movs	r3, #1
 8012d4e:	e000      	b.n	8012d52 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012d50:	2300      	movs	r3, #0
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
 8012d5a:	bf00      	nop
 8012d5c:	0801b0e0 	.word	0x0801b0e0
 8012d60:	0801b110 	.word	0x0801b110
 8012d64:	0801b134 	.word	0x0801b134
 8012d68:	0801b15c 	.word	0x0801b15c
 8012d6c:	200096c4 	.word	0x200096c4

08012d70 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8012d70:	b590      	push	{r4, r7, lr}
 8012d72:	b08d      	sub	sp, #52	; 0x34
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012d7a:	2300      	movs	r3, #0
 8012d7c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d105      	bne.n	8012d90 <udp_input+0x20>
 8012d84:	4b7c      	ldr	r3, [pc, #496]	; (8012f78 <udp_input+0x208>)
 8012d86:	22cf      	movs	r2, #207	; 0xcf
 8012d88:	497c      	ldr	r1, [pc, #496]	; (8012f7c <udp_input+0x20c>)
 8012d8a:	487d      	ldr	r0, [pc, #500]	; (8012f80 <udp_input+0x210>)
 8012d8c:	f005 f80e 	bl	8017dac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d105      	bne.n	8012da2 <udp_input+0x32>
 8012d96:	4b78      	ldr	r3, [pc, #480]	; (8012f78 <udp_input+0x208>)
 8012d98:	22d0      	movs	r2, #208	; 0xd0
 8012d9a:	497a      	ldr	r1, [pc, #488]	; (8012f84 <udp_input+0x214>)
 8012d9c:	4878      	ldr	r0, [pc, #480]	; (8012f80 <udp_input+0x210>)
 8012d9e:	f005 f805 	bl	8017dac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	895b      	ldrh	r3, [r3, #10]
 8012da6:	2b07      	cmp	r3, #7
 8012da8:	d803      	bhi.n	8012db2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012daa:	6878      	ldr	r0, [r7, #4]
 8012dac:	f7f9 fab4 	bl	800c318 <pbuf_free>
    goto end;
 8012db0:	e0de      	b.n	8012f70 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	685b      	ldr	r3, [r3, #4]
 8012db6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012db8:	4b73      	ldr	r3, [pc, #460]	; (8012f88 <udp_input+0x218>)
 8012dba:	695b      	ldr	r3, [r3, #20]
 8012dbc:	4a72      	ldr	r2, [pc, #456]	; (8012f88 <udp_input+0x218>)
 8012dbe:	6812      	ldr	r2, [r2, #0]
 8012dc0:	4611      	mov	r1, r2
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	f003 fe08 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012dcc:	697b      	ldr	r3, [r7, #20]
 8012dce:	881b      	ldrh	r3, [r3, #0]
 8012dd0:	b29b      	uxth	r3, r3
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f7f7 fe6c 	bl	800aab0 <lwip_htons>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012ddc:	697b      	ldr	r3, [r7, #20]
 8012dde:	885b      	ldrh	r3, [r3, #2]
 8012de0:	b29b      	uxth	r3, r3
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7f7 fe64 	bl	800aab0 <lwip_htons>
 8012de8:	4603      	mov	r3, r0
 8012dea:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012dec:	2300      	movs	r3, #0
 8012dee:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012df0:	2300      	movs	r3, #0
 8012df2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8012df4:	2300      	movs	r3, #0
 8012df6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012df8:	4b64      	ldr	r3, [pc, #400]	; (8012f8c <udp_input+0x21c>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	627b      	str	r3, [r7, #36]	; 0x24
 8012dfe:	e054      	b.n	8012eaa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e02:	8a5b      	ldrh	r3, [r3, #18]
 8012e04:	89fa      	ldrh	r2, [r7, #14]
 8012e06:	429a      	cmp	r2, r3
 8012e08:	d14a      	bne.n	8012ea0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012e0a:	7cfb      	ldrb	r3, [r7, #19]
 8012e0c:	461a      	mov	r2, r3
 8012e0e:	6839      	ldr	r1, [r7, #0]
 8012e10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012e12:	f7ff ff49 	bl	8012ca8 <udp_input_local_match>
 8012e16:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d041      	beq.n	8012ea0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8012e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e1e:	7c1b      	ldrb	r3, [r3, #16]
 8012e20:	f003 0304 	and.w	r3, r3, #4
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d11d      	bne.n	8012e64 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8012e28:	69fb      	ldr	r3, [r7, #28]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d102      	bne.n	8012e34 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	61fb      	str	r3, [r7, #28]
 8012e32:	e017      	b.n	8012e64 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8012e34:	7cfb      	ldrb	r3, [r7, #19]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d014      	beq.n	8012e64 <udp_input+0xf4>
 8012e3a:	4b53      	ldr	r3, [pc, #332]	; (8012f88 <udp_input+0x218>)
 8012e3c:	695b      	ldr	r3, [r3, #20]
 8012e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e42:	d10f      	bne.n	8012e64 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8012e44:	69fb      	ldr	r3, [r7, #28]
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	3304      	adds	r3, #4
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d008      	beq.n	8012e64 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8012e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e54:	681a      	ldr	r2, [r3, #0]
 8012e56:	683b      	ldr	r3, [r7, #0]
 8012e58:	3304      	adds	r3, #4
 8012e5a:	681b      	ldr	r3, [r3, #0]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d101      	bne.n	8012e64 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8012e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e62:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e66:	8a9b      	ldrh	r3, [r3, #20]
 8012e68:	8a3a      	ldrh	r2, [r7, #16]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d118      	bne.n	8012ea0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e70:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d005      	beq.n	8012e82 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e78:	685a      	ldr	r2, [r3, #4]
 8012e7a:	4b43      	ldr	r3, [pc, #268]	; (8012f88 <udp_input+0x218>)
 8012e7c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012e7e:	429a      	cmp	r2, r3
 8012e80:	d10e      	bne.n	8012ea0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012e82:	6a3b      	ldr	r3, [r7, #32]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d014      	beq.n	8012eb2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8a:	68da      	ldr	r2, [r3, #12]
 8012e8c:	6a3b      	ldr	r3, [r7, #32]
 8012e8e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012e90:	4b3e      	ldr	r3, [pc, #248]	; (8012f8c <udp_input+0x21c>)
 8012e92:	681a      	ldr	r2, [r3, #0]
 8012e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e96:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012e98:	4a3c      	ldr	r2, [pc, #240]	; (8012f8c <udp_input+0x21c>)
 8012e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e9c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012e9e:	e008      	b.n	8012eb2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8012ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ea6:	68db      	ldr	r3, [r3, #12]
 8012ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8012eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d1a7      	bne.n	8012e00 <udp_input+0x90>
 8012eb0:	e000      	b.n	8012eb4 <udp_input+0x144>
        break;
 8012eb2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d101      	bne.n	8012ebe <udp_input+0x14e>
    pcb = uncon_pcb;
 8012eba:	69fb      	ldr	r3, [r7, #28]
 8012ebc:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d002      	beq.n	8012eca <udp_input+0x15a>
    for_us = 1;
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	76fb      	strb	r3, [r7, #27]
 8012ec8:	e00a      	b.n	8012ee0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	3304      	adds	r3, #4
 8012ece:	681a      	ldr	r2, [r3, #0]
 8012ed0:	4b2d      	ldr	r3, [pc, #180]	; (8012f88 <udp_input+0x218>)
 8012ed2:	695b      	ldr	r3, [r3, #20]
 8012ed4:	429a      	cmp	r2, r3
 8012ed6:	bf0c      	ite	eq
 8012ed8:	2301      	moveq	r3, #1
 8012eda:	2300      	movne	r3, #0
 8012edc:	b2db      	uxtb	r3, r3
 8012ede:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012ee0:	7efb      	ldrb	r3, [r7, #27]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d041      	beq.n	8012f6a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012ee6:	2108      	movs	r1, #8
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7f9 f98f 	bl	800c20c <pbuf_remove_header>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d00a      	beq.n	8012f0a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012ef4:	4b20      	ldr	r3, [pc, #128]	; (8012f78 <udp_input+0x208>)
 8012ef6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012efa:	4925      	ldr	r1, [pc, #148]	; (8012f90 <udp_input+0x220>)
 8012efc:	4820      	ldr	r0, [pc, #128]	; (8012f80 <udp_input+0x210>)
 8012efe:	f004 ff55 	bl	8017dac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7f9 fa08 	bl	800c318 <pbuf_free>
      goto end;
 8012f08:	e032      	b.n	8012f70 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d012      	beq.n	8012f36 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f12:	699b      	ldr	r3, [r3, #24]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d00a      	beq.n	8012f2e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1a:	699c      	ldr	r4, [r3, #24]
 8012f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1e:	69d8      	ldr	r0, [r3, #28]
 8012f20:	8a3b      	ldrh	r3, [r7, #16]
 8012f22:	9300      	str	r3, [sp, #0]
 8012f24:	4b1b      	ldr	r3, [pc, #108]	; (8012f94 <udp_input+0x224>)
 8012f26:	687a      	ldr	r2, [r7, #4]
 8012f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f2a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012f2c:	e021      	b.n	8012f72 <udp_input+0x202>
        pbuf_free(p);
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f7f9 f9f2 	bl	800c318 <pbuf_free>
        goto end;
 8012f34:	e01c      	b.n	8012f70 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012f36:	7cfb      	ldrb	r3, [r7, #19]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d112      	bne.n	8012f62 <udp_input+0x1f2>
 8012f3c:	4b12      	ldr	r3, [pc, #72]	; (8012f88 <udp_input+0x218>)
 8012f3e:	695b      	ldr	r3, [r3, #20]
 8012f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012f44:	2be0      	cmp	r3, #224	; 0xe0
 8012f46:	d00c      	beq.n	8012f62 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8012f48:	4b0f      	ldr	r3, [pc, #60]	; (8012f88 <udp_input+0x218>)
 8012f4a:	899b      	ldrh	r3, [r3, #12]
 8012f4c:	3308      	adds	r3, #8
 8012f4e:	b29b      	uxth	r3, r3
 8012f50:	b21b      	sxth	r3, r3
 8012f52:	4619      	mov	r1, r3
 8012f54:	6878      	ldr	r0, [r7, #4]
 8012f56:	f7f9 f9cc 	bl	800c2f2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012f5a:	2103      	movs	r1, #3
 8012f5c:	6878      	ldr	r0, [r7, #4]
 8012f5e:	f003 f9fd 	bl	801635c <icmp_dest_unreach>
      pbuf_free(p);
 8012f62:	6878      	ldr	r0, [r7, #4]
 8012f64:	f7f9 f9d8 	bl	800c318 <pbuf_free>
  return;
 8012f68:	e003      	b.n	8012f72 <udp_input+0x202>
    pbuf_free(p);
 8012f6a:	6878      	ldr	r0, [r7, #4]
 8012f6c:	f7f9 f9d4 	bl	800c318 <pbuf_free>
  return;
 8012f70:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8012f72:	372c      	adds	r7, #44	; 0x2c
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd90      	pop	{r4, r7, pc}
 8012f78:	0801b0e0 	.word	0x0801b0e0
 8012f7c:	0801b184 	.word	0x0801b184
 8012f80:	0801b134 	.word	0x0801b134
 8012f84:	0801b19c 	.word	0x0801b19c
 8012f88:	200096c4 	.word	0x200096c4
 8012f8c:	2000ce94 	.word	0x2000ce94
 8012f90:	0801b1b8 	.word	0x0801b1b8
 8012f94:	200096d4 	.word	0x200096d4

08012f98 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b088      	sub	sp, #32
 8012f9c:	af02      	add	r7, sp, #8
 8012f9e:	60f8      	str	r0, [r7, #12]
 8012fa0:	60b9      	str	r1, [r7, #8]
 8012fa2:	607a      	str	r2, [r7, #4]
 8012fa4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d109      	bne.n	8012fc0 <udp_sendto_if+0x28>
 8012fac:	4b2e      	ldr	r3, [pc, #184]	; (8013068 <udp_sendto_if+0xd0>)
 8012fae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012fb2:	492e      	ldr	r1, [pc, #184]	; (801306c <udp_sendto_if+0xd4>)
 8012fb4:	482e      	ldr	r0, [pc, #184]	; (8013070 <udp_sendto_if+0xd8>)
 8012fb6:	f004 fef9 	bl	8017dac <iprintf>
 8012fba:	f06f 030f 	mvn.w	r3, #15
 8012fbe:	e04f      	b.n	8013060 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d109      	bne.n	8012fda <udp_sendto_if+0x42>
 8012fc6:	4b28      	ldr	r3, [pc, #160]	; (8013068 <udp_sendto_if+0xd0>)
 8012fc8:	f240 2281 	movw	r2, #641	; 0x281
 8012fcc:	4929      	ldr	r1, [pc, #164]	; (8013074 <udp_sendto_if+0xdc>)
 8012fce:	4828      	ldr	r0, [pc, #160]	; (8013070 <udp_sendto_if+0xd8>)
 8012fd0:	f004 feec 	bl	8017dac <iprintf>
 8012fd4:	f06f 030f 	mvn.w	r3, #15
 8012fd8:	e042      	b.n	8013060 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d109      	bne.n	8012ff4 <udp_sendto_if+0x5c>
 8012fe0:	4b21      	ldr	r3, [pc, #132]	; (8013068 <udp_sendto_if+0xd0>)
 8012fe2:	f240 2282 	movw	r2, #642	; 0x282
 8012fe6:	4924      	ldr	r1, [pc, #144]	; (8013078 <udp_sendto_if+0xe0>)
 8012fe8:	4821      	ldr	r0, [pc, #132]	; (8013070 <udp_sendto_if+0xd8>)
 8012fea:	f004 fedf 	bl	8017dac <iprintf>
 8012fee:	f06f 030f 	mvn.w	r3, #15
 8012ff2:	e035      	b.n	8013060 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012ff4:	6a3b      	ldr	r3, [r7, #32]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d109      	bne.n	801300e <udp_sendto_if+0x76>
 8012ffa:	4b1b      	ldr	r3, [pc, #108]	; (8013068 <udp_sendto_if+0xd0>)
 8012ffc:	f240 2283 	movw	r2, #643	; 0x283
 8013000:	491e      	ldr	r1, [pc, #120]	; (801307c <udp_sendto_if+0xe4>)
 8013002:	481b      	ldr	r0, [pc, #108]	; (8013070 <udp_sendto_if+0xd8>)
 8013004:	f004 fed2 	bl	8017dac <iprintf>
 8013008:	f06f 030f 	mvn.w	r3, #15
 801300c:	e028      	b.n	8013060 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d009      	beq.n	8013028 <udp_sendto_if+0x90>
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d005      	beq.n	8013028 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013024:	2be0      	cmp	r3, #224	; 0xe0
 8013026:	d103      	bne.n	8013030 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8013028:	6a3b      	ldr	r3, [r7, #32]
 801302a:	3304      	adds	r3, #4
 801302c:	617b      	str	r3, [r7, #20]
 801302e:	e00b      	b.n	8013048 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	6a3b      	ldr	r3, [r7, #32]
 8013036:	3304      	adds	r3, #4
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	429a      	cmp	r2, r3
 801303c:	d002      	beq.n	8013044 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801303e:	f06f 0303 	mvn.w	r3, #3
 8013042:	e00d      	b.n	8013060 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013048:	887a      	ldrh	r2, [r7, #2]
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	6a3b      	ldr	r3, [r7, #32]
 8013050:	9300      	str	r3, [sp, #0]
 8013052:	4613      	mov	r3, r2
 8013054:	687a      	ldr	r2, [r7, #4]
 8013056:	68b9      	ldr	r1, [r7, #8]
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f000 f811 	bl	8013080 <udp_sendto_if_src>
 801305e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8013060:	4618      	mov	r0, r3
 8013062:	3718      	adds	r7, #24
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	0801b0e0 	.word	0x0801b0e0
 801306c:	0801b254 	.word	0x0801b254
 8013070:	0801b134 	.word	0x0801b134
 8013074:	0801b270 	.word	0x0801b270
 8013078:	0801b28c 	.word	0x0801b28c
 801307c:	0801b2ac 	.word	0x0801b2ac

08013080 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8013080:	b580      	push	{r7, lr}
 8013082:	b08c      	sub	sp, #48	; 0x30
 8013084:	af04      	add	r7, sp, #16
 8013086:	60f8      	str	r0, [r7, #12]
 8013088:	60b9      	str	r1, [r7, #8]
 801308a:	607a      	str	r2, [r7, #4]
 801308c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d109      	bne.n	80130a8 <udp_sendto_if_src+0x28>
 8013094:	4b65      	ldr	r3, [pc, #404]	; (801322c <udp_sendto_if_src+0x1ac>)
 8013096:	f240 22d1 	movw	r2, #721	; 0x2d1
 801309a:	4965      	ldr	r1, [pc, #404]	; (8013230 <udp_sendto_if_src+0x1b0>)
 801309c:	4865      	ldr	r0, [pc, #404]	; (8013234 <udp_sendto_if_src+0x1b4>)
 801309e:	f004 fe85 	bl	8017dac <iprintf>
 80130a2:	f06f 030f 	mvn.w	r3, #15
 80130a6:	e0bc      	b.n	8013222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d109      	bne.n	80130c2 <udp_sendto_if_src+0x42>
 80130ae:	4b5f      	ldr	r3, [pc, #380]	; (801322c <udp_sendto_if_src+0x1ac>)
 80130b0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80130b4:	4960      	ldr	r1, [pc, #384]	; (8013238 <udp_sendto_if_src+0x1b8>)
 80130b6:	485f      	ldr	r0, [pc, #380]	; (8013234 <udp_sendto_if_src+0x1b4>)
 80130b8:	f004 fe78 	bl	8017dac <iprintf>
 80130bc:	f06f 030f 	mvn.w	r3, #15
 80130c0:	e0af      	b.n	8013222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d109      	bne.n	80130dc <udp_sendto_if_src+0x5c>
 80130c8:	4b58      	ldr	r3, [pc, #352]	; (801322c <udp_sendto_if_src+0x1ac>)
 80130ca:	f240 22d3 	movw	r2, #723	; 0x2d3
 80130ce:	495b      	ldr	r1, [pc, #364]	; (801323c <udp_sendto_if_src+0x1bc>)
 80130d0:	4858      	ldr	r0, [pc, #352]	; (8013234 <udp_sendto_if_src+0x1b4>)
 80130d2:	f004 fe6b 	bl	8017dac <iprintf>
 80130d6:	f06f 030f 	mvn.w	r3, #15
 80130da:	e0a2      	b.n	8013222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d109      	bne.n	80130f6 <udp_sendto_if_src+0x76>
 80130e2:	4b52      	ldr	r3, [pc, #328]	; (801322c <udp_sendto_if_src+0x1ac>)
 80130e4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80130e8:	4955      	ldr	r1, [pc, #340]	; (8013240 <udp_sendto_if_src+0x1c0>)
 80130ea:	4852      	ldr	r0, [pc, #328]	; (8013234 <udp_sendto_if_src+0x1b4>)
 80130ec:	f004 fe5e 	bl	8017dac <iprintf>
 80130f0:	f06f 030f 	mvn.w	r3, #15
 80130f4:	e095      	b.n	8013222 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80130f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d109      	bne.n	8013110 <udp_sendto_if_src+0x90>
 80130fc:	4b4b      	ldr	r3, [pc, #300]	; (801322c <udp_sendto_if_src+0x1ac>)
 80130fe:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013102:	4950      	ldr	r1, [pc, #320]	; (8013244 <udp_sendto_if_src+0x1c4>)
 8013104:	484b      	ldr	r0, [pc, #300]	; (8013234 <udp_sendto_if_src+0x1b4>)
 8013106:	f004 fe51 	bl	8017dac <iprintf>
 801310a:	f06f 030f 	mvn.w	r3, #15
 801310e:	e088      	b.n	8013222 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	8a5b      	ldrh	r3, [r3, #18]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d10f      	bne.n	8013138 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8013118:	68f9      	ldr	r1, [r7, #12]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	8a5b      	ldrh	r3, [r3, #18]
 801311e:	461a      	mov	r2, r3
 8013120:	68f8      	ldr	r0, [r7, #12]
 8013122:	f000 f893 	bl	801324c <udp_bind>
 8013126:	4603      	mov	r3, r0
 8013128:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801312a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d002      	beq.n	8013138 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013132:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013136:	e074      	b.n	8013222 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	891b      	ldrh	r3, [r3, #8]
 801313c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013140:	4293      	cmp	r3, r2
 8013142:	d902      	bls.n	801314a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013144:	f04f 33ff 	mov.w	r3, #4294967295
 8013148:	e06b      	b.n	8013222 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801314a:	2108      	movs	r1, #8
 801314c:	68b8      	ldr	r0, [r7, #8]
 801314e:	f7f9 f84d 	bl	800c1ec <pbuf_add_header>
 8013152:	4603      	mov	r3, r0
 8013154:	2b00      	cmp	r3, #0
 8013156:	d015      	beq.n	8013184 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8013158:	f44f 7220 	mov.w	r2, #640	; 0x280
 801315c:	2108      	movs	r1, #8
 801315e:	2022      	movs	r0, #34	; 0x22
 8013160:	f7f8 fdf6 	bl	800bd50 <pbuf_alloc>
 8013164:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d102      	bne.n	8013172 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801316c:	f04f 33ff 	mov.w	r3, #4294967295
 8013170:	e057      	b.n	8013222 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	891b      	ldrh	r3, [r3, #8]
 8013176:	2b00      	cmp	r3, #0
 8013178:	d006      	beq.n	8013188 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801317a:	68b9      	ldr	r1, [r7, #8]
 801317c:	69f8      	ldr	r0, [r7, #28]
 801317e:	f7f9 f9ef 	bl	800c560 <pbuf_chain>
 8013182:	e001      	b.n	8013188 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	895b      	ldrh	r3, [r3, #10]
 801318c:	2b07      	cmp	r3, #7
 801318e:	d806      	bhi.n	801319e <udp_sendto_if_src+0x11e>
 8013190:	4b26      	ldr	r3, [pc, #152]	; (801322c <udp_sendto_if_src+0x1ac>)
 8013192:	f240 320d 	movw	r2, #781	; 0x30d
 8013196:	492c      	ldr	r1, [pc, #176]	; (8013248 <udp_sendto_if_src+0x1c8>)
 8013198:	4826      	ldr	r0, [pc, #152]	; (8013234 <udp_sendto_if_src+0x1b4>)
 801319a:	f004 fe07 	bl	8017dac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801319e:	69fb      	ldr	r3, [r7, #28]
 80131a0:	685b      	ldr	r3, [r3, #4]
 80131a2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	8a5b      	ldrh	r3, [r3, #18]
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7f7 fc81 	bl	800aab0 <lwip_htons>
 80131ae:	4603      	mov	r3, r0
 80131b0:	461a      	mov	r2, r3
 80131b2:	697b      	ldr	r3, [r7, #20]
 80131b4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80131b6:	887b      	ldrh	r3, [r7, #2]
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7f7 fc79 	bl	800aab0 <lwip_htons>
 80131be:	4603      	mov	r3, r0
 80131c0:	461a      	mov	r2, r3
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	2200      	movs	r2, #0
 80131ca:	719a      	strb	r2, [r3, #6]
 80131cc:	2200      	movs	r2, #0
 80131ce:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80131d0:	69fb      	ldr	r3, [r7, #28]
 80131d2:	891b      	ldrh	r3, [r3, #8]
 80131d4:	4618      	mov	r0, r3
 80131d6:	f7f7 fc6b 	bl	800aab0 <lwip_htons>
 80131da:	4603      	mov	r3, r0
 80131dc:	461a      	mov	r2, r3
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80131e2:	2311      	movs	r3, #17
 80131e4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	7adb      	ldrb	r3, [r3, #11]
 80131ea:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	7a9b      	ldrb	r3, [r3, #10]
 80131f0:	7cb9      	ldrb	r1, [r7, #18]
 80131f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131f4:	9202      	str	r2, [sp, #8]
 80131f6:	7cfa      	ldrb	r2, [r7, #19]
 80131f8:	9201      	str	r2, [sp, #4]
 80131fa:	9300      	str	r3, [sp, #0]
 80131fc:	460b      	mov	r3, r1
 80131fe:	687a      	ldr	r2, [r7, #4]
 8013200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013202:	69f8      	ldr	r0, [r7, #28]
 8013204:	f003 fb3a 	bl	801687c <ip4_output_if_src>
 8013208:	4603      	mov	r3, r0
 801320a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801320c:	69fa      	ldr	r2, [r7, #28]
 801320e:	68bb      	ldr	r3, [r7, #8]
 8013210:	429a      	cmp	r2, r3
 8013212:	d004      	beq.n	801321e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013214:	69f8      	ldr	r0, [r7, #28]
 8013216:	f7f9 f87f 	bl	800c318 <pbuf_free>
    q = NULL;
 801321a:	2300      	movs	r3, #0
 801321c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801321e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013222:	4618      	mov	r0, r3
 8013224:	3720      	adds	r7, #32
 8013226:	46bd      	mov	sp, r7
 8013228:	bd80      	pop	{r7, pc}
 801322a:	bf00      	nop
 801322c:	0801b0e0 	.word	0x0801b0e0
 8013230:	0801b2cc 	.word	0x0801b2cc
 8013234:	0801b134 	.word	0x0801b134
 8013238:	0801b2ec 	.word	0x0801b2ec
 801323c:	0801b30c 	.word	0x0801b30c
 8013240:	0801b330 	.word	0x0801b330
 8013244:	0801b354 	.word	0x0801b354
 8013248:	0801b378 	.word	0x0801b378

0801324c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	60f8      	str	r0, [r7, #12]
 8013254:	60b9      	str	r1, [r7, #8]
 8013256:	4613      	mov	r3, r2
 8013258:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801325a:	68bb      	ldr	r3, [r7, #8]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d101      	bne.n	8013264 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013260:	4b39      	ldr	r3, [pc, #228]	; (8013348 <udp_bind+0xfc>)
 8013262:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013264:	68fb      	ldr	r3, [r7, #12]
 8013266:	2b00      	cmp	r3, #0
 8013268:	d109      	bne.n	801327e <udp_bind+0x32>
 801326a:	4b38      	ldr	r3, [pc, #224]	; (801334c <udp_bind+0x100>)
 801326c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013270:	4937      	ldr	r1, [pc, #220]	; (8013350 <udp_bind+0x104>)
 8013272:	4838      	ldr	r0, [pc, #224]	; (8013354 <udp_bind+0x108>)
 8013274:	f004 fd9a 	bl	8017dac <iprintf>
 8013278:	f06f 030f 	mvn.w	r3, #15
 801327c:	e060      	b.n	8013340 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801327e:	2300      	movs	r3, #0
 8013280:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013282:	4b35      	ldr	r3, [pc, #212]	; (8013358 <udp_bind+0x10c>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	617b      	str	r3, [r7, #20]
 8013288:	e009      	b.n	801329e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801328a:	68fa      	ldr	r2, [r7, #12]
 801328c:	697b      	ldr	r3, [r7, #20]
 801328e:	429a      	cmp	r2, r3
 8013290:	d102      	bne.n	8013298 <udp_bind+0x4c>
      rebind = 1;
 8013292:	2301      	movs	r3, #1
 8013294:	74fb      	strb	r3, [r7, #19]
      break;
 8013296:	e005      	b.n	80132a4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	68db      	ldr	r3, [r3, #12]
 801329c:	617b      	str	r3, [r7, #20]
 801329e:	697b      	ldr	r3, [r7, #20]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d1f2      	bne.n	801328a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80132a4:	88fb      	ldrh	r3, [r7, #6]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d109      	bne.n	80132be <udp_bind+0x72>
    port = udp_new_port();
 80132aa:	f7ff fcc5 	bl	8012c38 <udp_new_port>
 80132ae:	4603      	mov	r3, r0
 80132b0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80132b2:	88fb      	ldrh	r3, [r7, #6]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d12c      	bne.n	8013312 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80132b8:	f06f 0307 	mvn.w	r3, #7
 80132bc:	e040      	b.n	8013340 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80132be:	4b26      	ldr	r3, [pc, #152]	; (8013358 <udp_bind+0x10c>)
 80132c0:	681b      	ldr	r3, [r3, #0]
 80132c2:	617b      	str	r3, [r7, #20]
 80132c4:	e022      	b.n	801330c <udp_bind+0xc0>
      if (pcb != ipcb) {
 80132c6:	68fa      	ldr	r2, [r7, #12]
 80132c8:	697b      	ldr	r3, [r7, #20]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d01b      	beq.n	8013306 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80132ce:	697b      	ldr	r3, [r7, #20]
 80132d0:	8a5b      	ldrh	r3, [r3, #18]
 80132d2:	88fa      	ldrh	r2, [r7, #6]
 80132d4:	429a      	cmp	r2, r3
 80132d6:	d116      	bne.n	8013306 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132d8:	697b      	ldr	r3, [r7, #20]
 80132da:	681a      	ldr	r2, [r3, #0]
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d00d      	beq.n	8013300 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132e4:	68bb      	ldr	r3, [r7, #8]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d00a      	beq.n	8013300 <udp_bind+0xb4>
 80132ea:	68bb      	ldr	r3, [r7, #8]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d006      	beq.n	8013300 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132f2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d003      	beq.n	8013300 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d102      	bne.n	8013306 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013300:	f06f 0307 	mvn.w	r3, #7
 8013304:	e01c      	b.n	8013340 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013306:	697b      	ldr	r3, [r7, #20]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	617b      	str	r3, [r7, #20]
 801330c:	697b      	ldr	r3, [r7, #20]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d1d9      	bne.n	80132c6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013312:	68bb      	ldr	r3, [r7, #8]
 8013314:	2b00      	cmp	r3, #0
 8013316:	d002      	beq.n	801331e <udp_bind+0xd2>
 8013318:	68bb      	ldr	r3, [r7, #8]
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	e000      	b.n	8013320 <udp_bind+0xd4>
 801331e:	2300      	movs	r3, #0
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	88fa      	ldrh	r2, [r7, #6]
 8013328:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801332a:	7cfb      	ldrb	r3, [r7, #19]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d106      	bne.n	801333e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013330:	4b09      	ldr	r3, [pc, #36]	; (8013358 <udp_bind+0x10c>)
 8013332:	681a      	ldr	r2, [r3, #0]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8013338:	4a07      	ldr	r2, [pc, #28]	; (8013358 <udp_bind+0x10c>)
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801333e:	2300      	movs	r3, #0
}
 8013340:	4618      	mov	r0, r3
 8013342:	3718      	adds	r7, #24
 8013344:	46bd      	mov	sp, r7
 8013346:	bd80      	pop	{r7, pc}
 8013348:	0801e658 	.word	0x0801e658
 801334c:	0801b0e0 	.word	0x0801b0e0
 8013350:	0801b3a8 	.word	0x0801b3a8
 8013354:	0801b134 	.word	0x0801b134
 8013358:	2000ce94 	.word	0x2000ce94

0801335c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801335c:	b580      	push	{r7, lr}
 801335e:	b086      	sub	sp, #24
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	4613      	mov	r3, r2
 8013368:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d109      	bne.n	8013384 <udp_connect+0x28>
 8013370:	4b2c      	ldr	r3, [pc, #176]	; (8013424 <udp_connect+0xc8>)
 8013372:	f240 4235 	movw	r2, #1077	; 0x435
 8013376:	492c      	ldr	r1, [pc, #176]	; (8013428 <udp_connect+0xcc>)
 8013378:	482c      	ldr	r0, [pc, #176]	; (801342c <udp_connect+0xd0>)
 801337a:	f004 fd17 	bl	8017dac <iprintf>
 801337e:	f06f 030f 	mvn.w	r3, #15
 8013382:	e04b      	b.n	801341c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8013384:	68bb      	ldr	r3, [r7, #8]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d109      	bne.n	801339e <udp_connect+0x42>
 801338a:	4b26      	ldr	r3, [pc, #152]	; (8013424 <udp_connect+0xc8>)
 801338c:	f240 4236 	movw	r2, #1078	; 0x436
 8013390:	4927      	ldr	r1, [pc, #156]	; (8013430 <udp_connect+0xd4>)
 8013392:	4826      	ldr	r0, [pc, #152]	; (801342c <udp_connect+0xd0>)
 8013394:	f004 fd0a 	bl	8017dac <iprintf>
 8013398:	f06f 030f 	mvn.w	r3, #15
 801339c:	e03e      	b.n	801341c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	8a5b      	ldrh	r3, [r3, #18]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	d10f      	bne.n	80133c6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80133a6:	68f9      	ldr	r1, [r7, #12]
 80133a8:	68fb      	ldr	r3, [r7, #12]
 80133aa:	8a5b      	ldrh	r3, [r3, #18]
 80133ac:	461a      	mov	r2, r3
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	f7ff ff4c 	bl	801324c <udp_bind>
 80133b4:	4603      	mov	r3, r0
 80133b6:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80133b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d002      	beq.n	80133c6 <udp_connect+0x6a>
      return err;
 80133c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80133c4:	e02a      	b.n	801341c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d002      	beq.n	80133d2 <udp_connect+0x76>
 80133cc:	68bb      	ldr	r3, [r7, #8]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	e000      	b.n	80133d4 <udp_connect+0x78>
 80133d2:	2300      	movs	r3, #0
 80133d4:	68fa      	ldr	r2, [r7, #12]
 80133d6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	88fa      	ldrh	r2, [r7, #6]
 80133dc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	7c1b      	ldrb	r3, [r3, #16]
 80133e2:	f043 0304 	orr.w	r3, r3, #4
 80133e6:	b2da      	uxtb	r2, r3
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80133ec:	4b11      	ldr	r3, [pc, #68]	; (8013434 <udp_connect+0xd8>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	617b      	str	r3, [r7, #20]
 80133f2:	e008      	b.n	8013406 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80133f4:	68fa      	ldr	r2, [r7, #12]
 80133f6:	697b      	ldr	r3, [r7, #20]
 80133f8:	429a      	cmp	r2, r3
 80133fa:	d101      	bne.n	8013400 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80133fc:	2300      	movs	r3, #0
 80133fe:	e00d      	b.n	801341c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	617b      	str	r3, [r7, #20]
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d1f3      	bne.n	80133f4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801340c:	4b09      	ldr	r3, [pc, #36]	; (8013434 <udp_connect+0xd8>)
 801340e:	681a      	ldr	r2, [r3, #0]
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013414:	4a07      	ldr	r2, [pc, #28]	; (8013434 <udp_connect+0xd8>)
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801341a:	2300      	movs	r3, #0
}
 801341c:	4618      	mov	r0, r3
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}
 8013424:	0801b0e0 	.word	0x0801b0e0
 8013428:	0801b3c0 	.word	0x0801b3c0
 801342c:	0801b134 	.word	0x0801b134
 8013430:	0801b3dc 	.word	0x0801b3dc
 8013434:	2000ce94 	.word	0x2000ce94

08013438 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013438:	b580      	push	{r7, lr}
 801343a:	b084      	sub	sp, #16
 801343c:	af00      	add	r7, sp, #0
 801343e:	60f8      	str	r0, [r7, #12]
 8013440:	60b9      	str	r1, [r7, #8]
 8013442:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d107      	bne.n	801345a <udp_recv+0x22>
 801344a:	4b08      	ldr	r3, [pc, #32]	; (801346c <udp_recv+0x34>)
 801344c:	f240 428a 	movw	r2, #1162	; 0x48a
 8013450:	4907      	ldr	r1, [pc, #28]	; (8013470 <udp_recv+0x38>)
 8013452:	4808      	ldr	r0, [pc, #32]	; (8013474 <udp_recv+0x3c>)
 8013454:	f004 fcaa 	bl	8017dac <iprintf>
 8013458:	e005      	b.n	8013466 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	68ba      	ldr	r2, [r7, #8]
 801345e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	687a      	ldr	r2, [r7, #4]
 8013464:	61da      	str	r2, [r3, #28]
}
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	0801b0e0 	.word	0x0801b0e0
 8013470:	0801b414 	.word	0x0801b414
 8013474:	0801b134 	.word	0x0801b134

08013478 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d107      	bne.n	8013496 <udp_remove+0x1e>
 8013486:	4b19      	ldr	r3, [pc, #100]	; (80134ec <udp_remove+0x74>)
 8013488:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801348c:	4918      	ldr	r1, [pc, #96]	; (80134f0 <udp_remove+0x78>)
 801348e:	4819      	ldr	r0, [pc, #100]	; (80134f4 <udp_remove+0x7c>)
 8013490:	f004 fc8c 	bl	8017dac <iprintf>
 8013494:	e026      	b.n	80134e4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013496:	4b18      	ldr	r3, [pc, #96]	; (80134f8 <udp_remove+0x80>)
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	687a      	ldr	r2, [r7, #4]
 801349c:	429a      	cmp	r2, r3
 801349e:	d105      	bne.n	80134ac <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80134a0:	4b15      	ldr	r3, [pc, #84]	; (80134f8 <udp_remove+0x80>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	68db      	ldr	r3, [r3, #12]
 80134a6:	4a14      	ldr	r2, [pc, #80]	; (80134f8 <udp_remove+0x80>)
 80134a8:	6013      	str	r3, [r2, #0]
 80134aa:	e017      	b.n	80134dc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80134ac:	4b12      	ldr	r3, [pc, #72]	; (80134f8 <udp_remove+0x80>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	60fb      	str	r3, [r7, #12]
 80134b2:	e010      	b.n	80134d6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d009      	beq.n	80134d0 <udp_remove+0x58>
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	687a      	ldr	r2, [r7, #4]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d104      	bne.n	80134d0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	68da      	ldr	r2, [r3, #12]
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	60da      	str	r2, [r3, #12]
        break;
 80134ce:	e005      	b.n	80134dc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	68db      	ldr	r3, [r3, #12]
 80134d4:	60fb      	str	r3, [r7, #12]
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d1eb      	bne.n	80134b4 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80134dc:	6879      	ldr	r1, [r7, #4]
 80134de:	2000      	movs	r0, #0
 80134e0:	f7f8 f86a 	bl	800b5b8 <memp_free>
}
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	0801b0e0 	.word	0x0801b0e0
 80134f0:	0801b42c 	.word	0x0801b42c
 80134f4:	0801b134 	.word	0x0801b134
 80134f8:	2000ce94 	.word	0x2000ce94

080134fc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8013502:	2000      	movs	r0, #0
 8013504:	f7f7 ffe2 	bl	800b4cc <memp_malloc>
 8013508:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d007      	beq.n	8013520 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013510:	2220      	movs	r2, #32
 8013512:	2100      	movs	r1, #0
 8013514:	6878      	ldr	r0, [r7, #4]
 8013516:	f004 fcae 	bl	8017e76 <memset>
    pcb->ttl = UDP_TTL;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	22ff      	movs	r2, #255	; 0xff
 801351e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013520:	687b      	ldr	r3, [r7, #4]
}
 8013522:	4618      	mov	r0, r3
 8013524:	3708      	adds	r7, #8
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
	...

0801352c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801352c:	b480      	push	{r7}
 801352e:	b085      	sub	sp, #20
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	2b00      	cmp	r3, #0
 801353a:	d01e      	beq.n	801357a <udp_netif_ip_addr_changed+0x4e>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d01a      	beq.n	801357a <udp_netif_ip_addr_changed+0x4e>
 8013544:	683b      	ldr	r3, [r7, #0]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d017      	beq.n	801357a <udp_netif_ip_addr_changed+0x4e>
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d013      	beq.n	801357a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013552:	4b0d      	ldr	r3, [pc, #52]	; (8013588 <udp_netif_ip_addr_changed+0x5c>)
 8013554:	681b      	ldr	r3, [r3, #0]
 8013556:	60fb      	str	r3, [r7, #12]
 8013558:	e00c      	b.n	8013574 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	681a      	ldr	r2, [r3, #0]
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	429a      	cmp	r2, r3
 8013564:	d103      	bne.n	801356e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	681a      	ldr	r2, [r3, #0]
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	68db      	ldr	r3, [r3, #12]
 8013572:	60fb      	str	r3, [r7, #12]
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d1ef      	bne.n	801355a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801357a:	bf00      	nop
 801357c:	3714      	adds	r7, #20
 801357e:	46bd      	mov	sp, r7
 8013580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013584:	4770      	bx	lr
 8013586:	bf00      	nop
 8013588:	2000ce94 	.word	0x2000ce94

0801358c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013590:	4b20      	ldr	r3, [pc, #128]	; (8013614 <dhcp_inc_pcb_refcount+0x88>)
 8013592:	781b      	ldrb	r3, [r3, #0]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d133      	bne.n	8013600 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8013598:	4b1f      	ldr	r3, [pc, #124]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	d005      	beq.n	80135ac <dhcp_inc_pcb_refcount+0x20>
 80135a0:	4b1e      	ldr	r3, [pc, #120]	; (801361c <dhcp_inc_pcb_refcount+0x90>)
 80135a2:	22e5      	movs	r2, #229	; 0xe5
 80135a4:	491e      	ldr	r1, [pc, #120]	; (8013620 <dhcp_inc_pcb_refcount+0x94>)
 80135a6:	481f      	ldr	r0, [pc, #124]	; (8013624 <dhcp_inc_pcb_refcount+0x98>)
 80135a8:	f004 fc00 	bl	8017dac <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80135ac:	f7ff ffa6 	bl	80134fc <udp_new>
 80135b0:	4603      	mov	r3, r0
 80135b2:	4a19      	ldr	r2, [pc, #100]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135b4:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 80135b6:	4b18      	ldr	r3, [pc, #96]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d102      	bne.n	80135c4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80135be:	f04f 33ff 	mov.w	r3, #4294967295
 80135c2:	e024      	b.n	801360e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80135c4:	4b14      	ldr	r3, [pc, #80]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	7a5a      	ldrb	r2, [r3, #9]
 80135ca:	4b13      	ldr	r3, [pc, #76]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	f042 0220 	orr.w	r2, r2, #32
 80135d2:	b2d2      	uxtb	r2, r2
 80135d4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80135d6:	4b10      	ldr	r3, [pc, #64]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	2244      	movs	r2, #68	; 0x44
 80135dc:	4912      	ldr	r1, [pc, #72]	; (8013628 <dhcp_inc_pcb_refcount+0x9c>)
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff fe34 	bl	801324c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80135e4:	4b0c      	ldr	r3, [pc, #48]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	2243      	movs	r2, #67	; 0x43
 80135ea:	490f      	ldr	r1, [pc, #60]	; (8013628 <dhcp_inc_pcb_refcount+0x9c>)
 80135ec:	4618      	mov	r0, r3
 80135ee:	f7ff feb5 	bl	801335c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80135f2:	4b09      	ldr	r3, [pc, #36]	; (8013618 <dhcp_inc_pcb_refcount+0x8c>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	2200      	movs	r2, #0
 80135f8:	490c      	ldr	r1, [pc, #48]	; (801362c <dhcp_inc_pcb_refcount+0xa0>)
 80135fa:	4618      	mov	r0, r3
 80135fc:	f7ff ff1c 	bl	8013438 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8013600:	4b04      	ldr	r3, [pc, #16]	; (8013614 <dhcp_inc_pcb_refcount+0x88>)
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	3301      	adds	r3, #1
 8013606:	b2da      	uxtb	r2, r3
 8013608:	4b02      	ldr	r3, [pc, #8]	; (8013614 <dhcp_inc_pcb_refcount+0x88>)
 801360a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801360c:	2300      	movs	r3, #0
}
 801360e:	4618      	mov	r0, r3
 8013610:	bd80      	pop	{r7, pc}
 8013612:	bf00      	nop
 8013614:	2000cec4 	.word	0x2000cec4
 8013618:	2000cec0 	.word	0x2000cec0
 801361c:	0801b444 	.word	0x0801b444
 8013620:	0801b47c 	.word	0x0801b47c
 8013624:	0801b4a4 	.word	0x0801b4a4
 8013628:	0801e658 	.word	0x0801e658
 801362c:	08014ec5 	.word	0x08014ec5

08013630 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013634:	4b0e      	ldr	r3, [pc, #56]	; (8013670 <dhcp_dec_pcb_refcount+0x40>)
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d105      	bne.n	8013648 <dhcp_dec_pcb_refcount+0x18>
 801363c:	4b0d      	ldr	r3, [pc, #52]	; (8013674 <dhcp_dec_pcb_refcount+0x44>)
 801363e:	22ff      	movs	r2, #255	; 0xff
 8013640:	490d      	ldr	r1, [pc, #52]	; (8013678 <dhcp_dec_pcb_refcount+0x48>)
 8013642:	480e      	ldr	r0, [pc, #56]	; (801367c <dhcp_dec_pcb_refcount+0x4c>)
 8013644:	f004 fbb2 	bl	8017dac <iprintf>
  dhcp_pcb_refcount--;
 8013648:	4b09      	ldr	r3, [pc, #36]	; (8013670 <dhcp_dec_pcb_refcount+0x40>)
 801364a:	781b      	ldrb	r3, [r3, #0]
 801364c:	3b01      	subs	r3, #1
 801364e:	b2da      	uxtb	r2, r3
 8013650:	4b07      	ldr	r3, [pc, #28]	; (8013670 <dhcp_dec_pcb_refcount+0x40>)
 8013652:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013654:	4b06      	ldr	r3, [pc, #24]	; (8013670 <dhcp_dec_pcb_refcount+0x40>)
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d107      	bne.n	801366c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801365c:	4b08      	ldr	r3, [pc, #32]	; (8013680 <dhcp_dec_pcb_refcount+0x50>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4618      	mov	r0, r3
 8013662:	f7ff ff09 	bl	8013478 <udp_remove>
    dhcp_pcb = NULL;
 8013666:	4b06      	ldr	r3, [pc, #24]	; (8013680 <dhcp_dec_pcb_refcount+0x50>)
 8013668:	2200      	movs	r2, #0
 801366a:	601a      	str	r2, [r3, #0]
  }
}
 801366c:	bf00      	nop
 801366e:	bd80      	pop	{r7, pc}
 8013670:	2000cec4 	.word	0x2000cec4
 8013674:	0801b444 	.word	0x0801b444
 8013678:	0801b4cc 	.word	0x0801b4cc
 801367c:	0801b4a4 	.word	0x0801b4a4
 8013680:	2000cec0 	.word	0x2000cec0

08013684 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b084      	sub	sp, #16
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013690:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013692:	210c      	movs	r1, #12
 8013694:	68f8      	ldr	r0, [r7, #12]
 8013696:	f001 f857 	bl	8014748 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801369a:	4b06      	ldr	r3, [pc, #24]	; (80136b4 <dhcp_handle_nak+0x30>)
 801369c:	4a05      	ldr	r2, [pc, #20]	; (80136b4 <dhcp_handle_nak+0x30>)
 801369e:	4905      	ldr	r1, [pc, #20]	; (80136b4 <dhcp_handle_nak+0x30>)
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f7f8 f92b 	bl	800b8fc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f000 fc4a 	bl	8013f40 <dhcp_discover>
}
 80136ac:	bf00      	nop
 80136ae:	3710      	adds	r7, #16
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	0801e658 	.word	0x0801e658

080136b8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80136b8:	b580      	push	{r7, lr}
 80136ba:	b084      	sub	sp, #16
 80136bc:	af00      	add	r7, sp, #0
 80136be:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136c4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80136c6:	2108      	movs	r1, #8
 80136c8:	68f8      	ldr	r0, [r7, #12]
 80136ca:	f001 f83d 	bl	8014748 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80136ce:	68fb      	ldr	r3, [r7, #12]
 80136d0:	331c      	adds	r3, #28
 80136d2:	2200      	movs	r2, #0
 80136d4:	4619      	mov	r1, r3
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f002 fb3e 	bl	8015d58 <etharp_query>
 80136dc:	4603      	mov	r3, r0
 80136de:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80136e0:	68fb      	ldr	r3, [r7, #12]
 80136e2:	799b      	ldrb	r3, [r3, #6]
 80136e4:	2bff      	cmp	r3, #255	; 0xff
 80136e6:	d005      	beq.n	80136f4 <dhcp_check+0x3c>
    dhcp->tries++;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	799b      	ldrb	r3, [r3, #6]
 80136ec:	3301      	adds	r3, #1
 80136ee:	b2da      	uxtb	r2, r3
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80136f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80136f8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80136fa:	893b      	ldrh	r3, [r7, #8]
 80136fc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013700:	4a06      	ldr	r2, [pc, #24]	; (801371c <dhcp_check+0x64>)
 8013702:	fb82 1203 	smull	r1, r2, r2, r3
 8013706:	1152      	asrs	r2, r2, #5
 8013708:	17db      	asrs	r3, r3, #31
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	b29a      	uxth	r2, r3
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013712:	bf00      	nop
 8013714:	3710      	adds	r7, #16
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}
 801371a:	bf00      	nop
 801371c:	10624dd3 	.word	0x10624dd3

08013720 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801372e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013730:	4b0c      	ldr	r3, [pc, #48]	; (8013764 <dhcp_handle_offer+0x44>)
 8013732:	789b      	ldrb	r3, [r3, #2]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d011      	beq.n	801375c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	2200      	movs	r2, #0
 801373c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801373e:	4b0a      	ldr	r3, [pc, #40]	; (8013768 <dhcp_handle_offer+0x48>)
 8013740:	689b      	ldr	r3, [r3, #8]
 8013742:	4618      	mov	r0, r3
 8013744:	f7f7 f9c9 	bl	800aada <lwip_htonl>
 8013748:	4602      	mov	r2, r0
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	691a      	ldr	r2, [r3, #16]
 8013752:	68fb      	ldr	r3, [r7, #12]
 8013754:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 f808 	bl	801376c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801375c:	bf00      	nop
 801375e:	3710      	adds	r7, #16
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	2000ceb8 	.word	0x2000ceb8
 8013768:	2000ce98 	.word	0x2000ce98

0801376c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801376c:	b5b0      	push	{r4, r5, r7, lr}
 801376e:	b08a      	sub	sp, #40	; 0x28
 8013770:	af02      	add	r7, sp, #8
 8013772:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	2b00      	cmp	r3, #0
 8013778:	d109      	bne.n	801378e <dhcp_select+0x22>
 801377a:	4b71      	ldr	r3, [pc, #452]	; (8013940 <dhcp_select+0x1d4>)
 801377c:	f240 1277 	movw	r2, #375	; 0x177
 8013780:	4970      	ldr	r1, [pc, #448]	; (8013944 <dhcp_select+0x1d8>)
 8013782:	4871      	ldr	r0, [pc, #452]	; (8013948 <dhcp_select+0x1dc>)
 8013784:	f004 fb12 	bl	8017dac <iprintf>
 8013788:	f06f 030f 	mvn.w	r3, #15
 801378c:	e0d3      	b.n	8013936 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013792:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8013794:	69bb      	ldr	r3, [r7, #24]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d109      	bne.n	80137ae <dhcp_select+0x42>
 801379a:	4b69      	ldr	r3, [pc, #420]	; (8013940 <dhcp_select+0x1d4>)
 801379c:	f240 1279 	movw	r2, #377	; 0x179
 80137a0:	496a      	ldr	r1, [pc, #424]	; (801394c <dhcp_select+0x1e0>)
 80137a2:	4869      	ldr	r0, [pc, #420]	; (8013948 <dhcp_select+0x1dc>)
 80137a4:	f004 fb02 	bl	8017dac <iprintf>
 80137a8:	f06f 0305 	mvn.w	r3, #5
 80137ac:	e0c3      	b.n	8013936 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80137ae:	2101      	movs	r1, #1
 80137b0:	69b8      	ldr	r0, [r7, #24]
 80137b2:	f000 ffc9 	bl	8014748 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80137b6:	f107 030c 	add.w	r3, r7, #12
 80137ba:	2203      	movs	r2, #3
 80137bc:	69b9      	ldr	r1, [r7, #24]
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f001 fc4e 	bl	8015060 <dhcp_create_msg>
 80137c4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	f000 8085 	beq.w	80138d8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80137d4:	89b8      	ldrh	r0, [r7, #12]
 80137d6:	693b      	ldr	r3, [r7, #16]
 80137d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137dc:	2302      	movs	r3, #2
 80137de:	2239      	movs	r2, #57	; 0x39
 80137e0:	f000 ffcc 	bl	801477c <dhcp_option>
 80137e4:	4603      	mov	r3, r0
 80137e6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80137e8:	89b8      	ldrh	r0, [r7, #12]
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80137f4:	461a      	mov	r2, r3
 80137f6:	f001 f81b 	bl	8014830 <dhcp_option_short>
 80137fa:	4603      	mov	r3, r0
 80137fc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80137fe:	89b8      	ldrh	r0, [r7, #12]
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013806:	2304      	movs	r3, #4
 8013808:	2232      	movs	r2, #50	; 0x32
 801380a:	f000 ffb7 	bl	801477c <dhcp_option>
 801380e:	4603      	mov	r3, r0
 8013810:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013812:	89bc      	ldrh	r4, [r7, #12]
 8013814:	693b      	ldr	r3, [r7, #16]
 8013816:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	69db      	ldr	r3, [r3, #28]
 801381e:	4618      	mov	r0, r3
 8013820:	f7f7 f95b 	bl	800aada <lwip_htonl>
 8013824:	4603      	mov	r3, r0
 8013826:	461a      	mov	r2, r3
 8013828:	4629      	mov	r1, r5
 801382a:	4620      	mov	r0, r4
 801382c:	f001 f832 	bl	8014894 <dhcp_option_long>
 8013830:	4603      	mov	r3, r0
 8013832:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8013834:	89b8      	ldrh	r0, [r7, #12]
 8013836:	693b      	ldr	r3, [r7, #16]
 8013838:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801383c:	2304      	movs	r3, #4
 801383e:	2236      	movs	r2, #54	; 0x36
 8013840:	f000 ff9c 	bl	801477c <dhcp_option>
 8013844:	4603      	mov	r3, r0
 8013846:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8013848:	89bc      	ldrh	r4, [r7, #12]
 801384a:	693b      	ldr	r3, [r7, #16]
 801384c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013850:	69bb      	ldr	r3, [r7, #24]
 8013852:	699b      	ldr	r3, [r3, #24]
 8013854:	4618      	mov	r0, r3
 8013856:	f7f7 f940 	bl	800aada <lwip_htonl>
 801385a:	4603      	mov	r3, r0
 801385c:	461a      	mov	r2, r3
 801385e:	4629      	mov	r1, r5
 8013860:	4620      	mov	r0, r4
 8013862:	f001 f817 	bl	8014894 <dhcp_option_long>
 8013866:	4603      	mov	r3, r0
 8013868:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801386a:	89b8      	ldrh	r0, [r7, #12]
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013872:	2303      	movs	r3, #3
 8013874:	2237      	movs	r2, #55	; 0x37
 8013876:	f000 ff81 	bl	801477c <dhcp_option>
 801387a:	4603      	mov	r3, r0
 801387c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801387e:	2300      	movs	r3, #0
 8013880:	77bb      	strb	r3, [r7, #30]
 8013882:	e00e      	b.n	80138a2 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013884:	89b8      	ldrh	r0, [r7, #12]
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801388c:	7fbb      	ldrb	r3, [r7, #30]
 801388e:	4a30      	ldr	r2, [pc, #192]	; (8013950 <dhcp_select+0x1e4>)
 8013890:	5cd3      	ldrb	r3, [r2, r3]
 8013892:	461a      	mov	r2, r3
 8013894:	f000 ffa6 	bl	80147e4 <dhcp_option_byte>
 8013898:	4603      	mov	r3, r0
 801389a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801389c:	7fbb      	ldrb	r3, [r7, #30]
 801389e:	3301      	adds	r3, #1
 80138a0:	77bb      	strb	r3, [r7, #30]
 80138a2:	7fbb      	ldrb	r3, [r7, #30]
 80138a4:	2b02      	cmp	r3, #2
 80138a6:	d9ed      	bls.n	8013884 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80138a8:	89b8      	ldrh	r0, [r7, #12]
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	33f0      	adds	r3, #240	; 0xf0
 80138ae:	697a      	ldr	r2, [r7, #20]
 80138b0:	4619      	mov	r1, r3
 80138b2:	f001 fcab 	bl	801520c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80138b6:	4b27      	ldr	r3, [pc, #156]	; (8013954 <dhcp_select+0x1e8>)
 80138b8:	6818      	ldr	r0, [r3, #0]
 80138ba:	4b27      	ldr	r3, [pc, #156]	; (8013958 <dhcp_select+0x1ec>)
 80138bc:	9301      	str	r3, [sp, #4]
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	9300      	str	r3, [sp, #0]
 80138c2:	2343      	movs	r3, #67	; 0x43
 80138c4:	4a25      	ldr	r2, [pc, #148]	; (801395c <dhcp_select+0x1f0>)
 80138c6:	6979      	ldr	r1, [r7, #20]
 80138c8:	f7ff fbda 	bl	8013080 <udp_sendto_if_src>
 80138cc:	4603      	mov	r3, r0
 80138ce:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80138d0:	6978      	ldr	r0, [r7, #20]
 80138d2:	f7f8 fd21 	bl	800c318 <pbuf_free>
 80138d6:	e001      	b.n	80138dc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80138d8:	23ff      	movs	r3, #255	; 0xff
 80138da:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	799b      	ldrb	r3, [r3, #6]
 80138e0:	2bff      	cmp	r3, #255	; 0xff
 80138e2:	d005      	beq.n	80138f0 <dhcp_select+0x184>
    dhcp->tries++;
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	799b      	ldrb	r3, [r3, #6]
 80138e8:	3301      	adds	r3, #1
 80138ea:	b2da      	uxtb	r2, r3
 80138ec:	69bb      	ldr	r3, [r7, #24]
 80138ee:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80138f0:	69bb      	ldr	r3, [r7, #24]
 80138f2:	799b      	ldrb	r3, [r3, #6]
 80138f4:	2b05      	cmp	r3, #5
 80138f6:	d80d      	bhi.n	8013914 <dhcp_select+0x1a8>
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	799b      	ldrb	r3, [r3, #6]
 80138fc:	461a      	mov	r2, r3
 80138fe:	2301      	movs	r3, #1
 8013900:	4093      	lsls	r3, r2
 8013902:	b29b      	uxth	r3, r3
 8013904:	461a      	mov	r2, r3
 8013906:	0152      	lsls	r2, r2, #5
 8013908:	1ad2      	subs	r2, r2, r3
 801390a:	0092      	lsls	r2, r2, #2
 801390c:	4413      	add	r3, r2
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	b29b      	uxth	r3, r3
 8013912:	e001      	b.n	8013918 <dhcp_select+0x1ac>
 8013914:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013918:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801391a:	89fb      	ldrh	r3, [r7, #14]
 801391c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013920:	4a0f      	ldr	r2, [pc, #60]	; (8013960 <dhcp_select+0x1f4>)
 8013922:	fb82 1203 	smull	r1, r2, r2, r3
 8013926:	1152      	asrs	r2, r2, #5
 8013928:	17db      	asrs	r3, r3, #31
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	b29a      	uxth	r2, r3
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013932:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013936:	4618      	mov	r0, r3
 8013938:	3720      	adds	r7, #32
 801393a:	46bd      	mov	sp, r7
 801393c:	bdb0      	pop	{r4, r5, r7, pc}
 801393e:	bf00      	nop
 8013940:	0801b444 	.word	0x0801b444
 8013944:	0801b4f0 	.word	0x0801b4f0
 8013948:	0801b4a4 	.word	0x0801b4a4
 801394c:	0801b50c 	.word	0x0801b50c
 8013950:	20000040 	.word	0x20000040
 8013954:	2000cec0 	.word	0x2000cec0
 8013958:	0801e658 	.word	0x0801e658
 801395c:	0801e65c 	.word	0x0801e65c
 8013960:	10624dd3 	.word	0x10624dd3

08013964 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b082      	sub	sp, #8
 8013968:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801396a:	4b27      	ldr	r3, [pc, #156]	; (8013a08 <dhcp_coarse_tmr+0xa4>)
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	607b      	str	r3, [r7, #4]
 8013970:	e042      	b.n	80139f8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013976:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8013978:	683b      	ldr	r3, [r7, #0]
 801397a:	2b00      	cmp	r3, #0
 801397c:	d039      	beq.n	80139f2 <dhcp_coarse_tmr+0x8e>
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	795b      	ldrb	r3, [r3, #5]
 8013982:	2b00      	cmp	r3, #0
 8013984:	d035      	beq.n	80139f2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8013986:	683b      	ldr	r3, [r7, #0]
 8013988:	8a9b      	ldrh	r3, [r3, #20]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d012      	beq.n	80139b4 <dhcp_coarse_tmr+0x50>
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	8a5b      	ldrh	r3, [r3, #18]
 8013992:	3301      	adds	r3, #1
 8013994:	b29a      	uxth	r2, r3
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	825a      	strh	r2, [r3, #18]
 801399a:	683b      	ldr	r3, [r7, #0]
 801399c:	8a5a      	ldrh	r2, [r3, #18]
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	8a9b      	ldrh	r3, [r3, #20]
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d106      	bne.n	80139b4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 fe34 	bl	8014614 <dhcp_release_and_stop>
        dhcp_start(netif);
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f000 f96b 	bl	8013c88 <dhcp_start>
 80139b2:	e01e      	b.n	80139f2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	8a1b      	ldrh	r3, [r3, #16]
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00b      	beq.n	80139d4 <dhcp_coarse_tmr+0x70>
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	8a1b      	ldrh	r3, [r3, #16]
 80139c0:	1e5a      	subs	r2, r3, #1
 80139c2:	b291      	uxth	r1, r2
 80139c4:	683a      	ldr	r2, [r7, #0]
 80139c6:	8211      	strh	r1, [r2, #16]
 80139c8:	2b01      	cmp	r3, #1
 80139ca:	d103      	bne.n	80139d4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80139cc:	6878      	ldr	r0, [r7, #4]
 80139ce:	f000 f8c7 	bl	8013b60 <dhcp_t2_timeout>
 80139d2:	e00e      	b.n	80139f2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	89db      	ldrh	r3, [r3, #14]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d00a      	beq.n	80139f2 <dhcp_coarse_tmr+0x8e>
 80139dc:	683b      	ldr	r3, [r7, #0]
 80139de:	89db      	ldrh	r3, [r3, #14]
 80139e0:	1e5a      	subs	r2, r3, #1
 80139e2:	b291      	uxth	r1, r2
 80139e4:	683a      	ldr	r2, [r7, #0]
 80139e6:	81d1      	strh	r1, [r2, #14]
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d102      	bne.n	80139f2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80139ec:	6878      	ldr	r0, [r7, #4]
 80139ee:	f000 f888 	bl	8013b02 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	607b      	str	r3, [r7, #4]
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d1b9      	bne.n	8013972 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80139fe:	bf00      	nop
 8013a00:	bf00      	nop
 8013a02:	3708      	adds	r7, #8
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}
 8013a08:	2000ce2c 	.word	0x2000ce2c

08013a0c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013a0c:	b580      	push	{r7, lr}
 8013a0e:	b082      	sub	sp, #8
 8013a10:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8013a12:	4b16      	ldr	r3, [pc, #88]	; (8013a6c <dhcp_fine_tmr+0x60>)
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	607b      	str	r3, [r7, #4]
 8013a18:	e020      	b.n	8013a5c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a1e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d017      	beq.n	8013a56 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	891b      	ldrh	r3, [r3, #8]
 8013a2a:	2b01      	cmp	r3, #1
 8013a2c:	d906      	bls.n	8013a3c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013a2e:	683b      	ldr	r3, [r7, #0]
 8013a30:	891b      	ldrh	r3, [r3, #8]
 8013a32:	3b01      	subs	r3, #1
 8013a34:	b29a      	uxth	r2, r3
 8013a36:	683b      	ldr	r3, [r7, #0]
 8013a38:	811a      	strh	r2, [r3, #8]
 8013a3a:	e00c      	b.n	8013a56 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	891b      	ldrh	r3, [r3, #8]
 8013a40:	2b01      	cmp	r3, #1
 8013a42:	d108      	bne.n	8013a56 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013a44:	683b      	ldr	r3, [r7, #0]
 8013a46:	891b      	ldrh	r3, [r3, #8]
 8013a48:	3b01      	subs	r3, #1
 8013a4a:	b29a      	uxth	r2, r3
 8013a4c:	683b      	ldr	r3, [r7, #0]
 8013a4e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013a50:	6878      	ldr	r0, [r7, #4]
 8013a52:	f000 f80d 	bl	8013a70 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8013a56:	687b      	ldr	r3, [r7, #4]
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	607b      	str	r3, [r7, #4]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d1db      	bne.n	8013a1a <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8013a62:	bf00      	nop
 8013a64:	bf00      	nop
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	2000ce2c 	.word	0x2000ce2c

08013a70 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a7c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	795b      	ldrb	r3, [r3, #5]
 8013a82:	2b0c      	cmp	r3, #12
 8013a84:	d003      	beq.n	8013a8e <dhcp_timeout+0x1e>
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	795b      	ldrb	r3, [r3, #5]
 8013a8a:	2b06      	cmp	r3, #6
 8013a8c:	d103      	bne.n	8013a96 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 fa56 	bl	8013f40 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013a94:	e031      	b.n	8013afa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	795b      	ldrb	r3, [r3, #5]
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d10e      	bne.n	8013abc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	799b      	ldrb	r3, [r3, #6]
 8013aa2:	2b05      	cmp	r3, #5
 8013aa4:	d803      	bhi.n	8013aae <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013aa6:	6878      	ldr	r0, [r7, #4]
 8013aa8:	f7ff fe60 	bl	801376c <dhcp_select>
}
 8013aac:	e025      	b.n	8013afa <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8013aae:	6878      	ldr	r0, [r7, #4]
 8013ab0:	f000 fdb0 	bl	8014614 <dhcp_release_and_stop>
      dhcp_start(netif);
 8013ab4:	6878      	ldr	r0, [r7, #4]
 8013ab6:	f000 f8e7 	bl	8013c88 <dhcp_start>
}
 8013aba:	e01e      	b.n	8013afa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	795b      	ldrb	r3, [r3, #5]
 8013ac0:	2b08      	cmp	r3, #8
 8013ac2:	d10b      	bne.n	8013adc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013ac4:	68fb      	ldr	r3, [r7, #12]
 8013ac6:	799b      	ldrb	r3, [r3, #6]
 8013ac8:	2b01      	cmp	r3, #1
 8013aca:	d803      	bhi.n	8013ad4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013acc:	6878      	ldr	r0, [r7, #4]
 8013ace:	f7ff fdf3 	bl	80136b8 <dhcp_check>
}
 8013ad2:	e012      	b.n	8013afa <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013ad4:	6878      	ldr	r0, [r7, #4]
 8013ad6:	f000 fad5 	bl	8014084 <dhcp_bind>
}
 8013ada:	e00e      	b.n	8013afa <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	795b      	ldrb	r3, [r3, #5]
 8013ae0:	2b03      	cmp	r3, #3
 8013ae2:	d10a      	bne.n	8013afa <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	799b      	ldrb	r3, [r3, #6]
 8013ae8:	2b01      	cmp	r3, #1
 8013aea:	d803      	bhi.n	8013af4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f000 fcdb 	bl	80144a8 <dhcp_reboot>
}
 8013af2:	e002      	b.n	8013afa <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f000 fa23 	bl	8013f40 <dhcp_discover>
}
 8013afa:	bf00      	nop
 8013afc:	3710      	adds	r7, #16
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd80      	pop	{r7, pc}

08013b02 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013b02:	b580      	push	{r7, lr}
 8013b04:	b084      	sub	sp, #16
 8013b06:	af00      	add	r7, sp, #0
 8013b08:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b0e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	795b      	ldrb	r3, [r3, #5]
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	d007      	beq.n	8013b28 <dhcp_t1_timeout+0x26>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	795b      	ldrb	r3, [r3, #5]
 8013b1c:	2b0a      	cmp	r3, #10
 8013b1e:	d003      	beq.n	8013b28 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b24:	2b05      	cmp	r3, #5
 8013b26:	d117      	bne.n	8013b58 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f000 fb85 	bl	8014238 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	899b      	ldrh	r3, [r3, #12]
 8013b32:	461a      	mov	r2, r3
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	8a5b      	ldrh	r3, [r3, #18]
 8013b38:	1ad3      	subs	r3, r2, r3
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	dd0c      	ble.n	8013b58 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	899b      	ldrh	r3, [r3, #12]
 8013b42:	461a      	mov	r2, r3
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	8a5b      	ldrh	r3, [r3, #18]
 8013b48:	1ad3      	subs	r3, r2, r3
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	da00      	bge.n	8013b50 <dhcp_t1_timeout+0x4e>
 8013b4e:	3301      	adds	r3, #1
 8013b50:	105b      	asrs	r3, r3, #1
 8013b52:	b29a      	uxth	r2, r3
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8013b58:	bf00      	nop
 8013b5a:	3710      	adds	r7, #16
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b084      	sub	sp, #16
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b6c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	795b      	ldrb	r3, [r3, #5]
 8013b72:	2b01      	cmp	r3, #1
 8013b74:	d00b      	beq.n	8013b8e <dhcp_t2_timeout+0x2e>
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	795b      	ldrb	r3, [r3, #5]
 8013b7a:	2b0a      	cmp	r3, #10
 8013b7c:	d007      	beq.n	8013b8e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b82:	2b05      	cmp	r3, #5
 8013b84:	d003      	beq.n	8013b8e <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	795b      	ldrb	r3, [r3, #5]
 8013b8a:	2b04      	cmp	r3, #4
 8013b8c:	d117      	bne.n	8013bbe <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f000 fbee 	bl	8014370 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	8a9b      	ldrh	r3, [r3, #20]
 8013b98:	461a      	mov	r2, r3
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	8a5b      	ldrh	r3, [r3, #18]
 8013b9e:	1ad3      	subs	r3, r2, r3
 8013ba0:	2b01      	cmp	r3, #1
 8013ba2:	dd0c      	ble.n	8013bbe <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	8a9b      	ldrh	r3, [r3, #20]
 8013ba8:	461a      	mov	r2, r3
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	8a5b      	ldrh	r3, [r3, #18]
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	da00      	bge.n	8013bb6 <dhcp_t2_timeout+0x56>
 8013bb4:	3301      	adds	r3, #1
 8013bb6:	105b      	asrs	r3, r3, #1
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8013bbe:	bf00      	nop
 8013bc0:	3710      	adds	r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
	...

08013bc8 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b084      	sub	sp, #16
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd6:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	2200      	movs	r2, #0
 8013bdc:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013bde:	68fb      	ldr	r3, [r7, #12]
 8013be0:	2200      	movs	r2, #0
 8013be2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013be4:	4b26      	ldr	r3, [pc, #152]	; (8013c80 <dhcp_handle_ack+0xb8>)
 8013be6:	78db      	ldrb	r3, [r3, #3]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d003      	beq.n	8013bf4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013bec:	4b25      	ldr	r3, [pc, #148]	; (8013c84 <dhcp_handle_ack+0xbc>)
 8013bee:	68da      	ldr	r2, [r3, #12]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013bf4:	4b22      	ldr	r3, [pc, #136]	; (8013c80 <dhcp_handle_ack+0xb8>)
 8013bf6:	791b      	ldrb	r3, [r3, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d004      	beq.n	8013c06 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013bfc:	4b21      	ldr	r3, [pc, #132]	; (8013c84 <dhcp_handle_ack+0xbc>)
 8013bfe:	691a      	ldr	r2, [r3, #16]
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8013c04:	e004      	b.n	8013c10 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c0a:	085a      	lsrs	r2, r3, #1
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013c10:	4b1b      	ldr	r3, [pc, #108]	; (8013c80 <dhcp_handle_ack+0xb8>)
 8013c12:	795b      	ldrb	r3, [r3, #5]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d004      	beq.n	8013c22 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013c18:	4b1a      	ldr	r3, [pc, #104]	; (8013c84 <dhcp_handle_ack+0xbc>)
 8013c1a:	695a      	ldr	r2, [r3, #20]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8013c20:	e007      	b.n	8013c32 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013c26:	4613      	mov	r3, r2
 8013c28:	00db      	lsls	r3, r3, #3
 8013c2a:	1a9b      	subs	r3, r3, r2
 8013c2c:	08da      	lsrs	r2, r3, #3
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	691a      	ldr	r2, [r3, #16]
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013c3a:	4b11      	ldr	r3, [pc, #68]	; (8013c80 <dhcp_handle_ack+0xb8>)
 8013c3c:	799b      	ldrb	r3, [r3, #6]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d00b      	beq.n	8013c5a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013c42:	4b10      	ldr	r3, [pc, #64]	; (8013c84 <dhcp_handle_ack+0xbc>)
 8013c44:	699b      	ldr	r3, [r3, #24]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7f6 ff47 	bl	800aada <lwip_htonl>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	2201      	movs	r2, #1
 8013c56:	71da      	strb	r2, [r3, #7]
 8013c58:	e002      	b.n	8013c60 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2200      	movs	r2, #0
 8013c5e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013c60:	4b07      	ldr	r3, [pc, #28]	; (8013c80 <dhcp_handle_ack+0xb8>)
 8013c62:	79db      	ldrb	r3, [r3, #7]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d007      	beq.n	8013c78 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013c68:	4b06      	ldr	r3, [pc, #24]	; (8013c84 <dhcp_handle_ack+0xbc>)
 8013c6a:	69db      	ldr	r3, [r3, #28]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7f6 ff34 	bl	800aada <lwip_htonl>
 8013c72:	4602      	mov	r2, r0
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013c78:	bf00      	nop
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	2000ceb8 	.word	0x2000ceb8
 8013c84:	2000ce98 	.word	0x2000ce98

08013c88 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b084      	sub	sp, #16
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d109      	bne.n	8013caa <dhcp_start+0x22>
 8013c96:	4b37      	ldr	r3, [pc, #220]	; (8013d74 <dhcp_start+0xec>)
 8013c98:	f240 22e7 	movw	r2, #743	; 0x2e7
 8013c9c:	4936      	ldr	r1, [pc, #216]	; (8013d78 <dhcp_start+0xf0>)
 8013c9e:	4837      	ldr	r0, [pc, #220]	; (8013d7c <dhcp_start+0xf4>)
 8013ca0:	f004 f884 	bl	8017dac <iprintf>
 8013ca4:	f06f 030f 	mvn.w	r3, #15
 8013ca8:	e060      	b.n	8013d6c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013cb0:	f003 0301 	and.w	r3, r3, #1
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d109      	bne.n	8013ccc <dhcp_start+0x44>
 8013cb8:	4b2e      	ldr	r3, [pc, #184]	; (8013d74 <dhcp_start+0xec>)
 8013cba:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8013cbe:	4930      	ldr	r1, [pc, #192]	; (8013d80 <dhcp_start+0xf8>)
 8013cc0:	482e      	ldr	r0, [pc, #184]	; (8013d7c <dhcp_start+0xf4>)
 8013cc2:	f004 f873 	bl	8017dac <iprintf>
 8013cc6:	f06f 030f 	mvn.w	r3, #15
 8013cca:	e04f      	b.n	8013d6c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cd0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cd6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013cda:	d202      	bcs.n	8013ce2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8013ce0:	e044      	b.n	8013d6c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d10d      	bne.n	8013d04 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013ce8:	2034      	movs	r0, #52	; 0x34
 8013cea:	f7f7 fa4b 	bl	800b184 <mem_malloc>
 8013cee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d102      	bne.n	8013cfc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8013cfa:	e037      	b.n	8013d6c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	68fa      	ldr	r2, [r7, #12]
 8013d00:	625a      	str	r2, [r3, #36]	; 0x24
 8013d02:	e005      	b.n	8013d10 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	791b      	ldrb	r3, [r3, #4]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d001      	beq.n	8013d10 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013d0c:	f7ff fc90 	bl	8013630 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013d10:	2234      	movs	r2, #52	; 0x34
 8013d12:	2100      	movs	r1, #0
 8013d14:	68f8      	ldr	r0, [r7, #12]
 8013d16:	f004 f8ae 	bl	8017e76 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013d1a:	f7ff fc37 	bl	801358c <dhcp_inc_pcb_refcount>
 8013d1e:	4603      	mov	r3, r0
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d002      	beq.n	8013d2a <dhcp_start+0xa2>
    return ERR_MEM;
 8013d24:	f04f 33ff 	mov.w	r3, #4294967295
 8013d28:	e020      	b.n	8013d6c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8013d2a:	68fb      	ldr	r3, [r7, #12]
 8013d2c:	2201      	movs	r2, #1
 8013d2e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013d36:	f003 0304 	and.w	r3, r3, #4
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d105      	bne.n	8013d4a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8013d3e:	2102      	movs	r1, #2
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	f000 fd01 	bl	8014748 <dhcp_set_state>
    return ERR_OK;
 8013d46:	2300      	movs	r3, #0
 8013d48:	e010      	b.n	8013d6c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013d4a:	6878      	ldr	r0, [r7, #4]
 8013d4c:	f000 f8f8 	bl	8013f40 <dhcp_discover>
 8013d50:	4603      	mov	r3, r0
 8013d52:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013d54:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d005      	beq.n	8013d68 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013d5c:	6878      	ldr	r0, [r7, #4]
 8013d5e:	f000 fc59 	bl	8014614 <dhcp_release_and_stop>
    return ERR_MEM;
 8013d62:	f04f 33ff 	mov.w	r3, #4294967295
 8013d66:	e001      	b.n	8013d6c <dhcp_start+0xe4>
  }
  return result;
 8013d68:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013d6c:	4618      	mov	r0, r3
 8013d6e:	3710      	adds	r7, #16
 8013d70:	46bd      	mov	sp, r7
 8013d72:	bd80      	pop	{r7, pc}
 8013d74:	0801b444 	.word	0x0801b444
 8013d78:	0801b528 	.word	0x0801b528
 8013d7c:	0801b4a4 	.word	0x0801b4a4
 8013d80:	0801b56c 	.word	0x0801b56c

08013d84 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d90:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8013d92:	68fb      	ldr	r3, [r7, #12]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d025      	beq.n	8013de4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	795b      	ldrb	r3, [r3, #5]
 8013d9c:	2b0a      	cmp	r3, #10
 8013d9e:	d008      	beq.n	8013db2 <dhcp_network_changed+0x2e>
 8013da0:	2b0a      	cmp	r3, #10
 8013da2:	dc0d      	bgt.n	8013dc0 <dhcp_network_changed+0x3c>
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d01f      	beq.n	8013de8 <dhcp_network_changed+0x64>
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	db09      	blt.n	8013dc0 <dhcp_network_changed+0x3c>
 8013dac:	3b03      	subs	r3, #3
 8013dae:	2b02      	cmp	r3, #2
 8013db0:	d806      	bhi.n	8013dc0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	2200      	movs	r2, #0
 8013db6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013db8:	6878      	ldr	r0, [r7, #4]
 8013dba:	f000 fb75 	bl	80144a8 <dhcp_reboot>
      break;
 8013dbe:	e014      	b.n	8013dea <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	795b      	ldrb	r3, [r3, #5]
 8013dc4:	2b0c      	cmp	r3, #12
 8013dc6:	d906      	bls.n	8013dd6 <dhcp_network_changed+0x52>
 8013dc8:	4b09      	ldr	r3, [pc, #36]	; (8013df0 <dhcp_network_changed+0x6c>)
 8013dca:	f240 326d 	movw	r2, #877	; 0x36d
 8013dce:	4909      	ldr	r1, [pc, #36]	; (8013df4 <dhcp_network_changed+0x70>)
 8013dd0:	4809      	ldr	r0, [pc, #36]	; (8013df8 <dhcp_network_changed+0x74>)
 8013dd2:	f003 ffeb 	bl	8017dac <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013ddc:	6878      	ldr	r0, [r7, #4]
 8013dde:	f000 f8af 	bl	8013f40 <dhcp_discover>
      break;
 8013de2:	e002      	b.n	8013dea <dhcp_network_changed+0x66>
    return;
 8013de4:	bf00      	nop
 8013de6:	e000      	b.n	8013dea <dhcp_network_changed+0x66>
      break;
 8013de8:	bf00      	nop
  }
}
 8013dea:	3710      	adds	r7, #16
 8013dec:	46bd      	mov	sp, r7
 8013dee:	bd80      	pop	{r7, pc}
 8013df0:	0801b444 	.word	0x0801b444
 8013df4:	0801b590 	.word	0x0801b590
 8013df8:	0801b4a4 	.word	0x0801b4a4

08013dfc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b084      	sub	sp, #16
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d107      	bne.n	8013e1c <dhcp_arp_reply+0x20>
 8013e0c:	4b0e      	ldr	r3, [pc, #56]	; (8013e48 <dhcp_arp_reply+0x4c>)
 8013e0e:	f240 328b 	movw	r2, #907	; 0x38b
 8013e12:	490e      	ldr	r1, [pc, #56]	; (8013e4c <dhcp_arp_reply+0x50>)
 8013e14:	480e      	ldr	r0, [pc, #56]	; (8013e50 <dhcp_arp_reply+0x54>)
 8013e16:	f003 ffc9 	bl	8017dac <iprintf>
 8013e1a:	e012      	b.n	8013e42 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e20:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d00c      	beq.n	8013e42 <dhcp_arp_reply+0x46>
 8013e28:	68fb      	ldr	r3, [r7, #12]
 8013e2a:	795b      	ldrb	r3, [r3, #5]
 8013e2c:	2b08      	cmp	r3, #8
 8013e2e:	d108      	bne.n	8013e42 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013e30:	683b      	ldr	r3, [r7, #0]
 8013e32:	681a      	ldr	r2, [r3, #0]
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	69db      	ldr	r3, [r3, #28]
 8013e38:	429a      	cmp	r2, r3
 8013e3a:	d102      	bne.n	8013e42 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013e3c:	6878      	ldr	r0, [r7, #4]
 8013e3e:	f000 f809 	bl	8013e54 <dhcp_decline>
    }
  }
}
 8013e42:	3710      	adds	r7, #16
 8013e44:	46bd      	mov	sp, r7
 8013e46:	bd80      	pop	{r7, pc}
 8013e48:	0801b444 	.word	0x0801b444
 8013e4c:	0801b528 	.word	0x0801b528
 8013e50:	0801b4a4 	.word	0x0801b4a4

08013e54 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013e54:	b5b0      	push	{r4, r5, r7, lr}
 8013e56:	b08a      	sub	sp, #40	; 0x28
 8013e58:	af02      	add	r7, sp, #8
 8013e5a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e60:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013e62:	210c      	movs	r1, #12
 8013e64:	69b8      	ldr	r0, [r7, #24]
 8013e66:	f000 fc6f 	bl	8014748 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013e6a:	f107 030c 	add.w	r3, r7, #12
 8013e6e:	2204      	movs	r2, #4
 8013e70:	69b9      	ldr	r1, [r7, #24]
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f001 f8f4 	bl	8015060 <dhcp_create_msg>
 8013e78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013e7a:	697b      	ldr	r3, [r7, #20]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d035      	beq.n	8013eec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013e80:	697b      	ldr	r3, [r7, #20]
 8013e82:	685b      	ldr	r3, [r3, #4]
 8013e84:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013e86:	89b8      	ldrh	r0, [r7, #12]
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013e8e:	2304      	movs	r3, #4
 8013e90:	2232      	movs	r2, #50	; 0x32
 8013e92:	f000 fc73 	bl	801477c <dhcp_option>
 8013e96:	4603      	mov	r3, r0
 8013e98:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013e9a:	89bc      	ldrh	r4, [r7, #12]
 8013e9c:	693b      	ldr	r3, [r7, #16]
 8013e9e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013ea2:	69bb      	ldr	r3, [r7, #24]
 8013ea4:	69db      	ldr	r3, [r3, #28]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	f7f6 fe17 	bl	800aada <lwip_htonl>
 8013eac:	4603      	mov	r3, r0
 8013eae:	461a      	mov	r2, r3
 8013eb0:	4629      	mov	r1, r5
 8013eb2:	4620      	mov	r0, r4
 8013eb4:	f000 fcee 	bl	8014894 <dhcp_option_long>
 8013eb8:	4603      	mov	r3, r0
 8013eba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013ebc:	89b8      	ldrh	r0, [r7, #12]
 8013ebe:	693b      	ldr	r3, [r7, #16]
 8013ec0:	33f0      	adds	r3, #240	; 0xf0
 8013ec2:	697a      	ldr	r2, [r7, #20]
 8013ec4:	4619      	mov	r1, r3
 8013ec6:	f001 f9a1 	bl	801520c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013eca:	4b19      	ldr	r3, [pc, #100]	; (8013f30 <dhcp_decline+0xdc>)
 8013ecc:	6818      	ldr	r0, [r3, #0]
 8013ece:	4b19      	ldr	r3, [pc, #100]	; (8013f34 <dhcp_decline+0xe0>)
 8013ed0:	9301      	str	r3, [sp, #4]
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	9300      	str	r3, [sp, #0]
 8013ed6:	2343      	movs	r3, #67	; 0x43
 8013ed8:	4a17      	ldr	r2, [pc, #92]	; (8013f38 <dhcp_decline+0xe4>)
 8013eda:	6979      	ldr	r1, [r7, #20]
 8013edc:	f7ff f8d0 	bl	8013080 <udp_sendto_if_src>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013ee4:	6978      	ldr	r0, [r7, #20]
 8013ee6:	f7f8 fa17 	bl	800c318 <pbuf_free>
 8013eea:	e001      	b.n	8013ef0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013eec:	23ff      	movs	r3, #255	; 0xff
 8013eee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	799b      	ldrb	r3, [r3, #6]
 8013ef4:	2bff      	cmp	r3, #255	; 0xff
 8013ef6:	d005      	beq.n	8013f04 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013ef8:	69bb      	ldr	r3, [r7, #24]
 8013efa:	799b      	ldrb	r3, [r3, #6]
 8013efc:	3301      	adds	r3, #1
 8013efe:	b2da      	uxtb	r2, r3
 8013f00:	69bb      	ldr	r3, [r7, #24]
 8013f02:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013f04:	f242 7310 	movw	r3, #10000	; 0x2710
 8013f08:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013f0a:	89fb      	ldrh	r3, [r7, #14]
 8013f0c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013f10:	4a0a      	ldr	r2, [pc, #40]	; (8013f3c <dhcp_decline+0xe8>)
 8013f12:	fb82 1203 	smull	r1, r2, r2, r3
 8013f16:	1152      	asrs	r2, r2, #5
 8013f18:	17db      	asrs	r3, r3, #31
 8013f1a:	1ad3      	subs	r3, r2, r3
 8013f1c:	b29a      	uxth	r2, r3
 8013f1e:	69bb      	ldr	r3, [r7, #24]
 8013f20:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013f22:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3720      	adds	r7, #32
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f2e:	bf00      	nop
 8013f30:	2000cec0 	.word	0x2000cec0
 8013f34:	0801e658 	.word	0x0801e658
 8013f38:	0801e65c 	.word	0x0801e65c
 8013f3c:	10624dd3 	.word	0x10624dd3

08013f40 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	; 0x28
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f4c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8013f4e:	2300      	movs	r3, #0
 8013f50:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013f52:	69bb      	ldr	r3, [r7, #24]
 8013f54:	2200      	movs	r2, #0
 8013f56:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013f58:	2106      	movs	r1, #6
 8013f5a:	69b8      	ldr	r0, [r7, #24]
 8013f5c:	f000 fbf4 	bl	8014748 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8013f60:	f107 0308 	add.w	r3, r7, #8
 8013f64:	2201      	movs	r2, #1
 8013f66:	69b9      	ldr	r1, [r7, #24]
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f001 f879 	bl	8015060 <dhcp_create_msg>
 8013f6e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8013f70:	693b      	ldr	r3, [r7, #16]
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d04b      	beq.n	801400e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013f7c:	8938      	ldrh	r0, [r7, #8]
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f84:	2302      	movs	r3, #2
 8013f86:	2239      	movs	r2, #57	; 0x39
 8013f88:	f000 fbf8 	bl	801477c <dhcp_option>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013f90:	8938      	ldrh	r0, [r7, #8]
 8013f92:	68fb      	ldr	r3, [r7, #12]
 8013f94:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f9c:	461a      	mov	r2, r3
 8013f9e:	f000 fc47 	bl	8014830 <dhcp_option_short>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013fa6:	8938      	ldrh	r0, [r7, #8]
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fae:	2303      	movs	r3, #3
 8013fb0:	2237      	movs	r2, #55	; 0x37
 8013fb2:	f000 fbe3 	bl	801477c <dhcp_option>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013fba:	2300      	movs	r3, #0
 8013fbc:	77fb      	strb	r3, [r7, #31]
 8013fbe:	e00e      	b.n	8013fde <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013fc0:	8938      	ldrh	r0, [r7, #8]
 8013fc2:	68fb      	ldr	r3, [r7, #12]
 8013fc4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013fc8:	7ffb      	ldrb	r3, [r7, #31]
 8013fca:	4a29      	ldr	r2, [pc, #164]	; (8014070 <dhcp_discover+0x130>)
 8013fcc:	5cd3      	ldrb	r3, [r2, r3]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	f000 fc08 	bl	80147e4 <dhcp_option_byte>
 8013fd4:	4603      	mov	r3, r0
 8013fd6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013fd8:	7ffb      	ldrb	r3, [r7, #31]
 8013fda:	3301      	adds	r3, #1
 8013fdc:	77fb      	strb	r3, [r7, #31]
 8013fde:	7ffb      	ldrb	r3, [r7, #31]
 8013fe0:	2b02      	cmp	r3, #2
 8013fe2:	d9ed      	bls.n	8013fc0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013fe4:	8938      	ldrh	r0, [r7, #8]
 8013fe6:	68fb      	ldr	r3, [r7, #12]
 8013fe8:	33f0      	adds	r3, #240	; 0xf0
 8013fea:	693a      	ldr	r2, [r7, #16]
 8013fec:	4619      	mov	r1, r3
 8013fee:	f001 f90d 	bl	801520c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013ff2:	4b20      	ldr	r3, [pc, #128]	; (8014074 <dhcp_discover+0x134>)
 8013ff4:	6818      	ldr	r0, [r3, #0]
 8013ff6:	4b20      	ldr	r3, [pc, #128]	; (8014078 <dhcp_discover+0x138>)
 8013ff8:	9301      	str	r3, [sp, #4]
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	9300      	str	r3, [sp, #0]
 8013ffe:	2343      	movs	r3, #67	; 0x43
 8014000:	4a1e      	ldr	r2, [pc, #120]	; (801407c <dhcp_discover+0x13c>)
 8014002:	6939      	ldr	r1, [r7, #16]
 8014004:	f7ff f83c 	bl	8013080 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8014008:	6938      	ldr	r0, [r7, #16]
 801400a:	f7f8 f985 	bl	800c318 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801400e:	69bb      	ldr	r3, [r7, #24]
 8014010:	799b      	ldrb	r3, [r3, #6]
 8014012:	2bff      	cmp	r3, #255	; 0xff
 8014014:	d005      	beq.n	8014022 <dhcp_discover+0xe2>
    dhcp->tries++;
 8014016:	69bb      	ldr	r3, [r7, #24]
 8014018:	799b      	ldrb	r3, [r3, #6]
 801401a:	3301      	adds	r3, #1
 801401c:	b2da      	uxtb	r2, r3
 801401e:	69bb      	ldr	r3, [r7, #24]
 8014020:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8014022:	69bb      	ldr	r3, [r7, #24]
 8014024:	799b      	ldrb	r3, [r3, #6]
 8014026:	2b05      	cmp	r3, #5
 8014028:	d80d      	bhi.n	8014046 <dhcp_discover+0x106>
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	799b      	ldrb	r3, [r3, #6]
 801402e:	461a      	mov	r2, r3
 8014030:	2301      	movs	r3, #1
 8014032:	4093      	lsls	r3, r2
 8014034:	b29b      	uxth	r3, r3
 8014036:	461a      	mov	r2, r3
 8014038:	0152      	lsls	r2, r2, #5
 801403a:	1ad2      	subs	r2, r2, r3
 801403c:	0092      	lsls	r2, r2, #2
 801403e:	4413      	add	r3, r2
 8014040:	00db      	lsls	r3, r3, #3
 8014042:	b29b      	uxth	r3, r3
 8014044:	e001      	b.n	801404a <dhcp_discover+0x10a>
 8014046:	f64e 2360 	movw	r3, #60000	; 0xea60
 801404a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801404c:	897b      	ldrh	r3, [r7, #10]
 801404e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014052:	4a0b      	ldr	r2, [pc, #44]	; (8014080 <dhcp_discover+0x140>)
 8014054:	fb82 1203 	smull	r1, r2, r2, r3
 8014058:	1152      	asrs	r2, r2, #5
 801405a:	17db      	asrs	r3, r3, #31
 801405c:	1ad3      	subs	r3, r2, r3
 801405e:	b29a      	uxth	r2, r3
 8014060:	69bb      	ldr	r3, [r7, #24]
 8014062:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014064:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014068:	4618      	mov	r0, r3
 801406a:	3720      	adds	r7, #32
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}
 8014070:	20000040 	.word	0x20000040
 8014074:	2000cec0 	.word	0x2000cec0
 8014078:	0801e658 	.word	0x0801e658
 801407c:	0801e65c 	.word	0x0801e65c
 8014080:	10624dd3 	.word	0x10624dd3

08014084 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b088      	sub	sp, #32
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2b00      	cmp	r3, #0
 8014090:	d107      	bne.n	80140a2 <dhcp_bind+0x1e>
 8014092:	4b64      	ldr	r3, [pc, #400]	; (8014224 <dhcp_bind+0x1a0>)
 8014094:	f240 4215 	movw	r2, #1045	; 0x415
 8014098:	4963      	ldr	r1, [pc, #396]	; (8014228 <dhcp_bind+0x1a4>)
 801409a:	4864      	ldr	r0, [pc, #400]	; (801422c <dhcp_bind+0x1a8>)
 801409c:	f003 fe86 	bl	8017dac <iprintf>
 80140a0:	e0bc      	b.n	801421c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80140a8:	69bb      	ldr	r3, [r7, #24]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d107      	bne.n	80140be <dhcp_bind+0x3a>
 80140ae:	4b5d      	ldr	r3, [pc, #372]	; (8014224 <dhcp_bind+0x1a0>)
 80140b0:	f240 4217 	movw	r2, #1047	; 0x417
 80140b4:	495e      	ldr	r1, [pc, #376]	; (8014230 <dhcp_bind+0x1ac>)
 80140b6:	485d      	ldr	r0, [pc, #372]	; (801422c <dhcp_bind+0x1a8>)
 80140b8:	f003 fe78 	bl	8017dac <iprintf>
 80140bc:	e0ae      	b.n	801421c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	2200      	movs	r2, #0
 80140c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140cc:	d019      	beq.n	8014102 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140d2:	331e      	adds	r3, #30
 80140d4:	4a57      	ldr	r2, [pc, #348]	; (8014234 <dhcp_bind+0x1b0>)
 80140d6:	fba2 2303 	umull	r2, r3, r2, r3
 80140da:	095b      	lsrs	r3, r3, #5
 80140dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80140de:	69fb      	ldr	r3, [r7, #28]
 80140e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140e4:	d302      	bcc.n	80140ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80140e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	b29a      	uxth	r2, r3
 80140f0:	69bb      	ldr	r3, [r7, #24]
 80140f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80140f4:	69bb      	ldr	r3, [r7, #24]
 80140f6:	8a9b      	ldrh	r3, [r3, #20]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d102      	bne.n	8014102 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80140fc:	69bb      	ldr	r3, [r7, #24]
 80140fe:	2201      	movs	r2, #1
 8014100:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8014102:	69bb      	ldr	r3, [r7, #24]
 8014104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801410a:	d01d      	beq.n	8014148 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801410c:	69bb      	ldr	r3, [r7, #24]
 801410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014110:	331e      	adds	r3, #30
 8014112:	4a48      	ldr	r2, [pc, #288]	; (8014234 <dhcp_bind+0x1b0>)
 8014114:	fba2 2303 	umull	r2, r3, r2, r3
 8014118:	095b      	lsrs	r3, r3, #5
 801411a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014122:	d302      	bcc.n	801412a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8014124:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014128:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801412a:	69fb      	ldr	r3, [r7, #28]
 801412c:	b29a      	uxth	r2, r3
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	895b      	ldrh	r3, [r3, #10]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d102      	bne.n	8014140 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	2201      	movs	r2, #1
 801413e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8014140:	69bb      	ldr	r3, [r7, #24]
 8014142:	895a      	ldrh	r2, [r3, #10]
 8014144:	69bb      	ldr	r3, [r7, #24]
 8014146:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801414c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014150:	d01d      	beq.n	801418e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8014152:	69bb      	ldr	r3, [r7, #24]
 8014154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014156:	331e      	adds	r3, #30
 8014158:	4a36      	ldr	r2, [pc, #216]	; (8014234 <dhcp_bind+0x1b0>)
 801415a:	fba2 2303 	umull	r2, r3, r2, r3
 801415e:	095b      	lsrs	r3, r3, #5
 8014160:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014168:	d302      	bcc.n	8014170 <dhcp_bind+0xec>
      timeout = 0xffff;
 801416a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801416e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	b29a      	uxth	r2, r3
 8014174:	69bb      	ldr	r3, [r7, #24]
 8014176:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8014178:	69bb      	ldr	r3, [r7, #24]
 801417a:	899b      	ldrh	r3, [r3, #12]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d102      	bne.n	8014186 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014180:	69bb      	ldr	r3, [r7, #24]
 8014182:	2201      	movs	r2, #1
 8014184:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014186:	69bb      	ldr	r3, [r7, #24]
 8014188:	899a      	ldrh	r2, [r3, #12]
 801418a:	69bb      	ldr	r3, [r7, #24]
 801418c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	895a      	ldrh	r2, [r3, #10]
 8014192:	69bb      	ldr	r3, [r7, #24]
 8014194:	899b      	ldrh	r3, [r3, #12]
 8014196:	429a      	cmp	r2, r3
 8014198:	d306      	bcc.n	80141a8 <dhcp_bind+0x124>
 801419a:	69bb      	ldr	r3, [r7, #24]
 801419c:	899b      	ldrh	r3, [r3, #12]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d002      	beq.n	80141a8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80141a2:	69bb      	ldr	r3, [r7, #24]
 80141a4:	2200      	movs	r2, #0
 80141a6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	79db      	ldrb	r3, [r3, #7]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d003      	beq.n	80141b8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80141b0:	69bb      	ldr	r3, [r7, #24]
 80141b2:	6a1b      	ldr	r3, [r3, #32]
 80141b4:	613b      	str	r3, [r7, #16]
 80141b6:	e014      	b.n	80141e2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80141b8:	69bb      	ldr	r3, [r7, #24]
 80141ba:	331c      	adds	r3, #28
 80141bc:	781b      	ldrb	r3, [r3, #0]
 80141be:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80141c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	db02      	blt.n	80141ce <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80141c8:	23ff      	movs	r3, #255	; 0xff
 80141ca:	613b      	str	r3, [r7, #16]
 80141cc:	e009      	b.n	80141e2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80141ce:	7dfb      	ldrb	r3, [r7, #23]
 80141d0:	2bbf      	cmp	r3, #191	; 0xbf
 80141d2:	d903      	bls.n	80141dc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80141d4:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80141d8:	613b      	str	r3, [r7, #16]
 80141da:	e002      	b.n	80141e2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80141dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80141e0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80141e2:	69bb      	ldr	r3, [r7, #24]
 80141e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141e6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d108      	bne.n	8014200 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80141ee:	69bb      	ldr	r3, [r7, #24]
 80141f0:	69da      	ldr	r2, [r3, #28]
 80141f2:	693b      	ldr	r3, [r7, #16]
 80141f4:	4013      	ands	r3, r2
 80141f6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80141fe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8014200:	210a      	movs	r1, #10
 8014202:	69b8      	ldr	r0, [r7, #24]
 8014204:	f000 faa0 	bl	8014748 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8014208:	69bb      	ldr	r3, [r7, #24]
 801420a:	f103 011c 	add.w	r1, r3, #28
 801420e:	f107 030c 	add.w	r3, r7, #12
 8014212:	f107 0210 	add.w	r2, r7, #16
 8014216:	6878      	ldr	r0, [r7, #4]
 8014218:	f7f7 fb70 	bl	800b8fc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801421c:	3720      	adds	r7, #32
 801421e:	46bd      	mov	sp, r7
 8014220:	bd80      	pop	{r7, pc}
 8014222:	bf00      	nop
 8014224:	0801b444 	.word	0x0801b444
 8014228:	0801b5a4 	.word	0x0801b5a4
 801422c:	0801b4a4 	.word	0x0801b4a4
 8014230:	0801b5c0 	.word	0x0801b5c0
 8014234:	88888889 	.word	0x88888889

08014238 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8014238:	b580      	push	{r7, lr}
 801423a:	b08a      	sub	sp, #40	; 0x28
 801423c:	af02      	add	r7, sp, #8
 801423e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014244:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8014246:	2105      	movs	r1, #5
 8014248:	69b8      	ldr	r0, [r7, #24]
 801424a:	f000 fa7d 	bl	8014748 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801424e:	f107 030c 	add.w	r3, r7, #12
 8014252:	2203      	movs	r2, #3
 8014254:	69b9      	ldr	r1, [r7, #24]
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f000 ff02 	bl	8015060 <dhcp_create_msg>
 801425c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d04e      	beq.n	8014302 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	685b      	ldr	r3, [r3, #4]
 8014268:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801426a:	89b8      	ldrh	r0, [r7, #12]
 801426c:	693b      	ldr	r3, [r7, #16]
 801426e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014272:	2302      	movs	r3, #2
 8014274:	2239      	movs	r2, #57	; 0x39
 8014276:	f000 fa81 	bl	801477c <dhcp_option>
 801427a:	4603      	mov	r3, r0
 801427c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801427e:	89b8      	ldrh	r0, [r7, #12]
 8014280:	693b      	ldr	r3, [r7, #16]
 8014282:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801428a:	461a      	mov	r2, r3
 801428c:	f000 fad0 	bl	8014830 <dhcp_option_short>
 8014290:	4603      	mov	r3, r0
 8014292:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014294:	89b8      	ldrh	r0, [r7, #12]
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801429c:	2303      	movs	r3, #3
 801429e:	2237      	movs	r2, #55	; 0x37
 80142a0:	f000 fa6c 	bl	801477c <dhcp_option>
 80142a4:	4603      	mov	r3, r0
 80142a6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142a8:	2300      	movs	r3, #0
 80142aa:	77bb      	strb	r3, [r7, #30]
 80142ac:	e00e      	b.n	80142cc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80142ae:	89b8      	ldrh	r0, [r7, #12]
 80142b0:	693b      	ldr	r3, [r7, #16]
 80142b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80142b6:	7fbb      	ldrb	r3, [r7, #30]
 80142b8:	4a2a      	ldr	r2, [pc, #168]	; (8014364 <dhcp_renew+0x12c>)
 80142ba:	5cd3      	ldrb	r3, [r2, r3]
 80142bc:	461a      	mov	r2, r3
 80142be:	f000 fa91 	bl	80147e4 <dhcp_option_byte>
 80142c2:	4603      	mov	r3, r0
 80142c4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80142c6:	7fbb      	ldrb	r3, [r7, #30]
 80142c8:	3301      	adds	r3, #1
 80142ca:	77bb      	strb	r3, [r7, #30]
 80142cc:	7fbb      	ldrb	r3, [r7, #30]
 80142ce:	2b02      	cmp	r3, #2
 80142d0:	d9ed      	bls.n	80142ae <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80142d2:	89b8      	ldrh	r0, [r7, #12]
 80142d4:	693b      	ldr	r3, [r7, #16]
 80142d6:	33f0      	adds	r3, #240	; 0xf0
 80142d8:	697a      	ldr	r2, [r7, #20]
 80142da:	4619      	mov	r1, r3
 80142dc:	f000 ff96 	bl	801520c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80142e0:	4b21      	ldr	r3, [pc, #132]	; (8014368 <dhcp_renew+0x130>)
 80142e2:	6818      	ldr	r0, [r3, #0]
 80142e4:	69bb      	ldr	r3, [r7, #24]
 80142e6:	f103 0218 	add.w	r2, r3, #24
 80142ea:	687b      	ldr	r3, [r7, #4]
 80142ec:	9300      	str	r3, [sp, #0]
 80142ee:	2343      	movs	r3, #67	; 0x43
 80142f0:	6979      	ldr	r1, [r7, #20]
 80142f2:	f7fe fe51 	bl	8012f98 <udp_sendto_if>
 80142f6:	4603      	mov	r3, r0
 80142f8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80142fa:	6978      	ldr	r0, [r7, #20]
 80142fc:	f7f8 f80c 	bl	800c318 <pbuf_free>
 8014300:	e001      	b.n	8014306 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014302:	23ff      	movs	r3, #255	; 0xff
 8014304:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8014306:	69bb      	ldr	r3, [r7, #24]
 8014308:	799b      	ldrb	r3, [r3, #6]
 801430a:	2bff      	cmp	r3, #255	; 0xff
 801430c:	d005      	beq.n	801431a <dhcp_renew+0xe2>
    dhcp->tries++;
 801430e:	69bb      	ldr	r3, [r7, #24]
 8014310:	799b      	ldrb	r3, [r3, #6]
 8014312:	3301      	adds	r3, #1
 8014314:	b2da      	uxtb	r2, r3
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801431a:	69bb      	ldr	r3, [r7, #24]
 801431c:	799b      	ldrb	r3, [r3, #6]
 801431e:	2b09      	cmp	r3, #9
 8014320:	d80a      	bhi.n	8014338 <dhcp_renew+0x100>
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	799b      	ldrb	r3, [r3, #6]
 8014326:	b29b      	uxth	r3, r3
 8014328:	461a      	mov	r2, r3
 801432a:	0152      	lsls	r2, r2, #5
 801432c:	1ad2      	subs	r2, r2, r3
 801432e:	0092      	lsls	r2, r2, #2
 8014330:	4413      	add	r3, r2
 8014332:	011b      	lsls	r3, r3, #4
 8014334:	b29b      	uxth	r3, r3
 8014336:	e001      	b.n	801433c <dhcp_renew+0x104>
 8014338:	f644 6320 	movw	r3, #20000	; 0x4e20
 801433c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801433e:	89fb      	ldrh	r3, [r7, #14]
 8014340:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014344:	4a09      	ldr	r2, [pc, #36]	; (801436c <dhcp_renew+0x134>)
 8014346:	fb82 1203 	smull	r1, r2, r2, r3
 801434a:	1152      	asrs	r2, r2, #5
 801434c:	17db      	asrs	r3, r3, #31
 801434e:	1ad3      	subs	r3, r2, r3
 8014350:	b29a      	uxth	r2, r3
 8014352:	69bb      	ldr	r3, [r7, #24]
 8014354:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014356:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801435a:	4618      	mov	r0, r3
 801435c:	3720      	adds	r7, #32
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	20000040 	.word	0x20000040
 8014368:	2000cec0 	.word	0x2000cec0
 801436c:	10624dd3 	.word	0x10624dd3

08014370 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8014370:	b580      	push	{r7, lr}
 8014372:	b08a      	sub	sp, #40	; 0x28
 8014374:	af02      	add	r7, sp, #8
 8014376:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801437c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801437e:	2104      	movs	r1, #4
 8014380:	69b8      	ldr	r0, [r7, #24]
 8014382:	f000 f9e1 	bl	8014748 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8014386:	f107 030c 	add.w	r3, r7, #12
 801438a:	2203      	movs	r2, #3
 801438c:	69b9      	ldr	r1, [r7, #24]
 801438e:	6878      	ldr	r0, [r7, #4]
 8014390:	f000 fe66 	bl	8015060 <dhcp_create_msg>
 8014394:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8014396:	697b      	ldr	r3, [r7, #20]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d04c      	beq.n	8014436 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	685b      	ldr	r3, [r3, #4]
 80143a0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80143a2:	89b8      	ldrh	r0, [r7, #12]
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143aa:	2302      	movs	r3, #2
 80143ac:	2239      	movs	r2, #57	; 0x39
 80143ae:	f000 f9e5 	bl	801477c <dhcp_option>
 80143b2:	4603      	mov	r3, r0
 80143b4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80143b6:	89b8      	ldrh	r0, [r7, #12]
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143c2:	461a      	mov	r2, r3
 80143c4:	f000 fa34 	bl	8014830 <dhcp_option_short>
 80143c8:	4603      	mov	r3, r0
 80143ca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80143cc:	89b8      	ldrh	r0, [r7, #12]
 80143ce:	693b      	ldr	r3, [r7, #16]
 80143d0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143d4:	2303      	movs	r3, #3
 80143d6:	2237      	movs	r2, #55	; 0x37
 80143d8:	f000 f9d0 	bl	801477c <dhcp_option>
 80143dc:	4603      	mov	r3, r0
 80143de:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143e0:	2300      	movs	r3, #0
 80143e2:	77bb      	strb	r3, [r7, #30]
 80143e4:	e00e      	b.n	8014404 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80143e6:	89b8      	ldrh	r0, [r7, #12]
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80143ee:	7fbb      	ldrb	r3, [r7, #30]
 80143f0:	4a29      	ldr	r2, [pc, #164]	; (8014498 <dhcp_rebind+0x128>)
 80143f2:	5cd3      	ldrb	r3, [r2, r3]
 80143f4:	461a      	mov	r2, r3
 80143f6:	f000 f9f5 	bl	80147e4 <dhcp_option_byte>
 80143fa:	4603      	mov	r3, r0
 80143fc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80143fe:	7fbb      	ldrb	r3, [r7, #30]
 8014400:	3301      	adds	r3, #1
 8014402:	77bb      	strb	r3, [r7, #30]
 8014404:	7fbb      	ldrb	r3, [r7, #30]
 8014406:	2b02      	cmp	r3, #2
 8014408:	d9ed      	bls.n	80143e6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801440a:	89b8      	ldrh	r0, [r7, #12]
 801440c:	693b      	ldr	r3, [r7, #16]
 801440e:	33f0      	adds	r3, #240	; 0xf0
 8014410:	697a      	ldr	r2, [r7, #20]
 8014412:	4619      	mov	r1, r3
 8014414:	f000 fefa 	bl	801520c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014418:	4b20      	ldr	r3, [pc, #128]	; (801449c <dhcp_rebind+0x12c>)
 801441a:	6818      	ldr	r0, [r3, #0]
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	9300      	str	r3, [sp, #0]
 8014420:	2343      	movs	r3, #67	; 0x43
 8014422:	4a1f      	ldr	r2, [pc, #124]	; (80144a0 <dhcp_rebind+0x130>)
 8014424:	6979      	ldr	r1, [r7, #20]
 8014426:	f7fe fdb7 	bl	8012f98 <udp_sendto_if>
 801442a:	4603      	mov	r3, r0
 801442c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801442e:	6978      	ldr	r0, [r7, #20]
 8014430:	f7f7 ff72 	bl	800c318 <pbuf_free>
 8014434:	e001      	b.n	801443a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8014436:	23ff      	movs	r3, #255	; 0xff
 8014438:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801443a:	69bb      	ldr	r3, [r7, #24]
 801443c:	799b      	ldrb	r3, [r3, #6]
 801443e:	2bff      	cmp	r3, #255	; 0xff
 8014440:	d005      	beq.n	801444e <dhcp_rebind+0xde>
    dhcp->tries++;
 8014442:	69bb      	ldr	r3, [r7, #24]
 8014444:	799b      	ldrb	r3, [r3, #6]
 8014446:	3301      	adds	r3, #1
 8014448:	b2da      	uxtb	r2, r3
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801444e:	69bb      	ldr	r3, [r7, #24]
 8014450:	799b      	ldrb	r3, [r3, #6]
 8014452:	2b09      	cmp	r3, #9
 8014454:	d80a      	bhi.n	801446c <dhcp_rebind+0xfc>
 8014456:	69bb      	ldr	r3, [r7, #24]
 8014458:	799b      	ldrb	r3, [r3, #6]
 801445a:	b29b      	uxth	r3, r3
 801445c:	461a      	mov	r2, r3
 801445e:	0152      	lsls	r2, r2, #5
 8014460:	1ad2      	subs	r2, r2, r3
 8014462:	0092      	lsls	r2, r2, #2
 8014464:	4413      	add	r3, r2
 8014466:	00db      	lsls	r3, r3, #3
 8014468:	b29b      	uxth	r3, r3
 801446a:	e001      	b.n	8014470 <dhcp_rebind+0x100>
 801446c:	f242 7310 	movw	r3, #10000	; 0x2710
 8014470:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8014472:	89fb      	ldrh	r3, [r7, #14]
 8014474:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8014478:	4a0a      	ldr	r2, [pc, #40]	; (80144a4 <dhcp_rebind+0x134>)
 801447a:	fb82 1203 	smull	r1, r2, r2, r3
 801447e:	1152      	asrs	r2, r2, #5
 8014480:	17db      	asrs	r3, r3, #31
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	b29a      	uxth	r2, r3
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801448a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801448e:	4618      	mov	r0, r3
 8014490:	3720      	adds	r7, #32
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}
 8014496:	bf00      	nop
 8014498:	20000040 	.word	0x20000040
 801449c:	2000cec0 	.word	0x2000cec0
 80144a0:	0801e65c 	.word	0x0801e65c
 80144a4:	10624dd3 	.word	0x10624dd3

080144a8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80144a8:	b5b0      	push	{r4, r5, r7, lr}
 80144aa:	b08a      	sub	sp, #40	; 0x28
 80144ac:	af02      	add	r7, sp, #8
 80144ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80144b6:	2103      	movs	r1, #3
 80144b8:	69b8      	ldr	r0, [r7, #24]
 80144ba:	f000 f945 	bl	8014748 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80144be:	f107 030c 	add.w	r3, r7, #12
 80144c2:	2203      	movs	r2, #3
 80144c4:	69b9      	ldr	r1, [r7, #24]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f000 fdca 	bl	8015060 <dhcp_create_msg>
 80144cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80144ce:	697b      	ldr	r3, [r7, #20]
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	d066      	beq.n	80145a2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80144d4:	697b      	ldr	r3, [r7, #20]
 80144d6:	685b      	ldr	r3, [r3, #4]
 80144d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80144da:	89b8      	ldrh	r0, [r7, #12]
 80144dc:	693b      	ldr	r3, [r7, #16]
 80144de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80144e2:	2302      	movs	r3, #2
 80144e4:	2239      	movs	r2, #57	; 0x39
 80144e6:	f000 f949 	bl	801477c <dhcp_option>
 80144ea:	4603      	mov	r3, r0
 80144ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80144ee:	89b8      	ldrh	r0, [r7, #12]
 80144f0:	693b      	ldr	r3, [r7, #16]
 80144f2:	33f0      	adds	r3, #240	; 0xf0
 80144f4:	f44f 7210 	mov.w	r2, #576	; 0x240
 80144f8:	4619      	mov	r1, r3
 80144fa:	f000 f999 	bl	8014830 <dhcp_option_short>
 80144fe:	4603      	mov	r3, r0
 8014500:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8014502:	89b8      	ldrh	r0, [r7, #12]
 8014504:	693b      	ldr	r3, [r7, #16]
 8014506:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801450a:	2304      	movs	r3, #4
 801450c:	2232      	movs	r2, #50	; 0x32
 801450e:	f000 f935 	bl	801477c <dhcp_option>
 8014512:	4603      	mov	r3, r0
 8014514:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8014516:	89bc      	ldrh	r4, [r7, #12]
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801451e:	69bb      	ldr	r3, [r7, #24]
 8014520:	69db      	ldr	r3, [r3, #28]
 8014522:	4618      	mov	r0, r3
 8014524:	f7f6 fad9 	bl	800aada <lwip_htonl>
 8014528:	4603      	mov	r3, r0
 801452a:	461a      	mov	r2, r3
 801452c:	4629      	mov	r1, r5
 801452e:	4620      	mov	r0, r4
 8014530:	f000 f9b0 	bl	8014894 <dhcp_option_long>
 8014534:	4603      	mov	r3, r0
 8014536:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014538:	89b8      	ldrh	r0, [r7, #12]
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014540:	2303      	movs	r3, #3
 8014542:	2237      	movs	r2, #55	; 0x37
 8014544:	f000 f91a 	bl	801477c <dhcp_option>
 8014548:	4603      	mov	r3, r0
 801454a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801454c:	2300      	movs	r3, #0
 801454e:	77bb      	strb	r3, [r7, #30]
 8014550:	e00e      	b.n	8014570 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8014552:	89b8      	ldrh	r0, [r7, #12]
 8014554:	693b      	ldr	r3, [r7, #16]
 8014556:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801455a:	7fbb      	ldrb	r3, [r7, #30]
 801455c:	4a29      	ldr	r2, [pc, #164]	; (8014604 <dhcp_reboot+0x15c>)
 801455e:	5cd3      	ldrb	r3, [r2, r3]
 8014560:	461a      	mov	r2, r3
 8014562:	f000 f93f 	bl	80147e4 <dhcp_option_byte>
 8014566:	4603      	mov	r3, r0
 8014568:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801456a:	7fbb      	ldrb	r3, [r7, #30]
 801456c:	3301      	adds	r3, #1
 801456e:	77bb      	strb	r3, [r7, #30]
 8014570:	7fbb      	ldrb	r3, [r7, #30]
 8014572:	2b02      	cmp	r3, #2
 8014574:	d9ed      	bls.n	8014552 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8014576:	89b8      	ldrh	r0, [r7, #12]
 8014578:	693b      	ldr	r3, [r7, #16]
 801457a:	33f0      	adds	r3, #240	; 0xf0
 801457c:	697a      	ldr	r2, [r7, #20]
 801457e:	4619      	mov	r1, r3
 8014580:	f000 fe44 	bl	801520c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8014584:	4b20      	ldr	r3, [pc, #128]	; (8014608 <dhcp_reboot+0x160>)
 8014586:	6818      	ldr	r0, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	2343      	movs	r3, #67	; 0x43
 801458e:	4a1f      	ldr	r2, [pc, #124]	; (801460c <dhcp_reboot+0x164>)
 8014590:	6979      	ldr	r1, [r7, #20]
 8014592:	f7fe fd01 	bl	8012f98 <udp_sendto_if>
 8014596:	4603      	mov	r3, r0
 8014598:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801459a:	6978      	ldr	r0, [r7, #20]
 801459c:	f7f7 febc 	bl	800c318 <pbuf_free>
 80145a0:	e001      	b.n	80145a6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80145a2:	23ff      	movs	r3, #255	; 0xff
 80145a4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80145a6:	69bb      	ldr	r3, [r7, #24]
 80145a8:	799b      	ldrb	r3, [r3, #6]
 80145aa:	2bff      	cmp	r3, #255	; 0xff
 80145ac:	d005      	beq.n	80145ba <dhcp_reboot+0x112>
    dhcp->tries++;
 80145ae:	69bb      	ldr	r3, [r7, #24]
 80145b0:	799b      	ldrb	r3, [r3, #6]
 80145b2:	3301      	adds	r3, #1
 80145b4:	b2da      	uxtb	r2, r3
 80145b6:	69bb      	ldr	r3, [r7, #24]
 80145b8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80145ba:	69bb      	ldr	r3, [r7, #24]
 80145bc:	799b      	ldrb	r3, [r3, #6]
 80145be:	2b09      	cmp	r3, #9
 80145c0:	d80a      	bhi.n	80145d8 <dhcp_reboot+0x130>
 80145c2:	69bb      	ldr	r3, [r7, #24]
 80145c4:	799b      	ldrb	r3, [r3, #6]
 80145c6:	b29b      	uxth	r3, r3
 80145c8:	461a      	mov	r2, r3
 80145ca:	0152      	lsls	r2, r2, #5
 80145cc:	1ad2      	subs	r2, r2, r3
 80145ce:	0092      	lsls	r2, r2, #2
 80145d0:	4413      	add	r3, r2
 80145d2:	00db      	lsls	r3, r3, #3
 80145d4:	b29b      	uxth	r3, r3
 80145d6:	e001      	b.n	80145dc <dhcp_reboot+0x134>
 80145d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80145dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80145de:	89fb      	ldrh	r3, [r7, #14]
 80145e0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80145e4:	4a0a      	ldr	r2, [pc, #40]	; (8014610 <dhcp_reboot+0x168>)
 80145e6:	fb82 1203 	smull	r1, r2, r2, r3
 80145ea:	1152      	asrs	r2, r2, #5
 80145ec:	17db      	asrs	r3, r3, #31
 80145ee:	1ad3      	subs	r3, r2, r3
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	69bb      	ldr	r3, [r7, #24]
 80145f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80145f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3720      	adds	r7, #32
 80145fe:	46bd      	mov	sp, r7
 8014600:	bdb0      	pop	{r4, r5, r7, pc}
 8014602:	bf00      	nop
 8014604:	20000040 	.word	0x20000040
 8014608:	2000cec0 	.word	0x2000cec0
 801460c:	0801e65c 	.word	0x0801e65c
 8014610:	10624dd3 	.word	0x10624dd3

08014614 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8014614:	b5b0      	push	{r4, r5, r7, lr}
 8014616:	b08a      	sub	sp, #40	; 0x28
 8014618:	af02      	add	r7, sp, #8
 801461a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014620:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8014622:	69fb      	ldr	r3, [r7, #28]
 8014624:	2b00      	cmp	r3, #0
 8014626:	f000 8084 	beq.w	8014732 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801462a:	69fb      	ldr	r3, [r7, #28]
 801462c:	795b      	ldrb	r3, [r3, #5]
 801462e:	2b00      	cmp	r3, #0
 8014630:	f000 8081 	beq.w	8014736 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014634:	69fb      	ldr	r3, [r7, #28]
 8014636:	699b      	ldr	r3, [r3, #24]
 8014638:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	2200      	movs	r2, #0
 801463e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014640:	69fb      	ldr	r3, [r7, #28]
 8014642:	2200      	movs	r2, #0
 8014644:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014646:	69fb      	ldr	r3, [r7, #28]
 8014648:	2200      	movs	r2, #0
 801464a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	2200      	movs	r2, #0
 8014650:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	2200      	movs	r2, #0
 8014656:	631a      	str	r2, [r3, #48]	; 0x30
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014660:	69fb      	ldr	r3, [r7, #28]
 8014662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014664:	69fb      	ldr	r3, [r7, #28]
 8014666:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014668:	69fb      	ldr	r3, [r7, #28]
 801466a:	2200      	movs	r2, #0
 801466c:	829a      	strh	r2, [r3, #20]
 801466e:	69fb      	ldr	r3, [r7, #28]
 8014670:	8a9a      	ldrh	r2, [r3, #20]
 8014672:	69fb      	ldr	r3, [r7, #28]
 8014674:	825a      	strh	r2, [r3, #18]
 8014676:	69fb      	ldr	r3, [r7, #28]
 8014678:	8a5a      	ldrh	r2, [r3, #18]
 801467a:	69fb      	ldr	r3, [r7, #28]
 801467c:	821a      	strh	r2, [r3, #16]
 801467e:	69fb      	ldr	r3, [r7, #28]
 8014680:	8a1a      	ldrh	r2, [r3, #16]
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 fdee 	bl	8015268 <dhcp_supplied_address>
 801468c:	4603      	mov	r3, r0
 801468e:	2b00      	cmp	r3, #0
 8014690:	d03b      	beq.n	801470a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8014692:	f107 030e 	add.w	r3, r7, #14
 8014696:	2207      	movs	r2, #7
 8014698:	69f9      	ldr	r1, [r7, #28]
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f000 fce0 	bl	8015060 <dhcp_create_msg>
 80146a0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80146a2:	69bb      	ldr	r3, [r7, #24]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d030      	beq.n	801470a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80146a8:	69bb      	ldr	r3, [r7, #24]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80146ae:	89f8      	ldrh	r0, [r7, #14]
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80146b6:	2304      	movs	r3, #4
 80146b8:	2236      	movs	r2, #54	; 0x36
 80146ba:	f000 f85f 	bl	801477c <dhcp_option>
 80146be:	4603      	mov	r3, r0
 80146c0:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80146c2:	89fc      	ldrh	r4, [r7, #14]
 80146c4:	697b      	ldr	r3, [r7, #20]
 80146c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7f6 fa04 	bl	800aada <lwip_htonl>
 80146d2:	4603      	mov	r3, r0
 80146d4:	461a      	mov	r2, r3
 80146d6:	4629      	mov	r1, r5
 80146d8:	4620      	mov	r0, r4
 80146da:	f000 f8db 	bl	8014894 <dhcp_option_long>
 80146de:	4603      	mov	r3, r0
 80146e0:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80146e2:	89f8      	ldrh	r0, [r7, #14]
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	33f0      	adds	r3, #240	; 0xf0
 80146e8:	69ba      	ldr	r2, [r7, #24]
 80146ea:	4619      	mov	r1, r3
 80146ec:	f000 fd8e 	bl	801520c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80146f0:	4b13      	ldr	r3, [pc, #76]	; (8014740 <dhcp_release_and_stop+0x12c>)
 80146f2:	6818      	ldr	r0, [r3, #0]
 80146f4:	f107 0210 	add.w	r2, r7, #16
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	9300      	str	r3, [sp, #0]
 80146fc:	2343      	movs	r3, #67	; 0x43
 80146fe:	69b9      	ldr	r1, [r7, #24]
 8014700:	f7fe fc4a 	bl	8012f98 <udp_sendto_if>
      pbuf_free(p_out);
 8014704:	69b8      	ldr	r0, [r7, #24]
 8014706:	f7f7 fe07 	bl	800c318 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801470a:	4b0e      	ldr	r3, [pc, #56]	; (8014744 <dhcp_release_and_stop+0x130>)
 801470c:	4a0d      	ldr	r2, [pc, #52]	; (8014744 <dhcp_release_and_stop+0x130>)
 801470e:	490d      	ldr	r1, [pc, #52]	; (8014744 <dhcp_release_and_stop+0x130>)
 8014710:	6878      	ldr	r0, [r7, #4]
 8014712:	f7f7 f8f3 	bl	800b8fc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014716:	2100      	movs	r1, #0
 8014718:	69f8      	ldr	r0, [r7, #28]
 801471a:	f000 f815 	bl	8014748 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	791b      	ldrb	r3, [r3, #4]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d008      	beq.n	8014738 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014726:	f7fe ff83 	bl	8013630 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801472a:	69fb      	ldr	r3, [r7, #28]
 801472c:	2200      	movs	r2, #0
 801472e:	711a      	strb	r2, [r3, #4]
 8014730:	e002      	b.n	8014738 <dhcp_release_and_stop+0x124>
    return;
 8014732:	bf00      	nop
 8014734:	e000      	b.n	8014738 <dhcp_release_and_stop+0x124>
    return;
 8014736:	bf00      	nop
  }
}
 8014738:	3720      	adds	r7, #32
 801473a:	46bd      	mov	sp, r7
 801473c:	bdb0      	pop	{r4, r5, r7, pc}
 801473e:	bf00      	nop
 8014740:	2000cec0 	.word	0x2000cec0
 8014744:	0801e658 	.word	0x0801e658

08014748 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014748:	b480      	push	{r7}
 801474a:	b083      	sub	sp, #12
 801474c:	af00      	add	r7, sp, #0
 801474e:	6078      	str	r0, [r7, #4]
 8014750:	460b      	mov	r3, r1
 8014752:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	795b      	ldrb	r3, [r3, #5]
 8014758:	78fa      	ldrb	r2, [r7, #3]
 801475a:	429a      	cmp	r2, r3
 801475c:	d008      	beq.n	8014770 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	78fa      	ldrb	r2, [r7, #3]
 8014762:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2200      	movs	r2, #0
 8014768:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2200      	movs	r2, #0
 801476e:	811a      	strh	r2, [r3, #8]
  }
}
 8014770:	bf00      	nop
 8014772:	370c      	adds	r7, #12
 8014774:	46bd      	mov	sp, r7
 8014776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801477a:	4770      	bx	lr

0801477c <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b082      	sub	sp, #8
 8014780:	af00      	add	r7, sp, #0
 8014782:	6039      	str	r1, [r7, #0]
 8014784:	4611      	mov	r1, r2
 8014786:	461a      	mov	r2, r3
 8014788:	4603      	mov	r3, r0
 801478a:	80fb      	strh	r3, [r7, #6]
 801478c:	460b      	mov	r3, r1
 801478e:	717b      	strb	r3, [r7, #5]
 8014790:	4613      	mov	r3, r2
 8014792:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8014794:	88fa      	ldrh	r2, [r7, #6]
 8014796:	793b      	ldrb	r3, [r7, #4]
 8014798:	4413      	add	r3, r2
 801479a:	3302      	adds	r3, #2
 801479c:	2b44      	cmp	r3, #68	; 0x44
 801479e:	d906      	bls.n	80147ae <dhcp_option+0x32>
 80147a0:	4b0d      	ldr	r3, [pc, #52]	; (80147d8 <dhcp_option+0x5c>)
 80147a2:	f240 529a 	movw	r2, #1434	; 0x59a
 80147a6:	490d      	ldr	r1, [pc, #52]	; (80147dc <dhcp_option+0x60>)
 80147a8:	480d      	ldr	r0, [pc, #52]	; (80147e0 <dhcp_option+0x64>)
 80147aa:	f003 faff 	bl	8017dac <iprintf>
  options[options_out_len++] = option_type;
 80147ae:	88fb      	ldrh	r3, [r7, #6]
 80147b0:	1c5a      	adds	r2, r3, #1
 80147b2:	80fa      	strh	r2, [r7, #6]
 80147b4:	461a      	mov	r2, r3
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	4413      	add	r3, r2
 80147ba:	797a      	ldrb	r2, [r7, #5]
 80147bc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80147be:	88fb      	ldrh	r3, [r7, #6]
 80147c0:	1c5a      	adds	r2, r3, #1
 80147c2:	80fa      	strh	r2, [r7, #6]
 80147c4:	461a      	mov	r2, r3
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	4413      	add	r3, r2
 80147ca:	793a      	ldrb	r2, [r7, #4]
 80147cc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80147ce:	88fb      	ldrh	r3, [r7, #6]
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3708      	adds	r7, #8
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	0801b444 	.word	0x0801b444
 80147dc:	0801b5d8 	.word	0x0801b5d8
 80147e0:	0801b4a4 	.word	0x0801b4a4

080147e4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80147e4:	b580      	push	{r7, lr}
 80147e6:	b082      	sub	sp, #8
 80147e8:	af00      	add	r7, sp, #0
 80147ea:	4603      	mov	r3, r0
 80147ec:	6039      	str	r1, [r7, #0]
 80147ee:	80fb      	strh	r3, [r7, #6]
 80147f0:	4613      	mov	r3, r2
 80147f2:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80147f4:	88fb      	ldrh	r3, [r7, #6]
 80147f6:	2b43      	cmp	r3, #67	; 0x43
 80147f8:	d906      	bls.n	8014808 <dhcp_option_byte+0x24>
 80147fa:	4b0a      	ldr	r3, [pc, #40]	; (8014824 <dhcp_option_byte+0x40>)
 80147fc:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8014800:	4909      	ldr	r1, [pc, #36]	; (8014828 <dhcp_option_byte+0x44>)
 8014802:	480a      	ldr	r0, [pc, #40]	; (801482c <dhcp_option_byte+0x48>)
 8014804:	f003 fad2 	bl	8017dac <iprintf>
  options[options_out_len++] = value;
 8014808:	88fb      	ldrh	r3, [r7, #6]
 801480a:	1c5a      	adds	r2, r3, #1
 801480c:	80fa      	strh	r2, [r7, #6]
 801480e:	461a      	mov	r2, r3
 8014810:	683b      	ldr	r3, [r7, #0]
 8014812:	4413      	add	r3, r2
 8014814:	797a      	ldrb	r2, [r7, #5]
 8014816:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014818:	88fb      	ldrh	r3, [r7, #6]
}
 801481a:	4618      	mov	r0, r3
 801481c:	3708      	adds	r7, #8
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	0801b444 	.word	0x0801b444
 8014828:	0801b61c 	.word	0x0801b61c
 801482c:	0801b4a4 	.word	0x0801b4a4

08014830 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	4603      	mov	r3, r0
 8014838:	6039      	str	r1, [r7, #0]
 801483a:	80fb      	strh	r3, [r7, #6]
 801483c:	4613      	mov	r3, r2
 801483e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8014840:	88fb      	ldrh	r3, [r7, #6]
 8014842:	3302      	adds	r3, #2
 8014844:	2b44      	cmp	r3, #68	; 0x44
 8014846:	d906      	bls.n	8014856 <dhcp_option_short+0x26>
 8014848:	4b0f      	ldr	r3, [pc, #60]	; (8014888 <dhcp_option_short+0x58>)
 801484a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801484e:	490f      	ldr	r1, [pc, #60]	; (801488c <dhcp_option_short+0x5c>)
 8014850:	480f      	ldr	r0, [pc, #60]	; (8014890 <dhcp_option_short+0x60>)
 8014852:	f003 faab 	bl	8017dac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8014856:	88bb      	ldrh	r3, [r7, #4]
 8014858:	0a1b      	lsrs	r3, r3, #8
 801485a:	b29a      	uxth	r2, r3
 801485c:	88fb      	ldrh	r3, [r7, #6]
 801485e:	1c59      	adds	r1, r3, #1
 8014860:	80f9      	strh	r1, [r7, #6]
 8014862:	4619      	mov	r1, r3
 8014864:	683b      	ldr	r3, [r7, #0]
 8014866:	440b      	add	r3, r1
 8014868:	b2d2      	uxtb	r2, r2
 801486a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801486c:	88fb      	ldrh	r3, [r7, #6]
 801486e:	1c5a      	adds	r2, r3, #1
 8014870:	80fa      	strh	r2, [r7, #6]
 8014872:	461a      	mov	r2, r3
 8014874:	683b      	ldr	r3, [r7, #0]
 8014876:	4413      	add	r3, r2
 8014878:	88ba      	ldrh	r2, [r7, #4]
 801487a:	b2d2      	uxtb	r2, r2
 801487c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801487e:	88fb      	ldrh	r3, [r7, #6]
}
 8014880:	4618      	mov	r0, r3
 8014882:	3708      	adds	r7, #8
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	0801b444 	.word	0x0801b444
 801488c:	0801b654 	.word	0x0801b654
 8014890:	0801b4a4 	.word	0x0801b4a4

08014894 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	4603      	mov	r3, r0
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
 80148a0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80148a2:	89fb      	ldrh	r3, [r7, #14]
 80148a4:	3304      	adds	r3, #4
 80148a6:	2b44      	cmp	r3, #68	; 0x44
 80148a8:	d906      	bls.n	80148b8 <dhcp_option_long+0x24>
 80148aa:	4b19      	ldr	r3, [pc, #100]	; (8014910 <dhcp_option_long+0x7c>)
 80148ac:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80148b0:	4918      	ldr	r1, [pc, #96]	; (8014914 <dhcp_option_long+0x80>)
 80148b2:	4819      	ldr	r0, [pc, #100]	; (8014918 <dhcp_option_long+0x84>)
 80148b4:	f003 fa7a 	bl	8017dac <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	0e1a      	lsrs	r2, r3, #24
 80148bc:	89fb      	ldrh	r3, [r7, #14]
 80148be:	1c59      	adds	r1, r3, #1
 80148c0:	81f9      	strh	r1, [r7, #14]
 80148c2:	4619      	mov	r1, r3
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	440b      	add	r3, r1
 80148c8:	b2d2      	uxtb	r2, r2
 80148ca:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	0c1a      	lsrs	r2, r3, #16
 80148d0:	89fb      	ldrh	r3, [r7, #14]
 80148d2:	1c59      	adds	r1, r3, #1
 80148d4:	81f9      	strh	r1, [r7, #14]
 80148d6:	4619      	mov	r1, r3
 80148d8:	68bb      	ldr	r3, [r7, #8]
 80148da:	440b      	add	r3, r1
 80148dc:	b2d2      	uxtb	r2, r2
 80148de:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	0a1a      	lsrs	r2, r3, #8
 80148e4:	89fb      	ldrh	r3, [r7, #14]
 80148e6:	1c59      	adds	r1, r3, #1
 80148e8:	81f9      	strh	r1, [r7, #14]
 80148ea:	4619      	mov	r1, r3
 80148ec:	68bb      	ldr	r3, [r7, #8]
 80148ee:	440b      	add	r3, r1
 80148f0:	b2d2      	uxtb	r2, r2
 80148f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80148f4:	89fb      	ldrh	r3, [r7, #14]
 80148f6:	1c5a      	adds	r2, r3, #1
 80148f8:	81fa      	strh	r2, [r7, #14]
 80148fa:	461a      	mov	r2, r3
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	4413      	add	r3, r2
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	b2d2      	uxtb	r2, r2
 8014904:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8014906:	89fb      	ldrh	r3, [r7, #14]
}
 8014908:	4618      	mov	r0, r3
 801490a:	3710      	adds	r7, #16
 801490c:	46bd      	mov	sp, r7
 801490e:	bd80      	pop	{r7, pc}
 8014910:	0801b444 	.word	0x0801b444
 8014914:	0801b690 	.word	0x0801b690
 8014918:	0801b4a4 	.word	0x0801b4a4

0801491c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b090      	sub	sp, #64	; 0x40
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8014926:	2300      	movs	r3, #0
 8014928:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801492a:	2300      	movs	r3, #0
 801492c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801492e:	2208      	movs	r2, #8
 8014930:	2100      	movs	r1, #0
 8014932:	48b5      	ldr	r0, [pc, #724]	; (8014c08 <dhcp_parse_reply+0x2ec>)
 8014934:	f003 fa9f 	bl	8017e76 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	895b      	ldrh	r3, [r3, #10]
 801493c:	2b2b      	cmp	r3, #43	; 0x2b
 801493e:	d802      	bhi.n	8014946 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8014940:	f06f 0301 	mvn.w	r3, #1
 8014944:	e2a7      	b.n	8014e96 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801494c:	23f0      	movs	r3, #240	; 0xf0
 801494e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	891b      	ldrh	r3, [r3, #8]
 8014954:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801495a:	e00c      	b.n	8014976 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801495c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801495e:	895b      	ldrh	r3, [r3, #10]
 8014960:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014962:	1ad3      	subs	r3, r2, r3
 8014964:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8014966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014968:	895b      	ldrh	r3, [r3, #10]
 801496a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801496c:	1ad3      	subs	r3, r2, r3
 801496e:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8014970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8014976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014978:	2b00      	cmp	r3, #0
 801497a:	d004      	beq.n	8014986 <dhcp_parse_reply+0x6a>
 801497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801497e:	895b      	ldrh	r3, [r3, #10]
 8014980:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014982:	429a      	cmp	r2, r3
 8014984:	d2ea      	bcs.n	801495c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8014986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014988:	2b00      	cmp	r3, #0
 801498a:	d102      	bne.n	8014992 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801498c:	f06f 0301 	mvn.w	r3, #1
 8014990:	e281      	b.n	8014e96 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8014992:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014994:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8014996:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014998:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801499a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801499c:	685b      	ldr	r3, [r3, #4]
 801499e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80149a0:	e239      	b.n	8014e16 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80149a2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149a6:	4413      	add	r3, r2
 80149a8:	781b      	ldrb	r3, [r3, #0]
 80149aa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80149ac:	2300      	movs	r3, #0
 80149ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80149b2:	f04f 33ff 	mov.w	r3, #4294967295
 80149b6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80149b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149ba:	3302      	adds	r3, #2
 80149bc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80149be:	8bfa      	ldrh	r2, [r7, #30]
 80149c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d202      	bcs.n	80149cc <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80149c6:	f06f 0301 	mvn.w	r3, #1
 80149ca:	e264      	b.n	8014e96 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80149cc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149ce:	3301      	adds	r3, #1
 80149d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149d2:	8952      	ldrh	r2, [r2, #10]
 80149d4:	4293      	cmp	r3, r2
 80149d6:	da07      	bge.n	80149e8 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80149d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80149da:	3301      	adds	r3, #1
 80149dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80149de:	4413      	add	r3, r2
 80149e0:	781b      	ldrb	r3, [r3, #0]
 80149e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149e6:	e00b      	b.n	8014a00 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 80149e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d004      	beq.n	80149fa <dhcp_parse_reply+0xde>
 80149f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	685b      	ldr	r3, [r3, #4]
 80149f6:	781b      	ldrb	r3, [r3, #0]
 80149f8:	e000      	b.n	80149fc <dhcp_parse_reply+0xe0>
 80149fa:	2300      	movs	r3, #0
 80149fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8014a08:	7dfb      	ldrb	r3, [r7, #23]
 8014a0a:	2b3b      	cmp	r3, #59	; 0x3b
 8014a0c:	f200 812c 	bhi.w	8014c68 <dhcp_parse_reply+0x34c>
 8014a10:	a201      	add	r2, pc, #4	; (adr r2, 8014a18 <dhcp_parse_reply+0xfc>)
 8014a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a16:	bf00      	nop
 8014a18:	08014b09 	.word	0x08014b09
 8014a1c:	08014b19 	.word	0x08014b19
 8014a20:	08014c69 	.word	0x08014c69
 8014a24:	08014b3b 	.word	0x08014b3b
 8014a28:	08014c69 	.word	0x08014c69
 8014a2c:	08014c69 	.word	0x08014c69
 8014a30:	08014c69 	.word	0x08014c69
 8014a34:	08014c69 	.word	0x08014c69
 8014a38:	08014c69 	.word	0x08014c69
 8014a3c:	08014c69 	.word	0x08014c69
 8014a40:	08014c69 	.word	0x08014c69
 8014a44:	08014c69 	.word	0x08014c69
 8014a48:	08014c69 	.word	0x08014c69
 8014a4c:	08014c69 	.word	0x08014c69
 8014a50:	08014c69 	.word	0x08014c69
 8014a54:	08014c69 	.word	0x08014c69
 8014a58:	08014c69 	.word	0x08014c69
 8014a5c:	08014c69 	.word	0x08014c69
 8014a60:	08014c69 	.word	0x08014c69
 8014a64:	08014c69 	.word	0x08014c69
 8014a68:	08014c69 	.word	0x08014c69
 8014a6c:	08014c69 	.word	0x08014c69
 8014a70:	08014c69 	.word	0x08014c69
 8014a74:	08014c69 	.word	0x08014c69
 8014a78:	08014c69 	.word	0x08014c69
 8014a7c:	08014c69 	.word	0x08014c69
 8014a80:	08014c69 	.word	0x08014c69
 8014a84:	08014c69 	.word	0x08014c69
 8014a88:	08014c69 	.word	0x08014c69
 8014a8c:	08014c69 	.word	0x08014c69
 8014a90:	08014c69 	.word	0x08014c69
 8014a94:	08014c69 	.word	0x08014c69
 8014a98:	08014c69 	.word	0x08014c69
 8014a9c:	08014c69 	.word	0x08014c69
 8014aa0:	08014c69 	.word	0x08014c69
 8014aa4:	08014c69 	.word	0x08014c69
 8014aa8:	08014c69 	.word	0x08014c69
 8014aac:	08014c69 	.word	0x08014c69
 8014ab0:	08014c69 	.word	0x08014c69
 8014ab4:	08014c69 	.word	0x08014c69
 8014ab8:	08014c69 	.word	0x08014c69
 8014abc:	08014c69 	.word	0x08014c69
 8014ac0:	08014c69 	.word	0x08014c69
 8014ac4:	08014c69 	.word	0x08014c69
 8014ac8:	08014c69 	.word	0x08014c69
 8014acc:	08014c69 	.word	0x08014c69
 8014ad0:	08014c69 	.word	0x08014c69
 8014ad4:	08014c69 	.word	0x08014c69
 8014ad8:	08014c69 	.word	0x08014c69
 8014adc:	08014c69 	.word	0x08014c69
 8014ae0:	08014c69 	.word	0x08014c69
 8014ae4:	08014b67 	.word	0x08014b67
 8014ae8:	08014b89 	.word	0x08014b89
 8014aec:	08014bc5 	.word	0x08014bc5
 8014af0:	08014be7 	.word	0x08014be7
 8014af4:	08014c69 	.word	0x08014c69
 8014af8:	08014c69 	.word	0x08014c69
 8014afc:	08014c69 	.word	0x08014c69
 8014b00:	08014c25 	.word	0x08014c25
 8014b04:	08014c47 	.word	0x08014c47
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014b08:	2300      	movs	r3, #0
 8014b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8014b16:	e0ab      	b.n	8014c70 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b1c:	2b04      	cmp	r3, #4
 8014b1e:	d009      	beq.n	8014b34 <dhcp_parse_reply+0x218>
 8014b20:	4b3a      	ldr	r3, [pc, #232]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014b22:	f240 622e 	movw	r2, #1582	; 0x62e
 8014b26:	493a      	ldr	r1, [pc, #232]	; (8014c10 <dhcp_parse_reply+0x2f4>)
 8014b28:	483a      	ldr	r0, [pc, #232]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014b2a:	f003 f93f 	bl	8017dac <iprintf>
 8014b2e:	f06f 0305 	mvn.w	r3, #5
 8014b32:	e1b0      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014b34:	2306      	movs	r3, #6
 8014b36:	623b      	str	r3, [r7, #32]
        break;
 8014b38:	e09a      	b.n	8014c70 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014b3a:	2304      	movs	r3, #4
 8014b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014b40:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014b44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d209      	bcs.n	8014b60 <dhcp_parse_reply+0x244>
 8014b4c:	4b2f      	ldr	r3, [pc, #188]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014b4e:	f240 6233 	movw	r2, #1587	; 0x633
 8014b52:	4931      	ldr	r1, [pc, #196]	; (8014c18 <dhcp_parse_reply+0x2fc>)
 8014b54:	482f      	ldr	r0, [pc, #188]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014b56:	f003 f929 	bl	8017dac <iprintf>
 8014b5a:	f06f 0305 	mvn.w	r3, #5
 8014b5e:	e19a      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014b60:	2307      	movs	r3, #7
 8014b62:	623b      	str	r3, [r7, #32]
        break;
 8014b64:	e084      	b.n	8014c70 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b6a:	2b04      	cmp	r3, #4
 8014b6c:	d009      	beq.n	8014b82 <dhcp_parse_reply+0x266>
 8014b6e:	4b27      	ldr	r3, [pc, #156]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014b70:	f240 6241 	movw	r2, #1601	; 0x641
 8014b74:	4926      	ldr	r1, [pc, #152]	; (8014c10 <dhcp_parse_reply+0x2f4>)
 8014b76:	4827      	ldr	r0, [pc, #156]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014b78:	f003 f918 	bl	8017dac <iprintf>
 8014b7c:	f06f 0305 	mvn.w	r3, #5
 8014b80:	e189      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014b82:	2303      	movs	r3, #3
 8014b84:	623b      	str	r3, [r7, #32]
        break;
 8014b86:	e073      	b.n	8014c70 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b8c:	2b01      	cmp	r3, #1
 8014b8e:	d009      	beq.n	8014ba4 <dhcp_parse_reply+0x288>
 8014b90:	4b1e      	ldr	r3, [pc, #120]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014b92:	f240 624f 	movw	r2, #1615	; 0x64f
 8014b96:	4921      	ldr	r1, [pc, #132]	; (8014c1c <dhcp_parse_reply+0x300>)
 8014b98:	481e      	ldr	r0, [pc, #120]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014b9a:	f003 f907 	bl	8017dac <iprintf>
 8014b9e:	f06f 0305 	mvn.w	r3, #5
 8014ba2:	e178      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014ba4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014ba6:	2bf0      	cmp	r3, #240	; 0xf0
 8014ba8:	d009      	beq.n	8014bbe <dhcp_parse_reply+0x2a2>
 8014baa:	4b18      	ldr	r3, [pc, #96]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014bac:	f240 6251 	movw	r2, #1617	; 0x651
 8014bb0:	491b      	ldr	r1, [pc, #108]	; (8014c20 <dhcp_parse_reply+0x304>)
 8014bb2:	4818      	ldr	r0, [pc, #96]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014bb4:	f003 f8fa 	bl	8017dac <iprintf>
 8014bb8:	f06f 0305 	mvn.w	r3, #5
 8014bbc:	e16b      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014bbe:	2300      	movs	r3, #0
 8014bc0:	623b      	str	r3, [r7, #32]
        break;
 8014bc2:	e055      	b.n	8014c70 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bc8:	2b01      	cmp	r3, #1
 8014bca:	d009      	beq.n	8014be0 <dhcp_parse_reply+0x2c4>
 8014bcc:	4b0f      	ldr	r3, [pc, #60]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014bce:	f240 6255 	movw	r2, #1621	; 0x655
 8014bd2:	4912      	ldr	r1, [pc, #72]	; (8014c1c <dhcp_parse_reply+0x300>)
 8014bd4:	480f      	ldr	r0, [pc, #60]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014bd6:	f003 f8e9 	bl	8017dac <iprintf>
 8014bda:	f06f 0305 	mvn.w	r3, #5
 8014bde:	e15a      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014be0:	2301      	movs	r3, #1
 8014be2:	623b      	str	r3, [r7, #32]
        break;
 8014be4:	e044      	b.n	8014c70 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014bea:	2b04      	cmp	r3, #4
 8014bec:	d009      	beq.n	8014c02 <dhcp_parse_reply+0x2e6>
 8014bee:	4b07      	ldr	r3, [pc, #28]	; (8014c0c <dhcp_parse_reply+0x2f0>)
 8014bf0:	f240 6259 	movw	r2, #1625	; 0x659
 8014bf4:	4906      	ldr	r1, [pc, #24]	; (8014c10 <dhcp_parse_reply+0x2f4>)
 8014bf6:	4807      	ldr	r0, [pc, #28]	; (8014c14 <dhcp_parse_reply+0x2f8>)
 8014bf8:	f003 f8d8 	bl	8017dac <iprintf>
 8014bfc:	f06f 0305 	mvn.w	r3, #5
 8014c00:	e149      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014c02:	2302      	movs	r3, #2
 8014c04:	623b      	str	r3, [r7, #32]
        break;
 8014c06:	e033      	b.n	8014c70 <dhcp_parse_reply+0x354>
 8014c08:	2000ceb8 	.word	0x2000ceb8
 8014c0c:	0801b444 	.word	0x0801b444
 8014c10:	0801b6cc 	.word	0x0801b6cc
 8014c14:	0801b4a4 	.word	0x0801b4a4
 8014c18:	0801b6d8 	.word	0x0801b6d8
 8014c1c:	0801b6ec 	.word	0x0801b6ec
 8014c20:	0801b6f8 	.word	0x0801b6f8
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c28:	2b04      	cmp	r3, #4
 8014c2a:	d009      	beq.n	8014c40 <dhcp_parse_reply+0x324>
 8014c2c:	4b9c      	ldr	r3, [pc, #624]	; (8014ea0 <dhcp_parse_reply+0x584>)
 8014c2e:	f240 625d 	movw	r2, #1629	; 0x65d
 8014c32:	499c      	ldr	r1, [pc, #624]	; (8014ea4 <dhcp_parse_reply+0x588>)
 8014c34:	489c      	ldr	r0, [pc, #624]	; (8014ea8 <dhcp_parse_reply+0x58c>)
 8014c36:	f003 f8b9 	bl	8017dac <iprintf>
 8014c3a:	f06f 0305 	mvn.w	r3, #5
 8014c3e:	e12a      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014c40:	2304      	movs	r3, #4
 8014c42:	623b      	str	r3, [r7, #32]
        break;
 8014c44:	e014      	b.n	8014c70 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c4a:	2b04      	cmp	r3, #4
 8014c4c:	d009      	beq.n	8014c62 <dhcp_parse_reply+0x346>
 8014c4e:	4b94      	ldr	r3, [pc, #592]	; (8014ea0 <dhcp_parse_reply+0x584>)
 8014c50:	f240 6261 	movw	r2, #1633	; 0x661
 8014c54:	4993      	ldr	r1, [pc, #588]	; (8014ea4 <dhcp_parse_reply+0x588>)
 8014c56:	4894      	ldr	r0, [pc, #592]	; (8014ea8 <dhcp_parse_reply+0x58c>)
 8014c58:	f003 f8a8 	bl	8017dac <iprintf>
 8014c5c:	f06f 0305 	mvn.w	r3, #5
 8014c60:	e119      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014c62:	2305      	movs	r3, #5
 8014c64:	623b      	str	r3, [r7, #32]
        break;
 8014c66:	e003      	b.n	8014c70 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8014c68:	2300      	movs	r3, #0
 8014c6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8014c6e:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8014c70:	7dfb      	ldrb	r3, [r7, #23]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d103      	bne.n	8014c7e <dhcp_parse_reply+0x362>
      offset++;
 8014c76:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014c78:	3301      	adds	r3, #1
 8014c7a:	877b      	strh	r3, [r7, #58]	; 0x3a
 8014c7c:	e0a1      	b.n	8014dc2 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8014c7e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c84:	4413      	add	r3, r2
 8014c86:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	dd02      	ble.n	8014c94 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8014c8e:	f06f 0301 	mvn.w	r3, #1
 8014c92:	e100      	b.n	8014e96 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8014c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014c9c:	4413      	add	r3, r2
 8014c9e:	b29b      	uxth	r3, r3
 8014ca0:	3302      	adds	r3, #2
 8014ca2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8014ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	f000 808a 	beq.w	8014dc2 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8014cae:	2300      	movs	r3, #0
 8014cb0:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014cb2:	6a3b      	ldr	r3, [r7, #32]
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	db02      	blt.n	8014cbe <dhcp_parse_reply+0x3a2>
 8014cb8:	6a3b      	ldr	r3, [r7, #32]
 8014cba:	2b07      	cmp	r3, #7
 8014cbc:	dd06      	ble.n	8014ccc <dhcp_parse_reply+0x3b0>
 8014cbe:	4b78      	ldr	r3, [pc, #480]	; (8014ea0 <dhcp_parse_reply+0x584>)
 8014cc0:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8014cc4:	4979      	ldr	r1, [pc, #484]	; (8014eac <dhcp_parse_reply+0x590>)
 8014cc6:	4878      	ldr	r0, [pc, #480]	; (8014ea8 <dhcp_parse_reply+0x58c>)
 8014cc8:	f003 f870 	bl	8017dac <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8014ccc:	4a78      	ldr	r2, [pc, #480]	; (8014eb0 <dhcp_parse_reply+0x594>)
 8014cce:	6a3b      	ldr	r3, [r7, #32]
 8014cd0:	4413      	add	r3, r2
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d174      	bne.n	8014dc2 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8014cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cdc:	2b04      	cmp	r3, #4
 8014cde:	bf28      	it	cs
 8014ce0:	2304      	movcs	r3, #4
 8014ce2:	b2db      	uxtb	r3, r3
 8014ce4:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014ce6:	8bfb      	ldrh	r3, [r7, #30]
 8014ce8:	8aba      	ldrh	r2, [r7, #20]
 8014cea:	f107 0108 	add.w	r1, r7, #8
 8014cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014cf0:	f7f7 fd18 	bl	800c724 <pbuf_copy_partial>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	461a      	mov	r2, r3
 8014cf8:	8abb      	ldrh	r3, [r7, #20]
 8014cfa:	4293      	cmp	r3, r2
 8014cfc:	d002      	beq.n	8014d04 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8014cfe:	f06f 0301 	mvn.w	r3, #1
 8014d02:	e0c8      	b.n	8014e96 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8014d04:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d08:	2b04      	cmp	r3, #4
 8014d0a:	d933      	bls.n	8014d74 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d10:	f003 0303 	and.w	r3, r3, #3
 8014d14:	b2db      	uxtb	r3, r3
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d009      	beq.n	8014d2e <dhcp_parse_reply+0x412>
 8014d1a:	4b61      	ldr	r3, [pc, #388]	; (8014ea0 <dhcp_parse_reply+0x584>)
 8014d1c:	f240 6281 	movw	r2, #1665	; 0x681
 8014d20:	4964      	ldr	r1, [pc, #400]	; (8014eb4 <dhcp_parse_reply+0x598>)
 8014d22:	4861      	ldr	r0, [pc, #388]	; (8014ea8 <dhcp_parse_reply+0x58c>)
 8014d24:	f003 f842 	bl	8017dac <iprintf>
 8014d28:	f06f 0305 	mvn.w	r3, #5
 8014d2c:	e0b3      	b.n	8014e96 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8014d2e:	4a60      	ldr	r2, [pc, #384]	; (8014eb0 <dhcp_parse_reply+0x594>)
 8014d30:	6a3b      	ldr	r3, [r7, #32]
 8014d32:	4413      	add	r3, r2
 8014d34:	2201      	movs	r2, #1
 8014d36:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014d38:	68bb      	ldr	r3, [r7, #8]
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	f7f5 fecd 	bl	800aada <lwip_htonl>
 8014d40:	4602      	mov	r2, r0
 8014d42:	495d      	ldr	r1, [pc, #372]	; (8014eb8 <dhcp_parse_reply+0x59c>)
 8014d44:	6a3b      	ldr	r3, [r7, #32]
 8014d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8014d4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d4e:	3b04      	subs	r3, #4
 8014d50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014d54:	8bfb      	ldrh	r3, [r7, #30]
 8014d56:	3304      	adds	r3, #4
 8014d58:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014d5a:	8a7a      	ldrh	r2, [r7, #18]
 8014d5c:	8bfb      	ldrh	r3, [r7, #30]
 8014d5e:	429a      	cmp	r2, r3
 8014d60:	d202      	bcs.n	8014d68 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 8014d62:	f06f 0301 	mvn.w	r3, #1
 8014d66:	e096      	b.n	8014e96 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014d68:	8a7b      	ldrh	r3, [r7, #18]
 8014d6a:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014d6c:	6a3b      	ldr	r3, [r7, #32]
 8014d6e:	3301      	adds	r3, #1
 8014d70:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8014d72:	e79e      	b.n	8014cb2 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014d74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d78:	2b04      	cmp	r3, #4
 8014d7a:	d106      	bne.n	8014d8a <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014d7c:	68bb      	ldr	r3, [r7, #8]
 8014d7e:	4618      	mov	r0, r3
 8014d80:	f7f5 feab 	bl	800aada <lwip_htonl>
 8014d84:	4603      	mov	r3, r0
 8014d86:	60bb      	str	r3, [r7, #8]
 8014d88:	e011      	b.n	8014dae <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014d8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014d8e:	2b01      	cmp	r3, #1
 8014d90:	d009      	beq.n	8014da6 <dhcp_parse_reply+0x48a>
 8014d92:	4b43      	ldr	r3, [pc, #268]	; (8014ea0 <dhcp_parse_reply+0x584>)
 8014d94:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014d98:	4948      	ldr	r1, [pc, #288]	; (8014ebc <dhcp_parse_reply+0x5a0>)
 8014d9a:	4843      	ldr	r0, [pc, #268]	; (8014ea8 <dhcp_parse_reply+0x58c>)
 8014d9c:	f003 f806 	bl	8017dac <iprintf>
 8014da0:	f06f 0305 	mvn.w	r3, #5
 8014da4:	e077      	b.n	8014e96 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014da6:	f107 0308 	add.w	r3, r7, #8
 8014daa:	781b      	ldrb	r3, [r3, #0]
 8014dac:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8014dae:	4a40      	ldr	r2, [pc, #256]	; (8014eb0 <dhcp_parse_reply+0x594>)
 8014db0:	6a3b      	ldr	r3, [r7, #32]
 8014db2:	4413      	add	r3, r2
 8014db4:	2201      	movs	r2, #1
 8014db6:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014db8:	68ba      	ldr	r2, [r7, #8]
 8014dba:	493f      	ldr	r1, [pc, #252]	; (8014eb8 <dhcp_parse_reply+0x59c>)
 8014dbc:	6a3b      	ldr	r3, [r7, #32]
 8014dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8014dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dc4:	895b      	ldrh	r3, [r3, #10]
 8014dc6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d324      	bcc.n	8014e16 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dce:	895b      	ldrh	r3, [r3, #10]
 8014dd0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014dd2:	1ad3      	subs	r3, r2, r3
 8014dd4:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd8:	895b      	ldrh	r3, [r3, #10]
 8014dda:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014ddc:	1ad3      	subs	r3, r2, r3
 8014dde:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8014de0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014de2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014de4:	429a      	cmp	r2, r3
 8014de6:	d213      	bcs.n	8014e10 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8014de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dea:	681b      	ldr	r3, [r3, #0]
 8014dec:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d109      	bne.n	8014e08 <dhcp_parse_reply+0x4ec>
 8014df4:	4b2a      	ldr	r3, [pc, #168]	; (8014ea0 <dhcp_parse_reply+0x584>)
 8014df6:	f240 629d 	movw	r2, #1693	; 0x69d
 8014dfa:	4931      	ldr	r1, [pc, #196]	; (8014ec0 <dhcp_parse_reply+0x5a4>)
 8014dfc:	482a      	ldr	r0, [pc, #168]	; (8014ea8 <dhcp_parse_reply+0x58c>)
 8014dfe:	f002 ffd5 	bl	8017dac <iprintf>
 8014e02:	f06f 0305 	mvn.w	r3, #5
 8014e06:	e046      	b.n	8014e96 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8014e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e0a:	685b      	ldr	r3, [r3, #4]
 8014e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014e0e:	e002      	b.n	8014e16 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8014e10:	f06f 0301 	mvn.w	r3, #1
 8014e14:	e03f      	b.n	8014e96 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d00a      	beq.n	8014e32 <dhcp_parse_reply+0x516>
 8014e1c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014e1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d206      	bcs.n	8014e32 <dhcp_parse_reply+0x516>
 8014e24:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014e26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014e28:	4413      	add	r3, r2
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	2bff      	cmp	r3, #255	; 0xff
 8014e2e:	f47f adb8 	bne.w	80149a2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014e32:	4b1f      	ldr	r3, [pc, #124]	; (8014eb0 <dhcp_parse_reply+0x594>)
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d018      	beq.n	8014e6c <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014e3a:	4b1f      	ldr	r3, [pc, #124]	; (8014eb8 <dhcp_parse_reply+0x59c>)
 8014e3c:	681b      	ldr	r3, [r3, #0]
 8014e3e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014e40:	4b1b      	ldr	r3, [pc, #108]	; (8014eb0 <dhcp_parse_reply+0x594>)
 8014e42:	2200      	movs	r2, #0
 8014e44:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d102      	bne.n	8014e52 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e50:	e00c      	b.n	8014e6c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	2b02      	cmp	r3, #2
 8014e56:	d102      	bne.n	8014e5e <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8014e58:	2301      	movs	r3, #1
 8014e5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e5c:	e006      	b.n	8014e6c <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2b03      	cmp	r3, #3
 8014e62:	d103      	bne.n	8014e6c <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014e64:	2301      	movs	r3, #1
 8014e66:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014e68:	2301      	movs	r3, #1
 8014e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d006      	beq.n	8014e80 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014e72:	2300      	movs	r3, #0
 8014e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014e76:	236c      	movs	r3, #108	; 0x6c
 8014e78:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014e7a:	23ec      	movs	r3, #236	; 0xec
 8014e7c:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8014e7e:	e56a      	b.n	8014956 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8014e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d006      	beq.n	8014e94 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014e86:	2300      	movs	r3, #0
 8014e88:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014e8a:	232c      	movs	r3, #44	; 0x2c
 8014e8c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014e8e:	236c      	movs	r3, #108	; 0x6c
 8014e90:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014e92:	e560      	b.n	8014956 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014e94:	2300      	movs	r3, #0
}
 8014e96:	4618      	mov	r0, r3
 8014e98:	3740      	adds	r7, #64	; 0x40
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	0801b444 	.word	0x0801b444
 8014ea4:	0801b6cc 	.word	0x0801b6cc
 8014ea8:	0801b4a4 	.word	0x0801b4a4
 8014eac:	0801b710 	.word	0x0801b710
 8014eb0:	2000ceb8 	.word	0x2000ceb8
 8014eb4:	0801b724 	.word	0x0801b724
 8014eb8:	2000ce98 	.word	0x2000ce98
 8014ebc:	0801b73c 	.word	0x0801b73c
 8014ec0:	0801b750 	.word	0x0801b750

08014ec4 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014ec4:	b580      	push	{r7, lr}
 8014ec6:	b08a      	sub	sp, #40	; 0x28
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	607a      	str	r2, [r7, #4]
 8014ed0:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014ed2:	4b60      	ldr	r3, [pc, #384]	; (8015054 <dhcp_recv+0x190>)
 8014ed4:	685b      	ldr	r3, [r3, #4]
 8014ed6:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014ed8:	6a3b      	ldr	r3, [r7, #32]
 8014eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014edc:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	685b      	ldr	r3, [r3, #4]
 8014ee2:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014ee4:	69fb      	ldr	r3, [r7, #28]
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	f000 809d 	beq.w	8015026 <dhcp_recv+0x162>
 8014eec:	69fb      	ldr	r3, [r7, #28]
 8014eee:	791b      	ldrb	r3, [r3, #4]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	f000 8098 	beq.w	8015026 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	895b      	ldrh	r3, [r3, #10]
 8014efa:	2b2b      	cmp	r3, #43	; 0x2b
 8014efc:	f240 8095 	bls.w	801502a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014f00:	69bb      	ldr	r3, [r7, #24]
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	2b02      	cmp	r3, #2
 8014f06:	f040 8092 	bne.w	801502e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014f0a:	2300      	movs	r3, #0
 8014f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f10:	e012      	b.n	8014f38 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f16:	6a3a      	ldr	r2, [r7, #32]
 8014f18:	4413      	add	r3, r2
 8014f1a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8014f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f22:	69b9      	ldr	r1, [r7, #24]
 8014f24:	440b      	add	r3, r1
 8014f26:	7f1b      	ldrb	r3, [r3, #28]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	f040 8082 	bne.w	8015032 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f32:	3301      	adds	r3, #1
 8014f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f38:	6a3b      	ldr	r3, [r7, #32]
 8014f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f3e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014f42:	429a      	cmp	r2, r3
 8014f44:	d203      	bcs.n	8014f4e <dhcp_recv+0x8a>
 8014f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f4a:	2b05      	cmp	r3, #5
 8014f4c:	d9e1      	bls.n	8014f12 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014f4e:	69bb      	ldr	r3, [r7, #24]
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	4618      	mov	r0, r3
 8014f54:	f7f5 fdc1 	bl	800aada <lwip_htonl>
 8014f58:	4602      	mov	r2, r0
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d169      	bne.n	8015036 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8014f62:	69f9      	ldr	r1, [r7, #28]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f7ff fcd9 	bl	801491c <dhcp_parse_reply>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d164      	bne.n	801503a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014f70:	4b39      	ldr	r3, [pc, #228]	; (8015058 <dhcp_recv+0x194>)
 8014f72:	785b      	ldrb	r3, [r3, #1]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d062      	beq.n	801503e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014f7e:	4b37      	ldr	r3, [pc, #220]	; (801505c <dhcp_recv+0x198>)
 8014f80:	685b      	ldr	r3, [r3, #4]
 8014f82:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014f84:	7cfb      	ldrb	r3, [r7, #19]
 8014f86:	2b05      	cmp	r3, #5
 8014f88:	d12a      	bne.n	8014fe0 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	795b      	ldrb	r3, [r3, #5]
 8014f8e:	2b01      	cmp	r3, #1
 8014f90:	d112      	bne.n	8014fb8 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014f92:	6979      	ldr	r1, [r7, #20]
 8014f94:	6a38      	ldr	r0, [r7, #32]
 8014f96:	f7fe fe17 	bl	8013bc8 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014f9a:	6a3b      	ldr	r3, [r7, #32]
 8014f9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014fa0:	f003 0308 	and.w	r3, r3, #8
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d003      	beq.n	8014fb0 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014fa8:	6a38      	ldr	r0, [r7, #32]
 8014faa:	f7fe fb85 	bl	80136b8 <dhcp_check>
 8014fae:	e049      	b.n	8015044 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014fb0:	6a38      	ldr	r0, [r7, #32]
 8014fb2:	f7ff f867 	bl	8014084 <dhcp_bind>
 8014fb6:	e045      	b.n	8015044 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	795b      	ldrb	r3, [r3, #5]
 8014fbc:	2b03      	cmp	r3, #3
 8014fbe:	d007      	beq.n	8014fd0 <dhcp_recv+0x10c>
 8014fc0:	69fb      	ldr	r3, [r7, #28]
 8014fc2:	795b      	ldrb	r3, [r3, #5]
 8014fc4:	2b04      	cmp	r3, #4
 8014fc6:	d003      	beq.n	8014fd0 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014fcc:	2b05      	cmp	r3, #5
 8014fce:	d139      	bne.n	8015044 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014fd0:	6979      	ldr	r1, [r7, #20]
 8014fd2:	6a38      	ldr	r0, [r7, #32]
 8014fd4:	f7fe fdf8 	bl	8013bc8 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014fd8:	6a38      	ldr	r0, [r7, #32]
 8014fda:	f7ff f853 	bl	8014084 <dhcp_bind>
 8014fde:	e031      	b.n	8015044 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014fe0:	7cfb      	ldrb	r3, [r7, #19]
 8014fe2:	2b06      	cmp	r3, #6
 8014fe4:	d113      	bne.n	801500e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014fe6:	69fb      	ldr	r3, [r7, #28]
 8014fe8:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014fea:	2b03      	cmp	r3, #3
 8014fec:	d00b      	beq.n	8015006 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014fee:	69fb      	ldr	r3, [r7, #28]
 8014ff0:	795b      	ldrb	r3, [r3, #5]
 8014ff2:	2b01      	cmp	r3, #1
 8014ff4:	d007      	beq.n	8015006 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014ff6:	69fb      	ldr	r3, [r7, #28]
 8014ff8:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014ffa:	2b04      	cmp	r3, #4
 8014ffc:	d003      	beq.n	8015006 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014ffe:	69fb      	ldr	r3, [r7, #28]
 8015000:	795b      	ldrb	r3, [r3, #5]
 8015002:	2b05      	cmp	r3, #5
 8015004:	d103      	bne.n	801500e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8015006:	6a38      	ldr	r0, [r7, #32]
 8015008:	f7fe fb3c 	bl	8013684 <dhcp_handle_nak>
 801500c:	e01a      	b.n	8015044 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801500e:	7cfb      	ldrb	r3, [r7, #19]
 8015010:	2b02      	cmp	r3, #2
 8015012:	d116      	bne.n	8015042 <dhcp_recv+0x17e>
 8015014:	69fb      	ldr	r3, [r7, #28]
 8015016:	795b      	ldrb	r3, [r3, #5]
 8015018:	2b06      	cmp	r3, #6
 801501a:	d112      	bne.n	8015042 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801501c:	6979      	ldr	r1, [r7, #20]
 801501e:	6a38      	ldr	r0, [r7, #32]
 8015020:	f7fe fb7e 	bl	8013720 <dhcp_handle_offer>
 8015024:	e00e      	b.n	8015044 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015026:	bf00      	nop
 8015028:	e00c      	b.n	8015044 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801502a:	bf00      	nop
 801502c:	e00a      	b.n	8015044 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801502e:	bf00      	nop
 8015030:	e008      	b.n	8015044 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8015032:	bf00      	nop
 8015034:	e006      	b.n	8015044 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8015036:	bf00      	nop
 8015038:	e004      	b.n	8015044 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801503a:	bf00      	nop
 801503c:	e002      	b.n	8015044 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801503e:	bf00      	nop
 8015040:	e000      	b.n	8015044 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8015042:	bf00      	nop
  pbuf_free(p);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7f7 f967 	bl	800c318 <pbuf_free>
}
 801504a:	bf00      	nop
 801504c:	3728      	adds	r7, #40	; 0x28
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	200096c4 	.word	0x200096c4
 8015058:	2000ceb8 	.word	0x2000ceb8
 801505c:	2000ce98 	.word	0x2000ce98

08015060 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b088      	sub	sp, #32
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	603b      	str	r3, [r7, #0]
 801506c:	4613      	mov	r3, r2
 801506e:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8015070:	68fb      	ldr	r3, [r7, #12]
 8015072:	2b00      	cmp	r3, #0
 8015074:	d108      	bne.n	8015088 <dhcp_create_msg+0x28>
 8015076:	4b5f      	ldr	r3, [pc, #380]	; (80151f4 <dhcp_create_msg+0x194>)
 8015078:	f240 7269 	movw	r2, #1897	; 0x769
 801507c:	495e      	ldr	r1, [pc, #376]	; (80151f8 <dhcp_create_msg+0x198>)
 801507e:	485f      	ldr	r0, [pc, #380]	; (80151fc <dhcp_create_msg+0x19c>)
 8015080:	f002 fe94 	bl	8017dac <iprintf>
 8015084:	2300      	movs	r3, #0
 8015086:	e0b1      	b.n	80151ec <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d108      	bne.n	80150a0 <dhcp_create_msg+0x40>
 801508e:	4b59      	ldr	r3, [pc, #356]	; (80151f4 <dhcp_create_msg+0x194>)
 8015090:	f240 726a 	movw	r2, #1898	; 0x76a
 8015094:	495a      	ldr	r1, [pc, #360]	; (8015200 <dhcp_create_msg+0x1a0>)
 8015096:	4859      	ldr	r0, [pc, #356]	; (80151fc <dhcp_create_msg+0x19c>)
 8015098:	f002 fe88 	bl	8017dac <iprintf>
 801509c:	2300      	movs	r3, #0
 801509e:	e0a5      	b.n	80151ec <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80150a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80150a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80150a8:	2036      	movs	r0, #54	; 0x36
 80150aa:	f7f6 fe51 	bl	800bd50 <pbuf_alloc>
 80150ae:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 80150b0:	69bb      	ldr	r3, [r7, #24]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d101      	bne.n	80150ba <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 80150b6:	2300      	movs	r3, #0
 80150b8:	e098      	b.n	80151ec <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80150ba:	69bb      	ldr	r3, [r7, #24]
 80150bc:	895b      	ldrh	r3, [r3, #10]
 80150be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80150c2:	d206      	bcs.n	80150d2 <dhcp_create_msg+0x72>
 80150c4:	4b4b      	ldr	r3, [pc, #300]	; (80151f4 <dhcp_create_msg+0x194>)
 80150c6:	f240 7271 	movw	r2, #1905	; 0x771
 80150ca:	494e      	ldr	r1, [pc, #312]	; (8015204 <dhcp_create_msg+0x1a4>)
 80150cc:	484b      	ldr	r0, [pc, #300]	; (80151fc <dhcp_create_msg+0x19c>)
 80150ce:	f002 fe6d 	bl	8017dac <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80150d2:	79fb      	ldrb	r3, [r7, #7]
 80150d4:	2b03      	cmp	r3, #3
 80150d6:	d103      	bne.n	80150e0 <dhcp_create_msg+0x80>
 80150d8:	68bb      	ldr	r3, [r7, #8]
 80150da:	795b      	ldrb	r3, [r3, #5]
 80150dc:	2b03      	cmp	r3, #3
 80150de:	d10d      	bne.n	80150fc <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80150e0:	68bb      	ldr	r3, [r7, #8]
 80150e2:	799b      	ldrb	r3, [r3, #6]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d105      	bne.n	80150f4 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80150e8:	f002 fce6 	bl	8017ab8 <rand>
 80150ec:	4603      	mov	r3, r0
 80150ee:	461a      	mov	r2, r3
 80150f0:	4b45      	ldr	r3, [pc, #276]	; (8015208 <dhcp_create_msg+0x1a8>)
 80150f2:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80150f4:	4b44      	ldr	r3, [pc, #272]	; (8015208 <dhcp_create_msg+0x1a8>)
 80150f6:	681a      	ldr	r2, [r3, #0]
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80150fc:	69bb      	ldr	r3, [r7, #24]
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8015102:	f44f 729a 	mov.w	r2, #308	; 0x134
 8015106:	2100      	movs	r1, #0
 8015108:	6978      	ldr	r0, [r7, #20]
 801510a:	f002 feb4 	bl	8017e76 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801510e:	697b      	ldr	r3, [r7, #20]
 8015110:	2201      	movs	r2, #1
 8015112:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8015114:	697b      	ldr	r3, [r7, #20]
 8015116:	2201      	movs	r2, #1
 8015118:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801511a:	68fb      	ldr	r3, [r7, #12]
 801511c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8015120:	697b      	ldr	r3, [r7, #20]
 8015122:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8015124:	68bb      	ldr	r3, [r7, #8]
 8015126:	681b      	ldr	r3, [r3, #0]
 8015128:	4618      	mov	r0, r3
 801512a:	f7f5 fcd6 	bl	800aada <lwip_htonl>
 801512e:	4602      	mov	r2, r0
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8015134:	79fb      	ldrb	r3, [r7, #7]
 8015136:	2b08      	cmp	r3, #8
 8015138:	d010      	beq.n	801515c <dhcp_create_msg+0xfc>
 801513a:	79fb      	ldrb	r3, [r7, #7]
 801513c:	2b04      	cmp	r3, #4
 801513e:	d00d      	beq.n	801515c <dhcp_create_msg+0xfc>
 8015140:	79fb      	ldrb	r3, [r7, #7]
 8015142:	2b07      	cmp	r3, #7
 8015144:	d00a      	beq.n	801515c <dhcp_create_msg+0xfc>
 8015146:	79fb      	ldrb	r3, [r7, #7]
 8015148:	2b03      	cmp	r3, #3
 801514a:	d10c      	bne.n	8015166 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8015150:	2b05      	cmp	r3, #5
 8015152:	d003      	beq.n	801515c <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8015154:	68bb      	ldr	r3, [r7, #8]
 8015156:	795b      	ldrb	r3, [r3, #5]
 8015158:	2b04      	cmp	r3, #4
 801515a:	d104      	bne.n	8015166 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	3304      	adds	r3, #4
 8015160:	681a      	ldr	r2, [r3, #0]
 8015162:	697b      	ldr	r3, [r7, #20]
 8015164:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015166:	2300      	movs	r3, #0
 8015168:	83fb      	strh	r3, [r7, #30]
 801516a:	e00c      	b.n	8015186 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801516c:	8bfa      	ldrh	r2, [r7, #30]
 801516e:	8bfb      	ldrh	r3, [r7, #30]
 8015170:	68f9      	ldr	r1, [r7, #12]
 8015172:	440a      	add	r2, r1
 8015174:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8015178:	697a      	ldr	r2, [r7, #20]
 801517a:	4413      	add	r3, r2
 801517c:	460a      	mov	r2, r1
 801517e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8015180:	8bfb      	ldrh	r3, [r7, #30]
 8015182:	3301      	adds	r3, #1
 8015184:	83fb      	strh	r3, [r7, #30]
 8015186:	8bfb      	ldrh	r3, [r7, #30]
 8015188:	2b05      	cmp	r3, #5
 801518a:	d9ef      	bls.n	801516c <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	2200      	movs	r2, #0
 8015190:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8015194:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8015198:	2200      	movs	r2, #0
 801519a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801519e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80151a2:	2200      	movs	r2, #0
 80151a4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80151a8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80151ac:	2200      	movs	r2, #0
 80151ae:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80151b2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80151b6:	697b      	ldr	r3, [r7, #20]
 80151b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151bc:	2301      	movs	r3, #1
 80151be:	2235      	movs	r2, #53	; 0x35
 80151c0:	2000      	movs	r0, #0
 80151c2:	f7ff fadb 	bl	801477c <dhcp_option>
 80151c6:	4603      	mov	r3, r0
 80151c8:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 80151ca:	697b      	ldr	r3, [r7, #20]
 80151cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80151d0:	79fa      	ldrb	r2, [r7, #7]
 80151d2:	8a7b      	ldrh	r3, [r7, #18]
 80151d4:	4618      	mov	r0, r3
 80151d6:	f7ff fb05 	bl	80147e4 <dhcp_option_byte>
 80151da:	4603      	mov	r3, r0
 80151dc:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 80151de:	683b      	ldr	r3, [r7, #0]
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	d002      	beq.n	80151ea <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 80151e4:	683b      	ldr	r3, [r7, #0]
 80151e6:	8a7a      	ldrh	r2, [r7, #18]
 80151e8:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 80151ea:	69bb      	ldr	r3, [r7, #24]
}
 80151ec:	4618      	mov	r0, r3
 80151ee:	3720      	adds	r7, #32
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}
 80151f4:	0801b444 	.word	0x0801b444
 80151f8:	0801b764 	.word	0x0801b764
 80151fc:	0801b4a4 	.word	0x0801b4a4
 8015200:	0801b784 	.word	0x0801b784
 8015204:	0801b7a4 	.word	0x0801b7a4
 8015208:	2000cec8 	.word	0x2000cec8

0801520c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801520c:	b580      	push	{r7, lr}
 801520e:	b084      	sub	sp, #16
 8015210:	af00      	add	r7, sp, #0
 8015212:	4603      	mov	r3, r0
 8015214:	60b9      	str	r1, [r7, #8]
 8015216:	607a      	str	r2, [r7, #4]
 8015218:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801521a:	89fb      	ldrh	r3, [r7, #14]
 801521c:	1c5a      	adds	r2, r3, #1
 801521e:	81fa      	strh	r2, [r7, #14]
 8015220:	461a      	mov	r2, r3
 8015222:	68bb      	ldr	r3, [r7, #8]
 8015224:	4413      	add	r3, r2
 8015226:	22ff      	movs	r2, #255	; 0xff
 8015228:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801522a:	e007      	b.n	801523c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801522c:	89fb      	ldrh	r3, [r7, #14]
 801522e:	1c5a      	adds	r2, r3, #1
 8015230:	81fa      	strh	r2, [r7, #14]
 8015232:	461a      	mov	r2, r3
 8015234:	68bb      	ldr	r3, [r7, #8]
 8015236:	4413      	add	r3, r2
 8015238:	2200      	movs	r2, #0
 801523a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801523c:	89fb      	ldrh	r3, [r7, #14]
 801523e:	2b43      	cmp	r3, #67	; 0x43
 8015240:	d904      	bls.n	801524c <dhcp_option_trailer+0x40>
 8015242:	89fb      	ldrh	r3, [r7, #14]
 8015244:	f003 0303 	and.w	r3, r3, #3
 8015248:	2b00      	cmp	r3, #0
 801524a:	d002      	beq.n	8015252 <dhcp_option_trailer+0x46>
 801524c:	89fb      	ldrh	r3, [r7, #14]
 801524e:	2b43      	cmp	r3, #67	; 0x43
 8015250:	d9ec      	bls.n	801522c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8015252:	89fb      	ldrh	r3, [r7, #14]
 8015254:	33f0      	adds	r3, #240	; 0xf0
 8015256:	b29b      	uxth	r3, r3
 8015258:	4619      	mov	r1, r3
 801525a:	6878      	ldr	r0, [r7, #4]
 801525c:	f7f6 fed6 	bl	800c00c <pbuf_realloc>
}
 8015260:	bf00      	nop
 8015262:	3710      	adds	r7, #16
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8015268:	b480      	push	{r7}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d017      	beq.n	80152a6 <dhcp_supplied_address+0x3e>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801527a:	2b00      	cmp	r3, #0
 801527c:	d013      	beq.n	80152a6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015282:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	795b      	ldrb	r3, [r3, #5]
 8015288:	2b0a      	cmp	r3, #10
 801528a:	d007      	beq.n	801529c <dhcp_supplied_address+0x34>
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	795b      	ldrb	r3, [r3, #5]
 8015290:	2b05      	cmp	r3, #5
 8015292:	d003      	beq.n	801529c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8015298:	2b04      	cmp	r3, #4
 801529a:	d101      	bne.n	80152a0 <dhcp_supplied_address+0x38>
 801529c:	2301      	movs	r3, #1
 801529e:	e000      	b.n	80152a2 <dhcp_supplied_address+0x3a>
 80152a0:	2300      	movs	r3, #0
 80152a2:	b2db      	uxtb	r3, r3
 80152a4:	e000      	b.n	80152a8 <dhcp_supplied_address+0x40>
  }
  return 0;
 80152a6:	2300      	movs	r3, #0
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3714      	adds	r7, #20
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80152b4:	b580      	push	{r7, lr}
 80152b6:	b082      	sub	sp, #8
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80152bc:	4915      	ldr	r1, [pc, #84]	; (8015314 <etharp_free_entry+0x60>)
 80152be:	687a      	ldr	r2, [r7, #4]
 80152c0:	4613      	mov	r3, r2
 80152c2:	005b      	lsls	r3, r3, #1
 80152c4:	4413      	add	r3, r2
 80152c6:	00db      	lsls	r3, r3, #3
 80152c8:	440b      	add	r3, r1
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d013      	beq.n	80152f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80152d0:	4910      	ldr	r1, [pc, #64]	; (8015314 <etharp_free_entry+0x60>)
 80152d2:	687a      	ldr	r2, [r7, #4]
 80152d4:	4613      	mov	r3, r2
 80152d6:	005b      	lsls	r3, r3, #1
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7f7 f819 	bl	800c318 <pbuf_free>
    arp_table[i].q = NULL;
 80152e6:	490b      	ldr	r1, [pc, #44]	; (8015314 <etharp_free_entry+0x60>)
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	4613      	mov	r3, r2
 80152ec:	005b      	lsls	r3, r3, #1
 80152ee:	4413      	add	r3, r2
 80152f0:	00db      	lsls	r3, r3, #3
 80152f2:	440b      	add	r3, r1
 80152f4:	2200      	movs	r2, #0
 80152f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80152f8:	4906      	ldr	r1, [pc, #24]	; (8015314 <etharp_free_entry+0x60>)
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	4613      	mov	r3, r2
 80152fe:	005b      	lsls	r3, r3, #1
 8015300:	4413      	add	r3, r2
 8015302:	00db      	lsls	r3, r3, #3
 8015304:	440b      	add	r3, r1
 8015306:	3314      	adds	r3, #20
 8015308:	2200      	movs	r2, #0
 801530a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801530c:	bf00      	nop
 801530e:	3708      	adds	r7, #8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	2000cecc 	.word	0x2000cecc

08015318 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015318:	b580      	push	{r7, lr}
 801531a:	b082      	sub	sp, #8
 801531c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801531e:	2300      	movs	r3, #0
 8015320:	607b      	str	r3, [r7, #4]
 8015322:	e096      	b.n	8015452 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015324:	494f      	ldr	r1, [pc, #316]	; (8015464 <etharp_tmr+0x14c>)
 8015326:	687a      	ldr	r2, [r7, #4]
 8015328:	4613      	mov	r3, r2
 801532a:	005b      	lsls	r3, r3, #1
 801532c:	4413      	add	r3, r2
 801532e:	00db      	lsls	r3, r3, #3
 8015330:	440b      	add	r3, r1
 8015332:	3314      	adds	r3, #20
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015338:	78fb      	ldrb	r3, [r7, #3]
 801533a:	2b00      	cmp	r3, #0
 801533c:	f000 8086 	beq.w	801544c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015340:	4948      	ldr	r1, [pc, #288]	; (8015464 <etharp_tmr+0x14c>)
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	4613      	mov	r3, r2
 8015346:	005b      	lsls	r3, r3, #1
 8015348:	4413      	add	r3, r2
 801534a:	00db      	lsls	r3, r3, #3
 801534c:	440b      	add	r3, r1
 801534e:	3312      	adds	r3, #18
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	3301      	adds	r3, #1
 8015354:	b298      	uxth	r0, r3
 8015356:	4943      	ldr	r1, [pc, #268]	; (8015464 <etharp_tmr+0x14c>)
 8015358:	687a      	ldr	r2, [r7, #4]
 801535a:	4613      	mov	r3, r2
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	4413      	add	r3, r2
 8015360:	00db      	lsls	r3, r3, #3
 8015362:	440b      	add	r3, r1
 8015364:	3312      	adds	r3, #18
 8015366:	4602      	mov	r2, r0
 8015368:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801536a:	493e      	ldr	r1, [pc, #248]	; (8015464 <etharp_tmr+0x14c>)
 801536c:	687a      	ldr	r2, [r7, #4]
 801536e:	4613      	mov	r3, r2
 8015370:	005b      	lsls	r3, r3, #1
 8015372:	4413      	add	r3, r2
 8015374:	00db      	lsls	r3, r3, #3
 8015376:	440b      	add	r3, r1
 8015378:	3312      	adds	r3, #18
 801537a:	881b      	ldrh	r3, [r3, #0]
 801537c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015380:	d215      	bcs.n	80153ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015382:	4938      	ldr	r1, [pc, #224]	; (8015464 <etharp_tmr+0x14c>)
 8015384:	687a      	ldr	r2, [r7, #4]
 8015386:	4613      	mov	r3, r2
 8015388:	005b      	lsls	r3, r3, #1
 801538a:	4413      	add	r3, r2
 801538c:	00db      	lsls	r3, r3, #3
 801538e:	440b      	add	r3, r1
 8015390:	3314      	adds	r3, #20
 8015392:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015394:	2b01      	cmp	r3, #1
 8015396:	d10e      	bne.n	80153b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015398:	4932      	ldr	r1, [pc, #200]	; (8015464 <etharp_tmr+0x14c>)
 801539a:	687a      	ldr	r2, [r7, #4]
 801539c:	4613      	mov	r3, r2
 801539e:	005b      	lsls	r3, r3, #1
 80153a0:	4413      	add	r3, r2
 80153a2:	00db      	lsls	r3, r3, #3
 80153a4:	440b      	add	r3, r1
 80153a6:	3312      	adds	r3, #18
 80153a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80153aa:	2b04      	cmp	r3, #4
 80153ac:	d903      	bls.n	80153b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f7ff ff80 	bl	80152b4 <etharp_free_entry>
 80153b4:	e04a      	b.n	801544c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80153b6:	492b      	ldr	r1, [pc, #172]	; (8015464 <etharp_tmr+0x14c>)
 80153b8:	687a      	ldr	r2, [r7, #4]
 80153ba:	4613      	mov	r3, r2
 80153bc:	005b      	lsls	r3, r3, #1
 80153be:	4413      	add	r3, r2
 80153c0:	00db      	lsls	r3, r3, #3
 80153c2:	440b      	add	r3, r1
 80153c4:	3314      	adds	r3, #20
 80153c6:	781b      	ldrb	r3, [r3, #0]
 80153c8:	2b03      	cmp	r3, #3
 80153ca:	d10a      	bne.n	80153e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80153cc:	4925      	ldr	r1, [pc, #148]	; (8015464 <etharp_tmr+0x14c>)
 80153ce:	687a      	ldr	r2, [r7, #4]
 80153d0:	4613      	mov	r3, r2
 80153d2:	005b      	lsls	r3, r3, #1
 80153d4:	4413      	add	r3, r2
 80153d6:	00db      	lsls	r3, r3, #3
 80153d8:	440b      	add	r3, r1
 80153da:	3314      	adds	r3, #20
 80153dc:	2204      	movs	r2, #4
 80153de:	701a      	strb	r2, [r3, #0]
 80153e0:	e034      	b.n	801544c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80153e2:	4920      	ldr	r1, [pc, #128]	; (8015464 <etharp_tmr+0x14c>)
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	4613      	mov	r3, r2
 80153e8:	005b      	lsls	r3, r3, #1
 80153ea:	4413      	add	r3, r2
 80153ec:	00db      	lsls	r3, r3, #3
 80153ee:	440b      	add	r3, r1
 80153f0:	3314      	adds	r3, #20
 80153f2:	781b      	ldrb	r3, [r3, #0]
 80153f4:	2b04      	cmp	r3, #4
 80153f6:	d10a      	bne.n	801540e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80153f8:	491a      	ldr	r1, [pc, #104]	; (8015464 <etharp_tmr+0x14c>)
 80153fa:	687a      	ldr	r2, [r7, #4]
 80153fc:	4613      	mov	r3, r2
 80153fe:	005b      	lsls	r3, r3, #1
 8015400:	4413      	add	r3, r2
 8015402:	00db      	lsls	r3, r3, #3
 8015404:	440b      	add	r3, r1
 8015406:	3314      	adds	r3, #20
 8015408:	2202      	movs	r2, #2
 801540a:	701a      	strb	r2, [r3, #0]
 801540c:	e01e      	b.n	801544c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801540e:	4915      	ldr	r1, [pc, #84]	; (8015464 <etharp_tmr+0x14c>)
 8015410:	687a      	ldr	r2, [r7, #4]
 8015412:	4613      	mov	r3, r2
 8015414:	005b      	lsls	r3, r3, #1
 8015416:	4413      	add	r3, r2
 8015418:	00db      	lsls	r3, r3, #3
 801541a:	440b      	add	r3, r1
 801541c:	3314      	adds	r3, #20
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	2b01      	cmp	r3, #1
 8015422:	d113      	bne.n	801544c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015424:	490f      	ldr	r1, [pc, #60]	; (8015464 <etharp_tmr+0x14c>)
 8015426:	687a      	ldr	r2, [r7, #4]
 8015428:	4613      	mov	r3, r2
 801542a:	005b      	lsls	r3, r3, #1
 801542c:	4413      	add	r3, r2
 801542e:	00db      	lsls	r3, r3, #3
 8015430:	440b      	add	r3, r1
 8015432:	3308      	adds	r3, #8
 8015434:	6818      	ldr	r0, [r3, #0]
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	4613      	mov	r3, r2
 801543a:	005b      	lsls	r3, r3, #1
 801543c:	4413      	add	r3, r2
 801543e:	00db      	lsls	r3, r3, #3
 8015440:	4a08      	ldr	r2, [pc, #32]	; (8015464 <etharp_tmr+0x14c>)
 8015442:	4413      	add	r3, r2
 8015444:	3304      	adds	r3, #4
 8015446:	4619      	mov	r1, r3
 8015448:	f000 fe72 	bl	8016130 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	3301      	adds	r3, #1
 8015450:	607b      	str	r3, [r7, #4]
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	2b09      	cmp	r3, #9
 8015456:	f77f af65 	ble.w	8015324 <etharp_tmr+0xc>
      }
    }
  }
}
 801545a:	bf00      	nop
 801545c:	bf00      	nop
 801545e:	3708      	adds	r7, #8
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	2000cecc 	.word	0x2000cecc

08015468 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b08a      	sub	sp, #40	; 0x28
 801546c:	af00      	add	r7, sp, #0
 801546e:	60f8      	str	r0, [r7, #12]
 8015470:	460b      	mov	r3, r1
 8015472:	607a      	str	r2, [r7, #4]
 8015474:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015476:	230a      	movs	r3, #10
 8015478:	84fb      	strh	r3, [r7, #38]	; 0x26
 801547a:	230a      	movs	r3, #10
 801547c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801547e:	230a      	movs	r3, #10
 8015480:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015482:	2300      	movs	r3, #0
 8015484:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015486:	230a      	movs	r3, #10
 8015488:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801548a:	2300      	movs	r3, #0
 801548c:	83bb      	strh	r3, [r7, #28]
 801548e:	2300      	movs	r3, #0
 8015490:	837b      	strh	r3, [r7, #26]
 8015492:	2300      	movs	r3, #0
 8015494:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015496:	2300      	movs	r3, #0
 8015498:	843b      	strh	r3, [r7, #32]
 801549a:	e0ae      	b.n	80155fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801549c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154a0:	49a6      	ldr	r1, [pc, #664]	; (801573c <etharp_find_entry+0x2d4>)
 80154a2:	4613      	mov	r3, r2
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	4413      	add	r3, r2
 80154a8:	00db      	lsls	r3, r3, #3
 80154aa:	440b      	add	r3, r1
 80154ac:	3314      	adds	r3, #20
 80154ae:	781b      	ldrb	r3, [r3, #0]
 80154b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80154b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80154b6:	2b0a      	cmp	r3, #10
 80154b8:	d105      	bne.n	80154c6 <etharp_find_entry+0x5e>
 80154ba:	7dfb      	ldrb	r3, [r7, #23]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d102      	bne.n	80154c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80154c0:	8c3b      	ldrh	r3, [r7, #32]
 80154c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80154c4:	e095      	b.n	80155f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80154c6:	7dfb      	ldrb	r3, [r7, #23]
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	f000 8092 	beq.w	80155f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80154ce:	7dfb      	ldrb	r3, [r7, #23]
 80154d0:	2b01      	cmp	r3, #1
 80154d2:	d009      	beq.n	80154e8 <etharp_find_entry+0x80>
 80154d4:	7dfb      	ldrb	r3, [r7, #23]
 80154d6:	2b01      	cmp	r3, #1
 80154d8:	d806      	bhi.n	80154e8 <etharp_find_entry+0x80>
 80154da:	4b99      	ldr	r3, [pc, #612]	; (8015740 <etharp_find_entry+0x2d8>)
 80154dc:	f240 1223 	movw	r2, #291	; 0x123
 80154e0:	4998      	ldr	r1, [pc, #608]	; (8015744 <etharp_find_entry+0x2dc>)
 80154e2:	4899      	ldr	r0, [pc, #612]	; (8015748 <etharp_find_entry+0x2e0>)
 80154e4:	f002 fc62 	bl	8017dac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d020      	beq.n	8015530 <etharp_find_entry+0xc8>
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	6819      	ldr	r1, [r3, #0]
 80154f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80154f6:	4891      	ldr	r0, [pc, #580]	; (801573c <etharp_find_entry+0x2d4>)
 80154f8:	4613      	mov	r3, r2
 80154fa:	005b      	lsls	r3, r3, #1
 80154fc:	4413      	add	r3, r2
 80154fe:	00db      	lsls	r3, r3, #3
 8015500:	4403      	add	r3, r0
 8015502:	3304      	adds	r3, #4
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	4299      	cmp	r1, r3
 8015508:	d112      	bne.n	8015530 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801550a:	687b      	ldr	r3, [r7, #4]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d00c      	beq.n	801552a <etharp_find_entry+0xc2>
 8015510:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015514:	4989      	ldr	r1, [pc, #548]	; (801573c <etharp_find_entry+0x2d4>)
 8015516:	4613      	mov	r3, r2
 8015518:	005b      	lsls	r3, r3, #1
 801551a:	4413      	add	r3, r2
 801551c:	00db      	lsls	r3, r3, #3
 801551e:	440b      	add	r3, r1
 8015520:	3308      	adds	r3, #8
 8015522:	681b      	ldr	r3, [r3, #0]
 8015524:	687a      	ldr	r2, [r7, #4]
 8015526:	429a      	cmp	r2, r3
 8015528:	d102      	bne.n	8015530 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801552a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801552e:	e100      	b.n	8015732 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015530:	7dfb      	ldrb	r3, [r7, #23]
 8015532:	2b01      	cmp	r3, #1
 8015534:	d140      	bne.n	80155b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801553a:	4980      	ldr	r1, [pc, #512]	; (801573c <etharp_find_entry+0x2d4>)
 801553c:	4613      	mov	r3, r2
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	4413      	add	r3, r2
 8015542:	00db      	lsls	r3, r3, #3
 8015544:	440b      	add	r3, r1
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2b00      	cmp	r3, #0
 801554a:	d01a      	beq.n	8015582 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801554c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015550:	497a      	ldr	r1, [pc, #488]	; (801573c <etharp_find_entry+0x2d4>)
 8015552:	4613      	mov	r3, r2
 8015554:	005b      	lsls	r3, r3, #1
 8015556:	4413      	add	r3, r2
 8015558:	00db      	lsls	r3, r3, #3
 801555a:	440b      	add	r3, r1
 801555c:	3312      	adds	r3, #18
 801555e:	881b      	ldrh	r3, [r3, #0]
 8015560:	8bba      	ldrh	r2, [r7, #28]
 8015562:	429a      	cmp	r2, r3
 8015564:	d845      	bhi.n	80155f2 <etharp_find_entry+0x18a>
            old_queue = i;
 8015566:	8c3b      	ldrh	r3, [r7, #32]
 8015568:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801556a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801556e:	4973      	ldr	r1, [pc, #460]	; (801573c <etharp_find_entry+0x2d4>)
 8015570:	4613      	mov	r3, r2
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	4413      	add	r3, r2
 8015576:	00db      	lsls	r3, r3, #3
 8015578:	440b      	add	r3, r1
 801557a:	3312      	adds	r3, #18
 801557c:	881b      	ldrh	r3, [r3, #0]
 801557e:	83bb      	strh	r3, [r7, #28]
 8015580:	e037      	b.n	80155f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015582:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015586:	496d      	ldr	r1, [pc, #436]	; (801573c <etharp_find_entry+0x2d4>)
 8015588:	4613      	mov	r3, r2
 801558a:	005b      	lsls	r3, r3, #1
 801558c:	4413      	add	r3, r2
 801558e:	00db      	lsls	r3, r3, #3
 8015590:	440b      	add	r3, r1
 8015592:	3312      	adds	r3, #18
 8015594:	881b      	ldrh	r3, [r3, #0]
 8015596:	8b7a      	ldrh	r2, [r7, #26]
 8015598:	429a      	cmp	r2, r3
 801559a:	d82a      	bhi.n	80155f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801559c:	8c3b      	ldrh	r3, [r7, #32]
 801559e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80155a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155a4:	4965      	ldr	r1, [pc, #404]	; (801573c <etharp_find_entry+0x2d4>)
 80155a6:	4613      	mov	r3, r2
 80155a8:	005b      	lsls	r3, r3, #1
 80155aa:	4413      	add	r3, r2
 80155ac:	00db      	lsls	r3, r3, #3
 80155ae:	440b      	add	r3, r1
 80155b0:	3312      	adds	r3, #18
 80155b2:	881b      	ldrh	r3, [r3, #0]
 80155b4:	837b      	strh	r3, [r7, #26]
 80155b6:	e01c      	b.n	80155f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80155b8:	7dfb      	ldrb	r3, [r7, #23]
 80155ba:	2b01      	cmp	r3, #1
 80155bc:	d919      	bls.n	80155f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80155be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155c2:	495e      	ldr	r1, [pc, #376]	; (801573c <etharp_find_entry+0x2d4>)
 80155c4:	4613      	mov	r3, r2
 80155c6:	005b      	lsls	r3, r3, #1
 80155c8:	4413      	add	r3, r2
 80155ca:	00db      	lsls	r3, r3, #3
 80155cc:	440b      	add	r3, r1
 80155ce:	3312      	adds	r3, #18
 80155d0:	881b      	ldrh	r3, [r3, #0]
 80155d2:	8b3a      	ldrh	r2, [r7, #24]
 80155d4:	429a      	cmp	r2, r3
 80155d6:	d80c      	bhi.n	80155f2 <etharp_find_entry+0x18a>
            old_stable = i;
 80155d8:	8c3b      	ldrh	r3, [r7, #32]
 80155da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80155dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80155e0:	4956      	ldr	r1, [pc, #344]	; (801573c <etharp_find_entry+0x2d4>)
 80155e2:	4613      	mov	r3, r2
 80155e4:	005b      	lsls	r3, r3, #1
 80155e6:	4413      	add	r3, r2
 80155e8:	00db      	lsls	r3, r3, #3
 80155ea:	440b      	add	r3, r1
 80155ec:	3312      	adds	r3, #18
 80155ee:	881b      	ldrh	r3, [r3, #0]
 80155f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155f2:	8c3b      	ldrh	r3, [r7, #32]
 80155f4:	3301      	adds	r3, #1
 80155f6:	b29b      	uxth	r3, r3
 80155f8:	843b      	strh	r3, [r7, #32]
 80155fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80155fe:	2b09      	cmp	r3, #9
 8015600:	f77f af4c 	ble.w	801549c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015604:	7afb      	ldrb	r3, [r7, #11]
 8015606:	f003 0302 	and.w	r3, r3, #2
 801560a:	2b00      	cmp	r3, #0
 801560c:	d108      	bne.n	8015620 <etharp_find_entry+0x1b8>
 801560e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015612:	2b0a      	cmp	r3, #10
 8015614:	d107      	bne.n	8015626 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015616:	7afb      	ldrb	r3, [r7, #11]
 8015618:	f003 0301 	and.w	r3, r3, #1
 801561c:	2b00      	cmp	r3, #0
 801561e:	d102      	bne.n	8015626 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015620:	f04f 33ff 	mov.w	r3, #4294967295
 8015624:	e085      	b.n	8015732 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015626:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801562a:	2b09      	cmp	r3, #9
 801562c:	dc02      	bgt.n	8015634 <etharp_find_entry+0x1cc>
    i = empty;
 801562e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015630:	843b      	strh	r3, [r7, #32]
 8015632:	e039      	b.n	80156a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015634:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015638:	2b09      	cmp	r3, #9
 801563a:	dc14      	bgt.n	8015666 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801563c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801563e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015640:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015644:	493d      	ldr	r1, [pc, #244]	; (801573c <etharp_find_entry+0x2d4>)
 8015646:	4613      	mov	r3, r2
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	4413      	add	r3, r2
 801564c:	00db      	lsls	r3, r3, #3
 801564e:	440b      	add	r3, r1
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d018      	beq.n	8015688 <etharp_find_entry+0x220>
 8015656:	4b3a      	ldr	r3, [pc, #232]	; (8015740 <etharp_find_entry+0x2d8>)
 8015658:	f240 126d 	movw	r2, #365	; 0x16d
 801565c:	493b      	ldr	r1, [pc, #236]	; (801574c <etharp_find_entry+0x2e4>)
 801565e:	483a      	ldr	r0, [pc, #232]	; (8015748 <etharp_find_entry+0x2e0>)
 8015660:	f002 fba4 	bl	8017dac <iprintf>
 8015664:	e010      	b.n	8015688 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015666:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801566a:	2b09      	cmp	r3, #9
 801566c:	dc02      	bgt.n	8015674 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801566e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015670:	843b      	strh	r3, [r7, #32]
 8015672:	e009      	b.n	8015688 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015674:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015678:	2b09      	cmp	r3, #9
 801567a:	dc02      	bgt.n	8015682 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801567c:	8bfb      	ldrh	r3, [r7, #30]
 801567e:	843b      	strh	r3, [r7, #32]
 8015680:	e002      	b.n	8015688 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015682:	f04f 33ff 	mov.w	r3, #4294967295
 8015686:	e054      	b.n	8015732 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015688:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801568c:	2b09      	cmp	r3, #9
 801568e:	dd06      	ble.n	801569e <etharp_find_entry+0x236>
 8015690:	4b2b      	ldr	r3, [pc, #172]	; (8015740 <etharp_find_entry+0x2d8>)
 8015692:	f240 127f 	movw	r2, #383	; 0x17f
 8015696:	492e      	ldr	r1, [pc, #184]	; (8015750 <etharp_find_entry+0x2e8>)
 8015698:	482b      	ldr	r0, [pc, #172]	; (8015748 <etharp_find_entry+0x2e0>)
 801569a:	f002 fb87 	bl	8017dac <iprintf>
    etharp_free_entry(i);
 801569e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156a2:	4618      	mov	r0, r3
 80156a4:	f7ff fe06 	bl	80152b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80156a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80156ac:	2b09      	cmp	r3, #9
 80156ae:	dd06      	ble.n	80156be <etharp_find_entry+0x256>
 80156b0:	4b23      	ldr	r3, [pc, #140]	; (8015740 <etharp_find_entry+0x2d8>)
 80156b2:	f240 1283 	movw	r2, #387	; 0x183
 80156b6:	4926      	ldr	r1, [pc, #152]	; (8015750 <etharp_find_entry+0x2e8>)
 80156b8:	4823      	ldr	r0, [pc, #140]	; (8015748 <etharp_find_entry+0x2e0>)
 80156ba:	f002 fb77 	bl	8017dac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80156be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156c2:	491e      	ldr	r1, [pc, #120]	; (801573c <etharp_find_entry+0x2d4>)
 80156c4:	4613      	mov	r3, r2
 80156c6:	005b      	lsls	r3, r3, #1
 80156c8:	4413      	add	r3, r2
 80156ca:	00db      	lsls	r3, r3, #3
 80156cc:	440b      	add	r3, r1
 80156ce:	3314      	adds	r3, #20
 80156d0:	781b      	ldrb	r3, [r3, #0]
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d006      	beq.n	80156e4 <etharp_find_entry+0x27c>
 80156d6:	4b1a      	ldr	r3, [pc, #104]	; (8015740 <etharp_find_entry+0x2d8>)
 80156d8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80156dc:	491d      	ldr	r1, [pc, #116]	; (8015754 <etharp_find_entry+0x2ec>)
 80156de:	481a      	ldr	r0, [pc, #104]	; (8015748 <etharp_find_entry+0x2e0>)
 80156e0:	f002 fb64 	bl	8017dac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d00b      	beq.n	8015702 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80156ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	6819      	ldr	r1, [r3, #0]
 80156f2:	4812      	ldr	r0, [pc, #72]	; (801573c <etharp_find_entry+0x2d4>)
 80156f4:	4613      	mov	r3, r2
 80156f6:	005b      	lsls	r3, r3, #1
 80156f8:	4413      	add	r3, r2
 80156fa:	00db      	lsls	r3, r3, #3
 80156fc:	4403      	add	r3, r0
 80156fe:	3304      	adds	r3, #4
 8015700:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015702:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015706:	490d      	ldr	r1, [pc, #52]	; (801573c <etharp_find_entry+0x2d4>)
 8015708:	4613      	mov	r3, r2
 801570a:	005b      	lsls	r3, r3, #1
 801570c:	4413      	add	r3, r2
 801570e:	00db      	lsls	r3, r3, #3
 8015710:	440b      	add	r3, r1
 8015712:	3312      	adds	r3, #18
 8015714:	2200      	movs	r2, #0
 8015716:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015718:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801571c:	4907      	ldr	r1, [pc, #28]	; (801573c <etharp_find_entry+0x2d4>)
 801571e:	4613      	mov	r3, r2
 8015720:	005b      	lsls	r3, r3, #1
 8015722:	4413      	add	r3, r2
 8015724:	00db      	lsls	r3, r3, #3
 8015726:	440b      	add	r3, r1
 8015728:	3308      	adds	r3, #8
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801572e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015732:	4618      	mov	r0, r3
 8015734:	3728      	adds	r7, #40	; 0x28
 8015736:	46bd      	mov	sp, r7
 8015738:	bd80      	pop	{r7, pc}
 801573a:	bf00      	nop
 801573c:	2000cecc 	.word	0x2000cecc
 8015740:	0801b7e4 	.word	0x0801b7e4
 8015744:	0801b81c 	.word	0x0801b81c
 8015748:	0801b85c 	.word	0x0801b85c
 801574c:	0801b884 	.word	0x0801b884
 8015750:	0801b89c 	.word	0x0801b89c
 8015754:	0801b8b0 	.word	0x0801b8b0

08015758 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b088      	sub	sp, #32
 801575c:	af02      	add	r7, sp, #8
 801575e:	60f8      	str	r0, [r7, #12]
 8015760:	60b9      	str	r1, [r7, #8]
 8015762:	607a      	str	r2, [r7, #4]
 8015764:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801576c:	2b06      	cmp	r3, #6
 801576e:	d006      	beq.n	801577e <etharp_update_arp_entry+0x26>
 8015770:	4b48      	ldr	r3, [pc, #288]	; (8015894 <etharp_update_arp_entry+0x13c>)
 8015772:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015776:	4948      	ldr	r1, [pc, #288]	; (8015898 <etharp_update_arp_entry+0x140>)
 8015778:	4848      	ldr	r0, [pc, #288]	; (801589c <etharp_update_arp_entry+0x144>)
 801577a:	f002 fb17 	bl	8017dac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d012      	beq.n	80157aa <etharp_update_arp_entry+0x52>
 8015784:	68bb      	ldr	r3, [r7, #8]
 8015786:	681b      	ldr	r3, [r3, #0]
 8015788:	2b00      	cmp	r3, #0
 801578a:	d00e      	beq.n	80157aa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	68f9      	ldr	r1, [r7, #12]
 8015792:	4618      	mov	r0, r3
 8015794:	f001 f920 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 8015798:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801579a:	2b00      	cmp	r3, #0
 801579c:	d105      	bne.n	80157aa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801579e:	68bb      	ldr	r3, [r7, #8]
 80157a0:	681b      	ldr	r3, [r3, #0]
 80157a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80157a6:	2be0      	cmp	r3, #224	; 0xe0
 80157a8:	d102      	bne.n	80157b0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80157aa:	f06f 030f 	mvn.w	r3, #15
 80157ae:	e06c      	b.n	801588a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80157b0:	78fb      	ldrb	r3, [r7, #3]
 80157b2:	68fa      	ldr	r2, [r7, #12]
 80157b4:	4619      	mov	r1, r3
 80157b6:	68b8      	ldr	r0, [r7, #8]
 80157b8:	f7ff fe56 	bl	8015468 <etharp_find_entry>
 80157bc:	4603      	mov	r3, r0
 80157be:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80157c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	da02      	bge.n	80157ce <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80157c8:	8afb      	ldrh	r3, [r7, #22]
 80157ca:	b25b      	sxtb	r3, r3
 80157cc:	e05d      	b.n	801588a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80157ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157d2:	4933      	ldr	r1, [pc, #204]	; (80158a0 <etharp_update_arp_entry+0x148>)
 80157d4:	4613      	mov	r3, r2
 80157d6:	005b      	lsls	r3, r3, #1
 80157d8:	4413      	add	r3, r2
 80157da:	00db      	lsls	r3, r3, #3
 80157dc:	440b      	add	r3, r1
 80157de:	3314      	adds	r3, #20
 80157e0:	2202      	movs	r2, #2
 80157e2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80157e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157e8:	492d      	ldr	r1, [pc, #180]	; (80158a0 <etharp_update_arp_entry+0x148>)
 80157ea:	4613      	mov	r3, r2
 80157ec:	005b      	lsls	r3, r3, #1
 80157ee:	4413      	add	r3, r2
 80157f0:	00db      	lsls	r3, r3, #3
 80157f2:	440b      	add	r3, r1
 80157f4:	3308      	adds	r3, #8
 80157f6:	68fa      	ldr	r2, [r7, #12]
 80157f8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80157fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80157fe:	4613      	mov	r3, r2
 8015800:	005b      	lsls	r3, r3, #1
 8015802:	4413      	add	r3, r2
 8015804:	00db      	lsls	r3, r3, #3
 8015806:	3308      	adds	r3, #8
 8015808:	4a25      	ldr	r2, [pc, #148]	; (80158a0 <etharp_update_arp_entry+0x148>)
 801580a:	4413      	add	r3, r2
 801580c:	3304      	adds	r3, #4
 801580e:	2206      	movs	r2, #6
 8015810:	6879      	ldr	r1, [r7, #4]
 8015812:	4618      	mov	r0, r3
 8015814:	f002 fbc8 	bl	8017fa8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015818:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801581c:	4920      	ldr	r1, [pc, #128]	; (80158a0 <etharp_update_arp_entry+0x148>)
 801581e:	4613      	mov	r3, r2
 8015820:	005b      	lsls	r3, r3, #1
 8015822:	4413      	add	r3, r2
 8015824:	00db      	lsls	r3, r3, #3
 8015826:	440b      	add	r3, r1
 8015828:	3312      	adds	r3, #18
 801582a:	2200      	movs	r2, #0
 801582c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801582e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015832:	491b      	ldr	r1, [pc, #108]	; (80158a0 <etharp_update_arp_entry+0x148>)
 8015834:	4613      	mov	r3, r2
 8015836:	005b      	lsls	r3, r3, #1
 8015838:	4413      	add	r3, r2
 801583a:	00db      	lsls	r3, r3, #3
 801583c:	440b      	add	r3, r1
 801583e:	681b      	ldr	r3, [r3, #0]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d021      	beq.n	8015888 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015844:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015848:	4915      	ldr	r1, [pc, #84]	; (80158a0 <etharp_update_arp_entry+0x148>)
 801584a:	4613      	mov	r3, r2
 801584c:	005b      	lsls	r3, r3, #1
 801584e:	4413      	add	r3, r2
 8015850:	00db      	lsls	r3, r3, #3
 8015852:	440b      	add	r3, r1
 8015854:	681b      	ldr	r3, [r3, #0]
 8015856:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015858:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801585c:	4910      	ldr	r1, [pc, #64]	; (80158a0 <etharp_update_arp_entry+0x148>)
 801585e:	4613      	mov	r3, r2
 8015860:	005b      	lsls	r3, r3, #1
 8015862:	4413      	add	r3, r2
 8015864:	00db      	lsls	r3, r3, #3
 8015866:	440b      	add	r3, r1
 8015868:	2200      	movs	r2, #0
 801586a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015872:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015876:	9300      	str	r3, [sp, #0]
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	6939      	ldr	r1, [r7, #16]
 801587c:	68f8      	ldr	r0, [r7, #12]
 801587e:	f001 ffb9 	bl	80177f4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015882:	6938      	ldr	r0, [r7, #16]
 8015884:	f7f6 fd48 	bl	800c318 <pbuf_free>
  }
  return ERR_OK;
 8015888:	2300      	movs	r3, #0
}
 801588a:	4618      	mov	r0, r3
 801588c:	3718      	adds	r7, #24
 801588e:	46bd      	mov	sp, r7
 8015890:	bd80      	pop	{r7, pc}
 8015892:	bf00      	nop
 8015894:	0801b7e4 	.word	0x0801b7e4
 8015898:	0801b8dc 	.word	0x0801b8dc
 801589c:	0801b85c 	.word	0x0801b85c
 80158a0:	2000cecc 	.word	0x2000cecc

080158a4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158ac:	2300      	movs	r3, #0
 80158ae:	60fb      	str	r3, [r7, #12]
 80158b0:	e01e      	b.n	80158f0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80158b2:	4913      	ldr	r1, [pc, #76]	; (8015900 <etharp_cleanup_netif+0x5c>)
 80158b4:	68fa      	ldr	r2, [r7, #12]
 80158b6:	4613      	mov	r3, r2
 80158b8:	005b      	lsls	r3, r3, #1
 80158ba:	4413      	add	r3, r2
 80158bc:	00db      	lsls	r3, r3, #3
 80158be:	440b      	add	r3, r1
 80158c0:	3314      	adds	r3, #20
 80158c2:	781b      	ldrb	r3, [r3, #0]
 80158c4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80158c6:	7afb      	ldrb	r3, [r7, #11]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d00e      	beq.n	80158ea <etharp_cleanup_netif+0x46>
 80158cc:	490c      	ldr	r1, [pc, #48]	; (8015900 <etharp_cleanup_netif+0x5c>)
 80158ce:	68fa      	ldr	r2, [r7, #12]
 80158d0:	4613      	mov	r3, r2
 80158d2:	005b      	lsls	r3, r3, #1
 80158d4:	4413      	add	r3, r2
 80158d6:	00db      	lsls	r3, r3, #3
 80158d8:	440b      	add	r3, r1
 80158da:	3308      	adds	r3, #8
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	687a      	ldr	r2, [r7, #4]
 80158e0:	429a      	cmp	r2, r3
 80158e2:	d102      	bne.n	80158ea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80158e4:	68f8      	ldr	r0, [r7, #12]
 80158e6:	f7ff fce5 	bl	80152b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	3301      	adds	r3, #1
 80158ee:	60fb      	str	r3, [r7, #12]
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2b09      	cmp	r3, #9
 80158f4:	dddd      	ble.n	80158b2 <etharp_cleanup_netif+0xe>
    }
  }
}
 80158f6:	bf00      	nop
 80158f8:	bf00      	nop
 80158fa:	3710      	adds	r7, #16
 80158fc:	46bd      	mov	sp, r7
 80158fe:	bd80      	pop	{r7, pc}
 8015900:	2000cecc 	.word	0x2000cecc

08015904 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8015904:	b5b0      	push	{r4, r5, r7, lr}
 8015906:	b08a      	sub	sp, #40	; 0x28
 8015908:	af04      	add	r7, sp, #16
 801590a:	6078      	str	r0, [r7, #4]
 801590c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d107      	bne.n	8015924 <etharp_input+0x20>
 8015914:	4b3f      	ldr	r3, [pc, #252]	; (8015a14 <etharp_input+0x110>)
 8015916:	f240 228a 	movw	r2, #650	; 0x28a
 801591a:	493f      	ldr	r1, [pc, #252]	; (8015a18 <etharp_input+0x114>)
 801591c:	483f      	ldr	r0, [pc, #252]	; (8015a1c <etharp_input+0x118>)
 801591e:	f002 fa45 	bl	8017dac <iprintf>
 8015922:	e074      	b.n	8015a0e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	685b      	ldr	r3, [r3, #4]
 8015928:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801592a:	693b      	ldr	r3, [r7, #16]
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	b29b      	uxth	r3, r3
 8015930:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015934:	d10c      	bne.n	8015950 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801593a:	2b06      	cmp	r3, #6
 801593c:	d108      	bne.n	8015950 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015942:	2b04      	cmp	r3, #4
 8015944:	d104      	bne.n	8015950 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015946:	693b      	ldr	r3, [r7, #16]
 8015948:	885b      	ldrh	r3, [r3, #2]
 801594a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801594c:	2b08      	cmp	r3, #8
 801594e:	d003      	beq.n	8015958 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	f7f6 fce1 	bl	800c318 <pbuf_free>
    return;
 8015956:	e05a      	b.n	8015a0e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	330e      	adds	r3, #14
 801595c:	681b      	ldr	r3, [r3, #0]
 801595e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8015960:	693b      	ldr	r3, [r7, #16]
 8015962:	3318      	adds	r3, #24
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015968:	683b      	ldr	r3, [r7, #0]
 801596a:	3304      	adds	r3, #4
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d102      	bne.n	8015978 <etharp_input+0x74>
    for_us = 0;
 8015972:	2300      	movs	r3, #0
 8015974:	75fb      	strb	r3, [r7, #23]
 8015976:	e009      	b.n	801598c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015978:	68ba      	ldr	r2, [r7, #8]
 801597a:	683b      	ldr	r3, [r7, #0]
 801597c:	3304      	adds	r3, #4
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	429a      	cmp	r2, r3
 8015982:	bf0c      	ite	eq
 8015984:	2301      	moveq	r3, #1
 8015986:	2300      	movne	r3, #0
 8015988:	b2db      	uxtb	r3, r3
 801598a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801598c:	693b      	ldr	r3, [r7, #16]
 801598e:	f103 0208 	add.w	r2, r3, #8
 8015992:	7dfb      	ldrb	r3, [r7, #23]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d001      	beq.n	801599c <etharp_input+0x98>
 8015998:	2301      	movs	r3, #1
 801599a:	e000      	b.n	801599e <etharp_input+0x9a>
 801599c:	2302      	movs	r3, #2
 801599e:	f107 010c 	add.w	r1, r7, #12
 80159a2:	6838      	ldr	r0, [r7, #0]
 80159a4:	f7ff fed8 	bl	8015758 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80159a8:	693b      	ldr	r3, [r7, #16]
 80159aa:	88db      	ldrh	r3, [r3, #6]
 80159ac:	b29b      	uxth	r3, r3
 80159ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80159b2:	d003      	beq.n	80159bc <etharp_input+0xb8>
 80159b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80159b8:	d01e      	beq.n	80159f8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80159ba:	e025      	b.n	8015a08 <etharp_input+0x104>
      if (for_us) {
 80159bc:	7dfb      	ldrb	r3, [r7, #23]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d021      	beq.n	8015a06 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80159c2:	683b      	ldr	r3, [r7, #0]
 80159c4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80159d4:	683b      	ldr	r3, [r7, #0]
 80159d6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80159d8:	693a      	ldr	r2, [r7, #16]
 80159da:	3208      	adds	r2, #8
        etharp_raw(netif,
 80159dc:	2102      	movs	r1, #2
 80159de:	9103      	str	r1, [sp, #12]
 80159e0:	f107 010c 	add.w	r1, r7, #12
 80159e4:	9102      	str	r1, [sp, #8]
 80159e6:	9201      	str	r2, [sp, #4]
 80159e8:	9300      	str	r3, [sp, #0]
 80159ea:	462b      	mov	r3, r5
 80159ec:	4622      	mov	r2, r4
 80159ee:	4601      	mov	r1, r0
 80159f0:	6838      	ldr	r0, [r7, #0]
 80159f2:	f000 faef 	bl	8015fd4 <etharp_raw>
      break;
 80159f6:	e006      	b.n	8015a06 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 80159f8:	f107 030c 	add.w	r3, r7, #12
 80159fc:	4619      	mov	r1, r3
 80159fe:	6838      	ldr	r0, [r7, #0]
 8015a00:	f7fe f9fc 	bl	8013dfc <dhcp_arp_reply>
      break;
 8015a04:	e000      	b.n	8015a08 <etharp_input+0x104>
      break;
 8015a06:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f7f6 fc85 	bl	800c318 <pbuf_free>
}
 8015a0e:	3718      	adds	r7, #24
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bdb0      	pop	{r4, r5, r7, pc}
 8015a14:	0801b7e4 	.word	0x0801b7e4
 8015a18:	0801b934 	.word	0x0801b934
 8015a1c:	0801b85c 	.word	0x0801b85c

08015a20 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8015a20:	b580      	push	{r7, lr}
 8015a22:	b086      	sub	sp, #24
 8015a24:	af02      	add	r7, sp, #8
 8015a26:	60f8      	str	r0, [r7, #12]
 8015a28:	60b9      	str	r1, [r7, #8]
 8015a2a:	4613      	mov	r3, r2
 8015a2c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015a2e:	79fa      	ldrb	r2, [r7, #7]
 8015a30:	4944      	ldr	r1, [pc, #272]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015a32:	4613      	mov	r3, r2
 8015a34:	005b      	lsls	r3, r3, #1
 8015a36:	4413      	add	r3, r2
 8015a38:	00db      	lsls	r3, r3, #3
 8015a3a:	440b      	add	r3, r1
 8015a3c:	3314      	adds	r3, #20
 8015a3e:	781b      	ldrb	r3, [r3, #0]
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	d806      	bhi.n	8015a52 <etharp_output_to_arp_index+0x32>
 8015a44:	4b40      	ldr	r3, [pc, #256]	; (8015b48 <etharp_output_to_arp_index+0x128>)
 8015a46:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015a4a:	4940      	ldr	r1, [pc, #256]	; (8015b4c <etharp_output_to_arp_index+0x12c>)
 8015a4c:	4840      	ldr	r0, [pc, #256]	; (8015b50 <etharp_output_to_arp_index+0x130>)
 8015a4e:	f002 f9ad 	bl	8017dac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015a52:	79fa      	ldrb	r2, [r7, #7]
 8015a54:	493b      	ldr	r1, [pc, #236]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015a56:	4613      	mov	r3, r2
 8015a58:	005b      	lsls	r3, r3, #1
 8015a5a:	4413      	add	r3, r2
 8015a5c:	00db      	lsls	r3, r3, #3
 8015a5e:	440b      	add	r3, r1
 8015a60:	3314      	adds	r3, #20
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	2b02      	cmp	r3, #2
 8015a66:	d153      	bne.n	8015b10 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015a68:	79fa      	ldrb	r2, [r7, #7]
 8015a6a:	4936      	ldr	r1, [pc, #216]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015a6c:	4613      	mov	r3, r2
 8015a6e:	005b      	lsls	r3, r3, #1
 8015a70:	4413      	add	r3, r2
 8015a72:	00db      	lsls	r3, r3, #3
 8015a74:	440b      	add	r3, r1
 8015a76:	3312      	adds	r3, #18
 8015a78:	881b      	ldrh	r3, [r3, #0]
 8015a7a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015a7e:	d919      	bls.n	8015ab4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015a80:	79fa      	ldrb	r2, [r7, #7]
 8015a82:	4613      	mov	r3, r2
 8015a84:	005b      	lsls	r3, r3, #1
 8015a86:	4413      	add	r3, r2
 8015a88:	00db      	lsls	r3, r3, #3
 8015a8a:	4a2e      	ldr	r2, [pc, #184]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015a8c:	4413      	add	r3, r2
 8015a8e:	3304      	adds	r3, #4
 8015a90:	4619      	mov	r1, r3
 8015a92:	68f8      	ldr	r0, [r7, #12]
 8015a94:	f000 fb4c 	bl	8016130 <etharp_request>
 8015a98:	4603      	mov	r3, r0
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d138      	bne.n	8015b10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015a9e:	79fa      	ldrb	r2, [r7, #7]
 8015aa0:	4928      	ldr	r1, [pc, #160]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	005b      	lsls	r3, r3, #1
 8015aa6:	4413      	add	r3, r2
 8015aa8:	00db      	lsls	r3, r3, #3
 8015aaa:	440b      	add	r3, r1
 8015aac:	3314      	adds	r3, #20
 8015aae:	2203      	movs	r2, #3
 8015ab0:	701a      	strb	r2, [r3, #0]
 8015ab2:	e02d      	b.n	8015b10 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015ab4:	79fa      	ldrb	r2, [r7, #7]
 8015ab6:	4923      	ldr	r1, [pc, #140]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015ab8:	4613      	mov	r3, r2
 8015aba:	005b      	lsls	r3, r3, #1
 8015abc:	4413      	add	r3, r2
 8015abe:	00db      	lsls	r3, r3, #3
 8015ac0:	440b      	add	r3, r1
 8015ac2:	3312      	adds	r3, #18
 8015ac4:	881b      	ldrh	r3, [r3, #0]
 8015ac6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015aca:	d321      	bcc.n	8015b10 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015acc:	79fa      	ldrb	r2, [r7, #7]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	005b      	lsls	r3, r3, #1
 8015ad2:	4413      	add	r3, r2
 8015ad4:	00db      	lsls	r3, r3, #3
 8015ad6:	4a1b      	ldr	r2, [pc, #108]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015ad8:	4413      	add	r3, r2
 8015ada:	1d19      	adds	r1, r3, #4
 8015adc:	79fa      	ldrb	r2, [r7, #7]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	005b      	lsls	r3, r3, #1
 8015ae2:	4413      	add	r3, r2
 8015ae4:	00db      	lsls	r3, r3, #3
 8015ae6:	3308      	adds	r3, #8
 8015ae8:	4a16      	ldr	r2, [pc, #88]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015aea:	4413      	add	r3, r2
 8015aec:	3304      	adds	r3, #4
 8015aee:	461a      	mov	r2, r3
 8015af0:	68f8      	ldr	r0, [r7, #12]
 8015af2:	f000 fafb 	bl	80160ec <etharp_request_dst>
 8015af6:	4603      	mov	r3, r0
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d109      	bne.n	8015b10 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015afc:	79fa      	ldrb	r2, [r7, #7]
 8015afe:	4911      	ldr	r1, [pc, #68]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015b00:	4613      	mov	r3, r2
 8015b02:	005b      	lsls	r3, r3, #1
 8015b04:	4413      	add	r3, r2
 8015b06:	00db      	lsls	r3, r3, #3
 8015b08:	440b      	add	r3, r1
 8015b0a:	3314      	adds	r3, #20
 8015b0c:	2203      	movs	r2, #3
 8015b0e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8015b16:	79fa      	ldrb	r2, [r7, #7]
 8015b18:	4613      	mov	r3, r2
 8015b1a:	005b      	lsls	r3, r3, #1
 8015b1c:	4413      	add	r3, r2
 8015b1e:	00db      	lsls	r3, r3, #3
 8015b20:	3308      	adds	r3, #8
 8015b22:	4a08      	ldr	r2, [pc, #32]	; (8015b44 <etharp_output_to_arp_index+0x124>)
 8015b24:	4413      	add	r3, r2
 8015b26:	3304      	adds	r3, #4
 8015b28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015b2c:	9200      	str	r2, [sp, #0]
 8015b2e:	460a      	mov	r2, r1
 8015b30:	68b9      	ldr	r1, [r7, #8]
 8015b32:	68f8      	ldr	r0, [r7, #12]
 8015b34:	f001 fe5e 	bl	80177f4 <ethernet_output>
 8015b38:	4603      	mov	r3, r0
}
 8015b3a:	4618      	mov	r0, r3
 8015b3c:	3710      	adds	r7, #16
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	bf00      	nop
 8015b44:	2000cecc 	.word	0x2000cecc
 8015b48:	0801b7e4 	.word	0x0801b7e4
 8015b4c:	0801b954 	.word	0x0801b954
 8015b50:	0801b85c 	.word	0x0801b85c

08015b54 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b08a      	sub	sp, #40	; 0x28
 8015b58:	af02      	add	r7, sp, #8
 8015b5a:	60f8      	str	r0, [r7, #12]
 8015b5c:	60b9      	str	r1, [r7, #8]
 8015b5e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d106      	bne.n	8015b78 <etharp_output+0x24>
 8015b6a:	4b73      	ldr	r3, [pc, #460]	; (8015d38 <etharp_output+0x1e4>)
 8015b6c:	f240 321e 	movw	r2, #798	; 0x31e
 8015b70:	4972      	ldr	r1, [pc, #456]	; (8015d3c <etharp_output+0x1e8>)
 8015b72:	4873      	ldr	r0, [pc, #460]	; (8015d40 <etharp_output+0x1ec>)
 8015b74:	f002 f91a 	bl	8017dac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015b78:	68bb      	ldr	r3, [r7, #8]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d106      	bne.n	8015b8c <etharp_output+0x38>
 8015b7e:	4b6e      	ldr	r3, [pc, #440]	; (8015d38 <etharp_output+0x1e4>)
 8015b80:	f240 321f 	movw	r2, #799	; 0x31f
 8015b84:	496f      	ldr	r1, [pc, #444]	; (8015d44 <etharp_output+0x1f0>)
 8015b86:	486e      	ldr	r0, [pc, #440]	; (8015d40 <etharp_output+0x1ec>)
 8015b88:	f002 f910 	bl	8017dac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d106      	bne.n	8015ba0 <etharp_output+0x4c>
 8015b92:	4b69      	ldr	r3, [pc, #420]	; (8015d38 <etharp_output+0x1e4>)
 8015b94:	f44f 7248 	mov.w	r2, #800	; 0x320
 8015b98:	496b      	ldr	r1, [pc, #428]	; (8015d48 <etharp_output+0x1f4>)
 8015b9a:	4869      	ldr	r0, [pc, #420]	; (8015d40 <etharp_output+0x1ec>)
 8015b9c:	f002 f906 	bl	8017dac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	68f9      	ldr	r1, [r7, #12]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f000 ff16 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d002      	beq.n	8015bb8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015bb2:	4b66      	ldr	r3, [pc, #408]	; (8015d4c <etharp_output+0x1f8>)
 8015bb4:	61fb      	str	r3, [r7, #28]
 8015bb6:	e0af      	b.n	8015d18 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015bc0:	2be0      	cmp	r3, #224	; 0xe0
 8015bc2:	d118      	bne.n	8015bf6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015bc4:	2301      	movs	r3, #1
 8015bc6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015bcc:	235e      	movs	r3, #94	; 0x5e
 8015bce:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	3301      	adds	r3, #1
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015bda:	b2db      	uxtb	r3, r3
 8015bdc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	3302      	adds	r3, #2
 8015be2:	781b      	ldrb	r3, [r3, #0]
 8015be4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015be6:	687b      	ldr	r3, [r7, #4]
 8015be8:	3303      	adds	r3, #3
 8015bea:	781b      	ldrb	r3, [r3, #0]
 8015bec:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015bee:	f107 0310 	add.w	r3, r7, #16
 8015bf2:	61fb      	str	r3, [r7, #28]
 8015bf4:	e090      	b.n	8015d18 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	3304      	adds	r3, #4
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	405a      	eors	r2, r3
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	3308      	adds	r3, #8
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	4013      	ands	r3, r2
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d012      	beq.n	8015c34 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015c14:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015c18:	4293      	cmp	r3, r2
 8015c1a:	d00b      	beq.n	8015c34 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	330c      	adds	r3, #12
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d003      	beq.n	8015c2e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	330c      	adds	r3, #12
 8015c2a:	61bb      	str	r3, [r7, #24]
 8015c2c:	e002      	b.n	8015c34 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015c2e:	f06f 0303 	mvn.w	r3, #3
 8015c32:	e07d      	b.n	8015d30 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015c34:	4b46      	ldr	r3, [pc, #280]	; (8015d50 <etharp_output+0x1fc>)
 8015c36:	781b      	ldrb	r3, [r3, #0]
 8015c38:	4619      	mov	r1, r3
 8015c3a:	4a46      	ldr	r2, [pc, #280]	; (8015d54 <etharp_output+0x200>)
 8015c3c:	460b      	mov	r3, r1
 8015c3e:	005b      	lsls	r3, r3, #1
 8015c40:	440b      	add	r3, r1
 8015c42:	00db      	lsls	r3, r3, #3
 8015c44:	4413      	add	r3, r2
 8015c46:	3314      	adds	r3, #20
 8015c48:	781b      	ldrb	r3, [r3, #0]
 8015c4a:	2b01      	cmp	r3, #1
 8015c4c:	d925      	bls.n	8015c9a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c4e:	4b40      	ldr	r3, [pc, #256]	; (8015d50 <etharp_output+0x1fc>)
 8015c50:	781b      	ldrb	r3, [r3, #0]
 8015c52:	4619      	mov	r1, r3
 8015c54:	4a3f      	ldr	r2, [pc, #252]	; (8015d54 <etharp_output+0x200>)
 8015c56:	460b      	mov	r3, r1
 8015c58:	005b      	lsls	r3, r3, #1
 8015c5a:	440b      	add	r3, r1
 8015c5c:	00db      	lsls	r3, r3, #3
 8015c5e:	4413      	add	r3, r2
 8015c60:	3308      	adds	r3, #8
 8015c62:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015c64:	68fa      	ldr	r2, [r7, #12]
 8015c66:	429a      	cmp	r2, r3
 8015c68:	d117      	bne.n	8015c9a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015c6a:	69bb      	ldr	r3, [r7, #24]
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	4b38      	ldr	r3, [pc, #224]	; (8015d50 <etharp_output+0x1fc>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	4618      	mov	r0, r3
 8015c74:	4937      	ldr	r1, [pc, #220]	; (8015d54 <etharp_output+0x200>)
 8015c76:	4603      	mov	r3, r0
 8015c78:	005b      	lsls	r3, r3, #1
 8015c7a:	4403      	add	r3, r0
 8015c7c:	00db      	lsls	r3, r3, #3
 8015c7e:	440b      	add	r3, r1
 8015c80:	3304      	adds	r3, #4
 8015c82:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8015c84:	429a      	cmp	r2, r3
 8015c86:	d108      	bne.n	8015c9a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015c88:	4b31      	ldr	r3, [pc, #196]	; (8015d50 <etharp_output+0x1fc>)
 8015c8a:	781b      	ldrb	r3, [r3, #0]
 8015c8c:	461a      	mov	r2, r3
 8015c8e:	68b9      	ldr	r1, [r7, #8]
 8015c90:	68f8      	ldr	r0, [r7, #12]
 8015c92:	f7ff fec5 	bl	8015a20 <etharp_output_to_arp_index>
 8015c96:	4603      	mov	r3, r0
 8015c98:	e04a      	b.n	8015d30 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	75fb      	strb	r3, [r7, #23]
 8015c9e:	e031      	b.n	8015d04 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015ca0:	7dfa      	ldrb	r2, [r7, #23]
 8015ca2:	492c      	ldr	r1, [pc, #176]	; (8015d54 <etharp_output+0x200>)
 8015ca4:	4613      	mov	r3, r2
 8015ca6:	005b      	lsls	r3, r3, #1
 8015ca8:	4413      	add	r3, r2
 8015caa:	00db      	lsls	r3, r3, #3
 8015cac:	440b      	add	r3, r1
 8015cae:	3314      	adds	r3, #20
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	2b01      	cmp	r3, #1
 8015cb4:	d923      	bls.n	8015cfe <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8015cb6:	7dfa      	ldrb	r2, [r7, #23]
 8015cb8:	4926      	ldr	r1, [pc, #152]	; (8015d54 <etharp_output+0x200>)
 8015cba:	4613      	mov	r3, r2
 8015cbc:	005b      	lsls	r3, r3, #1
 8015cbe:	4413      	add	r3, r2
 8015cc0:	00db      	lsls	r3, r3, #3
 8015cc2:	440b      	add	r3, r1
 8015cc4:	3308      	adds	r3, #8
 8015cc6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015cc8:	68fa      	ldr	r2, [r7, #12]
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	d117      	bne.n	8015cfe <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015cce:	69bb      	ldr	r3, [r7, #24]
 8015cd0:	6819      	ldr	r1, [r3, #0]
 8015cd2:	7dfa      	ldrb	r2, [r7, #23]
 8015cd4:	481f      	ldr	r0, [pc, #124]	; (8015d54 <etharp_output+0x200>)
 8015cd6:	4613      	mov	r3, r2
 8015cd8:	005b      	lsls	r3, r3, #1
 8015cda:	4413      	add	r3, r2
 8015cdc:	00db      	lsls	r3, r3, #3
 8015cde:	4403      	add	r3, r0
 8015ce0:	3304      	adds	r3, #4
 8015ce2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8015ce4:	4299      	cmp	r1, r3
 8015ce6:	d10a      	bne.n	8015cfe <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8015ce8:	4a19      	ldr	r2, [pc, #100]	; (8015d50 <etharp_output+0x1fc>)
 8015cea:	7dfb      	ldrb	r3, [r7, #23]
 8015cec:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015cee:	7dfb      	ldrb	r3, [r7, #23]
 8015cf0:	461a      	mov	r2, r3
 8015cf2:	68b9      	ldr	r1, [r7, #8]
 8015cf4:	68f8      	ldr	r0, [r7, #12]
 8015cf6:	f7ff fe93 	bl	8015a20 <etharp_output_to_arp_index>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	e018      	b.n	8015d30 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015cfe:	7dfb      	ldrb	r3, [r7, #23]
 8015d00:	3301      	adds	r3, #1
 8015d02:	75fb      	strb	r3, [r7, #23]
 8015d04:	7dfb      	ldrb	r3, [r7, #23]
 8015d06:	2b09      	cmp	r3, #9
 8015d08:	d9ca      	bls.n	8015ca0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015d0a:	68ba      	ldr	r2, [r7, #8]
 8015d0c:	69b9      	ldr	r1, [r7, #24]
 8015d0e:	68f8      	ldr	r0, [r7, #12]
 8015d10:	f000 f822 	bl	8015d58 <etharp_query>
 8015d14:	4603      	mov	r3, r0
 8015d16:	e00b      	b.n	8015d30 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8015d18:	68fb      	ldr	r3, [r7, #12]
 8015d1a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8015d1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015d22:	9300      	str	r3, [sp, #0]
 8015d24:	69fb      	ldr	r3, [r7, #28]
 8015d26:	68b9      	ldr	r1, [r7, #8]
 8015d28:	68f8      	ldr	r0, [r7, #12]
 8015d2a:	f001 fd63 	bl	80177f4 <ethernet_output>
 8015d2e:	4603      	mov	r3, r0
}
 8015d30:	4618      	mov	r0, r3
 8015d32:	3720      	adds	r7, #32
 8015d34:	46bd      	mov	sp, r7
 8015d36:	bd80      	pop	{r7, pc}
 8015d38:	0801b7e4 	.word	0x0801b7e4
 8015d3c:	0801b934 	.word	0x0801b934
 8015d40:	0801b85c 	.word	0x0801b85c
 8015d44:	0801b984 	.word	0x0801b984
 8015d48:	0801b924 	.word	0x0801b924
 8015d4c:	0801e660 	.word	0x0801e660
 8015d50:	2000cfbc 	.word	0x2000cfbc
 8015d54:	2000cecc 	.word	0x2000cecc

08015d58 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b08c      	sub	sp, #48	; 0x30
 8015d5c:	af02      	add	r7, sp, #8
 8015d5e:	60f8      	str	r0, [r7, #12]
 8015d60:	60b9      	str	r1, [r7, #8]
 8015d62:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	332a      	adds	r3, #42	; 0x2a
 8015d68:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015d6a:	23ff      	movs	r3, #255	; 0xff
 8015d6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015d70:	2300      	movs	r3, #0
 8015d72:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d74:	68bb      	ldr	r3, [r7, #8]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	68f9      	ldr	r1, [r7, #12]
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f000 fe2c 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 8015d80:	4603      	mov	r3, r0
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d10c      	bne.n	8015da0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d86:	68bb      	ldr	r3, [r7, #8]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015d8e:	2be0      	cmp	r3, #224	; 0xe0
 8015d90:	d006      	beq.n	8015da0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	d003      	beq.n	8015da0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015d98:	68bb      	ldr	r3, [r7, #8]
 8015d9a:	681b      	ldr	r3, [r3, #0]
 8015d9c:	2b00      	cmp	r3, #0
 8015d9e:	d102      	bne.n	8015da6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015da0:	f06f 030f 	mvn.w	r3, #15
 8015da4:	e101      	b.n	8015faa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015da6:	68fa      	ldr	r2, [r7, #12]
 8015da8:	2101      	movs	r1, #1
 8015daa:	68b8      	ldr	r0, [r7, #8]
 8015dac:	f7ff fb5c 	bl	8015468 <etharp_find_entry>
 8015db0:	4603      	mov	r3, r0
 8015db2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015db4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	da02      	bge.n	8015dc2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015dbc:	8a7b      	ldrh	r3, [r7, #18]
 8015dbe:	b25b      	sxtb	r3, r3
 8015dc0:	e0f3      	b.n	8015faa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8015dc2:	8a7b      	ldrh	r3, [r7, #18]
 8015dc4:	2b7e      	cmp	r3, #126	; 0x7e
 8015dc6:	d906      	bls.n	8015dd6 <etharp_query+0x7e>
 8015dc8:	4b7a      	ldr	r3, [pc, #488]	; (8015fb4 <etharp_query+0x25c>)
 8015dca:	f240 32c1 	movw	r2, #961	; 0x3c1
 8015dce:	497a      	ldr	r1, [pc, #488]	; (8015fb8 <etharp_query+0x260>)
 8015dd0:	487a      	ldr	r0, [pc, #488]	; (8015fbc <etharp_query+0x264>)
 8015dd2:	f001 ffeb 	bl	8017dac <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015dd6:	8a7b      	ldrh	r3, [r7, #18]
 8015dd8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015dda:	7c7a      	ldrb	r2, [r7, #17]
 8015ddc:	4978      	ldr	r1, [pc, #480]	; (8015fc0 <etharp_query+0x268>)
 8015dde:	4613      	mov	r3, r2
 8015de0:	005b      	lsls	r3, r3, #1
 8015de2:	4413      	add	r3, r2
 8015de4:	00db      	lsls	r3, r3, #3
 8015de6:	440b      	add	r3, r1
 8015de8:	3314      	adds	r3, #20
 8015dea:	781b      	ldrb	r3, [r3, #0]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d115      	bne.n	8015e1c <etharp_query+0xc4>
    is_new_entry = 1;
 8015df0:	2301      	movs	r3, #1
 8015df2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015df4:	7c7a      	ldrb	r2, [r7, #17]
 8015df6:	4972      	ldr	r1, [pc, #456]	; (8015fc0 <etharp_query+0x268>)
 8015df8:	4613      	mov	r3, r2
 8015dfa:	005b      	lsls	r3, r3, #1
 8015dfc:	4413      	add	r3, r2
 8015dfe:	00db      	lsls	r3, r3, #3
 8015e00:	440b      	add	r3, r1
 8015e02:	3314      	adds	r3, #20
 8015e04:	2201      	movs	r2, #1
 8015e06:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015e08:	7c7a      	ldrb	r2, [r7, #17]
 8015e0a:	496d      	ldr	r1, [pc, #436]	; (8015fc0 <etharp_query+0x268>)
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	4413      	add	r3, r2
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	440b      	add	r3, r1
 8015e16:	3308      	adds	r3, #8
 8015e18:	68fa      	ldr	r2, [r7, #12]
 8015e1a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015e1c:	7c7a      	ldrb	r2, [r7, #17]
 8015e1e:	4968      	ldr	r1, [pc, #416]	; (8015fc0 <etharp_query+0x268>)
 8015e20:	4613      	mov	r3, r2
 8015e22:	005b      	lsls	r3, r3, #1
 8015e24:	4413      	add	r3, r2
 8015e26:	00db      	lsls	r3, r3, #3
 8015e28:	440b      	add	r3, r1
 8015e2a:	3314      	adds	r3, #20
 8015e2c:	781b      	ldrb	r3, [r3, #0]
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	d011      	beq.n	8015e56 <etharp_query+0xfe>
 8015e32:	7c7a      	ldrb	r2, [r7, #17]
 8015e34:	4962      	ldr	r1, [pc, #392]	; (8015fc0 <etharp_query+0x268>)
 8015e36:	4613      	mov	r3, r2
 8015e38:	005b      	lsls	r3, r3, #1
 8015e3a:	4413      	add	r3, r2
 8015e3c:	00db      	lsls	r3, r3, #3
 8015e3e:	440b      	add	r3, r1
 8015e40:	3314      	adds	r3, #20
 8015e42:	781b      	ldrb	r3, [r3, #0]
 8015e44:	2b01      	cmp	r3, #1
 8015e46:	d806      	bhi.n	8015e56 <etharp_query+0xfe>
 8015e48:	4b5a      	ldr	r3, [pc, #360]	; (8015fb4 <etharp_query+0x25c>)
 8015e4a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8015e4e:	495d      	ldr	r1, [pc, #372]	; (8015fc4 <etharp_query+0x26c>)
 8015e50:	485a      	ldr	r0, [pc, #360]	; (8015fbc <etharp_query+0x264>)
 8015e52:	f001 ffab 	bl	8017dac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015e56:	6a3b      	ldr	r3, [r7, #32]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d102      	bne.n	8015e62 <etharp_query+0x10a>
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d10c      	bne.n	8015e7c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015e62:	68b9      	ldr	r1, [r7, #8]
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	f000 f963 	bl	8016130 <etharp_request>
 8015e6a:	4603      	mov	r3, r0
 8015e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d102      	bne.n	8015e7c <etharp_query+0x124>
      return result;
 8015e76:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015e7a:	e096      	b.n	8015faa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d106      	bne.n	8015e90 <etharp_query+0x138>
 8015e82:	4b4c      	ldr	r3, [pc, #304]	; (8015fb4 <etharp_query+0x25c>)
 8015e84:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015e88:	494f      	ldr	r1, [pc, #316]	; (8015fc8 <etharp_query+0x270>)
 8015e8a:	484c      	ldr	r0, [pc, #304]	; (8015fbc <etharp_query+0x264>)
 8015e8c:	f001 ff8e 	bl	8017dac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015e90:	7c7a      	ldrb	r2, [r7, #17]
 8015e92:	494b      	ldr	r1, [pc, #300]	; (8015fc0 <etharp_query+0x268>)
 8015e94:	4613      	mov	r3, r2
 8015e96:	005b      	lsls	r3, r3, #1
 8015e98:	4413      	add	r3, r2
 8015e9a:	00db      	lsls	r3, r3, #3
 8015e9c:	440b      	add	r3, r1
 8015e9e:	3314      	adds	r3, #20
 8015ea0:	781b      	ldrb	r3, [r3, #0]
 8015ea2:	2b01      	cmp	r3, #1
 8015ea4:	d917      	bls.n	8015ed6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015ea6:	4a49      	ldr	r2, [pc, #292]	; (8015fcc <etharp_query+0x274>)
 8015ea8:	7c7b      	ldrb	r3, [r7, #17]
 8015eaa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015eac:	7c7a      	ldrb	r2, [r7, #17]
 8015eae:	4613      	mov	r3, r2
 8015eb0:	005b      	lsls	r3, r3, #1
 8015eb2:	4413      	add	r3, r2
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	3308      	adds	r3, #8
 8015eb8:	4a41      	ldr	r2, [pc, #260]	; (8015fc0 <etharp_query+0x268>)
 8015eba:	4413      	add	r3, r2
 8015ebc:	3304      	adds	r3, #4
 8015ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ec2:	9200      	str	r2, [sp, #0]
 8015ec4:	697a      	ldr	r2, [r7, #20]
 8015ec6:	6879      	ldr	r1, [r7, #4]
 8015ec8:	68f8      	ldr	r0, [r7, #12]
 8015eca:	f001 fc93 	bl	80177f4 <ethernet_output>
 8015ece:	4603      	mov	r3, r0
 8015ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015ed4:	e067      	b.n	8015fa6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015ed6:	7c7a      	ldrb	r2, [r7, #17]
 8015ed8:	4939      	ldr	r1, [pc, #228]	; (8015fc0 <etharp_query+0x268>)
 8015eda:	4613      	mov	r3, r2
 8015edc:	005b      	lsls	r3, r3, #1
 8015ede:	4413      	add	r3, r2
 8015ee0:	00db      	lsls	r3, r3, #3
 8015ee2:	440b      	add	r3, r1
 8015ee4:	3314      	adds	r3, #20
 8015ee6:	781b      	ldrb	r3, [r3, #0]
 8015ee8:	2b01      	cmp	r3, #1
 8015eea:	d15c      	bne.n	8015fa6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015eec:	2300      	movs	r3, #0
 8015eee:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015ef4:	e01c      	b.n	8015f30 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015ef6:	69fb      	ldr	r3, [r7, #28]
 8015ef8:	895a      	ldrh	r2, [r3, #10]
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	891b      	ldrh	r3, [r3, #8]
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d10a      	bne.n	8015f18 <etharp_query+0x1c0>
 8015f02:	69fb      	ldr	r3, [r7, #28]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d006      	beq.n	8015f18 <etharp_query+0x1c0>
 8015f0a:	4b2a      	ldr	r3, [pc, #168]	; (8015fb4 <etharp_query+0x25c>)
 8015f0c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015f10:	492f      	ldr	r1, [pc, #188]	; (8015fd0 <etharp_query+0x278>)
 8015f12:	482a      	ldr	r0, [pc, #168]	; (8015fbc <etharp_query+0x264>)
 8015f14:	f001 ff4a 	bl	8017dac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	7b1b      	ldrb	r3, [r3, #12]
 8015f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d002      	beq.n	8015f2a <etharp_query+0x1d2>
        copy_needed = 1;
 8015f24:	2301      	movs	r3, #1
 8015f26:	61bb      	str	r3, [r7, #24]
        break;
 8015f28:	e005      	b.n	8015f36 <etharp_query+0x1de>
      }
      p = p->next;
 8015f2a:	69fb      	ldr	r3, [r7, #28]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015f30:	69fb      	ldr	r3, [r7, #28]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d1df      	bne.n	8015ef6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8015f36:	69bb      	ldr	r3, [r7, #24]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d007      	beq.n	8015f4c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8015f3c:	687a      	ldr	r2, [r7, #4]
 8015f3e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8015f42:	200e      	movs	r0, #14
 8015f44:	f7f6 fc60 	bl	800c808 <pbuf_clone>
 8015f48:	61f8      	str	r0, [r7, #28]
 8015f4a:	e004      	b.n	8015f56 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015f50:	69f8      	ldr	r0, [r7, #28]
 8015f52:	f7f6 fa87 	bl	800c464 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015f56:	69fb      	ldr	r3, [r7, #28]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d021      	beq.n	8015fa0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015f5c:	7c7a      	ldrb	r2, [r7, #17]
 8015f5e:	4918      	ldr	r1, [pc, #96]	; (8015fc0 <etharp_query+0x268>)
 8015f60:	4613      	mov	r3, r2
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	4413      	add	r3, r2
 8015f66:	00db      	lsls	r3, r3, #3
 8015f68:	440b      	add	r3, r1
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	2b00      	cmp	r3, #0
 8015f6e:	d00a      	beq.n	8015f86 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8015f70:	7c7a      	ldrb	r2, [r7, #17]
 8015f72:	4913      	ldr	r1, [pc, #76]	; (8015fc0 <etharp_query+0x268>)
 8015f74:	4613      	mov	r3, r2
 8015f76:	005b      	lsls	r3, r3, #1
 8015f78:	4413      	add	r3, r2
 8015f7a:	00db      	lsls	r3, r3, #3
 8015f7c:	440b      	add	r3, r1
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	4618      	mov	r0, r3
 8015f82:	f7f6 f9c9 	bl	800c318 <pbuf_free>
      }
      arp_table[i].q = p;
 8015f86:	7c7a      	ldrb	r2, [r7, #17]
 8015f88:	490d      	ldr	r1, [pc, #52]	; (8015fc0 <etharp_query+0x268>)
 8015f8a:	4613      	mov	r3, r2
 8015f8c:	005b      	lsls	r3, r3, #1
 8015f8e:	4413      	add	r3, r2
 8015f90:	00db      	lsls	r3, r3, #3
 8015f92:	440b      	add	r3, r1
 8015f94:	69fa      	ldr	r2, [r7, #28]
 8015f96:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015f98:	2300      	movs	r3, #0
 8015f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f9e:	e002      	b.n	8015fa6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015fa0:	23ff      	movs	r3, #255	; 0xff
 8015fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015fa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3728      	adds	r7, #40	; 0x28
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	0801b7e4 	.word	0x0801b7e4
 8015fb8:	0801b990 	.word	0x0801b990
 8015fbc:	0801b85c 	.word	0x0801b85c
 8015fc0:	2000cecc 	.word	0x2000cecc
 8015fc4:	0801b9a0 	.word	0x0801b9a0
 8015fc8:	0801b984 	.word	0x0801b984
 8015fcc:	2000cfbc 	.word	0x2000cfbc
 8015fd0:	0801b9c8 	.word	0x0801b9c8

08015fd4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b08a      	sub	sp, #40	; 0x28
 8015fd8:	af02      	add	r7, sp, #8
 8015fda:	60f8      	str	r0, [r7, #12]
 8015fdc:	60b9      	str	r1, [r7, #8]
 8015fde:	607a      	str	r2, [r7, #4]
 8015fe0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d106      	bne.n	8015ffa <etharp_raw+0x26>
 8015fec:	4b3a      	ldr	r3, [pc, #232]	; (80160d8 <etharp_raw+0x104>)
 8015fee:	f240 4257 	movw	r2, #1111	; 0x457
 8015ff2:	493a      	ldr	r1, [pc, #232]	; (80160dc <etharp_raw+0x108>)
 8015ff4:	483a      	ldr	r0, [pc, #232]	; (80160e0 <etharp_raw+0x10c>)
 8015ff6:	f001 fed9 	bl	8017dac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8015ffa:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ffe:	211c      	movs	r1, #28
 8016000:	200e      	movs	r0, #14
 8016002:	f7f5 fea5 	bl	800bd50 <pbuf_alloc>
 8016006:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016008:	69bb      	ldr	r3, [r7, #24]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d102      	bne.n	8016014 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801600e:	f04f 33ff 	mov.w	r3, #4294967295
 8016012:	e05d      	b.n	80160d0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016014:	69bb      	ldr	r3, [r7, #24]
 8016016:	895b      	ldrh	r3, [r3, #10]
 8016018:	2b1b      	cmp	r3, #27
 801601a:	d806      	bhi.n	801602a <etharp_raw+0x56>
 801601c:	4b2e      	ldr	r3, [pc, #184]	; (80160d8 <etharp_raw+0x104>)
 801601e:	f240 4262 	movw	r2, #1122	; 0x462
 8016022:	4930      	ldr	r1, [pc, #192]	; (80160e4 <etharp_raw+0x110>)
 8016024:	482e      	ldr	r0, [pc, #184]	; (80160e0 <etharp_raw+0x10c>)
 8016026:	f001 fec1 	bl	8017dac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801602a:	69bb      	ldr	r3, [r7, #24]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016030:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016032:	4618      	mov	r0, r3
 8016034:	f7f4 fd3c 	bl	800aab0 <lwip_htons>
 8016038:	4603      	mov	r3, r0
 801603a:	461a      	mov	r2, r3
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016046:	2b06      	cmp	r3, #6
 8016048:	d006      	beq.n	8016058 <etharp_raw+0x84>
 801604a:	4b23      	ldr	r3, [pc, #140]	; (80160d8 <etharp_raw+0x104>)
 801604c:	f240 4269 	movw	r2, #1129	; 0x469
 8016050:	4925      	ldr	r1, [pc, #148]	; (80160e8 <etharp_raw+0x114>)
 8016052:	4823      	ldr	r0, [pc, #140]	; (80160e0 <etharp_raw+0x10c>)
 8016054:	f001 feaa 	bl	8017dac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	3308      	adds	r3, #8
 801605c:	2206      	movs	r2, #6
 801605e:	6839      	ldr	r1, [r7, #0]
 8016060:	4618      	mov	r0, r3
 8016062:	f001 ffa1 	bl	8017fa8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8016066:	697b      	ldr	r3, [r7, #20]
 8016068:	3312      	adds	r3, #18
 801606a:	2206      	movs	r2, #6
 801606c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801606e:	4618      	mov	r0, r3
 8016070:	f001 ff9a 	bl	8017fa8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8016074:	697b      	ldr	r3, [r7, #20]
 8016076:	330e      	adds	r3, #14
 8016078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801607a:	6812      	ldr	r2, [r2, #0]
 801607c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801607e:	697b      	ldr	r3, [r7, #20]
 8016080:	3318      	adds	r3, #24
 8016082:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016084:	6812      	ldr	r2, [r2, #0]
 8016086:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8016088:	697b      	ldr	r3, [r7, #20]
 801608a:	2200      	movs	r2, #0
 801608c:	701a      	strb	r2, [r3, #0]
 801608e:	2200      	movs	r2, #0
 8016090:	f042 0201 	orr.w	r2, r2, #1
 8016094:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016096:	697b      	ldr	r3, [r7, #20]
 8016098:	2200      	movs	r2, #0
 801609a:	f042 0208 	orr.w	r2, r2, #8
 801609e:	709a      	strb	r2, [r3, #2]
 80160a0:	2200      	movs	r2, #0
 80160a2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80160a4:	697b      	ldr	r3, [r7, #20]
 80160a6:	2206      	movs	r2, #6
 80160a8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80160aa:	697b      	ldr	r3, [r7, #20]
 80160ac:	2204      	movs	r2, #4
 80160ae:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80160b0:	f640 0306 	movw	r3, #2054	; 0x806
 80160b4:	9300      	str	r3, [sp, #0]
 80160b6:	687b      	ldr	r3, [r7, #4]
 80160b8:	68ba      	ldr	r2, [r7, #8]
 80160ba:	69b9      	ldr	r1, [r7, #24]
 80160bc:	68f8      	ldr	r0, [r7, #12]
 80160be:	f001 fb99 	bl	80177f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80160c2:	69b8      	ldr	r0, [r7, #24]
 80160c4:	f7f6 f928 	bl	800c318 <pbuf_free>
  p = NULL;
 80160c8:	2300      	movs	r3, #0
 80160ca:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80160cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80160d0:	4618      	mov	r0, r3
 80160d2:	3720      	adds	r7, #32
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}
 80160d8:	0801b7e4 	.word	0x0801b7e4
 80160dc:	0801b934 	.word	0x0801b934
 80160e0:	0801b85c 	.word	0x0801b85c
 80160e4:	0801b9e4 	.word	0x0801b9e4
 80160e8:	0801ba18 	.word	0x0801ba18

080160ec <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b088      	sub	sp, #32
 80160f0:	af04      	add	r7, sp, #16
 80160f2:	60f8      	str	r0, [r7, #12]
 80160f4:	60b9      	str	r1, [r7, #8]
 80160f6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016108:	2201      	movs	r2, #1
 801610a:	9203      	str	r2, [sp, #12]
 801610c:	68ba      	ldr	r2, [r7, #8]
 801610e:	9202      	str	r2, [sp, #8]
 8016110:	4a06      	ldr	r2, [pc, #24]	; (801612c <etharp_request_dst+0x40>)
 8016112:	9201      	str	r2, [sp, #4]
 8016114:	9300      	str	r3, [sp, #0]
 8016116:	4603      	mov	r3, r0
 8016118:	687a      	ldr	r2, [r7, #4]
 801611a:	68f8      	ldr	r0, [r7, #12]
 801611c:	f7ff ff5a 	bl	8015fd4 <etharp_raw>
 8016120:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016122:	4618      	mov	r0, r3
 8016124:	3710      	adds	r7, #16
 8016126:	46bd      	mov	sp, r7
 8016128:	bd80      	pop	{r7, pc}
 801612a:	bf00      	nop
 801612c:	0801e668 	.word	0x0801e668

08016130 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
 8016138:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801613a:	4a05      	ldr	r2, [pc, #20]	; (8016150 <etharp_request+0x20>)
 801613c:	6839      	ldr	r1, [r7, #0]
 801613e:	6878      	ldr	r0, [r7, #4]
 8016140:	f7ff ffd4 	bl	80160ec <etharp_request_dst>
 8016144:	4603      	mov	r3, r0
}
 8016146:	4618      	mov	r0, r3
 8016148:	3708      	adds	r7, #8
 801614a:	46bd      	mov	sp, r7
 801614c:	bd80      	pop	{r7, pc}
 801614e:	bf00      	nop
 8016150:	0801e660 	.word	0x0801e660

08016154 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b08e      	sub	sp, #56	; 0x38
 8016158:	af04      	add	r7, sp, #16
 801615a:	6078      	str	r0, [r7, #4]
 801615c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801615e:	4b79      	ldr	r3, [pc, #484]	; (8016344 <icmp_input+0x1f0>)
 8016160:	689b      	ldr	r3, [r3, #8]
 8016162:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8016164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016166:	781b      	ldrb	r3, [r3, #0]
 8016168:	f003 030f 	and.w	r3, r3, #15
 801616c:	b2db      	uxtb	r3, r3
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	b2db      	uxtb	r3, r3
 8016172:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016176:	2b13      	cmp	r3, #19
 8016178:	f240 80cd 	bls.w	8016316 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	895b      	ldrh	r3, [r3, #10]
 8016180:	2b03      	cmp	r3, #3
 8016182:	f240 80ca 	bls.w	801631a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	685b      	ldr	r3, [r3, #4]
 801618a:	781b      	ldrb	r3, [r3, #0]
 801618c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8016190:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016194:	2b00      	cmp	r3, #0
 8016196:	f000 80b7 	beq.w	8016308 <icmp_input+0x1b4>
 801619a:	2b08      	cmp	r3, #8
 801619c:	f040 80b7 	bne.w	801630e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80161a0:	4b69      	ldr	r3, [pc, #420]	; (8016348 <icmp_input+0x1f4>)
 80161a2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80161a4:	4b67      	ldr	r3, [pc, #412]	; (8016344 <icmp_input+0x1f0>)
 80161a6:	695b      	ldr	r3, [r3, #20]
 80161a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161ac:	2be0      	cmp	r3, #224	; 0xe0
 80161ae:	f000 80bb 	beq.w	8016328 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80161b2:	4b64      	ldr	r3, [pc, #400]	; (8016344 <icmp_input+0x1f0>)
 80161b4:	695b      	ldr	r3, [r3, #20]
 80161b6:	4a63      	ldr	r2, [pc, #396]	; (8016344 <icmp_input+0x1f0>)
 80161b8:	6812      	ldr	r2, [r2, #0]
 80161ba:	4611      	mov	r1, r2
 80161bc:	4618      	mov	r0, r3
 80161be:	f000 fc0b 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 80161c2:	4603      	mov	r3, r0
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	f040 80b1 	bne.w	801632c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	891b      	ldrh	r3, [r3, #8]
 80161ce:	2b07      	cmp	r3, #7
 80161d0:	f240 80a5 	bls.w	801631e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80161d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161d6:	330e      	adds	r3, #14
 80161d8:	4619      	mov	r1, r3
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f7f6 f806 	bl	800c1ec <pbuf_add_header>
 80161e0:	4603      	mov	r3, r0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d04b      	beq.n	801627e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	891a      	ldrh	r2, [r3, #8]
 80161ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80161ec:	4413      	add	r3, r2
 80161ee:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	891b      	ldrh	r3, [r3, #8]
 80161f4:	8b7a      	ldrh	r2, [r7, #26]
 80161f6:	429a      	cmp	r2, r3
 80161f8:	f0c0 809a 	bcc.w	8016330 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80161fc:	8b7b      	ldrh	r3, [r7, #26]
 80161fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016202:	4619      	mov	r1, r3
 8016204:	200e      	movs	r0, #14
 8016206:	f7f5 fda3 	bl	800bd50 <pbuf_alloc>
 801620a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801620c:	697b      	ldr	r3, [r7, #20]
 801620e:	2b00      	cmp	r3, #0
 8016210:	f000 8090 	beq.w	8016334 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	895b      	ldrh	r3, [r3, #10]
 8016218:	461a      	mov	r2, r3
 801621a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801621c:	3308      	adds	r3, #8
 801621e:	429a      	cmp	r2, r3
 8016220:	d203      	bcs.n	801622a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016222:	6978      	ldr	r0, [r7, #20]
 8016224:	f7f6 f878 	bl	800c318 <pbuf_free>
          goto icmperr;
 8016228:	e085      	b.n	8016336 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016230:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016232:	4618      	mov	r0, r3
 8016234:	f001 feb8 	bl	8017fa8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8016238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801623a:	4619      	mov	r1, r3
 801623c:	6978      	ldr	r0, [r7, #20]
 801623e:	f7f5 ffe5 	bl	800c20c <pbuf_remove_header>
 8016242:	4603      	mov	r3, r0
 8016244:	2b00      	cmp	r3, #0
 8016246:	d009      	beq.n	801625c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8016248:	4b40      	ldr	r3, [pc, #256]	; (801634c <icmp_input+0x1f8>)
 801624a:	22b6      	movs	r2, #182	; 0xb6
 801624c:	4940      	ldr	r1, [pc, #256]	; (8016350 <icmp_input+0x1fc>)
 801624e:	4841      	ldr	r0, [pc, #260]	; (8016354 <icmp_input+0x200>)
 8016250:	f001 fdac 	bl	8017dac <iprintf>
          pbuf_free(r);
 8016254:	6978      	ldr	r0, [r7, #20]
 8016256:	f7f6 f85f 	bl	800c318 <pbuf_free>
          goto icmperr;
 801625a:	e06c      	b.n	8016336 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801625c:	6879      	ldr	r1, [r7, #4]
 801625e:	6978      	ldr	r0, [r7, #20]
 8016260:	f7f6 f98e 	bl	800c580 <pbuf_copy>
 8016264:	4603      	mov	r3, r0
 8016266:	2b00      	cmp	r3, #0
 8016268:	d003      	beq.n	8016272 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801626a:	6978      	ldr	r0, [r7, #20]
 801626c:	f7f6 f854 	bl	800c318 <pbuf_free>
          goto icmperr;
 8016270:	e061      	b.n	8016336 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8016272:	6878      	ldr	r0, [r7, #4]
 8016274:	f7f6 f850 	bl	800c318 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8016278:	697b      	ldr	r3, [r7, #20]
 801627a:	607b      	str	r3, [r7, #4]
 801627c:	e00f      	b.n	801629e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801627e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016280:	330e      	adds	r3, #14
 8016282:	4619      	mov	r1, r3
 8016284:	6878      	ldr	r0, [r7, #4]
 8016286:	f7f5 ffc1 	bl	800c20c <pbuf_remove_header>
 801628a:	4603      	mov	r3, r0
 801628c:	2b00      	cmp	r3, #0
 801628e:	d006      	beq.n	801629e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016290:	4b2e      	ldr	r3, [pc, #184]	; (801634c <icmp_input+0x1f8>)
 8016292:	22c7      	movs	r2, #199	; 0xc7
 8016294:	4930      	ldr	r1, [pc, #192]	; (8016358 <icmp_input+0x204>)
 8016296:	482f      	ldr	r0, [pc, #188]	; (8016354 <icmp_input+0x200>)
 8016298:	f001 fd88 	bl	8017dac <iprintf>
          goto icmperr;
 801629c:	e04b      	b.n	8016336 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	685b      	ldr	r3, [r3, #4]
 80162a2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80162a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162a6:	4619      	mov	r1, r3
 80162a8:	6878      	ldr	r0, [r7, #4]
 80162aa:	f7f5 ff9f 	bl	800c1ec <pbuf_add_header>
 80162ae:	4603      	mov	r3, r0
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d12b      	bne.n	801630c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	685b      	ldr	r3, [r3, #4]
 80162b8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80162c2:	4b20      	ldr	r3, [pc, #128]	; (8016344 <icmp_input+0x1f0>)
 80162c4:	691a      	ldr	r2, [r3, #16]
 80162c6:	68fb      	ldr	r3, [r7, #12]
 80162c8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80162ca:	693b      	ldr	r3, [r7, #16]
 80162cc:	2200      	movs	r2, #0
 80162ce:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80162d0:	693b      	ldr	r3, [r7, #16]
 80162d2:	2200      	movs	r2, #0
 80162d4:	709a      	strb	r2, [r3, #2]
 80162d6:	2200      	movs	r2, #0
 80162d8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	22ff      	movs	r2, #255	; 0xff
 80162de:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	2200      	movs	r2, #0
 80162e4:	729a      	strb	r2, [r3, #10]
 80162e6:	2200      	movs	r2, #0
 80162e8:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80162ea:	683b      	ldr	r3, [r7, #0]
 80162ec:	9302      	str	r3, [sp, #8]
 80162ee:	2301      	movs	r3, #1
 80162f0:	9301      	str	r3, [sp, #4]
 80162f2:	2300      	movs	r3, #0
 80162f4:	9300      	str	r3, [sp, #0]
 80162f6:	23ff      	movs	r3, #255	; 0xff
 80162f8:	2200      	movs	r2, #0
 80162fa:	69f9      	ldr	r1, [r7, #28]
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f000 fa93 	bl	8016828 <ip4_output_if>
 8016302:	4603      	mov	r3, r0
 8016304:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016306:	e001      	b.n	801630c <icmp_input+0x1b8>
      break;
 8016308:	bf00      	nop
 801630a:	e000      	b.n	801630e <icmp_input+0x1ba>
      break;
 801630c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801630e:	6878      	ldr	r0, [r7, #4]
 8016310:	f7f6 f802 	bl	800c318 <pbuf_free>
  return;
 8016314:	e013      	b.n	801633e <icmp_input+0x1ea>
    goto lenerr;
 8016316:	bf00      	nop
 8016318:	e002      	b.n	8016320 <icmp_input+0x1cc>
    goto lenerr;
 801631a:	bf00      	nop
 801631c:	e000      	b.n	8016320 <icmp_input+0x1cc>
        goto lenerr;
 801631e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016320:	6878      	ldr	r0, [r7, #4]
 8016322:	f7f5 fff9 	bl	800c318 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016326:	e00a      	b.n	801633e <icmp_input+0x1ea>
        goto icmperr;
 8016328:	bf00      	nop
 801632a:	e004      	b.n	8016336 <icmp_input+0x1e2>
        goto icmperr;
 801632c:	bf00      	nop
 801632e:	e002      	b.n	8016336 <icmp_input+0x1e2>
          goto icmperr;
 8016330:	bf00      	nop
 8016332:	e000      	b.n	8016336 <icmp_input+0x1e2>
          goto icmperr;
 8016334:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f7f5 ffee 	bl	800c318 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801633c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801633e:	3728      	adds	r7, #40	; 0x28
 8016340:	46bd      	mov	sp, r7
 8016342:	bd80      	pop	{r7, pc}
 8016344:	200096c4 	.word	0x200096c4
 8016348:	200096d8 	.word	0x200096d8
 801634c:	0801ba5c 	.word	0x0801ba5c
 8016350:	0801ba94 	.word	0x0801ba94
 8016354:	0801bacc 	.word	0x0801bacc
 8016358:	0801baf4 	.word	0x0801baf4

0801635c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801635c:	b580      	push	{r7, lr}
 801635e:	b082      	sub	sp, #8
 8016360:	af00      	add	r7, sp, #0
 8016362:	6078      	str	r0, [r7, #4]
 8016364:	460b      	mov	r3, r1
 8016366:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016368:	78fb      	ldrb	r3, [r7, #3]
 801636a:	461a      	mov	r2, r3
 801636c:	2103      	movs	r1, #3
 801636e:	6878      	ldr	r0, [r7, #4]
 8016370:	f000 f814 	bl	801639c <icmp_send_response>
}
 8016374:	bf00      	nop
 8016376:	3708      	adds	r7, #8
 8016378:	46bd      	mov	sp, r7
 801637a:	bd80      	pop	{r7, pc}

0801637c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b082      	sub	sp, #8
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	460b      	mov	r3, r1
 8016386:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016388:	78fb      	ldrb	r3, [r7, #3]
 801638a:	461a      	mov	r2, r3
 801638c:	210b      	movs	r1, #11
 801638e:	6878      	ldr	r0, [r7, #4]
 8016390:	f000 f804 	bl	801639c <icmp_send_response>
}
 8016394:	bf00      	nop
 8016396:	3708      	adds	r7, #8
 8016398:	46bd      	mov	sp, r7
 801639a:	bd80      	pop	{r7, pc}

0801639c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b08c      	sub	sp, #48	; 0x30
 80163a0:	af04      	add	r7, sp, #16
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	460b      	mov	r3, r1
 80163a6:	70fb      	strb	r3, [r7, #3]
 80163a8:	4613      	mov	r3, r2
 80163aa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80163ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163b0:	2124      	movs	r1, #36	; 0x24
 80163b2:	2022      	movs	r0, #34	; 0x22
 80163b4:	f7f5 fccc 	bl	800bd50 <pbuf_alloc>
 80163b8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80163ba:	69fb      	ldr	r3, [r7, #28]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d04c      	beq.n	801645a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80163c0:	69fb      	ldr	r3, [r7, #28]
 80163c2:	895b      	ldrh	r3, [r3, #10]
 80163c4:	2b23      	cmp	r3, #35	; 0x23
 80163c6:	d806      	bhi.n	80163d6 <icmp_send_response+0x3a>
 80163c8:	4b26      	ldr	r3, [pc, #152]	; (8016464 <icmp_send_response+0xc8>)
 80163ca:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80163ce:	4926      	ldr	r1, [pc, #152]	; (8016468 <icmp_send_response+0xcc>)
 80163d0:	4826      	ldr	r0, [pc, #152]	; (801646c <icmp_send_response+0xd0>)
 80163d2:	f001 fceb 	bl	8017dac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	685b      	ldr	r3, [r3, #4]
 80163da:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80163dc:	69fb      	ldr	r3, [r7, #28]
 80163de:	685b      	ldr	r3, [r3, #4]
 80163e0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80163e2:	697b      	ldr	r3, [r7, #20]
 80163e4:	78fa      	ldrb	r2, [r7, #3]
 80163e6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80163e8:	697b      	ldr	r3, [r7, #20]
 80163ea:	78ba      	ldrb	r2, [r7, #2]
 80163ec:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80163ee:	697b      	ldr	r3, [r7, #20]
 80163f0:	2200      	movs	r2, #0
 80163f2:	711a      	strb	r2, [r3, #4]
 80163f4:	2200      	movs	r2, #0
 80163f6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	2200      	movs	r2, #0
 80163fc:	719a      	strb	r2, [r3, #6]
 80163fe:	2200      	movs	r2, #0
 8016400:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016402:	69fb      	ldr	r3, [r7, #28]
 8016404:	685b      	ldr	r3, [r3, #4]
 8016406:	f103 0008 	add.w	r0, r3, #8
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	685b      	ldr	r3, [r3, #4]
 801640e:	221c      	movs	r2, #28
 8016410:	4619      	mov	r1, r3
 8016412:	f001 fdc9 	bl	8017fa8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016416:	69bb      	ldr	r3, [r7, #24]
 8016418:	68db      	ldr	r3, [r3, #12]
 801641a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801641c:	f107 030c 	add.w	r3, r7, #12
 8016420:	4618      	mov	r0, r3
 8016422:	f000 f825 	bl	8016470 <ip4_route>
 8016426:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016428:	693b      	ldr	r3, [r7, #16]
 801642a:	2b00      	cmp	r3, #0
 801642c:	d011      	beq.n	8016452 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801642e:	697b      	ldr	r3, [r7, #20]
 8016430:	2200      	movs	r2, #0
 8016432:	709a      	strb	r2, [r3, #2]
 8016434:	2200      	movs	r2, #0
 8016436:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016438:	f107 020c 	add.w	r2, r7, #12
 801643c:	693b      	ldr	r3, [r7, #16]
 801643e:	9302      	str	r3, [sp, #8]
 8016440:	2301      	movs	r3, #1
 8016442:	9301      	str	r3, [sp, #4]
 8016444:	2300      	movs	r3, #0
 8016446:	9300      	str	r3, [sp, #0]
 8016448:	23ff      	movs	r3, #255	; 0xff
 801644a:	2100      	movs	r1, #0
 801644c:	69f8      	ldr	r0, [r7, #28]
 801644e:	f000 f9eb 	bl	8016828 <ip4_output_if>
  }
  pbuf_free(q);
 8016452:	69f8      	ldr	r0, [r7, #28]
 8016454:	f7f5 ff60 	bl	800c318 <pbuf_free>
 8016458:	e000      	b.n	801645c <icmp_send_response+0xc0>
    return;
 801645a:	bf00      	nop
}
 801645c:	3720      	adds	r7, #32
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}
 8016462:	bf00      	nop
 8016464:	0801ba5c 	.word	0x0801ba5c
 8016468:	0801bb28 	.word	0x0801bb28
 801646c:	0801bacc 	.word	0x0801bacc

08016470 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016470:	b480      	push	{r7}
 8016472:	b085      	sub	sp, #20
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016478:	4b33      	ldr	r3, [pc, #204]	; (8016548 <ip4_route+0xd8>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	60fb      	str	r3, [r7, #12]
 801647e:	e036      	b.n	80164ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016480:	68fb      	ldr	r3, [r7, #12]
 8016482:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016486:	f003 0301 	and.w	r3, r3, #1
 801648a:	b2db      	uxtb	r3, r3
 801648c:	2b00      	cmp	r3, #0
 801648e:	d02b      	beq.n	80164e8 <ip4_route+0x78>
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016496:	089b      	lsrs	r3, r3, #2
 8016498:	f003 0301 	and.w	r3, r3, #1
 801649c:	b2db      	uxtb	r3, r3
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d022      	beq.n	80164e8 <ip4_route+0x78>
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	3304      	adds	r3, #4
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d01d      	beq.n	80164e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681a      	ldr	r2, [r3, #0]
 80164b0:	68fb      	ldr	r3, [r7, #12]
 80164b2:	3304      	adds	r3, #4
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	405a      	eors	r2, r3
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	3308      	adds	r3, #8
 80164bc:	681b      	ldr	r3, [r3, #0]
 80164be:	4013      	ands	r3, r2
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d101      	bne.n	80164c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80164c4:	68fb      	ldr	r3, [r7, #12]
 80164c6:	e038      	b.n	801653a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80164c8:	68fb      	ldr	r3, [r7, #12]
 80164ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80164ce:	f003 0302 	and.w	r3, r3, #2
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d108      	bne.n	80164e8 <ip4_route+0x78>
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681a      	ldr	r2, [r3, #0]
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	330c      	adds	r3, #12
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	429a      	cmp	r2, r3
 80164e2:	d101      	bne.n	80164e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	e028      	b.n	801653a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	60fb      	str	r3, [r7, #12]
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d1c5      	bne.n	8016480 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80164f4:	4b15      	ldr	r3, [pc, #84]	; (801654c <ip4_route+0xdc>)
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d01a      	beq.n	8016532 <ip4_route+0xc2>
 80164fc:	4b13      	ldr	r3, [pc, #76]	; (801654c <ip4_route+0xdc>)
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016504:	f003 0301 	and.w	r3, r3, #1
 8016508:	2b00      	cmp	r3, #0
 801650a:	d012      	beq.n	8016532 <ip4_route+0xc2>
 801650c:	4b0f      	ldr	r3, [pc, #60]	; (801654c <ip4_route+0xdc>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016514:	f003 0304 	and.w	r3, r3, #4
 8016518:	2b00      	cmp	r3, #0
 801651a:	d00a      	beq.n	8016532 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801651c:	4b0b      	ldr	r3, [pc, #44]	; (801654c <ip4_route+0xdc>)
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	3304      	adds	r3, #4
 8016522:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016524:	2b00      	cmp	r3, #0
 8016526:	d004      	beq.n	8016532 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	b2db      	uxtb	r3, r3
 801652e:	2b7f      	cmp	r3, #127	; 0x7f
 8016530:	d101      	bne.n	8016536 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016532:	2300      	movs	r3, #0
 8016534:	e001      	b.n	801653a <ip4_route+0xca>
  }

  return netif_default;
 8016536:	4b05      	ldr	r3, [pc, #20]	; (801654c <ip4_route+0xdc>)
 8016538:	681b      	ldr	r3, [r3, #0]
}
 801653a:	4618      	mov	r0, r3
 801653c:	3714      	adds	r7, #20
 801653e:	46bd      	mov	sp, r7
 8016540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016544:	4770      	bx	lr
 8016546:	bf00      	nop
 8016548:	2000ce2c 	.word	0x2000ce2c
 801654c:	2000ce30 	.word	0x2000ce30

08016550 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016550:	b580      	push	{r7, lr}
 8016552:	b082      	sub	sp, #8
 8016554:	af00      	add	r7, sp, #0
 8016556:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016558:	687b      	ldr	r3, [r7, #4]
 801655a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801655e:	f003 0301 	and.w	r3, r3, #1
 8016562:	b2db      	uxtb	r3, r3
 8016564:	2b00      	cmp	r3, #0
 8016566:	d016      	beq.n	8016596 <ip4_input_accept+0x46>
 8016568:	687b      	ldr	r3, [r7, #4]
 801656a:	3304      	adds	r3, #4
 801656c:	681b      	ldr	r3, [r3, #0]
 801656e:	2b00      	cmp	r3, #0
 8016570:	d011      	beq.n	8016596 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016572:	4b0b      	ldr	r3, [pc, #44]	; (80165a0 <ip4_input_accept+0x50>)
 8016574:	695a      	ldr	r2, [r3, #20]
 8016576:	687b      	ldr	r3, [r7, #4]
 8016578:	3304      	adds	r3, #4
 801657a:	681b      	ldr	r3, [r3, #0]
 801657c:	429a      	cmp	r2, r3
 801657e:	d008      	beq.n	8016592 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016580:	4b07      	ldr	r3, [pc, #28]	; (80165a0 <ip4_input_accept+0x50>)
 8016582:	695b      	ldr	r3, [r3, #20]
 8016584:	6879      	ldr	r1, [r7, #4]
 8016586:	4618      	mov	r0, r3
 8016588:	f000 fa26 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 801658c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801658e:	2b00      	cmp	r3, #0
 8016590:	d001      	beq.n	8016596 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016592:	2301      	movs	r3, #1
 8016594:	e000      	b.n	8016598 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016596:	2300      	movs	r3, #0
}
 8016598:	4618      	mov	r0, r3
 801659a:	3708      	adds	r7, #8
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	200096c4 	.word	0x200096c4

080165a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b088      	sub	sp, #32
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
 80165ac:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80165ae:	2301      	movs	r3, #1
 80165b0:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 80165b8:	69fb      	ldr	r3, [r7, #28]
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	091b      	lsrs	r3, r3, #4
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	2b04      	cmp	r3, #4
 80165c2:	d004      	beq.n	80165ce <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80165c4:	6878      	ldr	r0, [r7, #4]
 80165c6:	f7f5 fea7 	bl	800c318 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80165ca:	2300      	movs	r3, #0
 80165cc:	e123      	b.n	8016816 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80165ce:	69fb      	ldr	r3, [r7, #28]
 80165d0:	781b      	ldrb	r3, [r3, #0]
 80165d2:	f003 030f 	and.w	r3, r3, #15
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	009b      	lsls	r3, r3, #2
 80165da:	b2db      	uxtb	r3, r3
 80165dc:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80165de:	69fb      	ldr	r3, [r7, #28]
 80165e0:	885b      	ldrh	r3, [r3, #2]
 80165e2:	b29b      	uxth	r3, r3
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7f4 fa63 	bl	800aab0 <lwip_htons>
 80165ea:	4603      	mov	r3, r0
 80165ec:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	891b      	ldrh	r3, [r3, #8]
 80165f2:	8a3a      	ldrh	r2, [r7, #16]
 80165f4:	429a      	cmp	r2, r3
 80165f6:	d204      	bcs.n	8016602 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80165f8:	8a3b      	ldrh	r3, [r7, #16]
 80165fa:	4619      	mov	r1, r3
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f7f5 fd05 	bl	800c00c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	895b      	ldrh	r3, [r3, #10]
 8016606:	8a7a      	ldrh	r2, [r7, #18]
 8016608:	429a      	cmp	r2, r3
 801660a:	d807      	bhi.n	801661c <ip4_input+0x78>
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	891b      	ldrh	r3, [r3, #8]
 8016610:	8a3a      	ldrh	r2, [r7, #16]
 8016612:	429a      	cmp	r2, r3
 8016614:	d802      	bhi.n	801661c <ip4_input+0x78>
 8016616:	8a7b      	ldrh	r3, [r7, #18]
 8016618:	2b13      	cmp	r3, #19
 801661a:	d804      	bhi.n	8016626 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f7f5 fe7b 	bl	800c318 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016622:	2300      	movs	r3, #0
 8016624:	e0f7      	b.n	8016816 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016626:	69fb      	ldr	r3, [r7, #28]
 8016628:	691b      	ldr	r3, [r3, #16]
 801662a:	4a7d      	ldr	r2, [pc, #500]	; (8016820 <ip4_input+0x27c>)
 801662c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801662e:	69fb      	ldr	r3, [r7, #28]
 8016630:	68db      	ldr	r3, [r3, #12]
 8016632:	4a7b      	ldr	r2, [pc, #492]	; (8016820 <ip4_input+0x27c>)
 8016634:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016636:	4b7a      	ldr	r3, [pc, #488]	; (8016820 <ip4_input+0x27c>)
 8016638:	695b      	ldr	r3, [r3, #20]
 801663a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801663e:	2be0      	cmp	r3, #224	; 0xe0
 8016640:	d112      	bne.n	8016668 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016648:	f003 0301 	and.w	r3, r3, #1
 801664c:	b2db      	uxtb	r3, r3
 801664e:	2b00      	cmp	r3, #0
 8016650:	d007      	beq.n	8016662 <ip4_input+0xbe>
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	3304      	adds	r3, #4
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d002      	beq.n	8016662 <ip4_input+0xbe>
      netif = inp;
 801665c:	683b      	ldr	r3, [r7, #0]
 801665e:	61bb      	str	r3, [r7, #24]
 8016660:	e02a      	b.n	80166b8 <ip4_input+0x114>
    } else {
      netif = NULL;
 8016662:	2300      	movs	r3, #0
 8016664:	61bb      	str	r3, [r7, #24]
 8016666:	e027      	b.n	80166b8 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016668:	6838      	ldr	r0, [r7, #0]
 801666a:	f7ff ff71 	bl	8016550 <ip4_input_accept>
 801666e:	4603      	mov	r3, r0
 8016670:	2b00      	cmp	r3, #0
 8016672:	d002      	beq.n	801667a <ip4_input+0xd6>
      netif = inp;
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	61bb      	str	r3, [r7, #24]
 8016678:	e01e      	b.n	80166b8 <ip4_input+0x114>
    } else {
      netif = NULL;
 801667a:	2300      	movs	r3, #0
 801667c:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801667e:	4b68      	ldr	r3, [pc, #416]	; (8016820 <ip4_input+0x27c>)
 8016680:	695b      	ldr	r3, [r3, #20]
 8016682:	b2db      	uxtb	r3, r3
 8016684:	2b7f      	cmp	r3, #127	; 0x7f
 8016686:	d017      	beq.n	80166b8 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016688:	4b66      	ldr	r3, [pc, #408]	; (8016824 <ip4_input+0x280>)
 801668a:	681b      	ldr	r3, [r3, #0]
 801668c:	61bb      	str	r3, [r7, #24]
 801668e:	e00e      	b.n	80166ae <ip4_input+0x10a>
          if (netif == inp) {
 8016690:	69ba      	ldr	r2, [r7, #24]
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	429a      	cmp	r2, r3
 8016696:	d006      	beq.n	80166a6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016698:	69b8      	ldr	r0, [r7, #24]
 801669a:	f7ff ff59 	bl	8016550 <ip4_input_accept>
 801669e:	4603      	mov	r3, r0
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d108      	bne.n	80166b6 <ip4_input+0x112>
 80166a4:	e000      	b.n	80166a8 <ip4_input+0x104>
            continue;
 80166a6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80166a8:	69bb      	ldr	r3, [r7, #24]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	61bb      	str	r3, [r7, #24]
 80166ae:	69bb      	ldr	r3, [r7, #24]
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d1ed      	bne.n	8016690 <ip4_input+0xec>
 80166b4:	e000      	b.n	80166b8 <ip4_input+0x114>
            break;
 80166b6:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80166b8:	69bb      	ldr	r3, [r7, #24]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d111      	bne.n	80166e2 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80166be:	69fb      	ldr	r3, [r7, #28]
 80166c0:	7a5b      	ldrb	r3, [r3, #9]
 80166c2:	2b11      	cmp	r3, #17
 80166c4:	d10d      	bne.n	80166e2 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80166c6:	8a7b      	ldrh	r3, [r7, #18]
 80166c8:	69fa      	ldr	r2, [r7, #28]
 80166ca:	4413      	add	r3, r2
 80166cc:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	885b      	ldrh	r3, [r3, #2]
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 80166d8:	d103      	bne.n	80166e2 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 80166de:	2300      	movs	r3, #0
 80166e0:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 80166e2:	697b      	ldr	r3, [r7, #20]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d017      	beq.n	8016718 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80166e8:	4b4d      	ldr	r3, [pc, #308]	; (8016820 <ip4_input+0x27c>)
 80166ea:	691b      	ldr	r3, [r3, #16]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d013      	beq.n	8016718 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80166f0:	4b4b      	ldr	r3, [pc, #300]	; (8016820 <ip4_input+0x27c>)
 80166f2:	691b      	ldr	r3, [r3, #16]
 80166f4:	6839      	ldr	r1, [r7, #0]
 80166f6:	4618      	mov	r0, r3
 80166f8:	f000 f96e 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 80166fc:	4603      	mov	r3, r0
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d105      	bne.n	801670e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016702:	4b47      	ldr	r3, [pc, #284]	; (8016820 <ip4_input+0x27c>)
 8016704:	691b      	ldr	r3, [r3, #16]
 8016706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801670a:	2be0      	cmp	r3, #224	; 0xe0
 801670c:	d104      	bne.n	8016718 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801670e:	6878      	ldr	r0, [r7, #4]
 8016710:	f7f5 fe02 	bl	800c318 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016714:	2300      	movs	r3, #0
 8016716:	e07e      	b.n	8016816 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d104      	bne.n	8016728 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801671e:	6878      	ldr	r0, [r7, #4]
 8016720:	f7f5 fdfa 	bl	800c318 <pbuf_free>
    return ERR_OK;
 8016724:	2300      	movs	r3, #0
 8016726:	e076      	b.n	8016816 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016728:	69fb      	ldr	r3, [r7, #28]
 801672a:	88db      	ldrh	r3, [r3, #6]
 801672c:	b29b      	uxth	r3, r3
 801672e:	461a      	mov	r2, r3
 8016730:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016734:	4013      	ands	r3, r2
 8016736:	2b00      	cmp	r3, #0
 8016738:	d00b      	beq.n	8016752 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801673a:	6878      	ldr	r0, [r7, #4]
 801673c:	f000 fc92 	bl	8017064 <ip4_reass>
 8016740:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d101      	bne.n	801674c <ip4_input+0x1a8>
      return ERR_OK;
 8016748:	2300      	movs	r3, #0
 801674a:	e064      	b.n	8016816 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	685b      	ldr	r3, [r3, #4]
 8016750:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016752:	4a33      	ldr	r2, [pc, #204]	; (8016820 <ip4_input+0x27c>)
 8016754:	69bb      	ldr	r3, [r7, #24]
 8016756:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016758:	4a31      	ldr	r2, [pc, #196]	; (8016820 <ip4_input+0x27c>)
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801675e:	4a30      	ldr	r2, [pc, #192]	; (8016820 <ip4_input+0x27c>)
 8016760:	69fb      	ldr	r3, [r7, #28]
 8016762:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016764:	69fb      	ldr	r3, [r7, #28]
 8016766:	781b      	ldrb	r3, [r3, #0]
 8016768:	f003 030f 	and.w	r3, r3, #15
 801676c:	b2db      	uxtb	r3, r3
 801676e:	009b      	lsls	r3, r3, #2
 8016770:	b2db      	uxtb	r3, r3
 8016772:	b29a      	uxth	r2, r3
 8016774:	4b2a      	ldr	r3, [pc, #168]	; (8016820 <ip4_input+0x27c>)
 8016776:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016778:	8a7b      	ldrh	r3, [r7, #18]
 801677a:	4619      	mov	r1, r3
 801677c:	6878      	ldr	r0, [r7, #4]
 801677e:	f7f5 fd45 	bl	800c20c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016782:	69fb      	ldr	r3, [r7, #28]
 8016784:	7a5b      	ldrb	r3, [r3, #9]
 8016786:	2b11      	cmp	r3, #17
 8016788:	d006      	beq.n	8016798 <ip4_input+0x1f4>
 801678a:	2b11      	cmp	r3, #17
 801678c:	dc13      	bgt.n	80167b6 <ip4_input+0x212>
 801678e:	2b01      	cmp	r3, #1
 8016790:	d00c      	beq.n	80167ac <ip4_input+0x208>
 8016792:	2b06      	cmp	r3, #6
 8016794:	d005      	beq.n	80167a2 <ip4_input+0x1fe>
 8016796:	e00e      	b.n	80167b6 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016798:	6839      	ldr	r1, [r7, #0]
 801679a:	6878      	ldr	r0, [r7, #4]
 801679c:	f7fc fae8 	bl	8012d70 <udp_input>
        break;
 80167a0:	e026      	b.n	80167f0 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80167a2:	6839      	ldr	r1, [r7, #0]
 80167a4:	6878      	ldr	r0, [r7, #4]
 80167a6:	f7f7 fea1 	bl	800e4ec <tcp_input>
        break;
 80167aa:	e021      	b.n	80167f0 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80167ac:	6839      	ldr	r1, [r7, #0]
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f7ff fcd0 	bl	8016154 <icmp_input>
        break;
 80167b4:	e01c      	b.n	80167f0 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80167b6:	4b1a      	ldr	r3, [pc, #104]	; (8016820 <ip4_input+0x27c>)
 80167b8:	695b      	ldr	r3, [r3, #20]
 80167ba:	69b9      	ldr	r1, [r7, #24]
 80167bc:	4618      	mov	r0, r3
 80167be:	f000 f90b 	bl	80169d8 <ip4_addr_isbroadcast_u32>
 80167c2:	4603      	mov	r3, r0
 80167c4:	2b00      	cmp	r3, #0
 80167c6:	d10f      	bne.n	80167e8 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80167c8:	4b15      	ldr	r3, [pc, #84]	; (8016820 <ip4_input+0x27c>)
 80167ca:	695b      	ldr	r3, [r3, #20]
 80167cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80167d0:	2be0      	cmp	r3, #224	; 0xe0
 80167d2:	d009      	beq.n	80167e8 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80167d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80167d8:	4619      	mov	r1, r3
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f7f5 fd89 	bl	800c2f2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80167e0:	2102      	movs	r1, #2
 80167e2:	6878      	ldr	r0, [r7, #4]
 80167e4:	f7ff fdba 	bl	801635c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80167e8:	6878      	ldr	r0, [r7, #4]
 80167ea:	f7f5 fd95 	bl	800c318 <pbuf_free>
        break;
 80167ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80167f0:	4b0b      	ldr	r3, [pc, #44]	; (8016820 <ip4_input+0x27c>)
 80167f2:	2200      	movs	r2, #0
 80167f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80167f6:	4b0a      	ldr	r3, [pc, #40]	; (8016820 <ip4_input+0x27c>)
 80167f8:	2200      	movs	r2, #0
 80167fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80167fc:	4b08      	ldr	r3, [pc, #32]	; (8016820 <ip4_input+0x27c>)
 80167fe:	2200      	movs	r2, #0
 8016800:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016802:	4b07      	ldr	r3, [pc, #28]	; (8016820 <ip4_input+0x27c>)
 8016804:	2200      	movs	r2, #0
 8016806:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016808:	4b05      	ldr	r3, [pc, #20]	; (8016820 <ip4_input+0x27c>)
 801680a:	2200      	movs	r2, #0
 801680c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801680e:	4b04      	ldr	r3, [pc, #16]	; (8016820 <ip4_input+0x27c>)
 8016810:	2200      	movs	r2, #0
 8016812:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016814:	2300      	movs	r3, #0
}
 8016816:	4618      	mov	r0, r3
 8016818:	3720      	adds	r7, #32
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}
 801681e:	bf00      	nop
 8016820:	200096c4 	.word	0x200096c4
 8016824:	2000ce2c 	.word	0x2000ce2c

08016828 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016828:	b580      	push	{r7, lr}
 801682a:	b08a      	sub	sp, #40	; 0x28
 801682c:	af04      	add	r7, sp, #16
 801682e:	60f8      	str	r0, [r7, #12]
 8016830:	60b9      	str	r1, [r7, #8]
 8016832:	607a      	str	r2, [r7, #4]
 8016834:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016836:	68bb      	ldr	r3, [r7, #8]
 8016838:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d009      	beq.n	8016854 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d003      	beq.n	801684e <ip4_output_if+0x26>
 8016846:	68bb      	ldr	r3, [r7, #8]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d102      	bne.n	8016854 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016850:	3304      	adds	r3, #4
 8016852:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016854:	78fa      	ldrb	r2, [r7, #3]
 8016856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016858:	9302      	str	r3, [sp, #8]
 801685a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801685e:	9301      	str	r3, [sp, #4]
 8016860:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016864:	9300      	str	r3, [sp, #0]
 8016866:	4613      	mov	r3, r2
 8016868:	687a      	ldr	r2, [r7, #4]
 801686a:	6979      	ldr	r1, [r7, #20]
 801686c:	68f8      	ldr	r0, [r7, #12]
 801686e:	f000 f805 	bl	801687c <ip4_output_if_src>
 8016872:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016874:	4618      	mov	r0, r3
 8016876:	3718      	adds	r7, #24
 8016878:	46bd      	mov	sp, r7
 801687a:	bd80      	pop	{r7, pc}

0801687c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801687c:	b580      	push	{r7, lr}
 801687e:	b088      	sub	sp, #32
 8016880:	af00      	add	r7, sp, #0
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	60b9      	str	r1, [r7, #8]
 8016886:	607a      	str	r2, [r7, #4]
 8016888:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801688a:	68fb      	ldr	r3, [r7, #12]
 801688c:	7b9b      	ldrb	r3, [r3, #14]
 801688e:	2b01      	cmp	r3, #1
 8016890:	d006      	beq.n	80168a0 <ip4_output_if_src+0x24>
 8016892:	4b4b      	ldr	r3, [pc, #300]	; (80169c0 <ip4_output_if_src+0x144>)
 8016894:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016898:	494a      	ldr	r1, [pc, #296]	; (80169c4 <ip4_output_if_src+0x148>)
 801689a:	484b      	ldr	r0, [pc, #300]	; (80169c8 <ip4_output_if_src+0x14c>)
 801689c:	f001 fa86 	bl	8017dac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d060      	beq.n	8016968 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80168a6:	2314      	movs	r3, #20
 80168a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80168aa:	2114      	movs	r1, #20
 80168ac:	68f8      	ldr	r0, [r7, #12]
 80168ae:	f7f5 fc9d 	bl	800c1ec <pbuf_add_header>
 80168b2:	4603      	mov	r3, r0
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d002      	beq.n	80168be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80168b8:	f06f 0301 	mvn.w	r3, #1
 80168bc:	e07c      	b.n	80169b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	685b      	ldr	r3, [r3, #4]
 80168c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	895b      	ldrh	r3, [r3, #10]
 80168c8:	2b13      	cmp	r3, #19
 80168ca:	d806      	bhi.n	80168da <ip4_output_if_src+0x5e>
 80168cc:	4b3c      	ldr	r3, [pc, #240]	; (80169c0 <ip4_output_if_src+0x144>)
 80168ce:	f44f 7262 	mov.w	r2, #904	; 0x388
 80168d2:	493e      	ldr	r1, [pc, #248]	; (80169cc <ip4_output_if_src+0x150>)
 80168d4:	483c      	ldr	r0, [pc, #240]	; (80169c8 <ip4_output_if_src+0x14c>)
 80168d6:	f001 fa69 	bl	8017dac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80168da:	69fb      	ldr	r3, [r7, #28]
 80168dc:	78fa      	ldrb	r2, [r7, #3]
 80168de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80168e0:	69fb      	ldr	r3, [r7, #28]
 80168e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80168e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	681a      	ldr	r2, [r3, #0]
 80168ec:	69fb      	ldr	r3, [r7, #28]
 80168ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80168f0:	8b7b      	ldrh	r3, [r7, #26]
 80168f2:	089b      	lsrs	r3, r3, #2
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	b2db      	uxtb	r3, r3
 80168f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80168fc:	b2da      	uxtb	r2, r3
 80168fe:	69fb      	ldr	r3, [r7, #28]
 8016900:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8016902:	69fb      	ldr	r3, [r7, #28]
 8016904:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8016908:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801690a:	68fb      	ldr	r3, [r7, #12]
 801690c:	891b      	ldrh	r3, [r3, #8]
 801690e:	4618      	mov	r0, r3
 8016910:	f7f4 f8ce 	bl	800aab0 <lwip_htons>
 8016914:	4603      	mov	r3, r0
 8016916:	461a      	mov	r2, r3
 8016918:	69fb      	ldr	r3, [r7, #28]
 801691a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801691c:	69fb      	ldr	r3, [r7, #28]
 801691e:	2200      	movs	r2, #0
 8016920:	719a      	strb	r2, [r3, #6]
 8016922:	2200      	movs	r2, #0
 8016924:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8016926:	4b2a      	ldr	r3, [pc, #168]	; (80169d0 <ip4_output_if_src+0x154>)
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	4618      	mov	r0, r3
 801692c:	f7f4 f8c0 	bl	800aab0 <lwip_htons>
 8016930:	4603      	mov	r3, r0
 8016932:	461a      	mov	r2, r3
 8016934:	69fb      	ldr	r3, [r7, #28]
 8016936:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8016938:	4b25      	ldr	r3, [pc, #148]	; (80169d0 <ip4_output_if_src+0x154>)
 801693a:	881b      	ldrh	r3, [r3, #0]
 801693c:	3301      	adds	r3, #1
 801693e:	b29a      	uxth	r2, r3
 8016940:	4b23      	ldr	r3, [pc, #140]	; (80169d0 <ip4_output_if_src+0x154>)
 8016942:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8016944:	68bb      	ldr	r3, [r7, #8]
 8016946:	2b00      	cmp	r3, #0
 8016948:	d104      	bne.n	8016954 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801694a:	4b22      	ldr	r3, [pc, #136]	; (80169d4 <ip4_output_if_src+0x158>)
 801694c:	681a      	ldr	r2, [r3, #0]
 801694e:	69fb      	ldr	r3, [r7, #28]
 8016950:	60da      	str	r2, [r3, #12]
 8016952:	e003      	b.n	801695c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016954:	68bb      	ldr	r3, [r7, #8]
 8016956:	681a      	ldr	r2, [r3, #0]
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801695c:	69fb      	ldr	r3, [r7, #28]
 801695e:	2200      	movs	r2, #0
 8016960:	729a      	strb	r2, [r3, #10]
 8016962:	2200      	movs	r2, #0
 8016964:	72da      	strb	r2, [r3, #11]
 8016966:	e00f      	b.n	8016988 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8016968:	68fb      	ldr	r3, [r7, #12]
 801696a:	895b      	ldrh	r3, [r3, #10]
 801696c:	2b13      	cmp	r3, #19
 801696e:	d802      	bhi.n	8016976 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016970:	f06f 0301 	mvn.w	r3, #1
 8016974:	e020      	b.n	80169b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801697c:	69fb      	ldr	r3, [r7, #28]
 801697e:	691b      	ldr	r3, [r3, #16]
 8016980:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016982:	f107 0314 	add.w	r3, r7, #20
 8016986:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801698a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801698c:	2b00      	cmp	r3, #0
 801698e:	d00c      	beq.n	80169aa <ip4_output_if_src+0x12e>
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	891a      	ldrh	r2, [r3, #8]
 8016994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016998:	429a      	cmp	r2, r3
 801699a:	d906      	bls.n	80169aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801699c:	687a      	ldr	r2, [r7, #4]
 801699e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80169a0:	68f8      	ldr	r0, [r7, #12]
 80169a2:	f000 fd53 	bl	801744c <ip4_frag>
 80169a6:	4603      	mov	r3, r0
 80169a8:	e006      	b.n	80169b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80169aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ac:	695b      	ldr	r3, [r3, #20]
 80169ae:	687a      	ldr	r2, [r7, #4]
 80169b0:	68f9      	ldr	r1, [r7, #12]
 80169b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80169b4:	4798      	blx	r3
 80169b6:	4603      	mov	r3, r0
}
 80169b8:	4618      	mov	r0, r3
 80169ba:	3720      	adds	r7, #32
 80169bc:	46bd      	mov	sp, r7
 80169be:	bd80      	pop	{r7, pc}
 80169c0:	0801bb54 	.word	0x0801bb54
 80169c4:	0801bb88 	.word	0x0801bb88
 80169c8:	0801bb94 	.word	0x0801bb94
 80169cc:	0801bbbc 	.word	0x0801bbbc
 80169d0:	2000cfbe 	.word	0x2000cfbe
 80169d4:	0801e658 	.word	0x0801e658

080169d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80169d8:	b480      	push	{r7}
 80169da:	b085      	sub	sp, #20
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169ec:	d002      	beq.n	80169f4 <ip4_addr_isbroadcast_u32+0x1c>
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d101      	bne.n	80169f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80169f4:	2301      	movs	r3, #1
 80169f6:	e02a      	b.n	8016a4e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80169fe:	f003 0302 	and.w	r3, r3, #2
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d101      	bne.n	8016a0a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e021      	b.n	8016a4e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016a0a:	683b      	ldr	r3, [r7, #0]
 8016a0c:	3304      	adds	r3, #4
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	687a      	ldr	r2, [r7, #4]
 8016a12:	429a      	cmp	r2, r3
 8016a14:	d101      	bne.n	8016a1a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016a16:	2300      	movs	r3, #0
 8016a18:	e019      	b.n	8016a4e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016a1a:	68fa      	ldr	r2, [r7, #12]
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	3304      	adds	r3, #4
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	405a      	eors	r2, r3
 8016a24:	683b      	ldr	r3, [r7, #0]
 8016a26:	3308      	adds	r3, #8
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	4013      	ands	r3, r2
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d10d      	bne.n	8016a4c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	3308      	adds	r3, #8
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	43da      	mvns	r2, r3
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	3308      	adds	r3, #8
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016a44:	429a      	cmp	r2, r3
 8016a46:	d101      	bne.n	8016a4c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016a48:	2301      	movs	r3, #1
 8016a4a:	e000      	b.n	8016a4e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016a4c:	2300      	movs	r3, #0
  }
}
 8016a4e:	4618      	mov	r0, r3
 8016a50:	3714      	adds	r7, #20
 8016a52:	46bd      	mov	sp, r7
 8016a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a58:	4770      	bx	lr
	...

08016a5c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016a5c:	b580      	push	{r7, lr}
 8016a5e:	b084      	sub	sp, #16
 8016a60:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016a62:	2300      	movs	r3, #0
 8016a64:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016a66:	4b12      	ldr	r3, [pc, #72]	; (8016ab0 <ip_reass_tmr+0x54>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016a6c:	e018      	b.n	8016aa0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	7fdb      	ldrb	r3, [r3, #31]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00b      	beq.n	8016a8e <ip_reass_tmr+0x32>
      r->timer--;
 8016a76:	68fb      	ldr	r3, [r7, #12]
 8016a78:	7fdb      	ldrb	r3, [r3, #31]
 8016a7a:	3b01      	subs	r3, #1
 8016a7c:	b2da      	uxtb	r2, r3
 8016a7e:	68fb      	ldr	r3, [r7, #12]
 8016a80:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8016a82:	68fb      	ldr	r3, [r7, #12]
 8016a84:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	60fb      	str	r3, [r7, #12]
 8016a8c:	e008      	b.n	8016aa0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016a92:	68fb      	ldr	r3, [r7, #12]
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016a98:	68b9      	ldr	r1, [r7, #8]
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f000 f80a 	bl	8016ab4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d1e3      	bne.n	8016a6e <ip_reass_tmr+0x12>
    }
  }
}
 8016aa6:	bf00      	nop
 8016aa8:	bf00      	nop
 8016aaa:	3710      	adds	r7, #16
 8016aac:	46bd      	mov	sp, r7
 8016aae:	bd80      	pop	{r7, pc}
 8016ab0:	2000cfc0 	.word	0x2000cfc0

08016ab4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b088      	sub	sp, #32
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
 8016abc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016abe:	2300      	movs	r3, #0
 8016ac0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016ac2:	683a      	ldr	r2, [r7, #0]
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d105      	bne.n	8016ad6 <ip_reass_free_complete_datagram+0x22>
 8016aca:	4b45      	ldr	r3, [pc, #276]	; (8016be0 <ip_reass_free_complete_datagram+0x12c>)
 8016acc:	22ab      	movs	r2, #171	; 0xab
 8016ace:	4945      	ldr	r1, [pc, #276]	; (8016be4 <ip_reass_free_complete_datagram+0x130>)
 8016ad0:	4845      	ldr	r0, [pc, #276]	; (8016be8 <ip_reass_free_complete_datagram+0x134>)
 8016ad2:	f001 f96b 	bl	8017dac <iprintf>
  if (prev != NULL) {
 8016ad6:	683b      	ldr	r3, [r7, #0]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d00a      	beq.n	8016af2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016adc:	683b      	ldr	r3, [r7, #0]
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	687a      	ldr	r2, [r7, #4]
 8016ae2:	429a      	cmp	r2, r3
 8016ae4:	d005      	beq.n	8016af2 <ip_reass_free_complete_datagram+0x3e>
 8016ae6:	4b3e      	ldr	r3, [pc, #248]	; (8016be0 <ip_reass_free_complete_datagram+0x12c>)
 8016ae8:	22ad      	movs	r2, #173	; 0xad
 8016aea:	4940      	ldr	r1, [pc, #256]	; (8016bec <ip_reass_free_complete_datagram+0x138>)
 8016aec:	483e      	ldr	r0, [pc, #248]	; (8016be8 <ip_reass_free_complete_datagram+0x134>)
 8016aee:	f001 f95d 	bl	8017dac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	685b      	ldr	r3, [r3, #4]
 8016af8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016afa:	697b      	ldr	r3, [r7, #20]
 8016afc:	889b      	ldrh	r3, [r3, #4]
 8016afe:	b29b      	uxth	r3, r3
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d12a      	bne.n	8016b5a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016b04:	687b      	ldr	r3, [r7, #4]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016b0a:	697b      	ldr	r3, [r7, #20]
 8016b0c:	681a      	ldr	r2, [r3, #0]
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	6858      	ldr	r0, [r3, #4]
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	3308      	adds	r3, #8
 8016b1a:	2214      	movs	r2, #20
 8016b1c:	4619      	mov	r1, r3
 8016b1e:	f001 fa43 	bl	8017fa8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016b22:	2101      	movs	r1, #1
 8016b24:	69b8      	ldr	r0, [r7, #24]
 8016b26:	f7ff fc29 	bl	801637c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016b2a:	69b8      	ldr	r0, [r7, #24]
 8016b2c:	f7f5 fc82 	bl	800c434 <pbuf_clen>
 8016b30:	4603      	mov	r3, r0
 8016b32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016b34:	8bfa      	ldrh	r2, [r7, #30]
 8016b36:	8a7b      	ldrh	r3, [r7, #18]
 8016b38:	4413      	add	r3, r2
 8016b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b3e:	db05      	blt.n	8016b4c <ip_reass_free_complete_datagram+0x98>
 8016b40:	4b27      	ldr	r3, [pc, #156]	; (8016be0 <ip_reass_free_complete_datagram+0x12c>)
 8016b42:	22bc      	movs	r2, #188	; 0xbc
 8016b44:	492a      	ldr	r1, [pc, #168]	; (8016bf0 <ip_reass_free_complete_datagram+0x13c>)
 8016b46:	4828      	ldr	r0, [pc, #160]	; (8016be8 <ip_reass_free_complete_datagram+0x134>)
 8016b48:	f001 f930 	bl	8017dac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b4c:	8bfa      	ldrh	r2, [r7, #30]
 8016b4e:	8a7b      	ldrh	r3, [r7, #18]
 8016b50:	4413      	add	r3, r2
 8016b52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016b54:	69b8      	ldr	r0, [r7, #24]
 8016b56:	f7f5 fbdf 	bl	800c318 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016b5a:	687b      	ldr	r3, [r7, #4]
 8016b5c:	685b      	ldr	r3, [r3, #4]
 8016b5e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016b60:	e01f      	b.n	8016ba2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016b62:	69bb      	ldr	r3, [r7, #24]
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016b68:	69bb      	ldr	r3, [r7, #24]
 8016b6a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016b6c:	697b      	ldr	r3, [r7, #20]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016b72:	68f8      	ldr	r0, [r7, #12]
 8016b74:	f7f5 fc5e 	bl	800c434 <pbuf_clen>
 8016b78:	4603      	mov	r3, r0
 8016b7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016b7c:	8bfa      	ldrh	r2, [r7, #30]
 8016b7e:	8a7b      	ldrh	r3, [r7, #18]
 8016b80:	4413      	add	r3, r2
 8016b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b86:	db05      	blt.n	8016b94 <ip_reass_free_complete_datagram+0xe0>
 8016b88:	4b15      	ldr	r3, [pc, #84]	; (8016be0 <ip_reass_free_complete_datagram+0x12c>)
 8016b8a:	22cc      	movs	r2, #204	; 0xcc
 8016b8c:	4918      	ldr	r1, [pc, #96]	; (8016bf0 <ip_reass_free_complete_datagram+0x13c>)
 8016b8e:	4816      	ldr	r0, [pc, #88]	; (8016be8 <ip_reass_free_complete_datagram+0x134>)
 8016b90:	f001 f90c 	bl	8017dac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8016b94:	8bfa      	ldrh	r2, [r7, #30]
 8016b96:	8a7b      	ldrh	r3, [r7, #18]
 8016b98:	4413      	add	r3, r2
 8016b9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f7f5 fbbb 	bl	800c318 <pbuf_free>
  while (p != NULL) {
 8016ba2:	69bb      	ldr	r3, [r7, #24]
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d1dc      	bne.n	8016b62 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016ba8:	6839      	ldr	r1, [r7, #0]
 8016baa:	6878      	ldr	r0, [r7, #4]
 8016bac:	f000 f8c2 	bl	8016d34 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8016bb0:	4b10      	ldr	r3, [pc, #64]	; (8016bf4 <ip_reass_free_complete_datagram+0x140>)
 8016bb2:	881b      	ldrh	r3, [r3, #0]
 8016bb4:	8bfa      	ldrh	r2, [r7, #30]
 8016bb6:	429a      	cmp	r2, r3
 8016bb8:	d905      	bls.n	8016bc6 <ip_reass_free_complete_datagram+0x112>
 8016bba:	4b09      	ldr	r3, [pc, #36]	; (8016be0 <ip_reass_free_complete_datagram+0x12c>)
 8016bbc:	22d2      	movs	r2, #210	; 0xd2
 8016bbe:	490e      	ldr	r1, [pc, #56]	; (8016bf8 <ip_reass_free_complete_datagram+0x144>)
 8016bc0:	4809      	ldr	r0, [pc, #36]	; (8016be8 <ip_reass_free_complete_datagram+0x134>)
 8016bc2:	f001 f8f3 	bl	8017dac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8016bc6:	4b0b      	ldr	r3, [pc, #44]	; (8016bf4 <ip_reass_free_complete_datagram+0x140>)
 8016bc8:	881a      	ldrh	r2, [r3, #0]
 8016bca:	8bfb      	ldrh	r3, [r7, #30]
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	b29a      	uxth	r2, r3
 8016bd0:	4b08      	ldr	r3, [pc, #32]	; (8016bf4 <ip_reass_free_complete_datagram+0x140>)
 8016bd2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016bd4:	8bfb      	ldrh	r3, [r7, #30]
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3720      	adds	r7, #32
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}
 8016bde:	bf00      	nop
 8016be0:	0801bbec 	.word	0x0801bbec
 8016be4:	0801bc28 	.word	0x0801bc28
 8016be8:	0801bc34 	.word	0x0801bc34
 8016bec:	0801bc5c 	.word	0x0801bc5c
 8016bf0:	0801bc70 	.word	0x0801bc70
 8016bf4:	2000cfc4 	.word	0x2000cfc4
 8016bf8:	0801bc90 	.word	0x0801bc90

08016bfc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016bfc:	b580      	push	{r7, lr}
 8016bfe:	b08a      	sub	sp, #40	; 0x28
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]
 8016c04:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016c06:	2300      	movs	r3, #0
 8016c08:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016c12:	2300      	movs	r3, #0
 8016c14:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016c16:	2300      	movs	r3, #0
 8016c18:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016c1a:	4b28      	ldr	r3, [pc, #160]	; (8016cbc <ip_reass_remove_oldest_datagram+0xc0>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016c20:	e030      	b.n	8016c84 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c24:	695a      	ldr	r2, [r3, #20]
 8016c26:	687b      	ldr	r3, [r7, #4]
 8016c28:	68db      	ldr	r3, [r3, #12]
 8016c2a:	429a      	cmp	r2, r3
 8016c2c:	d10c      	bne.n	8016c48 <ip_reass_remove_oldest_datagram+0x4c>
 8016c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c30:	699a      	ldr	r2, [r3, #24]
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	691b      	ldr	r3, [r3, #16]
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d106      	bne.n	8016c48 <ip_reass_remove_oldest_datagram+0x4c>
 8016c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c3c:	899a      	ldrh	r2, [r3, #12]
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	889b      	ldrh	r3, [r3, #4]
 8016c42:	b29b      	uxth	r3, r3
 8016c44:	429a      	cmp	r2, r3
 8016c46:	d014      	beq.n	8016c72 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016c48:	693b      	ldr	r3, [r7, #16]
 8016c4a:	3301      	adds	r3, #1
 8016c4c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016c4e:	6a3b      	ldr	r3, [r7, #32]
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	d104      	bne.n	8016c5e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c56:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c58:	69fb      	ldr	r3, [r7, #28]
 8016c5a:	61bb      	str	r3, [r7, #24]
 8016c5c:	e009      	b.n	8016c72 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c60:	7fda      	ldrb	r2, [r3, #31]
 8016c62:	6a3b      	ldr	r3, [r7, #32]
 8016c64:	7fdb      	ldrb	r3, [r3, #31]
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d803      	bhi.n	8016c72 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c6c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016c6e:	69fb      	ldr	r3, [r7, #28]
 8016c70:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	2b00      	cmp	r3, #0
 8016c78:	d001      	beq.n	8016c7e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c80:	681b      	ldr	r3, [r3, #0]
 8016c82:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d1cb      	bne.n	8016c22 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016c8a:	6a3b      	ldr	r3, [r7, #32]
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	d008      	beq.n	8016ca2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016c90:	69b9      	ldr	r1, [r7, #24]
 8016c92:	6a38      	ldr	r0, [r7, #32]
 8016c94:	f7ff ff0e 	bl	8016ab4 <ip_reass_free_complete_datagram>
 8016c98:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016c9a:	697a      	ldr	r2, [r7, #20]
 8016c9c:	68fb      	ldr	r3, [r7, #12]
 8016c9e:	4413      	add	r3, r2
 8016ca0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016ca2:	697a      	ldr	r2, [r7, #20]
 8016ca4:	683b      	ldr	r3, [r7, #0]
 8016ca6:	429a      	cmp	r2, r3
 8016ca8:	da02      	bge.n	8016cb0 <ip_reass_remove_oldest_datagram+0xb4>
 8016caa:	693b      	ldr	r3, [r7, #16]
 8016cac:	2b01      	cmp	r3, #1
 8016cae:	dcac      	bgt.n	8016c0a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016cb0:	697b      	ldr	r3, [r7, #20]
}
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	3728      	adds	r7, #40	; 0x28
 8016cb6:	46bd      	mov	sp, r7
 8016cb8:	bd80      	pop	{r7, pc}
 8016cba:	bf00      	nop
 8016cbc:	2000cfc0 	.word	0x2000cfc0

08016cc0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016cc0:	b580      	push	{r7, lr}
 8016cc2:	b084      	sub	sp, #16
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	6078      	str	r0, [r7, #4]
 8016cc8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016cca:	2004      	movs	r0, #4
 8016ccc:	f7f4 fbfe 	bl	800b4cc <memp_malloc>
 8016cd0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d110      	bne.n	8016cfa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016cd8:	6839      	ldr	r1, [r7, #0]
 8016cda:	6878      	ldr	r0, [r7, #4]
 8016cdc:	f7ff ff8e 	bl	8016bfc <ip_reass_remove_oldest_datagram>
 8016ce0:	4602      	mov	r2, r0
 8016ce2:	683b      	ldr	r3, [r7, #0]
 8016ce4:	4293      	cmp	r3, r2
 8016ce6:	dc03      	bgt.n	8016cf0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016ce8:	2004      	movs	r0, #4
 8016cea:	f7f4 fbef 	bl	800b4cc <memp_malloc>
 8016cee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	2b00      	cmp	r3, #0
 8016cf4:	d101      	bne.n	8016cfa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8016cf6:	2300      	movs	r3, #0
 8016cf8:	e016      	b.n	8016d28 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016cfa:	2220      	movs	r2, #32
 8016cfc:	2100      	movs	r1, #0
 8016cfe:	68f8      	ldr	r0, [r7, #12]
 8016d00:	f001 f8b9 	bl	8017e76 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	220f      	movs	r2, #15
 8016d08:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016d0a:	4b09      	ldr	r3, [pc, #36]	; (8016d30 <ip_reass_enqueue_new_datagram+0x70>)
 8016d0c:	681a      	ldr	r2, [r3, #0]
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016d12:	4a07      	ldr	r2, [pc, #28]	; (8016d30 <ip_reass_enqueue_new_datagram+0x70>)
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	3308      	adds	r3, #8
 8016d1c:	2214      	movs	r2, #20
 8016d1e:	6879      	ldr	r1, [r7, #4]
 8016d20:	4618      	mov	r0, r3
 8016d22:	f001 f941 	bl	8017fa8 <memcpy>
  return ipr;
 8016d26:	68fb      	ldr	r3, [r7, #12]
}
 8016d28:	4618      	mov	r0, r3
 8016d2a:	3710      	adds	r7, #16
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	2000cfc0 	.word	0x2000cfc0

08016d34 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016d34:	b580      	push	{r7, lr}
 8016d36:	b082      	sub	sp, #8
 8016d38:	af00      	add	r7, sp, #0
 8016d3a:	6078      	str	r0, [r7, #4]
 8016d3c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016d3e:	4b10      	ldr	r3, [pc, #64]	; (8016d80 <ip_reass_dequeue_datagram+0x4c>)
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	687a      	ldr	r2, [r7, #4]
 8016d44:	429a      	cmp	r2, r3
 8016d46:	d104      	bne.n	8016d52 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4a0c      	ldr	r2, [pc, #48]	; (8016d80 <ip_reass_dequeue_datagram+0x4c>)
 8016d4e:	6013      	str	r3, [r2, #0]
 8016d50:	e00d      	b.n	8016d6e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d106      	bne.n	8016d66 <ip_reass_dequeue_datagram+0x32>
 8016d58:	4b0a      	ldr	r3, [pc, #40]	; (8016d84 <ip_reass_dequeue_datagram+0x50>)
 8016d5a:	f240 1245 	movw	r2, #325	; 0x145
 8016d5e:	490a      	ldr	r1, [pc, #40]	; (8016d88 <ip_reass_dequeue_datagram+0x54>)
 8016d60:	480a      	ldr	r0, [pc, #40]	; (8016d8c <ip_reass_dequeue_datagram+0x58>)
 8016d62:	f001 f823 	bl	8017dac <iprintf>
    prev->next = ipr->next;
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681a      	ldr	r2, [r3, #0]
 8016d6a:	683b      	ldr	r3, [r7, #0]
 8016d6c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016d6e:	6879      	ldr	r1, [r7, #4]
 8016d70:	2004      	movs	r0, #4
 8016d72:	f7f4 fc21 	bl	800b5b8 <memp_free>
}
 8016d76:	bf00      	nop
 8016d78:	3708      	adds	r7, #8
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}
 8016d7e:	bf00      	nop
 8016d80:	2000cfc0 	.word	0x2000cfc0
 8016d84:	0801bbec 	.word	0x0801bbec
 8016d88:	0801bcb4 	.word	0x0801bcb4
 8016d8c:	0801bc34 	.word	0x0801bc34

08016d90 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016d90:	b580      	push	{r7, lr}
 8016d92:	b08c      	sub	sp, #48	; 0x30
 8016d94:	af00      	add	r7, sp, #0
 8016d96:	60f8      	str	r0, [r7, #12]
 8016d98:	60b9      	str	r1, [r7, #8]
 8016d9a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016da0:	2301      	movs	r3, #1
 8016da2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	685b      	ldr	r3, [r3, #4]
 8016da8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	885b      	ldrh	r3, [r3, #2]
 8016dae:	b29b      	uxth	r3, r3
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7f3 fe7d 	bl	800aab0 <lwip_htons>
 8016db6:	4603      	mov	r3, r0
 8016db8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016dba:	69fb      	ldr	r3, [r7, #28]
 8016dbc:	781b      	ldrb	r3, [r3, #0]
 8016dbe:	f003 030f 	and.w	r3, r3, #15
 8016dc2:	b2db      	uxtb	r3, r3
 8016dc4:	009b      	lsls	r3, r3, #2
 8016dc6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016dc8:	7e7b      	ldrb	r3, [r7, #25]
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	8b7a      	ldrh	r2, [r7, #26]
 8016dce:	429a      	cmp	r2, r3
 8016dd0:	d202      	bcs.n	8016dd8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8016dd6:	e135      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8016dd8:	7e7b      	ldrb	r3, [r7, #25]
 8016dda:	b29b      	uxth	r3, r3
 8016ddc:	8b7a      	ldrh	r2, [r7, #26]
 8016dde:	1ad3      	subs	r3, r2, r3
 8016de0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8016de2:	69fb      	ldr	r3, [r7, #28]
 8016de4:	88db      	ldrh	r3, [r3, #6]
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	4618      	mov	r0, r3
 8016dea:	f7f3 fe61 	bl	800aab0 <lwip_htons>
 8016dee:	4603      	mov	r3, r0
 8016df0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016df4:	b29b      	uxth	r3, r3
 8016df6:	00db      	lsls	r3, r3, #3
 8016df8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8016dfa:	68bb      	ldr	r3, [r7, #8]
 8016dfc:	685b      	ldr	r3, [r3, #4]
 8016dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e02:	2200      	movs	r2, #0
 8016e04:	701a      	strb	r2, [r3, #0]
 8016e06:	2200      	movs	r2, #0
 8016e08:	705a      	strb	r2, [r3, #1]
 8016e0a:	2200      	movs	r2, #0
 8016e0c:	709a      	strb	r2, [r3, #2]
 8016e0e:	2200      	movs	r2, #0
 8016e10:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e14:	8afa      	ldrh	r2, [r7, #22]
 8016e16:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8016e18:	8afa      	ldrh	r2, [r7, #22]
 8016e1a:	8b7b      	ldrh	r3, [r7, #26]
 8016e1c:	4413      	add	r3, r2
 8016e1e:	b29a      	uxth	r2, r3
 8016e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e22:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8016e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e26:	88db      	ldrh	r3, [r3, #6]
 8016e28:	b29b      	uxth	r3, r3
 8016e2a:	8afa      	ldrh	r2, [r7, #22]
 8016e2c:	429a      	cmp	r2, r3
 8016e2e:	d902      	bls.n	8016e36 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e30:	f04f 33ff 	mov.w	r3, #4294967295
 8016e34:	e106      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8016e3c:	e068      	b.n	8016f10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e40:	685b      	ldr	r3, [r3, #4]
 8016e42:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8016e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e46:	889b      	ldrh	r3, [r3, #4]
 8016e48:	b29a      	uxth	r2, r3
 8016e4a:	693b      	ldr	r3, [r7, #16]
 8016e4c:	889b      	ldrh	r3, [r3, #4]
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	429a      	cmp	r2, r3
 8016e52:	d235      	bcs.n	8016ec0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016e58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e5c:	2b00      	cmp	r3, #0
 8016e5e:	d020      	beq.n	8016ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e62:	889b      	ldrh	r3, [r3, #4]
 8016e64:	b29a      	uxth	r2, r3
 8016e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e68:	88db      	ldrh	r3, [r3, #6]
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	429a      	cmp	r2, r3
 8016e6e:	d307      	bcc.n	8016e80 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e72:	88db      	ldrh	r3, [r3, #6]
 8016e74:	b29a      	uxth	r2, r3
 8016e76:	693b      	ldr	r3, [r7, #16]
 8016e78:	889b      	ldrh	r3, [r3, #4]
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	429a      	cmp	r2, r3
 8016e7e:	d902      	bls.n	8016e86 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016e80:	f04f 33ff 	mov.w	r3, #4294967295
 8016e84:	e0de      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e88:	68ba      	ldr	r2, [r7, #8]
 8016e8a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016e8e:	88db      	ldrh	r3, [r3, #6]
 8016e90:	b29a      	uxth	r2, r3
 8016e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e94:	889b      	ldrh	r3, [r3, #4]
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	429a      	cmp	r2, r3
 8016e9a:	d03d      	beq.n	8016f18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016e9c:	2300      	movs	r3, #0
 8016e9e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016ea0:	e03a      	b.n	8016f18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea4:	88db      	ldrh	r3, [r3, #6]
 8016ea6:	b29a      	uxth	r2, r3
 8016ea8:	693b      	ldr	r3, [r7, #16]
 8016eaa:	889b      	ldrh	r3, [r3, #4]
 8016eac:	b29b      	uxth	r3, r3
 8016eae:	429a      	cmp	r2, r3
 8016eb0:	d902      	bls.n	8016eb8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8016eb6:	e0c5      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016eb8:	68fb      	ldr	r3, [r7, #12]
 8016eba:	68ba      	ldr	r2, [r7, #8]
 8016ebc:	605a      	str	r2, [r3, #4]
      break;
 8016ebe:	e02b      	b.n	8016f18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec2:	889b      	ldrh	r3, [r3, #4]
 8016ec4:	b29a      	uxth	r2, r3
 8016ec6:	693b      	ldr	r3, [r7, #16]
 8016ec8:	889b      	ldrh	r3, [r3, #4]
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	429a      	cmp	r2, r3
 8016ece:	d102      	bne.n	8016ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ed4:	e0b6      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed8:	889b      	ldrh	r3, [r3, #4]
 8016eda:	b29a      	uxth	r2, r3
 8016edc:	693b      	ldr	r3, [r7, #16]
 8016ede:	88db      	ldrh	r3, [r3, #6]
 8016ee0:	b29b      	uxth	r3, r3
 8016ee2:	429a      	cmp	r2, r3
 8016ee4:	d202      	bcs.n	8016eec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8016eea:	e0ab      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d009      	beq.n	8016f06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef4:	88db      	ldrh	r3, [r3, #6]
 8016ef6:	b29a      	uxth	r2, r3
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	889b      	ldrh	r3, [r3, #4]
 8016efc:	b29b      	uxth	r3, r3
 8016efe:	429a      	cmp	r2, r3
 8016f00:	d001      	beq.n	8016f06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f02:	2300      	movs	r3, #0
 8016f04:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016f06:	693b      	ldr	r3, [r7, #16]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016f0c:	693b      	ldr	r3, [r7, #16]
 8016f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d193      	bne.n	8016e3e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016f16:	e000      	b.n	8016f1a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016f18:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1c:	2b00      	cmp	r3, #0
 8016f1e:	d12d      	bne.n	8016f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d01c      	beq.n	8016f60 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f28:	88db      	ldrh	r3, [r3, #6]
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2e:	889b      	ldrh	r3, [r3, #4]
 8016f30:	b29b      	uxth	r3, r3
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d906      	bls.n	8016f44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8016f36:	4b45      	ldr	r3, [pc, #276]	; (801704c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f38:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016f3c:	4944      	ldr	r1, [pc, #272]	; (8017050 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016f3e:	4845      	ldr	r0, [pc, #276]	; (8017054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f40:	f000 ff34 	bl	8017dac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f46:	68ba      	ldr	r2, [r7, #8]
 8016f48:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f4c:	88db      	ldrh	r3, [r3, #6]
 8016f4e:	b29a      	uxth	r2, r3
 8016f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f52:	889b      	ldrh	r3, [r3, #4]
 8016f54:	b29b      	uxth	r3, r3
 8016f56:	429a      	cmp	r2, r3
 8016f58:	d010      	beq.n	8016f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016f5a:	2300      	movs	r3, #0
 8016f5c:	623b      	str	r3, [r7, #32]
 8016f5e:	e00d      	b.n	8016f7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016f60:	68fb      	ldr	r3, [r7, #12]
 8016f62:	685b      	ldr	r3, [r3, #4]
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d006      	beq.n	8016f76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016f68:	4b38      	ldr	r3, [pc, #224]	; (801704c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f6a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016f6e:	493a      	ldr	r1, [pc, #232]	; (8017058 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016f70:	4838      	ldr	r0, [pc, #224]	; (8017054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016f72:	f000 ff1b 	bl	8017dac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	68ba      	ldr	r2, [r7, #8]
 8016f7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d105      	bne.n	8016f8e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	7f9b      	ldrb	r3, [r3, #30]
 8016f86:	f003 0301 	and.w	r3, r3, #1
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d059      	beq.n	8017042 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d04f      	beq.n	8017034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016f94:	68fb      	ldr	r3, [r7, #12]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d006      	beq.n	8016faa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	889b      	ldrh	r3, [r3, #4]
 8016fa4:	b29b      	uxth	r3, r3
 8016fa6:	2b00      	cmp	r3, #0
 8016fa8:	d002      	beq.n	8016fb0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016faa:	2300      	movs	r3, #0
 8016fac:	623b      	str	r3, [r7, #32]
 8016fae:	e041      	b.n	8017034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016fba:	e012      	b.n	8016fe2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbe:	685b      	ldr	r3, [r3, #4]
 8016fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fc4:	88db      	ldrh	r3, [r3, #6]
 8016fc6:	b29a      	uxth	r2, r3
 8016fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fca:	889b      	ldrh	r3, [r3, #4]
 8016fcc:	b29b      	uxth	r3, r3
 8016fce:	429a      	cmp	r2, r3
 8016fd0:	d002      	beq.n	8016fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016fd2:	2300      	movs	r3, #0
 8016fd4:	623b      	str	r3, [r7, #32]
            break;
 8016fd6:	e007      	b.n	8016fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fda:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d1e9      	bne.n	8016fbc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016fe8:	6a3b      	ldr	r3, [r7, #32]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d022      	beq.n	8017034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016fee:	68fb      	ldr	r3, [r7, #12]
 8016ff0:	685b      	ldr	r3, [r3, #4]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d106      	bne.n	8017004 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016ff6:	4b15      	ldr	r3, [pc, #84]	; (801704c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016ff8:	f240 12df 	movw	r2, #479	; 0x1df
 8016ffc:	4917      	ldr	r1, [pc, #92]	; (801705c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016ffe:	4815      	ldr	r0, [pc, #84]	; (8017054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017000:	f000 fed4 	bl	8017dac <iprintf>
          LWIP_ASSERT("sanity check",
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	685b      	ldr	r3, [r3, #4]
 8017008:	685b      	ldr	r3, [r3, #4]
 801700a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801700c:	429a      	cmp	r2, r3
 801700e:	d106      	bne.n	801701e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017010:	4b0e      	ldr	r3, [pc, #56]	; (801704c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017012:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017016:	4911      	ldr	r1, [pc, #68]	; (801705c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017018:	480e      	ldr	r0, [pc, #56]	; (8017054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801701a:	f000 fec7 	bl	8017dac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801701e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d006      	beq.n	8017034 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017026:	4b09      	ldr	r3, [pc, #36]	; (801704c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017028:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801702c:	490c      	ldr	r1, [pc, #48]	; (8017060 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801702e:	4809      	ldr	r0, [pc, #36]	; (8017054 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017030:	f000 febc 	bl	8017dac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017034:	6a3b      	ldr	r3, [r7, #32]
 8017036:	2b00      	cmp	r3, #0
 8017038:	bf14      	ite	ne
 801703a:	2301      	movne	r3, #1
 801703c:	2300      	moveq	r3, #0
 801703e:	b2db      	uxtb	r3, r3
 8017040:	e000      	b.n	8017044 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017042:	2300      	movs	r3, #0
}
 8017044:	4618      	mov	r0, r3
 8017046:	3730      	adds	r7, #48	; 0x30
 8017048:	46bd      	mov	sp, r7
 801704a:	bd80      	pop	{r7, pc}
 801704c:	0801bbec 	.word	0x0801bbec
 8017050:	0801bcd0 	.word	0x0801bcd0
 8017054:	0801bc34 	.word	0x0801bc34
 8017058:	0801bcf0 	.word	0x0801bcf0
 801705c:	0801bd28 	.word	0x0801bd28
 8017060:	0801bd38 	.word	0x0801bd38

08017064 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b08e      	sub	sp, #56	; 0x38
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	685b      	ldr	r3, [r3, #4]
 8017070:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8017072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017074:	781b      	ldrb	r3, [r3, #0]
 8017076:	f003 030f 	and.w	r3, r3, #15
 801707a:	b2db      	uxtb	r3, r3
 801707c:	009b      	lsls	r3, r3, #2
 801707e:	b2db      	uxtb	r3, r3
 8017080:	2b14      	cmp	r3, #20
 8017082:	f040 8171 	bne.w	8017368 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8017086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017088:	88db      	ldrh	r3, [r3, #6]
 801708a:	b29b      	uxth	r3, r3
 801708c:	4618      	mov	r0, r3
 801708e:	f7f3 fd0f 	bl	800aab0 <lwip_htons>
 8017092:	4603      	mov	r3, r0
 8017094:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017098:	b29b      	uxth	r3, r3
 801709a:	00db      	lsls	r3, r3, #3
 801709c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170a0:	885b      	ldrh	r3, [r3, #2]
 80170a2:	b29b      	uxth	r3, r3
 80170a4:	4618      	mov	r0, r3
 80170a6:	f7f3 fd03 	bl	800aab0 <lwip_htons>
 80170aa:	4603      	mov	r3, r0
 80170ac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80170ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80170b0:	781b      	ldrb	r3, [r3, #0]
 80170b2:	f003 030f 	and.w	r3, r3, #15
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	009b      	lsls	r3, r3, #2
 80170ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80170be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80170c2:	b29b      	uxth	r3, r3
 80170c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80170c6:	429a      	cmp	r2, r3
 80170c8:	f0c0 8150 	bcc.w	801736c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80170cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80170d0:	b29b      	uxth	r3, r3
 80170d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80170d4:	1ad3      	subs	r3, r2, r3
 80170d6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f7f5 f9ab 	bl	800c434 <pbuf_clen>
 80170de:	4603      	mov	r3, r0
 80170e0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80170e2:	4b8c      	ldr	r3, [pc, #560]	; (8017314 <ip4_reass+0x2b0>)
 80170e4:	881b      	ldrh	r3, [r3, #0]
 80170e6:	461a      	mov	r2, r3
 80170e8:	8c3b      	ldrh	r3, [r7, #32]
 80170ea:	4413      	add	r3, r2
 80170ec:	2b0a      	cmp	r3, #10
 80170ee:	dd10      	ble.n	8017112 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80170f0:	8c3b      	ldrh	r3, [r7, #32]
 80170f2:	4619      	mov	r1, r3
 80170f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80170f6:	f7ff fd81 	bl	8016bfc <ip_reass_remove_oldest_datagram>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	f000 8137 	beq.w	8017370 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017102:	4b84      	ldr	r3, [pc, #528]	; (8017314 <ip4_reass+0x2b0>)
 8017104:	881b      	ldrh	r3, [r3, #0]
 8017106:	461a      	mov	r2, r3
 8017108:	8c3b      	ldrh	r3, [r7, #32]
 801710a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801710c:	2b0a      	cmp	r3, #10
 801710e:	f300 812f 	bgt.w	8017370 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017112:	4b81      	ldr	r3, [pc, #516]	; (8017318 <ip4_reass+0x2b4>)
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	633b      	str	r3, [r7, #48]	; 0x30
 8017118:	e015      	b.n	8017146 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801711c:	695a      	ldr	r2, [r3, #20]
 801711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017120:	68db      	ldr	r3, [r3, #12]
 8017122:	429a      	cmp	r2, r3
 8017124:	d10c      	bne.n	8017140 <ip4_reass+0xdc>
 8017126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017128:	699a      	ldr	r2, [r3, #24]
 801712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801712c:	691b      	ldr	r3, [r3, #16]
 801712e:	429a      	cmp	r2, r3
 8017130:	d106      	bne.n	8017140 <ip4_reass+0xdc>
 8017132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017134:	899a      	ldrh	r2, [r3, #12]
 8017136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017138:	889b      	ldrh	r3, [r3, #4]
 801713a:	b29b      	uxth	r3, r3
 801713c:	429a      	cmp	r2, r3
 801713e:	d006      	beq.n	801714e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	633b      	str	r3, [r7, #48]	; 0x30
 8017146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017148:	2b00      	cmp	r3, #0
 801714a:	d1e6      	bne.n	801711a <ip4_reass+0xb6>
 801714c:	e000      	b.n	8017150 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801714e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8017150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017152:	2b00      	cmp	r3, #0
 8017154:	d109      	bne.n	801716a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8017156:	8c3b      	ldrh	r3, [r7, #32]
 8017158:	4619      	mov	r1, r3
 801715a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801715c:	f7ff fdb0 	bl	8016cc0 <ip_reass_enqueue_new_datagram>
 8017160:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8017162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017164:	2b00      	cmp	r3, #0
 8017166:	d11c      	bne.n	80171a2 <ip4_reass+0x13e>
      goto nullreturn;
 8017168:	e105      	b.n	8017376 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801716a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801716c:	88db      	ldrh	r3, [r3, #6]
 801716e:	b29b      	uxth	r3, r3
 8017170:	4618      	mov	r0, r3
 8017172:	f7f3 fc9d 	bl	800aab0 <lwip_htons>
 8017176:	4603      	mov	r3, r0
 8017178:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801717c:	2b00      	cmp	r3, #0
 801717e:	d110      	bne.n	80171a2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8017180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017182:	89db      	ldrh	r3, [r3, #14]
 8017184:	4618      	mov	r0, r3
 8017186:	f7f3 fc93 	bl	800aab0 <lwip_htons>
 801718a:	4603      	mov	r3, r0
 801718c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8017190:	2b00      	cmp	r3, #0
 8017192:	d006      	beq.n	80171a2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8017194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017196:	3308      	adds	r3, #8
 8017198:	2214      	movs	r2, #20
 801719a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801719c:	4618      	mov	r0, r3
 801719e:	f000 ff03 	bl	8017fa8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80171a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a4:	88db      	ldrh	r3, [r3, #6]
 80171a6:	b29b      	uxth	r3, r3
 80171a8:	f003 0320 	and.w	r3, r3, #32
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	bf0c      	ite	eq
 80171b0:	2301      	moveq	r3, #1
 80171b2:	2300      	movne	r3, #0
 80171b4:	b2db      	uxtb	r3, r3
 80171b6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d00e      	beq.n	80171dc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80171be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80171c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80171c2:	4413      	add	r3, r2
 80171c4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80171c6:	8b7a      	ldrh	r2, [r7, #26]
 80171c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80171ca:	429a      	cmp	r2, r3
 80171cc:	f0c0 80a0 	bcc.w	8017310 <ip4_reass+0x2ac>
 80171d0:	8b7b      	ldrh	r3, [r7, #26]
 80171d2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80171d6:	4293      	cmp	r3, r2
 80171d8:	f200 809a 	bhi.w	8017310 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80171dc:	69fa      	ldr	r2, [r7, #28]
 80171de:	6879      	ldr	r1, [r7, #4]
 80171e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80171e2:	f7ff fdd5 	bl	8016d90 <ip_reass_chain_frag_into_datagram_and_validate>
 80171e6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80171e8:	697b      	ldr	r3, [r7, #20]
 80171ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ee:	f000 809b 	beq.w	8017328 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80171f2:	4b48      	ldr	r3, [pc, #288]	; (8017314 <ip4_reass+0x2b0>)
 80171f4:	881a      	ldrh	r2, [r3, #0]
 80171f6:	8c3b      	ldrh	r3, [r7, #32]
 80171f8:	4413      	add	r3, r2
 80171fa:	b29a      	uxth	r2, r3
 80171fc:	4b45      	ldr	r3, [pc, #276]	; (8017314 <ip4_reass+0x2b0>)
 80171fe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017200:	69fb      	ldr	r3, [r7, #28]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d00d      	beq.n	8017222 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017206:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017208:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801720a:	4413      	add	r3, r2
 801720c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017210:	8a7a      	ldrh	r2, [r7, #18]
 8017212:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017216:	7f9b      	ldrb	r3, [r3, #30]
 8017218:	f043 0301 	orr.w	r3, r3, #1
 801721c:	b2da      	uxtb	r2, r3
 801721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017220:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	2b01      	cmp	r3, #1
 8017226:	d171      	bne.n	801730c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801722a:	8b9b      	ldrh	r3, [r3, #28]
 801722c:	3314      	adds	r3, #20
 801722e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017232:	685b      	ldr	r3, [r3, #4]
 8017234:	685b      	ldr	r3, [r3, #4]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801723c:	685b      	ldr	r3, [r3, #4]
 801723e:	685b      	ldr	r3, [r3, #4]
 8017240:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017244:	3308      	adds	r3, #8
 8017246:	2214      	movs	r2, #20
 8017248:	4619      	mov	r1, r3
 801724a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801724c:	f000 feac 	bl	8017fa8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8017250:	8a3b      	ldrh	r3, [r7, #16]
 8017252:	4618      	mov	r0, r3
 8017254:	f7f3 fc2c 	bl	800aab0 <lwip_htons>
 8017258:	4603      	mov	r3, r0
 801725a:	461a      	mov	r2, r3
 801725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801725e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8017260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017262:	2200      	movs	r2, #0
 8017264:	719a      	strb	r2, [r3, #6]
 8017266:	2200      	movs	r2, #0
 8017268:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801726c:	2200      	movs	r2, #0
 801726e:	729a      	strb	r2, [r3, #10]
 8017270:	2200      	movs	r2, #0
 8017272:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8017274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017276:	685b      	ldr	r3, [r3, #4]
 8017278:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801727a:	e00d      	b.n	8017298 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801727c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801727e:	685b      	ldr	r3, [r3, #4]
 8017280:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8017282:	2114      	movs	r1, #20
 8017284:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017286:	f7f4 ffc1 	bl	800c20c <pbuf_remove_header>
      pbuf_cat(p, r);
 801728a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f7f5 f911 	bl	800c4b4 <pbuf_cat>
      r = iprh->next_pbuf;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	681b      	ldr	r3, [r3, #0]
 8017296:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8017298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801729a:	2b00      	cmp	r3, #0
 801729c:	d1ee      	bne.n	801727c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801729e:	4b1e      	ldr	r3, [pc, #120]	; (8017318 <ip4_reass+0x2b4>)
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172a4:	429a      	cmp	r2, r3
 80172a6:	d102      	bne.n	80172ae <ip4_reass+0x24a>
      ipr_prev = NULL;
 80172a8:	2300      	movs	r3, #0
 80172aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172ac:	e010      	b.n	80172d0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80172ae:	4b1a      	ldr	r3, [pc, #104]	; (8017318 <ip4_reass+0x2b4>)
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172b4:	e007      	b.n	80172c6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80172b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172b8:	681b      	ldr	r3, [r3, #0]
 80172ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80172bc:	429a      	cmp	r2, r3
 80172be:	d006      	beq.n	80172ce <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80172c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80172c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	d1f4      	bne.n	80172b6 <ip4_reass+0x252>
 80172cc:	e000      	b.n	80172d0 <ip4_reass+0x26c>
          break;
 80172ce:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80172d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80172d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80172d4:	f7ff fd2e 	bl	8016d34 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80172d8:	6878      	ldr	r0, [r7, #4]
 80172da:	f7f5 f8ab 	bl	800c434 <pbuf_clen>
 80172de:	4603      	mov	r3, r0
 80172e0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80172e2:	4b0c      	ldr	r3, [pc, #48]	; (8017314 <ip4_reass+0x2b0>)
 80172e4:	881b      	ldrh	r3, [r3, #0]
 80172e6:	8c3a      	ldrh	r2, [r7, #32]
 80172e8:	429a      	cmp	r2, r3
 80172ea:	d906      	bls.n	80172fa <ip4_reass+0x296>
 80172ec:	4b0b      	ldr	r3, [pc, #44]	; (801731c <ip4_reass+0x2b8>)
 80172ee:	f240 229b 	movw	r2, #667	; 0x29b
 80172f2:	490b      	ldr	r1, [pc, #44]	; (8017320 <ip4_reass+0x2bc>)
 80172f4:	480b      	ldr	r0, [pc, #44]	; (8017324 <ip4_reass+0x2c0>)
 80172f6:	f000 fd59 	bl	8017dac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80172fa:	4b06      	ldr	r3, [pc, #24]	; (8017314 <ip4_reass+0x2b0>)
 80172fc:	881a      	ldrh	r2, [r3, #0]
 80172fe:	8c3b      	ldrh	r3, [r7, #32]
 8017300:	1ad3      	subs	r3, r2, r3
 8017302:	b29a      	uxth	r2, r3
 8017304:	4b03      	ldr	r3, [pc, #12]	; (8017314 <ip4_reass+0x2b0>)
 8017306:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	e038      	b.n	801737e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801730c:	2300      	movs	r3, #0
 801730e:	e036      	b.n	801737e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017310:	bf00      	nop
 8017312:	e00a      	b.n	801732a <ip4_reass+0x2c6>
 8017314:	2000cfc4 	.word	0x2000cfc4
 8017318:	2000cfc0 	.word	0x2000cfc0
 801731c:	0801bbec 	.word	0x0801bbec
 8017320:	0801bd5c 	.word	0x0801bd5c
 8017324:	0801bc34 	.word	0x0801bc34
    goto nullreturn_ipr;
 8017328:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732c:	2b00      	cmp	r3, #0
 801732e:	d106      	bne.n	801733e <ip4_reass+0x2da>
 8017330:	4b15      	ldr	r3, [pc, #84]	; (8017388 <ip4_reass+0x324>)
 8017332:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017336:	4915      	ldr	r1, [pc, #84]	; (801738c <ip4_reass+0x328>)
 8017338:	4815      	ldr	r0, [pc, #84]	; (8017390 <ip4_reass+0x32c>)
 801733a:	f000 fd37 	bl	8017dac <iprintf>
  if (ipr->p == NULL) {
 801733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	2b00      	cmp	r3, #0
 8017344:	d116      	bne.n	8017374 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017346:	4b13      	ldr	r3, [pc, #76]	; (8017394 <ip4_reass+0x330>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801734c:	429a      	cmp	r2, r3
 801734e:	d006      	beq.n	801735e <ip4_reass+0x2fa>
 8017350:	4b0d      	ldr	r3, [pc, #52]	; (8017388 <ip4_reass+0x324>)
 8017352:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017356:	4910      	ldr	r1, [pc, #64]	; (8017398 <ip4_reass+0x334>)
 8017358:	480d      	ldr	r0, [pc, #52]	; (8017390 <ip4_reass+0x32c>)
 801735a:	f000 fd27 	bl	8017dac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801735e:	2100      	movs	r1, #0
 8017360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017362:	f7ff fce7 	bl	8016d34 <ip_reass_dequeue_datagram>
 8017366:	e006      	b.n	8017376 <ip4_reass+0x312>
    goto nullreturn;
 8017368:	bf00      	nop
 801736a:	e004      	b.n	8017376 <ip4_reass+0x312>
    goto nullreturn;
 801736c:	bf00      	nop
 801736e:	e002      	b.n	8017376 <ip4_reass+0x312>
      goto nullreturn;
 8017370:	bf00      	nop
 8017372:	e000      	b.n	8017376 <ip4_reass+0x312>
  }

nullreturn:
 8017374:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017376:	6878      	ldr	r0, [r7, #4]
 8017378:	f7f4 ffce 	bl	800c318 <pbuf_free>
  return NULL;
 801737c:	2300      	movs	r3, #0
}
 801737e:	4618      	mov	r0, r3
 8017380:	3738      	adds	r7, #56	; 0x38
 8017382:	46bd      	mov	sp, r7
 8017384:	bd80      	pop	{r7, pc}
 8017386:	bf00      	nop
 8017388:	0801bbec 	.word	0x0801bbec
 801738c:	0801bd78 	.word	0x0801bd78
 8017390:	0801bc34 	.word	0x0801bc34
 8017394:	2000cfc0 	.word	0x2000cfc0
 8017398:	0801bd84 	.word	0x0801bd84

0801739c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80173a0:	2005      	movs	r0, #5
 80173a2:	f7f4 f893 	bl	800b4cc <memp_malloc>
 80173a6:	4603      	mov	r3, r0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	bd80      	pop	{r7, pc}

080173ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d106      	bne.n	80173c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80173ba:	4b07      	ldr	r3, [pc, #28]	; (80173d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80173bc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80173c0:	4906      	ldr	r1, [pc, #24]	; (80173dc <ip_frag_free_pbuf_custom_ref+0x30>)
 80173c2:	4807      	ldr	r0, [pc, #28]	; (80173e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80173c4:	f000 fcf2 	bl	8017dac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	2005      	movs	r0, #5
 80173cc:	f7f4 f8f4 	bl	800b5b8 <memp_free>
}
 80173d0:	bf00      	nop
 80173d2:	3708      	adds	r7, #8
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	0801bbec 	.word	0x0801bbec
 80173dc:	0801bda4 	.word	0x0801bda4
 80173e0:	0801bc34 	.word	0x0801bc34

080173e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b084      	sub	sp, #16
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d106      	bne.n	8017404 <ipfrag_free_pbuf_custom+0x20>
 80173f6:	4b11      	ldr	r3, [pc, #68]	; (801743c <ipfrag_free_pbuf_custom+0x58>)
 80173f8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80173fc:	4910      	ldr	r1, [pc, #64]	; (8017440 <ipfrag_free_pbuf_custom+0x5c>)
 80173fe:	4811      	ldr	r0, [pc, #68]	; (8017444 <ipfrag_free_pbuf_custom+0x60>)
 8017400:	f000 fcd4 	bl	8017dac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017404:	68fa      	ldr	r2, [r7, #12]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	429a      	cmp	r2, r3
 801740a:	d006      	beq.n	801741a <ipfrag_free_pbuf_custom+0x36>
 801740c:	4b0b      	ldr	r3, [pc, #44]	; (801743c <ipfrag_free_pbuf_custom+0x58>)
 801740e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017412:	490d      	ldr	r1, [pc, #52]	; (8017448 <ipfrag_free_pbuf_custom+0x64>)
 8017414:	480b      	ldr	r0, [pc, #44]	; (8017444 <ipfrag_free_pbuf_custom+0x60>)
 8017416:	f000 fcc9 	bl	8017dac <iprintf>
  if (pcr->original != NULL) {
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	695b      	ldr	r3, [r3, #20]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d004      	beq.n	801742c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	695b      	ldr	r3, [r3, #20]
 8017426:	4618      	mov	r0, r3
 8017428:	f7f4 ff76 	bl	800c318 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801742c:	68f8      	ldr	r0, [r7, #12]
 801742e:	f7ff ffbd 	bl	80173ac <ip_frag_free_pbuf_custom_ref>
}
 8017432:	bf00      	nop
 8017434:	3710      	adds	r7, #16
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}
 801743a:	bf00      	nop
 801743c:	0801bbec 	.word	0x0801bbec
 8017440:	0801bdb0 	.word	0x0801bdb0
 8017444:	0801bc34 	.word	0x0801bc34
 8017448:	0801bdbc 	.word	0x0801bdbc

0801744c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b094      	sub	sp, #80	; 0x50
 8017450:	af02      	add	r7, sp, #8
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017458:	2300      	movs	r3, #0
 801745a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017462:	3b14      	subs	r3, #20
 8017464:	2b00      	cmp	r3, #0
 8017466:	da00      	bge.n	801746a <ip4_frag+0x1e>
 8017468:	3307      	adds	r3, #7
 801746a:	10db      	asrs	r3, r3, #3
 801746c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801746e:	2314      	movs	r3, #20
 8017470:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017472:	68fb      	ldr	r3, [r7, #12]
 8017474:	685b      	ldr	r3, [r3, #4]
 8017476:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801747a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801747c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801747e:	781b      	ldrb	r3, [r3, #0]
 8017480:	f003 030f 	and.w	r3, r3, #15
 8017484:	b2db      	uxtb	r3, r3
 8017486:	009b      	lsls	r3, r3, #2
 8017488:	b2db      	uxtb	r3, r3
 801748a:	2b14      	cmp	r3, #20
 801748c:	d002      	beq.n	8017494 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801748e:	f06f 0305 	mvn.w	r3, #5
 8017492:	e110      	b.n	80176b6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017494:	68fb      	ldr	r3, [r7, #12]
 8017496:	895b      	ldrh	r3, [r3, #10]
 8017498:	2b13      	cmp	r3, #19
 801749a:	d809      	bhi.n	80174b0 <ip4_frag+0x64>
 801749c:	4b88      	ldr	r3, [pc, #544]	; (80176c0 <ip4_frag+0x274>)
 801749e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80174a2:	4988      	ldr	r1, [pc, #544]	; (80176c4 <ip4_frag+0x278>)
 80174a4:	4888      	ldr	r0, [pc, #544]	; (80176c8 <ip4_frag+0x27c>)
 80174a6:	f000 fc81 	bl	8017dac <iprintf>
 80174aa:	f06f 0305 	mvn.w	r3, #5
 80174ae:	e102      	b.n	80176b6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80174b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80174b2:	88db      	ldrh	r3, [r3, #6]
 80174b4:	b29b      	uxth	r3, r3
 80174b6:	4618      	mov	r0, r3
 80174b8:	f7f3 fafa 	bl	800aab0 <lwip_htons>
 80174bc:	4603      	mov	r3, r0
 80174be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80174c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80174ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80174cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	891b      	ldrh	r3, [r3, #8]
 80174d6:	3b14      	subs	r3, #20
 80174d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80174dc:	e0e1      	b.n	80176a2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80174de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174e0:	00db      	lsls	r3, r3, #3
 80174e2:	b29b      	uxth	r3, r3
 80174e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80174e8:	4293      	cmp	r3, r2
 80174ea:	bf28      	it	cs
 80174ec:	4613      	movcs	r3, r2
 80174ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80174f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174f4:	2114      	movs	r1, #20
 80174f6:	200e      	movs	r0, #14
 80174f8:	f7f4 fc2a 	bl	800bd50 <pbuf_alloc>
 80174fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80174fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017500:	2b00      	cmp	r3, #0
 8017502:	f000 80d5 	beq.w	80176b0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017508:	895b      	ldrh	r3, [r3, #10]
 801750a:	2b13      	cmp	r3, #19
 801750c:	d806      	bhi.n	801751c <ip4_frag+0xd0>
 801750e:	4b6c      	ldr	r3, [pc, #432]	; (80176c0 <ip4_frag+0x274>)
 8017510:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017514:	496d      	ldr	r1, [pc, #436]	; (80176cc <ip4_frag+0x280>)
 8017516:	486c      	ldr	r0, [pc, #432]	; (80176c8 <ip4_frag+0x27c>)
 8017518:	f000 fc48 	bl	8017dac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801751c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	2214      	movs	r2, #20
 8017522:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017524:	4618      	mov	r0, r3
 8017526:	f000 fd3f 	bl	8017fa8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801752c:	685b      	ldr	r3, [r3, #4]
 801752e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017530:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017532:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017536:	e064      	b.n	8017602 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017538:	68fb      	ldr	r3, [r7, #12]
 801753a:	895a      	ldrh	r2, [r3, #10]
 801753c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801753e:	1ad3      	subs	r3, r2, r3
 8017540:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	895b      	ldrh	r3, [r3, #10]
 8017546:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017548:	429a      	cmp	r2, r3
 801754a:	d906      	bls.n	801755a <ip4_frag+0x10e>
 801754c:	4b5c      	ldr	r3, [pc, #368]	; (80176c0 <ip4_frag+0x274>)
 801754e:	f240 322d 	movw	r2, #813	; 0x32d
 8017552:	495f      	ldr	r1, [pc, #380]	; (80176d0 <ip4_frag+0x284>)
 8017554:	485c      	ldr	r0, [pc, #368]	; (80176c8 <ip4_frag+0x27c>)
 8017556:	f000 fc29 	bl	8017dac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801755a:	8bfa      	ldrh	r2, [r7, #30]
 801755c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017560:	4293      	cmp	r3, r2
 8017562:	bf28      	it	cs
 8017564:	4613      	movcs	r3, r2
 8017566:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801756a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801756e:	2b00      	cmp	r3, #0
 8017570:	d105      	bne.n	801757e <ip4_frag+0x132>
        poff = 0;
 8017572:	2300      	movs	r3, #0
 8017574:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017576:	68fb      	ldr	r3, [r7, #12]
 8017578:	681b      	ldr	r3, [r3, #0]
 801757a:	60fb      	str	r3, [r7, #12]
        continue;
 801757c:	e041      	b.n	8017602 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801757e:	f7ff ff0d 	bl	801739c <ip_frag_alloc_pbuf_custom_ref>
 8017582:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017584:	69bb      	ldr	r3, [r7, #24]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d103      	bne.n	8017592 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801758a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801758c:	f7f4 fec4 	bl	800c318 <pbuf_free>
        goto memerr;
 8017590:	e08f      	b.n	80176b2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017592:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017594:	68fb      	ldr	r3, [r7, #12]
 8017596:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017598:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801759a:	4413      	add	r3, r2
 801759c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80175a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80175a4:	9201      	str	r2, [sp, #4]
 80175a6:	9300      	str	r3, [sp, #0]
 80175a8:	4603      	mov	r3, r0
 80175aa:	2241      	movs	r2, #65	; 0x41
 80175ac:	2000      	movs	r0, #0
 80175ae:	f7f4 fcf9 	bl	800bfa4 <pbuf_alloced_custom>
 80175b2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d106      	bne.n	80175c8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80175ba:	69b8      	ldr	r0, [r7, #24]
 80175bc:	f7ff fef6 	bl	80173ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80175c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175c2:	f7f4 fea9 	bl	800c318 <pbuf_free>
        goto memerr;
 80175c6:	e074      	b.n	80176b2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80175c8:	68f8      	ldr	r0, [r7, #12]
 80175ca:	f7f4 ff4b 	bl	800c464 <pbuf_ref>
      pcr->original = p;
 80175ce:	69bb      	ldr	r3, [r7, #24]
 80175d0:	68fa      	ldr	r2, [r7, #12]
 80175d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80175d4:	69bb      	ldr	r3, [r7, #24]
 80175d6:	4a3f      	ldr	r2, [pc, #252]	; (80176d4 <ip4_frag+0x288>)
 80175d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80175da:	6979      	ldr	r1, [r7, #20]
 80175dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80175de:	f7f4 ff69 	bl	800c4b4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80175e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80175e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80175ea:	1ad3      	subs	r3, r2, r3
 80175ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80175f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	d004      	beq.n	8017602 <ip4_frag+0x1b6>
        poff = 0;
 80175f8:	2300      	movs	r3, #0
 80175fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017602:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017606:	2b00      	cmp	r3, #0
 8017608:	d196      	bne.n	8017538 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801760a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801760c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017610:	4413      	add	r3, r2
 8017612:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017614:	68bb      	ldr	r3, [r7, #8]
 8017616:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017618:	f1a3 0213 	sub.w	r2, r3, #19
 801761c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017620:	429a      	cmp	r2, r3
 8017622:	bfcc      	ite	gt
 8017624:	2301      	movgt	r3, #1
 8017626:	2300      	movle	r3, #0
 8017628:	b2db      	uxtb	r3, r3
 801762a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801762c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017634:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017636:	6a3b      	ldr	r3, [r7, #32]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d002      	beq.n	8017642 <ip4_frag+0x1f6>
 801763c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801763e:	2b00      	cmp	r3, #0
 8017640:	d003      	beq.n	801764a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017642:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017644:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017648:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801764a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801764c:	4618      	mov	r0, r3
 801764e:	f7f3 fa2f 	bl	800aab0 <lwip_htons>
 8017652:	4603      	mov	r3, r0
 8017654:	461a      	mov	r2, r3
 8017656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017658:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801765a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801765c:	3314      	adds	r3, #20
 801765e:	b29b      	uxth	r3, r3
 8017660:	4618      	mov	r0, r3
 8017662:	f7f3 fa25 	bl	800aab0 <lwip_htons>
 8017666:	4603      	mov	r3, r0
 8017668:	461a      	mov	r2, r3
 801766a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801766c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017670:	2200      	movs	r2, #0
 8017672:	729a      	strb	r2, [r3, #10]
 8017674:	2200      	movs	r2, #0
 8017676:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017678:	68bb      	ldr	r3, [r7, #8]
 801767a:	695b      	ldr	r3, [r3, #20]
 801767c:	687a      	ldr	r2, [r7, #4]
 801767e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017680:	68b8      	ldr	r0, [r7, #8]
 8017682:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017684:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017686:	f7f4 fe47 	bl	800c318 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801768a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801768e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017690:	1ad3      	subs	r3, r2, r3
 8017692:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017696:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801769a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801769c:	4413      	add	r3, r2
 801769e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80176a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	f47f af19 	bne.w	80174de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80176ac:	2300      	movs	r3, #0
 80176ae:	e002      	b.n	80176b6 <ip4_frag+0x26a>
      goto memerr;
 80176b0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80176b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3748      	adds	r7, #72	; 0x48
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	0801bbec 	.word	0x0801bbec
 80176c4:	0801bdc8 	.word	0x0801bdc8
 80176c8:	0801bc34 	.word	0x0801bc34
 80176cc:	0801bde4 	.word	0x0801bde4
 80176d0:	0801be04 	.word	0x0801be04
 80176d4:	080173e5 	.word	0x080173e5

080176d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b086      	sub	sp, #24
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
 80176e0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80176e2:	230e      	movs	r3, #14
 80176e4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	895b      	ldrh	r3, [r3, #10]
 80176ea:	2b0e      	cmp	r3, #14
 80176ec:	d96e      	bls.n	80177cc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	7bdb      	ldrb	r3, [r3, #15]
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d106      	bne.n	8017704 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80176f6:	683b      	ldr	r3, [r7, #0]
 80176f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80176fc:	3301      	adds	r3, #1
 80176fe:	b2da      	uxtb	r2, r3
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	685b      	ldr	r3, [r3, #4]
 8017708:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801770a:	693b      	ldr	r3, [r7, #16]
 801770c:	7b1a      	ldrb	r2, [r3, #12]
 801770e:	7b5b      	ldrb	r3, [r3, #13]
 8017710:	021b      	lsls	r3, r3, #8
 8017712:	4313      	orrs	r3, r2
 8017714:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	781b      	ldrb	r3, [r3, #0]
 801771a:	f003 0301 	and.w	r3, r3, #1
 801771e:	2b00      	cmp	r3, #0
 8017720:	d023      	beq.n	801776a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017722:	693b      	ldr	r3, [r7, #16]
 8017724:	781b      	ldrb	r3, [r3, #0]
 8017726:	2b01      	cmp	r3, #1
 8017728:	d10f      	bne.n	801774a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801772a:	693b      	ldr	r3, [r7, #16]
 801772c:	785b      	ldrb	r3, [r3, #1]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d11b      	bne.n	801776a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017736:	2b5e      	cmp	r3, #94	; 0x5e
 8017738:	d117      	bne.n	801776a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	7b5b      	ldrb	r3, [r3, #13]
 801773e:	f043 0310 	orr.w	r3, r3, #16
 8017742:	b2da      	uxtb	r2, r3
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	735a      	strb	r2, [r3, #13]
 8017748:	e00f      	b.n	801776a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801774a:	693b      	ldr	r3, [r7, #16]
 801774c:	2206      	movs	r2, #6
 801774e:	4928      	ldr	r1, [pc, #160]	; (80177f0 <ethernet_input+0x118>)
 8017750:	4618      	mov	r0, r3
 8017752:	f000 fb80 	bl	8017e56 <memcmp>
 8017756:	4603      	mov	r3, r0
 8017758:	2b00      	cmp	r3, #0
 801775a:	d106      	bne.n	801776a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	7b5b      	ldrb	r3, [r3, #13]
 8017760:	f043 0308 	orr.w	r3, r3, #8
 8017764:	b2da      	uxtb	r2, r3
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801776a:	89fb      	ldrh	r3, [r7, #14]
 801776c:	2b08      	cmp	r3, #8
 801776e:	d003      	beq.n	8017778 <ethernet_input+0xa0>
 8017770:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017774:	d014      	beq.n	80177a0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017776:	e032      	b.n	80177de <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017778:	683b      	ldr	r3, [r7, #0]
 801777a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801777e:	f003 0308 	and.w	r3, r3, #8
 8017782:	2b00      	cmp	r3, #0
 8017784:	d024      	beq.n	80177d0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017786:	8afb      	ldrh	r3, [r7, #22]
 8017788:	4619      	mov	r1, r3
 801778a:	6878      	ldr	r0, [r7, #4]
 801778c:	f7f4 fd3e 	bl	800c20c <pbuf_remove_header>
 8017790:	4603      	mov	r3, r0
 8017792:	2b00      	cmp	r3, #0
 8017794:	d11e      	bne.n	80177d4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017796:	6839      	ldr	r1, [r7, #0]
 8017798:	6878      	ldr	r0, [r7, #4]
 801779a:	f7fe ff03 	bl	80165a4 <ip4_input>
      break;
 801779e:	e013      	b.n	80177c8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80177a0:	683b      	ldr	r3, [r7, #0]
 80177a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80177a6:	f003 0308 	and.w	r3, r3, #8
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d014      	beq.n	80177d8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80177ae:	8afb      	ldrh	r3, [r7, #22]
 80177b0:	4619      	mov	r1, r3
 80177b2:	6878      	ldr	r0, [r7, #4]
 80177b4:	f7f4 fd2a 	bl	800c20c <pbuf_remove_header>
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d10e      	bne.n	80177dc <ethernet_input+0x104>
        etharp_input(p, netif);
 80177be:	6839      	ldr	r1, [r7, #0]
 80177c0:	6878      	ldr	r0, [r7, #4]
 80177c2:	f7fe f89f 	bl	8015904 <etharp_input>
      break;
 80177c6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80177c8:	2300      	movs	r3, #0
 80177ca:	e00c      	b.n	80177e6 <ethernet_input+0x10e>
    goto free_and_return;
 80177cc:	bf00      	nop
 80177ce:	e006      	b.n	80177de <ethernet_input+0x106>
        goto free_and_return;
 80177d0:	bf00      	nop
 80177d2:	e004      	b.n	80177de <ethernet_input+0x106>
        goto free_and_return;
 80177d4:	bf00      	nop
 80177d6:	e002      	b.n	80177de <ethernet_input+0x106>
        goto free_and_return;
 80177d8:	bf00      	nop
 80177da:	e000      	b.n	80177de <ethernet_input+0x106>
        goto free_and_return;
 80177dc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80177de:	6878      	ldr	r0, [r7, #4]
 80177e0:	f7f4 fd9a 	bl	800c318 <pbuf_free>
  return ERR_OK;
 80177e4:	2300      	movs	r3, #0
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3718      	adds	r7, #24
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}
 80177ee:	bf00      	nop
 80177f0:	0801e660 	.word	0x0801e660

080177f4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80177f4:	b580      	push	{r7, lr}
 80177f6:	b086      	sub	sp, #24
 80177f8:	af00      	add	r7, sp, #0
 80177fa:	60f8      	str	r0, [r7, #12]
 80177fc:	60b9      	str	r1, [r7, #8]
 80177fe:	607a      	str	r2, [r7, #4]
 8017800:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017802:	8c3b      	ldrh	r3, [r7, #32]
 8017804:	4618      	mov	r0, r3
 8017806:	f7f3 f953 	bl	800aab0 <lwip_htons>
 801780a:	4603      	mov	r3, r0
 801780c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801780e:	210e      	movs	r1, #14
 8017810:	68b8      	ldr	r0, [r7, #8]
 8017812:	f7f4 fceb 	bl	800c1ec <pbuf_add_header>
 8017816:	4603      	mov	r3, r0
 8017818:	2b00      	cmp	r3, #0
 801781a:	d125      	bne.n	8017868 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801781c:	68bb      	ldr	r3, [r7, #8]
 801781e:	685b      	ldr	r3, [r3, #4]
 8017820:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017822:	693b      	ldr	r3, [r7, #16]
 8017824:	8afa      	ldrh	r2, [r7, #22]
 8017826:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017828:	693b      	ldr	r3, [r7, #16]
 801782a:	2206      	movs	r2, #6
 801782c:	6839      	ldr	r1, [r7, #0]
 801782e:	4618      	mov	r0, r3
 8017830:	f000 fbba 	bl	8017fa8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017834:	693b      	ldr	r3, [r7, #16]
 8017836:	3306      	adds	r3, #6
 8017838:	2206      	movs	r2, #6
 801783a:	6879      	ldr	r1, [r7, #4]
 801783c:	4618      	mov	r0, r3
 801783e:	f000 fbb3 	bl	8017fa8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017848:	2b06      	cmp	r3, #6
 801784a:	d006      	beq.n	801785a <ethernet_output+0x66>
 801784c:	4b0a      	ldr	r3, [pc, #40]	; (8017878 <ethernet_output+0x84>)
 801784e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017852:	490a      	ldr	r1, [pc, #40]	; (801787c <ethernet_output+0x88>)
 8017854:	480a      	ldr	r0, [pc, #40]	; (8017880 <ethernet_output+0x8c>)
 8017856:	f000 faa9 	bl	8017dac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	699b      	ldr	r3, [r3, #24]
 801785e:	68b9      	ldr	r1, [r7, #8]
 8017860:	68f8      	ldr	r0, [r7, #12]
 8017862:	4798      	blx	r3
 8017864:	4603      	mov	r3, r0
 8017866:	e002      	b.n	801786e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017868:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801786a:	f06f 0301 	mvn.w	r3, #1
}
 801786e:	4618      	mov	r0, r3
 8017870:	3718      	adds	r7, #24
 8017872:	46bd      	mov	sp, r7
 8017874:	bd80      	pop	{r7, pc}
 8017876:	bf00      	nop
 8017878:	0801be14 	.word	0x0801be14
 801787c:	0801be4c 	.word	0x0801be4c
 8017880:	0801be80 	.word	0x0801be80

08017884 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b086      	sub	sp, #24
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801788e:	683b      	ldr	r3, [r7, #0]
 8017890:	60bb      	str	r3, [r7, #8]
 8017892:	2304      	movs	r3, #4
 8017894:	60fb      	str	r3, [r7, #12]
 8017896:	2300      	movs	r3, #0
 8017898:	613b      	str	r3, [r7, #16]
 801789a:	2300      	movs	r3, #0
 801789c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801789e:	f107 0308 	add.w	r3, r7, #8
 80178a2:	2100      	movs	r1, #0
 80178a4:	4618      	mov	r0, r3
 80178a6:	f7ee fefb 	bl	80066a0 <osMessageCreate>
 80178aa:	4602      	mov	r2, r0
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d102      	bne.n	80178be <sys_mbox_new+0x3a>
    return ERR_MEM;
 80178b8:	f04f 33ff 	mov.w	r3, #4294967295
 80178bc:	e000      	b.n	80178c0 <sys_mbox_new+0x3c>

  return ERR_OK;
 80178be:	2300      	movs	r3, #0
}
 80178c0:	4618      	mov	r0, r3
 80178c2:	3718      	adds	r7, #24
 80178c4:	46bd      	mov	sp, r7
 80178c6:	bd80      	pop	{r7, pc}

080178c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b084      	sub	sp, #16
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	6078      	str	r0, [r7, #4]
 80178d0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80178d2:	687b      	ldr	r3, [r7, #4]
 80178d4:	681b      	ldr	r3, [r3, #0]
 80178d6:	6839      	ldr	r1, [r7, #0]
 80178d8:	2200      	movs	r2, #0
 80178da:	4618      	mov	r0, r3
 80178dc:	f7ee ff08 	bl	80066f0 <osMessagePut>
 80178e0:	4603      	mov	r3, r0
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d102      	bne.n	80178ec <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80178e6:	2300      	movs	r3, #0
 80178e8:	73fb      	strb	r3, [r7, #15]
 80178ea:	e001      	b.n	80178f0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80178ec:	23ff      	movs	r3, #255	; 0xff
 80178ee:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80178f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3710      	adds	r7, #16
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bd80      	pop	{r7, pc}

080178fc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80178fc:	b580      	push	{r7, lr}
 80178fe:	b08c      	sub	sp, #48	; 0x30
 8017900:	af00      	add	r7, sp, #0
 8017902:	61f8      	str	r0, [r7, #28]
 8017904:	61b9      	str	r1, [r7, #24]
 8017906:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8017908:	f7ee fd3a 	bl	8006380 <osKernelSysTick>
 801790c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d017      	beq.n	8017944 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8017914:	69fb      	ldr	r3, [r7, #28]
 8017916:	6819      	ldr	r1, [r3, #0]
 8017918:	f107 0320 	add.w	r3, r7, #32
 801791c:	697a      	ldr	r2, [r7, #20]
 801791e:	4618      	mov	r0, r3
 8017920:	f7ee ff26 	bl	8006770 <osMessageGet>

    if(event.status == osEventMessage)
 8017924:	6a3b      	ldr	r3, [r7, #32]
 8017926:	2b10      	cmp	r3, #16
 8017928:	d109      	bne.n	801793e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801792c:	461a      	mov	r2, r3
 801792e:	69bb      	ldr	r3, [r7, #24]
 8017930:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017932:	f7ee fd25 	bl	8006380 <osKernelSysTick>
 8017936:	4602      	mov	r2, r0
 8017938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801793a:	1ad3      	subs	r3, r2, r3
 801793c:	e019      	b.n	8017972 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801793e:	f04f 33ff 	mov.w	r3, #4294967295
 8017942:	e016      	b.n	8017972 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8017944:	69fb      	ldr	r3, [r7, #28]
 8017946:	6819      	ldr	r1, [r3, #0]
 8017948:	463b      	mov	r3, r7
 801794a:	f04f 32ff 	mov.w	r2, #4294967295
 801794e:	4618      	mov	r0, r3
 8017950:	f7ee ff0e 	bl	8006770 <osMessageGet>
 8017954:	f107 0320 	add.w	r3, r7, #32
 8017958:	463a      	mov	r2, r7
 801795a:	ca07      	ldmia	r2, {r0, r1, r2}
 801795c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017962:	461a      	mov	r2, r3
 8017964:	69bb      	ldr	r3, [r7, #24]
 8017966:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8017968:	f7ee fd0a 	bl	8006380 <osKernelSysTick>
 801796c:	4602      	mov	r2, r0
 801796e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017970:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017972:	4618      	mov	r0, r3
 8017974:	3730      	adds	r7, #48	; 0x30
 8017976:	46bd      	mov	sp, r7
 8017978:	bd80      	pop	{r7, pc}

0801797a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801797a:	b480      	push	{r7}
 801797c:	b083      	sub	sp, #12
 801797e:	af00      	add	r7, sp, #0
 8017980:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	2b00      	cmp	r3, #0
 8017988:	d101      	bne.n	801798e <sys_mbox_valid+0x14>
    return 0;
 801798a:	2300      	movs	r3, #0
 801798c:	e000      	b.n	8017990 <sys_mbox_valid+0x16>
  else
    return 1;
 801798e:	2301      	movs	r3, #1
}
 8017990:	4618      	mov	r0, r3
 8017992:	370c      	adds	r7, #12
 8017994:	46bd      	mov	sp, r7
 8017996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801799a:	4770      	bx	lr

0801799c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801799c:	b580      	push	{r7, lr}
 801799e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 80179a0:	4803      	ldr	r0, [pc, #12]	; (80179b0 <sys_init+0x14>)
 80179a2:	f7ee fd5d 	bl	8006460 <osMutexCreate>
 80179a6:	4603      	mov	r3, r0
 80179a8:	4a02      	ldr	r2, [pc, #8]	; (80179b4 <sys_init+0x18>)
 80179aa:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 80179ac:	bf00      	nop
 80179ae:	bd80      	pop	{r7, pc}
 80179b0:	0801e670 	.word	0x0801e670
 80179b4:	2000cfcc 	.word	0x2000cfcc

080179b8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80179b8:	b580      	push	{r7, lr}
 80179ba:	b084      	sub	sp, #16
 80179bc:	af00      	add	r7, sp, #0
 80179be:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80179c0:	2300      	movs	r3, #0
 80179c2:	60bb      	str	r3, [r7, #8]
 80179c4:	2300      	movs	r3, #0
 80179c6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80179c8:	f107 0308 	add.w	r3, r7, #8
 80179cc:	4618      	mov	r0, r3
 80179ce:	f7ee fd47 	bl	8006460 <osMutexCreate>
 80179d2:	4602      	mov	r2, r0
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	681b      	ldr	r3, [r3, #0]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d102      	bne.n	80179e6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80179e0:	f04f 33ff 	mov.w	r3, #4294967295
 80179e4:	e000      	b.n	80179e8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80179e6:	2300      	movs	r3, #0
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	3710      	adds	r7, #16
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}

080179f0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80179f0:	b580      	push	{r7, lr}
 80179f2:	b082      	sub	sp, #8
 80179f4:	af00      	add	r7, sp, #0
 80179f6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	f04f 31ff 	mov.w	r1, #4294967295
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7ee fd45 	bl	8006490 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8017a06:	bf00      	nop
 8017a08:	3708      	adds	r7, #8
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd80      	pop	{r7, pc}

08017a0e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8017a0e:	b580      	push	{r7, lr}
 8017a10:	b082      	sub	sp, #8
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	4618      	mov	r0, r3
 8017a1c:	f7ee fd86 	bl	800652c <osMutexRelease>
}
 8017a20:	bf00      	nop
 8017a22:	3708      	adds	r7, #8
 8017a24:	46bd      	mov	sp, r7
 8017a26:	bd80      	pop	{r7, pc}

08017a28 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	b08c      	sub	sp, #48	; 0x30
 8017a2c:	af00      	add	r7, sp, #0
 8017a2e:	60f8      	str	r0, [r7, #12]
 8017a30:	60b9      	str	r1, [r7, #8]
 8017a32:	607a      	str	r2, [r7, #4]
 8017a34:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017a36:	f107 0314 	add.w	r3, r7, #20
 8017a3a:	2200      	movs	r2, #0
 8017a3c:	601a      	str	r2, [r3, #0]
 8017a3e:	605a      	str	r2, [r3, #4]
 8017a40:	609a      	str	r2, [r3, #8]
 8017a42:	60da      	str	r2, [r3, #12]
 8017a44:	611a      	str	r2, [r3, #16]
 8017a46:	615a      	str	r2, [r3, #20]
 8017a48:	619a      	str	r2, [r3, #24]
 8017a4a:	68fb      	ldr	r3, [r7, #12]
 8017a4c:	617b      	str	r3, [r7, #20]
 8017a4e:	68bb      	ldr	r3, [r7, #8]
 8017a50:	61bb      	str	r3, [r7, #24]
 8017a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a54:	b21b      	sxth	r3, r3
 8017a56:	83bb      	strh	r3, [r7, #28]
 8017a58:	683b      	ldr	r3, [r7, #0]
 8017a5a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017a5c:	f107 0314 	add.w	r3, r7, #20
 8017a60:	6879      	ldr	r1, [r7, #4]
 8017a62:	4618      	mov	r0, r3
 8017a64:	f7ee fc9c 	bl	80063a0 <osThreadCreate>
 8017a68:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	3730      	adds	r7, #48	; 0x30
 8017a6e:	46bd      	mov	sp, r7
 8017a70:	bd80      	pop	{r7, pc}
	...

08017a74 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017a78:	4b04      	ldr	r3, [pc, #16]	; (8017a8c <sys_arch_protect+0x18>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7ee fd05 	bl	8006490 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017a86:	2301      	movs	r3, #1
}
 8017a88:	4618      	mov	r0, r3
 8017a8a:	bd80      	pop	{r7, pc}
 8017a8c:	2000cfcc 	.word	0x2000cfcc

08017a90 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b082      	sub	sp, #8
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017a98:	4b04      	ldr	r3, [pc, #16]	; (8017aac <sys_arch_unprotect+0x1c>)
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	f7ee fd45 	bl	800652c <osMutexRelease>
}
 8017aa2:	bf00      	nop
 8017aa4:	3708      	adds	r7, #8
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
 8017aaa:	bf00      	nop
 8017aac:	2000cfcc 	.word	0x2000cfcc

08017ab0 <atoi>:
 8017ab0:	220a      	movs	r2, #10
 8017ab2:	2100      	movs	r1, #0
 8017ab4:	f000 b8c0 	b.w	8017c38 <strtol>

08017ab8 <rand>:
 8017ab8:	4b16      	ldr	r3, [pc, #88]	; (8017b14 <rand+0x5c>)
 8017aba:	b510      	push	{r4, lr}
 8017abc:	681c      	ldr	r4, [r3, #0]
 8017abe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ac0:	b9b3      	cbnz	r3, 8017af0 <rand+0x38>
 8017ac2:	2018      	movs	r0, #24
 8017ac4:	f000 fa9c 	bl	8018000 <malloc>
 8017ac8:	4602      	mov	r2, r0
 8017aca:	6320      	str	r0, [r4, #48]	; 0x30
 8017acc:	b920      	cbnz	r0, 8017ad8 <rand+0x20>
 8017ace:	4b12      	ldr	r3, [pc, #72]	; (8017b18 <rand+0x60>)
 8017ad0:	4812      	ldr	r0, [pc, #72]	; (8017b1c <rand+0x64>)
 8017ad2:	2152      	movs	r1, #82	; 0x52
 8017ad4:	f000 fa76 	bl	8017fc4 <__assert_func>
 8017ad8:	4911      	ldr	r1, [pc, #68]	; (8017b20 <rand+0x68>)
 8017ada:	4b12      	ldr	r3, [pc, #72]	; (8017b24 <rand+0x6c>)
 8017adc:	e9c0 1300 	strd	r1, r3, [r0]
 8017ae0:	4b11      	ldr	r3, [pc, #68]	; (8017b28 <rand+0x70>)
 8017ae2:	6083      	str	r3, [r0, #8]
 8017ae4:	230b      	movs	r3, #11
 8017ae6:	8183      	strh	r3, [r0, #12]
 8017ae8:	2100      	movs	r1, #0
 8017aea:	2001      	movs	r0, #1
 8017aec:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017af0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017af2:	480e      	ldr	r0, [pc, #56]	; (8017b2c <rand+0x74>)
 8017af4:	690b      	ldr	r3, [r1, #16]
 8017af6:	694c      	ldr	r4, [r1, #20]
 8017af8:	4a0d      	ldr	r2, [pc, #52]	; (8017b30 <rand+0x78>)
 8017afa:	4358      	muls	r0, r3
 8017afc:	fb02 0004 	mla	r0, r2, r4, r0
 8017b00:	fba3 3202 	umull	r3, r2, r3, r2
 8017b04:	3301      	adds	r3, #1
 8017b06:	eb40 0002 	adc.w	r0, r0, r2
 8017b0a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8017b0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017b12:	bd10      	pop	{r4, pc}
 8017b14:	2000009c 	.word	0x2000009c
 8017b18:	0801e678 	.word	0x0801e678
 8017b1c:	0801e68f 	.word	0x0801e68f
 8017b20:	abcd330e 	.word	0xabcd330e
 8017b24:	e66d1234 	.word	0xe66d1234
 8017b28:	0005deec 	.word	0x0005deec
 8017b2c:	5851f42d 	.word	0x5851f42d
 8017b30:	4c957f2d 	.word	0x4c957f2d

08017b34 <_strtol_l.constprop.0>:
 8017b34:	2b01      	cmp	r3, #1
 8017b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017b3a:	d001      	beq.n	8017b40 <_strtol_l.constprop.0+0xc>
 8017b3c:	2b24      	cmp	r3, #36	; 0x24
 8017b3e:	d906      	bls.n	8017b4e <_strtol_l.constprop.0+0x1a>
 8017b40:	f000 fa06 	bl	8017f50 <__errno>
 8017b44:	2316      	movs	r3, #22
 8017b46:	6003      	str	r3, [r0, #0]
 8017b48:	2000      	movs	r0, #0
 8017b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b4e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017c34 <_strtol_l.constprop.0+0x100>
 8017b52:	460d      	mov	r5, r1
 8017b54:	462e      	mov	r6, r5
 8017b56:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b5a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8017b5e:	f017 0708 	ands.w	r7, r7, #8
 8017b62:	d1f7      	bne.n	8017b54 <_strtol_l.constprop.0+0x20>
 8017b64:	2c2d      	cmp	r4, #45	; 0x2d
 8017b66:	d132      	bne.n	8017bce <_strtol_l.constprop.0+0x9a>
 8017b68:	782c      	ldrb	r4, [r5, #0]
 8017b6a:	2701      	movs	r7, #1
 8017b6c:	1cb5      	adds	r5, r6, #2
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d05b      	beq.n	8017c2a <_strtol_l.constprop.0+0xf6>
 8017b72:	2b10      	cmp	r3, #16
 8017b74:	d109      	bne.n	8017b8a <_strtol_l.constprop.0+0x56>
 8017b76:	2c30      	cmp	r4, #48	; 0x30
 8017b78:	d107      	bne.n	8017b8a <_strtol_l.constprop.0+0x56>
 8017b7a:	782c      	ldrb	r4, [r5, #0]
 8017b7c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017b80:	2c58      	cmp	r4, #88	; 0x58
 8017b82:	d14d      	bne.n	8017c20 <_strtol_l.constprop.0+0xec>
 8017b84:	786c      	ldrb	r4, [r5, #1]
 8017b86:	2310      	movs	r3, #16
 8017b88:	3502      	adds	r5, #2
 8017b8a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017b8e:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b92:	f04f 0e00 	mov.w	lr, #0
 8017b96:	fbb8 f9f3 	udiv	r9, r8, r3
 8017b9a:	4676      	mov	r6, lr
 8017b9c:	fb03 8a19 	mls	sl, r3, r9, r8
 8017ba0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8017ba4:	f1bc 0f09 	cmp.w	ip, #9
 8017ba8:	d816      	bhi.n	8017bd8 <_strtol_l.constprop.0+0xa4>
 8017baa:	4664      	mov	r4, ip
 8017bac:	42a3      	cmp	r3, r4
 8017bae:	dd24      	ble.n	8017bfa <_strtol_l.constprop.0+0xc6>
 8017bb0:	f1be 3fff 	cmp.w	lr, #4294967295
 8017bb4:	d008      	beq.n	8017bc8 <_strtol_l.constprop.0+0x94>
 8017bb6:	45b1      	cmp	r9, r6
 8017bb8:	d31c      	bcc.n	8017bf4 <_strtol_l.constprop.0+0xc0>
 8017bba:	d101      	bne.n	8017bc0 <_strtol_l.constprop.0+0x8c>
 8017bbc:	45a2      	cmp	sl, r4
 8017bbe:	db19      	blt.n	8017bf4 <_strtol_l.constprop.0+0xc0>
 8017bc0:	fb06 4603 	mla	r6, r6, r3, r4
 8017bc4:	f04f 0e01 	mov.w	lr, #1
 8017bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017bcc:	e7e8      	b.n	8017ba0 <_strtol_l.constprop.0+0x6c>
 8017bce:	2c2b      	cmp	r4, #43	; 0x2b
 8017bd0:	bf04      	itt	eq
 8017bd2:	782c      	ldrbeq	r4, [r5, #0]
 8017bd4:	1cb5      	addeq	r5, r6, #2
 8017bd6:	e7ca      	b.n	8017b6e <_strtol_l.constprop.0+0x3a>
 8017bd8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8017bdc:	f1bc 0f19 	cmp.w	ip, #25
 8017be0:	d801      	bhi.n	8017be6 <_strtol_l.constprop.0+0xb2>
 8017be2:	3c37      	subs	r4, #55	; 0x37
 8017be4:	e7e2      	b.n	8017bac <_strtol_l.constprop.0+0x78>
 8017be6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8017bea:	f1bc 0f19 	cmp.w	ip, #25
 8017bee:	d804      	bhi.n	8017bfa <_strtol_l.constprop.0+0xc6>
 8017bf0:	3c57      	subs	r4, #87	; 0x57
 8017bf2:	e7db      	b.n	8017bac <_strtol_l.constprop.0+0x78>
 8017bf4:	f04f 3eff 	mov.w	lr, #4294967295
 8017bf8:	e7e6      	b.n	8017bc8 <_strtol_l.constprop.0+0x94>
 8017bfa:	f1be 3fff 	cmp.w	lr, #4294967295
 8017bfe:	d105      	bne.n	8017c0c <_strtol_l.constprop.0+0xd8>
 8017c00:	2322      	movs	r3, #34	; 0x22
 8017c02:	6003      	str	r3, [r0, #0]
 8017c04:	4646      	mov	r6, r8
 8017c06:	b942      	cbnz	r2, 8017c1a <_strtol_l.constprop.0+0xe6>
 8017c08:	4630      	mov	r0, r6
 8017c0a:	e79e      	b.n	8017b4a <_strtol_l.constprop.0+0x16>
 8017c0c:	b107      	cbz	r7, 8017c10 <_strtol_l.constprop.0+0xdc>
 8017c0e:	4276      	negs	r6, r6
 8017c10:	2a00      	cmp	r2, #0
 8017c12:	d0f9      	beq.n	8017c08 <_strtol_l.constprop.0+0xd4>
 8017c14:	f1be 0f00 	cmp.w	lr, #0
 8017c18:	d000      	beq.n	8017c1c <_strtol_l.constprop.0+0xe8>
 8017c1a:	1e69      	subs	r1, r5, #1
 8017c1c:	6011      	str	r1, [r2, #0]
 8017c1e:	e7f3      	b.n	8017c08 <_strtol_l.constprop.0+0xd4>
 8017c20:	2430      	movs	r4, #48	; 0x30
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d1b1      	bne.n	8017b8a <_strtol_l.constprop.0+0x56>
 8017c26:	2308      	movs	r3, #8
 8017c28:	e7af      	b.n	8017b8a <_strtol_l.constprop.0+0x56>
 8017c2a:	2c30      	cmp	r4, #48	; 0x30
 8017c2c:	d0a5      	beq.n	8017b7a <_strtol_l.constprop.0+0x46>
 8017c2e:	230a      	movs	r3, #10
 8017c30:	e7ab      	b.n	8017b8a <_strtol_l.constprop.0+0x56>
 8017c32:	bf00      	nop
 8017c34:	0801e6e8 	.word	0x0801e6e8

08017c38 <strtol>:
 8017c38:	4613      	mov	r3, r2
 8017c3a:	460a      	mov	r2, r1
 8017c3c:	4601      	mov	r1, r0
 8017c3e:	4802      	ldr	r0, [pc, #8]	; (8017c48 <strtol+0x10>)
 8017c40:	6800      	ldr	r0, [r0, #0]
 8017c42:	f7ff bf77 	b.w	8017b34 <_strtol_l.constprop.0>
 8017c46:	bf00      	nop
 8017c48:	2000009c 	.word	0x2000009c

08017c4c <std>:
 8017c4c:	2300      	movs	r3, #0
 8017c4e:	b510      	push	{r4, lr}
 8017c50:	4604      	mov	r4, r0
 8017c52:	e9c0 3300 	strd	r3, r3, [r0]
 8017c56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017c5a:	6083      	str	r3, [r0, #8]
 8017c5c:	8181      	strh	r1, [r0, #12]
 8017c5e:	6643      	str	r3, [r0, #100]	; 0x64
 8017c60:	81c2      	strh	r2, [r0, #14]
 8017c62:	6183      	str	r3, [r0, #24]
 8017c64:	4619      	mov	r1, r3
 8017c66:	2208      	movs	r2, #8
 8017c68:	305c      	adds	r0, #92	; 0x5c
 8017c6a:	f000 f904 	bl	8017e76 <memset>
 8017c6e:	4b05      	ldr	r3, [pc, #20]	; (8017c84 <std+0x38>)
 8017c70:	6263      	str	r3, [r4, #36]	; 0x24
 8017c72:	4b05      	ldr	r3, [pc, #20]	; (8017c88 <std+0x3c>)
 8017c74:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c76:	4b05      	ldr	r3, [pc, #20]	; (8017c8c <std+0x40>)
 8017c78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c7a:	4b05      	ldr	r3, [pc, #20]	; (8017c90 <std+0x44>)
 8017c7c:	6224      	str	r4, [r4, #32]
 8017c7e:	6323      	str	r3, [r4, #48]	; 0x30
 8017c80:	bd10      	pop	{r4, pc}
 8017c82:	bf00      	nop
 8017c84:	08017dd1 	.word	0x08017dd1
 8017c88:	08017df3 	.word	0x08017df3
 8017c8c:	08017e2b 	.word	0x08017e2b
 8017c90:	08017e4f 	.word	0x08017e4f

08017c94 <stdio_exit_handler>:
 8017c94:	4a02      	ldr	r2, [pc, #8]	; (8017ca0 <stdio_exit_handler+0xc>)
 8017c96:	4903      	ldr	r1, [pc, #12]	; (8017ca4 <stdio_exit_handler+0x10>)
 8017c98:	4803      	ldr	r0, [pc, #12]	; (8017ca8 <stdio_exit_handler+0x14>)
 8017c9a:	f000 b869 	b.w	8017d70 <_fwalk_sglue>
 8017c9e:	bf00      	nop
 8017ca0:	20000044 	.word	0x20000044
 8017ca4:	0801881d 	.word	0x0801881d
 8017ca8:	20000050 	.word	0x20000050

08017cac <cleanup_stdio>:
 8017cac:	6841      	ldr	r1, [r0, #4]
 8017cae:	4b0c      	ldr	r3, [pc, #48]	; (8017ce0 <cleanup_stdio+0x34>)
 8017cb0:	4299      	cmp	r1, r3
 8017cb2:	b510      	push	{r4, lr}
 8017cb4:	4604      	mov	r4, r0
 8017cb6:	d001      	beq.n	8017cbc <cleanup_stdio+0x10>
 8017cb8:	f000 fdb0 	bl	801881c <_fflush_r>
 8017cbc:	68a1      	ldr	r1, [r4, #8]
 8017cbe:	4b09      	ldr	r3, [pc, #36]	; (8017ce4 <cleanup_stdio+0x38>)
 8017cc0:	4299      	cmp	r1, r3
 8017cc2:	d002      	beq.n	8017cca <cleanup_stdio+0x1e>
 8017cc4:	4620      	mov	r0, r4
 8017cc6:	f000 fda9 	bl	801881c <_fflush_r>
 8017cca:	68e1      	ldr	r1, [r4, #12]
 8017ccc:	4b06      	ldr	r3, [pc, #24]	; (8017ce8 <cleanup_stdio+0x3c>)
 8017cce:	4299      	cmp	r1, r3
 8017cd0:	d004      	beq.n	8017cdc <cleanup_stdio+0x30>
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017cd8:	f000 bda0 	b.w	801881c <_fflush_r>
 8017cdc:	bd10      	pop	{r4, pc}
 8017cde:	bf00      	nop
 8017ce0:	2000cfd0 	.word	0x2000cfd0
 8017ce4:	2000d038 	.word	0x2000d038
 8017ce8:	2000d0a0 	.word	0x2000d0a0

08017cec <global_stdio_init.part.0>:
 8017cec:	b510      	push	{r4, lr}
 8017cee:	4b0b      	ldr	r3, [pc, #44]	; (8017d1c <global_stdio_init.part.0+0x30>)
 8017cf0:	4c0b      	ldr	r4, [pc, #44]	; (8017d20 <global_stdio_init.part.0+0x34>)
 8017cf2:	4a0c      	ldr	r2, [pc, #48]	; (8017d24 <global_stdio_init.part.0+0x38>)
 8017cf4:	601a      	str	r2, [r3, #0]
 8017cf6:	4620      	mov	r0, r4
 8017cf8:	2200      	movs	r2, #0
 8017cfa:	2104      	movs	r1, #4
 8017cfc:	f7ff ffa6 	bl	8017c4c <std>
 8017d00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017d04:	2201      	movs	r2, #1
 8017d06:	2109      	movs	r1, #9
 8017d08:	f7ff ffa0 	bl	8017c4c <std>
 8017d0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8017d10:	2202      	movs	r2, #2
 8017d12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d16:	2112      	movs	r1, #18
 8017d18:	f7ff bf98 	b.w	8017c4c <std>
 8017d1c:	2000d108 	.word	0x2000d108
 8017d20:	2000cfd0 	.word	0x2000cfd0
 8017d24:	08017c95 	.word	0x08017c95

08017d28 <__sfp_lock_acquire>:
 8017d28:	4801      	ldr	r0, [pc, #4]	; (8017d30 <__sfp_lock_acquire+0x8>)
 8017d2a:	f000 b93b 	b.w	8017fa4 <__retarget_lock_acquire_recursive>
 8017d2e:	bf00      	nop
 8017d30:	2000d10d 	.word	0x2000d10d

08017d34 <__sfp_lock_release>:
 8017d34:	4801      	ldr	r0, [pc, #4]	; (8017d3c <__sfp_lock_release+0x8>)
 8017d36:	f000 b936 	b.w	8017fa6 <__retarget_lock_release_recursive>
 8017d3a:	bf00      	nop
 8017d3c:	2000d10d 	.word	0x2000d10d

08017d40 <__sinit>:
 8017d40:	b510      	push	{r4, lr}
 8017d42:	4604      	mov	r4, r0
 8017d44:	f7ff fff0 	bl	8017d28 <__sfp_lock_acquire>
 8017d48:	6a23      	ldr	r3, [r4, #32]
 8017d4a:	b11b      	cbz	r3, 8017d54 <__sinit+0x14>
 8017d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d50:	f7ff bff0 	b.w	8017d34 <__sfp_lock_release>
 8017d54:	4b04      	ldr	r3, [pc, #16]	; (8017d68 <__sinit+0x28>)
 8017d56:	6223      	str	r3, [r4, #32]
 8017d58:	4b04      	ldr	r3, [pc, #16]	; (8017d6c <__sinit+0x2c>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d1f5      	bne.n	8017d4c <__sinit+0xc>
 8017d60:	f7ff ffc4 	bl	8017cec <global_stdio_init.part.0>
 8017d64:	e7f2      	b.n	8017d4c <__sinit+0xc>
 8017d66:	bf00      	nop
 8017d68:	08017cad 	.word	0x08017cad
 8017d6c:	2000d108 	.word	0x2000d108

08017d70 <_fwalk_sglue>:
 8017d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017d74:	4607      	mov	r7, r0
 8017d76:	4688      	mov	r8, r1
 8017d78:	4614      	mov	r4, r2
 8017d7a:	2600      	movs	r6, #0
 8017d7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017d80:	f1b9 0901 	subs.w	r9, r9, #1
 8017d84:	d505      	bpl.n	8017d92 <_fwalk_sglue+0x22>
 8017d86:	6824      	ldr	r4, [r4, #0]
 8017d88:	2c00      	cmp	r4, #0
 8017d8a:	d1f7      	bne.n	8017d7c <_fwalk_sglue+0xc>
 8017d8c:	4630      	mov	r0, r6
 8017d8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d92:	89ab      	ldrh	r3, [r5, #12]
 8017d94:	2b01      	cmp	r3, #1
 8017d96:	d907      	bls.n	8017da8 <_fwalk_sglue+0x38>
 8017d98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017d9c:	3301      	adds	r3, #1
 8017d9e:	d003      	beq.n	8017da8 <_fwalk_sglue+0x38>
 8017da0:	4629      	mov	r1, r5
 8017da2:	4638      	mov	r0, r7
 8017da4:	47c0      	blx	r8
 8017da6:	4306      	orrs	r6, r0
 8017da8:	3568      	adds	r5, #104	; 0x68
 8017daa:	e7e9      	b.n	8017d80 <_fwalk_sglue+0x10>

08017dac <iprintf>:
 8017dac:	b40f      	push	{r0, r1, r2, r3}
 8017dae:	b507      	push	{r0, r1, r2, lr}
 8017db0:	4906      	ldr	r1, [pc, #24]	; (8017dcc <iprintf+0x20>)
 8017db2:	ab04      	add	r3, sp, #16
 8017db4:	6808      	ldr	r0, [r1, #0]
 8017db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dba:	6881      	ldr	r1, [r0, #8]
 8017dbc:	9301      	str	r3, [sp, #4]
 8017dbe:	f000 f9fd 	bl	80181bc <_vfiprintf_r>
 8017dc2:	b003      	add	sp, #12
 8017dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8017dc8:	b004      	add	sp, #16
 8017dca:	4770      	bx	lr
 8017dcc:	2000009c 	.word	0x2000009c

08017dd0 <__sread>:
 8017dd0:	b510      	push	{r4, lr}
 8017dd2:	460c      	mov	r4, r1
 8017dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017dd8:	f000 f896 	bl	8017f08 <_read_r>
 8017ddc:	2800      	cmp	r0, #0
 8017dde:	bfab      	itete	ge
 8017de0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017de2:	89a3      	ldrhlt	r3, [r4, #12]
 8017de4:	181b      	addge	r3, r3, r0
 8017de6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017dea:	bfac      	ite	ge
 8017dec:	6563      	strge	r3, [r4, #84]	; 0x54
 8017dee:	81a3      	strhlt	r3, [r4, #12]
 8017df0:	bd10      	pop	{r4, pc}

08017df2 <__swrite>:
 8017df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017df6:	461f      	mov	r7, r3
 8017df8:	898b      	ldrh	r3, [r1, #12]
 8017dfa:	05db      	lsls	r3, r3, #23
 8017dfc:	4605      	mov	r5, r0
 8017dfe:	460c      	mov	r4, r1
 8017e00:	4616      	mov	r6, r2
 8017e02:	d505      	bpl.n	8017e10 <__swrite+0x1e>
 8017e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e08:	2302      	movs	r3, #2
 8017e0a:	2200      	movs	r2, #0
 8017e0c:	f000 f86a 	bl	8017ee4 <_lseek_r>
 8017e10:	89a3      	ldrh	r3, [r4, #12]
 8017e12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017e1a:	81a3      	strh	r3, [r4, #12]
 8017e1c:	4632      	mov	r2, r6
 8017e1e:	463b      	mov	r3, r7
 8017e20:	4628      	mov	r0, r5
 8017e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e26:	f000 b881 	b.w	8017f2c <_write_r>

08017e2a <__sseek>:
 8017e2a:	b510      	push	{r4, lr}
 8017e2c:	460c      	mov	r4, r1
 8017e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e32:	f000 f857 	bl	8017ee4 <_lseek_r>
 8017e36:	1c43      	adds	r3, r0, #1
 8017e38:	89a3      	ldrh	r3, [r4, #12]
 8017e3a:	bf15      	itete	ne
 8017e3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8017e3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017e42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017e46:	81a3      	strheq	r3, [r4, #12]
 8017e48:	bf18      	it	ne
 8017e4a:	81a3      	strhne	r3, [r4, #12]
 8017e4c:	bd10      	pop	{r4, pc}

08017e4e <__sclose>:
 8017e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e52:	f000 b837 	b.w	8017ec4 <_close_r>

08017e56 <memcmp>:
 8017e56:	b510      	push	{r4, lr}
 8017e58:	3901      	subs	r1, #1
 8017e5a:	4402      	add	r2, r0
 8017e5c:	4290      	cmp	r0, r2
 8017e5e:	d101      	bne.n	8017e64 <memcmp+0xe>
 8017e60:	2000      	movs	r0, #0
 8017e62:	e005      	b.n	8017e70 <memcmp+0x1a>
 8017e64:	7803      	ldrb	r3, [r0, #0]
 8017e66:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017e6a:	42a3      	cmp	r3, r4
 8017e6c:	d001      	beq.n	8017e72 <memcmp+0x1c>
 8017e6e:	1b18      	subs	r0, r3, r4
 8017e70:	bd10      	pop	{r4, pc}
 8017e72:	3001      	adds	r0, #1
 8017e74:	e7f2      	b.n	8017e5c <memcmp+0x6>

08017e76 <memset>:
 8017e76:	4402      	add	r2, r0
 8017e78:	4603      	mov	r3, r0
 8017e7a:	4293      	cmp	r3, r2
 8017e7c:	d100      	bne.n	8017e80 <memset+0xa>
 8017e7e:	4770      	bx	lr
 8017e80:	f803 1b01 	strb.w	r1, [r3], #1
 8017e84:	e7f9      	b.n	8017e7a <memset+0x4>

08017e86 <strchr>:
 8017e86:	b2c9      	uxtb	r1, r1
 8017e88:	4603      	mov	r3, r0
 8017e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017e8e:	b11a      	cbz	r2, 8017e98 <strchr+0x12>
 8017e90:	428a      	cmp	r2, r1
 8017e92:	d1f9      	bne.n	8017e88 <strchr+0x2>
 8017e94:	4618      	mov	r0, r3
 8017e96:	4770      	bx	lr
 8017e98:	2900      	cmp	r1, #0
 8017e9a:	bf18      	it	ne
 8017e9c:	2300      	movne	r3, #0
 8017e9e:	e7f9      	b.n	8017e94 <strchr+0xe>

08017ea0 <strncmp>:
 8017ea0:	b510      	push	{r4, lr}
 8017ea2:	b16a      	cbz	r2, 8017ec0 <strncmp+0x20>
 8017ea4:	3901      	subs	r1, #1
 8017ea6:	1884      	adds	r4, r0, r2
 8017ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017eac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017eb0:	429a      	cmp	r2, r3
 8017eb2:	d103      	bne.n	8017ebc <strncmp+0x1c>
 8017eb4:	42a0      	cmp	r0, r4
 8017eb6:	d001      	beq.n	8017ebc <strncmp+0x1c>
 8017eb8:	2a00      	cmp	r2, #0
 8017eba:	d1f5      	bne.n	8017ea8 <strncmp+0x8>
 8017ebc:	1ad0      	subs	r0, r2, r3
 8017ebe:	bd10      	pop	{r4, pc}
 8017ec0:	4610      	mov	r0, r2
 8017ec2:	e7fc      	b.n	8017ebe <strncmp+0x1e>

08017ec4 <_close_r>:
 8017ec4:	b538      	push	{r3, r4, r5, lr}
 8017ec6:	4d06      	ldr	r5, [pc, #24]	; (8017ee0 <_close_r+0x1c>)
 8017ec8:	2300      	movs	r3, #0
 8017eca:	4604      	mov	r4, r0
 8017ecc:	4608      	mov	r0, r1
 8017ece:	602b      	str	r3, [r5, #0]
 8017ed0:	f7e9 f90f 	bl	80010f2 <_close>
 8017ed4:	1c43      	adds	r3, r0, #1
 8017ed6:	d102      	bne.n	8017ede <_close_r+0x1a>
 8017ed8:	682b      	ldr	r3, [r5, #0]
 8017eda:	b103      	cbz	r3, 8017ede <_close_r+0x1a>
 8017edc:	6023      	str	r3, [r4, #0]
 8017ede:	bd38      	pop	{r3, r4, r5, pc}
 8017ee0:	2000cfc8 	.word	0x2000cfc8

08017ee4 <_lseek_r>:
 8017ee4:	b538      	push	{r3, r4, r5, lr}
 8017ee6:	4d07      	ldr	r5, [pc, #28]	; (8017f04 <_lseek_r+0x20>)
 8017ee8:	4604      	mov	r4, r0
 8017eea:	4608      	mov	r0, r1
 8017eec:	4611      	mov	r1, r2
 8017eee:	2200      	movs	r2, #0
 8017ef0:	602a      	str	r2, [r5, #0]
 8017ef2:	461a      	mov	r2, r3
 8017ef4:	f7e9 f924 	bl	8001140 <_lseek>
 8017ef8:	1c43      	adds	r3, r0, #1
 8017efa:	d102      	bne.n	8017f02 <_lseek_r+0x1e>
 8017efc:	682b      	ldr	r3, [r5, #0]
 8017efe:	b103      	cbz	r3, 8017f02 <_lseek_r+0x1e>
 8017f00:	6023      	str	r3, [r4, #0]
 8017f02:	bd38      	pop	{r3, r4, r5, pc}
 8017f04:	2000cfc8 	.word	0x2000cfc8

08017f08 <_read_r>:
 8017f08:	b538      	push	{r3, r4, r5, lr}
 8017f0a:	4d07      	ldr	r5, [pc, #28]	; (8017f28 <_read_r+0x20>)
 8017f0c:	4604      	mov	r4, r0
 8017f0e:	4608      	mov	r0, r1
 8017f10:	4611      	mov	r1, r2
 8017f12:	2200      	movs	r2, #0
 8017f14:	602a      	str	r2, [r5, #0]
 8017f16:	461a      	mov	r2, r3
 8017f18:	f7e9 f8b2 	bl	8001080 <_read>
 8017f1c:	1c43      	adds	r3, r0, #1
 8017f1e:	d102      	bne.n	8017f26 <_read_r+0x1e>
 8017f20:	682b      	ldr	r3, [r5, #0]
 8017f22:	b103      	cbz	r3, 8017f26 <_read_r+0x1e>
 8017f24:	6023      	str	r3, [r4, #0]
 8017f26:	bd38      	pop	{r3, r4, r5, pc}
 8017f28:	2000cfc8 	.word	0x2000cfc8

08017f2c <_write_r>:
 8017f2c:	b538      	push	{r3, r4, r5, lr}
 8017f2e:	4d07      	ldr	r5, [pc, #28]	; (8017f4c <_write_r+0x20>)
 8017f30:	4604      	mov	r4, r0
 8017f32:	4608      	mov	r0, r1
 8017f34:	4611      	mov	r1, r2
 8017f36:	2200      	movs	r2, #0
 8017f38:	602a      	str	r2, [r5, #0]
 8017f3a:	461a      	mov	r2, r3
 8017f3c:	f7e9 f8bd 	bl	80010ba <_write>
 8017f40:	1c43      	adds	r3, r0, #1
 8017f42:	d102      	bne.n	8017f4a <_write_r+0x1e>
 8017f44:	682b      	ldr	r3, [r5, #0]
 8017f46:	b103      	cbz	r3, 8017f4a <_write_r+0x1e>
 8017f48:	6023      	str	r3, [r4, #0]
 8017f4a:	bd38      	pop	{r3, r4, r5, pc}
 8017f4c:	2000cfc8 	.word	0x2000cfc8

08017f50 <__errno>:
 8017f50:	4b01      	ldr	r3, [pc, #4]	; (8017f58 <__errno+0x8>)
 8017f52:	6818      	ldr	r0, [r3, #0]
 8017f54:	4770      	bx	lr
 8017f56:	bf00      	nop
 8017f58:	2000009c 	.word	0x2000009c

08017f5c <__libc_init_array>:
 8017f5c:	b570      	push	{r4, r5, r6, lr}
 8017f5e:	4d0d      	ldr	r5, [pc, #52]	; (8017f94 <__libc_init_array+0x38>)
 8017f60:	4c0d      	ldr	r4, [pc, #52]	; (8017f98 <__libc_init_array+0x3c>)
 8017f62:	1b64      	subs	r4, r4, r5
 8017f64:	10a4      	asrs	r4, r4, #2
 8017f66:	2600      	movs	r6, #0
 8017f68:	42a6      	cmp	r6, r4
 8017f6a:	d109      	bne.n	8017f80 <__libc_init_array+0x24>
 8017f6c:	4d0b      	ldr	r5, [pc, #44]	; (8017f9c <__libc_init_array+0x40>)
 8017f6e:	4c0c      	ldr	r4, [pc, #48]	; (8017fa0 <__libc_init_array+0x44>)
 8017f70:	f000 fe50 	bl	8018c14 <_init>
 8017f74:	1b64      	subs	r4, r4, r5
 8017f76:	10a4      	asrs	r4, r4, #2
 8017f78:	2600      	movs	r6, #0
 8017f7a:	42a6      	cmp	r6, r4
 8017f7c:	d105      	bne.n	8017f8a <__libc_init_array+0x2e>
 8017f7e:	bd70      	pop	{r4, r5, r6, pc}
 8017f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f84:	4798      	blx	r3
 8017f86:	3601      	adds	r6, #1
 8017f88:	e7ee      	b.n	8017f68 <__libc_init_array+0xc>
 8017f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8017f8e:	4798      	blx	r3
 8017f90:	3601      	adds	r6, #1
 8017f92:	e7f2      	b.n	8017f7a <__libc_init_array+0x1e>
 8017f94:	0801e860 	.word	0x0801e860
 8017f98:	0801e860 	.word	0x0801e860
 8017f9c:	0801e860 	.word	0x0801e860
 8017fa0:	0801e864 	.word	0x0801e864

08017fa4 <__retarget_lock_acquire_recursive>:
 8017fa4:	4770      	bx	lr

08017fa6 <__retarget_lock_release_recursive>:
 8017fa6:	4770      	bx	lr

08017fa8 <memcpy>:
 8017fa8:	440a      	add	r2, r1
 8017faa:	4291      	cmp	r1, r2
 8017fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8017fb0:	d100      	bne.n	8017fb4 <memcpy+0xc>
 8017fb2:	4770      	bx	lr
 8017fb4:	b510      	push	{r4, lr}
 8017fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017fbe:	4291      	cmp	r1, r2
 8017fc0:	d1f9      	bne.n	8017fb6 <memcpy+0xe>
 8017fc2:	bd10      	pop	{r4, pc}

08017fc4 <__assert_func>:
 8017fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017fc6:	4614      	mov	r4, r2
 8017fc8:	461a      	mov	r2, r3
 8017fca:	4b09      	ldr	r3, [pc, #36]	; (8017ff0 <__assert_func+0x2c>)
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4605      	mov	r5, r0
 8017fd0:	68d8      	ldr	r0, [r3, #12]
 8017fd2:	b14c      	cbz	r4, 8017fe8 <__assert_func+0x24>
 8017fd4:	4b07      	ldr	r3, [pc, #28]	; (8017ff4 <__assert_func+0x30>)
 8017fd6:	9100      	str	r1, [sp, #0]
 8017fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017fdc:	4906      	ldr	r1, [pc, #24]	; (8017ff8 <__assert_func+0x34>)
 8017fde:	462b      	mov	r3, r5
 8017fe0:	f000 fc44 	bl	801886c <fiprintf>
 8017fe4:	f000 fcfa 	bl	80189dc <abort>
 8017fe8:	4b04      	ldr	r3, [pc, #16]	; (8017ffc <__assert_func+0x38>)
 8017fea:	461c      	mov	r4, r3
 8017fec:	e7f3      	b.n	8017fd6 <__assert_func+0x12>
 8017fee:	bf00      	nop
 8017ff0:	2000009c 	.word	0x2000009c
 8017ff4:	0801e7e8 	.word	0x0801e7e8
 8017ff8:	0801e7f5 	.word	0x0801e7f5
 8017ffc:	0801e823 	.word	0x0801e823

08018000 <malloc>:
 8018000:	4b02      	ldr	r3, [pc, #8]	; (801800c <malloc+0xc>)
 8018002:	4601      	mov	r1, r0
 8018004:	6818      	ldr	r0, [r3, #0]
 8018006:	f000 b823 	b.w	8018050 <_malloc_r>
 801800a:	bf00      	nop
 801800c:	2000009c 	.word	0x2000009c

08018010 <sbrk_aligned>:
 8018010:	b570      	push	{r4, r5, r6, lr}
 8018012:	4e0e      	ldr	r6, [pc, #56]	; (801804c <sbrk_aligned+0x3c>)
 8018014:	460c      	mov	r4, r1
 8018016:	6831      	ldr	r1, [r6, #0]
 8018018:	4605      	mov	r5, r0
 801801a:	b911      	cbnz	r1, 8018022 <sbrk_aligned+0x12>
 801801c:	f000 fcce 	bl	80189bc <_sbrk_r>
 8018020:	6030      	str	r0, [r6, #0]
 8018022:	4621      	mov	r1, r4
 8018024:	4628      	mov	r0, r5
 8018026:	f000 fcc9 	bl	80189bc <_sbrk_r>
 801802a:	1c43      	adds	r3, r0, #1
 801802c:	d00a      	beq.n	8018044 <sbrk_aligned+0x34>
 801802e:	1cc4      	adds	r4, r0, #3
 8018030:	f024 0403 	bic.w	r4, r4, #3
 8018034:	42a0      	cmp	r0, r4
 8018036:	d007      	beq.n	8018048 <sbrk_aligned+0x38>
 8018038:	1a21      	subs	r1, r4, r0
 801803a:	4628      	mov	r0, r5
 801803c:	f000 fcbe 	bl	80189bc <_sbrk_r>
 8018040:	3001      	adds	r0, #1
 8018042:	d101      	bne.n	8018048 <sbrk_aligned+0x38>
 8018044:	f04f 34ff 	mov.w	r4, #4294967295
 8018048:	4620      	mov	r0, r4
 801804a:	bd70      	pop	{r4, r5, r6, pc}
 801804c:	2000d114 	.word	0x2000d114

08018050 <_malloc_r>:
 8018050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018054:	1ccd      	adds	r5, r1, #3
 8018056:	f025 0503 	bic.w	r5, r5, #3
 801805a:	3508      	adds	r5, #8
 801805c:	2d0c      	cmp	r5, #12
 801805e:	bf38      	it	cc
 8018060:	250c      	movcc	r5, #12
 8018062:	2d00      	cmp	r5, #0
 8018064:	4607      	mov	r7, r0
 8018066:	db01      	blt.n	801806c <_malloc_r+0x1c>
 8018068:	42a9      	cmp	r1, r5
 801806a:	d905      	bls.n	8018078 <_malloc_r+0x28>
 801806c:	230c      	movs	r3, #12
 801806e:	603b      	str	r3, [r7, #0]
 8018070:	2600      	movs	r6, #0
 8018072:	4630      	mov	r0, r6
 8018074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018078:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801814c <_malloc_r+0xfc>
 801807c:	f000 f868 	bl	8018150 <__malloc_lock>
 8018080:	f8d8 3000 	ldr.w	r3, [r8]
 8018084:	461c      	mov	r4, r3
 8018086:	bb5c      	cbnz	r4, 80180e0 <_malloc_r+0x90>
 8018088:	4629      	mov	r1, r5
 801808a:	4638      	mov	r0, r7
 801808c:	f7ff ffc0 	bl	8018010 <sbrk_aligned>
 8018090:	1c43      	adds	r3, r0, #1
 8018092:	4604      	mov	r4, r0
 8018094:	d155      	bne.n	8018142 <_malloc_r+0xf2>
 8018096:	f8d8 4000 	ldr.w	r4, [r8]
 801809a:	4626      	mov	r6, r4
 801809c:	2e00      	cmp	r6, #0
 801809e:	d145      	bne.n	801812c <_malloc_r+0xdc>
 80180a0:	2c00      	cmp	r4, #0
 80180a2:	d048      	beq.n	8018136 <_malloc_r+0xe6>
 80180a4:	6823      	ldr	r3, [r4, #0]
 80180a6:	4631      	mov	r1, r6
 80180a8:	4638      	mov	r0, r7
 80180aa:	eb04 0903 	add.w	r9, r4, r3
 80180ae:	f000 fc85 	bl	80189bc <_sbrk_r>
 80180b2:	4581      	cmp	r9, r0
 80180b4:	d13f      	bne.n	8018136 <_malloc_r+0xe6>
 80180b6:	6821      	ldr	r1, [r4, #0]
 80180b8:	1a6d      	subs	r5, r5, r1
 80180ba:	4629      	mov	r1, r5
 80180bc:	4638      	mov	r0, r7
 80180be:	f7ff ffa7 	bl	8018010 <sbrk_aligned>
 80180c2:	3001      	adds	r0, #1
 80180c4:	d037      	beq.n	8018136 <_malloc_r+0xe6>
 80180c6:	6823      	ldr	r3, [r4, #0]
 80180c8:	442b      	add	r3, r5
 80180ca:	6023      	str	r3, [r4, #0]
 80180cc:	f8d8 3000 	ldr.w	r3, [r8]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d038      	beq.n	8018146 <_malloc_r+0xf6>
 80180d4:	685a      	ldr	r2, [r3, #4]
 80180d6:	42a2      	cmp	r2, r4
 80180d8:	d12b      	bne.n	8018132 <_malloc_r+0xe2>
 80180da:	2200      	movs	r2, #0
 80180dc:	605a      	str	r2, [r3, #4]
 80180de:	e00f      	b.n	8018100 <_malloc_r+0xb0>
 80180e0:	6822      	ldr	r2, [r4, #0]
 80180e2:	1b52      	subs	r2, r2, r5
 80180e4:	d41f      	bmi.n	8018126 <_malloc_r+0xd6>
 80180e6:	2a0b      	cmp	r2, #11
 80180e8:	d917      	bls.n	801811a <_malloc_r+0xca>
 80180ea:	1961      	adds	r1, r4, r5
 80180ec:	42a3      	cmp	r3, r4
 80180ee:	6025      	str	r5, [r4, #0]
 80180f0:	bf18      	it	ne
 80180f2:	6059      	strne	r1, [r3, #4]
 80180f4:	6863      	ldr	r3, [r4, #4]
 80180f6:	bf08      	it	eq
 80180f8:	f8c8 1000 	streq.w	r1, [r8]
 80180fc:	5162      	str	r2, [r4, r5]
 80180fe:	604b      	str	r3, [r1, #4]
 8018100:	4638      	mov	r0, r7
 8018102:	f104 060b 	add.w	r6, r4, #11
 8018106:	f000 f829 	bl	801815c <__malloc_unlock>
 801810a:	f026 0607 	bic.w	r6, r6, #7
 801810e:	1d23      	adds	r3, r4, #4
 8018110:	1af2      	subs	r2, r6, r3
 8018112:	d0ae      	beq.n	8018072 <_malloc_r+0x22>
 8018114:	1b9b      	subs	r3, r3, r6
 8018116:	50a3      	str	r3, [r4, r2]
 8018118:	e7ab      	b.n	8018072 <_malloc_r+0x22>
 801811a:	42a3      	cmp	r3, r4
 801811c:	6862      	ldr	r2, [r4, #4]
 801811e:	d1dd      	bne.n	80180dc <_malloc_r+0x8c>
 8018120:	f8c8 2000 	str.w	r2, [r8]
 8018124:	e7ec      	b.n	8018100 <_malloc_r+0xb0>
 8018126:	4623      	mov	r3, r4
 8018128:	6864      	ldr	r4, [r4, #4]
 801812a:	e7ac      	b.n	8018086 <_malloc_r+0x36>
 801812c:	4634      	mov	r4, r6
 801812e:	6876      	ldr	r6, [r6, #4]
 8018130:	e7b4      	b.n	801809c <_malloc_r+0x4c>
 8018132:	4613      	mov	r3, r2
 8018134:	e7cc      	b.n	80180d0 <_malloc_r+0x80>
 8018136:	230c      	movs	r3, #12
 8018138:	603b      	str	r3, [r7, #0]
 801813a:	4638      	mov	r0, r7
 801813c:	f000 f80e 	bl	801815c <__malloc_unlock>
 8018140:	e797      	b.n	8018072 <_malloc_r+0x22>
 8018142:	6025      	str	r5, [r4, #0]
 8018144:	e7dc      	b.n	8018100 <_malloc_r+0xb0>
 8018146:	605b      	str	r3, [r3, #4]
 8018148:	deff      	udf	#255	; 0xff
 801814a:	bf00      	nop
 801814c:	2000d110 	.word	0x2000d110

08018150 <__malloc_lock>:
 8018150:	4801      	ldr	r0, [pc, #4]	; (8018158 <__malloc_lock+0x8>)
 8018152:	f7ff bf27 	b.w	8017fa4 <__retarget_lock_acquire_recursive>
 8018156:	bf00      	nop
 8018158:	2000d10c 	.word	0x2000d10c

0801815c <__malloc_unlock>:
 801815c:	4801      	ldr	r0, [pc, #4]	; (8018164 <__malloc_unlock+0x8>)
 801815e:	f7ff bf22 	b.w	8017fa6 <__retarget_lock_release_recursive>
 8018162:	bf00      	nop
 8018164:	2000d10c 	.word	0x2000d10c

08018168 <__sfputc_r>:
 8018168:	6893      	ldr	r3, [r2, #8]
 801816a:	3b01      	subs	r3, #1
 801816c:	2b00      	cmp	r3, #0
 801816e:	b410      	push	{r4}
 8018170:	6093      	str	r3, [r2, #8]
 8018172:	da08      	bge.n	8018186 <__sfputc_r+0x1e>
 8018174:	6994      	ldr	r4, [r2, #24]
 8018176:	42a3      	cmp	r3, r4
 8018178:	db01      	blt.n	801817e <__sfputc_r+0x16>
 801817a:	290a      	cmp	r1, #10
 801817c:	d103      	bne.n	8018186 <__sfputc_r+0x1e>
 801817e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018182:	f000 bb85 	b.w	8018890 <__swbuf_r>
 8018186:	6813      	ldr	r3, [r2, #0]
 8018188:	1c58      	adds	r0, r3, #1
 801818a:	6010      	str	r0, [r2, #0]
 801818c:	7019      	strb	r1, [r3, #0]
 801818e:	4608      	mov	r0, r1
 8018190:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018194:	4770      	bx	lr

08018196 <__sfputs_r>:
 8018196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018198:	4606      	mov	r6, r0
 801819a:	460f      	mov	r7, r1
 801819c:	4614      	mov	r4, r2
 801819e:	18d5      	adds	r5, r2, r3
 80181a0:	42ac      	cmp	r4, r5
 80181a2:	d101      	bne.n	80181a8 <__sfputs_r+0x12>
 80181a4:	2000      	movs	r0, #0
 80181a6:	e007      	b.n	80181b8 <__sfputs_r+0x22>
 80181a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ac:	463a      	mov	r2, r7
 80181ae:	4630      	mov	r0, r6
 80181b0:	f7ff ffda 	bl	8018168 <__sfputc_r>
 80181b4:	1c43      	adds	r3, r0, #1
 80181b6:	d1f3      	bne.n	80181a0 <__sfputs_r+0xa>
 80181b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080181bc <_vfiprintf_r>:
 80181bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c0:	460d      	mov	r5, r1
 80181c2:	b09d      	sub	sp, #116	; 0x74
 80181c4:	4614      	mov	r4, r2
 80181c6:	4698      	mov	r8, r3
 80181c8:	4606      	mov	r6, r0
 80181ca:	b118      	cbz	r0, 80181d4 <_vfiprintf_r+0x18>
 80181cc:	6a03      	ldr	r3, [r0, #32]
 80181ce:	b90b      	cbnz	r3, 80181d4 <_vfiprintf_r+0x18>
 80181d0:	f7ff fdb6 	bl	8017d40 <__sinit>
 80181d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80181d6:	07d9      	lsls	r1, r3, #31
 80181d8:	d405      	bmi.n	80181e6 <_vfiprintf_r+0x2a>
 80181da:	89ab      	ldrh	r3, [r5, #12]
 80181dc:	059a      	lsls	r2, r3, #22
 80181de:	d402      	bmi.n	80181e6 <_vfiprintf_r+0x2a>
 80181e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80181e2:	f7ff fedf 	bl	8017fa4 <__retarget_lock_acquire_recursive>
 80181e6:	89ab      	ldrh	r3, [r5, #12]
 80181e8:	071b      	lsls	r3, r3, #28
 80181ea:	d501      	bpl.n	80181f0 <_vfiprintf_r+0x34>
 80181ec:	692b      	ldr	r3, [r5, #16]
 80181ee:	b99b      	cbnz	r3, 8018218 <_vfiprintf_r+0x5c>
 80181f0:	4629      	mov	r1, r5
 80181f2:	4630      	mov	r0, r6
 80181f4:	f000 fb8a 	bl	801890c <__swsetup_r>
 80181f8:	b170      	cbz	r0, 8018218 <_vfiprintf_r+0x5c>
 80181fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80181fc:	07dc      	lsls	r4, r3, #31
 80181fe:	d504      	bpl.n	801820a <_vfiprintf_r+0x4e>
 8018200:	f04f 30ff 	mov.w	r0, #4294967295
 8018204:	b01d      	add	sp, #116	; 0x74
 8018206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801820a:	89ab      	ldrh	r3, [r5, #12]
 801820c:	0598      	lsls	r0, r3, #22
 801820e:	d4f7      	bmi.n	8018200 <_vfiprintf_r+0x44>
 8018210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018212:	f7ff fec8 	bl	8017fa6 <__retarget_lock_release_recursive>
 8018216:	e7f3      	b.n	8018200 <_vfiprintf_r+0x44>
 8018218:	2300      	movs	r3, #0
 801821a:	9309      	str	r3, [sp, #36]	; 0x24
 801821c:	2320      	movs	r3, #32
 801821e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018222:	f8cd 800c 	str.w	r8, [sp, #12]
 8018226:	2330      	movs	r3, #48	; 0x30
 8018228:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80183dc <_vfiprintf_r+0x220>
 801822c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018230:	f04f 0901 	mov.w	r9, #1
 8018234:	4623      	mov	r3, r4
 8018236:	469a      	mov	sl, r3
 8018238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801823c:	b10a      	cbz	r2, 8018242 <_vfiprintf_r+0x86>
 801823e:	2a25      	cmp	r2, #37	; 0x25
 8018240:	d1f9      	bne.n	8018236 <_vfiprintf_r+0x7a>
 8018242:	ebba 0b04 	subs.w	fp, sl, r4
 8018246:	d00b      	beq.n	8018260 <_vfiprintf_r+0xa4>
 8018248:	465b      	mov	r3, fp
 801824a:	4622      	mov	r2, r4
 801824c:	4629      	mov	r1, r5
 801824e:	4630      	mov	r0, r6
 8018250:	f7ff ffa1 	bl	8018196 <__sfputs_r>
 8018254:	3001      	adds	r0, #1
 8018256:	f000 80a9 	beq.w	80183ac <_vfiprintf_r+0x1f0>
 801825a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801825c:	445a      	add	r2, fp
 801825e:	9209      	str	r2, [sp, #36]	; 0x24
 8018260:	f89a 3000 	ldrb.w	r3, [sl]
 8018264:	2b00      	cmp	r3, #0
 8018266:	f000 80a1 	beq.w	80183ac <_vfiprintf_r+0x1f0>
 801826a:	2300      	movs	r3, #0
 801826c:	f04f 32ff 	mov.w	r2, #4294967295
 8018270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018274:	f10a 0a01 	add.w	sl, sl, #1
 8018278:	9304      	str	r3, [sp, #16]
 801827a:	9307      	str	r3, [sp, #28]
 801827c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018280:	931a      	str	r3, [sp, #104]	; 0x68
 8018282:	4654      	mov	r4, sl
 8018284:	2205      	movs	r2, #5
 8018286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801828a:	4854      	ldr	r0, [pc, #336]	; (80183dc <_vfiprintf_r+0x220>)
 801828c:	f7e7 ffd8 	bl	8000240 <memchr>
 8018290:	9a04      	ldr	r2, [sp, #16]
 8018292:	b9d8      	cbnz	r0, 80182cc <_vfiprintf_r+0x110>
 8018294:	06d1      	lsls	r1, r2, #27
 8018296:	bf44      	itt	mi
 8018298:	2320      	movmi	r3, #32
 801829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801829e:	0713      	lsls	r3, r2, #28
 80182a0:	bf44      	itt	mi
 80182a2:	232b      	movmi	r3, #43	; 0x2b
 80182a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80182a8:	f89a 3000 	ldrb.w	r3, [sl]
 80182ac:	2b2a      	cmp	r3, #42	; 0x2a
 80182ae:	d015      	beq.n	80182dc <_vfiprintf_r+0x120>
 80182b0:	9a07      	ldr	r2, [sp, #28]
 80182b2:	4654      	mov	r4, sl
 80182b4:	2000      	movs	r0, #0
 80182b6:	f04f 0c0a 	mov.w	ip, #10
 80182ba:	4621      	mov	r1, r4
 80182bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80182c0:	3b30      	subs	r3, #48	; 0x30
 80182c2:	2b09      	cmp	r3, #9
 80182c4:	d94d      	bls.n	8018362 <_vfiprintf_r+0x1a6>
 80182c6:	b1b0      	cbz	r0, 80182f6 <_vfiprintf_r+0x13a>
 80182c8:	9207      	str	r2, [sp, #28]
 80182ca:	e014      	b.n	80182f6 <_vfiprintf_r+0x13a>
 80182cc:	eba0 0308 	sub.w	r3, r0, r8
 80182d0:	fa09 f303 	lsl.w	r3, r9, r3
 80182d4:	4313      	orrs	r3, r2
 80182d6:	9304      	str	r3, [sp, #16]
 80182d8:	46a2      	mov	sl, r4
 80182da:	e7d2      	b.n	8018282 <_vfiprintf_r+0xc6>
 80182dc:	9b03      	ldr	r3, [sp, #12]
 80182de:	1d19      	adds	r1, r3, #4
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	9103      	str	r1, [sp, #12]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	bfbb      	ittet	lt
 80182e8:	425b      	neglt	r3, r3
 80182ea:	f042 0202 	orrlt.w	r2, r2, #2
 80182ee:	9307      	strge	r3, [sp, #28]
 80182f0:	9307      	strlt	r3, [sp, #28]
 80182f2:	bfb8      	it	lt
 80182f4:	9204      	strlt	r2, [sp, #16]
 80182f6:	7823      	ldrb	r3, [r4, #0]
 80182f8:	2b2e      	cmp	r3, #46	; 0x2e
 80182fa:	d10c      	bne.n	8018316 <_vfiprintf_r+0x15a>
 80182fc:	7863      	ldrb	r3, [r4, #1]
 80182fe:	2b2a      	cmp	r3, #42	; 0x2a
 8018300:	d134      	bne.n	801836c <_vfiprintf_r+0x1b0>
 8018302:	9b03      	ldr	r3, [sp, #12]
 8018304:	1d1a      	adds	r2, r3, #4
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	9203      	str	r2, [sp, #12]
 801830a:	2b00      	cmp	r3, #0
 801830c:	bfb8      	it	lt
 801830e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018312:	3402      	adds	r4, #2
 8018314:	9305      	str	r3, [sp, #20]
 8018316:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80183ec <_vfiprintf_r+0x230>
 801831a:	7821      	ldrb	r1, [r4, #0]
 801831c:	2203      	movs	r2, #3
 801831e:	4650      	mov	r0, sl
 8018320:	f7e7 ff8e 	bl	8000240 <memchr>
 8018324:	b138      	cbz	r0, 8018336 <_vfiprintf_r+0x17a>
 8018326:	9b04      	ldr	r3, [sp, #16]
 8018328:	eba0 000a 	sub.w	r0, r0, sl
 801832c:	2240      	movs	r2, #64	; 0x40
 801832e:	4082      	lsls	r2, r0
 8018330:	4313      	orrs	r3, r2
 8018332:	3401      	adds	r4, #1
 8018334:	9304      	str	r3, [sp, #16]
 8018336:	f814 1b01 	ldrb.w	r1, [r4], #1
 801833a:	4829      	ldr	r0, [pc, #164]	; (80183e0 <_vfiprintf_r+0x224>)
 801833c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018340:	2206      	movs	r2, #6
 8018342:	f7e7 ff7d 	bl	8000240 <memchr>
 8018346:	2800      	cmp	r0, #0
 8018348:	d03f      	beq.n	80183ca <_vfiprintf_r+0x20e>
 801834a:	4b26      	ldr	r3, [pc, #152]	; (80183e4 <_vfiprintf_r+0x228>)
 801834c:	bb1b      	cbnz	r3, 8018396 <_vfiprintf_r+0x1da>
 801834e:	9b03      	ldr	r3, [sp, #12]
 8018350:	3307      	adds	r3, #7
 8018352:	f023 0307 	bic.w	r3, r3, #7
 8018356:	3308      	adds	r3, #8
 8018358:	9303      	str	r3, [sp, #12]
 801835a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801835c:	443b      	add	r3, r7
 801835e:	9309      	str	r3, [sp, #36]	; 0x24
 8018360:	e768      	b.n	8018234 <_vfiprintf_r+0x78>
 8018362:	fb0c 3202 	mla	r2, ip, r2, r3
 8018366:	460c      	mov	r4, r1
 8018368:	2001      	movs	r0, #1
 801836a:	e7a6      	b.n	80182ba <_vfiprintf_r+0xfe>
 801836c:	2300      	movs	r3, #0
 801836e:	3401      	adds	r4, #1
 8018370:	9305      	str	r3, [sp, #20]
 8018372:	4619      	mov	r1, r3
 8018374:	f04f 0c0a 	mov.w	ip, #10
 8018378:	4620      	mov	r0, r4
 801837a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801837e:	3a30      	subs	r2, #48	; 0x30
 8018380:	2a09      	cmp	r2, #9
 8018382:	d903      	bls.n	801838c <_vfiprintf_r+0x1d0>
 8018384:	2b00      	cmp	r3, #0
 8018386:	d0c6      	beq.n	8018316 <_vfiprintf_r+0x15a>
 8018388:	9105      	str	r1, [sp, #20]
 801838a:	e7c4      	b.n	8018316 <_vfiprintf_r+0x15a>
 801838c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018390:	4604      	mov	r4, r0
 8018392:	2301      	movs	r3, #1
 8018394:	e7f0      	b.n	8018378 <_vfiprintf_r+0x1bc>
 8018396:	ab03      	add	r3, sp, #12
 8018398:	9300      	str	r3, [sp, #0]
 801839a:	462a      	mov	r2, r5
 801839c:	4b12      	ldr	r3, [pc, #72]	; (80183e8 <_vfiprintf_r+0x22c>)
 801839e:	a904      	add	r1, sp, #16
 80183a0:	4630      	mov	r0, r6
 80183a2:	f3af 8000 	nop.w
 80183a6:	4607      	mov	r7, r0
 80183a8:	1c78      	adds	r0, r7, #1
 80183aa:	d1d6      	bne.n	801835a <_vfiprintf_r+0x19e>
 80183ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80183ae:	07d9      	lsls	r1, r3, #31
 80183b0:	d405      	bmi.n	80183be <_vfiprintf_r+0x202>
 80183b2:	89ab      	ldrh	r3, [r5, #12]
 80183b4:	059a      	lsls	r2, r3, #22
 80183b6:	d402      	bmi.n	80183be <_vfiprintf_r+0x202>
 80183b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80183ba:	f7ff fdf4 	bl	8017fa6 <__retarget_lock_release_recursive>
 80183be:	89ab      	ldrh	r3, [r5, #12]
 80183c0:	065b      	lsls	r3, r3, #25
 80183c2:	f53f af1d 	bmi.w	8018200 <_vfiprintf_r+0x44>
 80183c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80183c8:	e71c      	b.n	8018204 <_vfiprintf_r+0x48>
 80183ca:	ab03      	add	r3, sp, #12
 80183cc:	9300      	str	r3, [sp, #0]
 80183ce:	462a      	mov	r2, r5
 80183d0:	4b05      	ldr	r3, [pc, #20]	; (80183e8 <_vfiprintf_r+0x22c>)
 80183d2:	a904      	add	r1, sp, #16
 80183d4:	4630      	mov	r0, r6
 80183d6:	f000 f879 	bl	80184cc <_printf_i>
 80183da:	e7e4      	b.n	80183a6 <_vfiprintf_r+0x1ea>
 80183dc:	0801e824 	.word	0x0801e824
 80183e0:	0801e82e 	.word	0x0801e82e
 80183e4:	00000000 	.word	0x00000000
 80183e8:	08018197 	.word	0x08018197
 80183ec:	0801e82a 	.word	0x0801e82a

080183f0 <_printf_common>:
 80183f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183f4:	4616      	mov	r6, r2
 80183f6:	4699      	mov	r9, r3
 80183f8:	688a      	ldr	r2, [r1, #8]
 80183fa:	690b      	ldr	r3, [r1, #16]
 80183fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018400:	4293      	cmp	r3, r2
 8018402:	bfb8      	it	lt
 8018404:	4613      	movlt	r3, r2
 8018406:	6033      	str	r3, [r6, #0]
 8018408:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801840c:	4607      	mov	r7, r0
 801840e:	460c      	mov	r4, r1
 8018410:	b10a      	cbz	r2, 8018416 <_printf_common+0x26>
 8018412:	3301      	adds	r3, #1
 8018414:	6033      	str	r3, [r6, #0]
 8018416:	6823      	ldr	r3, [r4, #0]
 8018418:	0699      	lsls	r1, r3, #26
 801841a:	bf42      	ittt	mi
 801841c:	6833      	ldrmi	r3, [r6, #0]
 801841e:	3302      	addmi	r3, #2
 8018420:	6033      	strmi	r3, [r6, #0]
 8018422:	6825      	ldr	r5, [r4, #0]
 8018424:	f015 0506 	ands.w	r5, r5, #6
 8018428:	d106      	bne.n	8018438 <_printf_common+0x48>
 801842a:	f104 0a19 	add.w	sl, r4, #25
 801842e:	68e3      	ldr	r3, [r4, #12]
 8018430:	6832      	ldr	r2, [r6, #0]
 8018432:	1a9b      	subs	r3, r3, r2
 8018434:	42ab      	cmp	r3, r5
 8018436:	dc26      	bgt.n	8018486 <_printf_common+0x96>
 8018438:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801843c:	1e13      	subs	r3, r2, #0
 801843e:	6822      	ldr	r2, [r4, #0]
 8018440:	bf18      	it	ne
 8018442:	2301      	movne	r3, #1
 8018444:	0692      	lsls	r2, r2, #26
 8018446:	d42b      	bmi.n	80184a0 <_printf_common+0xb0>
 8018448:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801844c:	4649      	mov	r1, r9
 801844e:	4638      	mov	r0, r7
 8018450:	47c0      	blx	r8
 8018452:	3001      	adds	r0, #1
 8018454:	d01e      	beq.n	8018494 <_printf_common+0xa4>
 8018456:	6823      	ldr	r3, [r4, #0]
 8018458:	6922      	ldr	r2, [r4, #16]
 801845a:	f003 0306 	and.w	r3, r3, #6
 801845e:	2b04      	cmp	r3, #4
 8018460:	bf02      	ittt	eq
 8018462:	68e5      	ldreq	r5, [r4, #12]
 8018464:	6833      	ldreq	r3, [r6, #0]
 8018466:	1aed      	subeq	r5, r5, r3
 8018468:	68a3      	ldr	r3, [r4, #8]
 801846a:	bf0c      	ite	eq
 801846c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018470:	2500      	movne	r5, #0
 8018472:	4293      	cmp	r3, r2
 8018474:	bfc4      	itt	gt
 8018476:	1a9b      	subgt	r3, r3, r2
 8018478:	18ed      	addgt	r5, r5, r3
 801847a:	2600      	movs	r6, #0
 801847c:	341a      	adds	r4, #26
 801847e:	42b5      	cmp	r5, r6
 8018480:	d11a      	bne.n	80184b8 <_printf_common+0xc8>
 8018482:	2000      	movs	r0, #0
 8018484:	e008      	b.n	8018498 <_printf_common+0xa8>
 8018486:	2301      	movs	r3, #1
 8018488:	4652      	mov	r2, sl
 801848a:	4649      	mov	r1, r9
 801848c:	4638      	mov	r0, r7
 801848e:	47c0      	blx	r8
 8018490:	3001      	adds	r0, #1
 8018492:	d103      	bne.n	801849c <_printf_common+0xac>
 8018494:	f04f 30ff 	mov.w	r0, #4294967295
 8018498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801849c:	3501      	adds	r5, #1
 801849e:	e7c6      	b.n	801842e <_printf_common+0x3e>
 80184a0:	18e1      	adds	r1, r4, r3
 80184a2:	1c5a      	adds	r2, r3, #1
 80184a4:	2030      	movs	r0, #48	; 0x30
 80184a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80184aa:	4422      	add	r2, r4
 80184ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80184b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80184b4:	3302      	adds	r3, #2
 80184b6:	e7c7      	b.n	8018448 <_printf_common+0x58>
 80184b8:	2301      	movs	r3, #1
 80184ba:	4622      	mov	r2, r4
 80184bc:	4649      	mov	r1, r9
 80184be:	4638      	mov	r0, r7
 80184c0:	47c0      	blx	r8
 80184c2:	3001      	adds	r0, #1
 80184c4:	d0e6      	beq.n	8018494 <_printf_common+0xa4>
 80184c6:	3601      	adds	r6, #1
 80184c8:	e7d9      	b.n	801847e <_printf_common+0x8e>
	...

080184cc <_printf_i>:
 80184cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80184d0:	7e0f      	ldrb	r7, [r1, #24]
 80184d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184d4:	2f78      	cmp	r7, #120	; 0x78
 80184d6:	4691      	mov	r9, r2
 80184d8:	4680      	mov	r8, r0
 80184da:	460c      	mov	r4, r1
 80184dc:	469a      	mov	sl, r3
 80184de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80184e2:	d807      	bhi.n	80184f4 <_printf_i+0x28>
 80184e4:	2f62      	cmp	r7, #98	; 0x62
 80184e6:	d80a      	bhi.n	80184fe <_printf_i+0x32>
 80184e8:	2f00      	cmp	r7, #0
 80184ea:	f000 80d4 	beq.w	8018696 <_printf_i+0x1ca>
 80184ee:	2f58      	cmp	r7, #88	; 0x58
 80184f0:	f000 80c0 	beq.w	8018674 <_printf_i+0x1a8>
 80184f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80184fc:	e03a      	b.n	8018574 <_printf_i+0xa8>
 80184fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018502:	2b15      	cmp	r3, #21
 8018504:	d8f6      	bhi.n	80184f4 <_printf_i+0x28>
 8018506:	a101      	add	r1, pc, #4	; (adr r1, 801850c <_printf_i+0x40>)
 8018508:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801850c:	08018565 	.word	0x08018565
 8018510:	08018579 	.word	0x08018579
 8018514:	080184f5 	.word	0x080184f5
 8018518:	080184f5 	.word	0x080184f5
 801851c:	080184f5 	.word	0x080184f5
 8018520:	080184f5 	.word	0x080184f5
 8018524:	08018579 	.word	0x08018579
 8018528:	080184f5 	.word	0x080184f5
 801852c:	080184f5 	.word	0x080184f5
 8018530:	080184f5 	.word	0x080184f5
 8018534:	080184f5 	.word	0x080184f5
 8018538:	0801867d 	.word	0x0801867d
 801853c:	080185a5 	.word	0x080185a5
 8018540:	08018637 	.word	0x08018637
 8018544:	080184f5 	.word	0x080184f5
 8018548:	080184f5 	.word	0x080184f5
 801854c:	0801869f 	.word	0x0801869f
 8018550:	080184f5 	.word	0x080184f5
 8018554:	080185a5 	.word	0x080185a5
 8018558:	080184f5 	.word	0x080184f5
 801855c:	080184f5 	.word	0x080184f5
 8018560:	0801863f 	.word	0x0801863f
 8018564:	682b      	ldr	r3, [r5, #0]
 8018566:	1d1a      	adds	r2, r3, #4
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	602a      	str	r2, [r5, #0]
 801856c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018570:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018574:	2301      	movs	r3, #1
 8018576:	e09f      	b.n	80186b8 <_printf_i+0x1ec>
 8018578:	6820      	ldr	r0, [r4, #0]
 801857a:	682b      	ldr	r3, [r5, #0]
 801857c:	0607      	lsls	r7, r0, #24
 801857e:	f103 0104 	add.w	r1, r3, #4
 8018582:	6029      	str	r1, [r5, #0]
 8018584:	d501      	bpl.n	801858a <_printf_i+0xbe>
 8018586:	681e      	ldr	r6, [r3, #0]
 8018588:	e003      	b.n	8018592 <_printf_i+0xc6>
 801858a:	0646      	lsls	r6, r0, #25
 801858c:	d5fb      	bpl.n	8018586 <_printf_i+0xba>
 801858e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018592:	2e00      	cmp	r6, #0
 8018594:	da03      	bge.n	801859e <_printf_i+0xd2>
 8018596:	232d      	movs	r3, #45	; 0x2d
 8018598:	4276      	negs	r6, r6
 801859a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801859e:	485a      	ldr	r0, [pc, #360]	; (8018708 <_printf_i+0x23c>)
 80185a0:	230a      	movs	r3, #10
 80185a2:	e012      	b.n	80185ca <_printf_i+0xfe>
 80185a4:	682b      	ldr	r3, [r5, #0]
 80185a6:	6820      	ldr	r0, [r4, #0]
 80185a8:	1d19      	adds	r1, r3, #4
 80185aa:	6029      	str	r1, [r5, #0]
 80185ac:	0605      	lsls	r5, r0, #24
 80185ae:	d501      	bpl.n	80185b4 <_printf_i+0xe8>
 80185b0:	681e      	ldr	r6, [r3, #0]
 80185b2:	e002      	b.n	80185ba <_printf_i+0xee>
 80185b4:	0641      	lsls	r1, r0, #25
 80185b6:	d5fb      	bpl.n	80185b0 <_printf_i+0xe4>
 80185b8:	881e      	ldrh	r6, [r3, #0]
 80185ba:	4853      	ldr	r0, [pc, #332]	; (8018708 <_printf_i+0x23c>)
 80185bc:	2f6f      	cmp	r7, #111	; 0x6f
 80185be:	bf0c      	ite	eq
 80185c0:	2308      	moveq	r3, #8
 80185c2:	230a      	movne	r3, #10
 80185c4:	2100      	movs	r1, #0
 80185c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80185ca:	6865      	ldr	r5, [r4, #4]
 80185cc:	60a5      	str	r5, [r4, #8]
 80185ce:	2d00      	cmp	r5, #0
 80185d0:	bfa2      	ittt	ge
 80185d2:	6821      	ldrge	r1, [r4, #0]
 80185d4:	f021 0104 	bicge.w	r1, r1, #4
 80185d8:	6021      	strge	r1, [r4, #0]
 80185da:	b90e      	cbnz	r6, 80185e0 <_printf_i+0x114>
 80185dc:	2d00      	cmp	r5, #0
 80185de:	d04b      	beq.n	8018678 <_printf_i+0x1ac>
 80185e0:	4615      	mov	r5, r2
 80185e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80185e6:	fb03 6711 	mls	r7, r3, r1, r6
 80185ea:	5dc7      	ldrb	r7, [r0, r7]
 80185ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80185f0:	4637      	mov	r7, r6
 80185f2:	42bb      	cmp	r3, r7
 80185f4:	460e      	mov	r6, r1
 80185f6:	d9f4      	bls.n	80185e2 <_printf_i+0x116>
 80185f8:	2b08      	cmp	r3, #8
 80185fa:	d10b      	bne.n	8018614 <_printf_i+0x148>
 80185fc:	6823      	ldr	r3, [r4, #0]
 80185fe:	07de      	lsls	r6, r3, #31
 8018600:	d508      	bpl.n	8018614 <_printf_i+0x148>
 8018602:	6923      	ldr	r3, [r4, #16]
 8018604:	6861      	ldr	r1, [r4, #4]
 8018606:	4299      	cmp	r1, r3
 8018608:	bfde      	ittt	le
 801860a:	2330      	movle	r3, #48	; 0x30
 801860c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018610:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018614:	1b52      	subs	r2, r2, r5
 8018616:	6122      	str	r2, [r4, #16]
 8018618:	f8cd a000 	str.w	sl, [sp]
 801861c:	464b      	mov	r3, r9
 801861e:	aa03      	add	r2, sp, #12
 8018620:	4621      	mov	r1, r4
 8018622:	4640      	mov	r0, r8
 8018624:	f7ff fee4 	bl	80183f0 <_printf_common>
 8018628:	3001      	adds	r0, #1
 801862a:	d14a      	bne.n	80186c2 <_printf_i+0x1f6>
 801862c:	f04f 30ff 	mov.w	r0, #4294967295
 8018630:	b004      	add	sp, #16
 8018632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018636:	6823      	ldr	r3, [r4, #0]
 8018638:	f043 0320 	orr.w	r3, r3, #32
 801863c:	6023      	str	r3, [r4, #0]
 801863e:	4833      	ldr	r0, [pc, #204]	; (801870c <_printf_i+0x240>)
 8018640:	2778      	movs	r7, #120	; 0x78
 8018642:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018646:	6823      	ldr	r3, [r4, #0]
 8018648:	6829      	ldr	r1, [r5, #0]
 801864a:	061f      	lsls	r7, r3, #24
 801864c:	f851 6b04 	ldr.w	r6, [r1], #4
 8018650:	d402      	bmi.n	8018658 <_printf_i+0x18c>
 8018652:	065f      	lsls	r7, r3, #25
 8018654:	bf48      	it	mi
 8018656:	b2b6      	uxthmi	r6, r6
 8018658:	07df      	lsls	r7, r3, #31
 801865a:	bf48      	it	mi
 801865c:	f043 0320 	orrmi.w	r3, r3, #32
 8018660:	6029      	str	r1, [r5, #0]
 8018662:	bf48      	it	mi
 8018664:	6023      	strmi	r3, [r4, #0]
 8018666:	b91e      	cbnz	r6, 8018670 <_printf_i+0x1a4>
 8018668:	6823      	ldr	r3, [r4, #0]
 801866a:	f023 0320 	bic.w	r3, r3, #32
 801866e:	6023      	str	r3, [r4, #0]
 8018670:	2310      	movs	r3, #16
 8018672:	e7a7      	b.n	80185c4 <_printf_i+0xf8>
 8018674:	4824      	ldr	r0, [pc, #144]	; (8018708 <_printf_i+0x23c>)
 8018676:	e7e4      	b.n	8018642 <_printf_i+0x176>
 8018678:	4615      	mov	r5, r2
 801867a:	e7bd      	b.n	80185f8 <_printf_i+0x12c>
 801867c:	682b      	ldr	r3, [r5, #0]
 801867e:	6826      	ldr	r6, [r4, #0]
 8018680:	6961      	ldr	r1, [r4, #20]
 8018682:	1d18      	adds	r0, r3, #4
 8018684:	6028      	str	r0, [r5, #0]
 8018686:	0635      	lsls	r5, r6, #24
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	d501      	bpl.n	8018690 <_printf_i+0x1c4>
 801868c:	6019      	str	r1, [r3, #0]
 801868e:	e002      	b.n	8018696 <_printf_i+0x1ca>
 8018690:	0670      	lsls	r0, r6, #25
 8018692:	d5fb      	bpl.n	801868c <_printf_i+0x1c0>
 8018694:	8019      	strh	r1, [r3, #0]
 8018696:	2300      	movs	r3, #0
 8018698:	6123      	str	r3, [r4, #16]
 801869a:	4615      	mov	r5, r2
 801869c:	e7bc      	b.n	8018618 <_printf_i+0x14c>
 801869e:	682b      	ldr	r3, [r5, #0]
 80186a0:	1d1a      	adds	r2, r3, #4
 80186a2:	602a      	str	r2, [r5, #0]
 80186a4:	681d      	ldr	r5, [r3, #0]
 80186a6:	6862      	ldr	r2, [r4, #4]
 80186a8:	2100      	movs	r1, #0
 80186aa:	4628      	mov	r0, r5
 80186ac:	f7e7 fdc8 	bl	8000240 <memchr>
 80186b0:	b108      	cbz	r0, 80186b6 <_printf_i+0x1ea>
 80186b2:	1b40      	subs	r0, r0, r5
 80186b4:	6060      	str	r0, [r4, #4]
 80186b6:	6863      	ldr	r3, [r4, #4]
 80186b8:	6123      	str	r3, [r4, #16]
 80186ba:	2300      	movs	r3, #0
 80186bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186c0:	e7aa      	b.n	8018618 <_printf_i+0x14c>
 80186c2:	6923      	ldr	r3, [r4, #16]
 80186c4:	462a      	mov	r2, r5
 80186c6:	4649      	mov	r1, r9
 80186c8:	4640      	mov	r0, r8
 80186ca:	47d0      	blx	sl
 80186cc:	3001      	adds	r0, #1
 80186ce:	d0ad      	beq.n	801862c <_printf_i+0x160>
 80186d0:	6823      	ldr	r3, [r4, #0]
 80186d2:	079b      	lsls	r3, r3, #30
 80186d4:	d413      	bmi.n	80186fe <_printf_i+0x232>
 80186d6:	68e0      	ldr	r0, [r4, #12]
 80186d8:	9b03      	ldr	r3, [sp, #12]
 80186da:	4298      	cmp	r0, r3
 80186dc:	bfb8      	it	lt
 80186de:	4618      	movlt	r0, r3
 80186e0:	e7a6      	b.n	8018630 <_printf_i+0x164>
 80186e2:	2301      	movs	r3, #1
 80186e4:	4632      	mov	r2, r6
 80186e6:	4649      	mov	r1, r9
 80186e8:	4640      	mov	r0, r8
 80186ea:	47d0      	blx	sl
 80186ec:	3001      	adds	r0, #1
 80186ee:	d09d      	beq.n	801862c <_printf_i+0x160>
 80186f0:	3501      	adds	r5, #1
 80186f2:	68e3      	ldr	r3, [r4, #12]
 80186f4:	9903      	ldr	r1, [sp, #12]
 80186f6:	1a5b      	subs	r3, r3, r1
 80186f8:	42ab      	cmp	r3, r5
 80186fa:	dcf2      	bgt.n	80186e2 <_printf_i+0x216>
 80186fc:	e7eb      	b.n	80186d6 <_printf_i+0x20a>
 80186fe:	2500      	movs	r5, #0
 8018700:	f104 0619 	add.w	r6, r4, #25
 8018704:	e7f5      	b.n	80186f2 <_printf_i+0x226>
 8018706:	bf00      	nop
 8018708:	0801e835 	.word	0x0801e835
 801870c:	0801e846 	.word	0x0801e846

08018710 <__sflush_r>:
 8018710:	898a      	ldrh	r2, [r1, #12]
 8018712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018716:	4605      	mov	r5, r0
 8018718:	0710      	lsls	r0, r2, #28
 801871a:	460c      	mov	r4, r1
 801871c:	d458      	bmi.n	80187d0 <__sflush_r+0xc0>
 801871e:	684b      	ldr	r3, [r1, #4]
 8018720:	2b00      	cmp	r3, #0
 8018722:	dc05      	bgt.n	8018730 <__sflush_r+0x20>
 8018724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018726:	2b00      	cmp	r3, #0
 8018728:	dc02      	bgt.n	8018730 <__sflush_r+0x20>
 801872a:	2000      	movs	r0, #0
 801872c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018732:	2e00      	cmp	r6, #0
 8018734:	d0f9      	beq.n	801872a <__sflush_r+0x1a>
 8018736:	2300      	movs	r3, #0
 8018738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801873c:	682f      	ldr	r7, [r5, #0]
 801873e:	6a21      	ldr	r1, [r4, #32]
 8018740:	602b      	str	r3, [r5, #0]
 8018742:	d032      	beq.n	80187aa <__sflush_r+0x9a>
 8018744:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018746:	89a3      	ldrh	r3, [r4, #12]
 8018748:	075a      	lsls	r2, r3, #29
 801874a:	d505      	bpl.n	8018758 <__sflush_r+0x48>
 801874c:	6863      	ldr	r3, [r4, #4]
 801874e:	1ac0      	subs	r0, r0, r3
 8018750:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018752:	b10b      	cbz	r3, 8018758 <__sflush_r+0x48>
 8018754:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018756:	1ac0      	subs	r0, r0, r3
 8018758:	2300      	movs	r3, #0
 801875a:	4602      	mov	r2, r0
 801875c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801875e:	6a21      	ldr	r1, [r4, #32]
 8018760:	4628      	mov	r0, r5
 8018762:	47b0      	blx	r6
 8018764:	1c43      	adds	r3, r0, #1
 8018766:	89a3      	ldrh	r3, [r4, #12]
 8018768:	d106      	bne.n	8018778 <__sflush_r+0x68>
 801876a:	6829      	ldr	r1, [r5, #0]
 801876c:	291d      	cmp	r1, #29
 801876e:	d82b      	bhi.n	80187c8 <__sflush_r+0xb8>
 8018770:	4a29      	ldr	r2, [pc, #164]	; (8018818 <__sflush_r+0x108>)
 8018772:	410a      	asrs	r2, r1
 8018774:	07d6      	lsls	r6, r2, #31
 8018776:	d427      	bmi.n	80187c8 <__sflush_r+0xb8>
 8018778:	2200      	movs	r2, #0
 801877a:	6062      	str	r2, [r4, #4]
 801877c:	04d9      	lsls	r1, r3, #19
 801877e:	6922      	ldr	r2, [r4, #16]
 8018780:	6022      	str	r2, [r4, #0]
 8018782:	d504      	bpl.n	801878e <__sflush_r+0x7e>
 8018784:	1c42      	adds	r2, r0, #1
 8018786:	d101      	bne.n	801878c <__sflush_r+0x7c>
 8018788:	682b      	ldr	r3, [r5, #0]
 801878a:	b903      	cbnz	r3, 801878e <__sflush_r+0x7e>
 801878c:	6560      	str	r0, [r4, #84]	; 0x54
 801878e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018790:	602f      	str	r7, [r5, #0]
 8018792:	2900      	cmp	r1, #0
 8018794:	d0c9      	beq.n	801872a <__sflush_r+0x1a>
 8018796:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801879a:	4299      	cmp	r1, r3
 801879c:	d002      	beq.n	80187a4 <__sflush_r+0x94>
 801879e:	4628      	mov	r0, r5
 80187a0:	f000 f924 	bl	80189ec <_free_r>
 80187a4:	2000      	movs	r0, #0
 80187a6:	6360      	str	r0, [r4, #52]	; 0x34
 80187a8:	e7c0      	b.n	801872c <__sflush_r+0x1c>
 80187aa:	2301      	movs	r3, #1
 80187ac:	4628      	mov	r0, r5
 80187ae:	47b0      	blx	r6
 80187b0:	1c41      	adds	r1, r0, #1
 80187b2:	d1c8      	bne.n	8018746 <__sflush_r+0x36>
 80187b4:	682b      	ldr	r3, [r5, #0]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d0c5      	beq.n	8018746 <__sflush_r+0x36>
 80187ba:	2b1d      	cmp	r3, #29
 80187bc:	d001      	beq.n	80187c2 <__sflush_r+0xb2>
 80187be:	2b16      	cmp	r3, #22
 80187c0:	d101      	bne.n	80187c6 <__sflush_r+0xb6>
 80187c2:	602f      	str	r7, [r5, #0]
 80187c4:	e7b1      	b.n	801872a <__sflush_r+0x1a>
 80187c6:	89a3      	ldrh	r3, [r4, #12]
 80187c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187cc:	81a3      	strh	r3, [r4, #12]
 80187ce:	e7ad      	b.n	801872c <__sflush_r+0x1c>
 80187d0:	690f      	ldr	r7, [r1, #16]
 80187d2:	2f00      	cmp	r7, #0
 80187d4:	d0a9      	beq.n	801872a <__sflush_r+0x1a>
 80187d6:	0793      	lsls	r3, r2, #30
 80187d8:	680e      	ldr	r6, [r1, #0]
 80187da:	bf08      	it	eq
 80187dc:	694b      	ldreq	r3, [r1, #20]
 80187de:	600f      	str	r7, [r1, #0]
 80187e0:	bf18      	it	ne
 80187e2:	2300      	movne	r3, #0
 80187e4:	eba6 0807 	sub.w	r8, r6, r7
 80187e8:	608b      	str	r3, [r1, #8]
 80187ea:	f1b8 0f00 	cmp.w	r8, #0
 80187ee:	dd9c      	ble.n	801872a <__sflush_r+0x1a>
 80187f0:	6a21      	ldr	r1, [r4, #32]
 80187f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80187f4:	4643      	mov	r3, r8
 80187f6:	463a      	mov	r2, r7
 80187f8:	4628      	mov	r0, r5
 80187fa:	47b0      	blx	r6
 80187fc:	2800      	cmp	r0, #0
 80187fe:	dc06      	bgt.n	801880e <__sflush_r+0xfe>
 8018800:	89a3      	ldrh	r3, [r4, #12]
 8018802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018806:	81a3      	strh	r3, [r4, #12]
 8018808:	f04f 30ff 	mov.w	r0, #4294967295
 801880c:	e78e      	b.n	801872c <__sflush_r+0x1c>
 801880e:	4407      	add	r7, r0
 8018810:	eba8 0800 	sub.w	r8, r8, r0
 8018814:	e7e9      	b.n	80187ea <__sflush_r+0xda>
 8018816:	bf00      	nop
 8018818:	dfbffffe 	.word	0xdfbffffe

0801881c <_fflush_r>:
 801881c:	b538      	push	{r3, r4, r5, lr}
 801881e:	690b      	ldr	r3, [r1, #16]
 8018820:	4605      	mov	r5, r0
 8018822:	460c      	mov	r4, r1
 8018824:	b913      	cbnz	r3, 801882c <_fflush_r+0x10>
 8018826:	2500      	movs	r5, #0
 8018828:	4628      	mov	r0, r5
 801882a:	bd38      	pop	{r3, r4, r5, pc}
 801882c:	b118      	cbz	r0, 8018836 <_fflush_r+0x1a>
 801882e:	6a03      	ldr	r3, [r0, #32]
 8018830:	b90b      	cbnz	r3, 8018836 <_fflush_r+0x1a>
 8018832:	f7ff fa85 	bl	8017d40 <__sinit>
 8018836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801883a:	2b00      	cmp	r3, #0
 801883c:	d0f3      	beq.n	8018826 <_fflush_r+0xa>
 801883e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018840:	07d0      	lsls	r0, r2, #31
 8018842:	d404      	bmi.n	801884e <_fflush_r+0x32>
 8018844:	0599      	lsls	r1, r3, #22
 8018846:	d402      	bmi.n	801884e <_fflush_r+0x32>
 8018848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801884a:	f7ff fbab 	bl	8017fa4 <__retarget_lock_acquire_recursive>
 801884e:	4628      	mov	r0, r5
 8018850:	4621      	mov	r1, r4
 8018852:	f7ff ff5d 	bl	8018710 <__sflush_r>
 8018856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018858:	07da      	lsls	r2, r3, #31
 801885a:	4605      	mov	r5, r0
 801885c:	d4e4      	bmi.n	8018828 <_fflush_r+0xc>
 801885e:	89a3      	ldrh	r3, [r4, #12]
 8018860:	059b      	lsls	r3, r3, #22
 8018862:	d4e1      	bmi.n	8018828 <_fflush_r+0xc>
 8018864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018866:	f7ff fb9e 	bl	8017fa6 <__retarget_lock_release_recursive>
 801886a:	e7dd      	b.n	8018828 <_fflush_r+0xc>

0801886c <fiprintf>:
 801886c:	b40e      	push	{r1, r2, r3}
 801886e:	b503      	push	{r0, r1, lr}
 8018870:	4601      	mov	r1, r0
 8018872:	ab03      	add	r3, sp, #12
 8018874:	4805      	ldr	r0, [pc, #20]	; (801888c <fiprintf+0x20>)
 8018876:	f853 2b04 	ldr.w	r2, [r3], #4
 801887a:	6800      	ldr	r0, [r0, #0]
 801887c:	9301      	str	r3, [sp, #4]
 801887e:	f7ff fc9d 	bl	80181bc <_vfiprintf_r>
 8018882:	b002      	add	sp, #8
 8018884:	f85d eb04 	ldr.w	lr, [sp], #4
 8018888:	b003      	add	sp, #12
 801888a:	4770      	bx	lr
 801888c:	2000009c 	.word	0x2000009c

08018890 <__swbuf_r>:
 8018890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018892:	460e      	mov	r6, r1
 8018894:	4614      	mov	r4, r2
 8018896:	4605      	mov	r5, r0
 8018898:	b118      	cbz	r0, 80188a2 <__swbuf_r+0x12>
 801889a:	6a03      	ldr	r3, [r0, #32]
 801889c:	b90b      	cbnz	r3, 80188a2 <__swbuf_r+0x12>
 801889e:	f7ff fa4f 	bl	8017d40 <__sinit>
 80188a2:	69a3      	ldr	r3, [r4, #24]
 80188a4:	60a3      	str	r3, [r4, #8]
 80188a6:	89a3      	ldrh	r3, [r4, #12]
 80188a8:	071a      	lsls	r2, r3, #28
 80188aa:	d525      	bpl.n	80188f8 <__swbuf_r+0x68>
 80188ac:	6923      	ldr	r3, [r4, #16]
 80188ae:	b31b      	cbz	r3, 80188f8 <__swbuf_r+0x68>
 80188b0:	6823      	ldr	r3, [r4, #0]
 80188b2:	6922      	ldr	r2, [r4, #16]
 80188b4:	1a98      	subs	r0, r3, r2
 80188b6:	6963      	ldr	r3, [r4, #20]
 80188b8:	b2f6      	uxtb	r6, r6
 80188ba:	4283      	cmp	r3, r0
 80188bc:	4637      	mov	r7, r6
 80188be:	dc04      	bgt.n	80188ca <__swbuf_r+0x3a>
 80188c0:	4621      	mov	r1, r4
 80188c2:	4628      	mov	r0, r5
 80188c4:	f7ff ffaa 	bl	801881c <_fflush_r>
 80188c8:	b9e0      	cbnz	r0, 8018904 <__swbuf_r+0x74>
 80188ca:	68a3      	ldr	r3, [r4, #8]
 80188cc:	3b01      	subs	r3, #1
 80188ce:	60a3      	str	r3, [r4, #8]
 80188d0:	6823      	ldr	r3, [r4, #0]
 80188d2:	1c5a      	adds	r2, r3, #1
 80188d4:	6022      	str	r2, [r4, #0]
 80188d6:	701e      	strb	r6, [r3, #0]
 80188d8:	6962      	ldr	r2, [r4, #20]
 80188da:	1c43      	adds	r3, r0, #1
 80188dc:	429a      	cmp	r2, r3
 80188de:	d004      	beq.n	80188ea <__swbuf_r+0x5a>
 80188e0:	89a3      	ldrh	r3, [r4, #12]
 80188e2:	07db      	lsls	r3, r3, #31
 80188e4:	d506      	bpl.n	80188f4 <__swbuf_r+0x64>
 80188e6:	2e0a      	cmp	r6, #10
 80188e8:	d104      	bne.n	80188f4 <__swbuf_r+0x64>
 80188ea:	4621      	mov	r1, r4
 80188ec:	4628      	mov	r0, r5
 80188ee:	f7ff ff95 	bl	801881c <_fflush_r>
 80188f2:	b938      	cbnz	r0, 8018904 <__swbuf_r+0x74>
 80188f4:	4638      	mov	r0, r7
 80188f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80188f8:	4621      	mov	r1, r4
 80188fa:	4628      	mov	r0, r5
 80188fc:	f000 f806 	bl	801890c <__swsetup_r>
 8018900:	2800      	cmp	r0, #0
 8018902:	d0d5      	beq.n	80188b0 <__swbuf_r+0x20>
 8018904:	f04f 37ff 	mov.w	r7, #4294967295
 8018908:	e7f4      	b.n	80188f4 <__swbuf_r+0x64>
	...

0801890c <__swsetup_r>:
 801890c:	b538      	push	{r3, r4, r5, lr}
 801890e:	4b2a      	ldr	r3, [pc, #168]	; (80189b8 <__swsetup_r+0xac>)
 8018910:	4605      	mov	r5, r0
 8018912:	6818      	ldr	r0, [r3, #0]
 8018914:	460c      	mov	r4, r1
 8018916:	b118      	cbz	r0, 8018920 <__swsetup_r+0x14>
 8018918:	6a03      	ldr	r3, [r0, #32]
 801891a:	b90b      	cbnz	r3, 8018920 <__swsetup_r+0x14>
 801891c:	f7ff fa10 	bl	8017d40 <__sinit>
 8018920:	89a3      	ldrh	r3, [r4, #12]
 8018922:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018926:	0718      	lsls	r0, r3, #28
 8018928:	d422      	bmi.n	8018970 <__swsetup_r+0x64>
 801892a:	06d9      	lsls	r1, r3, #27
 801892c:	d407      	bmi.n	801893e <__swsetup_r+0x32>
 801892e:	2309      	movs	r3, #9
 8018930:	602b      	str	r3, [r5, #0]
 8018932:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018936:	81a3      	strh	r3, [r4, #12]
 8018938:	f04f 30ff 	mov.w	r0, #4294967295
 801893c:	e034      	b.n	80189a8 <__swsetup_r+0x9c>
 801893e:	0758      	lsls	r0, r3, #29
 8018940:	d512      	bpl.n	8018968 <__swsetup_r+0x5c>
 8018942:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018944:	b141      	cbz	r1, 8018958 <__swsetup_r+0x4c>
 8018946:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801894a:	4299      	cmp	r1, r3
 801894c:	d002      	beq.n	8018954 <__swsetup_r+0x48>
 801894e:	4628      	mov	r0, r5
 8018950:	f000 f84c 	bl	80189ec <_free_r>
 8018954:	2300      	movs	r3, #0
 8018956:	6363      	str	r3, [r4, #52]	; 0x34
 8018958:	89a3      	ldrh	r3, [r4, #12]
 801895a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801895e:	81a3      	strh	r3, [r4, #12]
 8018960:	2300      	movs	r3, #0
 8018962:	6063      	str	r3, [r4, #4]
 8018964:	6923      	ldr	r3, [r4, #16]
 8018966:	6023      	str	r3, [r4, #0]
 8018968:	89a3      	ldrh	r3, [r4, #12]
 801896a:	f043 0308 	orr.w	r3, r3, #8
 801896e:	81a3      	strh	r3, [r4, #12]
 8018970:	6923      	ldr	r3, [r4, #16]
 8018972:	b94b      	cbnz	r3, 8018988 <__swsetup_r+0x7c>
 8018974:	89a3      	ldrh	r3, [r4, #12]
 8018976:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801897a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801897e:	d003      	beq.n	8018988 <__swsetup_r+0x7c>
 8018980:	4621      	mov	r1, r4
 8018982:	4628      	mov	r0, r5
 8018984:	f000 f8a4 	bl	8018ad0 <__smakebuf_r>
 8018988:	89a0      	ldrh	r0, [r4, #12]
 801898a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801898e:	f010 0301 	ands.w	r3, r0, #1
 8018992:	d00a      	beq.n	80189aa <__swsetup_r+0x9e>
 8018994:	2300      	movs	r3, #0
 8018996:	60a3      	str	r3, [r4, #8]
 8018998:	6963      	ldr	r3, [r4, #20]
 801899a:	425b      	negs	r3, r3
 801899c:	61a3      	str	r3, [r4, #24]
 801899e:	6923      	ldr	r3, [r4, #16]
 80189a0:	b943      	cbnz	r3, 80189b4 <__swsetup_r+0xa8>
 80189a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80189a6:	d1c4      	bne.n	8018932 <__swsetup_r+0x26>
 80189a8:	bd38      	pop	{r3, r4, r5, pc}
 80189aa:	0781      	lsls	r1, r0, #30
 80189ac:	bf58      	it	pl
 80189ae:	6963      	ldrpl	r3, [r4, #20]
 80189b0:	60a3      	str	r3, [r4, #8]
 80189b2:	e7f4      	b.n	801899e <__swsetup_r+0x92>
 80189b4:	2000      	movs	r0, #0
 80189b6:	e7f7      	b.n	80189a8 <__swsetup_r+0x9c>
 80189b8:	2000009c 	.word	0x2000009c

080189bc <_sbrk_r>:
 80189bc:	b538      	push	{r3, r4, r5, lr}
 80189be:	4d06      	ldr	r5, [pc, #24]	; (80189d8 <_sbrk_r+0x1c>)
 80189c0:	2300      	movs	r3, #0
 80189c2:	4604      	mov	r4, r0
 80189c4:	4608      	mov	r0, r1
 80189c6:	602b      	str	r3, [r5, #0]
 80189c8:	f7e8 fbc8 	bl	800115c <_sbrk>
 80189cc:	1c43      	adds	r3, r0, #1
 80189ce:	d102      	bne.n	80189d6 <_sbrk_r+0x1a>
 80189d0:	682b      	ldr	r3, [r5, #0]
 80189d2:	b103      	cbz	r3, 80189d6 <_sbrk_r+0x1a>
 80189d4:	6023      	str	r3, [r4, #0]
 80189d6:	bd38      	pop	{r3, r4, r5, pc}
 80189d8:	2000cfc8 	.word	0x2000cfc8

080189dc <abort>:
 80189dc:	b508      	push	{r3, lr}
 80189de:	2006      	movs	r0, #6
 80189e0:	f000 f8da 	bl	8018b98 <raise>
 80189e4:	2001      	movs	r0, #1
 80189e6:	f7e8 fb41 	bl	800106c <_exit>
	...

080189ec <_free_r>:
 80189ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80189ee:	2900      	cmp	r1, #0
 80189f0:	d044      	beq.n	8018a7c <_free_r+0x90>
 80189f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189f6:	9001      	str	r0, [sp, #4]
 80189f8:	2b00      	cmp	r3, #0
 80189fa:	f1a1 0404 	sub.w	r4, r1, #4
 80189fe:	bfb8      	it	lt
 8018a00:	18e4      	addlt	r4, r4, r3
 8018a02:	f7ff fba5 	bl	8018150 <__malloc_lock>
 8018a06:	4a1e      	ldr	r2, [pc, #120]	; (8018a80 <_free_r+0x94>)
 8018a08:	9801      	ldr	r0, [sp, #4]
 8018a0a:	6813      	ldr	r3, [r2, #0]
 8018a0c:	b933      	cbnz	r3, 8018a1c <_free_r+0x30>
 8018a0e:	6063      	str	r3, [r4, #4]
 8018a10:	6014      	str	r4, [r2, #0]
 8018a12:	b003      	add	sp, #12
 8018a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a18:	f7ff bba0 	b.w	801815c <__malloc_unlock>
 8018a1c:	42a3      	cmp	r3, r4
 8018a1e:	d908      	bls.n	8018a32 <_free_r+0x46>
 8018a20:	6825      	ldr	r5, [r4, #0]
 8018a22:	1961      	adds	r1, r4, r5
 8018a24:	428b      	cmp	r3, r1
 8018a26:	bf01      	itttt	eq
 8018a28:	6819      	ldreq	r1, [r3, #0]
 8018a2a:	685b      	ldreq	r3, [r3, #4]
 8018a2c:	1949      	addeq	r1, r1, r5
 8018a2e:	6021      	streq	r1, [r4, #0]
 8018a30:	e7ed      	b.n	8018a0e <_free_r+0x22>
 8018a32:	461a      	mov	r2, r3
 8018a34:	685b      	ldr	r3, [r3, #4]
 8018a36:	b10b      	cbz	r3, 8018a3c <_free_r+0x50>
 8018a38:	42a3      	cmp	r3, r4
 8018a3a:	d9fa      	bls.n	8018a32 <_free_r+0x46>
 8018a3c:	6811      	ldr	r1, [r2, #0]
 8018a3e:	1855      	adds	r5, r2, r1
 8018a40:	42a5      	cmp	r5, r4
 8018a42:	d10b      	bne.n	8018a5c <_free_r+0x70>
 8018a44:	6824      	ldr	r4, [r4, #0]
 8018a46:	4421      	add	r1, r4
 8018a48:	1854      	adds	r4, r2, r1
 8018a4a:	42a3      	cmp	r3, r4
 8018a4c:	6011      	str	r1, [r2, #0]
 8018a4e:	d1e0      	bne.n	8018a12 <_free_r+0x26>
 8018a50:	681c      	ldr	r4, [r3, #0]
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	6053      	str	r3, [r2, #4]
 8018a56:	440c      	add	r4, r1
 8018a58:	6014      	str	r4, [r2, #0]
 8018a5a:	e7da      	b.n	8018a12 <_free_r+0x26>
 8018a5c:	d902      	bls.n	8018a64 <_free_r+0x78>
 8018a5e:	230c      	movs	r3, #12
 8018a60:	6003      	str	r3, [r0, #0]
 8018a62:	e7d6      	b.n	8018a12 <_free_r+0x26>
 8018a64:	6825      	ldr	r5, [r4, #0]
 8018a66:	1961      	adds	r1, r4, r5
 8018a68:	428b      	cmp	r3, r1
 8018a6a:	bf04      	itt	eq
 8018a6c:	6819      	ldreq	r1, [r3, #0]
 8018a6e:	685b      	ldreq	r3, [r3, #4]
 8018a70:	6063      	str	r3, [r4, #4]
 8018a72:	bf04      	itt	eq
 8018a74:	1949      	addeq	r1, r1, r5
 8018a76:	6021      	streq	r1, [r4, #0]
 8018a78:	6054      	str	r4, [r2, #4]
 8018a7a:	e7ca      	b.n	8018a12 <_free_r+0x26>
 8018a7c:	b003      	add	sp, #12
 8018a7e:	bd30      	pop	{r4, r5, pc}
 8018a80:	2000d110 	.word	0x2000d110

08018a84 <__swhatbuf_r>:
 8018a84:	b570      	push	{r4, r5, r6, lr}
 8018a86:	460c      	mov	r4, r1
 8018a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018a8c:	2900      	cmp	r1, #0
 8018a8e:	b096      	sub	sp, #88	; 0x58
 8018a90:	4615      	mov	r5, r2
 8018a92:	461e      	mov	r6, r3
 8018a94:	da0d      	bge.n	8018ab2 <__swhatbuf_r+0x2e>
 8018a96:	89a3      	ldrh	r3, [r4, #12]
 8018a98:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018a9c:	f04f 0100 	mov.w	r1, #0
 8018aa0:	bf0c      	ite	eq
 8018aa2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018aa6:	2340      	movne	r3, #64	; 0x40
 8018aa8:	2000      	movs	r0, #0
 8018aaa:	6031      	str	r1, [r6, #0]
 8018aac:	602b      	str	r3, [r5, #0]
 8018aae:	b016      	add	sp, #88	; 0x58
 8018ab0:	bd70      	pop	{r4, r5, r6, pc}
 8018ab2:	466a      	mov	r2, sp
 8018ab4:	f000 f878 	bl	8018ba8 <_fstat_r>
 8018ab8:	2800      	cmp	r0, #0
 8018aba:	dbec      	blt.n	8018a96 <__swhatbuf_r+0x12>
 8018abc:	9901      	ldr	r1, [sp, #4]
 8018abe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018ac2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018ac6:	4259      	negs	r1, r3
 8018ac8:	4159      	adcs	r1, r3
 8018aca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018ace:	e7eb      	b.n	8018aa8 <__swhatbuf_r+0x24>

08018ad0 <__smakebuf_r>:
 8018ad0:	898b      	ldrh	r3, [r1, #12]
 8018ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018ad4:	079d      	lsls	r5, r3, #30
 8018ad6:	4606      	mov	r6, r0
 8018ad8:	460c      	mov	r4, r1
 8018ada:	d507      	bpl.n	8018aec <__smakebuf_r+0x1c>
 8018adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018ae0:	6023      	str	r3, [r4, #0]
 8018ae2:	6123      	str	r3, [r4, #16]
 8018ae4:	2301      	movs	r3, #1
 8018ae6:	6163      	str	r3, [r4, #20]
 8018ae8:	b002      	add	sp, #8
 8018aea:	bd70      	pop	{r4, r5, r6, pc}
 8018aec:	ab01      	add	r3, sp, #4
 8018aee:	466a      	mov	r2, sp
 8018af0:	f7ff ffc8 	bl	8018a84 <__swhatbuf_r>
 8018af4:	9900      	ldr	r1, [sp, #0]
 8018af6:	4605      	mov	r5, r0
 8018af8:	4630      	mov	r0, r6
 8018afa:	f7ff faa9 	bl	8018050 <_malloc_r>
 8018afe:	b948      	cbnz	r0, 8018b14 <__smakebuf_r+0x44>
 8018b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018b04:	059a      	lsls	r2, r3, #22
 8018b06:	d4ef      	bmi.n	8018ae8 <__smakebuf_r+0x18>
 8018b08:	f023 0303 	bic.w	r3, r3, #3
 8018b0c:	f043 0302 	orr.w	r3, r3, #2
 8018b10:	81a3      	strh	r3, [r4, #12]
 8018b12:	e7e3      	b.n	8018adc <__smakebuf_r+0xc>
 8018b14:	89a3      	ldrh	r3, [r4, #12]
 8018b16:	6020      	str	r0, [r4, #0]
 8018b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b1c:	81a3      	strh	r3, [r4, #12]
 8018b1e:	9b00      	ldr	r3, [sp, #0]
 8018b20:	6163      	str	r3, [r4, #20]
 8018b22:	9b01      	ldr	r3, [sp, #4]
 8018b24:	6120      	str	r0, [r4, #16]
 8018b26:	b15b      	cbz	r3, 8018b40 <__smakebuf_r+0x70>
 8018b28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b2c:	4630      	mov	r0, r6
 8018b2e:	f000 f84d 	bl	8018bcc <_isatty_r>
 8018b32:	b128      	cbz	r0, 8018b40 <__smakebuf_r+0x70>
 8018b34:	89a3      	ldrh	r3, [r4, #12]
 8018b36:	f023 0303 	bic.w	r3, r3, #3
 8018b3a:	f043 0301 	orr.w	r3, r3, #1
 8018b3e:	81a3      	strh	r3, [r4, #12]
 8018b40:	89a3      	ldrh	r3, [r4, #12]
 8018b42:	431d      	orrs	r5, r3
 8018b44:	81a5      	strh	r5, [r4, #12]
 8018b46:	e7cf      	b.n	8018ae8 <__smakebuf_r+0x18>

08018b48 <_raise_r>:
 8018b48:	291f      	cmp	r1, #31
 8018b4a:	b538      	push	{r3, r4, r5, lr}
 8018b4c:	4604      	mov	r4, r0
 8018b4e:	460d      	mov	r5, r1
 8018b50:	d904      	bls.n	8018b5c <_raise_r+0x14>
 8018b52:	2316      	movs	r3, #22
 8018b54:	6003      	str	r3, [r0, #0]
 8018b56:	f04f 30ff 	mov.w	r0, #4294967295
 8018b5a:	bd38      	pop	{r3, r4, r5, pc}
 8018b5c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018b5e:	b112      	cbz	r2, 8018b66 <_raise_r+0x1e>
 8018b60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018b64:	b94b      	cbnz	r3, 8018b7a <_raise_r+0x32>
 8018b66:	4620      	mov	r0, r4
 8018b68:	f000 f852 	bl	8018c10 <_getpid_r>
 8018b6c:	462a      	mov	r2, r5
 8018b6e:	4601      	mov	r1, r0
 8018b70:	4620      	mov	r0, r4
 8018b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018b76:	f000 b839 	b.w	8018bec <_kill_r>
 8018b7a:	2b01      	cmp	r3, #1
 8018b7c:	d00a      	beq.n	8018b94 <_raise_r+0x4c>
 8018b7e:	1c59      	adds	r1, r3, #1
 8018b80:	d103      	bne.n	8018b8a <_raise_r+0x42>
 8018b82:	2316      	movs	r3, #22
 8018b84:	6003      	str	r3, [r0, #0]
 8018b86:	2001      	movs	r0, #1
 8018b88:	e7e7      	b.n	8018b5a <_raise_r+0x12>
 8018b8a:	2400      	movs	r4, #0
 8018b8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018b90:	4628      	mov	r0, r5
 8018b92:	4798      	blx	r3
 8018b94:	2000      	movs	r0, #0
 8018b96:	e7e0      	b.n	8018b5a <_raise_r+0x12>

08018b98 <raise>:
 8018b98:	4b02      	ldr	r3, [pc, #8]	; (8018ba4 <raise+0xc>)
 8018b9a:	4601      	mov	r1, r0
 8018b9c:	6818      	ldr	r0, [r3, #0]
 8018b9e:	f7ff bfd3 	b.w	8018b48 <_raise_r>
 8018ba2:	bf00      	nop
 8018ba4:	2000009c 	.word	0x2000009c

08018ba8 <_fstat_r>:
 8018ba8:	b538      	push	{r3, r4, r5, lr}
 8018baa:	4d07      	ldr	r5, [pc, #28]	; (8018bc8 <_fstat_r+0x20>)
 8018bac:	2300      	movs	r3, #0
 8018bae:	4604      	mov	r4, r0
 8018bb0:	4608      	mov	r0, r1
 8018bb2:	4611      	mov	r1, r2
 8018bb4:	602b      	str	r3, [r5, #0]
 8018bb6:	f7e8 faa8 	bl	800110a <_fstat>
 8018bba:	1c43      	adds	r3, r0, #1
 8018bbc:	d102      	bne.n	8018bc4 <_fstat_r+0x1c>
 8018bbe:	682b      	ldr	r3, [r5, #0]
 8018bc0:	b103      	cbz	r3, 8018bc4 <_fstat_r+0x1c>
 8018bc2:	6023      	str	r3, [r4, #0]
 8018bc4:	bd38      	pop	{r3, r4, r5, pc}
 8018bc6:	bf00      	nop
 8018bc8:	2000cfc8 	.word	0x2000cfc8

08018bcc <_isatty_r>:
 8018bcc:	b538      	push	{r3, r4, r5, lr}
 8018bce:	4d06      	ldr	r5, [pc, #24]	; (8018be8 <_isatty_r+0x1c>)
 8018bd0:	2300      	movs	r3, #0
 8018bd2:	4604      	mov	r4, r0
 8018bd4:	4608      	mov	r0, r1
 8018bd6:	602b      	str	r3, [r5, #0]
 8018bd8:	f7e8 faa7 	bl	800112a <_isatty>
 8018bdc:	1c43      	adds	r3, r0, #1
 8018bde:	d102      	bne.n	8018be6 <_isatty_r+0x1a>
 8018be0:	682b      	ldr	r3, [r5, #0]
 8018be2:	b103      	cbz	r3, 8018be6 <_isatty_r+0x1a>
 8018be4:	6023      	str	r3, [r4, #0]
 8018be6:	bd38      	pop	{r3, r4, r5, pc}
 8018be8:	2000cfc8 	.word	0x2000cfc8

08018bec <_kill_r>:
 8018bec:	b538      	push	{r3, r4, r5, lr}
 8018bee:	4d07      	ldr	r5, [pc, #28]	; (8018c0c <_kill_r+0x20>)
 8018bf0:	2300      	movs	r3, #0
 8018bf2:	4604      	mov	r4, r0
 8018bf4:	4608      	mov	r0, r1
 8018bf6:	4611      	mov	r1, r2
 8018bf8:	602b      	str	r3, [r5, #0]
 8018bfa:	f7e8 fa25 	bl	8001048 <_kill>
 8018bfe:	1c43      	adds	r3, r0, #1
 8018c00:	d102      	bne.n	8018c08 <_kill_r+0x1c>
 8018c02:	682b      	ldr	r3, [r5, #0]
 8018c04:	b103      	cbz	r3, 8018c08 <_kill_r+0x1c>
 8018c06:	6023      	str	r3, [r4, #0]
 8018c08:	bd38      	pop	{r3, r4, r5, pc}
 8018c0a:	bf00      	nop
 8018c0c:	2000cfc8 	.word	0x2000cfc8

08018c10 <_getpid_r>:
 8018c10:	f7e8 ba12 	b.w	8001038 <_getpid>

08018c14 <_init>:
 8018c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c16:	bf00      	nop
 8018c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c1a:	bc08      	pop	{r3}
 8018c1c:	469e      	mov	lr, r3
 8018c1e:	4770      	bx	lr

08018c20 <_fini>:
 8018c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018c22:	bf00      	nop
 8018c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018c26:	bc08      	pop	{r3}
 8018c28:	469e      	mov	lr, r3
 8018c2a:	4770      	bx	lr
